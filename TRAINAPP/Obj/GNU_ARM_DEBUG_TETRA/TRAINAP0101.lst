
Obj/GNU_ARM_DEBUG_TETRA/TRAINAP0101.axf:     file format elf32-littlearm

SYMBOL TABLE:
00008134 l    d  .interp	00000000              .interp
00008148 l    d  .note.ABI-tag	00000000              .note.ABI-tag
00008168 l    d  .hash	00000000              .hash
000082e0 l    d  .dynsym	00000000              .dynsym
00008650 l    d  .dynstr	00000000              .dynstr
0000894a l    d  .gnu.version	00000000              .gnu.version
000089b8 l    d  .gnu.version_r	00000000              .gnu.version_r
00008a08 l    d  .rel.dyn	00000000              .rel.dyn
00008a30 l    d  .rel.plt	00000000              .rel.plt
00008b60 l    d  .init	00000000              .init
00008b6c l    d  .plt	00000000              .plt
00008d54 l    d  .text	00000000              .text
0002251c l    d  .fini	00000000              .fini
00022524 l    d  .rodata	00000000              .rodata
00026550 l    d  .ARM.exidx	00000000              .ARM.exidx
00026558 l    d  .eh_frame	00000000              .eh_frame
0002f000 l    d  .init_array	00000000              .init_array
0002f008 l    d  .fini_array	00000000              .fini_array
0002f014 l    d  .jcr	00000000              .jcr
0002f018 l    d  .dynamic	00000000              .dynamic
0002f118 l    d  .got	00000000              .got
0002f230 l    d  .data	00000000              .data
0002fee0 l    d  .bss	00000000              .bss
00000000 l    d  .comment	00000000              .comment
00000000 l    d  .ARM.attributes	00000000              .ARM.attributes
00000000 l    d  .debug_aranges	00000000              .debug_aranges
00000000 l    d  .debug_info	00000000              .debug_info
00000000 l    d  .debug_abbrev	00000000              .debug_abbrev
00000000 l    d  .debug_line	00000000              .debug_line
00000000 l    d  .debug_frame	00000000              .debug_frame
00000000 l    d  .debug_str	00000000              .debug_str
00000000 l    d  .debug_loc	00000000              .debug_loc
00000000 l    d  .debug_ranges	00000000              .debug_ranges
00008e6c l     F .text	00000000              call_gmon_start
00000000 l    df *ABS*	00000000              init.c
00000000 l    df *ABS*	00000000              stapp_legacyexitpoint.c
000264b0 l     O .rodata	00000018              __FUNCTION__.7509
00000000 l    df *ABS*	00000000              startup_tplusentry.c
00000000 l    df *ABS*	00000000              crtstuff.c
0002f014 l     O .jcr	00000000              __JCR_LIST__
00008ecc l     F .text	00000000              deregister_tm_clones
00008f04 l     F .text	00000000              register_tm_clones
00008f48 l     F .text	00000000              __do_global_dtors_aux
0002fee4 l     O .bss	00000001              completed.9454
0002f010 l     O .fini_array	00000000              __do_global_dtors_aux_fini_array_entry
00008f70 l     F .text	00000000              frame_dummy
0002f004 l     O .init_array	00000000              __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000              Main.c
00000000 l    df *ABS*	00000000              Entry.c
0002feec l     O .bss	00000020              xCfg
0002ff0c l     O .bss	00000004              ulSize
0002f238 l     O .data	00000108              Services
0002ff10 l     O .bss	00000015              appName
0002ff28 l     O .bss	00000015              fileName
00022528 l     O .rodata	00000013              timeToCall
0002253c l     O .rodata	0000001f              idleMsg
0002255c l     O .rodata	00000020              szDate
0000927c l     F .text	0000003e              Progress
0002257c l       .rodata	00000000              .LC0
00022588 l       .rodata	00000000              .LC1
0002258c l       .rodata	00000000              .LC2
000225ac l       .rodata	00000000              .LC3
000225c4 l       .rodata	00000000              .LC4
000225e8 l       .rodata	00000000              .LC5
00022604 l       .rodata	00000000              .LC6
0002260c l       .rodata	00000000              .LC7
00022610 l       .rodata	00000000              .LC8
00022618 l       .rodata	00000000              .LC9
0002261c l       .rodata	00000000              .LC10
00022624 l       .rodata	00000000              .LC11
00022664 l       .rodata	00000000              .LC12
00022674 l       .rodata	00000000              .LC13
00022684 l       .rodata	00000000              .LC14
000226f8 l       .rodata	00000000              .LC15
00022770 l       .rodata	00000000              .LC16
00022774 l       .rodata	00000000              .LC17
00022788 l       .rodata	00000000              .LC18
0002278c l       .rodata	00000000              .LC19
000227a4 l       .rodata	00000000              .LC20
000227ac l       .rodata	00000000              .LC21
000227b0 l       .rodata	00000000              .LC22
000227b4 l       .rodata	00000000              .LC23
000227c4 l       .rodata	00000000              .LC24
000227d4 l       .rodata	00000000              .LC25
000227e8 l       .rodata	00000000              .LC26
000227f4 l       .rodata	00000000              .LC27
00022800 l       .rodata	00000000              .LC28
00022808 l       .rodata	00000000              .LC29
00022810 l       .rodata	00000000              .LC30
00022824 l       .rodata	00000000              .LC31
00022834 l       .rodata	00000000              .LC32
0002283c l       .rodata	00000000              .LC33
00022850 l       .rodata	00000000              .LC34
00000000 l    df *ABS*	00000000              Menu.c
0002ff48 l     O .bss	00000004              sKeyboard
0002ff4c l     O .bss	00000004              sDisplay
00022868 l       .rodata	00000000              .LC8
00022870 l       .rodata	00000000              .LC9
00022884 l       .rodata	00000000              .LC10
0002289c l       .rodata	00000000              .LC11
000228b0 l       .rodata	00000000              .LC12
000228c8 l       .rodata	00000000              .LC3
000228d4 l       .rodata	00000000              .LC13
000228ec l       .rodata	00000000              .LC14
000228f8 l       .rodata	00000000              .LC15
0002295c l       .rodata	00000000              .LC7
00022978 l       .rodata	00000000              .LC16
00022980 l       .rodata	00000000              .LC17
00022984 l       .rodata	00000000              .LC18
00022990 l       .rodata	00000000              .LC19
00022994 l       .rodata	00000000              .LC20
00000000 l    df *ABS*	00000000              ComGPRS.c
0002299c l     O .rodata	0000035c              txGPRS
00022cf8 l     O .rodata	00000050              xPrinter
0002f340 l     O .data	0000000c              tzRequirePin
00022d50 l       .rodata	00000000              .LC2
00022d68 l       .rodata	00000000              .LC3
00022d74 l       .rodata	00000000              .LC4
00022d88 l       .rodata	00000000              .LC5
00022da0 l       .rodata	00000000              .LC6
00022db4 l       .rodata	00000000              .LC7
00022dc8 l       .rodata	00000000              .LC8
00022ddc l       .rodata	00000000              .LC9
00022df4 l       .rodata	00000000              .LC10
00022e00 l       .rodata	00000000              .LC11
00022e18 l       .rodata	00000000              .LC12
00022e24 l       .rodata	00000000              .LC13
00022e38 l       .rodata	00000000              .LC14
00022e3c l       .rodata	00000000              .LC15
00022e48 l       .rodata	00000000              .LC16
00022e54 l       .rodata	00000000              .LC17
00022e64 l       .rodata	00000000              .LC18
00022e78 l       .rodata	00000000              .LC19
00022e90 l       .rodata	00000000              .LC20
00022ea8 l       .rodata	00000000              .LC21
00022ec0 l       .rodata	00000000              .LC22
00022ecc l       .rodata	00000000              .LC23
00022ed8 l       .rodata	00000000              .LC24
00022ee8 l       .rodata	00000000              .LC25
00022ef8 l       .rodata	00000000              .LC26
00022f0c l       .rodata	00000000              .LC27
00022f20 l       .rodata	00000000              .LC28
00022f34 l       .rodata	00000000              .LC29
0000aa40 l     F .text	00000b60              GprsReport
00022f48 l       .rodata	00000000              .LC30
0000b5a0 l     F .text	00000294              StartGPRS
0000b834 l     F .text	000001e8              OpenGPRS
0000ba1c l     F .text	0000003c              ConnectGPRS
0000ba58 l     F .text	0000005c              SendGPRS
0000bab4 l     F .text	00000160              ReceiveGPRS
0000bc14 l     F .text	0000003c              DisconnectGPRS
0000bc50 l     F .text	00000040              CloseGPRS
0000bc90 l     F .text	00000036              StopGPRS
00022f5c l       .rodata	00000000              .LC31
00022f6c l       .rodata	00000000              .LC32
00022f70 l       .rodata	00000000              .LC33
00022f7c l       .rodata	00000000              .LC34
00022f88 l       .rodata	00000000              .LC35
00022f9c l       .rodata	00000000              .LC36
00022fa8 l       .rodata	00000000              .LC37
00022fbc l       .rodata	00000000              .LC38
00022fcc l       .rodata	00000000              .LC39
00022fe8 l       .rodata	00000000              .LC40
00022ff4 l       .rodata	00000000              .LC41
00023004 l       .rodata	00000000              .LC42
0002300c l       .rodata	00000000              .LC43
00023024 l       .rodata	00000000              .LC44
00023034 l       .rodata	00000000              .LC45
00023044 l       .rodata	00000000              .LC46
0002304c l       .rodata	00000000              .LC47
0002305c l       .rodata	00000000              .LC48
0002306c l       .rodata	00000000              .LC49
0002307c l       .rodata	00000000              .LC50
0002308c l       .rodata	00000000              .LC51
0002309c l       .rodata	00000000              .LC52
000230a8 l       .rodata	00000000              .LC53
000230c0 l       .rodata	00000000              .LC54
000230cc l       .rodata	00000000              .LC55
000230dc l       .rodata	00000000              .LC56
000230e8 l       .rodata	00000000              .LC57
000230f4 l       .rodata	00000000              .LC58
00023100 l       .rodata	00000000              .LC59
00023108 l       .rodata	00000000              .LC60
0002311c l       .rodata	00000000              .LC61
00000000 l    df *ABS*	00000000              Goal.c
0000cf40 l     F .text	00000054              CallBackPressKey
0000cf94 l     F .text	0000003c              CallBackValidKey
0000cfd0 l     F .text	0000003c              CallBackCancelKey
0000d00c l     F .text	0000003c              CallBackDownKey
0000d048 l     F .text	0000003c              CallBackUpKey
0000d084 l     F .text	0000004a              CallBackTimeout
00023120 l       .rodata	00000000              .LC0
0002313c l       .rodata	00000000              .LC1
00023158 l       .rodata	00000000              .LC2
00023174 l       .rodata	00000000              .LC3
00023194 l       .rodata	00000000              .LC4
00023198 l       .rodata	00000000              .LC5
000231a0 l       .rodata	00000000              .LC6
00000000 l    df *ABS*	00000000              Mapapp.c
000231a4 l       .rodata	00000000              .LC0
000231b0 l       .rodata	00000000              .LC1
00023250 l     O .rodata	000000f8              tzApp
00023348 l     O .rodata	0000000b              zAppTab
00023354 l       .rodata	00000000              .LC18
00000000 l    df *ABS*	00000000              FMG.c
00023360 l     O .rodata	000002b0              txBatch
00023610 l     O .rodata	000004b4              txTrans
00023ac4 l     O .rodata	00000284              zBatch
0002ff50 l     O .bss	0000002c              xFileInfo
00023d48 l       .rodata	00000000              .LC0
00023d58 l       .rodata	00000000              .LC1
00023d70 l       .rodata	00000000              .LC2
00023d80 l       .rodata	00000000              .LC3
0000f9ac l     F .text	00000088              GetBatchIdx
0000fa34 l     F .text	00000070              SetBatchIdx
00023d98 l       .rodata	00000000              .LC4
00023da4 l       .rodata	00000000              .LC5
00023db8 l       .rodata	00000000              .LC6
00023dbc l       .rodata	00000000              .LC7
00023dcc l       .rodata	00000000              .LC8
00023ddc l       .rodata	00000000              .LC9
00023de8 l       .rodata	00000000              .LC10
00023e00 l       .rodata	00000000              .LC11
00023e18 l       .rodata	00000000              .LC12
00023e30 l       .rodata	00000000              .LC13
00023e44 l       .rodata	00000000              .LC14
00023e50 l       .rodata	00000000              .LC15
00023e5c l       .rodata	00000000              .LC16
00023e70 l       .rodata	00000000              .LC17
00023e7c l       .rodata	00000000              .LC18
00023e8c l       .rodata	00000000              .LC19
00023e98 l       .rodata	00000000              .LC20
00000000 l    df *ABS*	00000000              Utility.c
0002f34c l     O .data	00000014              tzConverter
0002ff7c l     O .bss	00000010              tcIp
00023ed4 l       .rodata	00000000              .LC5
00023ee4 l       .rodata	00000000              .LC6
00023efc l       .rodata	00000000              .LC7
00023f14 l       .rodata	00000000              .LC8
00023f24 l       .rodata	00000000              .LC9
00023f34 l       .rodata	00000000              .LC10
00023f4c l       .rodata	00000000              .LC11
00023f60 l       .rodata	00000000              .LC12
00023f74 l       .rodata	00000000              .LC13
00023f80 l       .rodata	00000000              .LC14
00023f9c l       .rodata	00000000              .LC15
00023fb8 l       .rodata	00000000              .LC16
00023fd4 l       .rodata	00000000              .LC17
00023ff0 l       .rodata	00000000              .LC18
00024004 l       .rodata	00000000              .LC19
00024014 l       .rodata	00000000              .LC20
00024024 l       .rodata	00000000              .LC21
00024034 l       .rodata	00000000              .LC22
00024044 l       .rodata	00000000              .LC23
0002405c l       .rodata	00000000              .LC24
00024070 l       .rodata	00000000              .LC25
00024080 l       .rodata	00000000              .LC26
00024090 l       .rodata	00000000              .LC27
00024094 l       .rodata	00000000              .LC28
0002409c l       .rodata	00000000              .LC29
000240a8 l       .rodata	00000000              .LC30
000240b8 l       .rodata	00000000              .LC31
000240cc l       .rodata	00000000              .LC32
000240dc l       .rodata	00000000              .LC33
000240f0 l       .rodata	00000000              .LC34
00024100 l       .rodata	00000000              .LC35
00024110 l       .rodata	00000000              .LC36
0002411c l       .rodata	00000000              .LC37
00024128 l       .rodata	00000000              .LC38
0002413c l       .rodata	00000000              .LC39
00024150 l       .rodata	00000000              .LC40
00024164 l       .rodata	00000000              .LC41
00024170 l       .rodata	00000000              .LC42
00024180 l       .rodata	00000000              .LC43
00024190 l       .rodata	00000000              .LC44
000241a0 l       .rodata	00000000              .LC45
000241b0 l       .rodata	00000000              .LC46
000241c0 l       .rodata	00000000              .LC47
000241d0 l       .rodata	00000000              .LC48
000241e0 l       .rodata	00000000              .LC49
000241ec l       .rodata	00000000              .LC50
000241fc l       .rodata	00000000              .LC51
00024208 l       .rodata	00000000              .LC52
00024210 l       .rodata	00000000              .LC53
00024220 l       .rodata	00000000              .LC54
0002422c l       .rodata	00000000              .LC55
00024240 l       .rodata	00000000              .LC56
00024250 l       .rodata	00000000              .LC57
00024260 l       .rodata	00000000              .LC58
00024270 l       .rodata	00000000              .LC59
00024280 l       .rodata	00000000              .LC60
00024294 l       .rodata	00000000              .LC61
000242a4 l       .rodata	00000000              .LC62
000242b8 l       .rodata	00000000              .LC63
000242cc l       .rodata	00000000              .LC64
000242e0 l       .rodata	00000000              .LC65
000242f0 l       .rodata	00000000              .LC66
000242f8 l       .rodata	00000000              .LC67
00024308 l       .rodata	00000000              .LC68
00024318 l       .rodata	00000000              .LC69
00024328 l       .rodata	00000000              .LC70
00024338 l       .rodata	00000000              .LC71
00024348 l       .rodata	00000000              .LC72
0002435c l       .rodata	00000000              .LC73
0002436c l       .rodata	00000000              .LC74
00024378 l       .rodata	00000000              .LC75
00024384 l       .rodata	00000000              .LC76
00024390 l       .rodata	00000000              .LC77
0002439c l       .rodata	00000000              .LC78
000243ac l       .rodata	00000000              .LC79
000243bc l       .rodata	00000000              .LC80
000243cc l       .rodata	00000000              .LC81
000243dc l       .rodata	00000000              .LC82
000243ec l       .rodata	00000000              .LC83
000243fc l       .rodata	00000000              .LC84
0002440c l       .rodata	00000000              .LC85
00024420 l       .rodata	00000000              .LC86
00024430 l       .rodata	00000000              .LC87
00024444 l       .rodata	00000000              .LC88
00024454 l       .rodata	00000000              .LC89
0002445c l       .rodata	00000000              .LC90
00024468 l       .rodata	00000000              .LC91
00024470 l       .rodata	00000000              .LC92
00024480 l       .rodata	00000000              .LC93
00024494 l       .rodata	00000000              .LC94
000244b4 l       .rodata	00000000              .LC95
000244c4 l       .rodata	00000000              .LC96
000244d4 l       .rodata	00000000              .LC97
000244e4 l       .rodata	00000000              .LC98
000244f0 l       .rodata	00000000              .LC99
00024500 l       .rodata	00000000              .LC100
00024510 l       .rodata	00000000              .LC101
00024520 l       .rodata	00000000              .LC102
00024530 l       .rodata	00000000              .LC103
00024540 l       .rodata	00000000              .LC104
0002454c l       .rodata	00000000              .LC105
0002455c l       .rodata	00000000              .LC106
0002456c l       .rodata	00000000              .LC107
0002457c l       .rodata	00000000              .LC108
0002458c l       .rodata	00000000              .LC109
0002459c l       .rodata	00000000              .LC110
000245b0 l       .rodata	00000000              .LC111
000245b8 l       .rodata	00000000              .LC112
000245cc l       .rodata	00000000              .LC113
000245d8 l       .rodata	00000000              .LC114
000245e8 l       .rodata	00000000              .LC115
000245f4 l       .rodata	00000000              .LC116
00024604 l       .rodata	00000000              .LC117
00024614 l       .rodata	00000000              .LC118
00024624 l       .rodata	00000000              .LC119
00024634 l       .rodata	00000000              .LC120
00024644 l       .rodata	00000000              .LC121
00024654 l       .rodata	00000000              .LC122
00010e88 l     F .text	0000006c              BitOn
00010ef4 l     F .text	00000070              BitOff
00010f64 l     F .text	00000068              BitTest
00024658 l       .rodata	00000000              .LC123
00000000 l    df *ABS*	00000000              Timer.c
00024664 l     O .rodata	00000204              txCounter
0002ff90 l     O .bss	00000020              tllTimer
00024868 l       .rodata	00000000              .LC0
00024878 l       .rodata	00000000              .LC1
00024888 l       .rodata	00000000              .LC2
00024894 l       .rodata	00000000              .LC3
000248a8 l       .rodata	00000000              .LC4
00000000 l    df *ABS*	00000000              iso8583.c
0002f360 l     O .data	00000200              fmt
0002f560 l     O .data	00000200              fmt_Gateway
00000000 l    df *ABS*	00000000              transaction.c
0002ffb0 l     O .bss	00000001              LocationType
0002ffb4 l     O .bss	00000004              thereis_F
0001183c l     F .text	000000f2              getPanVal
00011930 l     F .text	0000009e              getAmt
000119d0 l     F .text	00000066              getPIN
000248bc l       .rodata	00000000              .LC0
00011a38 l     F .text	0000009a              getPrcCod
00011ad4 l     F .text	00000202              getTrack2
00011cd8 l     F .text	00000152              getFld
00011f30 l     F .text	000001fe              appFld
000248c4 l       .rodata	00000000              .LC1
000248cc l       .rodata	00000000              .LC2
00000000 l    df *ABS*	00000000              globals.c
0002ffb8 l     O .bss	00000020              timer
0002ffde l     O .bss	00000001              x.19529
0002ffdc l     O .bss	00000002              x.19533
0002ffd8 l     O .bss	00000004              x.19537
00012590 l     F .text	00000058              getNumLen
000126ac l     F .text	0000013a              chr2nib
000127e8 l     F .text	00000048              nib2chr
000248e0 l       .rodata	00000000              .LC2
000248e4 l       .rodata	00000000              .LC3
0001478c l     F .text	000000d8              negStr
00014864 l     F .text	00000048              neg2sup
000148ac l     F .text	000000ac              sup2neg
000248f0 l       .rodata	00000000              .LC4
00014958 l     F .text	00000168              addSup
0001511c l     F .text	0000059e              justdes2
00024b6c l     O .rodata	00000100              s.20196
000157fc l     F .text	00000084              hashJerkins
000248f4 l       .rodata	00000000              .LC1
00024934 l       .rodata	00000000              .LC0
00015e14 l     F .text	00000060              GetIndex
00024a34 l       .rodata	00000000              .LC5
00024a5c l       .rodata	00000000              .LC6
00024a68 l       .rodata	00000000              .LC7
00015ff4 l     F .text	000000de              date_to_jdn
000160d4 l     F .text	00000142              jdn_to_date
00024a74 l       .rodata	00000000              .LC8
000166a8 l     F .text	00000084              yisleap
0001672c l     F .text	0000005e              get_yday
00024b04 l     O .rodata	00000068              days.20433
00024a90 l       .rodata	00000000              .LC9
00024aac l       .rodata	00000000              .LC10
00024ab0 l       .rodata	00000000              .LC11
00024ab4 l       .rodata	00000000              .LC12
00024ab8 l       .rodata	00000000              .LC13
00024abc l       .rodata	00000000              .LC14
00024ac0 l       .rodata	00000000              .LC15
00024ac4 l       .rodata	00000000              .LC16
00024ac8 l       .rodata	00000000              .LC17
00024acc l       .rodata	00000000              .LC18
00024ad0 l       .rodata	00000000              .LC19
00024ad4 l       .rodata	00000000              .LC20
00024ad8 l       .rodata	00000000              .LC21
000168e0 l     F .text	00000130              getMonthName
00024adc l       .rodata	00000000              .LC22
00024ae0 l       .rodata	00000000              .LC23
00024aec l       .rodata	00000000              .LC24
00024af4 l       .rodata	00000000              .LC25
00024af8 l       .rodata	00000000              .LC26
00000000 l    df *ABS*	00000000              magnetic.c
00024c6c l     O .rodata	00000204              txMagnetic
00024e70 l     O .rodata	00000408              txTrack
00025278 l     O .rodata	00000050              xPrinter
000252c8 l       .rodata	00000000              .LC0
000252d8 l       .rodata	00000000              .LC1
000252e8 l       .rodata	00000000              .LC2
000252f4 l       .rodata	00000000              .LC3
00025300 l       .rodata	00000000              .LC4
00025310 l       .rodata	00000000              .LC5
00025324 l       .rodata	00000000              .LC6
00025334 l       .rodata	00000000              .LC7
0002533c l       .rodata	00000000              .LC8
00025340 l       .rodata	00000000              .LC9
00025348 l       .rodata	00000000              .LC10
00025350 l       .rodata	00000000              .LC11
00025360 l       .rodata	00000000              .LC12
00025370 l       .rodata	00000000              .LC13
00000000 l    df *ABS*	00000000              schemes.c
00025384 l     O .rodata	00000408              txSec
0002578c l     O .rodata	00000204              txPin
00025990 l     O .rodata	00000158              txResult
00025ae8 l     O .rodata	00000050              xPrinter
0002f760 l     O .data	0000000c              tzMenuChoice
00025b80 l       .rodata	00000000              .LC3
00025b88 l       .rodata	00000000              .LC4
00025b90 l       .rodata	00000000              .LC5
00025b98 l       .rodata	00000000              .LC6
00025ba0 l       .rodata	00000000              .LC7
00025ba8 l       .rodata	00000000              .LC8
00025bb0 l       .rodata	00000000              .LC9
00025bb8 l       .rodata	00000000              .LC10
00025bc8 l       .rodata	00000000              .LC11
00025bf0 l       .rodata	00000000              .LC12
00025c04 l       .rodata	00000000              .LC13
000174c0 l     F .text	00000302              ChkPpdConfig
00025d24 l       .rodata	00000000              .LC14
00017850 l     F .text	00000082              IsPinOnPpd
000178d4 l     F .text	000000d6              AreaId
00025d30 l       .rodata	00000000              .LC15
00025d54 l       .rodata	00000000              .LC16
00025d70 l       .rodata	00000000              .LC17
000179ac l     F .text	0000052c              PinEntry
00025d8c l       .rodata	00000000              .LC18
00025d98 l       .rodata	00000000              .LC19
00025da4 l       .rodata	00000000              .LC20
00025db4 l       .rodata	00000000              .LC21
00025dc8 l       .rodata	00000000              .LC22
00025dd0 l       .rodata	00000000              .LC23
00025df0 l       .rodata	00000000              .LC24
00025e00 l       .rodata	00000000              .LC25
00025e14 l       .rodata	00000000              .LC26
00025e28 l       .rodata	00000000              .LC27
00025e44 l       .rodata	00000000              .LC28
00025e70 l       .rodata	00000000              .LC29
00025e80 l       .rodata	00000000              .LC30
00025e90 l       .rodata	00000000              .LC31
00025ea0 l       .rodata	00000000              .LC32
00025ea8 l       .rodata	00000000              .LC33
00025eb4 l       .rodata	00000000              .LC34
00025ec8 l       .rodata	00000000              .LC35
00025ee0 l       .rodata	00000000              .LC36
00025ef8 l       .rodata	00000000              .LC37
00025efc l       .rodata	00000000              .LC38
00025f14 l       .rodata	00000000              .LC39
00025f28 l       .rodata	00000000              .LC40
00025f40 l       .rodata	00000000              .LC41
00025f64 l       .rodata	00000000              .LC42
00025f90 l       .rodata	00000000              .LC43
00025fa4 l       .rodata	00000000              .LC44
00025fb8 l       .rodata	00000000              .LC45
00025fbc l       .rodata	00000000              .LC46
00025fc4 l       .rodata	00000000              .LC47
00025fcc l       .rodata	00000000              .LC48
00025fdc l       .rodata	00000000              .LC49
00026004 l       .rodata	00000000              .LC50
0002601c l       .rodata	00000000              .LC51
00026034 l       .rodata	00000000              .LC52
00026060 l       .rodata	00000000              .LC53
00019080 l     F .text	0000006c              Iso9564PinCiphering
0002608c l       .rodata	00000000              .LC54
000260a0 l       .rodata	00000000              .LC55
000260a8 l       .rodata	00000000              .LC56
000260bc l       .rodata	00000000              .LC57
000260d0 l       .rodata	00000000              .LC58
000260dc l       .rodata	00000000              .LC59
000260f0 l       .rodata	00000000              .LC60
000260f8 l       .rodata	00000000              .LC61
00026108 l       .rodata	00000000              .LC62
0002612c l       .rodata	00000000              .LC63
00026150 l       .rodata	00000000              .LC64
0002615c l       .rodata	00000000              .LC65
00026164 l       .rodata	00000000              .LC66
00026174 l       .rodata	00000000              .LC67
00026184 l       .rodata	00000000              .LC68
00026190 l       .rodata	00000000              .LC69
000261e8 l       .rodata	00000000              .LC70
0002620c l       .rodata	00000000              .LC71
00026220 l       .rodata	00000000              .LC0
00000000 l    df *ABS*	00000000              amount.c
00026238 l       .rodata	00000000              .LC1
0002623c l       .rodata	00000000              .LC2
00026244 l       .rodata	00000000              .LC0
00000000 l    df *ABS*	00000000              VGE_FMG.c
0002ffe0 l     O .bss	00000011              g_acDisKLabel
00000000 l    df *ABS*	00000000              md5.c
0001e3cc l     F .text	00000d60              md5_process
0002630c l     O .rodata	00000004              w.5151
000262cc l     O .rodata	00000040              pad.5177
00000001 l       *ABS*	00000000              __TELIUM3__
0002f780 l       .data	00000000              gprs_GetInformation_Callback
0001f388 l     F .text	00000000              gprs_GetInformation_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f790 l       .data	00000000              gprs_SetPinModeFree_Callback
0001f3ac l     F .text	00000000              gprs_SetPinModeFree_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f7a0 l       .data	00000000              gprs_SubmitPuk_Callback
0001f3d0 l     F .text	00000000              gprs_SubmitPuk_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fff4 l     O .bss	00000004              LIBGPRS_Dll
0002fff8 l     O .bss	00000004              LIBGPRS_present
00000001 l       *ABS*	00000000              __TELIUM3__
0002f7b0 l       .data	00000000              LL_ClearReceiveBuffer_Callback
0001f49c l     F .text	00000000              LL_ClearReceiveBuffer_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f7c0 l       .data	00000000              LL_ClearSendBuffer_Callback
0001f4c0 l     F .text	00000000              LL_ClearSendBuffer_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f7d0 l       .data	00000000              LL_Configure_Callback
0001f4e4 l     F .text	00000000              LL_Configure_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f7e0 l       .data	00000000              LL_Connect_Callback
0001f508 l     F .text	00000000              LL_Connect_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f7f0 l       .data	00000000              LL_Disconnect_Callback
0001f52c l     F .text	00000000              LL_Disconnect_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f800 l       .data	00000000              LL_GetLastError_Callback
0001f550 l     F .text	00000000              LL_GetLastError_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f810 l       .data	00000000              LL_GPRS_Connect_Callback
0001f574 l     F .text	00000000              LL_GPRS_Connect_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f820 l       .data	00000000              LL_GPRS_Start_Callback
0001f598 l     F .text	00000000              LL_GPRS_Start_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f830 l       .data	00000000              LL_GSM_Start_Callback
0001f5bc l     F .text	00000000              LL_GSM_Start_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f840 l       .data	00000000              LL_Network_GetStatus_Callback
0001f5e0 l     F .text	00000000              LL_Network_GetStatus_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f850 l       .data	00000000              LL_Receive_Callback
0001f604 l     F .text	00000000              LL_Receive_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f860 l       .data	00000000              LL_Send_Callback
0001f628 l     F .text	00000000              LL_Send_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fffc l     O .bss	00000004              LINKLAYER_Dll
00030000 l     O .bss	00000004              LINKLAYER_present
00000001 l       *ABS*	00000000              __TELIUM3__
0002f870 l       .data	00000000              TlvTree_AddChild_Callback
0001f6f4 l     F .text	00000000              TlvTree_AddChild_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f880 l       .data	00000000              TlvTree_AddChildInteger_Callback
0001f718 l     F .text	00000000              TlvTree_AddChildInteger_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f890 l       .data	00000000              TlvTree_AddChildString_Callback
0001f73c l     F .text	00000000              TlvTree_AddChildString_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f8a0 l       .data	00000000              TlvTree_New_Callback
0001f760 l     F .text	00000000              TlvTree_New_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f8b0 l       .data	00000000              TlvTree_Release_Callback
0001f784 l     F .text	00000000              TlvTree_Release_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00030004 l     O .bss	00000004              TLV_TREE_DLL_Dll
00030008 l     O .bss	00000004              TLV_TREE_DLL_present
0002f8c0 l       .data	00000004              function_var
0001f850 l       .text	00000009              function_name
0001f89c l       .text	00000000              .direct_call
0001f888 l       .text	00000000              .bad_return
0001f89a l       .text	00000000              .call_function
0001f882 l       .text	00000000              .exit_return
0001f892 l       .text	00000000              .already_initialized
0002f8c4 l       .data	00000004              function_var
0001f8b0 l       .text	00000009              function_name
0001f8fc l       .text	00000000              .direct_call
0001f8e8 l       .text	00000000              .bad_return
0001f8fa l       .text	00000000              .call_function
0001f8e2 l       .text	00000000              .exit_return
0001f8f2 l       .text	00000000              .already_initialized
0002f8c8 l       .data	00000004              function_var
0001f910 l       .text	00000008              function_name
0001f958 l       .text	00000000              .direct_call
0001f944 l       .text	00000000              .bad_return
0001f956 l       .text	00000000              .call_function
0001f93e l       .text	00000000              .exit_return
0001f94e l       .text	00000000              .already_initialized
00000000 l    df *ABS*	00000000              extenstp1.c
0002f8cc l       .data	00000004              function_var
0001f9e8 l       .text	0000000e              function_name
0001fa38 l       .text	00000000              .direct_call
0001fa24 l       .text	00000000              .bad_return
0001fa36 l       .text	00000000              .call_function
0001fa1e l       .text	00000000              .exit_return
0001fa2e l       .text	00000000              .already_initialized
0002f8d0 l       .data	00000004              function_var
0001fa4c l       .text	0000000d              function_name
0001fa9c l       .text	00000000              .direct_call
0001fa88 l       .text	00000000              .bad_return
0001fa9a l       .text	00000000              .call_function
0001fa82 l       .text	00000000              .exit_return
0001fa92 l       .text	00000000              .already_initialized
0002f8d4 l       .data	00000004              function_var
0001fab0 l       .text	0000000c              function_name
0001fafc l       .text	00000000              .direct_call
0001fae8 l       .text	00000000              .bad_return
0001fafa l       .text	00000000              .call_function
0001fae2 l       .text	00000000              .exit_return
0001faf2 l       .text	00000000              .already_initialized
0002f8d8 l       .data	00000004              function_var
0001fb10 l       .text	0000000f              function_name
0001fb60 l       .text	00000000              .direct_call
0001fb4c l       .text	00000000              .bad_return
0001fb5e l       .text	00000000              .call_function
0001fb46 l       .text	00000000              .exit_return
0001fb56 l       .text	00000000              .already_initialized
0002f8dc l       .data	00000004              function_var
0001fb74 l       .text	0000000f              function_name
0001fbc4 l       .text	00000000              .direct_call
0001fbb0 l       .text	00000000              .bad_return
0001fbc2 l       .text	00000000              .call_function
0001fbaa l       .text	00000000              .exit_return
0001fbba l       .text	00000000              .already_initialized
0002f8e0 l       .data	00000004              function_var
0001fbd8 l       .text	0000000f              function_name
0001fc28 l       .text	00000000              .direct_call
0001fc14 l       .text	00000000              .bad_return
0001fc26 l       .text	00000000              .call_function
0001fc0e l       .text	00000000              .exit_return
0001fc1e l       .text	00000000              .already_initialized
0002f8e4 l       .data	00000004              function_var
0001fc3c l       .text	00000011              function_name
0001fc8a l       .text	00000000              .direct_call
0001fc76 l       .text	00000000              .bad_return
0001fc88 l       .text	00000000              .call_function
0001fc80 l       .text	00000000              .already_initialized
0002f8e8 l       .data	00000004              function_var
0001fc9c l       .text	0000000e              function_name
0001fcea l       .text	00000000              .direct_call
0001fcd8 l       .text	00000000              .bad_return
0001fce8 l       .text	00000000              .call_function
0001fcd2 l       .text	00000000              .exit_return
0001fce0 l       .text	00000000              .already_initialized
0002f8ec l       .data	00000004              function_var
0001fcfc l       .text	0000000d              function_name
0001fd4c l       .text	00000000              .direct_call
0001fd38 l       .text	00000000              .bad_return
0001fd4a l       .text	00000000              .call_function
0001fd32 l       .text	00000000              .exit_return
0001fd42 l       .text	00000000              .already_initialized
0002f8f0 l       .data	00000004              function_var
0001fd60 l       .text	0000000e              function_name
0001fdb0 l       .text	00000000              .direct_call
0001fd9c l       .text	00000000              .bad_return
0001fdae l       .text	00000000              .call_function
0001fd96 l       .text	00000000              .exit_return
0001fda6 l       .text	00000000              .already_initialized
0002f8f4 l       .data	00000004              function_var
0001fdc4 l       .text	00000010              function_name
0001fe14 l       .text	00000000              .direct_call
0001fe00 l       .text	00000000              .bad_return
0001fe12 l       .text	00000000              .call_function
0001fdfa l       .text	00000000              .exit_return
0001fe0a l       .text	00000000              .already_initialized
0002f8f8 l       .data	00000004              function_var
0001fe28 l       .text	00000010              function_name
0001fe78 l       .text	00000000              .direct_call
0001fe64 l       .text	00000000              .bad_return
0001fe76 l       .text	00000000              .call_function
0001fe5e l       .text	00000000              .exit_return
0001fe6e l       .text	00000000              .already_initialized
0002f8fc l       .data	00000004              function_var
0001fe8c l       .text	00000007              function_name
0001fecc l       .text	00000000              .direct_call
0001feba l       .text	00000000              .bad_return
0001feca l       .text	00000000              .call_function
0001fec2 l       .text	00000000              .already_initialized
0002f900 l       .data	00000004              function_var
0001fedc l       .text	00000013              function_name
0001ff2e l       .text	00000000              .direct_call
0001ff1c l       .text	00000000              .bad_return
0001ff2c l       .text	00000000              .call_function
0001ff16 l       .text	00000000              .exit_return
0001ff24 l       .text	00000000              .already_initialized
0002f904 l       .data	00000004              function_var
0001ff40 l       .text	00000016              function_name
0001ff8a l       .text	00000000              .direct_call
0001ff7e l       .text	00000000              .bad_return
0001ff88 l       .text	00000000              .call_function
0001ff80 l       .text	00000000              .already_initialized
0002f908 l       .data	00000004              function_var
0001ff9c l       .text	0000000e              function_name
0001ffe4 l       .text	00000000              .direct_call
0001ffd2 l       .text	00000000              .bad_return
0001ffe2 l       .text	00000000              .call_function
0001ffda l       .text	00000000              .already_initialized
0002f90c l       .data	00000004              function_var
0001fff4 l       .text	00000014              function_name
00020046 l       .text	00000000              .direct_call
00020034 l       .text	00000000              .bad_return
00020044 l       .text	00000000              .call_function
0002002e l       .text	00000000              .exit_return
0002003c l       .text	00000000              .already_initialized
00000000 l    df *ABS*	00000000              libgrtp1.c
0002f910 l       .data	00000004              function_var
000200d4 l       .text	0000000f              function_name
00020124 l       .text	00000000              .direct_call
00020110 l       .text	00000000              .bad_return
00020122 l       .text	00000000              .call_function
0002010a l       .text	00000000              .exit_return
0002011a l       .text	00000000              .already_initialized
0002f914 l       .data	00000004              function_var
00020138 l       .text	00000017              function_name
00020190 l       .text	00000000              .direct_call
0002017c l       .text	00000000              .bad_return
0002018e l       .text	00000000              .call_function
00020176 l       .text	00000000              .exit_return
00020186 l       .text	00000000              .already_initialized
00000000 l    df *ABS*	00000000              paramtp1.c
0002f918 l       .data	00000004              function_var
00020220 l       .text	0000000f              function_name
00020270 l       .text	00000000              .direct_call
0002025c l       .text	00000000              .bad_return
0002026e l       .text	00000000              .call_function
00020256 l       .text	00000000              .exit_return
00020266 l       .text	00000000              .already_initialized
0002f91c l       .data	00000004              function_var
00020284 l       .text	0000001e              function_name
000202e4 l       .text	00000000              .direct_call
000202d0 l       .text	00000000              .bad_return
000202e2 l       .text	00000000              .call_function
000202ca l       .text	00000000              .exit_return
000202da l       .text	00000000              .already_initialized
0002f920 l       .data	00000004              function_var
000202f8 l       .text	0000000e              function_name
00020346 l       .text	00000000              .direct_call
00020334 l       .text	00000000              .bad_return
00020344 l       .text	00000000              .call_function
0002032e l       .text	00000000              .exit_return
0002033c l       .text	00000000              .already_initialized
0002f924 l       .data	00000004              function_var
00020358 l       .text	0000000c              function_name
000203a2 l       .text	00000000              .direct_call
00020390 l       .text	00000000              .bad_return
000203a0 l       .text	00000000              .call_function
0002038a l       .text	00000000              .exit_return
00020398 l       .text	00000000              .already_initialized
00000000 l    df *ABS*	00000000              pinpadtp1.c
0002f928 l       .data	00000004              function_var
00020430 l       .text	0000000c              function_name
0002047c l       .text	00000000              .direct_call
00020468 l       .text	00000000              .bad_return
0002047a l       .text	00000000              .call_function
00020462 l       .text	00000000              .exit_return
00020472 l       .text	00000000              .already_initialized
0002f92c l       .data	00000004              function_var
00020490 l       .text	00000011              function_name
000204de l       .text	00000000              .direct_call
000204ca l       .text	00000000              .bad_return
000204dc l       .text	00000000              .call_function
000204d4 l       .text	00000000              .already_initialized
0002f930 l       .data	00000004              function_var
000204f0 l       .text	0000000c              function_name
0002053c l       .text	00000000              .direct_call
00020528 l       .text	00000000              .bad_return
0002053a l       .text	00000000              .call_function
00020522 l       .text	00000000              .exit_return
00020532 l       .text	00000000              .already_initialized
0002f934 l       .data	00000004              function_var
00020550 l       .text	0000000f              function_name
000205a0 l       .text	00000000              .direct_call
0002058c l       .text	00000000              .bad_return
0002059e l       .text	00000000              .call_function
00020586 l       .text	00000000              .exit_return
00020596 l       .text	00000000              .already_initialized
0002f938 l       .data	00000004              function_var
000205b4 l       .text	00000007              function_name
000205fc l       .text	00000000              .direct_call
000205e8 l       .text	00000000              .bad_return
000205fa l       .text	00000000              .call_function
000205e2 l       .text	00000000              .exit_return
000205f2 l       .text	00000000              .already_initialized
0002f93c l       .data	00000004              function_var
00020610 l       .text	00000007              function_name
00020658 l       .text	00000000              .direct_call
00020644 l       .text	00000000              .bad_return
00020656 l       .text	00000000              .call_function
0002063e l       .text	00000000              .exit_return
0002064e l       .text	00000000              .already_initialized
0002f940 l       .data	00000004              function_var
0002066c l       .text	00000007              function_name
000206b4 l       .text	00000000              .direct_call
000206a0 l       .text	00000000              .bad_return
000206b2 l       .text	00000000              .call_function
0002069a l       .text	00000000              .exit_return
000206aa l       .text	00000000              .already_initialized
0002f944 l       .data	00000004              function_var
000206c8 l       .text	0000000a              function_name
00020714 l       .text	00000000              .direct_call
00020700 l       .text	00000000              .bad_return
00020712 l       .text	00000000              .call_function
000206fa l       .text	00000000              .exit_return
0002070a l       .text	00000000              .already_initialized
0002f948 l       .data	00000004              function_var
00020728 l       .text	00000017              function_name
0002077a l       .text	00000000              .direct_call
00020766 l       .text	00000000              .bad_return
00020778 l       .text	00000000              .call_function
00020770 l       .text	00000000              .already_initialized
00000000 l    df *ABS*	00000000              Telium_Pprintf.c
00000000 l    df *ABS*	00000000              Telium_Printf.c
000207dc l       .text	00000008              periph_name
00000000 l    df *ABS*	00000000              Telium_Sprintf.c
0002f94c l       .data	00000004              function_var
0002081c l       .text	00000016              function_name
0002086e l       .text	00000000              .direct_call
0002085a l       .text	00000000              .bad_return
0002086c l       .text	00000000              .call_function
00020864 l       .text	00000000              .already_initialized
0002f950 l       .data	00000004              function_var
00020880 l       .text	00000009              function_name
000208c6 l       .text	00000000              .direct_call
000208b2 l       .text	00000000              .bad_return
000208c4 l       .text	00000000              .call_function
000208bc l       .text	00000000              .already_initialized
0002f954 l       .data	00000004              function_var
000208d8 l       .text	0000000d              function_name
00020922 l       .text	00000000              .direct_call
0002090e l       .text	00000000              .bad_return
00020920 l       .text	00000000              .call_function
00020918 l       .text	00000000              .already_initialized
0002f958 l       .data	00000004              function_var
00020934 l       .text	00000009              function_name
0002097a l       .text	00000000              .direct_call
00020966 l       .text	00000000              .bad_return
00020978 l       .text	00000000              .call_function
00020970 l       .text	00000000              .already_initialized
0002f95c l       .data	00000004              function_var
0002098c l       .text	0000000a              function_name
000209d2 l       .text	00000000              .direct_call
000209be l       .text	00000000              .bad_return
000209d0 l       .text	00000000              .call_function
000209c8 l       .text	00000000              .already_initialized
0002f960 l       .data	00000004              function_var
000209e4 l       .text	00000009              function_name
00020a2a l       .text	00000000              .direct_call
00020a16 l       .text	00000000              .bad_return
00020a28 l       .text	00000000              .call_function
00020a20 l       .text	00000000              .already_initialized
0002f964 l       .data	00000004              function_var
00020a3c l       .text	00000008              function_name
00020a7e l       .text	00000000              .direct_call
00020a6a l       .text	00000000              .bad_return
00020a7c l       .text	00000000              .call_function
00020a74 l       .text	00000000              .already_initialized
0002f968 l       .data	00000004              function_var
00020a90 l       .text	00000008              function_name
00020ad2 l       .text	00000000              .direct_call
00020abe l       .text	00000000              .bad_return
00020ad0 l       .text	00000000              .call_function
00020ac8 l       .text	00000000              .already_initialized
0002f96c l       .data	00000004              function_var
00020ae4 l       .text	0000000a              function_name
00020b2a l       .text	00000000              .direct_call
00020b16 l       .text	00000000              .bad_return
00020b28 l       .text	00000000              .call_function
00020b20 l       .text	00000000              .already_initialized
0002f970 l       .data	00000004              function_var
00020b3c l       .text	00000008              function_name
00020b7e l       .text	00000000              .direct_call
00020b6a l       .text	00000000              .bad_return
00020b7c l       .text	00000000              .call_function
00020b74 l       .text	00000000              .already_initialized
0002f974 l       .data	00000004              function_var
00020b8c l       .text	0000000a              function_name
00020bd2 l       .text	00000000              .direct_call
00020bbe l       .text	00000000              .bad_return
00020bd0 l       .text	00000000              .call_function
00020bc8 l       .text	00000000              .already_initialized
0002f978 l       .data	00000004              function_var
00020be4 l       .text	0000000b              function_name
00020c2a l       .text	00000000              .direct_call
00020c16 l       .text	00000000              .bad_return
00020c28 l       .text	00000000              .call_function
00020c20 l       .text	00000000              .already_initialized
0002f97c l       .data	00000004              function_var
00020c3c l       .text	00000009              function_name
00020c82 l       .text	00000000              .direct_call
00020c6e l       .text	00000000              .bad_return
00020c80 l       .text	00000000              .call_function
00020c78 l       .text	00000000              .already_initialized
0002f980 l       .data	00000004              function_var
00020c94 l       .text	00000014              function_name
00020ce2 l       .text	00000000              .direct_call
00020cce l       .text	00000000              .bad_return
00020ce0 l       .text	00000000              .call_function
00020cd8 l       .text	00000000              .already_initialized
0002f984 l       .data	00000004              function_var
00020cf4 l       .text	0000000e              function_name
00020d3e l       .text	00000000              .direct_call
00020d2a l       .text	00000000              .bad_return
00020d3c l       .text	00000000              .call_function
00020d34 l       .text	00000000              .already_initialized
0002f988 l       .data	00000004              function_var
00020d50 l       .text	0000000a              function_name
00020d96 l       .text	00000000              .direct_call
00020d82 l       .text	00000000              .bad_return
00020d94 l       .text	00000000              .call_function
00020d8c l       .text	00000000              .already_initialized
0002f98c l       .data	00000004              function_var
00020da4 l       .text	00000009              function_name
00020dea l       .text	00000000              .direct_call
00020dd6 l       .text	00000000              .bad_return
00020de8 l       .text	00000000              .call_function
00020de0 l       .text	00000000              .already_initialized
0002f990 l       .data	00000004              function_var
00020dfc l       .text	0000000b              function_name
00020e42 l       .text	00000000              .direct_call
00020e2e l       .text	00000000              .bad_return
00020e40 l       .text	00000000              .call_function
00020e38 l       .text	00000000              .already_initialized
0002f994 l       .data	00000004              function_var
00020e54 l       .text	00000009              function_name
00020e9a l       .text	00000000              .direct_call
00020e86 l       .text	00000000              .bad_return
00020e98 l       .text	00000000              .call_function
00020e90 l       .text	00000000              .already_initialized
0002f998 l       .data	00000004              function_var
00020eac l       .text	00000012              function_name
00020efa l       .text	00000000              .direct_call
00020ee6 l       .text	00000000              .bad_return
00020ef8 l       .text	00000000              .call_function
00020ef0 l       .text	00000000              .already_initialized
0002f99c l       .data	00000004              function_var
00020f0c l       .text	00000012              function_name
00020f5a l       .text	00000000              .direct_call
00020f46 l       .text	00000000              .bad_return
00020f58 l       .text	00000000              .call_function
00020f50 l       .text	00000000              .already_initialized
0002f9a0 l       .data	00000004              function_var
00020f6c l       .text	00000010              function_name
00020fb6 l       .text	00000000              .direct_call
00020fa2 l       .text	00000000              .bad_return
00020fb4 l       .text	00000000              .call_function
00020fac l       .text	00000000              .already_initialized
0002f9a4 l       .data	00000004              function_var
00020fc8 l       .text	0000000d              function_name
00021012 l       .text	00000000              .direct_call
00020ffe l       .text	00000000              .bad_return
00021010 l       .text	00000000              .call_function
00021008 l       .text	00000000              .already_initialized
0002f9a8 l       .data	00000004              function_var
00021024 l       .text	00000016              function_name
00021076 l       .text	00000000              .direct_call
00021062 l       .text	00000000              .bad_return
00021074 l       .text	00000000              .call_function
0002106c l       .text	00000000              .already_initialized
0002f9ac l       .data	00000004              function_var
00021088 l       .text	00000010              function_name
000210d2 l       .text	00000000              .direct_call
000210be l       .text	00000000              .bad_return
000210d0 l       .text	00000000              .call_function
000210c8 l       .text	00000000              .already_initialized
0002f9b0 l       .data	00000004              function_var
000210e4 l       .text	0000001a              function_name
0002113a l       .text	00000000              .direct_call
00021126 l       .text	00000000              .bad_return
00021138 l       .text	00000000              .call_function
00021130 l       .text	00000000              .already_initialized
00000000 l    df *ABS*	00000000              emulationtp1.c
0002f9b4 l       .data	00000004              function_var
000211bc l       .text	00000019              function_name
00021218 l       .text	00000000              .direct_call
00021204 l       .text	00000000              .bad_return
00021216 l       .text	00000000              .call_function
000211fe l       .text	00000000              .exit_return
0002120e l       .text	00000000              .already_initialized
00000000 l    df *ABS*	00000000              extensttrois9.c
00030034 l     O .bss	00000004              _Telium_VfprintfAddress
00000000 l    df *ABS*	00000000              toolstp1.c
00000000 l    df *ABS*	00000000              wrappertp1.c
00000001 l       *ABS*	00000000              __TELIUM3__
0002f9c0 l       .data	00000000              SEC_ComputeMAC_Callback
00021368 l     F .text	00000000              SEC_ComputeMAC_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f9d0 l       .data	00000000              SEC_GetConfig_Callback
0002138c l     F .text	00000000              SEC_GetConfig_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f9e0 l       .data	00000000              SEC_Iso9564_Callback
000213b0 l     F .text	00000000              SEC_Iso9564_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002f9f0 l       .data	00000000              SEC_isSecretArea_Callback
000213d4 l     F .text	00000000              SEC_isSecretArea_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fa00 l       .data	00000000              SEC_KeyVerify_Callback
000213f8 l     F .text	00000000              SEC_KeyVerify_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fa10 l       .data	00000000              SEC_listSecureId_Callback
0002141c l     F .text	00000000              SEC_listSecureId_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fa20 l       .data	00000000              SEC_listTLVKeys_Callback
00021440 l     F .text	00000000              SEC_listTLVKeys_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fa30 l       .data	00000000              SEC_LoadKey_Callback
00021464 l     F .text	00000000              SEC_LoadKey_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fa40 l       .data	00000000              SEC_PinEntry_Callback
00021488 l     F .text	00000000              SEC_PinEntry_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fa50 l       .data	00000000              SEC_PinEntryInit_Callback
000214ac l     F .text	00000000              SEC_PinEntryInit_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fa60 l       .data	00000000              SEC_SetConfig_Callback
000214d0 l     F .text	00000000              SEC_SetConfig_Init
00030048 l     O .bss	00000004              hSecDLL
00000001 l       *ABS*	00000000              __TELIUM3__
0003004c l     O .bss	00000004              LIBSECV2_Dll
00030050 l     O .bss	00000004              LIBSECV2_present
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Button_Create_FallBack_Present
0002fa70 l       .data	00000000              GL_Button_Create_Callback
000215ec l     F .text	00000000              GL_Button_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Dialog_Amount_FallBack_Present
0002fa80 l       .data	00000000              GL_Dialog_Amount_Callback
00021610 l     F .text	00000000              GL_Dialog_Amount_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Dialog_Choice_FallBack_Present
0002fa90 l       .data	00000000              GL_Dialog_Choice_Callback
00021634 l     F .text	00000000              GL_Dialog_Choice_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Dialog_Menu_FallBack_Present
0002faa0 l       .data	00000000              GL_Dialog_Menu_Callback
00021658 l     F .text	00000000              GL_Dialog_Menu_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Dialog_Message_FallBack_Present
0002fab0 l       .data	00000000              GL_Dialog_Message_Callback
0002167c l     F .text	00000000              GL_Dialog_Message_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Dialog_Password_FallBack_Present
0002fac0 l       .data	00000000              GL_Dialog_Password_Callback
000216a0 l     F .text	00000000              GL_Dialog_Password_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Dialog_Progress_FallBack_Present
0002fad0 l       .data	00000000              GL_Dialog_Progress_Callback
000216c4 l     F .text	00000000              GL_Dialog_Progress_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Dialog_Text_FallBack_Present
0002fae0 l       .data	00000000              GL_Dialog_Text_Callback
000216e8 l     F .text	00000000              GL_Dialog_Text_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Dialog_VirtualKeyboard_FallBack_Present
0002faf0 l       .data	00000000              GL_Dialog_VirtualKeyboard_Callback
0002170c l     F .text	00000000              GL_Dialog_VirtualKeyboard_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Document_Create_FallBack_Present
0002fb00 l       .data	00000000              GL_Document_Create_Callback
00021730 l     F .text	00000000              GL_Document_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Document_Print_FallBack_Present
0002fb10 l       .data	00000000              GL_Document_Print_Callback
00021754 l     F .text	00000000              GL_Document_Print_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_Clear_FallBack_Present
0002fb20 l       .data	00000000              GL_Drawing_Clear_Callback
00021778 l     F .text	00000000              GL_Drawing_Clear_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_Create_FallBack_Present
0002fb30 l       .data	00000000              GL_Drawing_Create_Callback
0002179c l     F .text	00000000              GL_Drawing_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_DrawEllipse_FallBack_Present
0002fb40 l       .data	00000000              GL_Drawing_DrawEllipse_Callback
000217c0 l     F .text	00000000              GL_Drawing_DrawEllipse_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_DrawLine_FallBack_Present
0002fb50 l       .data	00000000              GL_Drawing_DrawLine_Callback
000217e4 l     F .text	00000000              GL_Drawing_DrawLine_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_DrawRect_FallBack_Present
0002fb60 l       .data	00000000              GL_Drawing_DrawRect_Callback
00021808 l     F .text	00000000              GL_Drawing_DrawRect_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_DrawText_FallBack_Present
0002fb70 l       .data	00000000              GL_Drawing_DrawText_Callback
0002182c l     F .text	00000000              GL_Drawing_DrawText_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_SetBrush_FallBack_Present
0002fb80 l       .data	00000000              GL_Drawing_SetBrush_Callback
00021850 l     F .text	00000000              GL_Drawing_SetBrush_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_SetFont_FallBack_Present
0002fb90 l       .data	00000000              GL_Drawing_SetFont_Callback
00021874 l     F .text	00000000              GL_Drawing_SetFont_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Drawing_SetPen_FallBack_Present
0002fba0 l       .data	00000000              GL_Drawing_SetPen_Callback
00021898 l     F .text	00000000              GL_Drawing_SetPen_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_GraphicLib_BindSingleKey_FallBack_Present
0002fbb0 l       .data	00000000              GL_GraphicLib_BindSingleKey_Callback
000218bc l     F .text	00000000              GL_GraphicLib_BindSingleKey_Init
00030054 l     O .bss	00000004              setStubVersion.5010
0002fbc0 l     O .data	00000004              GL_callback
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_GraphicLib_IsTouchPresent_FallBack_Present
0002fbd0 l       .data	00000000              GL_GraphicLib_IsTouchPresent_Callback
00021960 l     F .text	00000000              GL_GraphicLib_IsTouchPresent_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_GraphicLib_SetCharset_FallBack_Present
0002fbe0 l       .data	00000000              GL_GraphicLib_SetCharset_Callback
00021984 l     F .text	00000000              GL_GraphicLib_SetCharset_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_GraphicLib_UnbindKey_FallBack_Present
0002fbf0 l       .data	00000000              GL_GraphicLib_UnbindKey_Callback
000219a8 l     F .text	00000000              GL_GraphicLib_UnbindKey_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Label_Create_FallBack_Present
0002fc00 l       .data	00000000              GL_Label_Create_Callback
000219cc l     F .text	00000000              GL_Label_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Layout_Create_FallBack_Present
0002fc10 l       .data	00000000              GL_Layout_Create_Callback
000219f0 l     F .text	00000000              GL_Layout_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Message_GetKey_FallBack_Present
0002fc20 l       .data	00000000              GL_Message_GetKey_Callback
00021a14 l     F .text	00000000              GL_Message_GetKey_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Message_GetWidget_FallBack_Present
0002fc30 l       .data	00000000              GL_Message_GetWidget_Callback
00021a38 l     F .text	00000000              GL_Message_GetWidget_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Message_SetResult_FallBack_Present
0002fc40 l       .data	00000000              GL_Message_SetResult_Callback
00021a5c l     F .text	00000000              GL_Message_SetResult_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Message_SetUserData_FallBack_Present
0002fc50 l       .data	00000000              GL_Message_SetUserData_Callback
00021a80 l     F .text	00000000              GL_Message_SetUserData_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Picture_Create_FallBack_Present
0002fc60 l       .data	00000000              GL_Picture_Create_Callback
00021aa4 l     F .text	00000000              GL_Picture_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Print_Create_FallBack_Present
0002fc70 l       .data	00000000              GL_Print_Create_Callback
00021ac8 l     F .text	00000000              GL_Print_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Timer_Create_FallBack_Present
0002fc80 l       .data	00000000              GL_Timer_Create_Callback
00021aec l     F .text	00000000              GL_Timer_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Timer_SetInterval_FallBack_Present
0002fc90 l       .data	00000000              GL_Timer_SetInterval_Callback
00021b10 l     F .text	00000000              GL_Timer_SetInterval_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Timer_Stop_FallBack_Present
0002fca0 l       .data	00000000              GL_Timer_Stop_Callback
00021b34 l     F .text	00000000              GL_Timer_Stop_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_Destroy_FallBack_Present
0002fcb0 l       .data	00000000              GL_Widget_Destroy_Callback
00021b58 l     F .text	00000000              GL_Widget_Destroy_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_GetUserData_FallBack_Present
0002fcc0 l       .data	00000000              GL_Widget_GetUserData_Callback
00021b7c l     F .text	00000000              GL_Widget_GetUserData_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_RegisterCallback_FallBack_Present
0002fcd0 l       .data	00000000              GL_Widget_RegisterCallback_Callback
00021ba0 l     F .text	00000000              GL_Widget_RegisterCallback_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SearchId_FallBack_Present
0002fce0 l       .data	00000000              GL_Widget_SearchId_Callback
00021bc4 l     F .text	00000000              GL_Widget_SearchId_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetBackAlign_FallBack_Present
0002fcf0 l       .data	00000000              GL_Widget_SetBackAlign_Callback
00021be8 l     F .text	00000000              GL_Widget_SetBackAlign_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetBackColor_FallBack_Present
0002fd00 l       .data	00000000              GL_Widget_SetBackColor_Callback
00021c0c l     F .text	00000000              GL_Widget_SetBackColor_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetBorders_FallBack_Present
0002fd10 l       .data	00000000              GL_Widget_SetBorders_Callback
00021c30 l     F .text	00000000              GL_Widget_SetBorders_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetExpand_FallBack_Present
0002fd20 l       .data	00000000              GL_Widget_SetExpand_Callback
00021c54 l     F .text	00000000              GL_Widget_SetExpand_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetFocusable_FallBack_Present
0002fd30 l       .data	00000000              GL_Widget_SetFocusable_Callback
00021c78 l     F .text	00000000              GL_Widget_SetFocusable_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetFontName_FallBack_Present
0002fd40 l       .data	00000000              GL_Widget_SetFontName_Callback
00021c9c l     F .text	00000000              GL_Widget_SetFontName_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetFontScale_FallBack_Present
0002fd50 l       .data	00000000              GL_Widget_SetFontScale_Callback
00021cc0 l     F .text	00000000              GL_Widget_SetFontScale_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetFontStyle_FallBack_Present
0002fd60 l       .data	00000000              GL_Widget_SetFontStyle_Callback
00021ce4 l     F .text	00000000              GL_Widget_SetFontStyle_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetForeColor_FallBack_Present
0002fd70 l       .data	00000000              GL_Widget_SetForeColor_Callback
00021d08 l     F .text	00000000              GL_Widget_SetForeColor_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetGrow_FallBack_Present
0002fd80 l       .data	00000000              GL_Widget_SetGrow_Callback
00021d2c l     F .text	00000000              GL_Widget_SetGrow_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetId_FallBack_Present
0002fd90 l       .data	00000000              GL_Widget_SetId_Callback
00021d50 l     F .text	00000000              GL_Widget_SetId_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetItem_FallBack_Present
0002fda0 l       .data	00000000              GL_Widget_SetItem_Callback
00021d74 l     F .text	00000000              GL_Widget_SetItem_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetMargins_FallBack_Present
0002fdb0 l       .data	00000000              GL_Widget_SetMargins_Callback
00021d98 l     F .text	00000000              GL_Widget_SetMargins_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetMinSize_FallBack_Present
0002fdc0 l       .data	00000000              GL_Widget_SetMinSize_Callback
00021dbc l     F .text	00000000              GL_Widget_SetMinSize_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetShortcut_FallBack_Present
0002fdd0 l       .data	00000000              GL_Widget_SetShortcut_Callback
00021de0 l     F .text	00000000              GL_Widget_SetShortcut_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetShrink_FallBack_Present
0002fde0 l       .data	00000000              GL_Widget_SetShrink_Callback
00021e04 l     F .text	00000000              GL_Widget_SetShrink_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetSize_FallBack_Present
0002fdf0 l       .data	00000000              GL_Widget_SetSize_Callback
00021e28 l     F .text	00000000              GL_Widget_SetSize_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetSource_FallBack_Present
0002fe00 l       .data	00000000              GL_Widget_SetSource_Callback
00021e4c l     F .text	00000000              GL_Widget_SetSource_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetText_FallBack_Present
0002fe10 l       .data	00000000              GL_Widget_SetText_Callback
00021e70 l     F .text	00000000              GL_Widget_SetText_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetTextAlign_FallBack_Present
0002fe20 l       .data	00000000              GL_Widget_SetTextAlign_Callback
00021e94 l     F .text	00000000              GL_Widget_SetTextAlign_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetTextPaddings_FallBack_Present
0002fe30 l       .data	00000000              GL_Widget_SetTextPaddings_Callback
00021eb8 l     F .text	00000000              GL_Widget_SetTextPaddings_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetTransformation_FallBack_Present
0002fe40 l       .data	00000000              GL_Widget_SetTransformation_Callback
00021edc l     F .text	00000000              GL_Widget_SetTransformation_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetVisible_FallBack_Present
0002fe50 l       .data	00000000              GL_Widget_SetVisible_Callback
00021f00 l     F .text	00000000              GL_Widget_SetVisible_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_SetWrap_FallBack_Present
0002fe60 l       .data	00000000              GL_Widget_SetWrap_Callback
00021f24 l     F .text	00000000              GL_Widget_SetWrap_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Widget_UnregisterCallback_FallBack_Present
0002fe70 l       .data	00000000              GL_Widget_UnregisterCallback_Callback
00021f48 l     F .text	00000000              GL_Widget_UnregisterCallback_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Window_Create_FallBack_Present
0002fe80 l       .data	00000000              GL_Window_Create_Callback
00021f6c l     F .text	00000000              GL_Window_Create_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Window_Dispatch_FallBack_Present
0002fe90 l       .data	00000000              GL_Window_Dispatch_Callback
00021f90 l     F .text	00000000              GL_Window_Dispatch_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Window_GetResult_FallBack_Present
0002fea0 l       .data	00000000              GL_Window_GetResult_Callback
00021fb4 l     F .text	00000000              GL_Window_GetResult_Init
00000001 l       *ABS*	00000000              __TELIUM3__
00000000 l       *ABS*	00000000              GL_Window_MainLoop_FallBack_Present
0002feb0 l       .data	00000000              GL_Window_MainLoop_Callback
00021fd8 l     F .text	00000000              GL_Window_MainLoop_Init
00030058 l     O .bss	00000004              GL_Dll
0003005c l     O .bss	00000004              GL_present
00000001 l       *ABS*	00000000              __TELIUM3__
00000001 l       *ABS*	00000000              __TELIUM3__
0002fec0 l       .data	00000000              OSL_Dll_Close_Callback
000220b4 l     F .text	00000000              OSL_Dll_Close_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fec4 l       .data	00000000              OSL_Dll_GetSymbolByName_Callback
000220d4 l     F .text	00000000              OSL_Dll_GetSymbolByName_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fec8 l       .data	00000000              OSL_Dll_IsPresent_Callback
000220f4 l     F .text	00000000              OSL_Dll_IsPresent_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fecc l       .data	00000000              OSL_Dll_Open_Callback
00022114 l     F .text	00000000              OSL_Dll_Open_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fed0 l       .data	00000000              OSL_Dll_OpenByAppliType_Callback
00022134 l     F .text	00000000              OSL_Dll_OpenByAppliType_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fed4 l       .data	00000000              OSL_TimeStp_ElapsedMs_Callback
00022154 l     F .text	00000000              OSL_TimeStp_ElapsedMs_Init
00000001 l       *ABS*	00000000              __TELIUM3__
0002fed8 l       .data	00000000              OSL_TimeStp_Now_Callback
00022174 l     F .text	00000000              OSL_TimeStp_Now_Init
00000000 l    df *ABS*	00000000              GTL_StdTimer.c
00000000 l    df *ABS*	00000000              elf-init.c
000222a0 l       .text	00000000              .udivsi3_skip_div0_test
00000000 l       *ABS*	00000000              shift
0002fedc l       .data	00000004              function_var
000224bc l       .text	00000013              function_name
0002250a l       .text	00000000              .direct_call
000224f6 l       .text	00000000              .bad_return
00022508 l       .text	00000000              .call_function
00022500 l       .text	00000000              .already_initialized
00000000 l    df *ABS*	00000000              crtstuff.c
00026558 l     O .eh_frame	00000000              __FRAME_END__
0002f014 l     O .jcr	00000000              __JCR_END__
00030038 l     O .bss	00000004              DllGetProcAddressTools
0002f76c l     O .data	0000000c              g_FileType
000212f8 l     F .text	00000020              GetProcAddressWrapper
0001f96c l     F .text	00000020              GetProcAddressExtens
0002114c l     F .text	00000020              GetProcAddressEmulation
00030040 l     O .bss	00000004              wrapper_Dll
0003003c l     O .bss	00000004              toolsDll
00008fa4 l     F .text	00000014              __stack_chk_fail
00030018 l     O .bss	00000004              DllGetProcAddress6
00030024 l     O .bss	00000004              pinpadDll
00020058 l     F .text	00000020              GetProcAddressLibgr
00030010 l     O .bss	00000004              DllGetProcAddress3
00021940 l     F .text	00000020              GL_GraphicLib_Create_Init
00030044 l     O .bss	00000004              DllGetProcAddress55
0003000c l     O .bss	00000004              extens_Dll
0002f018 l     O .dynamic	00000000              _DYNAMIC
00030028 l     O .bss	00000004              DllGetProcAddress9
0002f008 l       .init_array	00000000              __init_array_end
0002127c l     F .text	00000020              GetProcAddressTools
0002f000 l       .init_array	00000000              __init_array_start
00030030 l     O .bss	00000004              DllGetProcAddressEmul
000203b4 l     F .text	00000020              GetProcAddressPinpad
0003002c l     O .bss	00000004              emulation_Dll
00030014 l     O .bss	00000004              libgr_Dll
000201a4 l     F .text	00000020              GetProcAddressParam
0002f118 l     O .got	00000000              _GLOBAL_OFFSET_TABLE_
00030020 l     O .bss	00000004              DllGetProcAddress7
0003001c l     O .bss	00000004              param_Dll
00000000 l       .rodata	00000000              
00000000 l       .rodata	00000000              
00000000 l       .rodata	00000000              
00000000 l       .rodata	00000000              
00008b80       F *UND*	00000000              Odm_AppGetCurrentAppliIdentifier
0001f512 g     F .text	00000000              .hidden LL_Connect
0003006c g     O .bss	000003e8              isoField095
000214b6 g     F .text	00000000              .hidden SEC_PinEntryInit
00030454 g     O .bss	00000005              isoField017
0000a76c g     F .text	0000011c              initUIContext
0003045c g     O .bss	00000005              isoField050
0001f3da g     F .text	00000000              .hidden gprs_SubmitPuk
00030464 g     O .bss	000003e8              isoField121
00021ca8 g     F .text	00000000              .hidden GL_Widget_SetFontName
0003084c g     O .bss	000003e8              isoField067
000213ba g     F .text	00000000              .hidden SEC_Iso9564
000136a4 g     F .text	00000092              queGet
00012c74 g     F .text	000000f2              Hex2Text
00016528 g     F .text	00000080              mapGet
00030c34 g     O .bss	00000004              isoField020
000221ec g     F .text	0000004c              .hidden GTL_StdTimer_GetRemaining
00021688 g     F .text	00000000              .hidden GL_Dialog_Message
0000a990 g     F .text	000000ae              ResetPeripherals
00030c38 g     O .bss	0000000a              isoField028
00015e74 g     F .text	000000e2              BaseToDec
0001f6bc g     F .text	00000028              .hidden LINKLAYER_GetProcAddress
00030c44 g     O .bss	000003e8              isoField116
00021ec4 g     F .text	00000000              .hidden GL_Widget_SetTextPaddings
00021ab0 g     F .text	00000000              .hidden GL_Picture_Create
00008e68 g     F .text	00000004              .hidden telinux_before_main_first
00008b8c       F *UND*	00000000              getpid@@GLIBC_2.4
0003102c g     O .bss	000003e8              BillerPayerName
0001f3b6 g     F .text	00000000              .hidden gprs_SetPinModeFree
0002217e g     F .text	00000000              .hidden OSL_TimeStp_Now
000137b0 g     F .text	00000050              quePutTag
0001f392 g     F .text	00000000              .hidden gprs_GetInformation
0001f85c g     F .text	00000000              .hidden DLLExist
0001f4ee g     F .text	00000000              .hidden LL_Configure
0001ce88 g     F .text	000000e0              .hidden FMG_DeleteFile
0001f5c6 g     F .text	00000000              .hidden LL_GSM_Start
00020740 g     F .text	00000000              .hidden Telium_ServiceRegister
000130f8 g     F .text	00000036              bufLen
0002129c g     F .text	00000044              .hidden toolslib_open
0001fd70 g     F .text	00000000              .hidden Telium_Stdout
00031414 g     O .bss	000003e8              isoField072
000317fc g     O .bss	00000064              isoField035
0001145c g     F .text	0000009e              TimerStart
000220de g     F .text	00000000              .hidden OSL_Dll_GetSymbolByName
0001bf58 g     F .text	0000042c              .hidden DeleteRecordMiddleWithCkecksum
000214da g     F .text	00000000              .hidden SEC_SetConfig
000133f8 g     F .text	00000054              bufCat
00021a20 g     F .text	00000000              .hidden GL_Message_GetKey
00031860 g     O .bss	000003e8              isoField105
000117f8 g     F .text	00000044              isoFmt_Gateway
00013130 g     F .text	0000007c              bufSet
00021ea0 g     F .text	00000000              .hidden GL_Widget_SetTextAlign
0002122c g     F .text	00000050              .hidden Telium_Vfprintf
0000f130 g     F .text	0000019a              GoalPrnMultiLine
0002fee0 g       *ABS*	00000000              _edata
00031c48 g     O .bss	000003e8              isoField089
00015a18 g     F .text	0000014a              Radix64Encode
00032030 g     O .bss	00000064              isoField046
00032094 g     O .bss	000003e8              isoField081
0000ebe8 g     F .text	000002ae              GoalDspPicture
0003247c g     O .bss	00000007              isoField003
00012370 g     F .text	00000112              doTransaction
0001f2b8 g     F .text	000000d0              .hidden md5_finish
00015b64 g     F .text	000002ae              Radix64Decode
000138d4 g     F .text	0000005c              queGetTlv
00032484 g     O .bss	00000064              isoField059
00021da4 g     F .text	00000000              .hidden GL_Widget_SetMargins
00016a10 g     F .text	000000ea              strFormatDatTim
000324e8 g     O .bss	00000009              isoField010
0001fb20 g     F .text	00000000              .hidden Telium_Is_iso1
000324f4 g     O .bss	00000005              isoField051
000219b4 g     F .text	00000000              .hidden GL_GraphicLib_UnbindKey
000324fc g     O .bss	000003e8              isoField096
000328e4 g     O .bss	00000005              isoField018
00019990 g     F .text	000000f2              amount
00013770 g     F .text	0000003e              queRewind
0002f230  w      .data	00000000              data_start
0002fee0 g     O .bss	00000004              __stack_chk_guard@@GLIBC_2.4
00021cf0 g     F .text	00000000              .hidden GL_Widget_SetFontStyle
000328ec g     O .bss	000003e8              isoField128
00032cd4 g     O .bss	000003e8              isoField120
00020f20 g     F .text	00000000              .hidden DisplayHeader
00021e7c g     F .text	00000000              .hidden GL_Widget_SetText
0001f840 g     F .text	00000010              .hidden TLV_TREE_DLL_IsPresent
00013570 g     F .text	000000be              quePut
0001f7a8 g     F .text	00000000              .hidden TLV_TREE_DLL_InitFuncAndBranch
00022524 g     O .rodata	00000004              _IO_stdin_used
00021784 g     F .text	00000000              .hidden GL_Drawing_Clear
0000a18c g     F .text	000001a0              is_for_you_after
00011408 g     F .text	00000052              AppliExist
00013088 g     F .text	00000036              bufDim
000330bc g     O .bss	000003e8              isoField115
000212e0 g     F .text	00000018              .hidden toolslib_close
00013bb0 g     F .text	00000068              bitTest
000334a4 g     O .bss	000003e8              isoField068
0003388c g     O .bss	0000000a              isoField029
0000dcac g     F .text	000002c2              GoalGetKey
00033898 g     O .bss	00000064              isoField060
00021b64 g     F .text	00000000              .hidden GL_Widget_Destroy
00012de4 g     F .text	00000072              num2bin
00020b98 g     F .text	00000000              .hidden FS_unlink
000338fc g     O .bss	00000004              isoField021
00012514 g     F .text	00000046              cPtr
00013738 g     F .text	00000036              queLen
000165a8 g     F .text	00000062              mapDatLen
00009a60 g     F .text	000000bc              consult
00021f0c g     F .text	00000000              .hidden GL_Widget_SetVisible
000145e4 g     F .text	000000a8              fmtDate
000219d8 g     F .text	00000000              .hidden GL_Label_Create
00021c3c g     F .text	00000000              .hidden GL_Widget_SetBorders
00033900 g     O .bss	000003e8              isoField073
00021d38 g     F .text	00000000              .hidden GL_Widget_SetGrow
0002043c g     F .text	00000000              .hidden PPS_Display
00021ad4 g     F .text	00000000              .hidden GL_Print_Create
00033ce8 g     O .bss	00000064              isoField036
00014c3c g     F .text	00000062              stdLrc
00033d4c g     O .bss	000003e8              isoField104
00012f98 g     F .text	00000056              tmrPause
00008b98       F *UND*	00000000              iniparser_getint
00021f9c g     F .text	00000000              .hidden GL_Window_Dispatch
00020308 g     F .text	00000000              .hidden PPS_firstline
00008e58 g     F .text	00000010              .hidden main
00021c60 g     F .text	00000000              .hidden GL_Widget_SetExpand
00034134 g     O .bss	0000000d              isoField004
000220a6 g     F .text	00000000              .hidden GL_Swi_DllLink
000130c0 g     F .text	00000036              bufPtr
00034144 g     O .bss	00000002              isoDrCr
00020a44 g     F .text	00000000              .hidden FS_open
0001dc34 g     F .text	00000484              .hidden FMG_ReadRecord
00034148 g     O .bss	000003e8              isoField047
0001f9d0 g     F .text	00000018              .hidden extenslib_close
00012a20 g     F .text	000000ee              hex2num
00020fd8 g     F .text	00000000              .hidden IsFooter
00021e58 g     F .text	00000000              .hidden GL_Widget_SetSource
00014d18 g     F .text	00000092              stdGetAcc
00034530 g     O .bss	000003e8              isoField082
0001f48c g     F .text	00000010              .hidden LIBGPRS_IsPresent
000222a0 g     F .text	000001ec              .hidden __udivsi3
00034918 g     O .bss	00000011              isoField052
00043ff4 g       *ABS*	00000000              __end__
0003492c g     O .bss	000003e8              isoField097
0000bcc8 g     F .text	0000074a              PromptGPRS
00020998 g     F .text	00000000              .hidden FS_length
00042ec0 g     O .bss	00001134              g_sFileManagement
000202a4 g     F .text	00000000              .hidden PPS_SendTerminalRefRequestCommand
000217a8 g     F .text	00000000              .hidden GL_Drawing_Create
00034d14 g     O .bss	00000007              isoField011
00012b10 g     F .text	000000a0              bin2hex
0002fee8 g     O .bss	00000004              gGoalGraphicLibInstance
0001ffac g     F .text	00000000              .hidden PaintGraphics
00020078 g     F .text	00000044              .hidden libgrlib_open
0001cc6c g     F .text	00000058              .hidden FMG_GetFileDescription
0000ee98 g     F .text	00000040              GoalDestroyPicture
0002f234 g     O .data	00000000              .hidden __dso_handle
00034d1c g     O .bss	00000004              isoField019
000117b4 g     F .text	00000044              isoFmt
00018dc8 g     F .text	00000158              LoadIso9564Key
0002146e g     F .text	00000000              .hidden SEC_LoadKey
00011584 g     F .text	0000005e              TimerStop
00034d20 g     O .bss	000003e8              isoField127
0001468c g     F .text	000000a8              fmtTime
0000e6ac g     F .text	0000019c              GoalDrawText
0001f60e g     F .text	00000000              .hidden LL_Receive
0000a5e4 g     F .text	00000188              menuGoalDisplay
00021e10 g     F .text	00000000              .hidden GL_Widget_SetShrink
00020e08 g     F .text	00000000              .hidden first_init
000215f8 g     F .text	00000000              .hidden GL_Button_Create
00011174 g     F .text	00000082              parseStr
00008ba4       F *UND*	00000000              atoi@@GLIBC_2.4
00021ffc g     F .text	00000060              .hidden GL_GetProcAddressWithoutExit
00035108 g     O .bss	000003e8              isoField114
00016be0 g     F .text	00000074              strtouppercase
000354f0 g     O .bss	00000005              isoField022
000354f8 g     O .bss	000003e8              isoField069
00009d44 g     F .text	00000098              modif_param
000358e0 g     O .bss	00000064              isoField061
000204a4 g     F .text	00000000              .hidden Telium_Read_date
00021990 g     F .text	00000000              .hidden GL_GraphicLib_SetCharset
00008bb0       F *UND*	00000000              Odm_AppGetAppliTypeFromAppId
0001d8e8 g     F .text	0000034c              .hidden FMG_ModifyRecord
00020230 g     F .text	00000000              .hidden IsPPSConnected
00021718 g     F .text	00000000              .hidden GL_Dialog_VirtualKeyboard
00035944 g     O .bss	000003e8              isoField074
000205bc g     F .text	00000000              .hidden IsISO1
00014f38 g     F .text	000000c4              stdCrc16
0000f4e0 g     F .text	00000158              appReset
0001f7b8 g     F .text	00000060              .hidden TLV_TREE_DLL_GetProcAddressWithoutExit
000206d4 g     F .text	00000000              .hidden IsPrinter
000139a8 g     F .text	0000012c              queMergeTlv
0001a03c g     F .text	0000041c              .hidden AddModifyRecordBeginWithCkecksum
00035d2c g     O .bss	000003e8              isoField103
000092bc g     F .text	0000006a              give_your_domain
00036114 g     O .bss	00000019              isoField037
00013530 g     F .text	0000003e              queInit
00008bbc       F *UND*	00000000              memset@@GLIBC_2.4
00013888 g     F .text	0000004c              queGetTag
0001f464 g     F .text	00000028              .hidden LIBGPRS_GetProcAddress
0002ff40 g     O .bss	00000004              hTsc
00022194 g     F .text	0000002c              .hidden GTL_StdTimer_GetCurrent
000215dc g     F .text	00000010              .hidden LIBSECV2_IsPresent
00008bc8       F *UND*	00000000              Sap_trace_debug
00021664 g     F .text	00000000              .hidden GL_Dialog_Menu
0002251c g     F .fini	00000000              _fini
0001d4e0 g     F .text	0000007c              .hidden FMG_CheckRecordCoherence
0001f818 g     F .text	00000028              .hidden TLV_TREE_DLL_GetProcAddress
00009970 g     F .text	000000f0              state
0000f444 g     F .text	00000038              getAppCmpTim
00036130 g     O .bss	000003e8              isoField048
00036518 g     O .bss	000003e8              isoField083
00036900 g     O .bss	00000007              isoField040
0001f404 g     F .text	00000060              .hidden LIBGPRS_GetProcAddressWithoutExit
00036908 g     O .bss	0000000d              isoField005
000214f4 g     F .text	00000008              .hidden SEClib_Version
000218c8 g     F .text	00000000              .hidden GL_GraphicLib_BindSingleKey
00008bd4       F *UND*	00000000              snprintf@@GLIBC_2.4
0001ca64 g     F .text	00000208              .hidden FMG_Init
00012ff0 g     F .text	00000048              bufReset
0002213e g     F .text	00000000              .hidden OSL_Dll_OpenByAppliType
00036918 g     O .bss	00000011              isoField053
00019a84 g     F .text	0000008c              .hidden CreateOrMountDisk
0003692c g     O .bss	000003e8              isoField098
00021f78 g     F .text	00000000              .hidden GL_Window_Create
00043ff4 g       *ABS*	00000000              __bss_end__
0001fc50 g     F .text	00000000              .hidden Telium_Reset_buf
000204fc g     F .text	00000000              .hidden BoosterType
00013b40 g     F .text	00000070              bitOff
000200bc g     F .text	00000018              .hidden libgrlib_close
00036d14 g     O .bss	00000007              isoField012
00021a68 g     F .text	00000000              .hidden GL_Message_SetResult
0001c384 g     F .text	0000033c              .hidden DeleteRecordEnd
00014ca0 g     F .text	00000078              trk2Lrc
00012bb0 g     F .text	000000c4              hex2bin
0001e0b8 g     F .text	00000314              .hidden FMG_DeleteRecord
0000df70 g     F .text	00000040              GoalDestroyScreen
00036d1c g     O .bss	000003e8              isoField090
00021bf4 g     F .text	00000000              .hidden GL_Widget_SetBackAlign
00008be0       F *UND*	00000000              abort@@GLIBC_2.4
00015998 g     F .text	00000048              bmpHgt
00037104 g     O .bss	000003e8              isoField126
0001f12c g     F .text	00000074              .hidden md5_init
0002161c g     F .text	00000000              .hidden GL_Dialog_Amount
0001d18c g     F .text	00000110              .hidden FMG_DeleteFileType
0000fe94 g     F .text	000003a8              FMGReadTransactions
0002185c g     F .text	00000000              .hidden GL_Drawing_SetBrush
00012130 g     F .text	0000023e              reqBuild
0002196c g     F .text	00000000              .hidden GL_GraphicLib_IsTouchPresent
000374ec g     O .bss	000003e8              isoField113
00008bec       F *UND*	00000000              pause@@GLIBC_2.4
0001fcac g     F .text	00000000              .hidden Telium_Status
0000dfb0 g     F .text	000001d4              GoalCreateDrawing
00015880 g     F .text	000000ce              hashJerkinsBin
000110b0 g     F .text	000000c2              CheckParity
00008bf8       F *UND*	00000000              memmove@@GLIBC_2.4
000378d4 g     O .bss	00000803              isoField062
00015f58 g     F .text	0000009c              stdOWF
0002ff44 g     O .bss	00000004              hPrn
00021c84 g     F .text	00000000              .hidden GL_Widget_SetFocusable
0001fef0 g     F .text	00000000              .hidden DrawExtendedString
00021814 g     F .text	00000000              .hidden GL_Drawing_DrawRect
00043ff4 g       *ABS*	00000000              _bss_end__
000380d8 g     O .bss	00000005              isoField023
0001ada0 g     F .text	000004bc              .hidden AddModifyRecordEnd
00021350 g     F .text	00000018              .hidden wrapperlib_close
000380e0 g     O .bss	000003e8              isoField075
000384c8 g     O .bss	000003e8              BillerServiceName
00020618 g     F .text	00000000              .hidden IsISO2
00020940 g     F .text	00000000              .hidden FS_exist
000216f4 g     F .text	00000000              .hidden GL_Dialog_Text
0001fdd4 g     F .text	00000000              .hidden Telium_Stdperif
00009714 g     F .text	00000060              is_state
0001fe38 g     F .text	00000000              .hidden Telium_Ttestall
0001c6c0 g     F .text	0000034c              .hidden DeleteRecordEndWithCkecksum
000388b0 g     O .bss	0000000a              isoField030
00021640 g     F .text	00000000              .hidden GL_Dialog_Choice
00014ffc g     F .text	00000070              xor
00008c08       F *UND*	00000000              kill@@GLIBC_2.4
0001fe94 g     F .text	00000000              .hidden buzzer
000388bc g     O .bss	0000000d              isoField038
0000a020 g     F .text	000000bc              message_received
00011278 g     F .text	00000126              IpToUint
00008c14       F *UND*	00000000              COREDBG_StackOverFlowSet
000388cc g     O .bss	000003e8              isoField102
00021402 g     F .text	00000000              .hidden SEC_KeyVerify
00008c20       F *UND*	00000000              strcpy@@GLIBC_2.4
0001fd0c g     F .text	00000000              .hidden Telium_Stdin
00021d5c g     F .text	00000000              .hidden GL_Widget_SetId
0002144a g     F .text	00000000              .hidden SEC_listTLVKeys
0001f78e g     F .text	00000000              .hidden TlvTree_Release
00021ccc g     F .text	00000000              .hidden GL_Widget_SetFontScale
0001a870 g     F .text	00000530              .hidden AddModifyRecordMiddleWithCkecksum
000207e4 g     F .text	00000000              .hidden Telium_Stdprt
00012e58 g     F .text	0000007c              tmrStart
00038cb4 g     O .bss	0000000d              isoField049
00025b38 g     O .rodata	00000011              zRootKeyPlainText
000213de g     F .text	00000000              .hidden SEC_isSecretArea
0001419c g     F .text	000001e8              fmtAmt
00038cc4 g     O .bss	000003e8              isoField084
000390ac g     O .bss	00000009              isoField041
00008fb8 g     F .text	000002c2              Main
000390b8 g     O .bss	00000004              isoField006
00018bdc g     F .text	0000014c              CreateSecret
00008e90 g     F .text	00000000              _start
00008c2c       F *UND*	00000000              iniparser_freedict
000200e4 g     F .text	00000000              .hidden PSQ_Est_pinpad
00013494 g     F .text	0000004a              bufGet
0001d5d0 g     F .text	00000318              .hidden FMG_AddRecord
0001f9f8 g     F .text	00000000              .hidden Telium_Fclose
0000d9e8 g     F .text	000002c4              GoalDspMultiLine
0000d40c g     F .text	000001fc              GoalClrScreen
00011ea8 g     F .text	00000086              getLen_fmt
0002078c g     F .text	0000002e              .hidden Telium_Pprintf
000390bc g     O .bss	000003e8              isoField054
000394a4 g     O .bss	000003e8              isoField099
00021dec g     F .text	00000000              .hidden GL_Widget_SetShortcut
000156fc g     F .text	00000040              stdSED
00009674 g     F .text	000000a0              is_name
00011e2c g     F .text	0000007a              getLen_
000224ac  w    F .text	00000010              .hidden __aeabi_idiv0
0003988c g     O .bss	00000005              isoField013
00020bf0 g     F .text	00000000              .hidden FS_unmount
0000faa4 g     F .text	000003f0              FMGAddDelTransactions
00021098 g     F .text	00000000              .hidden Telium_Exit
00022088 g     F .text	00000000              .hidden GL_InitFuncAndBranch
00021ee8 g     F .text	00000000              .hidden GL_Widget_SetTransformation
00039894 g     O .bss	000003e8              isoField091
00009c38 g     F .text	00000066              time_function
00016e0c g     F .text	000006b4              Magnetic
00039c7c g     O .bss	000003e8              isoField125
00025b4c g     O .rodata	00000011              zIso9564PinKey
000133b0 g     F .text	00000048              bufApp
00021b40 g     F .text	00000000              .hidden GL_Timer_Stop
0000a888 g     F .text	00000108              releaseUIContext
00030060 g     O .bss	00000004              sSavedStatusHeader
00008c38       F *UND*	00000000              strcat@@GLIBC_2.4
000114fc g     F .text	00000086              TimerGet
000224d0 g     F .text	00000000              .hidden TMT_Retrieve_Clock
0001f536 g     F .text	00000000              .hidden LL_Disconnect
0001ca0c g     F .text	00000058              .hidden IsFileEmpty
000209f0 g     F .text	00000000              .hidden FS_mount
000124cc g     F .text	00000048              wPtr
0000c414 g     F .text	00000b2c              ComGPRS
0003a064 g     O .bss	00000013              isoMnuItm
00014734 g     F .text	00000056              isSorted
0002116c g     F .text	00000038              .hidden emulationlib_open
0000f708 g     F .text	000000e0              appGet
000115e4 g     F .text	000001d0              Timer
0003a078 g     O .bss	000003e8              isoField063
00019b10 g     F .text	000000c4              .hidden SaveMangementFile
00009bd8 g     F .text	00000060              is_time_function
0003a460 g     O .bss	00000005              isoField024
0003a468 g     O .bss	000003e8              isoField112
0000e184 g     F .text	0000011e              GoalClrDrawing
0000f47c g     F .text	00000062              appLen
00016468 g     F .text	0000006e              count_chars
00008b60 g     F .init	00000000              _init
0003a850 g     O .bss	000003e8              isoField076
00008c44       F *UND*	00000000              OSL_Logger_Log
00021426 g     F .text	00000000              .hidden SEC_listSecureId
00020674 g     F .text	00000000              .hidden IsISO3
000215b4 g     F .text	00000028              .hidden LIBSECV2_GetProcAddress
0002215e g     F .text	00000000              .hidden OSL_TimeStp_ElapsedMs
00021b88 g     F .text	00000000              .hidden GL_Widget_GetUserData
00021d80 g     F .text	00000000              .hidden GL_Widget_SetItem
0003ac38 g     O .bss	00000002              orgMnuItm
0003ac3c g     O .bss	0000000a              isoField031
0002fee0 g     O .data	00000000              .hidden __TMC_END__
0001f64c g     F .text	00000000              .hidden LINKLAYER_InitFuncAndBranch
00008d54 g     F .text	0000003c              .hidden telinux_after_main_last
0003ac48 g     O .bss	000003e8              isoField101
00020150 g     F .text	00000000              .hidden PSQ_donner_type_pinpad
00008c50       F *UND*	00000000              access@@GLIBC_2.4
0003b030 g     O .bss	00000005              isoField039
000159e0 g     F .text	00000036              bmpDat
0001f3f4 g     F .text	00000000              .hidden LIBGPRS_InitFuncAndBranch
00020418 g     F .text	00000018              .hidden pinpadlib_close
00012d68 g     F .text	0000007a              bin2num
0000ea88 g     F .text	00000160              GoalClrPicture
0001f8bc g     F .text	00000000              .hidden d_tolong
0003b038 g     O .bss	000003e8              isoField109
00009e7c g     F .text	000001a4              file_received
00009e3c g     F .text	00000040              is_delete
0001f746 g     F .text	00000000              .hidden TlvTree_AddChildString
00000000  w      *UND*	00000000              _Jv_RegisterClasses
00020560 g     F .text	00000000              .hidden IsColorDisplay
0001f1a0 g     F .text	00000118              .hidden md5_append
00021f30 g     F .text	00000000              .hidden GL_Widget_SetWrap
0000a13c g     F .text	0000004e              card_inside
00020008 g     F .text	00000000              .hidden _DrawExtendedString
0001bc18 g     F .text	00000340              .hidden DeleteRecordMiddle
0000eed8 g     F .text	00000078              GoalCreateDocument
00014550 g     F .text	00000094              fmtTcp
0001f918 g     F .text	00000000              .hidden stdcam0
00020b44 g     F .text	00000000              .hidden FS_seek
0003b420 g     O .bss	000003e8              isoField085
0000d0d0 g     F .text	0000033c              GoalCreateScreen
0003b808 g     O .bss	0000001f              isoField042
00020208 g     F .text	00000018              .hidden paramlib_close
00020834 g     F .text	00000000              .hidden ApplicationGetCurrent
0001f98c g     F .text	00000044              .hidden extenslib_open
0003b828 g     O .bss	0000000f              isoField007
0001023c g     F .text	000001d0              FMG_ErrorMsg
00013e20 g     F .text	000000a6              fmtTok
00018d28 g     F .text	0000009e              FreeSecret
00021d14 g     F .text	00000000              .hidden GL_Widget_SetForeColor
0001b8e8 g     F .text	00000330              .hidden DeleteRecordBeginWithCkecksum
0001579c g     F .text	0000005e              stdDED
000190ec g     F .text	00000424              Iso9564PinEntry
00013dc4 g     F .text	0000005c              fmtSbs
000218a4 g     F .text	00000000              .hidden GL_Drawing_SetPen
0003b838 g     O .bss	000003e8              isoField124
000207ba g     F .text	00000020              .hidden Telium_Printf
00009838 g     F .text	0000003e              more_function
00021b1c g     F .text	00000000              .hidden GL_Timer_SetInterval
0003bc20 g     O .bss	00000201              isoField055
0003be24 g     O .bss	000003e8              isoField092
0000f638 g     F .text	000000d0              appPut
0003c20c g     O .bss	000003e8              LoggedInUser
0003c5f4 g     O .bss	00000005              isoField014
000140c0 g     F .text	000000dc              fmtIns
0000e888 g     F .text	000001fe              GoalCreatePicture
00008c60       F *UND*	00000000              Stapp_LegacyInstall
000131ac g     F .text	000000ea              bufIns
00025b60 g     O .rodata	00000009              zMacKey
00009328 g     F .text	0000034a              after_reset
0001f5ea g     F .text	00000000              .hidden LL_Network_GetStatus
0001344c g     F .text	00000048              bufCpy
00013318 g     F .text	00000098              bufDel
000217f0 g     F .text	00000000              .hidden GL_Drawing_DrawLine
00009ca0 g     F .text	000000a4              is_change_init
00014ac0 g     F .text	0000008c              addStr
00008c6c       F *UND*	00000000              raise@@GLIBC_2.4
0001f57e g     F .text	00000000              .hidden LL_GPRS_Connect
0003c5fc g     O .bss	00000009              isoField064
00019510 g     F .text	00000438              MacCalculation
00012484 g     F .text	00000048              bPtr
0002fee0 g       *ABS*	00000000              __bss_start__
00021af8 g     F .text	00000000              .hidden GL_Timer_Create
0003c608 g     O .bss	00000003              isoField025
00014b4c g     F .text	00000096              subStr
0000f2cc g     F .text	000000a8              GoalPrnPicture
00021396 g     F .text	00000000              .hidden SEC_GetConfig
0001f6fe g     F .text	00000000              .hidden TlvTree_AddChild
00020364 g     F .text	00000000              .hidden PPS_newline
00015950 g     F .text	00000048              bmpWdt
0000a518 g     F .text	000000ca              entry
0003c60c g     O .bss	000003e8              isoField119
0003c9f4 g     O .bss	000003e8              isoField111
00014384 g     F .text	00000106              fmtMut
0002f230 g       .data	00000000              __data_start
00010fcc g     F .text	000000e2              SetParity
00043ff4 g       *ABS*	00000000              _end
0001660c g     F .text	0000009a              mapPut
00020d5c g     F .text	00000000              .hidden PageAlloc
00016cfc g     F .text	0000010e              IsoError
0003cddc g     O .bss	000003e8              isoField077
00020ca8 g     F .text	00000000              .hidden ObjectGetDescriptor
0003d1c4 g     O .bss	000003e8              isoField100
000177c4 g     F .text	0000008a              GetPpdDisplay
0003d5ac g     O .bss	00000064              isoField032
0001573c g     F .text	0000005e              stdEDE
00012948 g     F .text	000000d8              num2hex
0000e2a4 g     F .text	00000146              GoalDrawLine
0001f5a2 g     F .text	00000000              .hidden LL_GPRS_Start
00020e60 g     F .text	00000000              .hidden raz_init
0003d610 g     O .bss	000003e8              isoField086
00019d1c g     F .text	00000320              .hidden AddModifyRecordBegin
0003d9f8 g     O .bss	000003e8              isoField108
0003dde0 g     O .bss	00000051              isoField043
0003de34 g     O .bss	00000007              isoField000
0001ccc4 g     F .text	000001c4              .hidden FMG_CreateFile
0002211e g     F .text	00000000              .hidden OSL_Dll_Open
0001fabc g     F .text	00000000              .hidden Telium_Getc
000156bc g     F .text	00000040              stdDES
0003de3c g     O .bss	00000009              isoField008
00020f7c g     F .text	00000000              .hidden DisplayLeds
000224ac  w    F .text	00000010              .hidden __aeabi_ldiv0
00016334 g     F .text	00000132              dt2ts
00021318 g     F .text	00000038              .hidden wrapperlib_open
00021492 g     F .text	00000000              .hidden SEC_PinEntry
00008c78       F *UND*	00000000              memcpy@@GLIBC_2.4
00019bd4 g     F .text	000000ac              .hidden ExtraireFileID
00013298 g     F .text	0000007e              bufOwr
0003de48 g     O .bss	000003e8              isoField123
0002205c g     F .text	0000001c              .hidden GL_GetProcAddress
000181a4 g     F .text	00000a36              GetConfig
0003e230 g     O .bss	00000007              isoField015
0001b674 g     F .text	00000274              .hidden DeleteRecordBegin
0002fee0 g       *ABS*	00000000              __bss_start
0002103c g     F .text	00000000              .hidden IsHeader
0001040c g     F .text	0000070c              LL_ErrorMsg
0003e238 g     O .bss	00000064              isoField056
00030064 g     O .bss	00000004              sSavedStatusLeds
0001cf68 g     F .text	00000224              .hidden FMG_CreateFileType
000111f8 g     F .text	00000080              UintToIp
000201c4 g     F .text	00000044              .hidden paramlib_open
0003e29c g     O .bss	000003e8              isoField093
00021554 g     F .text	00000060              .hidden LIBSECV2_GetProcAddressWithoutExit
000220fe g     F .text	00000000              .hidden OSL_Dll_IsPresent
0001fa5c g     F .text	00000000              .hidden Telium_Fopen
00008c84       F *UND*	00000000              strlen@@GLIBC_2.4
00018f20 g     F .text	0000015e              LoadMacKey
0000a4a4 g     F .text	00000072              give_interface
00009774 g     F .text	000000c2              idle_message
00013930 g     F .text	00000078              queFindTlv
00019c80 g     F .text	0000009c              .hidden DeleteFileFromTable
0003e684 g     O .bss	000003e8              isoField065
00008c90       F *UND*	00000000              Sys_GetMode
00013f78 g     F .text	00000146              fmtCnt
00008c9c       F *UND*	00000000              Stapp_LegacyInstall_end
00022238 g     F .text	00000064              .hidden __libc_csu_init
00016cb0 g     F .text	0000004a              basename
0001f76a g     F .text	00000000              .hidden TlvTree_New
0001d29c g     F .text	00000244              .hidden FMG_CheckFileCoherence
00008ca8       F *UND*	00000000              OSL_InitFuncAndBranch
0000f374 g     F .text	00000058              GoalPrnDocument
00021528 g     F .text	00000018              .hidden SEClib_Close
0003ea6c g     O .bss	00000003              isoField026
00013800 g     F .text	00000086              quePutTlv
00021bd0 g     F .text	00000000              .hidden GL_Widget_SearchId
0003ea70 g     O .bss	000003e8              isoField110
0003ee58 g     O .bss	000003e8              isoField118
00008cb4       F *UND*	00000000              sprintf@@GLIBC_2.4
0001f55a g     F .text	00000000              .hidden LL_GetLastError
0000f8ec g     F .text	000000be              FMGDeleteBatch
00008cc0       F *UND*	00000000              Oem_upload_diagnostic_txt
000207fc g     F .text	00000020              .hidden Telium_Sprintf
0003f240 g     O .bss	00000002              hostGateway
0001506c g     F .text	000000b0              stdParity
0001a458 g     F .text	00000418              .hidden AddModifyRecordMiddle
0003f244 g     O .bss	00000007              invoiceNo
00021bac g     F .text	00000000              .hidden GL_Widget_RegisterCallback
00013c18 g     F .text	000000da              tbxParity
000221c0 g     F .text	0000002c              .hidden GTL_StdTimer_GetElapsed
000125e8 g     F .text	000000c4              num2dec
0001f4ca g     F .text	00000000              .hidden LL_ClearSendBuffer
0003f24c g     O .bss	0000000a              isoField033
00021760 g     F .text	00000000              .hidden GL_Document_Print
0000d640 g     F .text	000003a6              GoalDspLine
00020ec0 g     F .text	00000000              .hidden DisplayFooter
0003f258 g     O .bss	000003e8              isoField078
0002248c g     F .text	00000020              .hidden __aeabi_uidivmod
000208e8 g     F .text	00000000              .hidden FS_dskcreate
0003f640 g     O .bss	000003e8              isoField070
000113a0 g     F .text	00000068              ParamExist
00016c54 g     F .text	0000005c              kbdKey
00012ed4 g     F .text	0000006e              tmrGet
0003fa28 g     O .bss	000003e8              isoField107
0003fe10 g     O .bss	000003e8              isoField087
00021e34 g     F .text	00000000              .hidden GL_Widget_SetSize
000401f8 g     O .bss	0000000a              isoField044
000216d0 g     F .text	00000000              .hidden GL_Dialog_Progress
0001f632 g     F .text	00000000              .hidden LL_Send
0001f722 g     F .text	00000000              .hidden TlvTree_AddChildInteger
00042ebc g     O .bss	00000004              beg
00013630 g     F .text	00000072              queNxt
0000e848 g     F .text	00000040              GoalDestroyDrawing
00000000       O *UND*	00000000              __libc_enable_secure@@GLIBC_PRIVATE
0001b25c g     F .text	00000418              .hidden AddModifyRecordEndWithCkecksum
00040204 g     O .bss	00000064              isoField001
00008cd0       F *UND*	00000000              Stapp_LegacyUninstall
0001448c g     F .text	000000c4              fmtDel
00008cdc       F *UND*	00000000              strcmp@@GLIBC_2.4
00016afc g     F .text	000000e4              message_RemoveCard
00020d04 g     F .text	00000000              .hidden ObjectGetInfo
0001f4a6 g     F .text	00000000              .hidden LL_ClearReceiveBuffer
0000a32c g     F .text	00000176              debit_non_emv
00040268 g     O .bss	00000009              isoField009
00009878 g     F .text	000000f8              keyboard_event
00008d90 g     F .text	000000c8              .hidden telinux_gmon_dump_prepare
00019948 g     F .text	00000046              LoadKeysAuto
00030068 g     O .bss	00000004              sSavedStatusFooter
0001fbe8 g     F .text	00000000              .hidden Telium_Is_iso3
00022098 g     F .text	00000000              .hidden GL_Swi_ObjectLoad
00040274 g     O .bss	000003e8              billerReceipt
0004065c g     O .bss	000003e8              isoField122
00021dc8 g     F .text	00000000              .hidden GL_Widget_SetMinSize
000222a0 g     F .text	00000000              .hidden __aeabi_uidiv
00012f44 g     F .text	00000054              tmrStop
0000f7e8 g     F .text	00000104              FMGCreateBatch
00040a44 g     O .bss	00000064              isoField057
000164d8 g     F .text	0000004e              begKey
00022078 g     F .text	00000010              .hidden GL_IsPresent
00008ce8       F *UND*	00000000              strncpy@@GLIBC_2.4
00040aa8 g     O .bss	000003e8              isoField094
00021c18 g     F .text	00000000              .hidden GL_Widget_SetBackColor
00020db0 g     F .text	00000000              .hidden PageFree
0001f65c g     F .text	00000060              .hidden LINKLAYER_GetProcAddressWithoutExit
00040e90 g     O .bss	00000005              isoField016
00000000  w      *UND*	00000000              _ITM_deregisterTMCloneTable
00016218 g     F .text	0000011a              ts2dt
0001678c g     F .text	00000152              getDateTime
00008cf4       F *UND*	00000000              memcmp@@GLIBC_2.4
00020c48 g     F .text	00000000              .hidden FS_write
00021372 g     F .text	00000000              .hidden SEC_ComputeMAC
00040e98 g     O .bss	000003e8              isoField066
000214fc g     F .text	0000002c              .hidden SEClib_Open
00013038 g     F .text	0000004e              bufInit
00021540  w    F .text	00000004              .hidden LIBSEC_IsPresent
0000d608 g     F .text	00000038              GoalRefreshScreen
00013ec8 g     F .text	000000b0              fmtPad
0002088c g     F .text	00000000              .hidden FS_close
0002229c g     F .text	00000004              .hidden __libc_csu_fini
00021880 g     F .text	00000000              .hidden GL_Drawing_SetFont
00010b18 g     F .text	000002b0              SEC_ErrorMsg
0000e54c g     F .text	0000015e              GoalDrawEllipse
00020af0 g     F .text	00000000              .hidden FS_rename
00041280 g     O .bss	00000003              isoField027
00008d00       F *UND*	00000000              strrchr@@GLIBC_2.4
00021544 g     F .text	00000000              .hidden LIBSECV2_InitFuncAndBranch
00021fe4 g     F .text	00000000              .hidden GL_Window_MainLoop
00014be4 g     F .text	00000058              stdPow
00041284 g     O .bss	000003e8              isoField117
00020a98 g     F .text	00000000              .hidden FS_read
00021a44 g     F .text	00000000              .hidden GL_Message_GetWidget
0001ff58 g     F .text	00000000              .hidden InitContexteGraphique
00009b1c g     F .text	000000bc              mcall
000219fc g     F .text	00000000              .hidden GL_Layout_Create
0004166c g     O .bss	000003e8              isoField079
0001255c g     F .text	00000034              dPtr
00008d0c       F *UND*	00000000              getenv@@GLIBC_2.4
00008d18       F *UND*	00000000              __libc_start_main@@GLIBC_2.4
0002173c g     F .text	00000000              .hidden GL_Document_Create
00041a54 g     O .bss	000003e8              isoField071
0000a0dc g     F .text	00000060              is_card_specific
0000f3cc g     F .text	00000040              GoalDestroyDocument
00041e3c g     O .bss	0000000a              isoField034
00008d24       F *UND*	00000000              vsprintf@@GLIBC_2.4
00008d30       F *UND*	00000000              iniparser_load
00000000  w      *UND*	00000000              __gmon_start__
00017ed8 g     F .text	000002ca              SetConfig
00041e48 g     O .bss	000003e8              isoField106
00021838 g     F .text	00000000              .hidden GL_Drawing_DrawText
00009ddc g     F .text	00000060              is_evol_pg
00021f54 g     F .text	00000000              .hidden GL_Widget_UnregisterCallback
00042230 g     O .bss	000003e8              isoField088
00042618 g     O .bss	000003e8              billerRef
00013ad4 g     F .text	0000006c              bitOn
00042a00 g     O .bss	0000000a              isoField045
000220be g     F .text	00000000              .hidden OSL_Dll_Close
00000000  w      *UND*	00000000              _ITM_registerTMCloneTable
0001d55c g     F .text	00000074              .hidden FMG_CalculMD5
00021a8c g     F .text	00000000              .hidden GL_Message_SetUserData
00008d48       F *UND*	00000000              strchr@@GLIBC_2.4
000216ac g     F .text	00000000              .hidden GL_Dialog_Password
00042a0c g     O .bss	00000064              isoField002
00013cf4 g     F .text	000000ce              tbxCheckParity
00021fc0 g     F .text	00000000              .hidden GL_Window_GetResult
0000ef50 g     F .text	000001de              GoalPrnLine
000218e0 g     F .text	00000060              .hidden GL_GraphicLib_Create
000211a4 g     F .text	00000018              .hidden emulationlib_close
0000e3ec g     F .text	0000015e              GoalDrawRect
00042a70 g     O .bss	000003e8              isoField080
000211d8 g     F .text	00000000              .hidden TM_InitContexteGraphique
00010dc8 g     F .text	000000c0              OpenConverter
00014ec0 g     F .text	00000078              stdArgMsgCrc16
00021100 g     F .text	00000000              .hidden upload_diagnostic_txt
000134e0 g     F .text	00000050              queReset
000203d4 g     F .text	00000044              .hidden pinpadlib_open
00012830 g     F .text	00000118              dec2num
0001fb84 g     F .text	00000000              .hidden Telium_Is_iso2
0000f40c g     F .text	00000038              getAppCmpDat
0001f6e4 g     F .text	00000010              .hidden LINKLAYER_IsPresent
00042e58 g     O .bss	00000064              isoField058
00014dac g     F .text	00000112              stdLuhnCheck
000217cc g     F .text	00000000              .hidden GL_Drawing_DrawEllipse



Disassembly of section .init:

00008b60 <_init>:
    8b60:	e92d4008 	push	{r3, lr}
    8b64:	eb0000c0 	bl	8e6c <call_gmon_start>
    8b68:	e8bd8008 	pop	{r3, pc}

Disassembly of section .plt:

00008b6c <.plt>:
    8b6c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8b70:	e59fe004 	ldr	lr, [pc, #4]	; 8b7c <_init+0x1c>
    8b74:	e08fe00e 	add	lr, pc, lr
    8b78:	e5bef008 	ldr	pc, [lr, #8]!
    8b7c:	0002659c 	.word	0x0002659c
    8b80:	e28fc600 	add	ip, pc, #0
    8b84:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8b88:	e5bcf59c 	ldr	pc, [ip, #1436]!	; 0x59c
    8b8c:	e28fc600 	add	ip, pc, #0
    8b90:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8b94:	e5bcf594 	ldr	pc, [ip, #1428]!	; 0x594
    8b98:	e28fc600 	add	ip, pc, #0
    8b9c:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8ba0:	e5bcf58c 	ldr	pc, [ip, #1420]!	; 0x58c
    8ba4:	e28fc600 	add	ip, pc, #0
    8ba8:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8bac:	e5bcf584 	ldr	pc, [ip, #1412]!	; 0x584
    8bb0:	e28fc600 	add	ip, pc, #0
    8bb4:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8bb8:	e5bcf57c 	ldr	pc, [ip, #1404]!	; 0x57c
    8bbc:	e28fc600 	add	ip, pc, #0
    8bc0:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8bc4:	e5bcf574 	ldr	pc, [ip, #1396]!	; 0x574
    8bc8:	e28fc600 	add	ip, pc, #0
    8bcc:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8bd0:	e5bcf56c 	ldr	pc, [ip, #1388]!	; 0x56c
    8bd4:	e28fc600 	add	ip, pc, #0
    8bd8:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8bdc:	e5bcf564 	ldr	pc, [ip, #1380]!	; 0x564
    8be0:	e28fc600 	add	ip, pc, #0
    8be4:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8be8:	e5bcf55c 	ldr	pc, [ip, #1372]!	; 0x55c
    8bec:	e28fc600 	add	ip, pc, #0
    8bf0:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8bf4:	e5bcf554 	ldr	pc, [ip, #1364]!	; 0x554
    8bf8:	e28fc600 	add	ip, pc, #0
    8bfc:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c00:	e5bcf54c 	ldr	pc, [ip, #1356]!	; 0x54c
    8c04:	4778      	bx	pc
    8c06:	46c0      	nop			; (mov r8, r8)
    8c08:	e28fc600 	add	ip, pc, #0
    8c0c:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c10:	e5bcf540 	ldr	pc, [ip, #1344]!	; 0x540
    8c14:	e28fc600 	add	ip, pc, #0
    8c18:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c1c:	e5bcf538 	ldr	pc, [ip, #1336]!	; 0x538
    8c20:	e28fc600 	add	ip, pc, #0
    8c24:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c28:	e5bcf530 	ldr	pc, [ip, #1328]!	; 0x530
    8c2c:	e28fc600 	add	ip, pc, #0
    8c30:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c34:	e5bcf528 	ldr	pc, [ip, #1320]!	; 0x528
    8c38:	e28fc600 	add	ip, pc, #0
    8c3c:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c40:	e5bcf520 	ldr	pc, [ip, #1312]!	; 0x520
    8c44:	e28fc600 	add	ip, pc, #0
    8c48:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c4c:	e5bcf518 	ldr	pc, [ip, #1304]!	; 0x518
    8c50:	e28fc600 	add	ip, pc, #0
    8c54:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c58:	e5bcf510 	ldr	pc, [ip, #1296]!	; 0x510
    8c5c:	4778      	bx	pc
    8c5e:	46c0      	nop			; (mov r8, r8)
    8c60:	e28fc600 	add	ip, pc, #0
    8c64:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c68:	e5bcf504 	ldr	pc, [ip, #1284]!	; 0x504
    8c6c:	e28fc600 	add	ip, pc, #0
    8c70:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c74:	e5bcf4fc 	ldr	pc, [ip, #1276]!	; 0x4fc
    8c78:	e28fc600 	add	ip, pc, #0
    8c7c:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c80:	e5bcf4f4 	ldr	pc, [ip, #1268]!	; 0x4f4
    8c84:	e28fc600 	add	ip, pc, #0
    8c88:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c8c:	e5bcf4ec 	ldr	pc, [ip, #1260]!	; 0x4ec
    8c90:	e28fc600 	add	ip, pc, #0
    8c94:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8c98:	e5bcf4e4 	ldr	pc, [ip, #1252]!	; 0x4e4
    8c9c:	e28fc600 	add	ip, pc, #0
    8ca0:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8ca4:	e5bcf4dc 	ldr	pc, [ip, #1244]!	; 0x4dc
    8ca8:	e28fc600 	add	ip, pc, #0
    8cac:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8cb0:	e5bcf4d4 	ldr	pc, [ip, #1236]!	; 0x4d4
    8cb4:	e28fc600 	add	ip, pc, #0
    8cb8:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8cbc:	e5bcf4cc 	ldr	pc, [ip, #1228]!	; 0x4cc
    8cc0:	e28fc600 	add	ip, pc, #0
    8cc4:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8cc8:	e5bcf4c4 	ldr	pc, [ip, #1220]!	; 0x4c4
    8ccc:	4778      	bx	pc
    8cce:	46c0      	nop			; (mov r8, r8)
    8cd0:	e28fc600 	add	ip, pc, #0
    8cd4:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8cd8:	e5bcf4b8 	ldr	pc, [ip, #1208]!	; 0x4b8
    8cdc:	e28fc600 	add	ip, pc, #0
    8ce0:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8ce4:	e5bcf4b0 	ldr	pc, [ip, #1200]!	; 0x4b0
    8ce8:	e28fc600 	add	ip, pc, #0
    8cec:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8cf0:	e5bcf4a8 	ldr	pc, [ip, #1192]!	; 0x4a8
    8cf4:	e28fc600 	add	ip, pc, #0
    8cf8:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8cfc:	e5bcf4a0 	ldr	pc, [ip, #1184]!	; 0x4a0
    8d00:	e28fc600 	add	ip, pc, #0
    8d04:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8d08:	e5bcf498 	ldr	pc, [ip, #1176]!	; 0x498
    8d0c:	e28fc600 	add	ip, pc, #0
    8d10:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8d14:	e5bcf490 	ldr	pc, [ip, #1168]!	; 0x490
    8d18:	e28fc600 	add	ip, pc, #0
    8d1c:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8d20:	e5bcf488 	ldr	pc, [ip, #1160]!	; 0x488
    8d24:	e28fc600 	add	ip, pc, #0
    8d28:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8d2c:	e5bcf480 	ldr	pc, [ip, #1152]!	; 0x480
    8d30:	e28fc600 	add	ip, pc, #0
    8d34:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8d38:	e5bcf478 	ldr	pc, [ip, #1144]!	; 0x478
    8d3c:	e28fc600 	add	ip, pc, #0
    8d40:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8d44:	e5bcf470 	ldr	pc, [ip, #1136]!	; 0x470
    8d48:	e28fc600 	add	ip, pc, #0
    8d4c:	e28cca26 	add	ip, ip, #155648	; 0x26000
    8d50:	e5bcf468 	ldr	pc, [ip, #1128]!	; 0x468

Disassembly of section .text:

00008d54 <telinux_after_main_last>:
    8d54:	480b      	ldr	r0, [pc, #44]	; (8d84 <telinux_after_main_last+0x30>)
    8d56:	b510      	push	{r4, lr}
    8d58:	490b      	ldr	r1, [pc, #44]	; (8d88 <telinux_after_main_last+0x34>)
    8d5a:	4a0c      	ldr	r2, [pc, #48]	; (8d8c <telinux_after_main_last+0x38>)
    8d5c:	b084      	sub	sp, #16
    8d5e:	4478      	add	r0, pc
    8d60:	2459      	movs	r4, #89	; 0x59
    8d62:	4479      	add	r1, pc
    8d64:	447a      	add	r2, pc
    8d66:	2300      	movs	r3, #0
    8d68:	9003      	str	r0, [sp, #12]
    8d6a:	9101      	str	r1, [sp, #4]
    8d6c:	9200      	str	r2, [sp, #0]
    8d6e:	9402      	str	r4, [sp, #8]
    8d70:	461a      	mov	r2, r3
    8d72:	2111      	movs	r1, #17
    8d74:	2007      	movs	r0, #7
    8d76:	f7ff ef28 	blx	8bc8 <_init+0x68>
    8d7a:	b004      	add	sp, #16
    8d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8d80:	f7ff bfa4 	b.w	8ccc <_init+0x16c>
    8d84:	0001d766 	.word	0x0001d766
    8d88:	0001d74a 	.word	0x0001d74a
    8d8c:	0001d780 	.word	0x0001d780

00008d90 <telinux_gmon_dump_prepare>:
    8d90:	4a2b      	ldr	r2, [pc, #172]	; (8e40 <telinux_gmon_dump_prepare+0xb0>)
    8d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d96:	492b      	ldr	r1, [pc, #172]	; (8e44 <telinux_gmon_dump_prepare+0xb4>)
    8d98:	447a      	add	r2, pc
    8d9a:	4b2b      	ldr	r3, [pc, #172]	; (8e48 <telinux_gmon_dump_prepare+0xb8>)
    8d9c:	5854      	ldr	r4, [r2, r1]
    8d9e:	b08e      	sub	sp, #56	; 0x38
    8da0:	6821      	ldr	r1, [r4, #0]
    8da2:	910d      	str	r1, [sp, #52]	; 0x34
    8da4:	58d5      	ldr	r5, [r2, r3]
    8da6:	682b      	ldr	r3, [r5, #0]
    8da8:	b933      	cbnz	r3, 8db8 <telinux_gmon_dump_prepare+0x28>
    8daa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8dac:	6823      	ldr	r3, [r4, #0]
    8dae:	429a      	cmp	r2, r3
    8db0:	d143      	bne.n	8e3a <telinux_gmon_dump_prepare+0xaa>
    8db2:	b00e      	add	sp, #56	; 0x38
    8db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8db8:	4824      	ldr	r0, [pc, #144]	; (8e4c <telinux_gmon_dump_prepare+0xbc>)
    8dba:	4478      	add	r0, pc
    8dbc:	f7ff efa6 	blx	8d0c <_init+0x1ac>
    8dc0:	2800      	cmp	r0, #0
    8dc2:	d0f2      	beq.n	8daa <telinux_gmon_dump_prepare+0x1a>
    8dc4:	a804      	add	r0, sp, #16
    8dc6:	f7ff ef64 	blx	8c90 <_init+0x130>
    8dca:	4606      	mov	r6, r0
    8dcc:	2800      	cmp	r0, #0
    8dce:	d1ec      	bne.n	8daa <telinux_gmon_dump_prepare+0x1a>
    8dd0:	9b04      	ldr	r3, [sp, #16]
    8dd2:	2b00      	cmp	r3, #0
    8dd4:	d0e9      	beq.n	8daa <telinux_gmon_dump_prepare+0x1a>
    8dd6:	4f1e      	ldr	r7, [pc, #120]	; (8e50 <telinux_gmon_dump_prepare+0xc0>)
    8dd8:	f7ff eed2 	blx	8b80 <_init+0x20>
    8ddc:	f10d 020e 	add.w	r2, sp, #14
    8de0:	a903      	add	r1, sp, #12
    8de2:	447f      	add	r7, pc
    8de4:	f7ff eee4 	blx	8bb0 <_init+0x50>
    8de8:	4631      	mov	r1, r6
    8dea:	4638      	mov	r0, r7
    8dec:	f7ff ef30 	blx	8c50 <_init+0xf0>
    8df0:	4606      	mov	r6, r0
    8df2:	2800      	cmp	r0, #0
    8df4:	d1d9      	bne.n	8daa <telinux_gmon_dump_prepare+0x1a>
    8df6:	4638      	mov	r0, r7
    8df8:	f7ff ef9a 	blx	8d30 <_init+0x1d0>
    8dfc:	4607      	mov	r7, r0
    8dfe:	2800      	cmp	r0, #0
    8e00:	d0d3      	beq.n	8daa <telinux_gmon_dump_prepare+0x1a>
    8e02:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8e06:	f10d 0814 	add.w	r8, sp, #20
    8e0a:	9200      	str	r2, [sp, #0]
    8e0c:	4a11      	ldr	r2, [pc, #68]	; (8e54 <telinux_gmon_dump_prepare+0xc4>)
    8e0e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8e12:	4640      	mov	r0, r8
    8e14:	447a      	add	r2, pc
    8e16:	2120      	movs	r1, #32
    8e18:	f7ff eedc 	blx	8bd4 <_init+0x74>
    8e1c:	4641      	mov	r1, r8
    8e1e:	f04f 32ff 	mov.w	r2, #4294967295
    8e22:	4638      	mov	r0, r7
    8e24:	f7ff eeb8 	blx	8b98 <_init+0x38>
    8e28:	4680      	mov	r8, r0
    8e2a:	4638      	mov	r0, r7
    8e2c:	f7ff eefe 	blx	8c2c <_init+0xcc>
    8e30:	f1b8 0f00 	cmp.w	r8, #0
    8e34:	d0b9      	beq.n	8daa <telinux_gmon_dump_prepare+0x1a>
    8e36:	602e      	str	r6, [r5, #0]
    8e38:	e7b7      	b.n	8daa <telinux_gmon_dump_prepare+0x1a>
    8e3a:	f000 f8b3 	bl	8fa4 <__stack_chk_fail>
    8e3e:	bf00      	nop
    8e40:	0002637c 	.word	0x0002637c
    8e44:	000000ac 	.word	0x000000ac
    8e48:	000000f4 	.word	0x000000f4
    8e4c:	0001d746 	.word	0x0001d746
    8e50:	0001d72e 	.word	0x0001d72e
    8e54:	0001d720 	.word	0x0001d720

00008e58 <main>:
    8e58:	b508      	push	{r3, lr}
    8e5a:	f001 fb5d 	bl	a518 <entry>
    8e5e:	f7ff ef1e 	blx	8c9c <_init+0x13c>
    8e62:	f7ff eec4 	blx	8bec <_init+0x8c>
    8e66:	e7fc      	b.n	8e62 <main+0xa>

00008e68 <telinux_before_main_first>:
    8e68:	f7ff bef8 	b.w	8c5c <_init+0xfc>

00008e6c <call_gmon_start>:
    8e6c:	e59f3014 	ldr	r3, [pc, #20]	; 8e88 <call_gmon_start+0x1c>
    8e70:	e59f2014 	ldr	r2, [pc, #20]	; 8e8c <call_gmon_start+0x20>
    8e74:	e08f3003 	add	r3, pc, r3
    8e78:	e7933002 	ldr	r3, [r3, r2]
    8e7c:	e3530000 	cmp	r3, #0
    8e80:	012fff1e 	bxeq	lr
    8e84:	eaffffac 	b	8d3c <_init+0x1dc>
    8e88:	0002629c 	.word	0x0002629c
    8e8c:	00000104 	.word	0x00000104

00008e90 <_start>:
    8e90:	e3a0b000 	mov	fp, #0
    8e94:	e3a0e000 	mov	lr, #0
    8e98:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    8e9c:	e1a0200d 	mov	r2, sp
    8ea0:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    8ea4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    8ea8:	e59fc010 	ldr	ip, [pc, #16]	; 8ec0 <_start+0x30>
    8eac:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    8eb0:	e59f000c 	ldr	r0, [pc, #12]	; 8ec4 <_start+0x34>
    8eb4:	e59f300c 	ldr	r3, [pc, #12]	; 8ec8 <_start+0x38>
    8eb8:	ebffff96 	bl	8d18 <_init+0x1b8>
    8ebc:	ebffff47 	bl	8be0 <_init+0x80>
    8ec0:	0002229c 	.word	0x0002229c
    8ec4:	00008e59 	.word	0x00008e59
    8ec8:	00022238 	.word	0x00022238

00008ecc <deregister_tm_clones>:
    8ecc:	e92d4008 	push	{r3, lr}
    8ed0:	e59f0020 	ldr	r0, [pc, #32]	; 8ef8 <deregister_tm_clones+0x2c>
    8ed4:	e59f3020 	ldr	r3, [pc, #32]	; 8efc <deregister_tm_clones+0x30>
    8ed8:	e0603003 	rsb	r3, r0, r3
    8edc:	e3530006 	cmp	r3, #6
    8ee0:	98bd8008 	popls	{r3, pc}
    8ee4:	e59f3014 	ldr	r3, [pc, #20]	; 8f00 <deregister_tm_clones+0x34>
    8ee8:	e3530000 	cmp	r3, #0
    8eec:	08bd8008 	popeq	{r3, pc}
    8ef0:	e12fff33 	blx	r3
    8ef4:	e8bd8008 	pop	{r3, pc}
    8ef8:	0002fee0 	.word	0x0002fee0
    8efc:	0002fee3 	.word	0x0002fee3
    8f00:	00000000 	.word	0x00000000

00008f04 <register_tm_clones>:
    8f04:	e92d4008 	push	{r3, lr}
    8f08:	e59f202c 	ldr	r2, [pc, #44]	; 8f3c <register_tm_clones+0x38>
    8f0c:	e59f302c 	ldr	r3, [pc, #44]	; 8f40 <register_tm_clones+0x3c>
    8f10:	e0633002 	rsb	r3, r3, r2
    8f14:	e1b03143 	asrs	r3, r3, #2
    8f18:	42833001 	addmi	r3, r3, #1
    8f1c:	e1b010c3 	asrs	r1, r3, #1
    8f20:	08bd8008 	popeq	{r3, pc}
    8f24:	e59f2018 	ldr	r2, [pc, #24]	; 8f44 <register_tm_clones+0x40>
    8f28:	e3520000 	cmp	r2, #0
    8f2c:	08bd8008 	popeq	{r3, pc}
    8f30:	e59f0008 	ldr	r0, [pc, #8]	; 8f40 <register_tm_clones+0x3c>
    8f34:	e12fff32 	blx	r2
    8f38:	e8bd8008 	pop	{r3, pc}
    8f3c:	0002fee0 	.word	0x0002fee0
    8f40:	0002fee0 	.word	0x0002fee0
    8f44:	00000000 	.word	0x00000000

00008f48 <__do_global_dtors_aux>:
    8f48:	e92d4010 	push	{r4, lr}
    8f4c:	e59f4018 	ldr	r4, [pc, #24]	; 8f6c <__do_global_dtors_aux+0x24>
    8f50:	e5d43000 	ldrb	r3, [r4]
    8f54:	e3530000 	cmp	r3, #0
    8f58:	18bd8010 	popne	{r4, pc}
    8f5c:	ebffffda 	bl	8ecc <deregister_tm_clones>
    8f60:	e3a03001 	mov	r3, #1
    8f64:	e5c43000 	strb	r3, [r4]
    8f68:	e8bd8010 	pop	{r4, pc}
    8f6c:	0002fee4 	.word	0x0002fee4

00008f70 <frame_dummy>:
    8f70:	e59f0024 	ldr	r0, [pc, #36]	; 8f9c <frame_dummy+0x2c>
    8f74:	e92d4008 	push	{r3, lr}
    8f78:	e5903000 	ldr	r3, [r0]
    8f7c:	e3530000 	cmp	r3, #0
    8f80:	0a000003 	beq	8f94 <frame_dummy+0x24>
    8f84:	e59f3014 	ldr	r3, [pc, #20]	; 8fa0 <frame_dummy+0x30>
    8f88:	e3530000 	cmp	r3, #0
    8f8c:	0a000000 	beq	8f94 <frame_dummy+0x24>
    8f90:	e12fff33 	blx	r3
    8f94:	e8bd4008 	pop	{r3, lr}
    8f98:	eaffffd9 	b	8f04 <register_tm_clones>
    8f9c:	0002f014 	.word	0x0002f014
    8fa0:	00000000 	.word	0x00000000

00008fa4 <__stack_chk_fail>:
    8fa4:	b508      	push	{r3, lr}
    8fa6:	f7ff ee36 	blx	8c14 <_init+0xb4>
    8faa:	f7ff edf0 	blx	8b8c <_init+0x2c>
    8fae:	210b      	movs	r1, #11
    8fb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8fb4:	f7ff be26 	b.w	8c04 <_init+0xa4>

00008fb8 <Main>:
 *
 * \see sdk_tplus.h
 *      etat.h
 */
int Main(unsigned int size, StructPt *data)
{
    8fb8:	b580      	push	{r7, lr}
    8fba:	b086      	sub	sp, #24
    8fbc:	af00      	add	r7, sp, #0
    8fbe:	6078      	str	r0, [r7, #4]
    8fc0:	6039      	str	r1, [r7, #0]
    8fc2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    8fc6:	f2c0 0302 	movt	r3, #2
    8fca:	681b      	ldr	r3, [r3, #0]
    8fcc:	617b      	str	r3, [r7, #20]
  NO_SEGMENT No;
  int ret = FCT_OK;
    8fce:	2300      	movs	r3, #0
    8fd0:	613b      	str	r3, [r7, #16]

  // Service call management
  No = ApplicationGetCurrent(); // Return the application number
    8fd2:	f017 fc2f 	bl	20834 <ApplicationGetCurrent>
    8fd6:	4603      	mov	r3, r0
    8fd8:	73fb      	strb	r3, [r7, #15]
  switch (data->service)
    8fda:	683b      	ldr	r3, [r7, #0]
    8fdc:	885b      	ldrh	r3, [r3, #2]
    8fde:	3b01      	subs	r3, #1
    8fe0:	2b2a      	cmp	r3, #42	; 0x2a
    8fe2:	f200 8139 	bhi.w	9258 <Main+0x2a0>
    8fe6:	a201      	add	r2, pc, #4	; (adr r2, 8fec <Main+0x34>)
    8fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8fec:	000090f7 	.word	0x000090f7
    8ff0:	0000914f 	.word	0x0000914f
    8ff4:	00009163 	.word	0x00009163
    8ff8:	00009259 	.word	0x00009259
    8ffc:	0000912f 	.word	0x0000912f
    9000:	0000913f 	.word	0x0000913f
    9004:	0000911f 	.word	0x0000911f
    9008:	00009259 	.word	0x00009259
    900c:	000090c1 	.word	0x000090c1
    9010:	000090d5 	.word	0x000090d5
    9014:	0000919b 	.word	0x0000919b
    9018:	00009173 	.word	0x00009173
    901c:	00009187 	.word	0x00009187
    9020:	00009259 	.word	0x00009259
    9024:	00009259 	.word	0x00009259
    9028:	00009259 	.word	0x00009259
    902c:	00009259 	.word	0x00009259
    9030:	00009259 	.word	0x00009259
    9034:	00009259 	.word	0x00009259
    9038:	000091af 	.word	0x000091af
    903c:	00009259 	.word	0x00009259
    9040:	00009259 	.word	0x00009259
    9044:	000090e9 	.word	0x000090e9
    9048:	00009259 	.word	0x00009259
    904c:	00009259 	.word	0x00009259
    9050:	00009107 	.word	0x00009107
    9054:	00009259 	.word	0x00009259
    9058:	000091c3 	.word	0x000091c3
    905c:	000091d7 	.word	0x000091d7
    9060:	00009205 	.word	0x00009205
    9064:	00009259 	.word	0x00009259
    9068:	00009259 	.word	0x00009259
    906c:	000091eb 	.word	0x000091eb
    9070:	00009259 	.word	0x00009259
    9074:	00009259 	.word	0x00009259
    9078:	00009221 	.word	0x00009221
    907c:	00009259 	.word	0x00009259
    9080:	00009259 	.word	0x00009259
    9084:	0000923d 	.word	0x0000923d
    9088:	00009259 	.word	0x00009259
    908c:	00009259 	.word	0x00009259
    9090:	00009099 	.word	0x00009099
    9094:	000090ad 	.word	0x000090ad
  {
  case GIVE_YOUR_DOMAIN: // Return application domain to Manager
    ret = give_your_domain(No, NULL, &data->Param.GiveYourType.param_out);
    9098:	683b      	ldr	r3, [r7, #0]
    909a:	3304      	adds	r3, #4
    909c:	7bfa      	ldrb	r2, [r7, #15]
    909e:	4610      	mov	r0, r2
    90a0:	2100      	movs	r1, #0
    90a2:	461a      	mov	r2, r3
    90a4:	f000 f90a 	bl	92bc <give_your_domain>
    90a8:	6138      	str	r0, [r7, #16]
    break;
    90aa:	e0d6      	b.n	925a <Main+0x2a2>

  case AFTER_RESET: // Activated on each terminal reset
    ret = after_reset(No, NULL, &data->Param.AfterReset.param_out);
    90ac:	683b      	ldr	r3, [r7, #0]
    90ae:	3304      	adds	r3, #4
    90b0:	7bfa      	ldrb	r2, [r7, #15]
    90b2:	4610      	mov	r0, r2
    90b4:	2100      	movs	r1, #0
    90b6:	461a      	mov	r2, r3
    90b8:	f000 f936 	bl	9328 <after_reset>
    90bc:	6138      	str	r0, [r7, #16]
    break;
    90be:	e0cc      	b.n	925a <Main+0x2a2>

  case IS_NAME: // Activated when Manager wants to get application name
    ret = is_name(No, NULL, &data->Param.IsName.param_out);
    90c0:	683b      	ldr	r3, [r7, #0]
    90c2:	3304      	adds	r3, #4
    90c4:	7bfa      	ldrb	r2, [r7, #15]
    90c6:	4610      	mov	r0, r2
    90c8:	2100      	movs	r1, #0
    90ca:	461a      	mov	r2, r3
    90cc:	f000 fad2 	bl	9674 <is_name>
    90d0:	6138      	str	r0, [r7, #16]
    break;
    90d2:	e0c2      	b.n	925a <Main+0x2a2>

  case IS_STATE: // Activated at boot and every minute to check if application is initialized
    ret = is_state(No, NULL, &data->Param.IsState.param_out);
    90d4:	683b      	ldr	r3, [r7, #0]
    90d6:	3304      	adds	r3, #4
    90d8:	7bfa      	ldrb	r2, [r7, #15]
    90da:	4610      	mov	r0, r2
    90dc:	2100      	movs	r1, #0
    90de:	461a      	mov	r2, r3
    90e0:	f000 fb18 	bl	9714 <is_state>
    90e4:	6138      	str	r0, [r7, #16]
    break;
    90e6:	e0b8      	b.n	925a <Main+0x2a2>

  case IDLE_MESSAGE: // Activated when Manager goes back to idle, to display its message
    idle_message(No, NULL, NULL);
    90e8:	7bfb      	ldrb	r3, [r7, #15]
    90ea:	4618      	mov	r0, r3
    90ec:	2100      	movs	r1, #0
    90ee:	2200      	movs	r2, #0
    90f0:	f000 fb40 	bl	9774 <idle_message>
    break;
    90f4:	e0b1      	b.n	925a <Main+0x2a2>
    //       can be used with INCENDO.
    // This other prototype is used if the application manages more than one application name.
    // The 'S_ETATOUT' structure allows to know the name selected by the user after pressing the "F" key.
    // This new prototype can be used with SDK version >= 6.5.
    // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ret = more_function(No, NULL, NULL);
    90f6:	7bfb      	ldrb	r3, [r7, #15]
    90f8:	4618      	mov	r0, r3
    90fa:	2100      	movs	r1, #0
    90fc:	2200      	movs	r2, #0
    90fe:	f000 fb9b 	bl	9838 <more_function>
    9102:	6138      	str	r0, [r7, #16]
    break;
    9104:	e0a9      	b.n	925a <Main+0x2a2>

  case KEYBOARD_EVENT: // Activated when key is pressed
    ret = keyboard_event(No, &data->Param.KeyboardEvent.param_in,
    9106:	683b      	ldr	r3, [r7, #0]
    9108:	1d1a      	adds	r2, r3, #4
    910a:	683b      	ldr	r3, [r7, #0]
    910c:	3308      	adds	r3, #8
    910e:	7bf9      	ldrb	r1, [r7, #15]
    9110:	4608      	mov	r0, r1
    9112:	4611      	mov	r1, r2
    9114:	461a      	mov	r2, r3
    9116:	f000 fbaf 	bl	9878 <keyboard_event>
    911a:	6138      	str	r0, [r7, #16]
        &data->Param.KeyboardEvent.param_out);
    break;
    911c:	e09d      	b.n	925a <Main+0x2a2>

  case STATE: // Activated on "F" key: Consultation->State, to print terminal content receipt
    ret = state(No, NULL, NULL);
    911e:	7bfb      	ldrb	r3, [r7, #15]
    9120:	4618      	mov	r0, r3
    9122:	2100      	movs	r1, #0
    9124:	2200      	movs	r2, #0
    9126:	f000 fc23 	bl	9970 <state>
    912a:	6138      	str	r0, [r7, #16]
    break;
    912c:	e095      	b.n	925a <Main+0x2a2>

  case CONSULT: // Activated on "F" key: Consultation->Transactions, to print transaction totals receipt
    ret = consult(No, NULL, NULL);
    912e:	7bfb      	ldrb	r3, [r7, #15]
    9130:	4618      	mov	r0, r3
    9132:	2100      	movs	r1, #0
    9134:	2200      	movs	r2, #0
    9136:	f000 fc93 	bl	9a60 <consult>
    913a:	6138      	str	r0, [r7, #16]
    break;
    913c:	e08d      	b.n	925a <Main+0x2a2>

  case MCALL: // Activated on "F" key: Consultation->Call->Planning of Call, to print host call planning receipt
    ret = mcall(No, NULL, NULL);
    913e:	7bfb      	ldrb	r3, [r7, #15]
    9140:	4618      	mov	r0, r3
    9142:	2100      	movs	r1, #0
    9144:	2200      	movs	r2, #0
    9146:	f000 fce9 	bl	9b1c <mcall>
    914a:	6138      	str	r0, [r7, #16]
    break;
    914c:	e085      	b.n	925a <Main+0x2a2>

  case IS_TIME_FUNCTION: // Activated every minute, do you need the peripherals at the next call of time_function()?
    ret = is_time_function(No, NULL, &data->Param.IsTimeFunction.param_out);
    914e:	683b      	ldr	r3, [r7, #0]
    9150:	3304      	adds	r3, #4
    9152:	7bfa      	ldrb	r2, [r7, #15]
    9154:	4610      	mov	r0, r2
    9156:	2100      	movs	r1, #0
    9158:	461a      	mov	r2, r3
    915a:	f000 fd3d 	bl	9bd8 <is_time_function>
    915e:	6138      	str	r0, [r7, #16]
    break;
    9160:	e07b      	b.n	925a <Main+0x2a2>

  case TIME_FUNCTION: // Activated every minute, to execute automatic periodic functions
    ret = time_function(No, NULL, NULL);
    9162:	7bfb      	ldrb	r3, [r7, #15]
    9164:	4618      	mov	r0, r3
    9166:	2100      	movs	r1, #0
    9168:	2200      	movs	r2, #0
    916a:	f000 fd65 	bl	9c38 <time_function>
    916e:	6138      	str	r0, [r7, #16]
    break;
    9170:	e073      	b.n	925a <Main+0x2a2>

  case IS_CHANGE_INIT: // Activated on "F" key: Initialization->Parameters->List, Conditions for changing Manager parameters?
    ret = is_change_init(No, NULL, &data->Param.IsChangeInit.param_out);
    9172:	683b      	ldr	r3, [r7, #0]
    9174:	3304      	adds	r3, #4
    9176:	7bfa      	ldrb	r2, [r7, #15]
    9178:	4610      	mov	r0, r2
    917a:	2100      	movs	r1, #0
    917c:	461a      	mov	r2, r3
    917e:	f000 fd8f 	bl	9ca0 <is_change_init>
    9182:	6138      	str	r0, [r7, #16]
    break;
    9184:	e069      	b.n	925a <Main+0x2a2>

  case MODIF_PARAM: // Activated on "F" key: Initialization->Parameters->List, Manager reports parameters changed.
    ret = modif_param(No, &data->Param.ModifParam.param_in, NULL);
    9186:	683b      	ldr	r3, [r7, #0]
    9188:	3304      	adds	r3, #4
    918a:	7bfa      	ldrb	r2, [r7, #15]
    918c:	4610      	mov	r0, r2
    918e:	4619      	mov	r1, r3
    9190:	2200      	movs	r2, #0
    9192:	f000 fdd7 	bl	9d44 <modif_param>
    9196:	6138      	str	r0, [r7, #16]
    break;
    9198:	e05f      	b.n	925a <Main+0x2a2>

  case IS_EVOL_PG: // Activated on "F" key: Evolution->Load->Local or RemoteLoad, Conditions for application downloading?
    ret = is_evol_pg(No, NULL, &data->Param.IsEvolPg.param_out);
    919a:	683b      	ldr	r3, [r7, #0]
    919c:	3304      	adds	r3, #4
    919e:	7bfa      	ldrb	r2, [r7, #15]
    91a0:	4610      	mov	r0, r2
    91a2:	2100      	movs	r1, #0
    91a4:	461a      	mov	r2, r3
    91a6:	f000 fe19 	bl	9ddc <is_evol_pg>
    91aa:	6138      	str	r0, [r7, #16]
    break;
    91ac:	e055      	b.n	925a <Main+0x2a2>

  case IS_DELETE: // Activated on "F" key: Deletion, Conditions for application deletion?
    ret = is_delete(No, NULL, &data->Param.IsDelete.param_out);
    91ae:	683b      	ldr	r3, [r7, #0]
    91b0:	3304      	adds	r3, #4
    91b2:	7bfa      	ldrb	r2, [r7, #15]
    91b4:	4610      	mov	r0, r2
    91b6:	2100      	movs	r1, #0
    91b8:	461a      	mov	r2, r3
    91ba:	f000 fe3f 	bl	9e3c <is_delete>
    91be:	6138      	str	r0, [r7, #16]
    break;
    91c0:	e04b      	b.n	925a <Main+0x2a2>

  case FILE_RECEIVED: // Activated each time Manager received a file from a "parameters" downloading session
    ret = file_received(No, &data->Param.FileReceived.param_in, NULL);
    91c2:	683b      	ldr	r3, [r7, #0]
    91c4:	3304      	adds	r3, #4
    91c6:	7bfa      	ldrb	r2, [r7, #15]
    91c8:	4610      	mov	r0, r2
    91ca:	4619      	mov	r1, r3
    91cc:	2200      	movs	r2, #0
    91ce:	f000 fe55 	bl	9e7c <file_received>
    91d2:	6138      	str	r0, [r7, #16]
    break;
    91d4:	e041      	b.n	925a <Main+0x2a2>

  case MESSAGE_RECEIVED: // Activated each time Manager received a message in its own mailbox for this application
    ret = message_received(No, &data->Param.MessageReceived.param_in, NULL);
    91d6:	683b      	ldr	r3, [r7, #0]
    91d8:	3304      	adds	r3, #4
    91da:	7bfa      	ldrb	r2, [r7, #15]
    91dc:	4610      	mov	r0, r2
    91de:	4619      	mov	r1, r3
    91e0:	2200      	movs	r2, #0
    91e2:	f000 ff1d 	bl	a020 <message_received>
    91e6:	6138      	str	r0, [r7, #16]
    break;
    91e8:	e037      	b.n	925a <Main+0x2a2>

  case IS_CARD_SPECIFIC: // Activated when card inserted card swiped or manually entry, do you want to process the card?
    ret = is_card_specific(No, &data->Param.IsCardSpecific.param_in,
    91ea:	683b      	ldr	r3, [r7, #0]
    91ec:	f503 729a 	add.w	r2, r3, #308	; 0x134
    91f0:	683b      	ldr	r3, [r7, #0]
    91f2:	3304      	adds	r3, #4
    91f4:	7bf9      	ldrb	r1, [r7, #15]
    91f6:	4608      	mov	r0, r1
    91f8:	4611      	mov	r1, r2
    91fa:	461a      	mov	r2, r3
    91fc:	f000 ff6e 	bl	a0dc <is_card_specific>
    9200:	6138      	str	r0, [r7, #16]
        &data->Param.IsCardSpecific.param_out);
    break;
    9202:	e02a      	b.n	925a <Main+0x2a2>

  case CARD_INSIDE: // Activated when the card is specific, the application process the card in transparent mode
    ret = card_inside(No, &data->Param.CardInside.param_in,
    9204:	683b      	ldr	r3, [r7, #0]
    9206:	1d1a      	adds	r2, r3, #4
    9208:	683b      	ldr	r3, [r7, #0]
    920a:	f503 535a 	add.w	r3, r3, #13952	; 0x3680
    920e:	3320      	adds	r3, #32
    9210:	7bf9      	ldrb	r1, [r7, #15]
    9212:	4608      	mov	r0, r1
    9214:	4611      	mov	r1, r2
    9216:	461a      	mov	r2, r3
    9218:	f000 ff90 	bl	a13c <card_inside>
    921c:	6138      	str	r0, [r7, #16]
        &data->Param.CardInside. param_out);
    break;
    921e:	e01c      	b.n	925a <Main+0x2a2>

  case IS_FOR_YOU_AFTER:
    ret = is_for_you_after(No, &data->Param.IsForYouAfter.param_in,
    9220:	683b      	ldr	r3, [r7, #0]
    9222:	1d1a      	adds	r2, r3, #4
    9224:	683b      	ldr	r3, [r7, #0]
    9226:	f503 535a 	add.w	r3, r3, #13952	; 0x3680
    922a:	3320      	adds	r3, #32
    922c:	7bf9      	ldrb	r1, [r7, #15]
    922e:	4608      	mov	r0, r1
    9230:	4611      	mov	r1, r2
    9232:	461a      	mov	r2, r3
    9234:	f000 ffaa 	bl	a18c <is_for_you_after>
    9238:	6138      	str	r0, [r7, #16]
        &data->Param.IsForYouAfter.param_out);
    break;
    923a:	e00e      	b.n	925a <Main+0x2a2>

  case DEBIT_NON_EMV:
    ret = debit_non_emv(No, &data->Param.DebitNonEmv.param_in,
    923c:	683b      	ldr	r3, [r7, #0]
    923e:	1d1a      	adds	r2, r3, #4
    9240:	683b      	ldr	r3, [r7, #0]
    9242:	f503 535a 	add.w	r3, r3, #13952	; 0x3680
    9246:	3320      	adds	r3, #32
    9248:	7bf9      	ldrb	r1, [r7, #15]
    924a:	4608      	mov	r0, r1
    924c:	4611      	mov	r1, r2
    924e:	461a      	mov	r2, r3
    9250:	f001 f86c 	bl	a32c <debit_non_emv>
    9254:	6138      	str	r0, [r7, #16]
        &data->Param.DebitNonEmv.param_out);
    break;
    9256:	e000      	b.n	925a <Main+0x2a2>
  case IS_CARD_EMV_FOR_YOU:
  case DEBIT_EMV:
  case SELECT_FUNCTION: // French Bank Domain
  case SELECT_FUNCTION_EMV: // French Bank Domain
  default:
    break;
    9258:	bf00      	nop
  }

  return ret;
    925a:	693b      	ldr	r3, [r7, #16]
}
    925c:	4618      	mov	r0, r3
    925e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9262:	f2c0 0302 	movt	r3, #2
    9266:	697a      	ldr	r2, [r7, #20]
    9268:	681b      	ldr	r3, [r3, #0]
    926a:	429a      	cmp	r2, r3
    926c:	d001      	beq.n	9272 <Main+0x2ba>
    926e:	f7ff fe99 	bl	8fa4 <__stack_chk_fail>
    9272:	f107 0718 	add.w	r7, r7, #24
    9276:	46bd      	mov	sp, r7
    9278:	bd80      	pop	{r7, pc}
    927a:	bf00      	nop

0000927c <Progress>:

// *****************************************************
// Progress bar counter (See after_reset() service call)
// *****************************************************
static T_GL_COORD Progress(T_GL_COORD sValue) // This function is called periodically to update the progress bar of the dialog box.
{                                             // The value received as parameter corresponds to the current value of the progress bar.
    927c:	b580      	push	{r7, lr}
    927e:	b084      	sub	sp, #16
    9280:	af00      	add	r7, sp, #0
    9282:	6078      	str	r0, [r7, #4]
    9284:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9288:	f2c0 0302 	movt	r3, #2
    928c:	681b      	ldr	r3, [r3, #0]
    928e:	60fb      	str	r3, [r7, #12]
	Telium_Ttestall(0, 2);                    // When this value reaches the maximum, the dialog is automatically closed.
    9290:	2000      	movs	r0, #0
    9292:	2102      	movs	r1, #2
    9294:	f016 fdd0 	bl	1fe38 <Telium_Ttestall>

	return sValue+1;
    9298:	687b      	ldr	r3, [r7, #4]
    929a:	3301      	adds	r3, #1
}
    929c:	4618      	mov	r0, r3
    929e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    92a2:	f2c0 0302 	movt	r3, #2
    92a6:	68fa      	ldr	r2, [r7, #12]
    92a8:	681b      	ldr	r3, [r3, #0]
    92aa:	429a      	cmp	r2, r3
    92ac:	d001      	beq.n	92b2 <Progress+0x36>
    92ae:	f7ff fe79 	bl	8fa4 <__stack_chk_fail>
    92b2:	f107 0710 	add.w	r7, r7, #16
    92b6:	46bd      	mov	sp, r7
    92b8:	bd80      	pop	{r7, pc}
    92ba:	bf00      	nop

000092bc <give_your_domain>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int give_your_domain(NO_SEGMENT no, void *p1, S_INITPARAMOUT *param_out)
{
    92bc:	b580      	push	{r7, lr}
    92be:	b086      	sub	sp, #24
    92c0:	af00      	add	r7, sp, #0
    92c2:	4603      	mov	r3, r0
    92c4:	60b9      	str	r1, [r7, #8]
    92c6:	607a      	str	r2, [r7, #4]
    92c8:	73fb      	strb	r3, [r7, #15]
    92ca:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    92ce:	f2c0 0302 	movt	r3, #2
    92d2:	681b      	ldr	r3, [r3, #0]
    92d4:	617b      	str	r3, [r7, #20]

	// Return application domain to Manager
	// Setting parameters initialization
	param_out->returned_state[param_out->response_number].mask = MSK_ALL_PARAM;  // Accept all
    92d6:	687b      	ldr	r3, [r7, #4]
    92d8:	781b      	ldrb	r3, [r3, #0]
    92da:	687a      	ldr	r2, [r7, #4]
    92dc:	00db      	lsls	r3, r3, #3
    92de:	18d3      	adds	r3, r2, r3
    92e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    92e4:	f2c0 0207 	movt	r2, #7
    92e8:	605a      	str	r2, [r3, #4]
	// International domain
	param_out->returned_state[param_out->response_number].application_type = TYP_EXPORT;
    92ea:	687b      	ldr	r3, [r7, #4]
    92ec:	781b      	ldrb	r3, [r3, #0]
    92ee:	687a      	ldr	r2, [r7, #4]
    92f0:	00db      	lsls	r3, r3, #3
    92f2:	18d3      	adds	r3, r2, r3
    92f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    92f8:	811a      	strh	r2, [r3, #8]
	param_out->response_number++;
    92fa:	687b      	ldr	r3, [r7, #4]
    92fc:	781b      	ldrb	r3, [r3, #0]
    92fe:	3301      	adds	r3, #1
    9300:	b2da      	uxtb	r2, r3
    9302:	687b      	ldr	r3, [r7, #4]
    9304:	701a      	strb	r2, [r3, #0]

	return (FCT_OK);
    9306:	2300      	movs	r3, #0
}
    9308:	4618      	mov	r0, r3
    930a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    930e:	f2c0 0302 	movt	r3, #2
    9312:	697a      	ldr	r2, [r7, #20]
    9314:	681b      	ldr	r3, [r3, #0]
    9316:	429a      	cmp	r2, r3
    9318:	d001      	beq.n	931e <give_your_domain+0x62>
    931a:	f7ff fe43 	bl	8fa4 <__stack_chk_fail>
    931e:	f107 0718 	add.w	r7, r7, #24
    9322:	46bd      	mov	sp, r7
    9324:	bd80      	pop	{r7, pc}
    9326:	bf00      	nop

00009328 <after_reset>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int after_reset(NO_SEGMENT no, void *p1, S_TRANSOUT *param_out)
{
    9328:	b580      	push	{r7, lr}
    932a:	b0b4      	sub	sp, #208	; 0xd0
    932c:	af06      	add	r7, sp, #24
    932e:	4603      	mov	r3, r0
    9330:	60b9      	str	r1, [r7, #8]
    9332:	607a      	str	r2, [r7, #4]
    9334:	73fb      	strb	r3, [r7, #15]
    9336:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    933a:	f2c0 0302 	movt	r3, #2
    933e:	681b      	ldr	r3, [r3, #0]
    9340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	doubleword uiMode;  // Bug in prototype => 2nd parameter (output) on FS_mount returns Mode (FS_WRITEONCE or FS_WRITEMANY)
	// and NOT AccessMode (FS_NOFLAGS or FS_RONLYMOD or FS_WRTMOD)
	T_GL_COORD sValue;
	int iRet;

	first_init(no, &chgt, (unsigned char *)&type); // New software loaded ?
    9344:	7bf9      	ldrb	r1, [r7, #15]
    9346:	f107 0216 	add.w	r2, r7, #22
    934a:	f107 0317 	add.w	r3, r7, #23
    934e:	4608      	mov	r0, r1
    9350:	4611      	mov	r1, r2
    9352:	461a      	mov	r2, r3
    9354:	f017 fd58 	bl	20e08 <first_init>
	if (chgt == 0xFF) // Yes, just loaded with first execution
    9358:	7dbb      	ldrb	r3, [r7, #22]
    935a:	2bff      	cmp	r3, #255	; 0xff
    935c:	d103      	bne.n	9366 <after_reset+0x3e>
	{
		raz_init(no); // Reset downloading indicator
    935e:	7bfb      	ldrb	r3, [r7, #15]
    9360:	4618      	mov	r0, r3
    9362:	f017 fd7d 	bl	20e60 <raz_init>
	}

	SEClib_Open();
    9366:	f018 f8c9 	bl	214fc <SEClib_Open>

	// Create Parameter Disk (See Mapapp.c)
	// ====================================
	// ** Parameters Disk used by FMG library **
	strcpy(xCfg.Label, PARAM_DISK);            // Disk name
    936a:	f64f 63ec 	movw	r3, #65260	; 0xfeec
    936e:	f2c0 0302 	movt	r3, #2
    9372:	f242 527c 	movw	r2, #9596	; 0x257c
    9376:	f2c0 0202 	movt	r2, #2
    937a:	ca07      	ldmia	r2, {r0, r1, r2}
    937c:	c303      	stmia	r3!, {r0, r1}
    937e:	801a      	strh	r2, [r3, #0]
	xCfg.Mode = FS_WRITEONCE;                  // Disk on Flash
    9380:	f64f 63ec 	movw	r3, #65260	; 0xfeec
    9384:	f2c0 0302 	movt	r3, #2
    9388:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    938c:	611a      	str	r2, [r3, #16]
	xCfg.AccessMode	= FS_WRTMOD;               // r/w access
    938e:	f64f 63ec 	movw	r3, #65260	; 0xfeec
    9392:	f2c0 0302 	movt	r3, #2
    9396:	2204      	movs	r2, #4
    9398:	615a      	str	r2, [r3, #20]
	xCfg.NbFichierMax = 20;                     // Max files number
    939a:	f64f 63ec 	movw	r3, #65260	; 0xfeec
    939e:	f2c0 0302 	movt	r3, #2
    93a2:	2214      	movs	r2, #20
    93a4:	619a      	str	r2, [r3, #24]
	xCfg.IdentZone	= FS_WO_ZONE_DATA;         // Zone id
    93a6:	f64f 63ec 	movw	r3, #65260	; 0xfeec
    93aa:	f2c0 0302 	movt	r3, #2
    93ae:	2201      	movs	r2, #1
    93b0:	61da      	str	r2, [r3, #28]
	ulSize = xCfg.NbFichierMax*32768;          // Disk size in bytes
    93b2:	f64f 63ec 	movw	r3, #65260	; 0xfeec
    93b6:	f2c0 0302 	movt	r3, #2
    93ba:	699b      	ldr	r3, [r3, #24]
    93bc:	03da      	lsls	r2, r3, #15
    93be:	f64f 730c 	movw	r3, #65292	; 0xff0c
    93c2:	f2c0 0302 	movt	r3, #2
    93c6:	601a      	str	r2, [r3, #0]

	// ** All disks created by FFMS and used by FMG library must be mounted before the call to FMG_init() **
	Telium_Sprintf(tcPath, "/%s", PARAM_DISK);
    93c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
    93cc:	4618      	mov	r0, r3
    93ce:	f242 5188 	movw	r1, #9608	; 0x2588
    93d2:	f2c0 0102 	movt	r1, #2
    93d6:	f242 527c 	movw	r2, #9596	; 0x257c
    93da:	f2c0 0202 	movt	r2, #2
    93de:	f017 fa0d 	bl	207fc <Telium_Sprintf>
	iRet = FS_mount (tcPath, &uiMode);         // Check if disk already activated (!!! second parameter returns (FS_WRITEONCE or FS_WRITEMANY))
    93e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
    93e6:	f107 0318 	add.w	r3, r7, #24
    93ea:	4610      	mov	r0, r2
    93ec:	4619      	mov	r1, r3
    93ee:	f017 faff 	bl	209f0 <FS_mount>
    93f2:	6238      	str	r0, [r7, #32]

	if (iRet != FS_OK) {
    93f4:	6a3b      	ldr	r3, [r7, #32]
    93f6:	2b02      	cmp	r3, #2
    93f8:	f000 8081 	beq.w	94fe <after_reset+0x1d6>
		// == Application added ==
		iRet = FS_dskcreate(&xCfg, &ulSize);   // Create and format the none volatile disk
    93fc:	f64f 60ec 	movw	r0, #65260	; 0xfeec
    9400:	f2c0 0002 	movt	r0, #2
    9404:	f64f 710c 	movw	r1, #65292	; 0xff0c
    9408:	f2c0 0102 	movt	r1, #2
    940c:	f017 fa6c 	bl	208e8 <FS_dskcreate>
    9410:	6238      	str	r0, [r7, #32]
		CHECK(iRet==FS_OK, lblKO);
    9412:	6a3b      	ldr	r3, [r7, #32]
    9414:	2b02      	cmp	r3, #2
    9416:	f040 811b 	bne.w	9650 <after_reset+0x328>
		iRet = FS_mount(tcPath, &uiMode);      // Activate a disk (!!! second parameter returns (FS_WRITEONCE or FS_WRITEMANY))
    941a:	f107 0250 	add.w	r2, r7, #80	; 0x50
    941e:	f107 0318 	add.w	r3, r7, #24
    9422:	4610      	mov	r0, r2
    9424:	4619      	mov	r1, r3
    9426:	f017 fae3 	bl	209f0 <FS_mount>
    942a:	6238      	str	r0, [r7, #32]
		CHECK(iRet==FS_OK, lblKO);
    942c:	6a3b      	ldr	r3, [r7, #32]
    942e:	2b02      	cmp	r3, #2
    9430:	f040 810e 	bne.w	9650 <after_reset+0x328>
		iRet = FMG_Init();                     // Initialize File ManaGement
    9434:	f013 fb16 	bl	1ca64 <FMG_Init>
    9438:	6238      	str	r0, [r7, #32]
		CHECK(iRet==FMG_SUCCESS, lblKO);
    943a:	6a3b      	ldr	r3, [r7, #32]
    943c:	2b0a      	cmp	r3, #10
    943e:	f040 8107 	bne.w	9650 <after_reset+0x328>

		iRet = appReset();                     // Reset application parameters (Flash)
    9442:	f006 f84d 	bl	f4e0 <appReset>
    9446:	6238      	str	r0, [r7, #32]
		CHECK(iRet>=0, lblKO);
    9448:	6a3b      	ldr	r3, [r7, #32]
    944a:	2b00      	cmp	r3, #0
    944c:	f2c0 8100 	blt.w	9650 <after_reset+0x328>

		iRet = appPut(appCmpDat, (char*)getAppCmpDat(), lenCmpDat);  // Store compiler date/time (See Mapapp.c)
    9450:	f005 ffdc 	bl	f40c <getAppCmpDat>
    9454:	4603      	mov	r3, r0
    9456:	2001      	movs	r0, #1
    9458:	4619      	mov	r1, r3
    945a:	220b      	movs	r2, #11
    945c:	f006 f8ec 	bl	f638 <appPut>
    9460:	6238      	str	r0, [r7, #32]
		CHECK(iRet>=0, lblKO);
    9462:	6a3b      	ldr	r3, [r7, #32]
    9464:	2b00      	cmp	r3, #0
    9466:	f2c0 80f3 	blt.w	9650 <after_reset+0x328>
		iRet = appPut(appCmpTim, (char*)getAppCmpTim(), lenCmpTim);
    946a:	f005 ffeb 	bl	f444 <getAppCmpTim>
    946e:	4603      	mov	r3, r0
    9470:	2002      	movs	r0, #2
    9472:	4619      	mov	r1, r3
    9474:	2208      	movs	r2, #8
    9476:	f006 f8df 	bl	f638 <appPut>
    947a:	6238      	str	r0, [r7, #32]
		CHECK(iRet>=0, lblKO);
    947c:	6a3b      	ldr	r3, [r7, #32]
    947e:	2b00      	cmp	r3, #0
    9480:	f2c0 80e6 	blt.w	9650 <after_reset+0x328>

		GL_Dialog_Progress(gGoalGraphicLibInstance, NULL, "New Software\nReset In Progress", NULL, NULL, 0, 100, Progress, GL_BUTTON_NONE, GL_TIME_INFINITE);
    9484:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    9488:	f2c0 0302 	movt	r3, #2
    948c:	681a      	ldr	r2, [r3, #0]
    948e:	2300      	movs	r3, #0
    9490:	9300      	str	r3, [sp, #0]
    9492:	2300      	movs	r3, #0
    9494:	9301      	str	r3, [sp, #4]
    9496:	2364      	movs	r3, #100	; 0x64
    9498:	9302      	str	r3, [sp, #8]
    949a:	f249 237d 	movw	r3, #37501	; 0x927d
    949e:	f2c0 0300 	movt	r3, #0
    94a2:	9303      	str	r3, [sp, #12]
    94a4:	2300      	movs	r3, #0
    94a6:	9304      	str	r3, [sp, #16]
    94a8:	f04f 33ff 	mov.w	r3, #4294967295
    94ac:	9305      	str	r3, [sp, #20]
    94ae:	4610      	mov	r0, r2
    94b0:	2100      	movs	r1, #0
    94b2:	f242 528c 	movw	r2, #9612	; 0x258c
    94b6:	f2c0 0202 	movt	r2, #2
    94ba:	2300      	movs	r3, #0
    94bc:	f018 f908 	bl	216d0 <GL_Dialog_Progress>
		sValue = 100;
    94c0:	2364      	movs	r3, #100	; 0x64
    94c2:	61fb      	str	r3, [r7, #28]
		GL_Dialog_Progress(gGoalGraphicLibInstance, NULL, "New Software\nReset Done", NULL, &sValue, 1, 101, NULL, GL_BUTTON_NONE, 3*1000);
    94c4:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    94c8:	f2c0 0302 	movt	r3, #2
    94cc:	681b      	ldr	r3, [r3, #0]
    94ce:	f107 021c 	add.w	r2, r7, #28
    94d2:	9200      	str	r2, [sp, #0]
    94d4:	2201      	movs	r2, #1
    94d6:	9201      	str	r2, [sp, #4]
    94d8:	2265      	movs	r2, #101	; 0x65
    94da:	9202      	str	r2, [sp, #8]
    94dc:	2200      	movs	r2, #0
    94de:	9203      	str	r2, [sp, #12]
    94e0:	2200      	movs	r2, #0
    94e2:	9204      	str	r2, [sp, #16]
    94e4:	f640 32b8 	movw	r2, #3000	; 0xbb8
    94e8:	9205      	str	r2, [sp, #20]
    94ea:	4618      	mov	r0, r3
    94ec:	2100      	movs	r1, #0
    94ee:	f242 52ac 	movw	r2, #9644	; 0x25ac
    94f2:	f2c0 0202 	movt	r2, #2
    94f6:	2300      	movs	r3, #0
    94f8:	f018 f8ea 	bl	216d0 <GL_Dialog_Progress>
    94fc:	e0a8      	b.n	9650 <after_reset+0x328>

	} else {

		iRet = FMG_Init();                                // Initialize File ManaGement
    94fe:	f013 fab1 	bl	1ca64 <FMG_Init>
    9502:	6238      	str	r0, [r7, #32]
		CHECK(iRet==FMG_INIT_OK, lblKO);
    9504:	6a3b      	ldr	r3, [r7, #32]
    9506:	2b1e      	cmp	r3, #30
    9508:	f040 80a2 	bne.w	9650 <after_reset+0x328>

		iRet = appGet(appCmpDat, tcAppDat, lenCmpDat+1);  // Retrieve compiler date/time (See Mapapp.c)
    950c:	f107 0338 	add.w	r3, r7, #56	; 0x38
    9510:	2001      	movs	r0, #1
    9512:	4619      	mov	r1, r3
    9514:	220c      	movs	r2, #12
    9516:	f006 f8f7 	bl	f708 <appGet>
    951a:	6238      	str	r0, [r7, #32]
		CHECK(iRet>=0, lblKO);
    951c:	6a3b      	ldr	r3, [r7, #32]
    951e:	2b00      	cmp	r3, #0
    9520:	f2c0 8096 	blt.w	9650 <after_reset+0x328>
		iRet = appGet(appCmpTim, tcAppTim, lenCmpTim+1);
    9524:	f107 0324 	add.w	r3, r7, #36	; 0x24
    9528:	2002      	movs	r0, #2
    952a:	4619      	mov	r1, r3
    952c:	2209      	movs	r2, #9
    952e:	f006 f8eb 	bl	f708 <appGet>
    9532:	6238      	str	r0, [r7, #32]
		CHECK(iRet>=0, lblKO);
    9534:	6a3b      	ldr	r3, [r7, #32]
    9536:	2b00      	cmp	r3, #0
    9538:	f2c0 808a 	blt.w	9650 <after_reset+0x328>
		// Check compiler date/time
		if( (strcmp(tcAppDat, getAppCmpDat()) == 0) && (strcmp(tcAppTim, getAppCmpTim()) == 0)) {
    953c:	f005 ff66 	bl	f40c <getAppCmpDat>
    9540:	4603      	mov	r3, r0
    9542:	f107 0238 	add.w	r2, r7, #56	; 0x38
    9546:	4610      	mov	r0, r2
    9548:	4619      	mov	r1, r3
    954a:	f7ff ebc8 	blx	8cdc <_init+0x17c>
    954e:	4603      	mov	r3, r0
    9550:	2b00      	cmp	r3, #0
    9552:	d10b      	bne.n	956c <after_reset+0x244>
    9554:	f005 ff76 	bl	f444 <getAppCmpTim>
    9558:	4603      	mov	r3, r0
    955a:	f107 0224 	add.w	r2, r7, #36	; 0x24
    955e:	4610      	mov	r0, r2
    9560:	4619      	mov	r1, r3
    9562:	f7ff ebbc 	blx	8cdc <_init+0x17c>
    9566:	4603      	mov	r3, r0
    9568:	2b00      	cmp	r3, #0
    956a:	d071      	beq.n	9650 <after_reset+0x328>
			// == Application already upto date ==
		} else {
			// == Application updated ==
			if ((strcmp(tcAppDat, getAppCmpDat()) != 0) || (strcmp(tcAppTim, getAppCmpTim()) != 0)) {
    956c:	f005 ff4e 	bl	f40c <getAppCmpDat>
    9570:	4603      	mov	r3, r0
    9572:	f107 0238 	add.w	r2, r7, #56	; 0x38
    9576:	4610      	mov	r0, r2
    9578:	4619      	mov	r1, r3
    957a:	f7ff ebb0 	blx	8cdc <_init+0x17c>
    957e:	4603      	mov	r3, r0
    9580:	2b00      	cmp	r3, #0
    9582:	d10b      	bne.n	959c <after_reset+0x274>
    9584:	f005 ff5e 	bl	f444 <getAppCmpTim>
    9588:	4603      	mov	r3, r0
    958a:	f107 0224 	add.w	r2, r7, #36	; 0x24
    958e:	4610      	mov	r0, r2
    9590:	4619      	mov	r1, r3
    9592:	f7ff eba4 	blx	8cdc <_init+0x17c>
    9596:	4603      	mov	r3, r0
    9598:	2b00      	cmp	r3, #0
    959a:	d005      	beq.n	95a8 <after_reset+0x280>
				iRet = appReset();                        // Reset application parameters (Flash)
    959c:	f005 ffa0 	bl	f4e0 <appReset>
    95a0:	6238      	str	r0, [r7, #32]
				CHECK(iRet>=0, lblKO);
    95a2:	6a3b      	ldr	r3, [r7, #32]
    95a4:	2b00      	cmp	r3, #0
    95a6:	db53      	blt.n	9650 <after_reset+0x328>

			}

			iRet = appPut(appCmpDat, (char*)getAppCmpDat(), lenCmpDat); // Store compiler date/time (See Mapapp.c)
    95a8:	f005 ff30 	bl	f40c <getAppCmpDat>
    95ac:	4603      	mov	r3, r0
    95ae:	2001      	movs	r0, #1
    95b0:	4619      	mov	r1, r3
    95b2:	220b      	movs	r2, #11
    95b4:	f006 f840 	bl	f638 <appPut>
    95b8:	6238      	str	r0, [r7, #32]
			CHECK(iRet>=0, lblKO);
    95ba:	6a3b      	ldr	r3, [r7, #32]
    95bc:	2b00      	cmp	r3, #0
    95be:	db47      	blt.n	9650 <after_reset+0x328>
			iRet = appPut(appCmpTim, (char*)getAppCmpTim(), lenCmpTim);
    95c0:	f005 ff40 	bl	f444 <getAppCmpTim>
    95c4:	4603      	mov	r3, r0
    95c6:	2002      	movs	r0, #2
    95c8:	4619      	mov	r1, r3
    95ca:	2208      	movs	r2, #8
    95cc:	f006 f834 	bl	f638 <appPut>
    95d0:	6238      	str	r0, [r7, #32]
			CHECK(iRet>=0, lblKO);
    95d2:	6a3b      	ldr	r3, [r7, #32]
    95d4:	2b00      	cmp	r3, #0
    95d6:	db3b      	blt.n	9650 <after_reset+0x328>

			GL_Dialog_Progress(gGoalGraphicLibInstance, NULL, "Update Software\nUpdate In Progress",
    95d8:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    95dc:	f2c0 0302 	movt	r3, #2
    95e0:	681a      	ldr	r2, [r3, #0]
    95e2:	2300      	movs	r3, #0
    95e4:	9300      	str	r3, [sp, #0]
    95e6:	2300      	movs	r3, #0
    95e8:	9301      	str	r3, [sp, #4]
    95ea:	2364      	movs	r3, #100	; 0x64
    95ec:	9302      	str	r3, [sp, #8]
    95ee:	f249 237d 	movw	r3, #37501	; 0x927d
    95f2:	f2c0 0300 	movt	r3, #0
    95f6:	9303      	str	r3, [sp, #12]
    95f8:	2300      	movs	r3, #0
    95fa:	9304      	str	r3, [sp, #16]
    95fc:	f04f 33ff 	mov.w	r3, #4294967295
    9600:	9305      	str	r3, [sp, #20]
    9602:	4610      	mov	r0, r2
    9604:	2100      	movs	r1, #0
    9606:	f242 52c4 	movw	r2, #9668	; 0x25c4
    960a:	f2c0 0202 	movt	r2, #2
    960e:	2300      	movs	r3, #0
    9610:	f018 f85e 	bl	216d0 <GL_Dialog_Progress>
					NULL, NULL, 0, 100, Progress, GL_BUTTON_NONE, GL_TIME_INFINITE);
			sValue = 100;
    9614:	2364      	movs	r3, #100	; 0x64
    9616:	61fb      	str	r3, [r7, #28]
			GL_Dialog_Progress(gGoalGraphicLibInstance, NULL, "Update Software\nUpdate Done", NULL, &sValue, 1, 101, NULL, GL_BUTTON_NONE, 3*1000);
    9618:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    961c:	f2c0 0302 	movt	r3, #2
    9620:	681b      	ldr	r3, [r3, #0]
    9622:	f107 021c 	add.w	r2, r7, #28
    9626:	9200      	str	r2, [sp, #0]
    9628:	2201      	movs	r2, #1
    962a:	9201      	str	r2, [sp, #4]
    962c:	2265      	movs	r2, #101	; 0x65
    962e:	9202      	str	r2, [sp, #8]
    9630:	2200      	movs	r2, #0
    9632:	9203      	str	r2, [sp, #12]
    9634:	2200      	movs	r2, #0
    9636:	9204      	str	r2, [sp, #16]
    9638:	f640 32b8 	movw	r2, #3000	; 0xbb8
    963c:	9205      	str	r2, [sp, #20]
    963e:	4618      	mov	r0, r3
    9640:	2100      	movs	r1, #0
    9642:	f242 52e8 	movw	r2, #9704	; 0x25e8
    9646:	f2c0 0202 	movt	r2, #2
    964a:	2300      	movs	r3, #0
    964c:	f018 f840 	bl	216d0 <GL_Dialog_Progress>

		}
	}

	lblKO:
	return FCT_OK;
    9650:	2300      	movs	r3, #0
}
    9652:	4618      	mov	r0, r3
    9654:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9658:	f2c0 0302 	movt	r3, #2
    965c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    9660:	681b      	ldr	r3, [r3, #0]
    9662:	429a      	cmp	r2, r3
    9664:	d001      	beq.n	966a <after_reset+0x342>
    9666:	f7ff fc9d 	bl	8fa4 <__stack_chk_fail>
    966a:	f107 07b8 	add.w	r7, r7, #184	; 0xb8
    966e:	46bd      	mov	sp, r7
    9670:	bd80      	pop	{r7, pc}
    9672:	bf00      	nop

00009674 <is_name>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int is_name(NO_SEGMENT no, void *p1, S_ETATOUT *param_out)
{
    9674:	b580      	push	{r7, lr}
    9676:	b086      	sub	sp, #24
    9678:	af00      	add	r7, sp, #0
    967a:	4603      	mov	r3, r0
    967c:	60b9      	str	r1, [r7, #8]
    967e:	607a      	str	r2, [r7, #4]
    9680:	73fb      	strb	r3, [r7, #15]
    9682:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9686:	f2c0 0302 	movt	r3, #2
    968a:	681b      	ldr	r3, [r3, #0]
    968c:	617b      	str	r3, [r7, #20]
	// Report application name to Manager cannot return the family name
	// because the T_APPNAME type used in the "is_name" function is too short to store
	// the FAMILY NAME (T_APPNAME length = 12+1 FAMILY NAME length =15+1)
	// we use the binary name instead (without extension, and whose length is 11+1)
	memset(param_out->returned_state[param_out->response_number].appname,0, sizeof(param_out->returned_state[param_out->response_number].appname));
    968e:	687b      	ldr	r3, [r7, #4]
    9690:	781b      	ldrb	r3, [r3, #0]
    9692:	461a      	mov	r2, r3
    9694:	4613      	mov	r3, r2
    9696:	009b      	lsls	r3, r3, #2
    9698:	189b      	adds	r3, r3, r2
    969a:	009b      	lsls	r3, r3, #2
    969c:	687a      	ldr	r2, [r7, #4]
    969e:	18d3      	adds	r3, r2, r3
    96a0:	3304      	adds	r3, #4
    96a2:	4618      	mov	r0, r3
    96a4:	2100      	movs	r1, #0
    96a6:	220d      	movs	r2, #13
    96a8:	f7ff ea88 	blx	8bbc <_init+0x5c>
	strncpy(param_out->returned_state[param_out->response_number].appname, fileName, sizeof(param_out->returned_state[param_out->response_number].appname) - 1);
    96ac:	687b      	ldr	r3, [r7, #4]
    96ae:	781b      	ldrb	r3, [r3, #0]
    96b0:	461a      	mov	r2, r3
    96b2:	4613      	mov	r3, r2
    96b4:	009b      	lsls	r3, r3, #2
    96b6:	189b      	adds	r3, r3, r2
    96b8:	009b      	lsls	r3, r3, #2
    96ba:	687a      	ldr	r2, [r7, #4]
    96bc:	18d3      	adds	r3, r2, r3
    96be:	3304      	adds	r3, #4
    96c0:	4618      	mov	r0, r3
    96c2:	f64f 7128 	movw	r1, #65320	; 0xff28
    96c6:	f2c0 0102 	movt	r1, #2
    96ca:	220c      	movs	r2, #12
    96cc:	f7ff eb0c 	blx	8ce8 <_init+0x188>
	param_out->returned_state[param_out->response_number].no_appli = no;
    96d0:	687b      	ldr	r3, [r7, #4]
    96d2:	781b      	ldrb	r3, [r3, #0]
    96d4:	461a      	mov	r2, r3
    96d6:	6879      	ldr	r1, [r7, #4]
    96d8:	4613      	mov	r3, r2
    96da:	009b      	lsls	r3, r3, #2
    96dc:	189b      	adds	r3, r3, r2
    96de:	009b      	lsls	r3, r3, #2
    96e0:	18cb      	adds	r3, r1, r3
    96e2:	3308      	adds	r3, #8
    96e4:	7bfa      	ldrb	r2, [r7, #15]
    96e6:	725a      	strb	r2, [r3, #9]
	param_out->response_number++;
    96e8:	687b      	ldr	r3, [r7, #4]
    96ea:	781b      	ldrb	r3, [r3, #0]
    96ec:	3301      	adds	r3, #1
    96ee:	b2da      	uxtb	r2, r3
    96f0:	687b      	ldr	r3, [r7, #4]
    96f2:	701a      	strb	r2, [r3, #0]

	return (FCT_OK);
    96f4:	2300      	movs	r3, #0
}
    96f6:	4618      	mov	r0, r3
    96f8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    96fc:	f2c0 0302 	movt	r3, #2
    9700:	697a      	ldr	r2, [r7, #20]
    9702:	681b      	ldr	r3, [r3, #0]
    9704:	429a      	cmp	r2, r3
    9706:	d001      	beq.n	970c <is_name+0x98>
    9708:	f7ff fc4c 	bl	8fa4 <__stack_chk_fail>
    970c:	f107 0718 	add.w	r7, r7, #24
    9710:	46bd      	mov	sp, r7
    9712:	bd80      	pop	{r7, pc}

00009714 <is_state>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int is_state(NO_SEGMENT no, void *p1, S_ETATOUT *param_out)
{
    9714:	b580      	push	{r7, lr}
    9716:	b086      	sub	sp, #24
    9718:	af00      	add	r7, sp, #0
    971a:	4603      	mov	r3, r0
    971c:	60b9      	str	r1, [r7, #8]
    971e:	607a      	str	r2, [r7, #4]
    9720:	73fb      	strb	r3, [r7, #15]
    9722:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9726:	f2c0 0302 	movt	r3, #2
    972a:	681b      	ldr	r3, [r3, #0]
    972c:	617b      	str	r3, [r7, #20]
	int ret;

	// Return application state
	param_out->returned_state[param_out->response_number].state.response = REP_OK;
    972e:	687b      	ldr	r3, [r7, #4]
    9730:	781b      	ldrb	r3, [r3, #0]
    9732:	461a      	mov	r2, r3
    9734:	6879      	ldr	r1, [r7, #4]
    9736:	4613      	mov	r3, r2
    9738:	009b      	lsls	r3, r3, #2
    973a:	189b      	adds	r3, r3, r2
    973c:	009b      	lsls	r3, r3, #2
    973e:	18cb      	adds	r3, r1, r3
    9740:	3310      	adds	r3, #16
    9742:	2200      	movs	r2, #0
    9744:	711a      	strb	r2, [r3, #4]
	ret = is_name(no, PT_NULL, param_out);
    9746:	7bfb      	ldrb	r3, [r7, #15]
    9748:	4618      	mov	r0, r3
    974a:	2100      	movs	r1, #0
    974c:	687a      	ldr	r2, [r7, #4]
    974e:	f7ff ff91 	bl	9674 <is_name>
    9752:	6138      	str	r0, [r7, #16]

	return (ret);
    9754:	693b      	ldr	r3, [r7, #16]
}
    9756:	4618      	mov	r0, r3
    9758:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    975c:	f2c0 0302 	movt	r3, #2
    9760:	697a      	ldr	r2, [r7, #20]
    9762:	681b      	ldr	r3, [r3, #0]
    9764:	429a      	cmp	r2, r3
    9766:	d001      	beq.n	976c <is_state+0x58>
    9768:	f7ff fc1c 	bl	8fa4 <__stack_chk_fail>
    976c:	f107 0718 	add.w	r7, r7, #24
    9770:	46bd      	mov	sp, r7
    9772:	bd80      	pop	{r7, pc}

00009774 <idle_message>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int idle_message(NO_SEGMENT no, void *p1, void *p2)
{
    9774:	b580      	push	{r7, lr}
    9776:	b08a      	sub	sp, #40	; 0x28
    9778:	af00      	add	r7, sp, #0
    977a:	4603      	mov	r3, r0
    977c:	60b9      	str	r1, [r7, #8]
    977e:	607a      	str	r2, [r7, #4]
    9780:	73fb      	strb	r3, [r7, #15]
    9782:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9786:	f2c0 0302 	movt	r3, #2
    978a:	681b      	ldr	r3, [r3, #0]
    978c:	627b      	str	r3, [r7, #36]	; 0x24
	int x = 0;   // time value, it can be customized by developer according to the use case
    978e:	2300      	movs	r3, #0
    9790:	613b      	str	r3, [r7, #16]
	int y = 10;  // time value, it can be customized by developer according to the use case
    9792:	230a      	movs	r3, #10
    9794:	617b      	str	r3, [r7, #20]
	Telium_File_t *hDsp;

	T_GL_HWIDGET GM_Tab_Gw;
	T_GL_HWIDGET label;

	hDsp = Telium_Fopen("DISPLAY", "w*");
    9796:	f242 6004 	movw	r0, #9732	; 0x2604
    979a:	f2c0 0002 	movt	r0, #2
    979e:	f242 610c 	movw	r1, #9740	; 0x260c
    97a2:	f2c0 0102 	movt	r1, #2
    97a6:	f016 f959 	bl	1fa5c <Telium_Fopen>
    97aa:	61b8      	str	r0, [r7, #24]

	GM_Tab_Gw = GL_Window_Create(gGoalGraphicLibInstance);
    97ac:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    97b0:	f2c0 0302 	movt	r3, #2
    97b4:	681b      	ldr	r3, [r3, #0]
    97b6:	4618      	mov	r0, r3
    97b8:	f018 fbde 	bl	21f78 <GL_Window_Create>
    97bc:	61f8      	str	r0, [r7, #28]
	label     = GL_Label_Create(GM_Tab_Gw);
    97be:	69f8      	ldr	r0, [r7, #28]
    97c0:	f018 f90a 	bl	219d8 <GL_Label_Create>
    97c4:	6238      	str	r0, [r7, #32]

	GL_Widget_SetText(label, idleMsg);
    97c6:	6a38      	ldr	r0, [r7, #32]
    97c8:	f242 513c 	movw	r1, #9532	; 0x253c
    97cc:	f2c0 0102 	movt	r1, #2
    97d0:	f018 fb54 	bl	21e7c <GL_Widget_SetText>
	GL_Widget_SetBackAlign(label, GL_ALIGN_CENTER);
    97d4:	6a38      	ldr	r0, [r7, #32]
    97d6:	2100      	movs	r1, #0
    97d8:	f018 fa0c 	bl	21bf4 <GL_Widget_SetBackAlign>
	GL_Widget_SetFontScale(label, GL_SCALE_MEDIUM);
    97dc:	6a38      	ldr	r0, [r7, #32]
    97de:	f643 71f3 	movw	r1, #16371	; 0x3ff3
    97e2:	f018 fa73 	bl	21ccc <GL_Widget_SetFontScale>
    97e6:	e000      	b.n	97ea <idle_message+0x76>
		if (Telium_Ttestall(TIMER, y) == TIMER)
		{
			break; // TIMER event has been received from the Telium Manager
		}
	}
	while(1);
    97e8:	bf00      	nop
	GL_Widget_SetBackAlign(label, GL_ALIGN_CENTER);
	GL_Widget_SetFontScale(label, GL_SCALE_MEDIUM);

	do
	{
		GL_Window_Dispatch(GM_Tab_Gw, x); // display the message
    97ea:	693b      	ldr	r3, [r7, #16]
    97ec:	69f8      	ldr	r0, [r7, #28]
    97ee:	4619      	mov	r1, r3
    97f0:	f018 fbd4 	bl	21f9c <GL_Window_Dispatch>

		if (Telium_Ttestall(TIMER, y) == TIMER)
    97f4:	697b      	ldr	r3, [r7, #20]
    97f6:	f44f 6080 	mov.w	r0, #1024	; 0x400
    97fa:	4619      	mov	r1, r3
    97fc:	f016 fb1c 	bl	1fe38 <Telium_Ttestall>
    9800:	4603      	mov	r3, r0
    9802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9806:	d1ef      	bne.n	97e8 <idle_message+0x74>
		{
			break; // TIMER event has been received from the Telium Manager
    9808:	bf00      	nop
		}
	}
	while(1);

	GL_Widget_Destroy(GM_Tab_Gw);
    980a:	69f8      	ldr	r0, [r7, #28]
    980c:	f018 f9aa 	bl	21b64 <GL_Widget_Destroy>

	Telium_Fclose(hDsp);
    9810:	69b8      	ldr	r0, [r7, #24]
    9812:	f016 f8f1 	bl	1f9f8 <Telium_Fclose>

	return FCT_OK;
    9816:	2300      	movs	r3, #0
}
    9818:	4618      	mov	r0, r3
    981a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    981e:	f2c0 0302 	movt	r3, #2
    9822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9824:	681b      	ldr	r3, [r3, #0]
    9826:	429a      	cmp	r2, r3
    9828:	d001      	beq.n	982e <idle_message+0xba>
    982a:	f7ff fbbb 	bl	8fa4 <__stack_chk_fail>
    982e:	f107 0728 	add.w	r7, r7, #40	; 0x28
    9832:	46bd      	mov	sp, r7
    9834:	bd80      	pop	{r7, pc}
    9836:	bf00      	nop

00009838 <more_function>:
 *       This other prototype is used if the application manages more than one application name.
 *       The 'S_ETATOUT' structure allows to know the name selected by the user after pressing the "F" key.
 *       This new prototype can be used with SDK version >= 6.5.
 */
int more_function(NO_SEGMENT no, void *p1, void *p2)
{
    9838:	b580      	push	{r7, lr}
    983a:	b086      	sub	sp, #24
    983c:	af00      	add	r7, sp, #0
    983e:	4603      	mov	r3, r0
    9840:	60b9      	str	r1, [r7, #8]
    9842:	607a      	str	r2, [r7, #4]
    9844:	73fb      	strb	r3, [r7, #15]
    9846:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    984a:	f2c0 0302 	movt	r3, #2
    984e:	681b      	ldr	r3, [r3, #0]
    9850:	617b      	str	r3, [r7, #20]
	menuGoalDisplay();
    9852:	f000 fec7 	bl	a5e4 <menuGoalDisplay>

	return FCT_OK;
    9856:	2300      	movs	r3, #0
}
    9858:	4618      	mov	r0, r3
    985a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    985e:	f2c0 0302 	movt	r3, #2
    9862:	697a      	ldr	r2, [r7, #20]
    9864:	681b      	ldr	r3, [r3, #0]
    9866:	429a      	cmp	r2, r3
    9868:	d001      	beq.n	986e <more_function+0x36>
    986a:	f7ff fb9b 	bl	8fa4 <__stack_chk_fail>
    986e:	f107 0718 	add.w	r7, r7, #24
    9872:	46bd      	mov	sp, r7
    9874:	bd80      	pop	{r7, pc}
    9876:	bf00      	nop

00009878 <keyboard_event>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int keyboard_event(NO_SEGMENT noappli, S_KEY *key_in, S_KEY *key_out)
{
    9878:	b580      	push	{r7, lr}
    987a:	b086      	sub	sp, #24
    987c:	af00      	add	r7, sp, #0
    987e:	4603      	mov	r3, r0
    9880:	60b9      	str	r1, [r7, #8]
    9882:	607a      	str	r2, [r7, #4]
    9884:	73fb      	strb	r3, [r7, #15]
    9886:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    988a:	f2c0 0302 	movt	r3, #2
    988e:	681b      	ldr	r3, [r3, #0]
    9890:	617b      	str	r3, [r7, #20]
	// Keyboard management
	switch (key_in->keycode)
    9892:	68bb      	ldr	r3, [r7, #8]
    9894:	681b      	ldr	r3, [r3, #0]
    9896:	3b16      	subs	r3, #22
    9898:	2b23      	cmp	r3, #35	; 0x23
    989a:	d854      	bhi.n	9946 <keyboard_event+0xce>
    989c:	a201      	add	r2, pc, #4	; (adr r2, 98a4 <keyboard_event+0x2c>)
    989e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    98a2:	bf00      	nop
    98a4:	00009935 	.word	0x00009935
    98a8:	0000993d 	.word	0x0000993d
    98ac:	0000993d 	.word	0x0000993d
    98b0:	0000993d 	.word	0x0000993d
    98b4:	00009947 	.word	0x00009947
    98b8:	00009947 	.word	0x00009947
    98bc:	00009947 	.word	0x00009947
    98c0:	00009947 	.word	0x00009947
    98c4:	00009947 	.word	0x00009947
    98c8:	00009947 	.word	0x00009947
    98cc:	0000993d 	.word	0x0000993d
    98d0:	0000993d 	.word	0x0000993d
    98d4:	0000993d 	.word	0x0000993d
    98d8:	0000993d 	.word	0x0000993d
    98dc:	0000993d 	.word	0x0000993d
    98e0:	0000993d 	.word	0x0000993d
    98e4:	0000993d 	.word	0x0000993d
    98e8:	00009947 	.word	0x00009947
    98ec:	0000993d 	.word	0x0000993d
    98f0:	00009947 	.word	0x00009947
    98f4:	00009947 	.word	0x00009947
    98f8:	00009947 	.word	0x00009947
    98fc:	00009947 	.word	0x00009947
    9900:	00009947 	.word	0x00009947
    9904:	00009935 	.word	0x00009935
    9908:	00009947 	.word	0x00009947
    990c:	00009935 	.word	0x00009935
    9910:	00009935 	.word	0x00009935
    9914:	00009935 	.word	0x00009935
    9918:	00009935 	.word	0x00009935
    991c:	00009935 	.word	0x00009935
    9920:	00009935 	.word	0x00009935
    9924:	00009935 	.word	0x00009935
    9928:	00009935 	.word	0x00009935
    992c:	00009935 	.word	0x00009935
    9930:	00009935 	.word	0x00009935
	case N7:
	case N8:
	case N9:
	case T_VAL:
	case T_POINT:
		key_out->keycode = 0; // Inhibit these keys to Manager for International domain
    9934:	687b      	ldr	r3, [r7, #4]
    9936:	2200      	movs	r2, #0
    9938:	601a      	str	r2, [r3, #0]
		break;
    993a:	e009      	b.n	9950 <keyboard_event+0xd8>
	case NAVI_CLEAR:
	case NAVI_OK:
	case UP:
	case DOWN:
	case T_F:                               // do not filter F key and return the same key !
		key_out->keycode=key_in->keycode;   // Return the same key value for keys above !
    993c:	68bb      	ldr	r3, [r7, #8]
    993e:	681a      	ldr	r2, [r3, #0]
    9940:	687b      	ldr	r3, [r7, #4]
    9942:	601a      	str	r2, [r3, #0]
		break;
    9944:	e004      	b.n	9950 <keyboard_event+0xd8>
	default:
		key_out->keycode=key_in->keycode;
    9946:	68bb      	ldr	r3, [r7, #8]
    9948:	681a      	ldr	r2, [r3, #0]
    994a:	687b      	ldr	r3, [r7, #4]
    994c:	601a      	str	r2, [r3, #0]
		break;
    994e:	bf00      	nop
	}

	return (FCT_OK);
    9950:	2300      	movs	r3, #0
}
    9952:	4618      	mov	r0, r3
    9954:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9958:	f2c0 0302 	movt	r3, #2
    995c:	697a      	ldr	r2, [r7, #20]
    995e:	681b      	ldr	r3, [r3, #0]
    9960:	429a      	cmp	r2, r3
    9962:	d001      	beq.n	9968 <keyboard_event+0xf0>
    9964:	f7ff fb1e 	bl	8fa4 <__stack_chk_fail>
    9968:	f107 0718 	add.w	r7, r7, #24
    996c:	46bd      	mov	sp, r7
    996e:	bd80      	pop	{r7, pc}

00009970 <state>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int state(NO_SEGMENT no, void *p1, void *p2)
{
    9970:	b580      	push	{r7, lr}
    9972:	b09a      	sub	sp, #104	; 0x68
    9974:	af02      	add	r7, sp, #8
    9976:	4603      	mov	r3, r0
    9978:	60b9      	str	r1, [r7, #8]
    997a:	607a      	str	r2, [r7, #4]
    997c:	73fb      	strb	r3, [r7, #15]
    997e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9982:	f2c0 0302 	movt	r3, #2
    9986:	681b      	ldr	r3, [r3, #0]
    9988:	65fb      	str	r3, [r7, #92]	; 0x5c
	Telium_Date_t date;
	object_info_t infos;
	Telium_File_t *hPrinter;

	// Print application info
	ObjectGetInfo(OBJECT_TYPE_APPLI, no, &infos); // Retrieve application info
    998a:	7bfa      	ldrb	r2, [r7, #15]
    998c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    9990:	2001      	movs	r0, #1
    9992:	4611      	mov	r1, r2
    9994:	461a      	mov	r2, r3
    9996:	f017 f9b5 	bl	20d04 <ObjectGetInfo>

	hPrinter = Telium_Fopen("PRINTER", "w-*"); // Open printer driver
    999a:	f242 6010 	movw	r0, #9744	; 0x2610
    999e:	f2c0 0002 	movt	r0, #2
    99a2:	f242 6118 	movw	r1, #9752	; 0x2618
    99a6:	f2c0 0102 	movt	r1, #2
    99aa:	f016 f857 	bl	1fa5c <Telium_Fopen>
    99ae:	6178      	str	r0, [r7, #20]
	if (hPrinter != NULL)
    99b0:	697b      	ldr	r3, [r7, #20]
    99b2:	2b00      	cmp	r3, #0
    99b4:	d044      	beq.n	9a40 <state+0xd0>
	{
		Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName); // Print application name
    99b6:	f242 601c 	movw	r0, #9756	; 0x261c
    99ba:	f2c0 0002 	movt	r0, #2
    99be:	f64f 7110 	movw	r1, #65296	; 0xff10
    99c2:	f2c0 0102 	movt	r1, #2
    99c6:	f016 fee1 	bl	2078c <Telium_Pprintf>
		Telium_Pprintf("         STATE         \n"
    99ca:	f242 6024 	movw	r0, #9764	; 0x2624
    99ce:	f2c0 0002 	movt	r0, #2
    99d2:	f016 fedb 	bl	2078c <Telium_Pprintf>
				"Application used as\n"
				"IngeDev Template\n\n");
		Telium_Read_date(&date); // Print date and time
    99d6:	f107 0318 	add.w	r3, r7, #24
    99da:	4618      	mov	r0, r3
    99dc:	f016 fd62 	bl	204a4 <Telium_Read_date>
		Telium_Pprintf(szDate, date.day, date.month, date.year, date.hour, date.minute);
    99e0:	f107 0118 	add.w	r1, r7, #24
    99e4:	f107 0318 	add.w	r3, r7, #24
    99e8:	1c9a      	adds	r2, r3, #2
    99ea:	f107 0318 	add.w	r3, r7, #24
    99ee:	3304      	adds	r3, #4
    99f0:	f107 0018 	add.w	r0, r7, #24
    99f4:	3006      	adds	r0, #6
    99f6:	9000      	str	r0, [sp, #0]
    99f8:	f107 0018 	add.w	r0, r7, #24
    99fc:	3008      	adds	r0, #8
    99fe:	9001      	str	r0, [sp, #4]
    9a00:	f242 505c 	movw	r0, #9564	; 0x255c
    9a04:	f2c0 0002 	movt	r0, #2
    9a08:	f016 fec0 	bl	2078c <Telium_Pprintf>
		Telium_Pprintf("File    : %s\n", infos.file_name); // Print application file name
    9a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    9a10:	3314      	adds	r3, #20
    9a12:	f242 6064 	movw	r0, #9828	; 0x2664
    9a16:	f2c0 0002 	movt	r0, #2
    9a1a:	4619      	mov	r1, r3
    9a1c:	f016 feb6 	bl	2078c <Telium_Pprintf>
		Telium_Pprintf("CRC     : %04x\n", infos.crc); // Print application CRC
    9a20:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    9a24:	f242 6074 	movw	r0, #9844	; 0x2674
    9a28:	f2c0 0002 	movt	r0, #2
    9a2c:	4619      	mov	r1, r3
    9a2e:	f016 fead 	bl	2078c <Telium_Pprintf>
		Telium_Ttestall(PRINTER, 0);
    9a32:	2002      	movs	r0, #2
    9a34:	2100      	movs	r1, #0
    9a36:	f016 f9ff 	bl	1fe38 <Telium_Ttestall>

		Telium_Fclose(hPrinter); // Close printer driver
    9a3a:	6978      	ldr	r0, [r7, #20]
    9a3c:	f015 ffdc 	bl	1f9f8 <Telium_Fclose>
	}

	return FCT_OK;
    9a40:	2300      	movs	r3, #0
}
    9a42:	4618      	mov	r0, r3
    9a44:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9a48:	f2c0 0302 	movt	r3, #2
    9a4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    9a4e:	681b      	ldr	r3, [r3, #0]
    9a50:	429a      	cmp	r2, r3
    9a52:	d001      	beq.n	9a58 <state+0xe8>
    9a54:	f7ff faa6 	bl	8fa4 <__stack_chk_fail>
    9a58:	f107 0760 	add.w	r7, r7, #96	; 0x60
    9a5c:	46bd      	mov	sp, r7
    9a5e:	bd80      	pop	{r7, pc}

00009a60 <consult>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int consult(NO_SEGMENT no, void *p1, void *p2)
{
    9a60:	b580      	push	{r7, lr}
    9a62:	b08c      	sub	sp, #48	; 0x30
    9a64:	af02      	add	r7, sp, #8
    9a66:	4603      	mov	r3, r0
    9a68:	60b9      	str	r1, [r7, #8]
    9a6a:	607a      	str	r2, [r7, #4]
    9a6c:	73fb      	strb	r3, [r7, #15]
    9a6e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9a72:	f2c0 0302 	movt	r3, #2
    9a76:	681b      	ldr	r3, [r3, #0]
    9a78:	627b      	str	r3, [r7, #36]	; 0x24
	Telium_Date_t date;
	Telium_File_t *hPrinter;

	// Print daily totals
	hPrinter = Telium_Fopen("PRINTER", "w-*"); // Open printer driver
    9a7a:	f242 6010 	movw	r0, #9744	; 0x2610
    9a7e:	f2c0 0002 	movt	r0, #2
    9a82:	f242 6118 	movw	r1, #9752	; 0x2618
    9a86:	f2c0 0102 	movt	r1, #2
    9a8a:	f015 ffe7 	bl	1fa5c <Telium_Fopen>
    9a8e:	6178      	str	r0, [r7, #20]
	if (hPrinter != NULL)
    9a90:	697b      	ldr	r3, [r7, #20]
    9a92:	2b00      	cmp	r3, #0
    9a94:	d032      	beq.n	9afc <consult+0x9c>
	{
		Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName); // Print application name
    9a96:	f242 601c 	movw	r0, #9756	; 0x261c
    9a9a:	f2c0 0002 	movt	r0, #2
    9a9e:	f64f 7110 	movw	r1, #65296	; 0xff10
    9aa2:	f2c0 0102 	movt	r1, #2
    9aa6:	f016 fe71 	bl	2078c <Telium_Pprintf>
		Telium_Pprintf("        CONSULT        \n"
    9aaa:	f242 6084 	movw	r0, #9860	; 0x2684
    9aae:	f2c0 0002 	movt	r0, #2
    9ab2:	f016 fe6b 	bl	2078c <Telium_Pprintf>
				"Print daily totals here\n"
				"Number of Debit/Credit \n"
				"Totals of Debit/Credit \n"
				"Number of Cancel\n\n");
		Telium_Read_date(&date); // Print date and time
    9ab6:	f107 0318 	add.w	r3, r7, #24
    9aba:	4618      	mov	r0, r3
    9abc:	f016 fcf2 	bl	204a4 <Telium_Read_date>
		Telium_Pprintf(szDate, date.day, date.month, date.year, date.hour, date.minute);
    9ac0:	f107 0118 	add.w	r1, r7, #24
    9ac4:	f107 0318 	add.w	r3, r7, #24
    9ac8:	1c9a      	adds	r2, r3, #2
    9aca:	f107 0318 	add.w	r3, r7, #24
    9ace:	3304      	adds	r3, #4
    9ad0:	f107 0018 	add.w	r0, r7, #24
    9ad4:	3006      	adds	r0, #6
    9ad6:	9000      	str	r0, [sp, #0]
    9ad8:	f107 0018 	add.w	r0, r7, #24
    9adc:	3008      	adds	r0, #8
    9ade:	9001      	str	r0, [sp, #4]
    9ae0:	f242 505c 	movw	r0, #9564	; 0x255c
    9ae4:	f2c0 0002 	movt	r0, #2
    9ae8:	f016 fe50 	bl	2078c <Telium_Pprintf>

		Telium_Ttestall(PRINTER, 3*100);
    9aec:	2002      	movs	r0, #2
    9aee:	f44f 7196 	mov.w	r1, #300	; 0x12c
    9af2:	f016 f9a1 	bl	1fe38 <Telium_Ttestall>
		Telium_Fclose(hPrinter); // Close printer driver
    9af6:	6978      	ldr	r0, [r7, #20]
    9af8:	f015 ff7e 	bl	1f9f8 <Telium_Fclose>
	}

	return FCT_OK;
    9afc:	2300      	movs	r3, #0
}
    9afe:	4618      	mov	r0, r3
    9b00:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9b04:	f2c0 0302 	movt	r3, #2
    9b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9b0a:	681b      	ldr	r3, [r3, #0]
    9b0c:	429a      	cmp	r2, r3
    9b0e:	d001      	beq.n	9b14 <consult+0xb4>
    9b10:	f7ff fa48 	bl	8fa4 <__stack_chk_fail>
    9b14:	f107 0728 	add.w	r7, r7, #40	; 0x28
    9b18:	46bd      	mov	sp, r7
    9b1a:	bd80      	pop	{r7, pc}

00009b1c <mcall>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int mcall(NO_SEGMENT no, void *p1, void *p2)
{
    9b1c:	b580      	push	{r7, lr}
    9b1e:	b08c      	sub	sp, #48	; 0x30
    9b20:	af02      	add	r7, sp, #8
    9b22:	4603      	mov	r3, r0
    9b24:	60b9      	str	r1, [r7, #8]
    9b26:	607a      	str	r2, [r7, #4]
    9b28:	73fb      	strb	r3, [r7, #15]
    9b2a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9b2e:	f2c0 0302 	movt	r3, #2
    9b32:	681b      	ldr	r3, [r3, #0]
    9b34:	627b      	str	r3, [r7, #36]	; 0x24
	Telium_Date_t date;
	Telium_File_t *hPrinter;

	// Print call schedule
	hPrinter = Telium_Fopen("PRINTER", "w-*"); // Open printer driver
    9b36:	f242 6010 	movw	r0, #9744	; 0x2610
    9b3a:	f2c0 0002 	movt	r0, #2
    9b3e:	f242 6118 	movw	r1, #9752	; 0x2618
    9b42:	f2c0 0102 	movt	r1, #2
    9b46:	f015 ff89 	bl	1fa5c <Telium_Fopen>
    9b4a:	6178      	str	r0, [r7, #20]
	if (hPrinter != NULL)
    9b4c:	697b      	ldr	r3, [r7, #20]
    9b4e:	2b00      	cmp	r3, #0
    9b50:	d032      	beq.n	9bb8 <mcall+0x9c>
	{
		Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName); // Print application name
    9b52:	f242 601c 	movw	r0, #9756	; 0x261c
    9b56:	f2c0 0002 	movt	r0, #2
    9b5a:	f64f 7110 	movw	r1, #65296	; 0xff10
    9b5e:	f2c0 0102 	movt	r1, #2
    9b62:	f016 fe13 	bl	2078c <Telium_Pprintf>
		Telium_Pprintf("         MCALL         \n"
    9b66:	f242 60f8 	movw	r0, #9976	; 0x26f8
    9b6a:	f2c0 0002 	movt	r0, #2
    9b6e:	f016 fe0d 	bl	2078c <Telium_Pprintf>
				"Planning of call here  \n"
				"Time release batch     \n"
				"Time loading parameters\n"
				"Time loading hotlist\n\n");
		Telium_Read_date(&date); // Print date and time
    9b72:	f107 0318 	add.w	r3, r7, #24
    9b76:	4618      	mov	r0, r3
    9b78:	f016 fc94 	bl	204a4 <Telium_Read_date>
		Telium_Pprintf(szDate, date.day, date.month, date.year, date.hour, date.minute);
    9b7c:	f107 0118 	add.w	r1, r7, #24
    9b80:	f107 0318 	add.w	r3, r7, #24
    9b84:	1c9a      	adds	r2, r3, #2
    9b86:	f107 0318 	add.w	r3, r7, #24
    9b8a:	3304      	adds	r3, #4
    9b8c:	f107 0018 	add.w	r0, r7, #24
    9b90:	3006      	adds	r0, #6
    9b92:	9000      	str	r0, [sp, #0]
    9b94:	f107 0018 	add.w	r0, r7, #24
    9b98:	3008      	adds	r0, #8
    9b9a:	9001      	str	r0, [sp, #4]
    9b9c:	f242 505c 	movw	r0, #9564	; 0x255c
    9ba0:	f2c0 0002 	movt	r0, #2
    9ba4:	f016 fdf2 	bl	2078c <Telium_Pprintf>

		Telium_Ttestall(PRINTER, 3*100);
    9ba8:	2002      	movs	r0, #2
    9baa:	f44f 7196 	mov.w	r1, #300	; 0x12c
    9bae:	f016 f943 	bl	1fe38 <Telium_Ttestall>
		Telium_Fclose(hPrinter); // Close printer driver
    9bb2:	6978      	ldr	r0, [r7, #20]
    9bb4:	f015 ff20 	bl	1f9f8 <Telium_Fclose>
	}

	return FCT_OK;
    9bb8:	2300      	movs	r3, #0
}
    9bba:	4618      	mov	r0, r3
    9bbc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9bc0:	f2c0 0302 	movt	r3, #2
    9bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9bc6:	681b      	ldr	r3, [r3, #0]
    9bc8:	429a      	cmp	r2, r3
    9bca:	d001      	beq.n	9bd0 <mcall+0xb4>
    9bcc:	f7ff f9ea 	bl	8fa4 <__stack_chk_fail>
    9bd0:	f107 0728 	add.w	r7, r7, #40	; 0x28
    9bd4:	46bd      	mov	sp, r7
    9bd6:	bd80      	pop	{r7, pc}

00009bd8 <is_time_function>:
 * \return is_name result
 *
 * \see sdk_tplus.h
 */
int is_time_function(NO_SEGMENT no, void *p1, S_ETATOUT *param_out)
{
    9bd8:	b580      	push	{r7, lr}
    9bda:	b086      	sub	sp, #24
    9bdc:	af00      	add	r7, sp, #0
    9bde:	4603      	mov	r3, r0
    9be0:	60b9      	str	r1, [r7, #8]
    9be2:	607a      	str	r2, [r7, #4]
    9be4:	73fb      	strb	r3, [r7, #15]
    9be6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9bea:	f2c0 0302 	movt	r3, #2
    9bee:	681b      	ldr	r3, [r3, #0]
    9bf0:	617b      	str	r3, [r7, #20]
	int iRet;

	// Peripherals needed?
	param_out->returned_state[param_out->response_number].state.response = REP_OK;
    9bf2:	687b      	ldr	r3, [r7, #4]
    9bf4:	781b      	ldrb	r3, [r3, #0]
    9bf6:	461a      	mov	r2, r3
    9bf8:	6879      	ldr	r1, [r7, #4]
    9bfa:	4613      	mov	r3, r2
    9bfc:	009b      	lsls	r3, r3, #2
    9bfe:	189b      	adds	r3, r3, r2
    9c00:	009b      	lsls	r3, r3, #2
    9c02:	18cb      	adds	r3, r1, r3
    9c04:	3310      	adds	r3, #16
    9c06:	2200      	movs	r2, #0
    9c08:	711a      	strb	r2, [r3, #4]
	iRet = is_name(no, PT_NULL, param_out);
    9c0a:	7bfb      	ldrb	r3, [r7, #15]
    9c0c:	4618      	mov	r0, r3
    9c0e:	2100      	movs	r1, #0
    9c10:	687a      	ldr	r2, [r7, #4]
    9c12:	f7ff fd2f 	bl	9674 <is_name>
    9c16:	6138      	str	r0, [r7, #16]

	return iRet;
    9c18:	693b      	ldr	r3, [r7, #16]
}
    9c1a:	4618      	mov	r0, r3
    9c1c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9c20:	f2c0 0302 	movt	r3, #2
    9c24:	697a      	ldr	r2, [r7, #20]
    9c26:	681b      	ldr	r3, [r3, #0]
    9c28:	429a      	cmp	r2, r3
    9c2a:	d001      	beq.n	9c30 <is_time_function+0x58>
    9c2c:	f7ff f9ba 	bl	8fa4 <__stack_chk_fail>
    9c30:	f107 0718 	add.w	r7, r7, #24
    9c34:	46bd      	mov	sp, r7
    9c36:	bd80      	pop	{r7, pc}

00009c38 <time_function>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int time_function(NO_SEGMENT no, void *p1, void *p2)
{
    9c38:	b580      	push	{r7, lr}
    9c3a:	b088      	sub	sp, #32
    9c3c:	af02      	add	r7, sp, #8
    9c3e:	4603      	mov	r3, r0
    9c40:	60b9      	str	r1, [r7, #8]
    9c42:	607a      	str	r2, [r7, #4]
    9c44:	73fb      	strb	r3, [r7, #15]
    9c46:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9c4a:	f2c0 0302 	movt	r3, #2
    9c4e:	681b      	ldr	r3, [r3, #0]
    9c50:	617b      	str	r3, [r7, #20]
	// Periodical function in progress
	GL_Dialog_Message(gGoalGraphicLibInstance, appName, timeToCall,
    9c52:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    9c56:	f2c0 0302 	movt	r3, #2
    9c5a:	681b      	ldr	r3, [r3, #0]
    9c5c:	2201      	movs	r2, #1
    9c5e:	9200      	str	r2, [sp, #0]
    9c60:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    9c64:	9201      	str	r2, [sp, #4]
    9c66:	4618      	mov	r0, r3
    9c68:	f64f 7110 	movw	r1, #65296	; 0xff10
    9c6c:	f2c0 0102 	movt	r1, #2
    9c70:	f242 5228 	movw	r2, #9512	; 0x2528
    9c74:	f2c0 0202 	movt	r2, #2
    9c78:	2300      	movs	r3, #0
    9c7a:	f017 fd05 	bl	21688 <GL_Dialog_Message>
			GL_ICON_NONE, GL_BUTTON_VALID, 2 * GL_TIME_SECOND);

	return (FCT_OK);
    9c7e:	2300      	movs	r3, #0
}
    9c80:	4618      	mov	r0, r3
    9c82:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9c86:	f2c0 0302 	movt	r3, #2
    9c8a:	697a      	ldr	r2, [r7, #20]
    9c8c:	681b      	ldr	r3, [r3, #0]
    9c8e:	429a      	cmp	r2, r3
    9c90:	d001      	beq.n	9c96 <time_function+0x5e>
    9c92:	f7ff f987 	bl	8fa4 <__stack_chk_fail>
    9c96:	f107 0718 	add.w	r7, r7, #24
    9c9a:	46bd      	mov	sp, r7
    9c9c:	bd80      	pop	{r7, pc}
    9c9e:	bf00      	nop

00009ca0 <is_change_init>:
 * \return is_name result
 *
 * \see sdk_tplus.h
 */
int is_change_init(NO_SEGMENT no, void *p1, S_ETATOUT *param_out)
{
    9ca0:	b590      	push	{r4, r7, lr}
    9ca2:	b0d3      	sub	sp, #332	; 0x14c
    9ca4:	af00      	add	r7, sp, #0
    9ca6:	f107 0308 	add.w	r3, r7, #8
    9caa:	6019      	str	r1, [r3, #0]
    9cac:	1d3b      	adds	r3, r7, #4
    9cae:	601a      	str	r2, [r3, #0]
    9cb0:	f107 030f 	add.w	r3, r7, #15
    9cb4:	4602      	mov	r2, r0
    9cb6:	701a      	strb	r2, [r3, #0]
    9cb8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9cbc:	f2c0 0302 	movt	r3, #2
    9cc0:	681b      	ldr	r3, [r3, #0]
    9cc2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	S_ETATOUT etatout;
	int iRet;
	memcpy(&etatout, param_out, sizeof(etatout));
    9cc6:	f107 0214 	add.w	r2, r7, #20
    9cca:	1d3b      	adds	r3, r7, #4
    9ccc:	4610      	mov	r0, r2
    9cce:	6819      	ldr	r1, [r3, #0]
    9cd0:	f44f 7298 	mov.w	r2, #304	; 0x130
    9cd4:	f7fe efd0 	blx	8c78 <_init+0x118>

	// accept all
	etatout.returned_state[etatout.response_number].state.mask = 0;
    9cd8:	f107 0314 	add.w	r3, r7, #20
    9cdc:	781b      	ldrb	r3, [r3, #0]
    9cde:	461a      	mov	r2, r3
    9ce0:	f107 0114 	add.w	r1, r7, #20
    9ce4:	4613      	mov	r3, r2
    9ce6:	009b      	lsls	r3, r3, #2
    9ce8:	189b      	adds	r3, r3, r2
    9cea:	009b      	lsls	r3, r3, #2
    9cec:	18cb      	adds	r3, r1, r3
    9cee:	3314      	adds	r3, #20
    9cf0:	2200      	movs	r2, #0
    9cf2:	601a      	str	r2, [r3, #0]
	memcpy(param_out, &etatout, sizeof(etatout));
    9cf4:	1d3a      	adds	r2, r7, #4
    9cf6:	f107 0314 	add.w	r3, r7, #20
    9cfa:	6810      	ldr	r0, [r2, #0]
    9cfc:	4619      	mov	r1, r3
    9cfe:	f44f 7298 	mov.w	r2, #304	; 0x130
    9d02:	f7fe efba 	blx	8c78 <_init+0x118>
	iRet = is_name(no, PT_NULL, param_out);
    9d06:	f107 0410 	add.w	r4, r7, #16
    9d0a:	f107 030f 	add.w	r3, r7, #15
    9d0e:	781a      	ldrb	r2, [r3, #0]
    9d10:	1d3b      	adds	r3, r7, #4
    9d12:	4610      	mov	r0, r2
    9d14:	2100      	movs	r1, #0
    9d16:	681a      	ldr	r2, [r3, #0]
    9d18:	f7ff fcac 	bl	9674 <is_name>
    9d1c:	6020      	str	r0, [r4, #0]

	return iRet;
    9d1e:	f107 0310 	add.w	r3, r7, #16
    9d22:	681b      	ldr	r3, [r3, #0]
}
    9d24:	4618      	mov	r0, r3
    9d26:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9d2a:	f2c0 0302 	movt	r3, #2
    9d2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
    9d32:	681b      	ldr	r3, [r3, #0]
    9d34:	429a      	cmp	r2, r3
    9d36:	d001      	beq.n	9d3c <is_change_init+0x9c>
    9d38:	f7ff f934 	bl	8fa4 <__stack_chk_fail>
    9d3c:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
    9d40:	46bd      	mov	sp, r7
    9d42:	bd90      	pop	{r4, r7, pc}

00009d44 <modif_param>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int modif_param(NO_SEGMENT noappli, S_MODIF_P *param_in, void *p2)
{
    9d44:	b580      	push	{r7, lr}
    9d46:	b0d4      	sub	sp, #336	; 0x150
    9d48:	af00      	add	r7, sp, #0
    9d4a:	f107 0308 	add.w	r3, r7, #8
    9d4e:	6019      	str	r1, [r3, #0]
    9d50:	1d3b      	adds	r3, r7, #4
    9d52:	601a      	str	r2, [r3, #0]
    9d54:	f107 030f 	add.w	r3, r7, #15
    9d58:	4602      	mov	r2, r0
    9d5a:	701a      	strb	r2, [r3, #0]
    9d5c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9d60:	f2c0 0302 	movt	r3, #2
    9d64:	681b      	ldr	r3, [r3, #0]
    9d66:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	S_MODIF_P param_changed;

	memcpy(&param_changed, param_in, sizeof(param_changed));
    9d6a:	f107 0214 	add.w	r2, r7, #20
    9d6e:	f107 0308 	add.w	r3, r7, #8
    9d72:	4610      	mov	r0, r2
    9d74:	6819      	ldr	r1, [r3, #0]
    9d76:	f44f 729c 	mov.w	r2, #312	; 0x138
    9d7a:	f7fe ef7e 	blx	8c78 <_init+0x118>
	Telium_Fopen("DISPLAY", "w");
    9d7e:	f242 6004 	movw	r0, #9732	; 0x2604
    9d82:	f2c0 0002 	movt	r0, #2
    9d86:	f242 7170 	movw	r1, #10096	; 0x2770
    9d8a:	f2c0 0102 	movt	r1, #2
    9d8e:	f015 fe65 	bl	1fa5c <Telium_Fopen>
	Telium_Printf("MODIF_PARAM\n%04x", (int)param_changed.etatout.returned_state[0].state.mask);
    9d92:	f107 0314 	add.w	r3, r7, #20
    9d96:	695b      	ldr	r3, [r3, #20]
    9d98:	f242 7074 	movw	r0, #10100	; 0x2774
    9d9c:	f2c0 0002 	movt	r0, #2
    9da0:	4619      	mov	r1, r3
    9da2:	f016 fd0a 	bl	207ba <Telium_Printf>
	Telium_Ttestall(0, 200);
    9da6:	2000      	movs	r0, #0
    9da8:	21c8      	movs	r1, #200	; 0xc8
    9daa:	f016 f845 	bl	1fe38 <Telium_Ttestall>
	Telium_Fclose(Telium_Stdout());
    9dae:	f015 ffdf 	bl	1fd70 <Telium_Stdout>
    9db2:	4603      	mov	r3, r0
    9db4:	4618      	mov	r0, r3
    9db6:	f015 fe1f 	bl	1f9f8 <Telium_Fclose>

	return (FCT_OK);
    9dba:	2300      	movs	r3, #0
}
    9dbc:	4618      	mov	r0, r3
    9dbe:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9dc2:	f2c0 0302 	movt	r3, #2
    9dc6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
    9dca:	681b      	ldr	r3, [r3, #0]
    9dcc:	429a      	cmp	r2, r3
    9dce:	d001      	beq.n	9dd4 <modif_param+0x90>
    9dd0:	f7ff f8e8 	bl	8fa4 <__stack_chk_fail>
    9dd4:	f507 77a8 	add.w	r7, r7, #336	; 0x150
    9dd8:	46bd      	mov	sp, r7
    9dda:	bd80      	pop	{r7, pc}

00009ddc <is_evol_pg>:
 * \return is_name result
 *
 * \see sdk_tplus.h
 */
int is_evol_pg(NO_SEGMENT no, void *p1, S_ETATOUT *param_out)
{
    9ddc:	b580      	push	{r7, lr}
    9dde:	b086      	sub	sp, #24
    9de0:	af00      	add	r7, sp, #0
    9de2:	4603      	mov	r3, r0
    9de4:	60b9      	str	r1, [r7, #8]
    9de6:	607a      	str	r2, [r7, #4]
    9de8:	73fb      	strb	r3, [r7, #15]
    9dea:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9dee:	f2c0 0302 	movt	r3, #2
    9df2:	681b      	ldr	r3, [r3, #0]
    9df4:	617b      	str	r3, [r7, #20]
	int iRet;

	// Downloading process allowed?
	param_out->returned_state[param_out->response_number].state.response = REP_OK;
    9df6:	687b      	ldr	r3, [r7, #4]
    9df8:	781b      	ldrb	r3, [r3, #0]
    9dfa:	461a      	mov	r2, r3
    9dfc:	6879      	ldr	r1, [r7, #4]
    9dfe:	4613      	mov	r3, r2
    9e00:	009b      	lsls	r3, r3, #2
    9e02:	189b      	adds	r3, r3, r2
    9e04:	009b      	lsls	r3, r3, #2
    9e06:	18cb      	adds	r3, r1, r3
    9e08:	3310      	adds	r3, #16
    9e0a:	2200      	movs	r2, #0
    9e0c:	711a      	strb	r2, [r3, #4]
	iRet = is_name(no, PT_NULL, param_out);
    9e0e:	7bfb      	ldrb	r3, [r7, #15]
    9e10:	4618      	mov	r0, r3
    9e12:	2100      	movs	r1, #0
    9e14:	687a      	ldr	r2, [r7, #4]
    9e16:	f7ff fc2d 	bl	9674 <is_name>
    9e1a:	6138      	str	r0, [r7, #16]

	return iRet;
    9e1c:	693b      	ldr	r3, [r7, #16]
}
    9e1e:	4618      	mov	r0, r3
    9e20:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9e24:	f2c0 0302 	movt	r3, #2
    9e28:	697a      	ldr	r2, [r7, #20]
    9e2a:	681b      	ldr	r3, [r3, #0]
    9e2c:	429a      	cmp	r2, r3
    9e2e:	d001      	beq.n	9e34 <is_evol_pg+0x58>
    9e30:	f7ff f8b8 	bl	8fa4 <__stack_chk_fail>
    9e34:	f107 0718 	add.w	r7, r7, #24
    9e38:	46bd      	mov	sp, r7
    9e3a:	bd80      	pop	{r7, pc}

00009e3c <is_delete>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int is_delete(NO_SEGMENT no, void *p1, S_DELETE *param_out)
{
    9e3c:	b580      	push	{r7, lr}
    9e3e:	b086      	sub	sp, #24
    9e40:	af00      	add	r7, sp, #0
    9e42:	4603      	mov	r3, r0
    9e44:	60b9      	str	r1, [r7, #8]
    9e46:	607a      	str	r2, [r7, #4]
    9e48:	73fb      	strb	r3, [r7, #15]
    9e4a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9e4e:	f2c0 0302 	movt	r3, #2
    9e52:	681b      	ldr	r3, [r3, #0]
    9e54:	617b      	str	r3, [r7, #20]
	// Deletion process allowed?
	param_out->deleting = DEL_YES;
    9e56:	687b      	ldr	r3, [r7, #4]
    9e58:	2201      	movs	r2, #1
    9e5a:	701a      	strb	r2, [r3, #0]

	return (FCT_OK);
    9e5c:	2300      	movs	r3, #0
}
    9e5e:	4618      	mov	r0, r3
    9e60:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9e64:	f2c0 0302 	movt	r3, #2
    9e68:	697a      	ldr	r2, [r7, #20]
    9e6a:	681b      	ldr	r3, [r3, #0]
    9e6c:	429a      	cmp	r2, r3
    9e6e:	d001      	beq.n	9e74 <is_delete+0x38>
    9e70:	f7ff f898 	bl	8fa4 <__stack_chk_fail>
    9e74:	f107 0718 	add.w	r7, r7, #24
    9e78:	46bd      	mov	sp, r7
    9e7a:	bd80      	pop	{r7, pc}

00009e7c <file_received>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int file_received(NO_SEGMENT no, S_FILE *param_in, void *p2)
{
    9e7c:	b590      	push	{r4, r7, lr}
    9e7e:	b0e1      	sub	sp, #388	; 0x184
    9e80:	af00      	add	r7, sp, #0
    9e82:	f107 0308 	add.w	r3, r7, #8
    9e86:	6019      	str	r1, [r3, #0]
    9e88:	1d3b      	adds	r3, r7, #4
    9e8a:	601a      	str	r2, [r3, #0]
    9e8c:	f107 030f 	add.w	r3, r7, #15
    9e90:	4602      	mov	r2, r0
    9e92:	701a      	strb	r2, [r3, #0]
    9e94:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    9e98:	f2c0 0302 	movt	r3, #2
    9e9c:	681b      	ldr	r3, [r3, #0]
    9e9e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	int len;
	char rsp[256];
	S_FS_FILE *pFile;

	// Print parameter file received
	prt = Telium_Fopen("PRINTER", "w-"); // Open printer driver
    9ea2:	f107 0418 	add.w	r4, r7, #24
    9ea6:	f242 6010 	movw	r0, #9744	; 0x2610
    9eaa:	f2c0 0002 	movt	r0, #2
    9eae:	f242 7188 	movw	r1, #10120	; 0x2788
    9eb2:	f2c0 0102 	movt	r1, #2
    9eb6:	f015 fdd1 	bl	1fa5c <Telium_Fopen>
    9eba:	6020      	str	r0, [r4, #0]
	Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName);
    9ebc:	f242 601c 	movw	r0, #9756	; 0x261c
    9ec0:	f2c0 0002 	movt	r0, #2
    9ec4:	f64f 7110 	movw	r1, #65296	; 0xff10
    9ec8:	f2c0 0102 	movt	r1, #2
    9ecc:	f016 fc5e 	bl	2078c <Telium_Pprintf>
	Telium_Pprintf("File Received :\n/%s/%s\n", param_in->volume_name, param_in->file_name);
    9ed0:	f107 0308 	add.w	r3, r7, #8
    9ed4:	681a      	ldr	r2, [r3, #0]
    9ed6:	f107 0308 	add.w	r3, r7, #8
    9eda:	681b      	ldr	r3, [r3, #0]
    9edc:	3310      	adds	r3, #16
    9ede:	f242 708c 	movw	r0, #10124	; 0x278c
    9ee2:	f2c0 0002 	movt	r0, #2
    9ee6:	4611      	mov	r1, r2
    9ee8:	461a      	mov	r2, r3
    9eea:	f016 fc4f 	bl	2078c <Telium_Pprintf>
	Telium_Ttestall(PRINTER, 0); // Print volume+file_name
    9eee:	2002      	movs	r0, #2
    9ef0:	2100      	movs	r1, #0
    9ef2:	f015 ffa1 	bl	1fe38 <Telium_Ttestall>

	memclr(Dir_File,sizeof(Dir_File));
    9ef6:	f107 0344 	add.w	r3, r7, #68	; 0x44
    9efa:	4618      	mov	r0, r3
    9efc:	2100      	movs	r1, #0
    9efe:	2219      	movs	r2, #25
    9f00:	f7fe ee5c 	blx	8bbc <_init+0x5c>
	memclr(Dir_Label,sizeof(Dir_Label));
    9f04:	f107 0360 	add.w	r3, r7, #96	; 0x60
    9f08:	4618      	mov	r0, r3
    9f0a:	2100      	movs	r1, #0
    9f0c:	2219      	movs	r2, #25
    9f0e:	f7fe ee56 	blx	8bbc <_init+0x5c>

	Telium_Sprintf(Dir_Label, "/%s", param_in->volume_name);
    9f12:	f107 0308 	add.w	r3, r7, #8
    9f16:	681b      	ldr	r3, [r3, #0]
    9f18:	f107 0260 	add.w	r2, r7, #96	; 0x60
    9f1c:	4610      	mov	r0, r2
    9f1e:	f242 5188 	movw	r1, #9608	; 0x2588
    9f22:	f2c0 0102 	movt	r1, #2
    9f26:	461a      	mov	r2, r3
    9f28:	f016 fc68 	bl	207fc <Telium_Sprintf>
	ParamCreat.Mode = FS_WRITEONCE;
    9f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    9f30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    9f34:	611a      	str	r2, [r3, #16]
	Ret = FS_mount(Dir_Label, &ParamCreat.Mode);
    9f36:	f107 041c 	add.w	r4, r7, #28
    9f3a:	f107 0260 	add.w	r2, r7, #96	; 0x60
    9f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
    9f42:	3310      	adds	r3, #16
    9f44:	4610      	mov	r0, r2
    9f46:	4619      	mov	r1, r3
    9f48:	f016 fd52 	bl	209f0 <FS_mount>
    9f4c:	6020      	str	r0, [r4, #0]
	if (Ret == FS_OK)
    9f4e:	f107 031c 	add.w	r3, r7, #28
    9f52:	681b      	ldr	r3, [r3, #0]
    9f54:	2b02      	cmp	r3, #2
    9f56:	d144      	bne.n	9fe2 <file_received+0x166>
	{
		Telium_Sprintf(Dir_File, "/%s/%s", param_in->volume_name, param_in->file_name);
    9f58:	f107 0308 	add.w	r3, r7, #8
    9f5c:	681a      	ldr	r2, [r3, #0]
    9f5e:	f107 0308 	add.w	r3, r7, #8
    9f62:	681b      	ldr	r3, [r3, #0]
    9f64:	3310      	adds	r3, #16
    9f66:	f107 0144 	add.w	r1, r7, #68	; 0x44
    9f6a:	4608      	mov	r0, r1
    9f6c:	f242 71a4 	movw	r1, #10148	; 0x27a4
    9f70:	f2c0 0102 	movt	r1, #2
    9f74:	f016 fc42 	bl	207fc <Telium_Sprintf>
		pFile = FS_open(Dir_File, "r"); // The file can be open at this stage
    9f78:	f107 0420 	add.w	r4, r7, #32
    9f7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
    9f80:	4618      	mov	r0, r3
    9f82:	f242 71ac 	movw	r1, #10156	; 0x27ac
    9f86:	f2c0 0102 	movt	r1, #2
    9f8a:	f016 fd5b 	bl	20a44 <FS_open>
    9f8e:	6020      	str	r0, [r4, #0]

		// Eventually read the file and get parameters
		len = FS_length(pFile); // File length in bytes
    9f90:	f107 0414 	add.w	r4, r7, #20
    9f94:	f107 0320 	add.w	r3, r7, #32
    9f98:	6818      	ldr	r0, [r3, #0]
    9f9a:	f016 fcfd 	bl	20998 <FS_length>
    9f9e:	6020      	str	r0, [r4, #0]
		if (len > sizeof(rsp))
    9fa0:	f107 0314 	add.w	r3, r7, #20
    9fa4:	681b      	ldr	r3, [r3, #0]
    9fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9faa:	d904      	bls.n	9fb6 <file_received+0x13a>
		{
			len = sizeof(rsp);
    9fac:	f107 0314 	add.w	r3, r7, #20
    9fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
    9fb4:	601a      	str	r2, [r3, #0]
		}
		FS_read(rsp, len, 1, pFile); // Read from file
    9fb6:	f107 017c 	add.w	r1, r7, #124	; 0x7c
    9fba:	f107 0214 	add.w	r2, r7, #20
    9fbe:	f107 0320 	add.w	r3, r7, #32
    9fc2:	4608      	mov	r0, r1
    9fc4:	6811      	ldr	r1, [r2, #0]
    9fc6:	2201      	movs	r2, #1
    9fc8:	681b      	ldr	r3, [r3, #0]
    9fca:	f016 fd65 	bl	20a98 <FS_read>

		FS_close(pFile); // Close the file
    9fce:	f107 0320 	add.w	r3, r7, #32
    9fd2:	6818      	ldr	r0, [r3, #0]
    9fd4:	f016 fc5a 	bl	2088c <FS_close>
		FS_unmount(Dir_Label); // Cannot be deleted as it is located in system disk
    9fd8:	f107 0360 	add.w	r3, r7, #96	; 0x60
    9fdc:	4618      	mov	r0, r3
    9fde:	f016 fe07 	bl	20bf0 <FS_unmount>
	}

	Telium_Pprintf("%s\n", rsp);
    9fe2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
    9fe6:	f242 70b0 	movw	r0, #10160	; 0x27b0
    9fea:	f2c0 0002 	movt	r0, #2
    9fee:	4619      	mov	r1, r3
    9ff0:	f016 fbcc 	bl	2078c <Telium_Pprintf>

	Telium_Fclose(prt); // Close printer driver
    9ff4:	f107 0318 	add.w	r3, r7, #24
    9ff8:	6818      	ldr	r0, [r3, #0]
    9ffa:	f015 fcfd 	bl	1f9f8 <Telium_Fclose>

	return (FCT_OK);
    9ffe:	2300      	movs	r3, #0
}
    a000:	4618      	mov	r0, r3
    a002:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a006:	f2c0 0302 	movt	r3, #2
    a00a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
    a00e:	681b      	ldr	r3, [r3, #0]
    a010:	429a      	cmp	r2, r3
    a012:	d001      	beq.n	a018 <file_received+0x19c>
    a014:	f7fe ffc6 	bl	8fa4 <__stack_chk_fail>
    a018:	f507 77c2 	add.w	r7, r7, #388	; 0x184
    a01c:	46bd      	mov	sp, r7
    a01e:	bd90      	pop	{r4, r7, pc}

0000a020 <message_received>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int message_received(NO_SEGMENT no, S_MESSAGE_IAM *param_in, void *p2)
{
    a020:	b580      	push	{r7, lr}
    a022:	b086      	sub	sp, #24
    a024:	af00      	add	r7, sp, #0
    a026:	4603      	mov	r3, r0
    a028:	60b9      	str	r1, [r7, #8]
    a02a:	607a      	str	r2, [r7, #4]
    a02c:	73fb      	strb	r3, [r7, #15]
    a02e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a032:	f2c0 0302 	movt	r3, #2
    a036:	681b      	ldr	r3, [r3, #0]
    a038:	617b      	str	r3, [r7, #20]
	Telium_File_t *prt;

	// Print message received from application 2
	prt = Telium_Fopen("PRINTER", "w-"); // Open printer driver
    a03a:	f242 6010 	movw	r0, #9744	; 0x2610
    a03e:	f2c0 0002 	movt	r0, #2
    a042:	f242 7188 	movw	r1, #10120	; 0x2788
    a046:	f2c0 0102 	movt	r1, #2
    a04a:	f015 fd07 	bl	1fa5c <Telium_Fopen>
    a04e:	6138      	str	r0, [r7, #16]
	Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName);
    a050:	f242 601c 	movw	r0, #9756	; 0x261c
    a054:	f2c0 0002 	movt	r0, #2
    a058:	f64f 7110 	movw	r1, #65296	; 0xff10
    a05c:	f2c0 0102 	movt	r1, #2
    a060:	f016 fb94 	bl	2078c <Telium_Pprintf>
	Telium_Pprintf("Message IAM :\n");
    a064:	f242 70b4 	movw	r0, #10164	; 0x27b4
    a068:	f2c0 0002 	movt	r0, #2
    a06c:	f016 fb8e 	bl	2078c <Telium_Pprintf>
	Telium_Pprintf("S:%04X R:%04X\n", param_in->sender, param_in->receiver); // USER2 to TEMPLATE
    a070:	68bb      	ldr	r3, [r7, #8]
    a072:	881b      	ldrh	r3, [r3, #0]
    a074:	461a      	mov	r2, r3
    a076:	68bb      	ldr	r3, [r7, #8]
    a078:	885b      	ldrh	r3, [r3, #2]
    a07a:	f242 70c4 	movw	r0, #10180	; 0x27c4
    a07e:	f2c0 0002 	movt	r0, #2
    a082:	4611      	mov	r1, r2
    a084:	461a      	mov	r2, r3
    a086:	f016 fb81 	bl	2078c <Telium_Pprintf>
	Telium_Pprintf("IAM Type : %04X \n\n", param_in->type);
    a08a:	68bb      	ldr	r3, [r7, #8]
    a08c:	889b      	ldrh	r3, [r3, #4]
    a08e:	f242 70d4 	movw	r0, #10196	; 0x27d4
    a092:	f2c0 0002 	movt	r0, #2
    a096:	4619      	mov	r1, r3
    a098:	f016 fb78 	bl	2078c <Telium_Pprintf>

	Telium_Pprintf("%s\n\n\n\n\n\n", param_in->value); // Print the message received
    a09c:	68bb      	ldr	r3, [r7, #8]
    a09e:	3308      	adds	r3, #8
    a0a0:	f242 70e8 	movw	r0, #10216	; 0x27e8
    a0a4:	f2c0 0002 	movt	r0, #2
    a0a8:	4619      	mov	r1, r3
    a0aa:	f016 fb6f 	bl	2078c <Telium_Pprintf>
	Telium_Ttestall(PRINTER, 2*100);
    a0ae:	2002      	movs	r0, #2
    a0b0:	21c8      	movs	r1, #200	; 0xc8
    a0b2:	f015 fec1 	bl	1fe38 <Telium_Ttestall>
	Telium_Fclose(prt); // Close printer driver
    a0b6:	6938      	ldr	r0, [r7, #16]
    a0b8:	f015 fc9e 	bl	1f9f8 <Telium_Fclose>

	return (FCT_OK);
    a0bc:	2300      	movs	r3, #0
}
    a0be:	4618      	mov	r0, r3
    a0c0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a0c4:	f2c0 0302 	movt	r3, #2
    a0c8:	697a      	ldr	r2, [r7, #20]
    a0ca:	681b      	ldr	r3, [r3, #0]
    a0cc:	429a      	cmp	r2, r3
    a0ce:	d001      	beq.n	a0d4 <message_received+0xb4>
    a0d0:	f7fe ff68 	bl	8fa4 <__stack_chk_fail>
    a0d4:	f107 0718 	add.w	r7, r7, #24
    a0d8:	46bd      	mov	sp, r7
    a0da:	bd80      	pop	{r7, pc}

0000a0dc <is_card_specific>:
 * \return is_name result
 *
 * \see sdk_tplus.h
 */
int is_card_specific(NO_SEGMENT no, S_TRANSIN *param_in, S_ETATOUT *param_out)
{
    a0dc:	b580      	push	{r7, lr}
    a0de:	b086      	sub	sp, #24
    a0e0:	af00      	add	r7, sp, #0
    a0e2:	4603      	mov	r3, r0
    a0e4:	60b9      	str	r1, [r7, #8]
    a0e6:	607a      	str	r2, [r7, #4]
    a0e8:	73fb      	strb	r3, [r7, #15]
    a0ea:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a0ee:	f2c0 0302 	movt	r3, #2
    a0f2:	681b      	ldr	r3, [r3, #0]
    a0f4:	617b      	str	r3, [r7, #20]
	int iRet;

	// Return application state
	param_out->returned_state[param_out->response_number].state.response = REP_KO;
    a0f6:	687b      	ldr	r3, [r7, #4]
    a0f8:	781b      	ldrb	r3, [r3, #0]
    a0fa:	461a      	mov	r2, r3
    a0fc:	6879      	ldr	r1, [r7, #4]
    a0fe:	4613      	mov	r3, r2
    a100:	009b      	lsls	r3, r3, #2
    a102:	189b      	adds	r3, r3, r2
    a104:	009b      	lsls	r3, r3, #2
    a106:	18cb      	adds	r3, r1, r3
    a108:	3310      	adds	r3, #16
    a10a:	2201      	movs	r2, #1
    a10c:	711a      	strb	r2, [r3, #4]
	iRet = is_name(no, PT_NULL, param_out);
    a10e:	7bfb      	ldrb	r3, [r7, #15]
    a110:	4618      	mov	r0, r3
    a112:	2100      	movs	r1, #0
    a114:	687a      	ldr	r2, [r7, #4]
    a116:	f7ff faad 	bl	9674 <is_name>
    a11a:	6138      	str	r0, [r7, #16]

	return iRet;
    a11c:	693b      	ldr	r3, [r7, #16]
}
    a11e:	4618      	mov	r0, r3
    a120:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a124:	f2c0 0302 	movt	r3, #2
    a128:	697a      	ldr	r2, [r7, #20]
    a12a:	681b      	ldr	r3, [r3, #0]
    a12c:	429a      	cmp	r2, r3
    a12e:	d001      	beq.n	a134 <is_card_specific+0x58>
    a130:	f7fe ff38 	bl	8fa4 <__stack_chk_fail>
    a134:	f107 0718 	add.w	r7, r7, #24
    a138:	46bd      	mov	sp, r7
    a13a:	bd80      	pop	{r7, pc}

0000a13c <card_inside>:
 *         FCT_OK: Card refused and poll the next application.
 *
 * \see sdk_tplus.h
 */
int card_inside(NO_SEGMENT no, S_TRANSIN *param_in, S_TRANSOUT *param_out)
{
    a13c:	b580      	push	{r7, lr}
    a13e:	b086      	sub	sp, #24
    a140:	af00      	add	r7, sp, #0
    a142:	4603      	mov	r3, r0
    a144:	60b9      	str	r1, [r7, #8]
    a146:	607a      	str	r2, [r7, #4]
    a148:	73fb      	strb	r3, [r7, #15]
    a14a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a14e:	f2c0 0302 	movt	r3, #2
    a152:	681b      	ldr	r3, [r3, #0]
    a154:	617b      	str	r3, [r7, #20]
	bool card_accepted = TRUE;
    a156:	2301      	movs	r3, #1
    a158:	74fb      	strb	r3, [r7, #19]

	if (card_accepted)
    a15a:	7cfb      	ldrb	r3, [r7, #19]
    a15c:	2b00      	cmp	r3, #0
    a15e:	d004      	beq.n	a16a <card_inside+0x2e>
	{
		// Return transaction status
		param_out->rc_payment = PAY_OK; // Transaction done, polling is stop
    a160:	687b      	ldr	r3, [r7, #4]
    a162:	2200      	movs	r2, #0
    a164:	705a      	strb	r2, [r3, #1]
		return (STOP);
    a166:	2301      	movs	r3, #1
    a168:	e000      	b.n	a16c <card_inside+0x30>
	}
	else
	{
		return (FCT_OK); // Card refused, poll the next application
    a16a:	2300      	movs	r3, #0
	}
}
    a16c:	4618      	mov	r0, r3
    a16e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a172:	f2c0 0302 	movt	r3, #2
    a176:	697a      	ldr	r2, [r7, #20]
    a178:	681b      	ldr	r3, [r3, #0]
    a17a:	429a      	cmp	r2, r3
    a17c:	d001      	beq.n	a182 <card_inside+0x46>
    a17e:	f7fe ff11 	bl	8fa4 <__stack_chk_fail>
    a182:	f107 0718 	add.w	r7, r7, #24
    a186:	46bd      	mov	sp, r7
    a188:	bd80      	pop	{r7, pc}
    a18a:	bf00      	nop

0000a18c <is_for_you_after>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int is_for_you_after(NO_SEGMENT no, S_TRANSIN *param_in, S_CARDOUT *param_out)
{
    a18c:	b580      	push	{r7, lr}
    a18e:	b086      	sub	sp, #24
    a190:	af00      	add	r7, sp, #0
    a192:	4603      	mov	r3, r0
    a194:	60b9      	str	r1, [r7, #8]
    a196:	607a      	str	r2, [r7, #4]
    a198:	73fb      	strb	r3, [r7, #15]
    a19a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a19e:	f2c0 0302 	movt	r3, #2
    a1a2:	681b      	ldr	r3, [r3, #0]
    a1a4:	617b      	str	r3, [r7, #20]

	// case of chip card
	if (param_in->support == CHIP_SUPPORT)
    a1a6:	68bb      	ldr	r3, [r7, #8]
    a1a8:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
    a1ac:	3328      	adds	r3, #40	; 0x28
    a1ae:	681b      	ldr	r3, [r3, #0]
    a1b0:	2b03      	cmp	r3, #3
    a1b2:	d12e      	bne.n	a212 <is_for_you_after+0x86>
	{
		if(param_in->power_on_result == 0)
    a1b4:	68bb      	ldr	r3, [r7, #8]
    a1b6:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
    a1ba:	3320      	adds	r3, #32
    a1bc:	781b      	ldrb	r3, [r3, #0]
    a1be:	2b00      	cmp	r3, #0
    a1c0:	d11a      	bne.n	a1f8 <is_for_you_after+0x6c>
		{
			// accept this card
			param_out->returned_state[param_out->response_number].cardappnumber = 1;
    a1c2:	687b      	ldr	r3, [r7, #4]
    a1c4:	781b      	ldrb	r3, [r3, #0]
    a1c6:	461a      	mov	r2, r3
    a1c8:	6879      	ldr	r1, [r7, #4]
    a1ca:	4613      	mov	r3, r2
    a1cc:	00db      	lsls	r3, r3, #3
    a1ce:	189b      	adds	r3, r3, r2
    a1d0:	00db      	lsls	r3, r3, #3
    a1d2:	1a9b      	subs	r3, r3, r2
    a1d4:	18cb      	adds	r3, r1, r3
    a1d6:	330f      	adds	r3, #15
    a1d8:	2201      	movs	r2, #1
    a1da:	701a      	strb	r2, [r3, #0]
			param_out->returned_state[param_out->response_number].cardapp[0].priority = CARD_PROCESSED;
    a1dc:	687b      	ldr	r3, [r7, #4]
    a1de:	781b      	ldrb	r3, [r3, #0]
    a1e0:	461a      	mov	r2, r3
    a1e2:	6879      	ldr	r1, [r7, #4]
    a1e4:	4613      	mov	r3, r2
    a1e6:	00db      	lsls	r3, r3, #3
    a1e8:	189b      	adds	r3, r3, r2
    a1ea:	00db      	lsls	r3, r3, #3
    a1ec:	1a9b      	subs	r3, r3, r2
    a1ee:	18cb      	adds	r3, r1, r3
    a1f0:	3310      	adds	r3, #16
    a1f2:	2205      	movs	r2, #5
    a1f4:	701a      	strb	r2, [r3, #0]
    a1f6:	e00c      	b.n	a212 <is_for_you_after+0x86>
		}
		else
		{
			// reject the card
			param_out->returned_state[param_out->response_number].cardappnumber = 0;
    a1f8:	687b      	ldr	r3, [r7, #4]
    a1fa:	781b      	ldrb	r3, [r3, #0]
    a1fc:	461a      	mov	r2, r3
    a1fe:	6879      	ldr	r1, [r7, #4]
    a200:	4613      	mov	r3, r2
    a202:	00db      	lsls	r3, r3, #3
    a204:	189b      	adds	r3, r3, r2
    a206:	00db      	lsls	r3, r3, #3
    a208:	1a9b      	subs	r3, r3, r2
    a20a:	18cb      	adds	r3, r1, r3
    a20c:	330f      	adds	r3, #15
    a20e:	2200      	movs	r2, #0
    a210:	701a      	strb	r2, [r3, #0]
		}
	}

	// case of stripe 2 card
	if (param_in->support == TRACK2_SUPPORT)
    a212:	68bb      	ldr	r3, [r7, #8]
    a214:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
    a218:	3328      	adds	r3, #40	; 0x28
    a21a:	681b      	ldr	r3, [r3, #0]
    a21c:	2b00      	cmp	r3, #0
    a21e:	d119      	bne.n	a254 <is_for_you_after+0xc8>
	{
		// accept this card
		param_out->returned_state[param_out->response_number].cardappnumber = 1;
    a220:	687b      	ldr	r3, [r7, #4]
    a222:	781b      	ldrb	r3, [r3, #0]
    a224:	461a      	mov	r2, r3
    a226:	6879      	ldr	r1, [r7, #4]
    a228:	4613      	mov	r3, r2
    a22a:	00db      	lsls	r3, r3, #3
    a22c:	189b      	adds	r3, r3, r2
    a22e:	00db      	lsls	r3, r3, #3
    a230:	1a9b      	subs	r3, r3, r2
    a232:	18cb      	adds	r3, r1, r3
    a234:	330f      	adds	r3, #15
    a236:	2201      	movs	r2, #1
    a238:	701a      	strb	r2, [r3, #0]
		param_out->returned_state[param_out->response_number].cardapp[0].priority = CARD_PRIORITY;
    a23a:	687b      	ldr	r3, [r7, #4]
    a23c:	781b      	ldrb	r3, [r3, #0]
    a23e:	461a      	mov	r2, r3
    a240:	6879      	ldr	r1, [r7, #4]
    a242:	4613      	mov	r3, r2
    a244:	00db      	lsls	r3, r3, #3
    a246:	189b      	adds	r3, r3, r2
    a248:	00db      	lsls	r3, r3, #3
    a24a:	1a9b      	subs	r3, r3, r2
    a24c:	18cb      	adds	r3, r1, r3
    a24e:	3310      	adds	r3, #16
    a250:	220f      	movs	r2, #15
    a252:	701a      	strb	r2, [r3, #0]
	}

	// case of Card Number Manual entry
	if (param_in->support == OPERATOR_SUPPORT)
    a254:	68bb      	ldr	r3, [r7, #8]
    a256:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
    a25a:	3328      	adds	r3, #40	; 0x28
    a25c:	681b      	ldr	r3, [r3, #0]
    a25e:	2b04      	cmp	r3, #4
    a260:	d119      	bne.n	a296 <is_for_you_after+0x10a>
	{
		// accept this card
		param_out->returned_state[param_out->response_number].cardappnumber = 1;
    a262:	687b      	ldr	r3, [r7, #4]
    a264:	781b      	ldrb	r3, [r3, #0]
    a266:	461a      	mov	r2, r3
    a268:	6879      	ldr	r1, [r7, #4]
    a26a:	4613      	mov	r3, r2
    a26c:	00db      	lsls	r3, r3, #3
    a26e:	189b      	adds	r3, r3, r2
    a270:	00db      	lsls	r3, r3, #3
    a272:	1a9b      	subs	r3, r3, r2
    a274:	18cb      	adds	r3, r1, r3
    a276:	330f      	adds	r3, #15
    a278:	2201      	movs	r2, #1
    a27a:	701a      	strb	r2, [r3, #0]
		param_out->returned_state[param_out->response_number].cardapp[0].priority = CARD_PRIORITY;
    a27c:	687b      	ldr	r3, [r7, #4]
    a27e:	781b      	ldrb	r3, [r3, #0]
    a280:	461a      	mov	r2, r3
    a282:	6879      	ldr	r1, [r7, #4]
    a284:	4613      	mov	r3, r2
    a286:	00db      	lsls	r3, r3, #3
    a288:	189b      	adds	r3, r3, r2
    a28a:	00db      	lsls	r3, r3, #3
    a28c:	1a9b      	subs	r3, r3, r2
    a28e:	18cb      	adds	r3, r1, r3
    a290:	3310      	adds	r3, #16
    a292:	220f      	movs	r2, #15
    a294:	701a      	strb	r2, [r3, #0]
	}

	// give my application name
	strcpy(param_out->returned_state[param_out->response_number].appname, appName);
    a296:	687b      	ldr	r3, [r7, #4]
    a298:	781b      	ldrb	r3, [r3, #0]
    a29a:	461a      	mov	r2, r3
    a29c:	4613      	mov	r3, r2
    a29e:	00db      	lsls	r3, r3, #3
    a2a0:	189b      	adds	r3, r3, r2
    a2a2:	00db      	lsls	r3, r3, #3
    a2a4:	1a9b      	subs	r3, r3, r2
    a2a6:	687a      	ldr	r2, [r7, #4]
    a2a8:	18d3      	adds	r3, r2, r3
    a2aa:	3301      	adds	r3, #1
    a2ac:	4618      	mov	r0, r3
    a2ae:	f64f 7110 	movw	r1, #65296	; 0xff10
    a2b2:	f2c0 0102 	movt	r1, #2
    a2b6:	f7fe ecb4 	blx	8c20 <_init+0xc0>
	// give my application number
	param_out->returned_state[param_out->response_number].no_appli = no;
    a2ba:	687b      	ldr	r3, [r7, #4]
    a2bc:	781b      	ldrb	r3, [r3, #0]
    a2be:	461a      	mov	r2, r3
    a2c0:	6879      	ldr	r1, [r7, #4]
    a2c2:	4613      	mov	r3, r2
    a2c4:	00db      	lsls	r3, r3, #3
    a2c6:	189b      	adds	r3, r3, r2
    a2c8:	00db      	lsls	r3, r3, #3
    a2ca:	1a9b      	subs	r3, r3, r2
    a2cc:	18cb      	adds	r3, r1, r3
    a2ce:	330e      	adds	r3, #14
    a2d0:	7bfa      	ldrb	r2, [r7, #15]
    a2d2:	701a      	strb	r2, [r3, #0]
	// give my card name
	strcpy(param_out->returned_state[param_out->response_number].cardapp[0].cardappname, "Template");
    a2d4:	687b      	ldr	r3, [r7, #4]
    a2d6:	781b      	ldrb	r3, [r3, #0]
    a2d8:	461a      	mov	r2, r3
    a2da:	4613      	mov	r3, r2
    a2dc:	00db      	lsls	r3, r3, #3
    a2de:	189b      	adds	r3, r3, r2
    a2e0:	00db      	lsls	r3, r3, #3
    a2e2:	1a9b      	subs	r3, r3, r2
    a2e4:	3308      	adds	r3, #8
    a2e6:	687a      	ldr	r2, [r7, #4]
    a2e8:	18d3      	adds	r3, r2, r3
    a2ea:	f103 0209 	add.w	r2, r3, #9
    a2ee:	f242 73f4 	movw	r3, #10228	; 0x27f4
    a2f2:	f2c0 0302 	movt	r3, #2
    a2f6:	cb03      	ldmia	r3!, {r0, r1}
    a2f8:	6010      	str	r0, [r2, #0]
    a2fa:	6051      	str	r1, [r2, #4]
    a2fc:	781b      	ldrb	r3, [r3, #0]
    a2fe:	7213      	strb	r3, [r2, #8]
	// increment the response number
	param_out->response_number++;
    a300:	687b      	ldr	r3, [r7, #4]
    a302:	781b      	ldrb	r3, [r3, #0]
    a304:	3301      	adds	r3, #1
    a306:	b2da      	uxtb	r2, r3
    a308:	687b      	ldr	r3, [r7, #4]
    a30a:	701a      	strb	r2, [r3, #0]

	return (FCT_OK);
    a30c:	2300      	movs	r3, #0
}
    a30e:	4618      	mov	r0, r3
    a310:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a314:	f2c0 0302 	movt	r3, #2
    a318:	697a      	ldr	r2, [r7, #20]
    a31a:	681b      	ldr	r3, [r3, #0]
    a31c:	429a      	cmp	r2, r3
    a31e:	d001      	beq.n	a324 <is_for_you_after+0x198>
    a320:	f7fe fe40 	bl	8fa4 <__stack_chk_fail>
    a324:	f107 0718 	add.w	r7, r7, #24
    a328:	46bd      	mov	sp, r7
    a32a:	bd80      	pop	{r7, pc}

0000a32c <debit_non_emv>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int debit_non_emv(NO_SEGMENT no, S_TRANSIN * param_in, S_TRANSOUT * param_out)
{
    a32c:	b580      	push	{r7, lr}
    a32e:	b088      	sub	sp, #32
    a330:	af00      	add	r7, sp, #0
    a332:	4603      	mov	r3, r0
    a334:	60b9      	str	r1, [r7, #8]
    a336:	607a      	str	r2, [r7, #4]
    a338:	73fb      	strb	r3, [r7, #15]
    a33a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a33e:	f2c0 0302 	movt	r3, #2
    a342:	681b      	ldr	r3, [r3, #0]
    a344:	61fb      	str	r3, [r7, #28]
	Telium_File_t *prt;
	int i;

	prt = Telium_Fopen("PRINTER", "w-");
    a346:	f242 6010 	movw	r0, #9744	; 0x2610
    a34a:	f2c0 0002 	movt	r0, #2
    a34e:	f242 7188 	movw	r1, #10120	; 0x2788
    a352:	f2c0 0102 	movt	r1, #2
    a356:	f015 fb81 	bl	1fa5c <Telium_Fopen>
    a35a:	61b8      	str	r0, [r7, #24]

	// case of chip card
	if (param_in->support == CHIP_SUPPORT)
    a35c:	68bb      	ldr	r3, [r7, #8]
    a35e:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
    a362:	3328      	adds	r3, #40	; 0x28
    a364:	681b      	ldr	r3, [r3, #0]
    a366:	2b03      	cmp	r3, #3
    a368:	d146      	bne.n	a3f8 <debit_non_emv+0xcc>
	{
		Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName);
    a36a:	f242 601c 	movw	r0, #9756	; 0x261c
    a36e:	f2c0 0002 	movt	r0, #2
    a372:	f64f 7110 	movw	r1, #65296	; 0xff10
    a376:	f2c0 0102 	movt	r1, #2
    a37a:	f016 fa07 	bl	2078c <Telium_Pprintf>
		if (param_in->historical_bytes.length != 0)
    a37e:	68bb      	ldr	r3, [r7, #8]
    a380:	f503 5356 	add.w	r3, r3, #13696	; 0x3580
    a384:	3328      	adds	r3, #40	; 0x28
    a386:	781b      	ldrb	r3, [r3, #0]
    a388:	2b00      	cmp	r3, #0
    a38a:	d023      	beq.n	a3d4 <debit_non_emv+0xa8>
		{
			Telium_Pprintf("Atr:\n");
    a38c:	f642 0000 	movw	r0, #10240	; 0x2800
    a390:	f2c0 0002 	movt	r0, #2
    a394:	f016 f9fa 	bl	2078c <Telium_Pprintf>
			for (i=0; i<param_in->historical_bytes.length; i++)
    a398:	2300      	movs	r3, #0
    a39a:	617b      	str	r3, [r7, #20]
    a39c:	e010      	b.n	a3c0 <debit_non_emv+0x94>
			{
				Telium_Pprintf("%02X ", param_in->historical_bytes.historic[i]);
    a39e:	68ba      	ldr	r2, [r7, #8]
    a3a0:	697b      	ldr	r3, [r7, #20]
    a3a2:	18d3      	adds	r3, r2, r3
    a3a4:	f503 5356 	add.w	r3, r3, #13696	; 0x3580
    a3a8:	3328      	adds	r3, #40	; 0x28
    a3aa:	785b      	ldrb	r3, [r3, #1]
    a3ac:	f642 0008 	movw	r0, #10248	; 0x2808
    a3b0:	f2c0 0002 	movt	r0, #2
    a3b4:	4619      	mov	r1, r3
    a3b6:	f016 f9e9 	bl	2078c <Telium_Pprintf>
	{
		Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName);
		if (param_in->historical_bytes.length != 0)
		{
			Telium_Pprintf("Atr:\n");
			for (i=0; i<param_in->historical_bytes.length; i++)
    a3ba:	697b      	ldr	r3, [r7, #20]
    a3bc:	3301      	adds	r3, #1
    a3be:	617b      	str	r3, [r7, #20]
    a3c0:	68bb      	ldr	r3, [r7, #8]
    a3c2:	f503 5356 	add.w	r3, r3, #13696	; 0x3580
    a3c6:	3328      	adds	r3, #40	; 0x28
    a3c8:	781b      	ldrb	r3, [r3, #0]
    a3ca:	461a      	mov	r2, r3
    a3cc:	697b      	ldr	r3, [r7, #20]
    a3ce:	429a      	cmp	r2, r3
    a3d0:	dce5      	bgt.n	a39e <debit_non_emv+0x72>
    a3d2:	e00b      	b.n	a3ec <debit_non_emv+0xc0>
				Telium_Pprintf("%02X ", param_in->historical_bytes.historic[i]);
			}
		}
		else
		{
			Telium_Pprintf("Synchronous card\n");
    a3d4:	f642 0010 	movw	r0, #10256	; 0x2810
    a3d8:	f2c0 0002 	movt	r0, #2
    a3dc:	f016 f9d6 	bl	2078c <Telium_Pprintf>
			Telium_Pprintf("or Chip mute\n");
    a3e0:	f642 0024 	movw	r0, #10276	; 0x2824
    a3e4:	f2c0 0002 	movt	r0, #2
    a3e8:	f016 f9d0 	bl	2078c <Telium_Pprintf>
		}
		Telium_Pprintf("\n\n\n\n\n\n");
    a3ec:	f642 0034 	movw	r0, #10292	; 0x2834
    a3f0:	f2c0 0002 	movt	r0, #2
    a3f4:	f016 f9ca 	bl	2078c <Telium_Pprintf>
	}

	// case of stripe 2 card
	if (param_in->support == TRACK2_SUPPORT)
    a3f8:	68bb      	ldr	r3, [r7, #8]
    a3fa:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
    a3fe:	3328      	adds	r3, #40	; 0x28
    a400:	681b      	ldr	r3, [r3, #0]
    a402:	2b00      	cmp	r3, #0
    a404:	d114      	bne.n	a430 <debit_non_emv+0x104>
	{
		Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName);
    a406:	f242 601c 	movw	r0, #9756	; 0x261c
    a40a:	f2c0 0002 	movt	r0, #2
    a40e:	f64f 7110 	movw	r1, #65296	; 0xff10
    a412:	f2c0 0102 	movt	r1, #2
    a416:	f016 f9b9 	bl	2078c <Telium_Pprintf>
		Telium_Pprintf("Track2:\n%s\n\n\n\n\n\n", param_in->track2);
    a41a:	68bb      	ldr	r3, [r7, #8]
    a41c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    a420:	3307      	adds	r3, #7
    a422:	f642 003c 	movw	r0, #10300	; 0x283c
    a426:	f2c0 0002 	movt	r0, #2
    a42a:	4619      	mov	r1, r3
    a42c:	f016 f9ae 	bl	2078c <Telium_Pprintf>
	}

	// case of Card Number Manual entry
	if (param_in->support == OPERATOR_SUPPORT)
    a430:	68bb      	ldr	r3, [r7, #8]
    a432:	f503 5354 	add.w	r3, r3, #13568	; 0x3500
    a436:	3328      	adds	r3, #40	; 0x28
    a438:	681b      	ldr	r3, [r3, #0]
    a43a:	2b04      	cmp	r3, #4
    a43c:	d114      	bne.n	a468 <debit_non_emv+0x13c>
	{
		Telium_Pprintf("\x1b""E%s\n""\x1b""F", appName);
    a43e:	f242 601c 	movw	r0, #9756	; 0x261c
    a442:	f2c0 0002 	movt	r0, #2
    a446:	f64f 7110 	movw	r1, #65296	; 0xff10
    a44a:	f2c0 0102 	movt	r1, #2
    a44e:	f016 f99d 	bl	2078c <Telium_Pprintf>
		Telium_Pprintf("Manual Entry:\n%s\n\n\n\n\n\n", param_in->track2);
    a452:	68bb      	ldr	r3, [r7, #8]
    a454:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    a458:	3307      	adds	r3, #7
    a45a:	f642 0050 	movw	r0, #10320	; 0x2850
    a45e:	f2c0 0002 	movt	r0, #2
    a462:	4619      	mov	r1, r3
    a464:	f016 f992 	bl	2078c <Telium_Pprintf>
	}

	Telium_Ttestall(PRINTER, 2*100);
    a468:	2002      	movs	r0, #2
    a46a:	21c8      	movs	r1, #200	; 0xc8
    a46c:	f015 fce4 	bl	1fe38 <Telium_Ttestall>
	Telium_Fclose(prt);
    a470:	69b8      	ldr	r0, [r7, #24]
    a472:	f015 fac1 	bl	1f9f8 <Telium_Fclose>

	param_out->noappli = no; // Return application number
    a476:	687b      	ldr	r3, [r7, #4]
    a478:	7bfa      	ldrb	r2, [r7, #15]
    a47a:	701a      	strb	r2, [r3, #0]
	param_out->rc_payment = PAY_OK; // Transaction done
    a47c:	687b      	ldr	r3, [r7, #4]
    a47e:	2200      	movs	r2, #0
    a480:	705a      	strb	r2, [r3, #1]

	return (FCT_OK);
    a482:	2300      	movs	r3, #0
}
    a484:	4618      	mov	r0, r3
    a486:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a48a:	f2c0 0302 	movt	r3, #2
    a48e:	69fa      	ldr	r2, [r7, #28]
    a490:	681b      	ldr	r3, [r3, #0]
    a492:	429a      	cmp	r2, r3
    a494:	d001      	beq.n	a49a <debit_non_emv+0x16e>
    a496:	f7fe fd85 	bl	8fa4 <__stack_chk_fail>
    a49a:	f107 0720 	add.w	r7, r7, #32
    a49e:	46bd      	mov	sp, r7
    a4a0:	bd80      	pop	{r7, pc}
    a4a2:	bf00      	nop

0000a4a4 <give_interface>:
 * \return FCT_OK
 *
 * \see sdk_tplus.h
 */
int give_interface(unsigned short AppliNum, void *p1, void *p2)
{
    a4a4:	b580      	push	{r7, lr}
    a4a6:	b086      	sub	sp, #24
    a4a8:	af00      	add	r7, sp, #0
    a4aa:	4603      	mov	r3, r0
    a4ac:	60b9      	str	r1, [r7, #8]
    a4ae:	607a      	str	r2, [r7, #4]
    a4b0:	81fb      	strh	r3, [r7, #14]
    a4b2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a4b6:	f2c0 0302 	movt	r3, #2
    a4ba:	681b      	ldr	r3, [r3, #0]
    a4bc:	617b      	str	r3, [r7, #20]
	int i;

	for(i = 0; i < (int)(sizeof(Services) / sizeof(Services[0])); i++)
    a4be:	2300      	movs	r3, #0
    a4c0:	613b      	str	r3, [r7, #16]
    a4c2:	e00e      	b.n	a4e2 <give_interface+0x3e>
		Services[i].appli_id = AppliNum;
    a4c4:	f24f 2238 	movw	r2, #62008	; 0xf238
    a4c8:	f2c0 0202 	movt	r2, #2
    a4cc:	6939      	ldr	r1, [r7, #16]
    a4ce:	460b      	mov	r3, r1
    a4d0:	005b      	lsls	r3, r3, #1
    a4d2:	185b      	adds	r3, r3, r1
    a4d4:	009b      	lsls	r3, r3, #2
    a4d6:	18d3      	adds	r3, r2, r3
    a4d8:	89fa      	ldrh	r2, [r7, #14]
    a4da:	801a      	strh	r2, [r3, #0]
 */
int give_interface(unsigned short AppliNum, void *p1, void *p2)
{
	int i;

	for(i = 0; i < (int)(sizeof(Services) / sizeof(Services[0])); i++)
    a4dc:	693b      	ldr	r3, [r7, #16]
    a4de:	3301      	adds	r3, #1
    a4e0:	613b      	str	r3, [r7, #16]
    a4e2:	693b      	ldr	r3, [r7, #16]
    a4e4:	2b15      	cmp	r3, #21
    a4e6:	dded      	ble.n	a4c4 <give_interface+0x20>
		Services[i].appli_id = AppliNum;

	Telium_ServiceRegister((sizeof(Services) / sizeof(Services[0])), Services);
    a4e8:	2016      	movs	r0, #22
    a4ea:	f24f 2138 	movw	r1, #62008	; 0xf238
    a4ee:	f2c0 0102 	movt	r1, #2
    a4f2:	f016 f925 	bl	20740 <Telium_ServiceRegister>

	return FCT_OK;
    a4f6:	2300      	movs	r3, #0
}
    a4f8:	4618      	mov	r0, r3
    a4fa:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a4fe:	f2c0 0302 	movt	r3, #2
    a502:	697a      	ldr	r2, [r7, #20]
    a504:	681b      	ldr	r3, [r3, #0]
    a506:	429a      	cmp	r2, r3
    a508:	d001      	beq.n	a50e <give_interface+0x6a>
    a50a:	f7fe fd4b 	bl	8fa4 <__stack_chk_fail>
    a50e:	f107 0718 	add.w	r7, r7, #24
    a512:	46bd      	mov	sp, r7
    a514:	bd80      	pop	{r7, pc}
    a516:	bf00      	nop

0000a518 <entry>:
 * The RegisteryPowerFailure() can also be moved to entry().
 *
 * \see sdk_tplus.h
 */
void entry(void)
{
    a518:	b5b0      	push	{r4, r5, r7, lr}
    a51a:	b090      	sub	sp, #64	; 0x40
    a51c:	af00      	add	r7, sp, #0
    a51e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a522:	f2c0 0302 	movt	r3, #2
    a526:	681b      	ldr	r3, [r3, #0]
    a528:	63fb      	str	r3, [r7, #60]	; 0x3c
	object_info_t info;
	char * indexExt;

	// Recording services
	ObjectGetInfo(OBJECT_TYPE_APPLI, ApplicationGetCurrent(), &info);
    a52a:	f016 f983 	bl	20834 <ApplicationGetCurrent>
    a52e:	4603      	mov	r3, r0
    a530:	461a      	mov	r2, r3
    a532:	1d3b      	adds	r3, r7, #4
    a534:	2001      	movs	r0, #1
    a536:	4611      	mov	r1, r2
    a538:	461a      	mov	r2, r3
    a53a:	f016 fbe3 	bl	20d04 <ObjectGetInfo>
	give_interface(info.application_type, NULL, NULL);
    a53e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    a540:	4618      	mov	r0, r3
    a542:	2100      	movs	r1, #0
    a544:	2200      	movs	r2, #0
    a546:	f7ff ffad 	bl	a4a4 <give_interface>

	// Creates an instance of the graphics library.
	// This creation takes some time. To be quicker it can also be instantiated only once in application's life
	if(gGoalGraphicLibInstance == NULL) {
    a54a:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    a54e:	f2c0 0302 	movt	r3, #2
    a552:	681b      	ldr	r3, [r3, #0]
    a554:	2b00      	cmp	r3, #0
    a556:	d107      	bne.n	a568 <entry+0x50>
		gGoalGraphicLibInstance = GL_GraphicLib_Create();
    a558:	f017 f9c2 	bl	218e0 <GL_GraphicLib_Create>
    a55c:	4602      	mov	r2, r0
    a55e:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    a562:	f2c0 0302 	movt	r3, #2
    a566:	601a      	str	r2, [r3, #0]
	}

	memcpy(appName, info.name, OBJECT_NAME_LEN);
    a568:	f64f 7310 	movw	r3, #65296	; 0xff10
    a56c:	f2c0 0302 	movt	r3, #2
    a570:	461c      	mov	r4, r3
    a572:	1d3d      	adds	r5, r7, #4
    a574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a578:	682b      	ldr	r3, [r5, #0]
    a57a:	6023      	str	r3, [r4, #0]
	memcpy(fileName, info.file_name, OBJECT_FILE_NAME_LEN);
    a57c:	f64f 7328 	movw	r3, #65320	; 0xff28
    a580:	f2c0 0302 	movt	r3, #2
    a584:	461c      	mov	r4, r3
    a586:	f107 0518 	add.w	r5, r7, #24
    a58a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a58c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a58e:	682b      	ldr	r3, [r5, #0]
    a590:	6023      	str	r3, [r4, #0]
	fileName[OBJECT_FILE_NAME_LEN] = '\0';
    a592:	f64f 7328 	movw	r3, #65320	; 0xff28
    a596:	f2c0 0302 	movt	r3, #2
    a59a:	2200      	movs	r2, #0
    a59c:	751a      	strb	r2, [r3, #20]
	appName[OBJECT_NAME_LEN] = '\0';
    a59e:	f64f 7310 	movw	r3, #65296	; 0xff10
    a5a2:	f2c0 0302 	movt	r3, #2
    a5a6:	2200      	movs	r2, #0
    a5a8:	751a      	strb	r2, [r3, #20]

	// Manager looks for application icon whose name must be the same as the string given to the "is_name" function
	// FAMILY NAME cannot be used because the T_APPNAME type used in is_name function is too short to store FAMILY NAME (T_APPNAME length = 12+1 FAMILY NAME length =15+1)
	// Binary name is used instead. "info.file_name" contains the binary name with the file extension
	// (e.g. ABCDEFG.AGN). Extension must be removed in the name returned by the 'is_name' function.
	indexExt = strstr(fileName, ".");
    a5aa:	f64f 7028 	movw	r0, #65320	; 0xff28
    a5ae:	f2c0 0002 	movt	r0, #2
    a5b2:	212e      	movs	r1, #46	; 0x2e
    a5b4:	f7fe ebc8 	blx	8d48 <_init+0x1e8>
    a5b8:	6038      	str	r0, [r7, #0]
	if(indexExt != NULL) {
    a5ba:	683b      	ldr	r3, [r7, #0]
    a5bc:	2b00      	cmp	r3, #0
    a5be:	d002      	beq.n	a5c6 <entry+0xae>
		*indexExt = '\0';
    a5c0:	683b      	ldr	r3, [r7, #0]
    a5c2:	2200      	movs	r2, #0
    a5c4:	701a      	strb	r2, [r3, #0]
	}
}
    a5c6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a5ca:	f2c0 0302 	movt	r3, #2
    a5ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a5d0:	681b      	ldr	r3, [r3, #0]
    a5d2:	429a      	cmp	r2, r3
    a5d4:	d001      	beq.n	a5da <entry+0xc2>
    a5d6:	f7fe fce5 	bl	8fa4 <__stack_chk_fail>
    a5da:	f107 0740 	add.w	r7, r7, #64	; 0x40
    a5de:	46bd      	mov	sp, r7
    a5e0:	bdb0      	pop	{r4, r5, r7, pc}
    a5e2:	bf00      	nop

0000a5e4 <menuGoalDisplay>:
/**
 * Main menu
 *
 */
void menuGoalDisplay(void)
{
    a5e4:	b5b0      	push	{r4, r5, r7, lr}
    a5e6:	b08e      	sub	sp, #56	; 0x38
    a5e8:	af04      	add	r7, sp, #16
    a5ea:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a5ee:	f2c0 0302 	movt	r3, #2
    a5f2:	681b      	ldr	r3, [r3, #0]
    a5f4:	627b      	str	r3, [r7, #36]	; 0x24
	char choice = 0;
    a5f6:	2300      	movs	r3, #0
    a5f8:	71fb      	strb	r3, [r7, #7]

	const char *MenuUser[] =
    a5fa:	f642 135c 	movw	r3, #10588	; 0x295c
    a5fe:	f2c0 0302 	movt	r3, #2
    a602:	f107 0408 	add.w	r4, r7, #8
    a606:	461d      	mov	r5, r3
    a608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a60a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a60c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    a610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	{ "Send GPRS message", "Configure GPRS", "CARD TRANSACTION", "Load Keys", "Function 5", "Exit", 0 };

	initUIContext(_OFF_);
    a614:	2000      	movs	r0, #0
    a616:	f000 f8a9 	bl	a76c <initUIContext>

	do
	{
		//Display the menu using GOAL
		choice = GL_Dialog_Menu(gGoalGraphicLibInstance, "Select", MenuUser, choice, GL_BUTTON_NONE , GL_KEY_0, GL_TIME_INFINITE);
    a61a:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    a61e:	f2c0 0302 	movt	r3, #2
    a622:	6819      	ldr	r1, [r3, #0]
    a624:	79fb      	ldrb	r3, [r7, #7]
    a626:	f107 0208 	add.w	r2, r7, #8
    a62a:	2000      	movs	r0, #0
    a62c:	9000      	str	r0, [sp, #0]
    a62e:	2030      	movs	r0, #48	; 0x30
    a630:	9001      	str	r0, [sp, #4]
    a632:	f04f 30ff 	mov.w	r0, #4294967295
    a636:	9002      	str	r0, [sp, #8]
    a638:	4608      	mov	r0, r1
    a63a:	f642 0168 	movw	r1, #10344	; 0x2868
    a63e:	f2c0 0102 	movt	r1, #2
    a642:	f017 f80f 	bl	21664 <GL_Dialog_Menu>
    a646:	4603      	mov	r3, r0
    a648:	71fb      	strb	r3, [r7, #7]

		switch (choice)
    a64a:	79fb      	ldrb	r3, [r7, #7]
    a64c:	2b04      	cmp	r3, #4
    a64e:	d878      	bhi.n	a742 <menuGoalDisplay+0x15e>
    a650:	a201      	add	r2, pc, #4	; (adr r2, a658 <menuGoalDisplay+0x74>)
    a652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a656:	bf00      	nop
    a658:	0000a66d 	.word	0x0000a66d
    a65c:	0000a673 	.word	0x0000a673
    a660:	0000a6a5 	.word	0x0000a6a5
    a664:	0000a6e3 	.word	0x0000a6e3
    a668:	0000a715 	.word	0x0000a715
		{
		case 0:
			// Send sample message
			ComGPRS();
    a66c:	f001 fed2 	bl	c414 <ComGPRS>
			break;
    a670:	e068      	b.n	a744 <menuGoalDisplay+0x160>
		case 1:
			// Configure GPRS
			PromptGPRS();
    a672:	f001 fb29 	bl	bcc8 <PromptGPRS>

			GL_Dialog_Message(gGoalGraphicLibInstance, "GPRS Configuration",
    a676:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    a67a:	f2c0 0302 	movt	r3, #2
    a67e:	681b      	ldr	r3, [r3, #0]
    a680:	2201      	movs	r2, #1
    a682:	9200      	str	r2, [sp, #0]
    a684:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    a688:	9201      	str	r2, [sp, #4]
    a68a:	4618      	mov	r0, r3
    a68c:	f642 0170 	movw	r1, #10352	; 0x2870
    a690:	f2c0 0102 	movt	r1, #2
    a694:	f642 0284 	movw	r2, #10372	; 0x2884
    a698:	f2c0 0202 	movt	r2, #2
    a69c:	2302      	movs	r3, #2
    a69e:	f016 fff3 	bl	21688 <GL_Dialog_Message>
					"Configuration\nDONE...", GL_ICON_INFORMATION, GL_BUTTON_VALID,
					2 * GL_TIME_SECOND);
			break;
    a6a2:	e04f      	b.n	a744 <menuGoalDisplay+0x160>
		case 2:
			//Amount input


			//Swipe a card
			Magnetic();
    a6a4:	f00c fbb2 	bl	16e0c <Magnetic>

			//Request for PIN
			Iso9564PinEntry();
    a6a8:	f00e fd20 	bl	190ec <Iso9564PinEntry>

			//Request for amount
			amount();
    a6ac:	f00f f970 	bl	19990 <amount>

			//Send transaction upstream
			doTransaction();
    a6b0:	f007 fe5e 	bl	12370 <doTransaction>

			// Displays a GOAL dialog during 2s
			GL_Dialog_Message(gGoalGraphicLibInstance, "Card Transaction",
    a6b4:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    a6b8:	f2c0 0302 	movt	r3, #2
    a6bc:	681b      	ldr	r3, [r3, #0]
    a6be:	2201      	movs	r2, #1
    a6c0:	9200      	str	r2, [sp, #0]
    a6c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    a6c6:	9201      	str	r2, [sp, #4]
    a6c8:	4618      	mov	r0, r3
    a6ca:	f642 019c 	movw	r1, #10396	; 0x289c
    a6ce:	f2c0 0102 	movt	r1, #2
    a6d2:	f642 02b0 	movw	r2, #10416	; 0x28b0
    a6d6:	f2c0 0202 	movt	r2, #2
    a6da:	2302      	movs	r3, #2
    a6dc:	f016 ffd4 	bl	21688 <GL_Dialog_Message>
					"FINISHED\n\nThank You...", GL_ICON_INFORMATION, GL_BUTTON_VALID,
					2 * GL_TIME_SECOND);
			break;
    a6e0:	e030      	b.n	a744 <menuGoalDisplay+0x160>
		case 3:
			//Load All keys
			LoadKeysAuto();
    a6e2:	f00f f931 	bl	19948 <LoadKeysAuto>

			// Displays a GOAL dialog during 2s
			GL_Dialog_Message(gGoalGraphicLibInstance, "Load Keys",
    a6e6:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    a6ea:	f2c0 0302 	movt	r3, #2
    a6ee:	681b      	ldr	r3, [r3, #0]
    a6f0:	2201      	movs	r2, #1
    a6f2:	9200      	str	r2, [sp, #0]
    a6f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    a6f8:	9201      	str	r2, [sp, #4]
    a6fa:	4618      	mov	r0, r3
    a6fc:	f642 01c8 	movw	r1, #10440	; 0x28c8
    a700:	f2c0 0102 	movt	r1, #2
    a704:	f642 02d4 	movw	r2, #10452	; 0x28d4
    a708:	f2c0 0202 	movt	r2, #2
    a70c:	2302      	movs	r3, #2
    a70e:	f016 ffbb 	bl	21688 <GL_Dialog_Message>
					"Keys Loading\nDone...", GL_ICON_INFORMATION, GL_BUTTON_VALID,
					2 * GL_TIME_SECOND);
			break;
    a712:	e017      	b.n	a744 <menuGoalDisplay+0x160>
		case 4:
			// Displays a GOAL dialog during 2s
			GL_Dialog_Message(gGoalGraphicLibInstance, "Function5",
    a714:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    a718:	f2c0 0302 	movt	r3, #2
    a71c:	681b      	ldr	r3, [r3, #0]
    a71e:	2201      	movs	r2, #1
    a720:	9200      	str	r2, [sp, #0]
    a722:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    a726:	9201      	str	r2, [sp, #4]
    a728:	4618      	mov	r0, r3
    a72a:	f642 01ec 	movw	r1, #10476	; 0x28ec
    a72e:	f2c0 0102 	movt	r1, #2
    a732:	f642 02f8 	movw	r2, #10488	; 0x28f8
    a736:	f2c0 0202 	movt	r2, #2
    a73a:	2302      	movs	r3, #2
    a73c:	f016 ffa4 	bl	21688 <GL_Dialog_Message>
					"Function5\nRunning...", GL_ICON_INFORMATION, GL_BUTTON_VALID,
					2 * GL_TIME_SECOND);
			break;
    a740:	e000      	b.n	a744 <menuGoalDisplay+0x160>
		default:
			//exit
			break;
    a742:	bf00      	nop
		}
	} while (choice != 5);
    a744:	79fb      	ldrb	r3, [r7, #7]
    a746:	2b05      	cmp	r3, #5
    a748:	f47f af67 	bne.w	a61a <menuGoalDisplay+0x36>

	releaseUIContext();
    a74c:	f000 f89c 	bl	a888 <releaseUIContext>

	return;
}
    a750:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a754:	f2c0 0302 	movt	r3, #2
    a758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a75a:	681b      	ldr	r3, [r3, #0]
    a75c:	429a      	cmp	r2, r3
    a75e:	d001      	beq.n	a764 <menuGoalDisplay+0x180>
    a760:	f7fe fc20 	bl	8fa4 <__stack_chk_fail>
    a764:	f107 0728 	add.w	r7, r7, #40	; 0x28
    a768:	46bd      	mov	sp, r7
    a76a:	bdb0      	pop	{r4, r5, r7, pc}

0000a76c <initUIContext>:

/**
 * Initialize the display context to maximize the canvas on user area
 */
void initUIContext(int displayHeaderFooterLeds)
{
    a76c:	b580      	push	{r7, lr}
    a76e:	b084      	sub	sp, #16
    a770:	af00      	add	r7, sp, #0
    a772:	6078      	str	r0, [r7, #4]
    a774:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a778:	f2c0 0302 	movt	r3, #2
    a77c:	681b      	ldr	r3, [r3, #0]
    a77e:	60fb      	str	r3, [r7, #12]
	if(displayHeaderFooterLeds != _OFF_ && displayHeaderFooterLeds != _ON_) {
    a780:	687b      	ldr	r3, [r7, #4]
    a782:	2b00      	cmp	r3, #0
    a784:	d004      	beq.n	a790 <initUIContext+0x24>
    a786:	687b      	ldr	r3, [r7, #4]
    a788:	2b01      	cmp	r3, #1
    a78a:	d001      	beq.n	a790 <initUIContext+0x24>
		displayHeaderFooterLeds = _OFF_;
    a78c:	2300      	movs	r3, #0
    a78e:	607b      	str	r3, [r7, #4]
	}
	sSavedStatusHeader=DisplayHeader(displayHeaderFooterLeds);
    a790:	6878      	ldr	r0, [r7, #4]
    a792:	f016 fbc5 	bl	20f20 <DisplayHeader>
    a796:	4602      	mov	r2, r0
    a798:	f240 0360 	movw	r3, #96	; 0x60
    a79c:	f2c0 0303 	movt	r3, #3
    a7a0:	601a      	str	r2, [r3, #0]
	sSavedStatusLeds=DisplayLeds(displayHeaderFooterLeds);
    a7a2:	6878      	ldr	r0, [r7, #4]
    a7a4:	f016 fbea 	bl	20f7c <DisplayLeds>
    a7a8:	4602      	mov	r2, r0
    a7aa:	f240 0364 	movw	r3, #100	; 0x64
    a7ae:	f2c0 0303 	movt	r3, #3
    a7b2:	601a      	str	r2, [r3, #0]
	sSavedStatusFooter=DisplayFooter(displayHeaderFooterLeds);
    a7b4:	6878      	ldr	r0, [r7, #4]
    a7b6:	f016 fb83 	bl	20ec0 <DisplayFooter>
    a7ba:	4602      	mov	r2, r0
    a7bc:	f240 0368 	movw	r3, #104	; 0x68
    a7c0:	f2c0 0303 	movt	r3, #3
    a7c4:	601a      	str	r2, [r3, #0]

	// Open display
	sDisplay = Telium_Fopen("DISPLAY", "w*");
    a7c6:	f642 1078 	movw	r0, #10616	; 0x2978
    a7ca:	f2c0 0002 	movt	r0, #2
    a7ce:	f642 1180 	movw	r1, #10624	; 0x2980
    a7d2:	f2c0 0102 	movt	r1, #2
    a7d6:	f015 f941 	bl	1fa5c <Telium_Fopen>
    a7da:	4602      	mov	r2, r0
    a7dc:	f64f 734c 	movw	r3, #65356	; 0xff4c
    a7e0:	f2c0 0302 	movt	r3, #2
    a7e4:	601a      	str	r2, [r3, #0]
	// Open keyboard
	sKeyboard = Telium_Fopen("KEYBOARD", "r*");
    a7e6:	f642 1084 	movw	r0, #10628	; 0x2984
    a7ea:	f2c0 0002 	movt	r0, #2
    a7ee:	f642 1190 	movw	r1, #10640	; 0x2990
    a7f2:	f2c0 0102 	movt	r1, #2
    a7f6:	f015 f931 	bl	1fa5c <Telium_Fopen>
    a7fa:	4602      	mov	r2, r0
    a7fc:	f64f 7348 	movw	r3, #65352	; 0xff48
    a800:	f2c0 0302 	movt	r3, #2
    a804:	601a      	str	r2, [r3, #0]
		CHECK(hPrn!=NULL, lblKO1);
	}
	lblKO1:;
#endif

	if(GL_GraphicLib_IsTouchPresent(gGoalGraphicLibInstance)) { // Check if it is a touch screen
    a806:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    a80a:	f2c0 0302 	movt	r3, #2
    a80e:	681b      	ldr	r3, [r3, #0]
    a810:	4618      	mov	r0, r3
    a812:	f017 f8ab 	bl	2196c <GL_GraphicLib_IsTouchPresent>
    a816:	4603      	mov	r3, r0
    a818:	2b00      	cmp	r3, #0
    a81a:	d026      	beq.n	a86a <initUIContext+0xfe>
		DisplayFooter(_OFF_);                 // Remove footer otherwise touch does not work
    a81c:	2000      	movs	r0, #0
    a81e:	f016 fb4f 	bl	20ec0 <DisplayFooter>
		hTsc = Telium_Stdperif("TSCREEN", NULL);             // Check "TSCREEN" peripheral opened?
    a822:	f642 1094 	movw	r0, #10644	; 0x2994
    a826:	f2c0 0002 	movt	r0, #2
    a82a:	2100      	movs	r1, #0
    a82c:	f015 fad2 	bl	1fdd4 <Telium_Stdperif>
    a830:	4602      	mov	r2, r0
    a832:	f64f 7340 	movw	r3, #65344	; 0xff40
    a836:	f2c0 0302 	movt	r3, #2
    a83a:	601a      	str	r2, [r3, #0]
		if(hTsc == NULL){
    a83c:	f64f 7340 	movw	r3, #65344	; 0xff40
    a840:	f2c0 0302 	movt	r3, #2
    a844:	681b      	ldr	r3, [r3, #0]
    a846:	2b00      	cmp	r3, #0
    a848:	d10f      	bne.n	a86a <initUIContext+0xfe>
			hTsc = Telium_Fopen("TSCREEN", "r*"); // Open "touch" peripheral
    a84a:	f642 1094 	movw	r0, #10644	; 0x2994
    a84e:	f2c0 0002 	movt	r0, #2
    a852:	f642 1190 	movw	r1, #10640	; 0x2990
    a856:	f2c0 0102 	movt	r1, #2
    a85a:	f015 f8ff 	bl	1fa5c <Telium_Fopen>
    a85e:	4602      	mov	r2, r0
    a860:	f64f 7340 	movw	r3, #65344	; 0xff40
    a864:	f2c0 0302 	movt	r3, #2
    a868:	601a      	str	r2, [r3, #0]
			CHECK(hTsc!=NULL, lblKO);
		}
		lblKO:;
	}

	return;
    a86a:	bf00      	nop
}
    a86c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a870:	f2c0 0302 	movt	r3, #2
    a874:	68fa      	ldr	r2, [r7, #12]
    a876:	681b      	ldr	r3, [r3, #0]
    a878:	429a      	cmp	r2, r3
    a87a:	d001      	beq.n	a880 <initUIContext+0x114>
    a87c:	f7fe fb92 	bl	8fa4 <__stack_chk_fail>
    a880:	f107 0710 	add.w	r7, r7, #16
    a884:	46bd      	mov	sp, r7
    a886:	bd80      	pop	{r7, pc}

0000a888 <releaseUIContext>:

/**
 * Restore display context
 */
void releaseUIContext(void)
{
    a888:	b580      	push	{r7, lr}
    a88a:	b082      	sub	sp, #8
    a88c:	af00      	add	r7, sp, #0
    a88e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a892:	f2c0 0302 	movt	r3, #2
    a896:	681b      	ldr	r3, [r3, #0]
    a898:	607b      	str	r3, [r7, #4]
	// close keyboard
	if (sKeyboard)
    a89a:	f64f 7348 	movw	r3, #65352	; 0xff48
    a89e:	f2c0 0302 	movt	r3, #2
    a8a2:	681b      	ldr	r3, [r3, #0]
    a8a4:	2b00      	cmp	r3, #0
    a8a6:	d00d      	beq.n	a8c4 <releaseUIContext+0x3c>
	{
		Telium_Fclose(sKeyboard);
    a8a8:	f64f 7348 	movw	r3, #65352	; 0xff48
    a8ac:	f2c0 0302 	movt	r3, #2
    a8b0:	681b      	ldr	r3, [r3, #0]
    a8b2:	4618      	mov	r0, r3
    a8b4:	f015 f8a0 	bl	1f9f8 <Telium_Fclose>
		sKeyboard = NULL;
    a8b8:	f64f 7348 	movw	r3, #65352	; 0xff48
    a8bc:	f2c0 0302 	movt	r3, #2
    a8c0:	2200      	movs	r2, #0
    a8c2:	601a      	str	r2, [r3, #0]
	}
	// close display
	if (sDisplay)
    a8c4:	f64f 734c 	movw	r3, #65356	; 0xff4c
    a8c8:	f2c0 0302 	movt	r3, #2
    a8cc:	681b      	ldr	r3, [r3, #0]
    a8ce:	2b00      	cmp	r3, #0
    a8d0:	d00d      	beq.n	a8ee <releaseUIContext+0x66>
	{
		Telium_Fclose(sDisplay);
    a8d2:	f64f 734c 	movw	r3, #65356	; 0xff4c
    a8d6:	f2c0 0302 	movt	r3, #2
    a8da:	681b      	ldr	r3, [r3, #0]
    a8dc:	4618      	mov	r0, r3
    a8de:	f015 f88b 	bl	1f9f8 <Telium_Fclose>
		sDisplay = NULL;
    a8e2:	f64f 734c 	movw	r3, #65356	; 0xff4c
    a8e6:	f2c0 0302 	movt	r3, #2
    a8ea:	2200      	movs	r2, #0
    a8ec:	601a      	str	r2, [r3, #0]
	}

	// Close peripherals
	// *****************
	if(hTsc) {
    a8ee:	f64f 7340 	movw	r3, #65344	; 0xff40
    a8f2:	f2c0 0302 	movt	r3, #2
    a8f6:	681b      	ldr	r3, [r3, #0]
    a8f8:	2b00      	cmp	r3, #0
    a8fa:	d00d      	beq.n	a918 <releaseUIContext+0x90>
		Telium_Fclose(hTsc); // Close "touch" peripheral
    a8fc:	f64f 7340 	movw	r3, #65344	; 0xff40
    a900:	f2c0 0302 	movt	r3, #2
    a904:	681b      	ldr	r3, [r3, #0]
    a906:	4618      	mov	r0, r3
    a908:	f015 f876 	bl	1f9f8 <Telium_Fclose>
		hTsc=NULL;
    a90c:	f64f 7340 	movw	r3, #65344	; 0xff40
    a910:	f2c0 0302 	movt	r3, #2
    a914:	2200      	movs	r2, #0
    a916:	601a      	str	r2, [r3, #0]
	}

	if(hPrn) {
    a918:	f64f 7344 	movw	r3, #65348	; 0xff44
    a91c:	f2c0 0302 	movt	r3, #2
    a920:	681b      	ldr	r3, [r3, #0]
    a922:	2b00      	cmp	r3, #0
    a924:	d00d      	beq.n	a942 <releaseUIContext+0xba>
		Telium_Fclose(hPrn); // Close "printer" peripheral
    a926:	f64f 7344 	movw	r3, #65348	; 0xff44
    a92a:	f2c0 0302 	movt	r3, #2
    a92e:	681b      	ldr	r3, [r3, #0]
    a930:	4618      	mov	r0, r3
    a932:	f015 f861 	bl	1f9f8 <Telium_Fclose>
		hPrn=NULL;
    a936:	f64f 7344 	movw	r3, #65348	; 0xff44
    a93a:	f2c0 0302 	movt	r3, #2
    a93e:	2200      	movs	r2, #0
    a940:	601a      	str	r2, [r3, #0]
	}

	// Restore display context
	DisplayHeader(sSavedStatusHeader);
    a942:	f240 0360 	movw	r3, #96	; 0x60
    a946:	f2c0 0303 	movt	r3, #3
    a94a:	681b      	ldr	r3, [r3, #0]
    a94c:	4618      	mov	r0, r3
    a94e:	f016 fae7 	bl	20f20 <DisplayHeader>
	DisplayLeds(sSavedStatusLeds);
    a952:	f240 0364 	movw	r3, #100	; 0x64
    a956:	f2c0 0303 	movt	r3, #3
    a95a:	681b      	ldr	r3, [r3, #0]
    a95c:	4618      	mov	r0, r3
    a95e:	f016 fb0d 	bl	20f7c <DisplayLeds>
	DisplayFooter(sSavedStatusFooter);
    a962:	f240 0368 	movw	r3, #104	; 0x68
    a966:	f2c0 0303 	movt	r3, #3
    a96a:	681b      	ldr	r3, [r3, #0]
    a96c:	4618      	mov	r0, r3
    a96e:	f016 faa7 	bl	20ec0 <DisplayFooter>

	return;
    a972:	bf00      	nop
}
    a974:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a978:	f2c0 0302 	movt	r3, #2
    a97c:	687a      	ldr	r2, [r7, #4]
    a97e:	681b      	ldr	r3, [r3, #0]
    a980:	429a      	cmp	r2, r3
    a982:	d001      	beq.n	a988 <releaseUIContext+0x100>
    a984:	f7fe fb0e 	bl	8fa4 <__stack_chk_fail>
    a988:	f107 0708 	add.w	r7, r7, #8
    a98c:	46bd      	mov	sp, r7
    a98e:	bd80      	pop	{r7, pc}

0000a990 <ResetPeripherals>:


//****************************************************************************
// To reset standard peripherals
//****************************************************************************
void ResetPeripherals(unsigned int uiEvents) {
    a990:	b580      	push	{r7, lr}
    a992:	b084      	sub	sp, #16
    a994:	af00      	add	r7, sp, #0
    a996:	6078      	str	r0, [r7, #4]
    a998:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    a99c:	f2c0 0302 	movt	r3, #2
    a9a0:	681b      	ldr	r3, [r3, #0]
    a9a2:	60fb      	str	r3, [r7, #12]
	// ***************
	// Empty

	// Reset FIFO buffers
	// ******************
	if(((uiEvents & KEYBOARD) == KEYBOARD) && sKeyboard) // FIFO keyboard
    a9a4:	687b      	ldr	r3, [r7, #4]
    a9a6:	f003 0301 	and.w	r3, r3, #1
    a9aa:	2b00      	cmp	r3, #0
    a9ac:	d00f      	beq.n	a9ce <ResetPeripherals+0x3e>
    a9ae:	f64f 7348 	movw	r3, #65352	; 0xff48
    a9b2:	f2c0 0302 	movt	r3, #2
    a9b6:	681b      	ldr	r3, [r3, #0]
    a9b8:	2b00      	cmp	r3, #0
    a9ba:	d008      	beq.n	a9ce <ResetPeripherals+0x3e>
		Telium_Reset_buf(sKeyboard, _receive_id);
    a9bc:	f64f 7348 	movw	r3, #65352	; 0xff48
    a9c0:	f2c0 0302 	movt	r3, #2
    a9c4:	681b      	ldr	r3, [r3, #0]
    a9c6:	4618      	mov	r0, r3
    a9c8:	2101      	movs	r1, #1
    a9ca:	f015 f941 	bl	1fc50 <Telium_Reset_buf>

	if(((uiEvents & TSCREEN) == TSCREEN) && hTsc)   // FIFO touch screen
    a9ce:	687b      	ldr	r3, [r7, #4]
    a9d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    a9d4:	2b00      	cmp	r3, #0
    a9d6:	d00f      	beq.n	a9f8 <ResetPeripherals+0x68>
    a9d8:	f64f 7340 	movw	r3, #65344	; 0xff40
    a9dc:	f2c0 0302 	movt	r3, #2
    a9e0:	681b      	ldr	r3, [r3, #0]
    a9e2:	2b00      	cmp	r3, #0
    a9e4:	d008      	beq.n	a9f8 <ResetPeripherals+0x68>
		Telium_Reset_buf(hTsc, _receive_id);
    a9e6:	f64f 7340 	movw	r3, #65344	; 0xff40
    a9ea:	f2c0 0302 	movt	r3, #2
    a9ee:	681b      	ldr	r3, [r3, #0]
    a9f0:	4618      	mov	r0, r3
    a9f2:	2101      	movs	r1, #1
    a9f4:	f015 f92c 	bl	1fc50 <Telium_Reset_buf>

	if(((uiEvents & PRINTER) == PRINTER) && hPrn)   // FIFO printer
    a9f8:	687b      	ldr	r3, [r7, #4]
    a9fa:	f003 0302 	and.w	r3, r3, #2
    a9fe:	2b00      	cmp	r3, #0
    aa00:	d00f      	beq.n	aa22 <ResetPeripherals+0x92>
    aa02:	f64f 7344 	movw	r3, #65348	; 0xff44
    aa06:	f2c0 0302 	movt	r3, #2
    aa0a:	681b      	ldr	r3, [r3, #0]
    aa0c:	2b00      	cmp	r3, #0
    aa0e:	d008      	beq.n	aa22 <ResetPeripherals+0x92>
		Telium_Reset_buf(hPrn, _receive_id);
    aa10:	f64f 7344 	movw	r3, #65348	; 0xff44
    aa14:	f2c0 0302 	movt	r3, #2
    aa18:	681b      	ldr	r3, [r3, #0]
    aa1a:	4618      	mov	r0, r3
    aa1c:	2101      	movs	r1, #1
    aa1e:	f015 f917 	bl	1fc50 <Telium_Reset_buf>
}
    aa22:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    aa26:	f2c0 0302 	movt	r3, #2
    aa2a:	68fa      	ldr	r2, [r7, #12]
    aa2c:	681b      	ldr	r3, [r3, #0]
    aa2e:	429a      	cmp	r2, r3
    aa30:	d001      	beq.n	aa36 <ResetPeripherals+0xa6>
    aa32:	f7fe fab7 	bl	8fa4 <__stack_chk_fail>
    aa36:	f107 0710 	add.w	r7, r7, #16
    aa3a:	46bd      	mov	sp, r7
    aa3c:	bd80      	pop	{r7, pc}
    aa3e:	bf00      	nop

0000aa40 <GprsReport>:
//    >=0 : Report done
//     <0 : Report failed
//****************************************************************************

static int GprsReport(T_GL_HWIDGET hScreen, char *pcApn, char *pcUsername)
{
    aa40:	b5b0      	push	{r4, r5, r7, lr}
    aa42:	f5ad 7d52 	sub.w	sp, sp, #840	; 0x348
    aa46:	af04      	add	r7, sp, #16
    aa48:	f107 030c 	add.w	r3, r7, #12
    aa4c:	6018      	str	r0, [r3, #0]
    aa4e:	f107 0308 	add.w	r3, r7, #8
    aa52:	6019      	str	r1, [r3, #0]
    aa54:	1d3b      	adds	r3, r7, #4
    aa56:	601a      	str	r2, [r3, #0]
    aa58:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    aa5c:	f2c0 0302 	movt	r3, #2
    aa60:	681b      	ldr	r3, [r3, #0]
    aa62:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
	// Local variables
	// ***************
	Telium_File_t *hGprs = NULL;
    aa66:	f107 031c 	add.w	r3, r7, #28
    aa6a:	2200      	movs	r2, #0
    aa6c:	601a      	str	r2, [r3, #0]
#ifndef __TELIUM3__
	hGprs = Telium_Stdperif((char*)"DGPRS", NULL);
	//CHECK(hGprs!=NULL, lblKO);
#endif

	iRet = appGet(appGprsRequirePin, tcRequirePin, lenGprsRequirePin+1);
    aa6e:	f107 0418 	add.w	r4, r7, #24
    aa72:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
    aa76:	200d      	movs	r0, #13
    aa78:	4619      	mov	r1, r3
    aa7a:	2202      	movs	r2, #2
    aa7c:	f004 fe44 	bl	f708 <appGet>
    aa80:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    aa82:	f107 0318 	add.w	r3, r7, #24
    aa86:	681b      	ldr	r3, [r3, #0]
    aa88:	2b00      	cmp	r3, #0
    aa8a:	f2c0 8567 	blt.w	b55c <GprsReport+0xb1c>

	iRequirePin=atoi(tcRequirePin); // False => 0 (pin required), True => 1 (pin saved)
    aa8e:	f107 0420 	add.w	r4, r7, #32
    aa92:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
    aa96:	4618      	mov	r0, r3
    aa98:	f7fe e884 	blx	8ba4 <_init+0x44>
    aa9c:	6020      	str	r0, [r4, #0]
	iRet = gprs_SetPinModeFree(hGprs,iRequirePin);
    aa9e:	f107 0320 	add.w	r3, r7, #32
    aaa2:	681b      	ldr	r3, [r3, #0]
    aaa4:	f107 0418 	add.w	r4, r7, #24
    aaa8:	f107 021c 	add.w	r2, r7, #28
    aaac:	6810      	ldr	r0, [r2, #0]
    aaae:	4619      	mov	r1, r3
    aab0:	f014 fc81 	bl	1f3b6 <gprs_SetPinModeFree>
    aab4:	6020      	str	r0, [r4, #0]
	CHECK(iRet==0, lblKO);
    aab6:	f107 0318 	add.w	r3, r7, #24
    aaba:	681b      	ldr	r3, [r3, #0]
    aabc:	2b00      	cmp	r3, #0
    aabe:	f040 854d 	bne.w	b55c <GprsReport+0xb1c>

	iRet = gprs_GetInformation(hGprs,&xInfo,sizeof(xInfo));
    aac2:	f107 0418 	add.w	r4, r7, #24
    aac6:	f107 021c 	add.w	r2, r7, #28
    aaca:	f107 0324 	add.w	r3, r7, #36	; 0x24
    aace:	6810      	ldr	r0, [r2, #0]
    aad0:	4619      	mov	r1, r3
    aad2:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
    aad6:	f014 fc5c 	bl	1f392 <gprs_GetInformation>
    aada:	6020      	str	r0, [r4, #0]
	CHECK(iRet==0, lblKO);
    aadc:	f107 0318 	add.w	r3, r7, #24
    aae0:	681b      	ldr	r3, [r3, #0]
    aae2:	2b00      	cmp	r3, #0
    aae4:	f040 853a 	bne.w	b55c <GprsReport+0xb1c>

	// GPRS start report
	// =================
	switch (xInfo.start_report)
    aae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
    aaec:	681b      	ldr	r3, [r3, #0]
    aaee:	3301      	adds	r3, #1
    aaf0:	2b05      	cmp	r3, #5
    aaf2:	d867      	bhi.n	abc4 <GprsReport+0x184>
    aaf4:	a201      	add	r2, pc, #4	; (adr r2, aafc <GprsReport+0xbc>)
    aaf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    aafa:	bf00      	nop
    aafc:	0000ab15 	.word	0x0000ab15
    ab00:	0000ab35 	.word	0x0000ab35
    ab04:	0000ab4f 	.word	0x0000ab4f
    ab08:	0000ab69 	.word	0x0000ab69
    ab0c:	0000ab89 	.word	0x0000ab89
    ab10:	0000abab 	.word	0x0000abab
	{
	case EGPRS_REPORT_NOT_RECEIVED_YET: strcpy(tcReport, "Rpt: NOT_RECEIVED_YET"); break;
    ab14:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
    ab18:	f642 5350 	movw	r3, #11600	; 0x2d50
    ab1c:	f2c0 0302 	movt	r3, #2
    ab20:	4614      	mov	r4, r2
    ab22:	461d      	mov	r5, r3
    ab24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ab26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ab28:	e895 0003 	ldmia.w	r5, {r0, r1}
    ab2c:	6020      	str	r0, [r4, #0]
    ab2e:	3404      	adds	r4, #4
    ab30:	8021      	strh	r1, [r4, #0]
    ab32:	e058      	b.n	abe6 <GprsReport+0x1a6>
	case EGPRS_REPORT_READY:            strcpy(tcReport, "Rpt: READY");            break;
    ab34:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
    ab38:	f642 5268 	movw	r2, #11624	; 0x2d68
    ab3c:	f2c0 0202 	movt	r2, #2
    ab40:	ca07      	ldmia	r2, {r0, r1, r2}
    ab42:	c303      	stmia	r3!, {r0, r1}
    ab44:	801a      	strh	r2, [r3, #0]
    ab46:	3302      	adds	r3, #2
    ab48:	0c12      	lsrs	r2, r2, #16
    ab4a:	701a      	strb	r2, [r3, #0]
    ab4c:	e04b      	b.n	abe6 <GprsReport+0x1a6>
	case EGPRS_REPORT_WAITING_CODE:     strcpy(tcReport, "Rpt: WAITING_CODE");     break;
    ab4e:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
    ab52:	f642 5374 	movw	r3, #11636	; 0x2d74
    ab56:	f2c0 0302 	movt	r3, #2
    ab5a:	4614      	mov	r4, r2
    ab5c:	461d      	mov	r5, r3
    ab5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ab60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ab62:	682b      	ldr	r3, [r5, #0]
    ab64:	8023      	strh	r3, [r4, #0]
    ab66:	e03e      	b.n	abe6 <GprsReport+0x1a6>
	case EGPRS_REPORT_SIM_NOT_PRESENT:  strcpy(tcReport, "Rpt: SIM_NOT_PRESENT");  break;
    ab68:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
    ab6c:	f642 5388 	movw	r3, #11656	; 0x2d88
    ab70:	f2c0 0302 	movt	r3, #2
    ab74:	4614      	mov	r4, r2
    ab76:	461d      	mov	r5, r3
    ab78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ab7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ab7c:	e895 0003 	ldmia.w	r5, {r0, r1}
    ab80:	6020      	str	r0, [r4, #0]
    ab82:	3404      	adds	r4, #4
    ab84:	7021      	strb	r1, [r4, #0]
    ab86:	e02e      	b.n	abe6 <GprsReport+0x1a6>
	case EGPRS_REPORT_SIMLOCK_STATE:    strcpy(tcReport, "Rpt: SIMLOCK_STATE");    break;
    ab88:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
    ab8c:	f642 53a0 	movw	r3, #11680	; 0x2da0
    ab90:	f2c0 0302 	movt	r3, #2
    ab94:	4614      	mov	r4, r2
    ab96:	461d      	mov	r5, r3
    ab98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ab9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ab9c:	682b      	ldr	r3, [r5, #0]
    ab9e:	461a      	mov	r2, r3
    aba0:	8022      	strh	r2, [r4, #0]
    aba2:	3402      	adds	r4, #2
    aba4:	0c1b      	lsrs	r3, r3, #16
    aba6:	7023      	strb	r3, [r4, #0]
    aba8:	e01d      	b.n	abe6 <GprsReport+0x1a6>
	case EGPRS_REPORT_FATAL_ERROR:      strcpy(tcReport, "Rpt: FATAL_ERROR");      break;
    abaa:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
    abae:	f642 53b4 	movw	r3, #11700	; 0x2db4
    abb2:	f2c0 0302 	movt	r3, #2
    abb6:	4614      	mov	r4, r2
    abb8:	461d      	mov	r5, r3
    abba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    abbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    abbe:	682b      	ldr	r3, [r5, #0]
    abc0:	7023      	strb	r3, [r4, #0]
    abc2:	e010      	b.n	abe6 <GprsReport+0x1a6>
	default:                            strcpy(tcReport, "Rpt: UNKNOWN_ERROR");    break;
    abc4:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
    abc8:	f642 53c8 	movw	r3, #11720	; 0x2dc8
    abcc:	f2c0 0302 	movt	r3, #2
    abd0:	4614      	mov	r4, r2
    abd2:	461d      	mov	r5, r3
    abd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    abd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    abd8:	682b      	ldr	r3, [r5, #0]
    abda:	461a      	mov	r2, r3
    abdc:	8022      	strh	r2, [r4, #0]
    abde:	3402      	adds	r4, #2
    abe0:	0c1b      	lsrs	r3, r3, #16
    abe2:	7023      	strb	r3, [r4, #0]
    abe4:	bf00      	nop
	}

	// GPRS sim status
	// ===============
	switch (xInfo.sim_status)
    abe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
    abea:	685b      	ldr	r3, [r3, #4]
    abec:	3301      	adds	r3, #1
    abee:	2b0a      	cmp	r3, #10
    abf0:	f200 8472 	bhi.w	b4d8 <GprsReport+0xa98>
    abf4:	a201      	add	r2, pc, #4	; (adr r2, abfc <GprsReport+0x1bc>)
    abf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    abfa:	bf00      	nop
    abfc:	0000ac29 	.word	0x0000ac29
    ac00:	0000b4d9 	.word	0x0000b4d9
    ac04:	0000ac63 	.word	0x0000ac63
    ac08:	0000accb 	.word	0x0000accb
    ac0c:	0000ace5 	.word	0x0000ace5
    ac10:	0000aedd 	.word	0x0000aedd
    ac14:	0000aeff 	.word	0x0000aeff
    ac18:	0000b0f5 	.word	0x0000b0f5
    ac1c:	0000b115 	.word	0x0000b115
    ac20:	0000b495 	.word	0x0000b495
    ac24:	0000b4b7 	.word	0x0000b4b7
	{
	case EGPRS_SIM_NOT_RECEIVED_YET:
		strcpy(tcStatus, "Sta: NOT_RECEIVED_YET");
    ac28:	f507 7206 	add.w	r2, r7, #536	; 0x218
    ac2c:	f642 53dc 	movw	r3, #11740	; 0x2ddc
    ac30:	f2c0 0302 	movt	r3, #2
    ac34:	4614      	mov	r4, r2
    ac36:	461d      	mov	r5, r3
    ac38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ac3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ac3c:	e895 0003 	ldmia.w	r5, {r0, r1}
    ac40:	6020      	str	r0, [r4, #0]
    ac42:	3404      	adds	r4, #4
    ac44:	8021      	strh	r1, [r4, #0]

		// *** Start GSM session ***
		iRet = LL_GSM_Start(NULL);
    ac46:	f107 0418 	add.w	r4, r7, #24
    ac4a:	2000      	movs	r0, #0
    ac4c:	f014 fcbb 	bl	1f5c6 <LL_GSM_Start>
    ac50:	6020      	str	r0, [r4, #0]
		CHECK(iRet==LL_ERROR_OK, lblKO);
    ac52:	f107 0318 	add.w	r3, r7, #24
    ac56:	681b      	ldr	r3, [r3, #0]
    ac58:	2b00      	cmp	r3, #0
    ac5a:	f040 847f 	bne.w	b55c <GprsReport+0xb1c>

		break;
    ac5e:	f000 bc4c 	b.w	b4fa <GprsReport+0xaba>
	case EGPRS_SIM_OK:                                         // Sim ready, pin already checked
		strcpy(tcStatus, "Sta: SIM_OK");
    ac62:	f507 7206 	add.w	r2, r7, #536	; 0x218
    ac66:	f642 53f4 	movw	r3, #11764	; 0x2df4
    ac6a:	f2c0 0302 	movt	r3, #2
    ac6e:	4614      	mov	r4, r2
    ac70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    ac74:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		// *** Start GPRS session ***
		iRet = LL_GPRS_Start(NULL, pcApn);
    ac78:	f107 0418 	add.w	r4, r7, #24
    ac7c:	f107 0308 	add.w	r3, r7, #8
    ac80:	2000      	movs	r0, #0
    ac82:	6819      	ldr	r1, [r3, #0]
    ac84:	f014 fc8d 	bl	1f5a2 <LL_GPRS_Start>
    ac88:	6020      	str	r0, [r4, #0]
		CHECK(iRet==LL_ERROR_OK, lblKO);
    ac8a:	f107 0318 	add.w	r3, r7, #24
    ac8e:	681b      	ldr	r3, [r3, #0]
    ac90:	2b00      	cmp	r3, #0
    ac92:	f040 8463 	bne.w	b55c <GprsReport+0xb1c>

		iRet = GoalDspLine(hScreen, 4, "CONNECT. IN PROGRESS", &txGPRS[4], 0, true);
    ac96:	f107 0418 	add.w	r4, r7, #24
    ac9a:	f107 030c 	add.w	r3, r7, #12
    ac9e:	2200      	movs	r2, #0
    aca0:	9200      	str	r2, [sp, #0]
    aca2:	2201      	movs	r2, #1
    aca4:	9201      	str	r2, [sp, #4]
    aca6:	6818      	ldr	r0, [r3, #0]
    aca8:	2104      	movs	r1, #4
    acaa:	f642 6200 	movw	r2, #11776	; 0x2e00
    acae:	f2c0 0202 	movt	r2, #2
    acb2:	4ba1      	ldr	r3, [pc, #644]	; (af38 <GprsReport+0x4f8>)
    acb4:	f002 fcc4 	bl	d640 <GoalDspLine>
    acb8:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    acba:	f107 0318 	add.w	r3, r7, #24
    acbe:	681b      	ldr	r3, [r3, #0]
    acc0:	2b00      	cmp	r3, #0
    acc2:	f2c0 844b 	blt.w	b55c <GprsReport+0xb1c>
		break;
    acc6:	f000 bc18 	b.w	b4fa <GprsReport+0xaba>
	case EGPRS_SIM_KO:                  strcpy(tcStatus, "Sta: SIM_KO"); break;
    acca:	f507 7206 	add.w	r2, r7, #536	; 0x218
    acce:	f642 6318 	movw	r3, #11800	; 0x2e18
    acd2:	f2c0 0302 	movt	r3, #2
    acd6:	4614      	mov	r4, r2
    acd8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    acdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ace0:	f000 bc0b 	b.w	b4fa <GprsReport+0xaba>
	case EGPRS_SIM_PIN_REQUIRED:                              // Pin required, enter it
		strcpy(tcStatus, "Sta: PIN_REQUIRED");
    ace4:	f507 7206 	add.w	r2, r7, #536	; 0x218
    ace8:	f642 6324 	movw	r3, #11812	; 0x2e24
    acec:	f2c0 0302 	movt	r3, #2
    acf0:	4614      	mov	r4, r2
    acf2:	461d      	mov	r5, r3
    acf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    acf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    acf8:	682b      	ldr	r3, [r5, #0]
    acfa:	8023      	strh	r3, [r4, #0]

		// *** Enter Pin code ***
		memset(tcMask, 0, sizeof(tcMask));
    acfc:	f507 730d 	add.w	r3, r7, #564	; 0x234
    ad00:	4618      	mov	r0, r3
    ad02:	2100      	movs	r1, #0
    ad04:	f44f 7280 	mov.w	r2, #256	; 0x100
    ad08:	f7fd ef58 	blx	8bbc <_init+0x5c>
		for (i=0; i<lenGprsPin; i++)
    ad0c:	f107 0314 	add.w	r3, r7, #20
    ad10:	2200      	movs	r2, #0
    ad12:	601a      	str	r2, [r3, #0]
    ad14:	e017      	b.n	ad46 <GprsReport+0x306>
			strcat(tcMask, "/d");                             // Accept only decimal character
    ad16:	f507 730d 	add.w	r3, r7, #564	; 0x234
    ad1a:	4618      	mov	r0, r3
    ad1c:	f7fd efb2 	blx	8c84 <_init+0x124>
    ad20:	4603      	mov	r3, r0
    ad22:	f507 720d 	add.w	r2, r7, #564	; 0x234
    ad26:	18d2      	adds	r2, r2, r3
    ad28:	f642 6338 	movw	r3, #11832	; 0x2e38
    ad2c:	f2c0 0302 	movt	r3, #2
    ad30:	8819      	ldrh	r1, [r3, #0]
    ad32:	789b      	ldrb	r3, [r3, #2]
    ad34:	8011      	strh	r1, [r2, #0]
    ad36:	7093      	strb	r3, [r2, #2]
	case EGPRS_SIM_PIN_REQUIRED:                              // Pin required, enter it
		strcpy(tcStatus, "Sta: PIN_REQUIRED");

		// *** Enter Pin code ***
		memset(tcMask, 0, sizeof(tcMask));
		for (i=0; i<lenGprsPin; i++)
    ad38:	f107 0314 	add.w	r3, r7, #20
    ad3c:	f107 0214 	add.w	r2, r7, #20
    ad40:	6812      	ldr	r2, [r2, #0]
    ad42:	3201      	adds	r2, #1
    ad44:	601a      	str	r2, [r3, #0]
    ad46:	f107 0314 	add.w	r3, r7, #20
    ad4a:	681b      	ldr	r3, [r3, #0]
    ad4c:	2b07      	cmp	r3, #7
    ad4e:	dde2      	ble.n	ad16 <GprsReport+0x2d6>
			strcat(tcMask, "/d");                             // Accept only decimal character
		memset (tcPin, 0, sizeof(tcPin));
    ad50:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    ad54:	4618      	mov	r0, r3
    ad56:	2100      	movs	r1, #0
    ad58:	2209      	movs	r2, #9
    ad5a:	f7fd ef30 	blx	8bbc <_init+0x5c>
		iRet = GL_Dialog_Password(gGoalGraphicLibInstance, "Pin Code", "Enter Pin :", tcMask, tcPin, sizeof(tcPin), GL_TIME_MINUTE);
    ad5e:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    ad62:	f2c0 0302 	movt	r3, #2
    ad66:	681a      	ldr	r2, [r3, #0]
    ad68:	f507 730d 	add.w	r3, r7, #564	; 0x234
    ad6c:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
    ad70:	9100      	str	r1, [sp, #0]
    ad72:	2109      	movs	r1, #9
    ad74:	9101      	str	r1, [sp, #4]
    ad76:	f64e 2160 	movw	r1, #60000	; 0xea60
    ad7a:	9102      	str	r1, [sp, #8]
    ad7c:	4610      	mov	r0, r2
    ad7e:	f642 613c 	movw	r1, #11836	; 0x2e3c
    ad82:	f2c0 0102 	movt	r1, #2
    ad86:	f642 6248 	movw	r2, #11848	; 0x2e48
    ad8a:	f2c0 0202 	movt	r2, #2
    ad8e:	f016 fc8d 	bl	216ac <GL_Dialog_Password>
    ad92:	4602      	mov	r2, r0
    ad94:	f107 0318 	add.w	r3, r7, #24
    ad98:	601a      	str	r2, [r3, #0]
		if ((iRet==GL_KEY_CANCEL) || (iRet==GL_RESULT_INACTIVITY))
    ad9a:	f107 0318 	add.w	r3, r7, #24
    ad9e:	681a      	ldr	r2, [r3, #0]
    ada0:	f64f 0351 	movw	r3, #63569	; 0xf851
    ada4:	429a      	cmp	r2, r3
    ada6:	d006      	beq.n	adb6 <GprsReport+0x376>
    ada8:	f107 0318 	add.w	r3, r7, #24
    adac:	681a      	ldr	r2, [r3, #0]
    adae:	f64f 0380 	movw	r3, #63616	; 0xf880
    adb2:	429a      	cmp	r2, r3
    adb4:	d103      	bne.n	adbe <GprsReport+0x37e>
			iRet=0;                                           // Exit on cancel/timeout
    adb6:	f107 0318 	add.w	r3, r7, #24
    adba:	2200      	movs	r2, #0
    adbc:	601a      	str	r2, [r3, #0]
		CHECK(iRet!=0, lblEnd);
    adbe:	f107 0318 	add.w	r3, r7, #24
    adc2:	681b      	ldr	r3, [r3, #0]
    adc4:	2b00      	cmp	r3, #0
    adc6:	f000 83cf 	beq.w	b568 <GprsReport+0xb28>

		// *** Start GSM session ***
		iRet = LL_GSM_Start(tcPin[0] ? tcPin : NULL);
    adca:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    adce:	781b      	ldrb	r3, [r3, #0]
    add0:	2b00      	cmp	r3, #0
    add2:	d002      	beq.n	adda <GprsReport+0x39a>
    add4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    add8:	e000      	b.n	addc <GprsReport+0x39c>
    adda:	2300      	movs	r3, #0
    addc:	f107 0418 	add.w	r4, r7, #24
    ade0:	4618      	mov	r0, r3
    ade2:	f014 fbf0 	bl	1f5c6 <LL_GSM_Start>
    ade6:	6020      	str	r0, [r4, #0]
		CHECK(iRet==LL_ERROR_OK, lblKO);
    ade8:	f107 0318 	add.w	r3, r7, #24
    adec:	681b      	ldr	r3, [r3, #0]
    adee:	2b00      	cmp	r3, #0
    adf0:	f040 83b4 	bne.w	b55c <GprsReport+0xb1c>

		// *** Start GPRS session ***
		iRet = LL_GPRS_Start(tcPin[0] ? tcPin : NULL, pcApn);
    adf4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    adf8:	781b      	ldrb	r3, [r3, #0]
    adfa:	2b00      	cmp	r3, #0
    adfc:	d002      	beq.n	ae04 <GprsReport+0x3c4>
    adfe:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    ae02:	e000      	b.n	ae06 <GprsReport+0x3c6>
    ae04:	2300      	movs	r3, #0
    ae06:	f107 0418 	add.w	r4, r7, #24
    ae0a:	f107 0208 	add.w	r2, r7, #8
    ae0e:	4618      	mov	r0, r3
    ae10:	6811      	ldr	r1, [r2, #0]
    ae12:	f014 fbc6 	bl	1f5a2 <LL_GPRS_Start>
    ae16:	6020      	str	r0, [r4, #0]
		CHECK(iRet==LL_ERROR_OK, lblKO);
    ae18:	f107 0318 	add.w	r3, r7, #24
    ae1c:	681b      	ldr	r3, [r3, #0]
    ae1e:	2b00      	cmp	r3, #0
    ae20:	f040 839c 	bne.w	b55c <GprsReport+0xb1c>

		iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL, false); // Clear screen
    ae24:	f107 0418 	add.w	r4, r7, #24
    ae28:	f107 030c 	add.w	r3, r7, #12
    ae2c:	6818      	ldr	r0, [r3, #0]
    ae2e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    ae32:	2202      	movs	r2, #2
    ae34:	2300      	movs	r3, #0
    ae36:	f002 fae9 	bl	d40c <GoalClrScreen>
    ae3a:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    ae3c:	f107 0318 	add.w	r3, r7, #24
    ae40:	681b      	ldr	r3, [r3, #0]
    ae42:	2b00      	cmp	r3, #0
    ae44:	f2c0 838a 	blt.w	b55c <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 0, "1-comStart...", &txGPRS[0], 0, false);
    ae48:	f107 0418 	add.w	r4, r7, #24
    ae4c:	f107 030c 	add.w	r3, r7, #12
    ae50:	2200      	movs	r2, #0
    ae52:	9200      	str	r2, [sp, #0]
    ae54:	2200      	movs	r2, #0
    ae56:	9201      	str	r2, [sp, #4]
    ae58:	6818      	ldr	r0, [r3, #0]
    ae5a:	2100      	movs	r1, #0
    ae5c:	f642 6254 	movw	r2, #11860	; 0x2e54
    ae60:	f2c0 0202 	movt	r2, #2
    ae64:	f642 139c 	movw	r3, #10652	; 0x299c
    ae68:	f2c0 0302 	movt	r3, #2
    ae6c:	f002 fbe8 	bl	d640 <GoalDspLine>
    ae70:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    ae72:	f107 0318 	add.w	r3, r7, #24
    ae76:	681b      	ldr	r3, [r3, #0]
    ae78:	2b00      	cmp	r3, #0
    ae7a:	f2c0 836f 	blt.w	b55c <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 1, pcUsername, &txGPRS[1], 0, false); // Show user name
    ae7e:	f107 0418 	add.w	r4, r7, #24
    ae82:	f107 020c 	add.w	r2, r7, #12
    ae86:	1d3b      	adds	r3, r7, #4
    ae88:	2100      	movs	r1, #0
    ae8a:	9100      	str	r1, [sp, #0]
    ae8c:	2100      	movs	r1, #0
    ae8e:	9101      	str	r1, [sp, #4]
    ae90:	6810      	ldr	r0, [r2, #0]
    ae92:	2101      	movs	r1, #1
    ae94:	681a      	ldr	r2, [r3, #0]
    ae96:	4b29      	ldr	r3, [pc, #164]	; (af3c <GprsReport+0x4fc>)
    ae98:	f002 fbd2 	bl	d640 <GoalDspLine>
    ae9c:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    ae9e:	f107 0318 	add.w	r3, r7, #24
    aea2:	681b      	ldr	r3, [r3, #0]
    aea4:	2b00      	cmp	r3, #0
    aea6:	f2c0 8359 	blt.w	b55c <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 4, "CONNECT. IN PROGRESS", &txGPRS[4], 0, true);
    aeaa:	f107 0418 	add.w	r4, r7, #24
    aeae:	f107 030c 	add.w	r3, r7, #12
    aeb2:	2200      	movs	r2, #0
    aeb4:	9200      	str	r2, [sp, #0]
    aeb6:	2201      	movs	r2, #1
    aeb8:	9201      	str	r2, [sp, #4]
    aeba:	6818      	ldr	r0, [r3, #0]
    aebc:	2104      	movs	r1, #4
    aebe:	f642 6200 	movw	r2, #11776	; 0x2e00
    aec2:	f2c0 0202 	movt	r2, #2
    aec6:	4b1c      	ldr	r3, [pc, #112]	; (af38 <GprsReport+0x4f8>)
    aec8:	f002 fbba 	bl	d640 <GoalDspLine>
    aecc:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    aece:	f107 0318 	add.w	r3, r7, #24
    aed2:	681b      	ldr	r3, [r3, #0]
    aed4:	2b00      	cmp	r3, #0
    aed6:	f2c0 8341 	blt.w	b55c <GprsReport+0xb1c>
		break;
    aeda:	e30e      	b.n	b4fa <GprsReport+0xaba>
	case EGPRS_SIM_PIN2_REQUIRED:       strcpy(tcStatus, "Sta: PIN2 REQUIRED"); break;
    aedc:	f507 7206 	add.w	r2, r7, #536	; 0x218
    aee0:	f642 6364 	movw	r3, #11876	; 0x2e64
    aee4:	f2c0 0302 	movt	r3, #2
    aee8:	4614      	mov	r4, r2
    aeea:	461d      	mov	r5, r3
    aeec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    aeee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    aef0:	682b      	ldr	r3, [r5, #0]
    aef2:	461a      	mov	r2, r3
    aef4:	8022      	strh	r2, [r4, #0]
    aef6:	3402      	adds	r4, #2
    aef8:	0c1b      	lsrs	r3, r3, #16
    aefa:	7023      	strb	r3, [r4, #0]
    aefc:	e2fd      	b.n	b4fa <GprsReport+0xaba>
	case EGPRS_SIM_PIN_ERRONEOUS:                             // Wrong Pin, enter it
		strcpy(tcStatus, "Sta: PIN ERRONEOUS   ");
    aefe:	f507 7206 	add.w	r2, r7, #536	; 0x218
    af02:	f642 6378 	movw	r3, #11896	; 0x2e78
    af06:	f2c0 0302 	movt	r3, #2
    af0a:	4614      	mov	r4, r2
    af0c:	461d      	mov	r5, r3
    af0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    af10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    af12:	e895 0003 	ldmia.w	r5, {r0, r1}
    af16:	6020      	str	r0, [r4, #0]
    af18:	3404      	adds	r4, #4
    af1a:	8021      	strh	r1, [r4, #0]

		// *** Enter Pin code ***
		memset(tcMask, 0, sizeof(tcMask));
    af1c:	f507 730d 	add.w	r3, r7, #564	; 0x234
    af20:	4618      	mov	r0, r3
    af22:	2100      	movs	r1, #0
    af24:	f44f 7280 	mov.w	r2, #256	; 0x100
    af28:	f7fd ee48 	blx	8bbc <_init+0x5c>
		for (i=0; i<lenGprsPin; i++)
    af2c:	f107 0314 	add.w	r3, r7, #20
    af30:	2200      	movs	r2, #0
    af32:	601a      	str	r2, [r3, #0]
    af34:	e01c      	b.n	af70 <GprsReport+0x530>
    af36:	bf00      	nop
    af38:	00022c4c 	.word	0x00022c4c
    af3c:	00022a48 	.word	0x00022a48
			strcat(tcMask, "/d");                             // Accept only decimal character
    af40:	f507 730d 	add.w	r3, r7, #564	; 0x234
    af44:	4618      	mov	r0, r3
    af46:	f7fd ee9e 	blx	8c84 <_init+0x124>
    af4a:	4603      	mov	r3, r0
    af4c:	f507 720d 	add.w	r2, r7, #564	; 0x234
    af50:	18d2      	adds	r2, r2, r3
    af52:	f642 6338 	movw	r3, #11832	; 0x2e38
    af56:	f2c0 0302 	movt	r3, #2
    af5a:	8819      	ldrh	r1, [r3, #0]
    af5c:	789b      	ldrb	r3, [r3, #2]
    af5e:	8011      	strh	r1, [r2, #0]
    af60:	7093      	strb	r3, [r2, #2]
	case EGPRS_SIM_PIN_ERRONEOUS:                             // Wrong Pin, enter it
		strcpy(tcStatus, "Sta: PIN ERRONEOUS   ");

		// *** Enter Pin code ***
		memset(tcMask, 0, sizeof(tcMask));
		for (i=0; i<lenGprsPin; i++)
    af62:	f107 0314 	add.w	r3, r7, #20
    af66:	f107 0214 	add.w	r2, r7, #20
    af6a:	6812      	ldr	r2, [r2, #0]
    af6c:	3201      	adds	r2, #1
    af6e:	601a      	str	r2, [r3, #0]
    af70:	f107 0314 	add.w	r3, r7, #20
    af74:	681b      	ldr	r3, [r3, #0]
    af76:	2b07      	cmp	r3, #7
    af78:	dde2      	ble.n	af40 <GprsReport+0x500>
			strcat(tcMask, "/d");                             // Accept only decimal character
		memset (tcPin, 0, sizeof(tcPin));
    af7a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    af7e:	4618      	mov	r0, r3
    af80:	2100      	movs	r1, #0
    af82:	2209      	movs	r2, #9
    af84:	f7fd ee1a 	blx	8bbc <_init+0x5c>
		iRet = GL_Dialog_Password(gGoalGraphicLibInstance, "Pin Code", "Enter Pin :", tcMask, tcPin, sizeof(tcPin), GL_TIME_MINUTE);
    af88:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    af8c:	f2c0 0302 	movt	r3, #2
    af90:	681a      	ldr	r2, [r3, #0]
    af92:	f507 730d 	add.w	r3, r7, #564	; 0x234
    af96:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
    af9a:	9100      	str	r1, [sp, #0]
    af9c:	2109      	movs	r1, #9
    af9e:	9101      	str	r1, [sp, #4]
    afa0:	f64e 2160 	movw	r1, #60000	; 0xea60
    afa4:	9102      	str	r1, [sp, #8]
    afa6:	4610      	mov	r0, r2
    afa8:	f642 613c 	movw	r1, #11836	; 0x2e3c
    afac:	f2c0 0102 	movt	r1, #2
    afb0:	f642 6248 	movw	r2, #11848	; 0x2e48
    afb4:	f2c0 0202 	movt	r2, #2
    afb8:	f016 fb78 	bl	216ac <GL_Dialog_Password>
    afbc:	4602      	mov	r2, r0
    afbe:	f107 0318 	add.w	r3, r7, #24
    afc2:	601a      	str	r2, [r3, #0]
		if ((iRet==GL_KEY_CANCEL) || (iRet==GL_RESULT_INACTIVITY))
    afc4:	f107 0318 	add.w	r3, r7, #24
    afc8:	681a      	ldr	r2, [r3, #0]
    afca:	f64f 0351 	movw	r3, #63569	; 0xf851
    afce:	429a      	cmp	r2, r3
    afd0:	d006      	beq.n	afe0 <GprsReport+0x5a0>
    afd2:	f107 0318 	add.w	r3, r7, #24
    afd6:	681a      	ldr	r2, [r3, #0]
    afd8:	f64f 0380 	movw	r3, #63616	; 0xf880
    afdc:	429a      	cmp	r2, r3
    afde:	d103      	bne.n	afe8 <GprsReport+0x5a8>
			iRet=0;                                           // Exit on cancel/timeout
    afe0:	f107 0318 	add.w	r3, r7, #24
    afe4:	2200      	movs	r2, #0
    afe6:	601a      	str	r2, [r3, #0]
		CHECK(iRet!=0, lblEnd);
    afe8:	f107 0318 	add.w	r3, r7, #24
    afec:	681b      	ldr	r3, [r3, #0]
    afee:	2b00      	cmp	r3, #0
    aff0:	f000 82ba 	beq.w	b568 <GprsReport+0xb28>

		// *** Start GSM session ***
		LL_GSM_Start(tcPin[0] ? tcPin : NULL);
    aff4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    aff8:	781b      	ldrb	r3, [r3, #0]
    affa:	2b00      	cmp	r3, #0
    affc:	d002      	beq.n	b004 <GprsReport+0x5c4>
    affe:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b002:	e000      	b.n	b006 <GprsReport+0x5c6>
    b004:	2300      	movs	r3, #0
    b006:	4618      	mov	r0, r3
    b008:	f014 fadd 	bl	1f5c6 <LL_GSM_Start>

		// *** Start GPRS session ***
		iRet = LL_GPRS_Start(tcPin[0] ? tcPin : NULL, pcApn);
    b00c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b010:	781b      	ldrb	r3, [r3, #0]
    b012:	2b00      	cmp	r3, #0
    b014:	d002      	beq.n	b01c <GprsReport+0x5dc>
    b016:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b01a:	e000      	b.n	b01e <GprsReport+0x5de>
    b01c:	2300      	movs	r3, #0
    b01e:	f107 0418 	add.w	r4, r7, #24
    b022:	f107 0208 	add.w	r2, r7, #8
    b026:	4618      	mov	r0, r3
    b028:	6811      	ldr	r1, [r2, #0]
    b02a:	f014 faba 	bl	1f5a2 <LL_GPRS_Start>
    b02e:	6020      	str	r0, [r4, #0]
		CHECK(iRet==LL_ERROR_OK, lblKO);
    b030:	f107 0318 	add.w	r3, r7, #24
    b034:	681b      	ldr	r3, [r3, #0]
    b036:	2b00      	cmp	r3, #0
    b038:	f040 8290 	bne.w	b55c <GprsReport+0xb1c>

		iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL, false); // Clear screen
    b03c:	f107 0418 	add.w	r4, r7, #24
    b040:	f107 030c 	add.w	r3, r7, #12
    b044:	6818      	ldr	r0, [r3, #0]
    b046:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    b04a:	2202      	movs	r2, #2
    b04c:	2300      	movs	r3, #0
    b04e:	f002 f9dd 	bl	d40c <GoalClrScreen>
    b052:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    b054:	f107 0318 	add.w	r3, r7, #24
    b058:	681b      	ldr	r3, [r3, #0]
    b05a:	2b00      	cmp	r3, #0
    b05c:	f2c0 827e 	blt.w	b55c <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 0, "1-comStart...", &txGPRS[0], 0, false);
    b060:	f107 0418 	add.w	r4, r7, #24
    b064:	f107 030c 	add.w	r3, r7, #12
    b068:	2200      	movs	r2, #0
    b06a:	9200      	str	r2, [sp, #0]
    b06c:	2200      	movs	r2, #0
    b06e:	9201      	str	r2, [sp, #4]
    b070:	6818      	ldr	r0, [r3, #0]
    b072:	2100      	movs	r1, #0
    b074:	f642 6254 	movw	r2, #11860	; 0x2e54
    b078:	f2c0 0202 	movt	r2, #2
    b07c:	f642 139c 	movw	r3, #10652	; 0x299c
    b080:	f2c0 0302 	movt	r3, #2
    b084:	f002 fadc 	bl	d640 <GoalDspLine>
    b088:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    b08a:	f107 0318 	add.w	r3, r7, #24
    b08e:	681b      	ldr	r3, [r3, #0]
    b090:	2b00      	cmp	r3, #0
    b092:	f2c0 8263 	blt.w	b55c <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 1, pcUsername, &txGPRS[1], 0, false); // Show user name
    b096:	f107 0418 	add.w	r4, r7, #24
    b09a:	f107 020c 	add.w	r2, r7, #12
    b09e:	1d3b      	adds	r3, r7, #4
    b0a0:	2100      	movs	r1, #0
    b0a2:	9100      	str	r1, [sp, #0]
    b0a4:	2100      	movs	r1, #0
    b0a6:	9101      	str	r1, [sp, #4]
    b0a8:	6810      	ldr	r0, [r2, #0]
    b0aa:	2101      	movs	r1, #1
    b0ac:	681a      	ldr	r2, [r3, #0]
    b0ae:	4bc2      	ldr	r3, [pc, #776]	; (b3b8 <GprsReport+0x978>)
    b0b0:	f002 fac6 	bl	d640 <GoalDspLine>
    b0b4:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    b0b6:	f107 0318 	add.w	r3, r7, #24
    b0ba:	681b      	ldr	r3, [r3, #0]
    b0bc:	2b00      	cmp	r3, #0
    b0be:	f2c0 824d 	blt.w	b55c <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 4, "CONNECT. IN PROGRESS", &txGPRS[4], 0, true);
    b0c2:	f107 0418 	add.w	r4, r7, #24
    b0c6:	f107 030c 	add.w	r3, r7, #12
    b0ca:	2200      	movs	r2, #0
    b0cc:	9200      	str	r2, [sp, #0]
    b0ce:	2201      	movs	r2, #1
    b0d0:	9201      	str	r2, [sp, #4]
    b0d2:	6818      	ldr	r0, [r3, #0]
    b0d4:	2104      	movs	r1, #4
    b0d6:	f642 6200 	movw	r2, #11776	; 0x2e00
    b0da:	f2c0 0202 	movt	r2, #2
    b0de:	4bb7      	ldr	r3, [pc, #732]	; (b3bc <GprsReport+0x97c>)
    b0e0:	f002 faae 	bl	d640 <GoalDspLine>
    b0e4:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    b0e6:	f107 0318 	add.w	r3, r7, #24
    b0ea:	681b      	ldr	r3, [r3, #0]
    b0ec:	2b00      	cmp	r3, #0
    b0ee:	f2c0 8235 	blt.w	b55c <GprsReport+0xb1c>
		break;
    b0f2:	e202      	b.n	b4fa <GprsReport+0xaba>
	case EGPRS_SIM_NOT_INSERTED:        strcpy(tcStatus, "Sta: SIM_NOT_INSERTED"); break;
    b0f4:	f507 7206 	add.w	r2, r7, #536	; 0x218
    b0f8:	f642 6390 	movw	r3, #11920	; 0x2e90
    b0fc:	f2c0 0302 	movt	r3, #2
    b100:	4614      	mov	r4, r2
    b102:	461d      	mov	r5, r3
    b104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b108:	e895 0003 	ldmia.w	r5, {r0, r1}
    b10c:	6020      	str	r0, [r4, #0]
    b10e:	3404      	adds	r4, #4
    b110:	8021      	strh	r1, [r4, #0]
    b112:	e1f2      	b.n	b4fa <GprsReport+0xaba>
	case EGPRS_SIM_PUK_REQUIRED:                               // Puk required, enter it
		strcpy(tcStatus, "Sta: PUK_REQUIRED    ");
    b114:	f507 7206 	add.w	r2, r7, #536	; 0x218
    b118:	f642 63a8 	movw	r3, #11944	; 0x2ea8
    b11c:	f2c0 0302 	movt	r3, #2
    b120:	4614      	mov	r4, r2
    b122:	461d      	mov	r5, r3
    b124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b128:	e895 0003 	ldmia.w	r5, {r0, r1}
    b12c:	6020      	str	r0, [r4, #0]
    b12e:	3404      	adds	r4, #4
    b130:	8021      	strh	r1, [r4, #0]

		// *** Enter Puk code ***
		memset(tcMask, 0, sizeof(tcMask));
    b132:	f507 730d 	add.w	r3, r7, #564	; 0x234
    b136:	4618      	mov	r0, r3
    b138:	2100      	movs	r1, #0
    b13a:	f44f 7280 	mov.w	r2, #256	; 0x100
    b13e:	f7fd ed3e 	blx	8bbc <_init+0x5c>
		for (i=0; i<lenGprsPuk; i++)
    b142:	f107 0314 	add.w	r3, r7, #20
    b146:	2200      	movs	r2, #0
    b148:	601a      	str	r2, [r3, #0]
    b14a:	e017      	b.n	b17c <GprsReport+0x73c>
			strcat(tcMask, "/d");                              // Accept only decimal character
    b14c:	f507 730d 	add.w	r3, r7, #564	; 0x234
    b150:	4618      	mov	r0, r3
    b152:	f7fd ed98 	blx	8c84 <_init+0x124>
    b156:	4603      	mov	r3, r0
    b158:	f507 720d 	add.w	r2, r7, #564	; 0x234
    b15c:	18d2      	adds	r2, r2, r3
    b15e:	f642 6338 	movw	r3, #11832	; 0x2e38
    b162:	f2c0 0302 	movt	r3, #2
    b166:	8819      	ldrh	r1, [r3, #0]
    b168:	789b      	ldrb	r3, [r3, #2]
    b16a:	8011      	strh	r1, [r2, #0]
    b16c:	7093      	strb	r3, [r2, #2]
	case EGPRS_SIM_PUK_REQUIRED:                               // Puk required, enter it
		strcpy(tcStatus, "Sta: PUK_REQUIRED    ");

		// *** Enter Puk code ***
		memset(tcMask, 0, sizeof(tcMask));
		for (i=0; i<lenGprsPuk; i++)
    b16e:	f107 0314 	add.w	r3, r7, #20
    b172:	f107 0214 	add.w	r2, r7, #20
    b176:	6812      	ldr	r2, [r2, #0]
    b178:	3201      	adds	r2, #1
    b17a:	601a      	str	r2, [r3, #0]
    b17c:	f107 0314 	add.w	r3, r7, #20
    b180:	681b      	ldr	r3, [r3, #0]
    b182:	2b07      	cmp	r3, #7
    b184:	dde2      	ble.n	b14c <GprsReport+0x70c>
			strcat(tcMask, "/d");                              // Accept only decimal character
		memset (tcPuk, 0, sizeof(tcPuk));
    b186:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
    b18a:	4618      	mov	r0, r3
    b18c:	2100      	movs	r1, #0
    b18e:	2209      	movs	r2, #9
    b190:	f7fd ed14 	blx	8bbc <_init+0x5c>
		iRet = GL_Dialog_Password(gGoalGraphicLibInstance, "Puk Code", "Enter Puk :", tcMask, tcPuk, sizeof(tcPuk), GL_TIME_MINUTE);
    b194:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    b198:	f2c0 0302 	movt	r3, #2
    b19c:	681a      	ldr	r2, [r3, #0]
    b19e:	f507 730d 	add.w	r3, r7, #564	; 0x234
    b1a2:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
    b1a6:	9100      	str	r1, [sp, #0]
    b1a8:	2109      	movs	r1, #9
    b1aa:	9101      	str	r1, [sp, #4]
    b1ac:	f64e 2160 	movw	r1, #60000	; 0xea60
    b1b0:	9102      	str	r1, [sp, #8]
    b1b2:	4610      	mov	r0, r2
    b1b4:	f642 61c0 	movw	r1, #11968	; 0x2ec0
    b1b8:	f2c0 0102 	movt	r1, #2
    b1bc:	f642 62cc 	movw	r2, #11980	; 0x2ecc
    b1c0:	f2c0 0202 	movt	r2, #2
    b1c4:	f016 fa72 	bl	216ac <GL_Dialog_Password>
    b1c8:	4602      	mov	r2, r0
    b1ca:	f107 0318 	add.w	r3, r7, #24
    b1ce:	601a      	str	r2, [r3, #0]
		if ((iRet==GL_KEY_CANCEL) || (iRet==GL_RESULT_INACTIVITY))
    b1d0:	f107 0318 	add.w	r3, r7, #24
    b1d4:	681a      	ldr	r2, [r3, #0]
    b1d6:	f64f 0351 	movw	r3, #63569	; 0xf851
    b1da:	429a      	cmp	r2, r3
    b1dc:	d006      	beq.n	b1ec <GprsReport+0x7ac>
    b1de:	f107 0318 	add.w	r3, r7, #24
    b1e2:	681a      	ldr	r2, [r3, #0]
    b1e4:	f64f 0380 	movw	r3, #63616	; 0xf880
    b1e8:	429a      	cmp	r2, r3
    b1ea:	d103      	bne.n	b1f4 <GprsReport+0x7b4>
			iRet=0;                                            // Exit on cancel/timeout
    b1ec:	f107 0318 	add.w	r3, r7, #24
    b1f0:	2200      	movs	r2, #0
    b1f2:	601a      	str	r2, [r3, #0]
		CHECK(iRet!=0, lblEnd);
    b1f4:	f107 0318 	add.w	r3, r7, #24
    b1f8:	681b      	ldr	r3, [r3, #0]
    b1fa:	2b00      	cmp	r3, #0
    b1fc:	f000 81b4 	beq.w	b568 <GprsReport+0xb28>

		// *** Enter new Pin code and confirm ***
		do
		{
			// *** Enter new Pin code ***
			memset(tcMask, 0, sizeof(tcMask));
    b200:	f507 730d 	add.w	r3, r7, #564	; 0x234
    b204:	4618      	mov	r0, r3
    b206:	2100      	movs	r1, #0
    b208:	f44f 7280 	mov.w	r2, #256	; 0x100
    b20c:	f7fd ecd6 	blx	8bbc <_init+0x5c>
			for (i=0; i<lenGprsPin; i++)
    b210:	f107 0314 	add.w	r3, r7, #20
    b214:	2200      	movs	r2, #0
    b216:	601a      	str	r2, [r3, #0]
    b218:	e017      	b.n	b24a <GprsReport+0x80a>
				strcat(tcMask, "/d");                          // Accept only decimal character
    b21a:	f507 730d 	add.w	r3, r7, #564	; 0x234
    b21e:	4618      	mov	r0, r3
    b220:	f7fd ed30 	blx	8c84 <_init+0x124>
    b224:	4603      	mov	r3, r0
    b226:	f507 720d 	add.w	r2, r7, #564	; 0x234
    b22a:	18d2      	adds	r2, r2, r3
    b22c:	f642 6338 	movw	r3, #11832	; 0x2e38
    b230:	f2c0 0302 	movt	r3, #2
    b234:	8819      	ldrh	r1, [r3, #0]
    b236:	789b      	ldrb	r3, [r3, #2]
    b238:	8011      	strh	r1, [r2, #0]
    b23a:	7093      	strb	r3, [r2, #2]
		// *** Enter new Pin code and confirm ***
		do
		{
			// *** Enter new Pin code ***
			memset(tcMask, 0, sizeof(tcMask));
			for (i=0; i<lenGprsPin; i++)
    b23c:	f107 0314 	add.w	r3, r7, #20
    b240:	f107 0214 	add.w	r2, r7, #20
    b244:	6812      	ldr	r2, [r2, #0]
    b246:	3201      	adds	r2, #1
    b248:	601a      	str	r2, [r3, #0]
    b24a:	f107 0314 	add.w	r3, r7, #20
    b24e:	681b      	ldr	r3, [r3, #0]
    b250:	2b07      	cmp	r3, #7
    b252:	dde2      	ble.n	b21a <GprsReport+0x7da>
				strcat(tcMask, "/d");                          // Accept only decimal character
			memset (tcPin1, 0, sizeof(tcPin1));                // Enter new Pin
    b254:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
    b258:	4618      	mov	r0, r3
    b25a:	2100      	movs	r1, #0
    b25c:	2209      	movs	r2, #9
    b25e:	f7fd ecae 	blx	8bbc <_init+0x5c>
			iRet = GL_Dialog_Password(gGoalGraphicLibInstance, "New Pin Code", "Enter New Pin :", tcMask, tcPin1, sizeof(tcPin1), GL_TIME_MINUTE);
    b262:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    b266:	f2c0 0302 	movt	r3, #2
    b26a:	681a      	ldr	r2, [r3, #0]
    b26c:	f507 730d 	add.w	r3, r7, #564	; 0x234
    b270:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
    b274:	9100      	str	r1, [sp, #0]
    b276:	2109      	movs	r1, #9
    b278:	9101      	str	r1, [sp, #4]
    b27a:	f64e 2160 	movw	r1, #60000	; 0xea60
    b27e:	9102      	str	r1, [sp, #8]
    b280:	4610      	mov	r0, r2
    b282:	f642 61d8 	movw	r1, #11992	; 0x2ed8
    b286:	f2c0 0102 	movt	r1, #2
    b28a:	f642 62e8 	movw	r2, #12008	; 0x2ee8
    b28e:	f2c0 0202 	movt	r2, #2
    b292:	f016 fa0b 	bl	216ac <GL_Dialog_Password>
    b296:	4602      	mov	r2, r0
    b298:	f107 0318 	add.w	r3, r7, #24
    b29c:	601a      	str	r2, [r3, #0]
			if ((iRet==GL_KEY_CANCEL) || (iRet==GL_RESULT_INACTIVITY))
    b29e:	f107 0318 	add.w	r3, r7, #24
    b2a2:	681a      	ldr	r2, [r3, #0]
    b2a4:	f64f 0351 	movw	r3, #63569	; 0xf851
    b2a8:	429a      	cmp	r2, r3
    b2aa:	d006      	beq.n	b2ba <GprsReport+0x87a>
    b2ac:	f107 0318 	add.w	r3, r7, #24
    b2b0:	681a      	ldr	r2, [r3, #0]
    b2b2:	f64f 0380 	movw	r3, #63616	; 0xf880
    b2b6:	429a      	cmp	r2, r3
    b2b8:	d103      	bne.n	b2c2 <GprsReport+0x882>
				iRet=0;                                        // Exit on cancel/timeout
    b2ba:	f107 0318 	add.w	r3, r7, #24
    b2be:	2200      	movs	r2, #0
    b2c0:	601a      	str	r2, [r3, #0]
			CHECK(iRet!=0, lblEnd);
    b2c2:	f107 0318 	add.w	r3, r7, #24
    b2c6:	681b      	ldr	r3, [r3, #0]
    b2c8:	2b00      	cmp	r3, #0
    b2ca:	f000 814d 	beq.w	b568 <GprsReport+0xb28>
			// *** Confirm new Pin code ***
			memset (tcPin, 0, sizeof(tcPin));                  // Confirm new Pin
    b2ce:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b2d2:	4618      	mov	r0, r3
    b2d4:	2100      	movs	r1, #0
    b2d6:	2209      	movs	r2, #9
    b2d8:	f7fd ec70 	blx	8bbc <_init+0x5c>
			iRet = GL_Dialog_Password(gGoalGraphicLibInstance, "New Pin Code", "Confirm New Pin :", tcMask, tcPin, sizeof(tcPin), GL_TIME_MINUTE);
    b2dc:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    b2e0:	f2c0 0302 	movt	r3, #2
    b2e4:	681a      	ldr	r2, [r3, #0]
    b2e6:	f507 730d 	add.w	r3, r7, #564	; 0x234
    b2ea:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
    b2ee:	9100      	str	r1, [sp, #0]
    b2f0:	2109      	movs	r1, #9
    b2f2:	9101      	str	r1, [sp, #4]
    b2f4:	f64e 2160 	movw	r1, #60000	; 0xea60
    b2f8:	9102      	str	r1, [sp, #8]
    b2fa:	4610      	mov	r0, r2
    b2fc:	f642 61d8 	movw	r1, #11992	; 0x2ed8
    b300:	f2c0 0102 	movt	r1, #2
    b304:	f642 62f8 	movw	r2, #12024	; 0x2ef8
    b308:	f2c0 0202 	movt	r2, #2
    b30c:	f016 f9ce 	bl	216ac <GL_Dialog_Password>
    b310:	4602      	mov	r2, r0
    b312:	f107 0318 	add.w	r3, r7, #24
    b316:	601a      	str	r2, [r3, #0]
			if ((iRet==GL_KEY_CANCEL) || (iRet==GL_RESULT_INACTIVITY))
    b318:	f107 0318 	add.w	r3, r7, #24
    b31c:	681a      	ldr	r2, [r3, #0]
    b31e:	f64f 0351 	movw	r3, #63569	; 0xf851
    b322:	429a      	cmp	r2, r3
    b324:	d006      	beq.n	b334 <GprsReport+0x8f4>
    b326:	f107 0318 	add.w	r3, r7, #24
    b32a:	681a      	ldr	r2, [r3, #0]
    b32c:	f64f 0380 	movw	r3, #63616	; 0xf880
    b330:	429a      	cmp	r2, r3
    b332:	d103      	bne.n	b33c <GprsReport+0x8fc>
				iRet=0;                                        // Exit on cancel/timeout
    b334:	f107 0318 	add.w	r3, r7, #24
    b338:	2200      	movs	r2, #0
    b33a:	601a      	str	r2, [r3, #0]
			CHECK(iRet!=0, lblEnd);
    b33c:	f107 0318 	add.w	r3, r7, #24
    b340:	681b      	ldr	r3, [r3, #0]
    b342:	2b00      	cmp	r3, #0
    b344:	f000 8110 	beq.w	b568 <GprsReport+0xb28>
		} while (memcmp(tcPin1, tcPin, lenGprsPin) != 0);
    b348:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
    b34c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b350:	4610      	mov	r0, r2
    b352:	4619      	mov	r1, r3
    b354:	2208      	movs	r2, #8
    b356:	f7fd ecce 	blx	8cf4 <_init+0x194>
    b35a:	4603      	mov	r3, r0
    b35c:	2b00      	cmp	r3, #0
    b35e:	f47f af4f 	bne.w	b200 <GprsReport+0x7c0>

		iRet = gprs_SubmitPuk(hGprs, tcPuk, tcPin);
    b362:	f107 0418 	add.w	r4, r7, #24
    b366:	f107 011c 	add.w	r1, r7, #28
    b36a:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
    b36e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b372:	6808      	ldr	r0, [r1, #0]
    b374:	4611      	mov	r1, r2
    b376:	461a      	mov	r2, r3
    b378:	f014 f82f 	bl	1f3da <gprs_SubmitPuk>
    b37c:	6020      	str	r0, [r4, #0]
		if (iRet == 0){                                         // Puk code OK
    b37e:	f107 0318 	add.w	r3, r7, #24
    b382:	681b      	ldr	r3, [r3, #0]
    b384:	2b00      	cmp	r3, #0
    b386:	d12b      	bne.n	b3e0 <GprsReport+0x9a0>
			Telium_Ttestall(0, 1*100);                         // Wait a little bit before restarting a session
    b388:	2000      	movs	r0, #0
    b38a:	2164      	movs	r1, #100	; 0x64
    b38c:	f014 fd54 	bl	1fe38 <Telium_Ttestall>
			// Wait a little bit before restarting a session

			// *** Start GSM session ***
			LL_GSM_Start(tcPin[0] ? tcPin : NULL);
    b390:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b394:	781b      	ldrb	r3, [r3, #0]
    b396:	2b00      	cmp	r3, #0
    b398:	d002      	beq.n	b3a0 <GprsReport+0x960>
    b39a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b39e:	e000      	b.n	b3a2 <GprsReport+0x962>
    b3a0:	2300      	movs	r3, #0
    b3a2:	4618      	mov	r0, r3
    b3a4:	f014 f90f 	bl	1f5c6 <LL_GSM_Start>

			// *** Start GPRS session ***
			iRet = LL_GPRS_Start(tcPin[0] ? tcPin : NULL, pcApn);
    b3a8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b3ac:	781b      	ldrb	r3, [r3, #0]
    b3ae:	2b00      	cmp	r3, #0
    b3b0:	d006      	beq.n	b3c0 <GprsReport+0x980>
    b3b2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    b3b6:	e004      	b.n	b3c2 <GprsReport+0x982>
    b3b8:	00022a48 	.word	0x00022a48
    b3bc:	00022c4c 	.word	0x00022c4c
    b3c0:	2300      	movs	r3, #0
    b3c2:	f107 0418 	add.w	r4, r7, #24
    b3c6:	f107 0208 	add.w	r2, r7, #8
    b3ca:	4618      	mov	r0, r3
    b3cc:	6811      	ldr	r1, [r2, #0]
    b3ce:	f014 f8e8 	bl	1f5a2 <LL_GPRS_Start>
    b3d2:	6020      	str	r0, [r4, #0]
			CHECK(iRet==LL_ERROR_OK, lblKO);
    b3d4:	f107 0318 	add.w	r3, r7, #24
    b3d8:	681b      	ldr	r3, [r3, #0]
    b3da:	2b00      	cmp	r3, #0
    b3dc:	f040 80be 	bne.w	b55c <GprsReport+0xb1c>
		}

		iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL, false); // Clear screen
    b3e0:	f107 0418 	add.w	r4, r7, #24
    b3e4:	f107 030c 	add.w	r3, r7, #12
    b3e8:	6818      	ldr	r0, [r3, #0]
    b3ea:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    b3ee:	2202      	movs	r2, #2
    b3f0:	2300      	movs	r3, #0
    b3f2:	f002 f80b 	bl	d40c <GoalClrScreen>
    b3f6:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    b3f8:	f107 0318 	add.w	r3, r7, #24
    b3fc:	681b      	ldr	r3, [r3, #0]
    b3fe:	2b00      	cmp	r3, #0
    b400:	f2c0 80ac 	blt.w	b55c <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 0, "1-comStart...", &txGPRS[0], 0, false);
    b404:	f107 0418 	add.w	r4, r7, #24
    b408:	f107 030c 	add.w	r3, r7, #12
    b40c:	2200      	movs	r2, #0
    b40e:	9200      	str	r2, [sp, #0]
    b410:	2200      	movs	r2, #0
    b412:	9201      	str	r2, [sp, #4]
    b414:	6818      	ldr	r0, [r3, #0]
    b416:	2100      	movs	r1, #0
    b418:	f642 6254 	movw	r2, #11860	; 0x2e54
    b41c:	f2c0 0202 	movt	r2, #2
    b420:	f642 139c 	movw	r3, #10652	; 0x299c
    b424:	f2c0 0302 	movt	r3, #2
    b428:	f002 f90a 	bl	d640 <GoalDspLine>
    b42c:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    b42e:	f107 0318 	add.w	r3, r7, #24
    b432:	681b      	ldr	r3, [r3, #0]
    b434:	2b00      	cmp	r3, #0
    b436:	f2c0 8091 	blt.w	b55c <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 1, pcUsername, &txGPRS[1], 0, false); // Show user name
    b43a:	f107 0418 	add.w	r4, r7, #24
    b43e:	f107 020c 	add.w	r2, r7, #12
    b442:	1d3b      	adds	r3, r7, #4
    b444:	2100      	movs	r1, #0
    b446:	9100      	str	r1, [sp, #0]
    b448:	2100      	movs	r1, #0
    b44a:	9101      	str	r1, [sp, #4]
    b44c:	6810      	ldr	r0, [r2, #0]
    b44e:	2101      	movs	r1, #1
    b450:	681a      	ldr	r2, [r3, #0]
    b452:	4b4f      	ldr	r3, [pc, #316]	; (b590 <GprsReport+0xb50>)
    b454:	f002 f8f4 	bl	d640 <GoalDspLine>
    b458:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    b45a:	f107 0318 	add.w	r3, r7, #24
    b45e:	681b      	ldr	r3, [r3, #0]
    b460:	2b00      	cmp	r3, #0
    b462:	db7b      	blt.n	b55c <GprsReport+0xb1c>
		iRet = GoalDspLine(hScreen, 4, "CONNECT. IN PROGRESS", &txGPRS[4], 0, true);
    b464:	f107 0418 	add.w	r4, r7, #24
    b468:	f107 030c 	add.w	r3, r7, #12
    b46c:	2200      	movs	r2, #0
    b46e:	9200      	str	r2, [sp, #0]
    b470:	2201      	movs	r2, #1
    b472:	9201      	str	r2, [sp, #4]
    b474:	6818      	ldr	r0, [r3, #0]
    b476:	2104      	movs	r1, #4
    b478:	f642 6200 	movw	r2, #11776	; 0x2e00
    b47c:	f2c0 0202 	movt	r2, #2
    b480:	4b44      	ldr	r3, [pc, #272]	; (b594 <GprsReport+0xb54>)
    b482:	f002 f8dd 	bl	d640 <GoalDspLine>
    b486:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblKO);
    b488:	f107 0318 	add.w	r3, r7, #24
    b48c:	681b      	ldr	r3, [r3, #0]
    b48e:	2b00      	cmp	r3, #0
    b490:	db64      	blt.n	b55c <GprsReport+0xb1c>
		break;
    b492:	e032      	b.n	b4fa <GprsReport+0xaba>
	case EGPRS_SIM_PUK2_REQUIRED: 		strcpy(tcStatus, "Sta: PUK2_REQUIRED"); break;
    b494:	f507 7206 	add.w	r2, r7, #536	; 0x218
    b498:	f642 730c 	movw	r3, #12044	; 0x2f0c
    b49c:	f2c0 0302 	movt	r3, #2
    b4a0:	4614      	mov	r4, r2
    b4a2:	461d      	mov	r5, r3
    b4a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b4a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b4a8:	682b      	ldr	r3, [r5, #0]
    b4aa:	461a      	mov	r2, r3
    b4ac:	8022      	strh	r2, [r4, #0]
    b4ae:	3402      	adds	r4, #2
    b4b0:	0c1b      	lsrs	r3, r3, #16
    b4b2:	7023      	strb	r3, [r4, #0]
    b4b4:	e021      	b.n	b4fa <GprsReport+0xaba>
	case EGPRS_SIM_PIN_PRESENTED:       strcpy(tcStatus, "Sta: PIN_PRESENTED"); break;
    b4b6:	f507 7206 	add.w	r2, r7, #536	; 0x218
    b4ba:	f642 7320 	movw	r3, #12064	; 0x2f20
    b4be:	f2c0 0302 	movt	r3, #2
    b4c2:	4614      	mov	r4, r2
    b4c4:	461d      	mov	r5, r3
    b4c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b4c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b4ca:	682b      	ldr	r3, [r5, #0]
    b4cc:	461a      	mov	r2, r3
    b4ce:	8022      	strh	r2, [r4, #0]
    b4d0:	3402      	adds	r4, #2
    b4d2:	0c1b      	lsrs	r3, r3, #16
    b4d4:	7023      	strb	r3, [r4, #0]
    b4d6:	e010      	b.n	b4fa <GprsReport+0xaba>
	default:                            strcpy(tcStatus, "Sta: UNKNOWN_ERROR"); break;
    b4d8:	f507 7206 	add.w	r2, r7, #536	; 0x218
    b4dc:	f642 7334 	movw	r3, #12084	; 0x2f34
    b4e0:	f2c0 0302 	movt	r3, #2
    b4e4:	4614      	mov	r4, r2
    b4e6:	461d      	mov	r5, r3
    b4e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b4ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b4ec:	682b      	ldr	r3, [r5, #0]
    b4ee:	461a      	mov	r2, r3
    b4f0:	8022      	strh	r2, [r4, #0]
    b4f2:	3402      	adds	r4, #2
    b4f4:	0c1b      	lsrs	r3, r3, #16
    b4f6:	7023      	strb	r3, [r4, #0]
    b4f8:	bf00      	nop
	}

	iRet = GoalDspLine(hScreen, 2, tcReport, &txGPRS[2], 0, true); // Show start report
    b4fa:	f107 0418 	add.w	r4, r7, #24
    b4fe:	f107 020c 	add.w	r2, r7, #12
    b502:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
    b506:	2100      	movs	r1, #0
    b508:	9100      	str	r1, [sp, #0]
    b50a:	2101      	movs	r1, #1
    b50c:	9101      	str	r1, [sp, #4]
    b50e:	6810      	ldr	r0, [r2, #0]
    b510:	2102      	movs	r1, #2
    b512:	461a      	mov	r2, r3
    b514:	4b20      	ldr	r3, [pc, #128]	; (b598 <GprsReport+0xb58>)
    b516:	f002 f893 	bl	d640 <GoalDspLine>
    b51a:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    b51c:	f107 0318 	add.w	r3, r7, #24
    b520:	681b      	ldr	r3, [r3, #0]
    b522:	2b00      	cmp	r3, #0
    b524:	db1a      	blt.n	b55c <GprsReport+0xb1c>
	iRet = GoalDspLine(hScreen, 3, tcStatus, &txGPRS[3], 0, true); // Show sim status
    b526:	f107 0418 	add.w	r4, r7, #24
    b52a:	f107 020c 	add.w	r2, r7, #12
    b52e:	f507 7306 	add.w	r3, r7, #536	; 0x218
    b532:	2100      	movs	r1, #0
    b534:	9100      	str	r1, [sp, #0]
    b536:	2101      	movs	r1, #1
    b538:	9101      	str	r1, [sp, #4]
    b53a:	6810      	ldr	r0, [r2, #0]
    b53c:	2103      	movs	r1, #3
    b53e:	461a      	mov	r2, r3
    b540:	4b16      	ldr	r3, [pc, #88]	; (b59c <GprsReport+0xb5c>)
    b542:	f002 f87d 	bl	d640 <GoalDspLine>
    b546:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    b548:	f107 0318 	add.w	r3, r7, #24
    b54c:	681b      	ldr	r3, [r3, #0]
    b54e:	2b00      	cmp	r3, #0
    b550:	db04      	blt.n	b55c <GprsReport+0xb1c>

	iRet=1;
    b552:	f107 0318 	add.w	r3, r7, #24
    b556:	2201      	movs	r2, #1
    b558:	601a      	str	r2, [r3, #0]
	goto lblEnd;
    b55a:	e005      	b.n	b568 <GprsReport+0xb28>

	// Errors treatment
	// ****************
	lblKO:
	iRet=-1;
    b55c:	f107 0318 	add.w	r3, r7, #24
    b560:	f04f 32ff 	mov.w	r2, #4294967295
    b564:	601a      	str	r2, [r3, #0]
	goto lblEnd;
    b566:	bf00      	nop
	lblEnd:
	return iRet;
    b568:	f107 0318 	add.w	r3, r7, #24
    b56c:	681b      	ldr	r3, [r3, #0]
}
    b56e:	4618      	mov	r0, r3
    b570:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    b574:	f2c0 0302 	movt	r3, #2
    b578:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
    b57c:	681b      	ldr	r3, [r3, #0]
    b57e:	429a      	cmp	r2, r3
    b580:	d001      	beq.n	b586 <GprsReport+0xb46>
    b582:	f7fd fd0f 	bl	8fa4 <__stack_chk_fail>
    b586:	f507 774e 	add.w	r7, r7, #824	; 0x338
    b58a:	46bd      	mov	sp, r7
    b58c:	bdb0      	pop	{r4, r5, r7, pc}
    b58e:	bf00      	nop
    b590:	00022a48 	.word	0x00022a48
    b594:	00022c4c 	.word	0x00022c4c
    b598:	00022af4 	.word	0x00022af4
    b59c:	00022ba0 	.word	0x00022ba0

0000b5a0 <StartGPRS>:
//    >=0 : Attachment done
//     <0 : Attachment failed
//****************************************************************************

static int StartGPRS(T_GL_HWIDGET hScreen, const char *pcInit)
{
    b5a0:	b580      	push	{r7, lr}
    b5a2:	b0a2      	sub	sp, #136	; 0x88
    b5a4:	af02      	add	r7, sp, #8
    b5a6:	6078      	str	r0, [r7, #4]
    b5a8:	6039      	str	r1, [r7, #0]
    b5aa:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    b5ae:	f2c0 0302 	movt	r3, #2
    b5b2:	681b      	ldr	r3, [r3, #0]
    b5b4:	67fb      	str	r3, [r7, #124]	; 0x7c
	// ***************
	char tcApn[lenGprsApn+1];       // Apn
	char tcUsername[lenGprsUser+1]; // Login
	char tcPassword[lenGprsPass+1]; // Password
	int iKey;
	word usTimeOut=0;
    b5b6:	2300      	movs	r3, #0
    b5b8:	81fb      	strh	r3, [r7, #14]
	bool bExit=TRUE;
    b5ba:	2301      	movs	r3, #1
    b5bc:	737b      	strb	r3, [r7, #13]
	int iStatus, iRet;

	// Network GPRS parameters
	// ************************
	CHECK(pcInit!=NULL, lblKOConfigure);                            // Configuration error
    b5be:	683b      	ldr	r3, [r7, #0]
    b5c0:	2b00      	cmp	r3, #0
    b5c2:	f000 8120 	beq.w	b806 <StartGPRS+0x266>
	memset(tcApn, 0, sizeof(tcApn));
    b5c6:	f107 031c 	add.w	r3, r7, #28
    b5ca:	4618      	mov	r0, r3
    b5cc:	2100      	movs	r1, #0
    b5ce:	221f      	movs	r2, #31
    b5d0:	f7fd eaf4 	blx	8bbc <_init+0x5c>
	pcInit = parseStr('|', tcApn, pcInit, sizeof(tcApn));           // Extract apn
    b5d4:	f107 031c 	add.w	r3, r7, #28
    b5d8:	207c      	movs	r0, #124	; 0x7c
    b5da:	4619      	mov	r1, r3
    b5dc:	683a      	ldr	r2, [r7, #0]
    b5de:	231f      	movs	r3, #31
    b5e0:	f005 fdc8 	bl	11174 <parseStr>
    b5e4:	6038      	str	r0, [r7, #0]
	CHECK(pcInit!=NULL, lblKOConfigure);
    b5e6:	683b      	ldr	r3, [r7, #0]
    b5e8:	2b00      	cmp	r3, #0
    b5ea:	f000 810c 	beq.w	b806 <StartGPRS+0x266>

	memset(tcUsername, 0, sizeof(tcUsername));
    b5ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    b5f2:	4618      	mov	r0, r3
    b5f4:	2100      	movs	r1, #0
    b5f6:	221f      	movs	r2, #31
    b5f8:	f7fd eae0 	blx	8bbc <_init+0x5c>
	pcInit = parseStr('|', tcUsername, pcInit, sizeof(tcUsername)); // Extract username
    b5fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    b600:	207c      	movs	r0, #124	; 0x7c
    b602:	4619      	mov	r1, r3
    b604:	683a      	ldr	r2, [r7, #0]
    b606:	231f      	movs	r3, #31
    b608:	f005 fdb4 	bl	11174 <parseStr>
    b60c:	6038      	str	r0, [r7, #0]
	CHECK(pcInit!=NULL, lblKOConfigure);
    b60e:	683b      	ldr	r3, [r7, #0]
    b610:	2b00      	cmp	r3, #0
    b612:	f000 80f8 	beq.w	b806 <StartGPRS+0x266>

	memset(tcPassword, 0, sizeof(tcPassword));
    b616:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    b61a:	4618      	mov	r0, r3
    b61c:	2100      	movs	r1, #0
    b61e:	221f      	movs	r2, #31
    b620:	f7fd eacc 	blx	8bbc <_init+0x5c>
	pcInit = parseStr('|', tcPassword, pcInit, sizeof(tcPassword)); // Extract password
    b624:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    b628:	207c      	movs	r0, #124	; 0x7c
    b62a:	4619      	mov	r1, r3
    b62c:	683a      	ldr	r2, [r7, #0]
    b62e:	231f      	movs	r3, #31
    b630:	f005 fda0 	bl	11174 <parseStr>
    b634:	6038      	str	r0, [r7, #0]
	CHECK(pcInit!=NULL, lblKOConfigure);
    b636:	683b      	ldr	r3, [r7, #0]
    b638:	2b00      	cmp	r3, #0
    b63a:	f000 80e4 	beq.w	b806 <StartGPRS+0x266>

	// Connect the GPRS network
	// ************************
	ResetPeripherals(KEYBOARD | TSCREEN);           // Reset peripherals FIFO
    b63e:	2001      	movs	r0, #1
    b640:	f6c0 0000 	movt	r0, #2048	; 0x800
    b644:	f7ff f9a4 	bl	a990 <ResetPeripherals>
	do
	{
		iRet = GprsReport(hScreen, tcApn, tcUsername);
    b648:	f107 021c 	add.w	r2, r7, #28
    b64c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    b650:	6878      	ldr	r0, [r7, #4]
    b652:	4611      	mov	r1, r2
    b654:	461a      	mov	r2, r3
    b656:	f7ff f9f3 	bl	aa40 <GprsReport>
    b65a:	61b8      	str	r0, [r7, #24]
		CHECK(iRet>=0, lblKOConfigure);
    b65c:	69bb      	ldr	r3, [r7, #24]
    b65e:	2b00      	cmp	r3, #0
    b660:	f2c0 80d1 	blt.w	b806 <StartGPRS+0x266>
		CHECK(iRet!=0, lblEnd);                     // Exit on cancel/timeout
    b664:	69bb      	ldr	r3, [r7, #24]
    b666:	2b00      	cmp	r3, #0
    b668:	f000 80d2 	beq.w	b810 <StartGPRS+0x270>

		iRet = LL_GPRS_Connect(tcApn, tcUsername, tcPassword, 10*100);
    b66c:	f107 011c 	add.w	r1, r7, #28
    b670:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    b674:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    b678:	4608      	mov	r0, r1
    b67a:	4611      	mov	r1, r2
    b67c:	461a      	mov	r2, r3
    b67e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b682:	f013 ff7c 	bl	1f57e <LL_GPRS_Connect>
    b686:	61b8      	str	r0, [r7, #24]
		switch (iRet)
    b688:	69bb      	ldr	r3, [r7, #24]
    b68a:	f46f 727d 	mvn.w	r2, #1012	; 0x3f4
    b68e:	4293      	cmp	r3, r2
    b690:	d02c      	beq.n	b6ec <StartGPRS+0x14c>
    b692:	f46f 727d 	mvn.w	r2, #1012	; 0x3f4
    b696:	4293      	cmp	r3, r2
    b698:	dc06      	bgt.n	b6a8 <StartGPRS+0x108>
    b69a:	f64f 4206 	movw	r2, #64518	; 0xfc06
    b69e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
    b6a2:	4293      	cmp	r3, r2
    b6a4:	d022      	beq.n	b6ec <StartGPRS+0x14c>
    b6a6:	e024      	b.n	b6f2 <StartGPRS+0x152>
    b6a8:	f64f 4211 	movw	r2, #64529	; 0xfc11
    b6ac:	f6cf 72ff 	movt	r2, #65535	; 0xffff
    b6b0:	4293      	cmp	r3, r2
    b6b2:	d001      	beq.n	b6b8 <StartGPRS+0x118>
    b6b4:	2b00      	cmp	r3, #0
    b6b6:	d11c      	bne.n	b6f2 <StartGPRS+0x152>
		//case LL_ERROR_NETWORK_NOT_READY:
		//	bExit = FALSE;
		//	break;
		case LL_ERROR_ALREADY_CONNECTED:
		case LL_ERROR_OK:
			iRet = GoalDspLine(hScreen, 4, "GPRS CONNECTED!!!", &txGPRS[4], 0, true);
    b6b8:	2300      	movs	r3, #0
    b6ba:	9300      	str	r3, [sp, #0]
    b6bc:	2301      	movs	r3, #1
    b6be:	9301      	str	r3, [sp, #4]
    b6c0:	6878      	ldr	r0, [r7, #4]
    b6c2:	2104      	movs	r1, #4
    b6c4:	f642 7248 	movw	r2, #12104	; 0x2f48
    b6c8:	f2c0 0202 	movt	r2, #2
    b6cc:	4b58      	ldr	r3, [pc, #352]	; (b830 <StartGPRS+0x290>)
    b6ce:	f001 ffb7 	bl	d640 <GoalDspLine>
    b6d2:	61b8      	str	r0, [r7, #24]
			CHECK(iRet>=0, lblKOConfigure);        // Show Gprs connected
    b6d4:	69bb      	ldr	r3, [r7, #24]
    b6d6:	2b00      	cmp	r3, #0
    b6d8:	f2c0 8095 	blt.w	b806 <StartGPRS+0x266>
			buzzer(10);
    b6dc:	200a      	movs	r0, #10
    b6de:	f014 fbd9 	bl	1fe94 <buzzer>
			iRet = 1;
    b6e2:	2301      	movs	r3, #1
    b6e4:	61bb      	str	r3, [r7, #24]
			bExit=TRUE;
    b6e6:	2301      	movs	r3, #1
    b6e8:	737b      	strb	r3, [r7, #13]
			break;
    b6ea:	e056      	b.n	b79a <StartGPRS+0x1fa>
		case LL_ERROR_NETWORK_NOT_SUPPORTED:
		case LL_ERROR_SERVICE_CALL_FAILURE:
			bExit = TRUE;
    b6ec:	2301      	movs	r3, #1
    b6ee:	737b      	strb	r3, [r7, #13]
			break;
    b6f0:	e053      	b.n	b79a <StartGPRS+0x1fa>
		default:                                   // LL_ERROR_NETWORK_NOT_READY or LL_ERROR_NETWORK_ERROR
			iRet = LL_Network_GetStatus(LL_PHYSICAL_V_GPRS, &iStatus);
    b6f2:	f107 0310 	add.w	r3, r7, #16
    b6f6:	2029      	movs	r0, #41	; 0x29
    b6f8:	4619      	mov	r1, r3
    b6fa:	f013 ff76 	bl	1f5ea <LL_Network_GetStatus>
    b6fe:	61b8      	str	r0, [r7, #24]
			switch (iStatus)                       // Check network status
    b700:	693b      	ldr	r3, [r7, #16]
    b702:	f240 5203 	movw	r2, #1283	; 0x503
    b706:	f2c0 2200 	movt	r2, #512	; 0x200
    b70a:	4293      	cmp	r3, r2
    b70c:	dc18      	bgt.n	b740 <StartGPRS+0x1a0>
    b70e:	f240 5201 	movw	r2, #1281	; 0x501
    b712:	f2c0 2200 	movt	r2, #512	; 0x200
    b716:	4293      	cmp	r3, r2
    b718:	da1f      	bge.n	b75a <StartGPRS+0x1ba>
    b71a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    b71e:	f2c0 1200 	movt	r2, #256	; 0x100
    b722:	4293      	cmp	r3, r2
    b724:	d019      	beq.n	b75a <StartGPRS+0x1ba>
    b726:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    b72a:	f2c0 1200 	movt	r2, #256	; 0x100
    b72e:	4293      	cmp	r3, r2
    b730:	db2f      	blt.n	b792 <StartGPRS+0x1f2>
    b732:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
    b736:	f2a3 5302 	subw	r3, r3, #1282	; 0x502
    b73a:	2b02      	cmp	r3, #2
    b73c:	d829      	bhi.n	b792 <StartGPRS+0x1f2>
    b73e:	e00c      	b.n	b75a <StartGPRS+0x1ba>
    b740:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    b744:	f2c0 2200 	movt	r2, #512	; 0x200
    b748:	4293      	cmp	r3, r2
    b74a:	d006      	beq.n	b75a <StartGPRS+0x1ba>
    b74c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    b750:	f2c0 3200 	movt	r2, #768	; 0x300
    b754:	4293      	cmp	r3, r2
    b756:	d003      	beq.n	b760 <StartGPRS+0x1c0>
    b758:	e01b      	b.n	b792 <StartGPRS+0x1f2>
			case LL_STATUS_GPRS_CONNECTING:        // Connection to GPRS Network in progress
			case LL_STATUS_GPRS_AVAILABLE:         // GPRS Network is available
			case LL_STATUS_GPRS_CONNECTING_PPP:    // PPP connection is in progress with the GPRS provider
			case LL_STATUS_GPRS_DISCONNECTED:      // Disconnection to GPRS Network, let's retry a connection
			case 0x2000600:                        // Wait until network ready
				bExit = FALSE;
    b75a:	2300      	movs	r3, #0
    b75c:	737b      	strb	r3, [r7, #13]
				break;
    b75e:	e01b      	b.n	b798 <StartGPRS+0x1f8>
			case LL_STATUS_GPRS_CONNECTED:
				iRet = GoalDspLine(hScreen, 4, "GPRS CONNECTED!!!", &txGPRS[4], 0, true);
    b760:	2300      	movs	r3, #0
    b762:	9300      	str	r3, [sp, #0]
    b764:	2301      	movs	r3, #1
    b766:	9301      	str	r3, [sp, #4]
    b768:	6878      	ldr	r0, [r7, #4]
    b76a:	2104      	movs	r1, #4
    b76c:	f642 7248 	movw	r2, #12104	; 0x2f48
    b770:	f2c0 0202 	movt	r2, #2
    b774:	4b2e      	ldr	r3, [pc, #184]	; (b830 <StartGPRS+0x290>)
    b776:	f001 ff63 	bl	d640 <GoalDspLine>
    b77a:	61b8      	str	r0, [r7, #24]
				CHECK(iRet>=0, lblKOConfigure);    // Show Gprs connected
    b77c:	69bb      	ldr	r3, [r7, #24]
    b77e:	2b00      	cmp	r3, #0
    b780:	db41      	blt.n	b806 <StartGPRS+0x266>
				buzzer(10);
    b782:	200a      	movs	r0, #10
    b784:	f014 fb86 	bl	1fe94 <buzzer>
				iRet = 1;
    b788:	2301      	movs	r3, #1
    b78a:	61bb      	str	r3, [r7, #24]
				bExit=TRUE;
    b78c:	2301      	movs	r3, #1
    b78e:	737b      	strb	r3, [r7, #13]
				break;
    b790:	e002      	b.n	b798 <StartGPRS+0x1f8>
			case LL_STATUS_GPRS_ERROR_NO_SIM:      // No SIM card is inserted into the terminal
			case LL_STATUS_GPRS_ERROR_PPP:         // Error occurred during the PPP link establishment.
			case LL_STATUS_GPRS_ERROR_UNKNOWN:     // Error status unknown
			default:
				bExit = TRUE;
    b792:	2301      	movs	r3, #1
    b794:	737b      	strb	r3, [r7, #13]
				break;
    b796:	bf00      	nop
			}
			break;
    b798:	bf00      	nop
		}

		if (!bExit)                                // Keyboard and timeout management
    b79a:	7b7b      	ldrb	r3, [r7, #13]
    b79c:	f083 0301 	eor.w	r3, r3, #1
    b7a0:	b2db      	uxtb	r3, r3
    b7a2:	2b00      	cmp	r3, #0
    b7a4:	d011      	beq.n	b7ca <StartGPRS+0x22a>
		{
			iKey = GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 1*1000, false); // Get key pressed/touched (shortcut)
    b7a6:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    b7aa:	f2c0 0302 	movt	r3, #2
    b7ae:	681b      	ldr	r3, [r3, #0]
    b7b0:	2200      	movs	r2, #0
    b7b2:	9200      	str	r2, [sp, #0]
    b7b4:	6878      	ldr	r0, [r7, #4]
    b7b6:	4619      	mov	r1, r3
    b7b8:	2201      	movs	r2, #1
    b7ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b7be:	f002 fa75 	bl	dcac <GoalGetKey>
    b7c2:	6178      	str	r0, [r7, #20]
			usTimeOut += 1*100;                    // Increment timeout
    b7c4:	89fb      	ldrh	r3, [r7, #14]
    b7c6:	3364      	adds	r3, #100	; 0x64
    b7c8:	81fb      	strh	r3, [r7, #14]
		}
	} while (!bExit && (usTimeOut < GPRS_TIMEOUT) && (iKey!=GL_KEY_CANCEL));
    b7ca:	7b7b      	ldrb	r3, [r7, #13]
    b7cc:	f083 0301 	eor.w	r3, r3, #1
    b7d0:	b2db      	uxtb	r3, r3
    b7d2:	2b00      	cmp	r3, #0
    b7d4:	d00a      	beq.n	b7ec <StartGPRS+0x24c>
    b7d6:	89fa      	ldrh	r2, [r7, #14]
    b7d8:	f241 736f 	movw	r3, #5999	; 0x176f
    b7dc:	429a      	cmp	r2, r3
    b7de:	d805      	bhi.n	b7ec <StartGPRS+0x24c>
    b7e0:	697a      	ldr	r2, [r7, #20]
    b7e2:	f64f 0351 	movw	r3, #63569	; 0xf851
    b7e6:	429a      	cmp	r2, r3
    b7e8:	f47f af2e 	bne.w	b648 <StartGPRS+0xa8>

	if ((usTimeOut==GPRS_TIMEOUT) || (iKey==GL_KEY_CANCEL))         // Exit on timeout/cancel
    b7ec:	89fa      	ldrh	r2, [r7, #14]
    b7ee:	f241 7370 	movw	r3, #6000	; 0x1770
    b7f2:	429a      	cmp	r2, r3
    b7f4:	d004      	beq.n	b800 <StartGPRS+0x260>
    b7f6:	697a      	ldr	r2, [r7, #20]
    b7f8:	f64f 0351 	movw	r3, #63569	; 0xf851
    b7fc:	429a      	cmp	r2, r3
    b7fe:	d106      	bne.n	b80e <StartGPRS+0x26e>
		iRet=0;
    b800:	2300      	movs	r3, #0
    b802:	61bb      	str	r3, [r7, #24]

	goto lblEnd;
    b804:	e003      	b.n	b80e <StartGPRS+0x26e>

	// Errors treatment
	// ****************
	lblKOConfigure:
	iRet=LL_ERROR_INVALID_PARAMETER;
    b806:	f46f 737b 	mvn.w	r3, #1004	; 0x3ec
    b80a:	61bb      	str	r3, [r7, #24]
	goto lblEnd;
    b80c:	e000      	b.n	b810 <StartGPRS+0x270>
	} while (!bExit && (usTimeOut < GPRS_TIMEOUT) && (iKey!=GL_KEY_CANCEL));

	if ((usTimeOut==GPRS_TIMEOUT) || (iKey==GL_KEY_CANCEL))         // Exit on timeout/cancel
		iRet=0;

	goto lblEnd;
    b80e:	bf00      	nop
	// ****************
	lblKOConfigure:
	iRet=LL_ERROR_INVALID_PARAMETER;
	goto lblEnd;
	lblEnd:
	return iRet;
    b810:	69bb      	ldr	r3, [r7, #24]
}
    b812:	4618      	mov	r0, r3
    b814:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    b818:	f2c0 0302 	movt	r3, #2
    b81c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    b81e:	681b      	ldr	r3, [r3, #0]
    b820:	429a      	cmp	r2, r3
    b822:	d001      	beq.n	b828 <StartGPRS+0x288>
    b824:	f7fd fbbe 	bl	8fa4 <__stack_chk_fail>
    b828:	f107 0780 	add.w	r7, r7, #128	; 0x80
    b82c:	46bd      	mov	sp, r7
    b82e:	bd80      	pop	{r7, pc}
    b830:	00022c4c 	.word	0x00022c4c

0000b834 <OpenGPRS>:
//           Ex: "192.168.1.3|2000
//  This function has no return value
//****************************************************************************

static LL_HANDLE OpenGPRS(const char *pcServer)
{
    b834:	b590      	push	{r4, r7, lr}
    b836:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    b83a:	af00      	add	r7, sp, #0
    b83c:	1d3b      	adds	r3, r7, #4
    b83e:	6018      	str	r0, [r3, #0]
    b840:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    b844:	f2c0 0302 	movt	r3, #2
    b848:	681b      	ldr	r3, [r3, #0]
    b84a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
	// Local variables
	// ***************
	// Tlv tree nodes
	// ==============
	TLV_TREE_NODE piConfig=NULL;
    b84e:	f107 0310 	add.w	r3, r7, #16
    b852:	2200      	movs	r2, #0
    b854:	601a      	str	r2, [r3, #0]
	TLV_TREE_NODE piPhysicalConfig=NULL;
    b856:	f107 0314 	add.w	r3, r7, #20
    b85a:	2200      	movs	r2, #0
    b85c:	601a      	str	r2, [r3, #0]
	TLV_TREE_NODE piTransportConfig=NULL;
    b85e:	f107 0318 	add.w	r3, r7, #24
    b862:	2200      	movs	r2, #0
    b864:	601a      	str	r2, [r3, #0]
	char tcAddr[lenGprsIpRemote+1];
	char tcPort[lenGprsPort+1];
	doubleword uiTimeout, uiRemotePort;
	LL_HANDLE hSession = NULL;
    b866:	f107 030c 	add.w	r3, r7, #12
    b86a:	2200      	movs	r2, #0
    b86c:	601a      	str	r2, [r3, #0]
	int iRet;

	// Create the LinkLayer configuration parameters tree
	// **************************************************
	CHECK(pcServer!=NULL, lblKOConfigure);                              // Configuration failed
    b86e:	1d3b      	adds	r3, r7, #4
    b870:	681b      	ldr	r3, [r3, #0]
    b872:	2b00      	cmp	r3, #0
    b874:	f000 80af 	beq.w	b9d6 <OpenGPRS+0x1a2>

	// Create parameters tree
	// ======================
	piConfig = TlvTree_New(LL_TAG_LINK_LAYER_CONFIG);                   // LinkLayer parameters Root tag of the configuration tree
    b878:	f107 0410 	add.w	r4, r7, #16
    b87c:	f249 5003 	movw	r0, #38147	; 0x9503
    b880:	f2c0 00bf 	movt	r0, #191	; 0xbf
    b884:	f013 ff71 	bl	1f76a <TlvTree_New>
    b888:	6020      	str	r0, [r4, #0]
	CHECK(piConfig!=NULL, lblKOConfigure);
    b88a:	f107 0310 	add.w	r3, r7, #16
    b88e:	681b      	ldr	r3, [r3, #0]
    b890:	2b00      	cmp	r3, #0
    b892:	f000 80a0 	beq.w	b9d6 <OpenGPRS+0x1a2>

	// Physical layer parameters
	// =========================
	piPhysicalConfig = TlvTree_AddChild(piConfig,
    b896:	f107 0414 	add.w	r4, r7, #20
    b89a:	f107 0310 	add.w	r3, r7, #16
    b89e:	6818      	ldr	r0, [r3, #0]
    b8a0:	f648 0110 	movw	r1, #34832	; 0x8810
    b8a4:	f2c0 019f 	movt	r1, #159	; 0x9f
    b8a8:	2200      	movs	r2, #0
    b8aa:	2300      	movs	r3, #0
    b8ac:	f013 ff27 	bl	1f6fe <TlvTree_AddChild>
    b8b0:	6020      	str	r0, [r4, #0]
			LL_TAG_PHYSICAL_LAYER_CONFIG,   // TAG Physical layer parameters
			NULL,                           // VALUE (Null)
			0);                             // LENGTH 0
	CHECK(piPhysicalConfig!=NULL, lblKOConfigure);
    b8b2:	f107 0314 	add.w	r3, r7, #20
    b8b6:	681b      	ldr	r3, [r3, #0]
    b8b8:	2b00      	cmp	r3, #0
    b8ba:	f000 808c 	beq.w	b9d6 <OpenGPRS+0x1a2>

	// GPRS
	// ----
	TlvTree_AddChildInteger(piPhysicalConfig,
    b8be:	f107 0314 	add.w	r3, r7, #20
    b8c2:	6818      	ldr	r0, [r3, #0]
    b8c4:	2101      	movs	r1, #1
    b8c6:	2229      	movs	r2, #41	; 0x29
    b8c8:	2301      	movs	r3, #1
    b8ca:	f013 ff2a 	bl	1f722 <TlvTree_AddChildInteger>
			LL_PHYSICAL_V_GPRS,                         // VALUE
			LL_PHYSICAL_L_LINK);                        // LENGTH 1

	// Transport and network layer parameters
	// ======================================
	piTransportConfig = TlvTree_AddChild(piConfig,
    b8ce:	f107 0418 	add.w	r4, r7, #24
    b8d2:	f107 0310 	add.w	r3, r7, #16
    b8d6:	6818      	ldr	r0, [r3, #0]
    b8d8:	f648 0111 	movw	r1, #34833	; 0x8811
    b8dc:	f2c0 019f 	movt	r1, #159	; 0x9f
    b8e0:	2200      	movs	r2, #0
    b8e2:	2300      	movs	r3, #0
    b8e4:	f013 ff0b 	bl	1f6fe <TlvTree_AddChild>
    b8e8:	6020      	str	r0, [r4, #0]
			LL_TAG_TRANSPORT_LAYER_CONFIG, // TAG Transport layer parameters
			NULL,                          // VALUE (Null)
			0);                            // LENGTH 0
	CHECK(piTransportConfig!=NULL, lblKOConfigure);
    b8ea:	f107 0318 	add.w	r3, r7, #24
    b8ee:	681b      	ldr	r3, [r3, #0]
    b8f0:	2b00      	cmp	r3, #0
    b8f2:	d070      	beq.n	b9d6 <OpenGPRS+0x1a2>

	memset(tcAddr, 0, sizeof(tcAddr));
    b8f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
    b8f8:	4618      	mov	r0, r3
    b8fa:	2100      	movs	r1, #0
    b8fc:	f240 2201 	movw	r2, #513	; 0x201
    b900:	f7fd e95c 	blx	8bbc <_init+0x5c>
	pcServer = parseStr('|', tcAddr, pcServer, sizeof(tcAddr));         // Parse Tcp/Ip address
    b904:	1d3c      	adds	r4, r7, #4
    b906:	f107 0230 	add.w	r2, r7, #48	; 0x30
    b90a:	1d3b      	adds	r3, r7, #4
    b90c:	207c      	movs	r0, #124	; 0x7c
    b90e:	4611      	mov	r1, r2
    b910:	681a      	ldr	r2, [r3, #0]
    b912:	f240 2301 	movw	r3, #513	; 0x201
    b916:	f005 fc2d 	bl	11174 <parseStr>
    b91a:	6020      	str	r0, [r4, #0]
	CHECK(pcServer!=NULL, lblKOConfigure);
    b91c:	1d3b      	adds	r3, r7, #4
    b91e:	681b      	ldr	r3, [r3, #0]
    b920:	2b00      	cmp	r3, #0
    b922:	d058      	beq.n	b9d6 <OpenGPRS+0x1a2>

	memset(tcPort, 0, sizeof(tcPort));
    b924:	f107 0328 	add.w	r3, r7, #40	; 0x28
    b928:	4618      	mov	r0, r3
    b92a:	2100      	movs	r1, #0
    b92c:	2206      	movs	r2, #6
    b92e:	f7fd e946 	blx	8bbc <_init+0x5c>
	pcServer = parseStr('|', tcPort, pcServer, sizeof(tcPort));         // Parse Tcp/Ip port
    b932:	1d3c      	adds	r4, r7, #4
    b934:	f107 0228 	add.w	r2, r7, #40	; 0x28
    b938:	1d3b      	adds	r3, r7, #4
    b93a:	207c      	movs	r0, #124	; 0x7c
    b93c:	4611      	mov	r1, r2
    b93e:	681a      	ldr	r2, [r3, #0]
    b940:	2306      	movs	r3, #6
    b942:	f005 fc17 	bl	11174 <parseStr>
    b946:	6020      	str	r0, [r4, #0]
	CHECK(pcServer!=NULL, lblKOConfigure);
    b948:	1d3b      	adds	r3, r7, #4
    b94a:	681b      	ldr	r3, [r3, #0]
    b94c:	2b00      	cmp	r3, #0
    b94e:	d042      	beq.n	b9d6 <OpenGPRS+0x1a2>

	// TCP/IP
	// ------
	TlvTree_AddChildInteger(piTransportConfig,
    b950:	f107 0318 	add.w	r3, r7, #24
    b954:	6818      	ldr	r0, [r3, #0]
    b956:	2101      	movs	r1, #1
    b958:	2201      	movs	r2, #1
    b95a:	2301      	movs	r3, #1
    b95c:	f013 fee1 	bl	1f722 <TlvTree_AddChildInteger>
			LL_TRANSPORT_V_TCPIP,                       // VALUE
			LL_TRANSPORT_L_PROTOCOL);                   // LENGTH 1 byte

	// Host Name
	// ---------
	TlvTree_AddChildString(piTransportConfig,
    b960:	f107 0218 	add.w	r2, r7, #24
			LL_TCPIP_T_HOST_NAME,                        // TAG
			tcAddr);                                     // VALUE
    b964:	f107 0330 	add.w	r3, r7, #48	; 0x30
			LL_TRANSPORT_V_TCPIP,                       // VALUE
			LL_TRANSPORT_L_PROTOCOL);                   // LENGTH 1 byte

	// Host Name
	// ---------
	TlvTree_AddChildString(piTransportConfig,
    b968:	6810      	ldr	r0, [r2, #0]
    b96a:	2110      	movs	r1, #16
    b96c:	461a      	mov	r2, r3
    b96e:	f013 feea 	bl	1f746 <TlvTree_AddChildString>
			tcAddr);                                     // VALUE
	// LENGTH (strlen addr)

	// Port
	// ----
	uiRemotePort = atoi (tcPort);
    b972:	f107 0328 	add.w	r3, r7, #40	; 0x28
    b976:	4618      	mov	r0, r3
    b978:	f7fd e914 	blx	8ba4 <_init+0x44>
    b97c:	4602      	mov	r2, r0
    b97e:	f107 031c 	add.w	r3, r7, #28
    b982:	601a      	str	r2, [r3, #0]
	TlvTree_AddChildInteger(piTransportConfig,
    b984:	f107 0218 	add.w	r2, r7, #24
    b988:	f107 031c 	add.w	r3, r7, #28
    b98c:	6810      	ldr	r0, [r2, #0]
    b98e:	2111      	movs	r1, #17
    b990:	681a      	ldr	r2, [r3, #0]
    b992:	2304      	movs	r3, #4
    b994:	f013 fec5 	bl	1f722 <TlvTree_AddChildInteger>



	// Connection timeout
	// ------------------
	uiTimeout = TCPIP_TIMEOUT;
    b998:	f107 0320 	add.w	r3, r7, #32
    b99c:	f640 32b8 	movw	r2, #3000	; 0xbb8
    b9a0:	601a      	str	r2, [r3, #0]
	TlvTree_AddChildInteger(piTransportConfig,
    b9a2:	f107 0218 	add.w	r2, r7, #24
    b9a6:	f107 0320 	add.w	r3, r7, #32
    b9aa:	6810      	ldr	r0, [r2, #0]
    b9ac:	2112      	movs	r1, #18
    b9ae:	681a      	ldr	r2, [r3, #0]
    b9b0:	2304      	movs	r3, #4
    b9b2:	f013 feb6 	bl	1f722 <TlvTree_AddChildInteger>
			uiTimeout,                                  // Value (Integer)
			LL_TCPIP_L_CONNECT_TIMEOUT);                // LENGTH 4 bytes

	// Link Layer configuration
	// ************************
	iRet = LL_Configure(&hSession, piConfig);                           // Initialize the handle of the session
    b9b6:	f107 0424 	add.w	r4, r7, #36	; 0x24
    b9ba:	f107 020c 	add.w	r2, r7, #12
    b9be:	f107 0310 	add.w	r3, r7, #16
    b9c2:	4610      	mov	r0, r2
    b9c4:	6819      	ldr	r1, [r3, #0]
    b9c6:	f013 fd92 	bl	1f4ee <LL_Configure>
    b9ca:	6020      	str	r0, [r4, #0]
	CHECK(iRet==LL_ERROR_OK, lblKOConfigure);
    b9cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b9d0:	681b      	ldr	r3, [r3, #0]
    b9d2:	2b00      	cmp	r3, #0
    b9d4:	d004      	beq.n	b9e0 <OpenGPRS+0x1ac>
	goto lblEnd;

	// Errors treatment
	// ****************
	lblKOConfigure:                                                         // Configuration failed
	hSession=NULL;
    b9d6:	f107 030c 	add.w	r3, r7, #12
    b9da:	2200      	movs	r2, #0
    b9dc:	601a      	str	r2, [r3, #0]
	goto lblEnd;
    b9de:	e000      	b.n	b9e2 <OpenGPRS+0x1ae>
	// Link Layer configuration
	// ************************
	iRet = LL_Configure(&hSession, piConfig);                           // Initialize the handle of the session
	CHECK(iRet==LL_ERROR_OK, lblKOConfigure);

	goto lblEnd;
    b9e0:	bf00      	nop
	// ****************
	lblKOConfigure:                                                         // Configuration failed
	hSession=NULL;
	goto lblEnd;
	lblEnd:
	if (piConfig)
    b9e2:	f107 0310 	add.w	r3, r7, #16
    b9e6:	681b      	ldr	r3, [r3, #0]
    b9e8:	2b00      	cmp	r3, #0
    b9ea:	d004      	beq.n	b9f6 <OpenGPRS+0x1c2>
		TlvTree_Release(piConfig);                                      // Release tree to avoid memory leak
    b9ec:	f107 0310 	add.w	r3, r7, #16
    b9f0:	6818      	ldr	r0, [r3, #0]
    b9f2:	f013 fecc 	bl	1f78e <TlvTree_Release>
	return hSession;                                                    // Return the handle of the session
    b9f6:	f107 030c 	add.w	r3, r7, #12
    b9fa:	681b      	ldr	r3, [r3, #0]
}
    b9fc:	4618      	mov	r0, r3
    b9fe:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    ba02:	f2c0 0302 	movt	r3, #2
    ba06:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
    ba0a:	681b      	ldr	r3, [r3, #0]
    ba0c:	429a      	cmp	r2, r3
    ba0e:	d001      	beq.n	ba14 <OpenGPRS+0x1e0>
    ba10:	f7fd fac8 	bl	8fa4 <__stack_chk_fail>
    ba14:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    ba18:	46bd      	mov	sp, r7
    ba1a:	bd90      	pop	{r4, r7, pc}

0000ba1c <ConnectGPRS>:
//    >=0 : Connect done
//     <0 : Connect failed
//****************************************************************************

static int ConnectGPRS(LL_HANDLE hSession)
{
    ba1c:	b580      	push	{r7, lr}
    ba1e:	b084      	sub	sp, #16
    ba20:	af00      	add	r7, sp, #0
    ba22:	6078      	str	r0, [r7, #4]
    ba24:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    ba28:	f2c0 0302 	movt	r3, #2
    ba2c:	681b      	ldr	r3, [r3, #0]
    ba2e:	60fb      	str	r3, [r7, #12]
	// ***************
	int iRet;

	// Link Layer connection
	// *********************
	iRet = LL_Connect(hSession);
    ba30:	6878      	ldr	r0, [r7, #4]
    ba32:	f013 fd6e 	bl	1f512 <LL_Connect>
    ba36:	60b8      	str	r0, [r7, #8]

	return iRet;
    ba38:	68bb      	ldr	r3, [r7, #8]
}
    ba3a:	4618      	mov	r0, r3
    ba3c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    ba40:	f2c0 0302 	movt	r3, #2
    ba44:	68fa      	ldr	r2, [r7, #12]
    ba46:	681b      	ldr	r3, [r3, #0]
    ba48:	429a      	cmp	r2, r3
    ba4a:	d001      	beq.n	ba50 <ConnectGPRS+0x34>
    ba4c:	f7fd faaa 	bl	8fa4 <__stack_chk_fail>
    ba50:	f107 0710 	add.w	r7, r7, #16
    ba54:	46bd      	mov	sp, r7
    ba56:	bd80      	pop	{r7, pc}

0000ba58 <SendGPRS>:
//    >=0 : Number of bytes sent
//     <0 : Transmission failed
//****************************************************************************

static int SendGPRS(LL_HANDLE hSession, const char *pcMsg, word usLen)
{
    ba58:	b580      	push	{r7, lr}
    ba5a:	b086      	sub	sp, #24
    ba5c:	af00      	add	r7, sp, #0
    ba5e:	60f8      	str	r0, [r7, #12]
    ba60:	60b9      	str	r1, [r7, #8]
    ba62:	4613      	mov	r3, r2
    ba64:	80fb      	strh	r3, [r7, #6]
    ba66:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    ba6a:	f2c0 0302 	movt	r3, #2
    ba6e:	681b      	ldr	r3, [r3, #0]
    ba70:	617b      	str	r3, [r7, #20]
	// ***************
	int iRet;

	// Send data
	// *********
	iRet = LL_Send(hSession, usLen, (byte*)pcMsg, LL_INFINITE);
    ba72:	88fb      	ldrh	r3, [r7, #6]
    ba74:	68f8      	ldr	r0, [r7, #12]
    ba76:	4619      	mov	r1, r3
    ba78:	68ba      	ldr	r2, [r7, #8]
    ba7a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    ba7e:	f013 fdd8 	bl	1f632 <LL_Send>
    ba82:	6138      	str	r0, [r7, #16]
	if(iRet != usLen)
    ba84:	88fa      	ldrh	r2, [r7, #6]
    ba86:	693b      	ldr	r3, [r7, #16]
    ba88:	429a      	cmp	r2, r3
    ba8a:	d003      	beq.n	ba94 <SendGPRS+0x3c>
		iRet = LL_GetLastError(hSession);
    ba8c:	68f8      	ldr	r0, [r7, #12]
    ba8e:	f013 fd64 	bl	1f55a <LL_GetLastError>
    ba92:	6138      	str	r0, [r7, #16]

	return iRet;
    ba94:	693b      	ldr	r3, [r7, #16]
}
    ba96:	4618      	mov	r0, r3
    ba98:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    ba9c:	f2c0 0302 	movt	r3, #2
    baa0:	697a      	ldr	r2, [r7, #20]
    baa2:	681b      	ldr	r3, [r3, #0]
    baa4:	429a      	cmp	r2, r3
    baa6:	d001      	beq.n	baac <SendGPRS+0x54>
    baa8:	f7fd fa7c 	bl	8fa4 <__stack_chk_fail>
    baac:	f107 0718 	add.w	r7, r7, #24
    bab0:	46bd      	mov	sp, r7
    bab2:	bd80      	pop	{r7, pc}

0000bab4 <ReceiveGPRS>:
//    >=0 : Number of bytes received
//     <0 : Reception failed
//****************************************************************************

static int ReceiveGPRS(LL_HANDLE hSession, T_GL_HWIDGET hScreen, char *pcMsg, word usLen, byte ucDly)
{
    bab4:	b580      	push	{r7, lr}
    bab6:	b08e      	sub	sp, #56	; 0x38
    bab8:	af02      	add	r7, sp, #8
    baba:	60f8      	str	r0, [r7, #12]
    babc:	60b9      	str	r1, [r7, #8]
    babe:	607a      	str	r2, [r7, #4]
    bac0:	807b      	strh	r3, [r7, #2]
    bac2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    bac6:	707b      	strb	r3, [r7, #1]
    bac8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    bacc:	f2c0 0302 	movt	r3, #2
    bad0:	681b      	ldr	r3, [r3, #0]
    bad2:	62fb      	str	r3, [r7, #44]	; 0x2c
	// Local variables
	// ***************
	int iKey;
	long lSec, lTimeOut=LL_INFINITE;
    bad4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    bad8:	61bb      	str	r3, [r7, #24]
	int iRet, iLength=0, iNbrBytes;
    bada:	2300      	movs	r3, #0
    badc:	623b      	str	r3, [r7, #32]

	// Timeout setting
	// ***************
	if(ucDly != 0xFF)
    bade:	787b      	ldrb	r3, [r7, #1]
    bae0:	2bff      	cmp	r3, #255	; 0xff
    bae2:	d006      	beq.n	baf2 <ReceiveGPRS+0x3e>
		lSec = ucDly*1000;
    bae4:	787b      	ldrb	r3, [r7, #1]
    bae6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    baea:	fb02 f303 	mul.w	r3, r2, r3
    baee:	617b      	str	r3, [r7, #20]
    baf0:	e002      	b.n	baf8 <ReceiveGPRS+0x44>
	else
		lSec = LL_INFINITE;
    baf2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    baf6:	617b      	str	r3, [r7, #20]

	// Receiving first block
	// *********************
	ResetPeripherals(KEYBOARD | TSCREEN);                                  // Reset peripherals FIFO
    baf8:	2001      	movs	r0, #1
    bafa:	f6c0 0000 	movt	r0, #2048	; 0x800
    bafe:	f7fe ff47 	bl	a990 <ResetPeripherals>
	iRet = TimerStart(0, lSec);                                            // Timer0 starts
    bb02:	2000      	movs	r0, #0
    bb04:	6979      	ldr	r1, [r7, #20]
    bb06:	f005 fca9 	bl	1145c <TimerStart>
    bb0a:	61f8      	str	r0, [r7, #28]
	CHECK(iRet>=0, lblTimeOut);
    bb0c:	69fb      	ldr	r3, [r7, #28]
    bb0e:	2b00      	cmp	r3, #0
    bb10:	db67      	blt.n	bbe2 <ReceiveGPRS+0x12e>
	do
	{
		iNbrBytes = LL_Receive(hSession, usLen, pcMsg+iLength, 1*100);     // Check reception
    bb12:	887a      	ldrh	r2, [r7, #2]
    bb14:	6a3b      	ldr	r3, [r7, #32]
    bb16:	6879      	ldr	r1, [r7, #4]
    bb18:	18cb      	adds	r3, r1, r3
    bb1a:	68f8      	ldr	r0, [r7, #12]
    bb1c:	4611      	mov	r1, r2
    bb1e:	461a      	mov	r2, r3
    bb20:	2364      	movs	r3, #100	; 0x64
    bb22:	f013 fd74 	bl	1f60e <LL_Receive>
    bb26:	6278      	str	r0, [r7, #36]	; 0x24
		if (iNbrBytes != 0)
    bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bb2a:	2b00      	cmp	r3, #0
    bb2c:	d11f      	bne.n	bb6e <ReceiveGPRS+0xba>
			break;                                                         // Bytes received
		iKey = GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 0, false);                 // Get key pressed/touched (shortcut)
    bb2e:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    bb32:	f2c0 0302 	movt	r3, #2
    bb36:	681b      	ldr	r3, [r3, #0]
    bb38:	2200      	movs	r2, #0
    bb3a:	9200      	str	r2, [sp, #0]
    bb3c:	68b8      	ldr	r0, [r7, #8]
    bb3e:	4619      	mov	r1, r3
    bb40:	2201      	movs	r2, #1
    bb42:	2300      	movs	r3, #0
    bb44:	f002 f8b2 	bl	dcac <GoalGetKey>
    bb48:	62b8      	str	r0, [r7, #40]	; 0x28
		CHECK(iKey!=GL_KEY_CANCEL, lblTimeOut);                            // Exit on cancel key
    bb4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bb4c:	f64f 0351 	movw	r3, #63569	; 0xf851
    bb50:	429a      	cmp	r2, r3
    bb52:	d046      	beq.n	bbe2 <ReceiveGPRS+0x12e>
		if (lSec != LL_INFINITE)
    bb54:	697a      	ldr	r2, [r7, #20]
    bb56:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    bb5a:	429a      	cmp	r2, r3
    bb5c:	d003      	beq.n	bb66 <ReceiveGPRS+0xb2>
			lTimeOut = TimerGet(0);                                        // Retrieve timer value
    bb5e:	2000      	movs	r0, #0
    bb60:	f005 fccc 	bl	114fc <TimerGet>
    bb64:	61b8      	str	r0, [r7, #24]
	} while (lTimeOut>0);
    bb66:	69bb      	ldr	r3, [r7, #24]
    bb68:	2b00      	cmp	r3, #0
    bb6a:	dcd2      	bgt.n	bb12 <ReceiveGPRS+0x5e>
    bb6c:	e000      	b.n	bb70 <ReceiveGPRS+0xbc>
	CHECK(iRet>=0, lblTimeOut);
	do
	{
		iNbrBytes = LL_Receive(hSession, usLen, pcMsg+iLength, 1*100);     // Check reception
		if (iNbrBytes != 0)
			break;                                                         // Bytes received
    bb6e:	bf00      	nop
		CHECK(iKey!=GL_KEY_CANCEL, lblTimeOut);                            // Exit on cancel key
		if (lSec != LL_INFINITE)
			lTimeOut = TimerGet(0);                                        // Retrieve timer value
	} while (lTimeOut>0);

	CHECK(lTimeOut!=0, lblTimeOut);                                        // Exit on timeout
    bb70:	69bb      	ldr	r3, [r7, #24]
    bb72:	2b00      	cmp	r3, #0
    bb74:	d035      	beq.n	bbe2 <ReceiveGPRS+0x12e>

	iLength += iNbrBytes;
    bb76:	6a3a      	ldr	r2, [r7, #32]
    bb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bb7a:	18d3      	adds	r3, r2, r3
    bb7c:	623b      	str	r3, [r7, #32]
	iRet = LL_GetLastError(hSession);
    bb7e:	68f8      	ldr	r0, [r7, #12]
    bb80:	f013 fceb 	bl	1f55a <LL_GetLastError>
    bb84:	61f8      	str	r0, [r7, #28]
	CHECK (iRet==LL_ERROR_OK, lblEnd);
    bb86:	69fb      	ldr	r3, [r7, #28]
    bb88:	2b00      	cmp	r3, #0
    bb8a:	d130      	bne.n	bbee <ReceiveGPRS+0x13a>
	if (iNbrBytes != 0)
    bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bb8e:	2b00      	cmp	r3, #0
    bb90:	d024      	beq.n	bbdc <ReceiveGPRS+0x128>
    bb92:	e000      	b.n	bb96 <ReceiveGPRS+0xe2>
			iLength += iNbrBytes;
			iRet = LL_GetLastError(hSession);
			CHECK ((iRet==LL_ERROR_OK) || (iRet==LL_ERROR_TIMEOUT), lblEnd);
			if ((iRet==LL_ERROR_TIMEOUT) || (iNbrBytes==0))
				break;
		}
    bb94:	bf00      	nop
	{
		// Receiving next block until timeout (Inter block 2s)
		// ===================================================
		while(1)
		{
			iNbrBytes = LL_Receive(hSession, usLen-iLength, pcMsg+iLength, 2*100);
    bb96:	887a      	ldrh	r2, [r7, #2]
    bb98:	6a3b      	ldr	r3, [r7, #32]
    bb9a:	1ad2      	subs	r2, r2, r3
    bb9c:	6a3b      	ldr	r3, [r7, #32]
    bb9e:	6879      	ldr	r1, [r7, #4]
    bba0:	18cb      	adds	r3, r1, r3
    bba2:	68f8      	ldr	r0, [r7, #12]
    bba4:	4611      	mov	r1, r2
    bba6:	461a      	mov	r2, r3
    bba8:	23c8      	movs	r3, #200	; 0xc8
    bbaa:	f013 fd30 	bl	1f60e <LL_Receive>
    bbae:	6278      	str	r0, [r7, #36]	; 0x24
			iLength += iNbrBytes;
    bbb0:	6a3a      	ldr	r2, [r7, #32]
    bbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bbb4:	18d3      	adds	r3, r2, r3
    bbb6:	623b      	str	r3, [r7, #32]
			iRet = LL_GetLastError(hSession);
    bbb8:	68f8      	ldr	r0, [r7, #12]
    bbba:	f013 fcce 	bl	1f55a <LL_GetLastError>
    bbbe:	61f8      	str	r0, [r7, #28]
			CHECK ((iRet==LL_ERROR_OK) || (iRet==LL_ERROR_TIMEOUT), lblEnd);
    bbc0:	69fb      	ldr	r3, [r7, #28]
    bbc2:	2b00      	cmp	r3, #0
    bbc4:	d003      	beq.n	bbce <ReceiveGPRS+0x11a>
    bbc6:	69fb      	ldr	r3, [r7, #28]
    bbc8:	f513 7f7b 	cmn.w	r3, #1004	; 0x3ec
    bbcc:	d10f      	bne.n	bbee <ReceiveGPRS+0x13a>
			if ((iRet==LL_ERROR_TIMEOUT) || (iNbrBytes==0))
    bbce:	69fb      	ldr	r3, [r7, #28]
    bbd0:	f513 7f7b 	cmn.w	r3, #1004	; 0x3ec
    bbd4:	d002      	beq.n	bbdc <ReceiveGPRS+0x128>
    bbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bbd8:	2b00      	cmp	r3, #0
    bbda:	d1db      	bne.n	bb94 <ReceiveGPRS+0xe0>
				break;
		}
	}

	iRet = iLength;
    bbdc:	6a3b      	ldr	r3, [r7, #32]
    bbde:	61fb      	str	r3, [r7, #28]
	goto lblEnd;
    bbe0:	e005      	b.n	bbee <ReceiveGPRS+0x13a>

	// Errors treatment
	// ****************
	lblTimeOut:                                                                // Timeout expired
	iRet = LL_ERROR_TIMEOUT;
    bbe2:	f64f 4314 	movw	r3, #64532	; 0xfc14
    bbe6:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    bbea:	61fb      	str	r3, [r7, #28]
	goto lblEnd;
    bbec:	bf00      	nop
	lblEnd:
	TimerStop(0);
    bbee:	2000      	movs	r0, #0
    bbf0:	f005 fcc8 	bl	11584 <TimerStop>
	return iRet;
    bbf4:	69fb      	ldr	r3, [r7, #28]
}
    bbf6:	4618      	mov	r0, r3
    bbf8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    bbfc:	f2c0 0302 	movt	r3, #2
    bc00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    bc02:	681b      	ldr	r3, [r3, #0]
    bc04:	429a      	cmp	r2, r3
    bc06:	d001      	beq.n	bc0c <ReceiveGPRS+0x158>
    bc08:	f7fd f9cc 	bl	8fa4 <__stack_chk_fail>
    bc0c:	f107 0730 	add.w	r7, r7, #48	; 0x30
    bc10:	46bd      	mov	sp, r7
    bc12:	bd80      	pop	{r7, pc}

0000bc14 <DisconnectGPRS>:
//    >=0 : Disconnect done
//     <0 : Disconnect failed
//****************************************************************************

static int DisconnectGPRS(LL_HANDLE hSession)
{
    bc14:	b580      	push	{r7, lr}
    bc16:	b084      	sub	sp, #16
    bc18:	af00      	add	r7, sp, #0
    bc1a:	6078      	str	r0, [r7, #4]
    bc1c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    bc20:	f2c0 0302 	movt	r3, #2
    bc24:	681b      	ldr	r3, [r3, #0]
    bc26:	60fb      	str	r3, [r7, #12]
	// ***************
	int iRet;

	// Link Layer disconnection
	// ************************
	iRet = LL_Disconnect(hSession);
    bc28:	6878      	ldr	r0, [r7, #4]
    bc2a:	f013 fc84 	bl	1f536 <LL_Disconnect>
    bc2e:	60b8      	str	r0, [r7, #8]

	return iRet;
    bc30:	68bb      	ldr	r3, [r7, #8]
}
    bc32:	4618      	mov	r0, r3
    bc34:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    bc38:	f2c0 0302 	movt	r3, #2
    bc3c:	68fa      	ldr	r2, [r7, #12]
    bc3e:	681b      	ldr	r3, [r3, #0]
    bc40:	429a      	cmp	r2, r3
    bc42:	d001      	beq.n	bc48 <DisconnectGPRS+0x34>
    bc44:	f7fd f9ae 	bl	8fa4 <__stack_chk_fail>
    bc48:	f107 0710 	add.w	r7, r7, #16
    bc4c:	46bd      	mov	sp, r7
    bc4e:	bd80      	pop	{r7, pc}

0000bc50 <CloseGPRS>:
//    >=0 : Configuration deleted
//     <0 : Processing failed
//****************************************************************************

static int CloseGPRS(LL_HANDLE hSession)
{
    bc50:	b580      	push	{r7, lr}
    bc52:	b084      	sub	sp, #16
    bc54:	af00      	add	r7, sp, #0
    bc56:	6078      	str	r0, [r7, #4]
    bc58:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    bc5c:	f2c0 0302 	movt	r3, #2
    bc60:	681b      	ldr	r3, [r3, #0]
    bc62:	60fb      	str	r3, [r7, #12]
	// ***************
	int iRet;

	// Delete the configuration
	// ************************
	iRet = LL_Configure(&hSession, NULL);
    bc64:	1d3b      	adds	r3, r7, #4
    bc66:	4618      	mov	r0, r3
    bc68:	2100      	movs	r1, #0
    bc6a:	f013 fc40 	bl	1f4ee <LL_Configure>
    bc6e:	60b8      	str	r0, [r7, #8]

	return iRet;
    bc70:	68bb      	ldr	r3, [r7, #8]
}
    bc72:	4618      	mov	r0, r3
    bc74:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    bc78:	f2c0 0302 	movt	r3, #2
    bc7c:	68fa      	ldr	r2, [r7, #12]
    bc7e:	681b      	ldr	r3, [r3, #0]
    bc80:	429a      	cmp	r2, r3
    bc82:	d001      	beq.n	bc88 <CloseGPRS+0x38>
    bc84:	f7fd f98e 	bl	8fa4 <__stack_chk_fail>
    bc88:	f107 0710 	add.w	r7, r7, #16
    bc8c:	46bd      	mov	sp, r7
    bc8e:	bd80      	pop	{r7, pc}

0000bc90 <StopGPRS>:
//    >=0 : Break attachment done
//     <0 : Break attachment failed
//****************************************************************************

static int StopGPRS(void)
{
    bc90:	b580      	push	{r7, lr}
    bc92:	b082      	sub	sp, #8
    bc94:	af00      	add	r7, sp, #0
    bc96:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    bc9a:	f2c0 0302 	movt	r3, #2
    bc9e:	681b      	ldr	r3, [r3, #0]
    bca0:	607b      	str	r3, [r7, #4]
	// Local variables
	// ***************
	int iRet = 1;
    bca2:	2301      	movs	r3, #1
    bca4:	603b      	str	r3, [r7, #0]

	// GPRS disconnection
	// ******************
	// iRet = LL_GPRS_Stop();

	return iRet;
    bca6:	683b      	ldr	r3, [r7, #0]
}
    bca8:	4618      	mov	r0, r3
    bcaa:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    bcae:	f2c0 0302 	movt	r3, #2
    bcb2:	687a      	ldr	r2, [r7, #4]
    bcb4:	681b      	ldr	r3, [r3, #0]
    bcb6:	429a      	cmp	r2, r3
    bcb8:	d001      	beq.n	bcbe <StopGPRS+0x2e>
    bcba:	f7fd f973 	bl	8fa4 <__stack_chk_fail>
    bcbe:	f107 0708 	add.w	r7, r7, #8
    bcc2:	46bd      	mov	sp, r7
    bcc4:	bd80      	pop	{r7, pc}
    bcc6:	bf00      	nop

0000bcc8 <PromptGPRS>:
//  This function has no parameters.
//  This function has no return value
//****************************************************************************

void PromptGPRS(void)
{
    bcc8:	b590      	push	{r4, r7, lr}
    bcca:	f2ad 6d44 	subw	sp, sp, #1604	; 0x644
    bcce:	af04      	add	r7, sp, #16
    bcd0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    bcd4:	f2c0 0302 	movt	r3, #2
    bcd8:	681b      	ldr	r3, [r3, #0]
    bcda:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
	int iHeader, iFooter;
	int i, iDefItemP, iDefItemN, iRet;

	// Pin Required ?
	// **************
	iRet = appGet(appGprsRequirePin, tcRequirePin, lenGprsRequirePin+1);
    bcde:	f107 0408 	add.w	r4, r7, #8
    bce2:	f107 031c 	add.w	r3, r7, #28
    bce6:	200d      	movs	r0, #13
    bce8:	4619      	mov	r1, r3
    bcea:	2202      	movs	r2, #2
    bcec:	f003 fd0c 	bl	f708 <appGet>
    bcf0:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    bcf2:	f107 0308 	add.w	r3, r7, #8
    bcf6:	681b      	ldr	r3, [r3, #0]
    bcf8:	2b00      	cmp	r3, #0
    bcfa:	f2c0 8350 	blt.w	c39e <PromptGPRS+0x6d6>
	iDefItemP = atoi(tcRequirePin);
    bcfe:	f107 040c 	add.w	r4, r7, #12
    bd02:	f107 031c 	add.w	r3, r7, #28
    bd06:	4618      	mov	r0, r3
    bd08:	f7fc ef4c 	blx	8ba4 <_init+0x44>
    bd0c:	6020      	str	r0, [r4, #0]
	iDefItemN = GL_Dialog_Choice(gGoalGraphicLibInstance, "Pin Required?", tzRequirePin, iDefItemP, GL_BUTTON_DEFAULT, GL_KEY_0, GL_TIME_MINUTE);
    bd0e:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    bd12:	f2c0 0302 	movt	r3, #2
    bd16:	681a      	ldr	r2, [r3, #0]
    bd18:	f107 030c 	add.w	r3, r7, #12
    bd1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bd20:	9100      	str	r1, [sp, #0]
    bd22:	2130      	movs	r1, #48	; 0x30
    bd24:	9101      	str	r1, [sp, #4]
    bd26:	f64e 2160 	movw	r1, #60000	; 0xea60
    bd2a:	9102      	str	r1, [sp, #8]
    bd2c:	4610      	mov	r0, r2
    bd2e:	f642 715c 	movw	r1, #12124	; 0x2f5c
    bd32:	f2c0 0102 	movt	r1, #2
    bd36:	f24f 3240 	movw	r2, #62272	; 0xf340
    bd3a:	f2c0 0202 	movt	r2, #2
    bd3e:	681b      	ldr	r3, [r3, #0]
    bd40:	f015 fc7e 	bl	21640 <GL_Dialog_Choice>
    bd44:	4602      	mov	r2, r0
    bd46:	f107 0310 	add.w	r3, r7, #16
    bd4a:	601a      	str	r2, [r3, #0]
	CHECK((iDefItemN!=GL_KEY_CANCEL) && (iDefItemN!=GL_RESULT_INACTIVITY), lblEnd); // Exit cancel/timeout
    bd4c:	f107 0310 	add.w	r3, r7, #16
    bd50:	681a      	ldr	r2, [r3, #0]
    bd52:	f64f 0351 	movw	r3, #63569	; 0xf851
    bd56:	429a      	cmp	r2, r3
    bd58:	f000 834a 	beq.w	c3f0 <PromptGPRS+0x728>
    bd5c:	f107 0310 	add.w	r3, r7, #16
    bd60:	681a      	ldr	r2, [r3, #0]
    bd62:	f64f 0380 	movw	r3, #63616	; 0xf880
    bd66:	429a      	cmp	r2, r3
    bd68:	f000 8342 	beq.w	c3f0 <PromptGPRS+0x728>
	if (iDefItemN != iDefItemP)
    bd6c:	f107 0210 	add.w	r2, r7, #16
    bd70:	f107 030c 	add.w	r3, r7, #12
    bd74:	6812      	ldr	r2, [r2, #0]
    bd76:	681b      	ldr	r3, [r3, #0]
    bd78:	429a      	cmp	r2, r3
    bd7a:	d018      	beq.n	bdae <PromptGPRS+0xe6>
	{
		tcRequirePin[0] = iDefItemN + 0x30;
    bd7c:	f107 0310 	add.w	r3, r7, #16
    bd80:	681b      	ldr	r3, [r3, #0]
    bd82:	b2db      	uxtb	r3, r3
    bd84:	3330      	adds	r3, #48	; 0x30
    bd86:	b2da      	uxtb	r2, r3
    bd88:	f107 031c 	add.w	r3, r7, #28
    bd8c:	701a      	strb	r2, [r3, #0]
		iRet = appPut(appGprsRequirePin, tcRequirePin, lenGprsRequirePin); // Save pin required
    bd8e:	f107 0408 	add.w	r4, r7, #8
    bd92:	f107 031c 	add.w	r3, r7, #28
    bd96:	200d      	movs	r0, #13
    bd98:	4619      	mov	r1, r3
    bd9a:	2201      	movs	r2, #1
    bd9c:	f003 fc4c 	bl	f638 <appPut>
    bda0:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblDbaErr);
    bda2:	f107 0308 	add.w	r3, r7, #8
    bda6:	681b      	ldr	r3, [r3, #0]
    bda8:	2b00      	cmp	r3, #0
    bdaa:	f2c0 82f8 	blt.w	c39e <PromptGPRS+0x6d6>
	}

	// Enter APN
	// *********
	iHeader = IsHeader();                                                  // Save header state
    bdae:	f107 0414 	add.w	r4, r7, #20
    bdb2:	f015 f943 	bl	2103c <IsHeader>
    bdb6:	6020      	str	r0, [r4, #0]
	iFooter = IsFooter();                                                  // Save footer state
    bdb8:	f107 0418 	add.w	r4, r7, #24
    bdbc:	f015 f90c 	bl	20fd8 <IsFooter>
    bdc0:	6020      	str	r0, [r4, #0]

	memset(tcMask, 0, sizeof(tcMask));
    bdc2:	f507 7392 	add.w	r3, r7, #292	; 0x124
    bdc6:	4618      	mov	r0, r3
    bdc8:	2100      	movs	r1, #0
    bdca:	f44f 7280 	mov.w	r2, #256	; 0x100
    bdce:	f7fc eef6 	blx	8bbc <_init+0x5c>
	for (i=0; i<lenGprsApn; i++)
    bdd2:	1d3b      	adds	r3, r7, #4
    bdd4:	2200      	movs	r2, #0
    bdd6:	601a      	str	r2, [r3, #0]
    bdd8:	e015      	b.n	be06 <PromptGPRS+0x13e>
		strcat(tcMask, "/c");                                              // Accept any character
    bdda:	f507 7392 	add.w	r3, r7, #292	; 0x124
    bdde:	4618      	mov	r0, r3
    bde0:	f7fc ef50 	blx	8c84 <_init+0x124>
    bde4:	4603      	mov	r3, r0
    bde6:	f507 7292 	add.w	r2, r7, #292	; 0x124
    bdea:	18d2      	adds	r2, r2, r3
    bdec:	f642 736c 	movw	r3, #12140	; 0x2f6c
    bdf0:	f2c0 0302 	movt	r3, #2
    bdf4:	8819      	ldrh	r1, [r3, #0]
    bdf6:	789b      	ldrb	r3, [r3, #2]
    bdf8:	8011      	strh	r1, [r2, #0]
    bdfa:	7093      	strb	r3, [r2, #2]
	// *********
	iHeader = IsHeader();                                                  // Save header state
	iFooter = IsFooter();                                                  // Save footer state

	memset(tcMask, 0, sizeof(tcMask));
	for (i=0; i<lenGprsApn; i++)
    bdfc:	1d3b      	adds	r3, r7, #4
    bdfe:	1d3a      	adds	r2, r7, #4
    be00:	6812      	ldr	r2, [r2, #0]
    be02:	3201      	adds	r2, #1
    be04:	601a      	str	r2, [r3, #0]
    be06:	1d3b      	adds	r3, r7, #4
    be08:	681b      	ldr	r3, [r3, #0]
    be0a:	2b1d      	cmp	r3, #29
    be0c:	dde5      	ble.n	bdda <PromptGPRS+0x112>
		strcat(tcMask, "/c");                                              // Accept any character
	iRet = appGet(appGprsApn, tcApnP, lenGprsApn+1);
    be0e:	f107 0408 	add.w	r4, r7, #8
    be12:	f107 0350 	add.w	r3, r7, #80	; 0x50
    be16:	200e      	movs	r0, #14
    be18:	4619      	mov	r1, r3
    be1a:	221f      	movs	r2, #31
    be1c:	f003 fc74 	bl	f708 <appGet>
    be20:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    be22:	f107 0308 	add.w	r3, r7, #8
    be26:	681b      	ldr	r3, [r3, #0]
    be28:	2b00      	cmp	r3, #0
    be2a:	f2c0 82b8 	blt.w	c39e <PromptGPRS+0x6d6>
	strcpy(tcApnN, tcApnP);
    be2e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    be32:	f107 0350 	add.w	r3, r7, #80	; 0x50
    be36:	4610      	mov	r0, r2
    be38:	4619      	mov	r1, r3
    be3a:	f7fc eef2 	blx	8c20 <_init+0xc0>

	DisplayLeds(_OFF_);                                                    // Disable Leds
    be3e:	2000      	movs	r0, #0
    be40:	f015 f89c 	bl	20f7c <DisplayLeds>
	DisplayHeader(_OFF_);                                                  // Disable Header
    be44:	2000      	movs	r0, #0
    be46:	f015 f86b 	bl	20f20 <DisplayHeader>
	DisplayFooter(_OFF_);                                                  // Disable Footer
    be4a:	2000      	movs	r0, #0
    be4c:	f015 f838 	bl	20ec0 <DisplayFooter>

	iRet = GL_Dialog_VirtualKeyboard(gGoalGraphicLibInstance, NULL, "Enter Apn :", tcMask, tcApnN, sizeof(tcApnN), GL_TIME_MINUTE);
    be50:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    be54:	f2c0 0302 	movt	r3, #2
    be58:	681a      	ldr	r2, [r3, #0]
    be5a:	f507 7392 	add.w	r3, r7, #292	; 0x124
    be5e:	f107 0130 	add.w	r1, r7, #48	; 0x30
    be62:	9100      	str	r1, [sp, #0]
    be64:	211f      	movs	r1, #31
    be66:	9101      	str	r1, [sp, #4]
    be68:	f64e 2160 	movw	r1, #60000	; 0xea60
    be6c:	9102      	str	r1, [sp, #8]
    be6e:	4610      	mov	r0, r2
    be70:	2100      	movs	r1, #0
    be72:	f642 7270 	movw	r2, #12144	; 0x2f70
    be76:	f2c0 0202 	movt	r2, #2
    be7a:	f015 fc4d 	bl	21718 <GL_Dialog_VirtualKeyboard>
    be7e:	4602      	mov	r2, r0
    be80:	f107 0308 	add.w	r3, r7, #8
    be84:	601a      	str	r2, [r3, #0]

	if (IsColorDisplay())                                                  // Color terminal?
    be86:	f014 fb6b 	bl	20560 <IsColorDisplay>
    be8a:	4603      	mov	r3, r0
    be8c:	2b00      	cmp	r3, #0
    be8e:	d01a      	beq.n	bec6 <PromptGPRS+0x1fe>
	{                                                                      // Yes
		DisplayLeds(_ON_);                                                 // Enable Leds
    be90:	2001      	movs	r0, #1
    be92:	f015 f873 	bl	20f7c <DisplayLeds>
		DisplayHeader(iHeader);                                            // Enable Header
    be96:	f107 0314 	add.w	r3, r7, #20
    be9a:	6818      	ldr	r0, [r3, #0]
    be9c:	f015 f840 	bl	20f20 <DisplayHeader>
		if(!GL_GraphicLib_IsTouchPresent(gGoalGraphicLibInstance))                           // Check if it is a touch screen
    bea0:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    bea4:	f2c0 0302 	movt	r3, #2
    bea8:	681b      	ldr	r3, [r3, #0]
    beaa:	4618      	mov	r0, r3
    beac:	f015 fd5e 	bl	2196c <GL_GraphicLib_IsTouchPresent>
    beb0:	4603      	mov	r3, r0
    beb2:	f083 0301 	eor.w	r3, r3, #1
    beb6:	b2db      	uxtb	r3, r3
    beb8:	2b00      	cmp	r3, #0
    beba:	d004      	beq.n	bec6 <PromptGPRS+0x1fe>
			DisplayFooter(iFooter);                                        // No, restore Footer
    bebc:	f107 0318 	add.w	r3, r7, #24
    bec0:	6818      	ldr	r0, [r3, #0]
    bec2:	f014 fffd 	bl	20ec0 <DisplayFooter>
	}

	CHECK((iRet!=GL_KEY_CANCEL) && (iRet!=GL_RESULT_INACTIVITY), lblEnd);  // Exit on cancel/timeout
    bec6:	f107 0308 	add.w	r3, r7, #8
    beca:	681a      	ldr	r2, [r3, #0]
    becc:	f64f 0351 	movw	r3, #63569	; 0xf851
    bed0:	429a      	cmp	r2, r3
    bed2:	f000 828d 	beq.w	c3f0 <PromptGPRS+0x728>
    bed6:	f107 0308 	add.w	r3, r7, #8
    beda:	681a      	ldr	r2, [r3, #0]
    bedc:	f64f 0380 	movw	r3, #63616	; 0xf880
    bee0:	429a      	cmp	r2, r3
    bee2:	f000 8285 	beq.w	c3f0 <PromptGPRS+0x728>
	if (strcmp(tcApnN, tcApnP) != 0)
    bee6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    beea:	f107 0350 	add.w	r3, r7, #80	; 0x50
    beee:	4610      	mov	r0, r2
    bef0:	4619      	mov	r1, r3
    bef2:	f7fc eef4 	blx	8cdc <_init+0x17c>
    bef6:	4603      	mov	r3, r0
    bef8:	2b00      	cmp	r3, #0
    befa:	d00f      	beq.n	bf1c <PromptGPRS+0x254>
	{
		iRet = appPut(appGprsApn, tcApnN, lenGprsApn);                     // Save new apn
    befc:	f107 0408 	add.w	r4, r7, #8
    bf00:	f107 0330 	add.w	r3, r7, #48	; 0x30
    bf04:	200e      	movs	r0, #14
    bf06:	4619      	mov	r1, r3
    bf08:	221e      	movs	r2, #30
    bf0a:	f003 fb95 	bl	f638 <appPut>
    bf0e:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblDbaErr);
    bf10:	f107 0308 	add.w	r3, r7, #8
    bf14:	681b      	ldr	r3, [r3, #0]
    bf16:	2b00      	cmp	r3, #0
    bf18:	f2c0 8241 	blt.w	c39e <PromptGPRS+0x6d6>
	}

	// Enter User Name
	// ***************
	memset(tcMask, 0, sizeof(tcMask));
    bf1c:	f507 7392 	add.w	r3, r7, #292	; 0x124
    bf20:	4618      	mov	r0, r3
    bf22:	2100      	movs	r1, #0
    bf24:	f44f 7280 	mov.w	r2, #256	; 0x100
    bf28:	f7fc ee48 	blx	8bbc <_init+0x5c>
	for (i=0; i<lenGprsUser; i++)
    bf2c:	1d3b      	adds	r3, r7, #4
    bf2e:	2200      	movs	r2, #0
    bf30:	601a      	str	r2, [r3, #0]
    bf32:	e015      	b.n	bf60 <PromptGPRS+0x298>
		strcat(tcMask, "/c");                                              // Accept any character
    bf34:	f507 7392 	add.w	r3, r7, #292	; 0x124
    bf38:	4618      	mov	r0, r3
    bf3a:	f7fc eea4 	blx	8c84 <_init+0x124>
    bf3e:	4603      	mov	r3, r0
    bf40:	f507 7292 	add.w	r2, r7, #292	; 0x124
    bf44:	18d2      	adds	r2, r2, r3
    bf46:	f642 736c 	movw	r3, #12140	; 0x2f6c
    bf4a:	f2c0 0302 	movt	r3, #2
    bf4e:	8819      	ldrh	r1, [r3, #0]
    bf50:	789b      	ldrb	r3, [r3, #2]
    bf52:	8011      	strh	r1, [r2, #0]
    bf54:	7093      	strb	r3, [r2, #2]
	}

	// Enter User Name
	// ***************
	memset(tcMask, 0, sizeof(tcMask));
	for (i=0; i<lenGprsUser; i++)
    bf56:	1d3b      	adds	r3, r7, #4
    bf58:	1d3a      	adds	r2, r7, #4
    bf5a:	6812      	ldr	r2, [r2, #0]
    bf5c:	3201      	adds	r2, #1
    bf5e:	601a      	str	r2, [r3, #0]
    bf60:	1d3b      	adds	r3, r7, #4
    bf62:	681b      	ldr	r3, [r3, #0]
    bf64:	2b1d      	cmp	r3, #29
    bf66:	dde5      	ble.n	bf34 <PromptGPRS+0x26c>
		strcat(tcMask, "/c");                                              // Accept any character
	iRet = appGet(appGprsUser, tcUserP, lenGprsUser+1);
    bf68:	f107 0408 	add.w	r4, r7, #8
    bf6c:	f107 0390 	add.w	r3, r7, #144	; 0x90
    bf70:	200f      	movs	r0, #15
    bf72:	4619      	mov	r1, r3
    bf74:	221f      	movs	r2, #31
    bf76:	f003 fbc7 	bl	f708 <appGet>
    bf7a:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    bf7c:	f107 0308 	add.w	r3, r7, #8
    bf80:	681b      	ldr	r3, [r3, #0]
    bf82:	2b00      	cmp	r3, #0
    bf84:	f2c0 820b 	blt.w	c39e <PromptGPRS+0x6d6>
	strcpy(tcUserN, tcUserP);
    bf88:	f107 0270 	add.w	r2, r7, #112	; 0x70
    bf8c:	f107 0390 	add.w	r3, r7, #144	; 0x90
    bf90:	4610      	mov	r0, r2
    bf92:	4619      	mov	r1, r3
    bf94:	f7fc ee44 	blx	8c20 <_init+0xc0>
	iRet = GL_Dialog_Text(gGoalGraphicLibInstance, "User Name", "Enter User Name :", tcMask, tcUserN, sizeof(tcUserN), GL_TIME_MINUTE);
    bf98:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    bf9c:	f2c0 0302 	movt	r3, #2
    bfa0:	681a      	ldr	r2, [r3, #0]
    bfa2:	f507 7392 	add.w	r3, r7, #292	; 0x124
    bfa6:	f107 0170 	add.w	r1, r7, #112	; 0x70
    bfaa:	9100      	str	r1, [sp, #0]
    bfac:	211f      	movs	r1, #31
    bfae:	9101      	str	r1, [sp, #4]
    bfb0:	f64e 2160 	movw	r1, #60000	; 0xea60
    bfb4:	9102      	str	r1, [sp, #8]
    bfb6:	4610      	mov	r0, r2
    bfb8:	f642 717c 	movw	r1, #12156	; 0x2f7c
    bfbc:	f2c0 0102 	movt	r1, #2
    bfc0:	f642 7288 	movw	r2, #12168	; 0x2f88
    bfc4:	f2c0 0202 	movt	r2, #2
    bfc8:	f015 fb94 	bl	216f4 <GL_Dialog_Text>
    bfcc:	4602      	mov	r2, r0
    bfce:	f107 0308 	add.w	r3, r7, #8
    bfd2:	601a      	str	r2, [r3, #0]
	CHECK((iRet!=GL_KEY_CANCEL) && (iRet!=GL_RESULT_INACTIVITY), lblEnd);  // Exit on cancel/timeout
    bfd4:	f107 0308 	add.w	r3, r7, #8
    bfd8:	681a      	ldr	r2, [r3, #0]
    bfda:	f64f 0351 	movw	r3, #63569	; 0xf851
    bfde:	429a      	cmp	r2, r3
    bfe0:	f000 8206 	beq.w	c3f0 <PromptGPRS+0x728>
    bfe4:	f107 0308 	add.w	r3, r7, #8
    bfe8:	681a      	ldr	r2, [r3, #0]
    bfea:	f64f 0380 	movw	r3, #63616	; 0xf880
    bfee:	429a      	cmp	r2, r3
    bff0:	f000 81fe 	beq.w	c3f0 <PromptGPRS+0x728>
	if (strcmp(tcUserN, tcUserP) != 0)
    bff4:	f107 0270 	add.w	r2, r7, #112	; 0x70
    bff8:	f107 0390 	add.w	r3, r7, #144	; 0x90
    bffc:	4610      	mov	r0, r2
    bffe:	4619      	mov	r1, r3
    c000:	f7fc ee6c 	blx	8cdc <_init+0x17c>
    c004:	4603      	mov	r3, r0
    c006:	2b00      	cmp	r3, #0
    c008:	d00f      	beq.n	c02a <PromptGPRS+0x362>
	{
		iRet = appPut(appGprsUser, tcUserN, lenGprsUser);                  // Save new user name
    c00a:	f107 0408 	add.w	r4, r7, #8
    c00e:	f107 0370 	add.w	r3, r7, #112	; 0x70
    c012:	200f      	movs	r0, #15
    c014:	4619      	mov	r1, r3
    c016:	221e      	movs	r2, #30
    c018:	f003 fb0e 	bl	f638 <appPut>
    c01c:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblDbaErr);
    c01e:	f107 0308 	add.w	r3, r7, #8
    c022:	681b      	ldr	r3, [r3, #0]
    c024:	2b00      	cmp	r3, #0
    c026:	f2c0 81ba 	blt.w	c39e <PromptGPRS+0x6d6>
	}

	// Enter Password
	// **************
	memset(tcMask, 0, sizeof(tcMask));
    c02a:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c02e:	4618      	mov	r0, r3
    c030:	2100      	movs	r1, #0
    c032:	f44f 7280 	mov.w	r2, #256	; 0x100
    c036:	f7fc edc2 	blx	8bbc <_init+0x5c>
	for (i=0; i<lenGprsPass; i++)
    c03a:	1d3b      	adds	r3, r7, #4
    c03c:	2200      	movs	r2, #0
    c03e:	601a      	str	r2, [r3, #0]
    c040:	e015      	b.n	c06e <PromptGPRS+0x3a6>
		strcat(tcMask, "/c");                                              // Accept any character
    c042:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c046:	4618      	mov	r0, r3
    c048:	f7fc ee1c 	blx	8c84 <_init+0x124>
    c04c:	4603      	mov	r3, r0
    c04e:	f507 7292 	add.w	r2, r7, #292	; 0x124
    c052:	18d2      	adds	r2, r2, r3
    c054:	f642 736c 	movw	r3, #12140	; 0x2f6c
    c058:	f2c0 0302 	movt	r3, #2
    c05c:	8819      	ldrh	r1, [r3, #0]
    c05e:	789b      	ldrb	r3, [r3, #2]
    c060:	8011      	strh	r1, [r2, #0]
    c062:	7093      	strb	r3, [r2, #2]
	}

	// Enter Password
	// **************
	memset(tcMask, 0, sizeof(tcMask));
	for (i=0; i<lenGprsPass; i++)
    c064:	1d3b      	adds	r3, r7, #4
    c066:	1d3a      	adds	r2, r7, #4
    c068:	6812      	ldr	r2, [r2, #0]
    c06a:	3201      	adds	r2, #1
    c06c:	601a      	str	r2, [r3, #0]
    c06e:	1d3b      	adds	r3, r7, #4
    c070:	681b      	ldr	r3, [r3, #0]
    c072:	2b1d      	cmp	r3, #29
    c074:	dde5      	ble.n	c042 <PromptGPRS+0x37a>
		strcat(tcMask, "/c");                                              // Accept any character
	iRet = appGet(appGprsPass, tcPassP, lenGprsPass+1);
    c076:	f107 0408 	add.w	r4, r7, #8
    c07a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
    c07e:	2010      	movs	r0, #16
    c080:	4619      	mov	r1, r3
    c082:	221f      	movs	r2, #31
    c084:	f003 fb40 	bl	f708 <appGet>
    c088:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c08a:	f107 0308 	add.w	r3, r7, #8
    c08e:	681b      	ldr	r3, [r3, #0]
    c090:	2b00      	cmp	r3, #0
    c092:	f2c0 8184 	blt.w	c39e <PromptGPRS+0x6d6>
	strcpy(tcPassN, tcPassP);
    c096:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
    c09a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
    c09e:	4610      	mov	r0, r2
    c0a0:	4619      	mov	r1, r3
    c0a2:	f7fc edbe 	blx	8c20 <_init+0xc0>
	iRet = GL_Dialog_Password(gGoalGraphicLibInstance, "Password", "Enter Password :", tcMask, tcPassN, sizeof(tcPassN), GL_TIME_MINUTE);
    c0a6:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    c0aa:	f2c0 0302 	movt	r3, #2
    c0ae:	681a      	ldr	r2, [r3, #0]
    c0b0:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c0b4:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
    c0b8:	9100      	str	r1, [sp, #0]
    c0ba:	211f      	movs	r1, #31
    c0bc:	9101      	str	r1, [sp, #4]
    c0be:	f64e 2160 	movw	r1, #60000	; 0xea60
    c0c2:	9102      	str	r1, [sp, #8]
    c0c4:	4610      	mov	r0, r2
    c0c6:	f642 719c 	movw	r1, #12188	; 0x2f9c
    c0ca:	f2c0 0102 	movt	r1, #2
    c0ce:	f642 72a8 	movw	r2, #12200	; 0x2fa8
    c0d2:	f2c0 0202 	movt	r2, #2
    c0d6:	f015 fae9 	bl	216ac <GL_Dialog_Password>
    c0da:	4602      	mov	r2, r0
    c0dc:	f107 0308 	add.w	r3, r7, #8
    c0e0:	601a      	str	r2, [r3, #0]
	CHECK((iRet!=GL_KEY_CANCEL) && (iRet!=GL_RESULT_INACTIVITY), lblEnd);  // Exit on cancel/timeout
    c0e2:	f107 0308 	add.w	r3, r7, #8
    c0e6:	681a      	ldr	r2, [r3, #0]
    c0e8:	f64f 0351 	movw	r3, #63569	; 0xf851
    c0ec:	429a      	cmp	r2, r3
    c0ee:	f000 817f 	beq.w	c3f0 <PromptGPRS+0x728>
    c0f2:	f107 0308 	add.w	r3, r7, #8
    c0f6:	681a      	ldr	r2, [r3, #0]
    c0f8:	f64f 0380 	movw	r3, #63616	; 0xf880
    c0fc:	429a      	cmp	r2, r3
    c0fe:	f000 8177 	beq.w	c3f0 <PromptGPRS+0x728>
	if (strcmp(tcPassN, tcPassP) != 0)
    c102:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
    c106:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
    c10a:	4610      	mov	r0, r2
    c10c:	4619      	mov	r1, r3
    c10e:	f7fc ede6 	blx	8cdc <_init+0x17c>
    c112:	4603      	mov	r3, r0
    c114:	2b00      	cmp	r3, #0
    c116:	d00f      	beq.n	c138 <PromptGPRS+0x470>
	{
		iRet = appPut(appGprsPass, tcPassN, lenGprsPass);                  // Save new password
    c118:	f107 0408 	add.w	r4, r7, #8
    c11c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
    c120:	2010      	movs	r0, #16
    c122:	4619      	mov	r1, r3
    c124:	221e      	movs	r2, #30
    c126:	f003 fa87 	bl	f638 <appPut>
    c12a:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblDbaErr);
    c12c:	f107 0308 	add.w	r3, r7, #8
    c130:	681b      	ldr	r3, [r3, #0]
    c132:	2b00      	cmp	r3, #0
    c134:	f2c0 8133 	blt.w	c39e <PromptGPRS+0x6d6>
	}

	// Enter Remote IP address
	// ***********************
	iRet = appGet(appGprsIpRemote, tcIpAddressP, lenGprsIpRemote+1);
    c138:	f107 0408 	add.w	r4, r7, #8
    c13c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
    c140:	2011      	movs	r0, #17
    c142:	4619      	mov	r1, r3
    c144:	f240 2201 	movw	r2, #513	; 0x201
    c148:	f003 fade 	bl	f708 <appGet>
    c14c:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c14e:	f107 0308 	add.w	r3, r7, #8
    c152:	681b      	ldr	r3, [r3, #0]
    c154:	2b00      	cmp	r3, #0
    c156:	f2c0 8122 	blt.w	c39e <PromptGPRS+0x6d6>
		strcpy(tcIpAddressN, tcIpAddressP);
    c15a:	f507 7209 	add.w	r2, r7, #548	; 0x224
    c15e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
    c162:	4610      	mov	r0, r2
    c164:	4619      	mov	r1, r3
    c166:	f7fc ed5c 	blx	8c20 <_init+0xc0>
	//	CHECK(uiIp>=0, lblKO);
	//	iRet = GL_Dialog_Ip(gGoalGraphicLibInstance, "Remote Ip Address", "Enter Ip Address :", (T_GL_HIP)&uiIp, GL_TIME_MINUTE);
	//	CHECK((iRet!=GL_KEY_CANCEL) && (iRet!=GL_RESULT_INACTIVITY), lblEnd);  // Exit on cancel/timeout
	//	strcpy(tcIpAddressN, UintToIp(uiIp));

	memset(tcMask, 0, sizeof(tcMask));
    c16a:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c16e:	4618      	mov	r0, r3
    c170:	2100      	movs	r1, #0
    c172:	f44f 7280 	mov.w	r2, #256	; 0x100
    c176:	f7fc ed22 	blx	8bbc <_init+0x5c>
	for (i=0; i<100; i++)
    c17a:	1d3b      	adds	r3, r7, #4
    c17c:	2200      	movs	r2, #0
    c17e:	601a      	str	r2, [r3, #0]
    c180:	e015      	b.n	c1ae <PromptGPRS+0x4e6>
		strcat(tcMask, "/c");
    c182:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c186:	4618      	mov	r0, r3
    c188:	f7fc ed7c 	blx	8c84 <_init+0x124>
    c18c:	4603      	mov	r3, r0
    c18e:	f507 7292 	add.w	r2, r7, #292	; 0x124
    c192:	18d2      	adds	r2, r2, r3
    c194:	f642 736c 	movw	r3, #12140	; 0x2f6c
    c198:	f2c0 0302 	movt	r3, #2
    c19c:	8819      	ldrh	r1, [r3, #0]
    c19e:	789b      	ldrb	r3, [r3, #2]
    c1a0:	8011      	strh	r1, [r2, #0]
    c1a2:	7093      	strb	r3, [r2, #2]
	//	iRet = GL_Dialog_Ip(gGoalGraphicLibInstance, "Remote Ip Address", "Enter Ip Address :", (T_GL_HIP)&uiIp, GL_TIME_MINUTE);
	//	CHECK((iRet!=GL_KEY_CANCEL) && (iRet!=GL_RESULT_INACTIVITY), lblEnd);  // Exit on cancel/timeout
	//	strcpy(tcIpAddressN, UintToIp(uiIp));

	memset(tcMask, 0, sizeof(tcMask));
	for (i=0; i<100; i++)
    c1a4:	1d3b      	adds	r3, r7, #4
    c1a6:	1d3a      	adds	r2, r7, #4
    c1a8:	6812      	ldr	r2, [r2, #0]
    c1aa:	3201      	adds	r2, #1
    c1ac:	601a      	str	r2, [r3, #0]
    c1ae:	1d3b      	adds	r3, r7, #4
    c1b0:	681b      	ldr	r3, [r3, #0]
    c1b2:	2b63      	cmp	r3, #99	; 0x63
    c1b4:	dde5      	ble.n	c182 <PromptGPRS+0x4ba>
		strcat(tcMask, "/c");

	iRet = GL_Dialog_VirtualKeyboard(gGoalGraphicLibInstance, "Remote Address", "Enter Ip/domain Address :", tcMask, tcIpAddressN, sizeof(tcIpAddressN),  GL_TIME_MINUTE);
    c1b6:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    c1ba:	f2c0 0302 	movt	r3, #2
    c1be:	681a      	ldr	r2, [r3, #0]
    c1c0:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c1c4:	f507 7109 	add.w	r1, r7, #548	; 0x224
    c1c8:	9100      	str	r1, [sp, #0]
    c1ca:	f240 2101 	movw	r1, #513	; 0x201
    c1ce:	9101      	str	r1, [sp, #4]
    c1d0:	f64e 2160 	movw	r1, #60000	; 0xea60
    c1d4:	9102      	str	r1, [sp, #8]
    c1d6:	4610      	mov	r0, r2
    c1d8:	f642 71bc 	movw	r1, #12220	; 0x2fbc
    c1dc:	f2c0 0102 	movt	r1, #2
    c1e0:	f642 72cc 	movw	r2, #12236	; 0x2fcc
    c1e4:	f2c0 0202 	movt	r2, #2
    c1e8:	f015 fa96 	bl	21718 <GL_Dialog_VirtualKeyboard>
    c1ec:	4602      	mov	r2, r0
    c1ee:	f107 0308 	add.w	r3, r7, #8
    c1f2:	601a      	str	r2, [r3, #0]
	if (IsColorDisplay())                                                  // Color terminal?
    c1f4:	f014 f9b4 	bl	20560 <IsColorDisplay>
    c1f8:	4603      	mov	r3, r0
    c1fa:	2b00      	cmp	r3, #0
    c1fc:	d01a      	beq.n	c234 <PromptGPRS+0x56c>
		{                                                                      // Yes
			DisplayLeds(_ON_);                                                 // Enable Leds
    c1fe:	2001      	movs	r0, #1
    c200:	f014 febc 	bl	20f7c <DisplayLeds>
			DisplayHeader(iHeader);                                            // Enable Header
    c204:	f107 0314 	add.w	r3, r7, #20
    c208:	6818      	ldr	r0, [r3, #0]
    c20a:	f014 fe89 	bl	20f20 <DisplayHeader>
			if(!GL_GraphicLib_IsTouchPresent(gGoalGraphicLibInstance))                           // Check if it is a touch screen
    c20e:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    c212:	f2c0 0302 	movt	r3, #2
    c216:	681b      	ldr	r3, [r3, #0]
    c218:	4618      	mov	r0, r3
    c21a:	f015 fba7 	bl	2196c <GL_GraphicLib_IsTouchPresent>
    c21e:	4603      	mov	r3, r0
    c220:	f083 0301 	eor.w	r3, r3, #1
    c224:	b2db      	uxtb	r3, r3
    c226:	2b00      	cmp	r3, #0
    c228:	d004      	beq.n	c234 <PromptGPRS+0x56c>
				DisplayFooter(iFooter);                                        // No, restore Footer
    c22a:	f107 0318 	add.w	r3, r7, #24
    c22e:	6818      	ldr	r0, [r3, #0]
    c230:	f014 fe46 	bl	20ec0 <DisplayFooter>
		}
	CHECK((iRet!=GL_KEY_CANCEL) && (iRet!=GL_RESULT_INACTIVITY), lblEnd);  // Exit on cancel/timeout
    c234:	f107 0308 	add.w	r3, r7, #8
    c238:	681a      	ldr	r2, [r3, #0]
    c23a:	f64f 0351 	movw	r3, #63569	; 0xf851
    c23e:	429a      	cmp	r2, r3
    c240:	f000 80d6 	beq.w	c3f0 <PromptGPRS+0x728>
    c244:	f107 0308 	add.w	r3, r7, #8
    c248:	681a      	ldr	r2, [r3, #0]
    c24a:	f64f 0380 	movw	r3, #63616	; 0xf880
    c24e:	429a      	cmp	r2, r3
    c250:	f000 80ce 	beq.w	c3f0 <PromptGPRS+0x728>

	if (strcmp(tcIpAddressN, tcIpAddressP) != 0) {
    c254:	f507 7209 	add.w	r2, r7, #548	; 0x224
    c258:	f507 6385 	add.w	r3, r7, #1064	; 0x428
    c25c:	4610      	mov	r0, r2
    c25e:	4619      	mov	r1, r3
    c260:	f7fc ed3c 	blx	8cdc <_init+0x17c>
    c264:	4603      	mov	r3, r0
    c266:	2b00      	cmp	r3, #0
    c268:	d016      	beq.n	c298 <PromptGPRS+0x5d0>
		iRet = appPut(appGprsIpRemote, tcIpAddressN, strlen(tcIpAddressN));     // Save new Ip address
    c26a:	f507 7309 	add.w	r3, r7, #548	; 0x224
    c26e:	4618      	mov	r0, r3
    c270:	f7fc ed08 	blx	8c84 <_init+0x124>
    c274:	4603      	mov	r3, r0
    c276:	b29b      	uxth	r3, r3
    c278:	f107 0408 	add.w	r4, r7, #8
    c27c:	f507 7209 	add.w	r2, r7, #548	; 0x224
    c280:	2011      	movs	r0, #17
    c282:	4611      	mov	r1, r2
    c284:	461a      	mov	r2, r3
    c286:	f003 f9d7 	bl	f638 <appPut>
    c28a:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblDbaErr);
    c28c:	f107 0308 	add.w	r3, r7, #8
    c290:	681b      	ldr	r3, [r3, #0]
    c292:	2b00      	cmp	r3, #0
    c294:	f2c0 8083 	blt.w	c39e <PromptGPRS+0x6d6>
	}

	// Enter Port number
	// *****************
	memset(tcMask, 0, sizeof(tcMask));
    c298:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c29c:	4618      	mov	r0, r3
    c29e:	2100      	movs	r1, #0
    c2a0:	f44f 7280 	mov.w	r2, #256	; 0x100
    c2a4:	f7fc ec8a 	blx	8bbc <_init+0x5c>
	for (i=0; i<lenGprsPort; i++)
    c2a8:	1d3b      	adds	r3, r7, #4
    c2aa:	2200      	movs	r2, #0
    c2ac:	601a      	str	r2, [r3, #0]
    c2ae:	e015      	b.n	c2dc <PromptGPRS+0x614>
		strcat(tcMask, "/d");                                              // Accept only decimal character
    c2b0:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c2b4:	4618      	mov	r0, r3
    c2b6:	f7fc ece6 	blx	8c84 <_init+0x124>
    c2ba:	4603      	mov	r3, r0
    c2bc:	f507 7292 	add.w	r2, r7, #292	; 0x124
    c2c0:	18d2      	adds	r2, r2, r3
    c2c2:	f642 6338 	movw	r3, #11832	; 0x2e38
    c2c6:	f2c0 0302 	movt	r3, #2
    c2ca:	8819      	ldrh	r1, [r3, #0]
    c2cc:	789b      	ldrb	r3, [r3, #2]
    c2ce:	8011      	strh	r1, [r2, #0]
    c2d0:	7093      	strb	r3, [r2, #2]
	}

	// Enter Port number
	// *****************
	memset(tcMask, 0, sizeof(tcMask));
	for (i=0; i<lenGprsPort; i++)
    c2d2:	1d3b      	adds	r3, r7, #4
    c2d4:	1d3a      	adds	r2, r7, #4
    c2d6:	6812      	ldr	r2, [r2, #0]
    c2d8:	3201      	adds	r2, #1
    c2da:	601a      	str	r2, [r3, #0]
    c2dc:	1d3b      	adds	r3, r7, #4
    c2de:	681b      	ldr	r3, [r3, #0]
    c2e0:	2b04      	cmp	r3, #4
    c2e2:	dde5      	ble.n	c2b0 <PromptGPRS+0x5e8>
		strcat(tcMask, "/d");                                              // Accept only decimal character
	iRet = appGet(appGprsPort, tcPortP, lenGprsPort+1);
    c2e4:	f107 0408 	add.w	r4, r7, #8
    c2e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
    c2ec:	2012      	movs	r0, #18
    c2ee:	4619      	mov	r1, r3
    c2f0:	2206      	movs	r2, #6
    c2f2:	f003 fa09 	bl	f708 <appGet>
    c2f6:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c2f8:	f107 0308 	add.w	r3, r7, #8
    c2fc:	681b      	ldr	r3, [r3, #0]
    c2fe:	2b00      	cmp	r3, #0
    c300:	db4d      	blt.n	c39e <PromptGPRS+0x6d6>
	strcpy(tcPortN, tcPortP);
    c302:	f107 0220 	add.w	r2, r7, #32
    c306:	f107 0328 	add.w	r3, r7, #40	; 0x28
    c30a:	4610      	mov	r0, r2
    c30c:	4619      	mov	r1, r3
    c30e:	f7fc ec88 	blx	8c20 <_init+0xc0>
	iRet = GL_Dialog_Text(gGoalGraphicLibInstance, "Port Number", "Enter Port# :", tcMask, tcPortN, sizeof(tcPortN), GL_TIME_MINUTE);
    c312:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    c316:	f2c0 0302 	movt	r3, #2
    c31a:	681a      	ldr	r2, [r3, #0]
    c31c:	f507 7392 	add.w	r3, r7, #292	; 0x124
    c320:	f107 0120 	add.w	r1, r7, #32
    c324:	9100      	str	r1, [sp, #0]
    c326:	2106      	movs	r1, #6
    c328:	9101      	str	r1, [sp, #4]
    c32a:	f64e 2160 	movw	r1, #60000	; 0xea60
    c32e:	9102      	str	r1, [sp, #8]
    c330:	4610      	mov	r0, r2
    c332:	f642 71e8 	movw	r1, #12264	; 0x2fe8
    c336:	f2c0 0102 	movt	r1, #2
    c33a:	f642 72f4 	movw	r2, #12276	; 0x2ff4
    c33e:	f2c0 0202 	movt	r2, #2
    c342:	f015 f9d7 	bl	216f4 <GL_Dialog_Text>
    c346:	4602      	mov	r2, r0
    c348:	f107 0308 	add.w	r3, r7, #8
    c34c:	601a      	str	r2, [r3, #0]
	CHECK((iRet!=GL_KEY_CANCEL) && (iRet!=GL_RESULT_INACTIVITY), lblEnd);  // Exit on cancel/timeout
    c34e:	f107 0308 	add.w	r3, r7, #8
    c352:	681a      	ldr	r2, [r3, #0]
    c354:	f64f 0351 	movw	r3, #63569	; 0xf851
    c358:	429a      	cmp	r2, r3
    c35a:	d049      	beq.n	c3f0 <PromptGPRS+0x728>
    c35c:	f107 0308 	add.w	r3, r7, #8
    c360:	681a      	ldr	r2, [r3, #0]
    c362:	f64f 0380 	movw	r3, #63616	; 0xf880
    c366:	429a      	cmp	r2, r3
    c368:	d042      	beq.n	c3f0 <PromptGPRS+0x728>
	if (strcmp(tcPortN, tcPortP) != 0)
    c36a:	f107 0220 	add.w	r2, r7, #32
    c36e:	f107 0328 	add.w	r3, r7, #40	; 0x28
    c372:	4610      	mov	r0, r2
    c374:	4619      	mov	r1, r3
    c376:	f7fc ecb2 	blx	8cdc <_init+0x17c>
    c37a:	4603      	mov	r3, r0
    c37c:	2b00      	cmp	r3, #0
    c37e:	d036      	beq.n	c3ee <PromptGPRS+0x726>
	{
		iRet = appPut(appGprsPort, tcPortN, lenGprsPort);                  // Save new Port number
    c380:	f107 0408 	add.w	r4, r7, #8
    c384:	f107 0320 	add.w	r3, r7, #32
    c388:	2012      	movs	r0, #18
    c38a:	4619      	mov	r1, r3
    c38c:	2205      	movs	r2, #5
    c38e:	f003 f953 	bl	f638 <appPut>
    c392:	6020      	str	r0, [r4, #0]
		CHECK(iRet>=0, lblDbaErr);
    c394:	f107 0308 	add.w	r3, r7, #8
    c398:	681b      	ldr	r3, [r3, #0]
    c39a:	2b00      	cmp	r3, #0
    c39c:	da27      	bge.n	c3ee <PromptGPRS+0x726>
	// ****************
//	lblKO:                                                                     // None-classified low level error
//	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
//	goto lblEnd;
	lblDbaErr:                                                                 // Data base error
	Telium_Sprintf(tcDisplay, "%s\n%s", FMG_ErrorMsg(iRet), "Software Reset Needed");
    c39e:	f107 0308 	add.w	r3, r7, #8
    c3a2:	6818      	ldr	r0, [r3, #0]
    c3a4:	f003 ff4a 	bl	1023c <FMG_ErrorMsg>
    c3a8:	4603      	mov	r3, r0
    c3aa:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
    c3ae:	4610      	mov	r0, r2
    c3b0:	f243 0104 	movw	r1, #12292	; 0x3004
    c3b4:	f2c0 0102 	movt	r1, #2
    c3b8:	461a      	mov	r2, r3
    c3ba:	f243 030c 	movw	r3, #12300	; 0x300c
    c3be:	f2c0 0302 	movt	r3, #2
    c3c2:	f014 fa1b 	bl	207fc <Telium_Sprintf>
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    c3c6:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    c3ca:	f2c0 0302 	movt	r3, #2
    c3ce:	681a      	ldr	r2, [r3, #0]
    c3d0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
    c3d4:	2101      	movs	r1, #1
    c3d6:	9100      	str	r1, [sp, #0]
    c3d8:	f241 3188 	movw	r1, #5000	; 0x1388
    c3dc:	9101      	str	r1, [sp, #4]
    c3de:	4610      	mov	r0, r2
    c3e0:	2100      	movs	r1, #0
    c3e2:	461a      	mov	r2, r3
    c3e4:	2304      	movs	r3, #4
    c3e6:	f015 f94f 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
    c3ea:	bf00      	nop
    c3ec:	e000      	b.n	c3f0 <PromptGPRS+0x728>
	{
		iRet = appPut(appGprsPort, tcPortN, lenGprsPort);                  // Save new Port number
		CHECK(iRet>=0, lblDbaErr);
	}

	goto lblEnd;
    c3ee:	bf00      	nop
	Telium_Sprintf(tcDisplay, "%s\n%s", FMG_ErrorMsg(iRet), "Software Reset Needed");
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
	goto lblEnd;
	lblEnd:
	return;
}
    c3f0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    c3f4:	f2c0 0302 	movt	r3, #2
    c3f8:	f8d7 262c 	ldr.w	r2, [r7, #1580]	; 0x62c
    c3fc:	681b      	ldr	r3, [r3, #0]
    c3fe:	429a      	cmp	r2, r3
    c400:	d001      	beq.n	c406 <PromptGPRS+0x73e>
    c402:	f7fc fdcf 	bl	8fa4 <__stack_chk_fail>
    c406:	f507 770d 	add.w	r7, r7, #564	; 0x234
    c40a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    c40e:	46bd      	mov	sp, r7
    c410:	bd90      	pop	{r4, r7, pc}
    c412:	bf00      	nop

0000c414 <ComGPRS>:
//  This function has no parameters.
//  This function has no return value
//****************************************************************************

void ComGPRS(void)
{
    c414:	b5f0      	push	{r4, r5, r6, r7, lr}
    c416:	f2ad 7d74 	subw	sp, sp, #1908	; 0x774
    c41a:	af04      	add	r7, sp, #16
    c41c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    c420:	f2c0 0302 	movt	r3, #2
    c424:	681b      	ldr	r3, [r3, #0]
    c426:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
	// Local variables
	// ***************
	T_GL_HWIDGET hScreen=NULL;    // Screen handle
    c42a:	f107 0308 	add.w	r3, r7, #8
    c42e:	2200      	movs	r2, #0
    c430:	601a      	str	r2, [r3, #0]
	T_GL_HWIDGET hDocument=NULL;  // Document handle
    c432:	f107 030c 	add.w	r3, r7, #12
    c436:	2200      	movs	r2, #0
    c438:	601a      	str	r2, [r3, #0]
	ST_PRN_LINE xLine;
	LL_HANDLE hGPRS=NULL;
    c43a:	f107 0314 	add.w	r3, r7, #20
    c43e:	2200      	movs	r2, #0
    c440:	601a      	str	r2, [r3, #0]
	char tcPort[lenGprsPort+1];
	char tcSnd[MAX_SND+1];
	char tcRsp[MAX_RSP+1];
	char tcDisplay[50+1];
	byte p;
	int iRet=0, iStatus=0;
    c442:	f107 0318 	add.w	r3, r7, #24
    c446:	2200      	movs	r2, #0
    c448:	601a      	str	r2, [r3, #0]
    c44a:	f107 0310 	add.w	r3, r7, #16
    c44e:	2200      	movs	r2, #0
    c450:	601a      	str	r2, [r3, #0]

	hScreen = GoalCreateScreen(gGoalGraphicLibInstance, txGPRS, NUMBER_OF_LINES(txGPRS), GL_ENCODING_UTF8);
    c452:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    c456:	f2c0 0302 	movt	r3, #2
    c45a:	681b      	ldr	r3, [r3, #0]
    c45c:	4618      	mov	r0, r3
    c45e:	f642 119c 	movw	r1, #10652	; 0x299c
    c462:	f2c0 0102 	movt	r1, #2
    c466:	2205      	movs	r2, #5
    c468:	2300      	movs	r3, #0
    c46a:	f000 fe31 	bl	d0d0 <GoalCreateScreen>
    c46e:	4602      	mov	r2, r0
    c470:	f107 0308 	add.w	r3, r7, #8
    c474:	601a      	str	r2, [r3, #0]
	CHECK(hScreen!=NULL, lblKO);                                    // Create screen and clear it
    c476:	f107 0308 	add.w	r3, r7, #8
    c47a:	681b      	ldr	r3, [r3, #0]
    c47c:	2b00      	cmp	r3, #0
    c47e:	f000 846f 	beq.w	cd60 <ComGPRS+0x94c>
	iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL, false);
    c482:	f107 0308 	add.w	r3, r7, #8
    c486:	681b      	ldr	r3, [r3, #0]
    c488:	f107 0418 	add.w	r4, r7, #24
    c48c:	4618      	mov	r0, r3
    c48e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    c492:	2202      	movs	r2, #2
    c494:	2300      	movs	r3, #0
    c496:	f000 ffb9 	bl	d40c <GoalClrScreen>
    c49a:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c49c:	f107 0318 	add.w	r3, r7, #24
    c4a0:	681b      	ldr	r3, [r3, #0]
    c4a2:	2b00      	cmp	r3, #0
    c4a4:	f2c0 845c 	blt.w	cd60 <ComGPRS+0x94c>

	// Attachment to the GPRS network in progress
	// ******************************************
	iRet = GoalDspLine(hScreen, 0, "1-comStart...", &txGPRS[0], 0, true);
    c4a8:	f107 0308 	add.w	r3, r7, #8
    c4ac:	681b      	ldr	r3, [r3, #0]
    c4ae:	f107 0418 	add.w	r4, r7, #24
    c4b2:	2200      	movs	r2, #0
    c4b4:	9200      	str	r2, [sp, #0]
    c4b6:	2201      	movs	r2, #1
    c4b8:	9201      	str	r2, [sp, #4]
    c4ba:	4618      	mov	r0, r3
    c4bc:	2100      	movs	r1, #0
    c4be:	f642 6254 	movw	r2, #11860	; 0x2e54
    c4c2:	f2c0 0202 	movt	r2, #2
    c4c6:	f642 139c 	movw	r3, #10652	; 0x299c
    c4ca:	f2c0 0302 	movt	r3, #2
    c4ce:	f001 f8b7 	bl	d640 <GoalDspLine>
    c4d2:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c4d4:	f107 0318 	add.w	r3, r7, #24
    c4d8:	681b      	ldr	r3, [r3, #0]
    c4da:	2b00      	cmp	r3, #0
    c4dc:	f2c0 8440 	blt.w	cd60 <ComGPRS+0x94c>
	pcStr = tcStr;                                                  // Build param string
    c4e0:	f107 031c 	add.w	r3, r7, #28
    c4e4:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
    c4e8:	601a      	str	r2, [r3, #0]
	iRet = appGet(appGprsApn, pcStr, lenGprsApn+1);                 // Retrieve apn
    c4ea:	f107 0418 	add.w	r4, r7, #24
    c4ee:	f107 031c 	add.w	r3, r7, #28
    c4f2:	200e      	movs	r0, #14
    c4f4:	6819      	ldr	r1, [r3, #0]
    c4f6:	221f      	movs	r2, #31
    c4f8:	f003 f906 	bl	f708 <appGet>
    c4fc:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c4fe:	f107 0318 	add.w	r3, r7, #24
    c502:	681b      	ldr	r3, [r3, #0]
    c504:	2b00      	cmp	r3, #0
    c506:	f2c0 84bd 	blt.w	ce84 <ComGPRS+0xa70>
	pcStr += strlen(pcStr);
    c50a:	f107 031c 	add.w	r3, r7, #28
    c50e:	6818      	ldr	r0, [r3, #0]
    c510:	f7fc ebb8 	blx	8c84 <_init+0x124>
    c514:	4602      	mov	r2, r0
    c516:	f107 031c 	add.w	r3, r7, #28
    c51a:	f107 011c 	add.w	r1, r7, #28
    c51e:	6809      	ldr	r1, [r1, #0]
    c520:	188a      	adds	r2, r1, r2
    c522:	601a      	str	r2, [r3, #0]
	*pcStr = '|'; pcStr++;
    c524:	f107 031c 	add.w	r3, r7, #28
    c528:	681b      	ldr	r3, [r3, #0]
    c52a:	227c      	movs	r2, #124	; 0x7c
    c52c:	701a      	strb	r2, [r3, #0]
    c52e:	f107 031c 	add.w	r3, r7, #28
    c532:	f107 021c 	add.w	r2, r7, #28
    c536:	6812      	ldr	r2, [r2, #0]
    c538:	3201      	adds	r2, #1
    c53a:	601a      	str	r2, [r3, #0]
	iRet = appGet(appGprsUser, pcStr, lenGprsUser+1);               // Retrieve username
    c53c:	f107 0418 	add.w	r4, r7, #24
    c540:	f107 031c 	add.w	r3, r7, #28
    c544:	200f      	movs	r0, #15
    c546:	6819      	ldr	r1, [r3, #0]
    c548:	221f      	movs	r2, #31
    c54a:	f003 f8dd 	bl	f708 <appGet>
    c54e:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c550:	f107 0318 	add.w	r3, r7, #24
    c554:	681b      	ldr	r3, [r3, #0]
    c556:	2b00      	cmp	r3, #0
    c558:	f2c0 8494 	blt.w	ce84 <ComGPRS+0xa70>
	pcStr += strlen(pcStr);
    c55c:	f107 031c 	add.w	r3, r7, #28
    c560:	6818      	ldr	r0, [r3, #0]
    c562:	f7fc eb90 	blx	8c84 <_init+0x124>
    c566:	4602      	mov	r2, r0
    c568:	f107 031c 	add.w	r3, r7, #28
    c56c:	f107 011c 	add.w	r1, r7, #28
    c570:	6809      	ldr	r1, [r1, #0]
    c572:	188a      	adds	r2, r1, r2
    c574:	601a      	str	r2, [r3, #0]
	*pcStr = '|'; pcStr++;
    c576:	f107 031c 	add.w	r3, r7, #28
    c57a:	681b      	ldr	r3, [r3, #0]
    c57c:	227c      	movs	r2, #124	; 0x7c
    c57e:	701a      	strb	r2, [r3, #0]
    c580:	f107 031c 	add.w	r3, r7, #28
    c584:	f107 021c 	add.w	r2, r7, #28
    c588:	6812      	ldr	r2, [r2, #0]
    c58a:	3201      	adds	r2, #1
    c58c:	601a      	str	r2, [r3, #0]
	iRet = appGet(appGprsPass, pcStr, lenGprsPass+1);               // Retrieve password
    c58e:	f107 0418 	add.w	r4, r7, #24
    c592:	f107 031c 	add.w	r3, r7, #28
    c596:	2010      	movs	r0, #16
    c598:	6819      	ldr	r1, [r3, #0]
    c59a:	221f      	movs	r2, #31
    c59c:	f003 f8b4 	bl	f708 <appGet>
    c5a0:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c5a2:	f107 0318 	add.w	r3, r7, #24
    c5a6:	681b      	ldr	r3, [r3, #0]
    c5a8:	2b00      	cmp	r3, #0
    c5aa:	f2c0 846b 	blt.w	ce84 <ComGPRS+0xa70>
	pcStr += strlen(pcStr);
    c5ae:	f107 031c 	add.w	r3, r7, #28
    c5b2:	6818      	ldr	r0, [r3, #0]
    c5b4:	f7fc eb66 	blx	8c84 <_init+0x124>
    c5b8:	4602      	mov	r2, r0
    c5ba:	f107 031c 	add.w	r3, r7, #28
    c5be:	f107 011c 	add.w	r1, r7, #28
    c5c2:	6809      	ldr	r1, [r1, #0]
    c5c4:	188a      	adds	r2, r1, r2
    c5c6:	601a      	str	r2, [r3, #0]
	*pcStr = '|';
    c5c8:	f107 031c 	add.w	r3, r7, #28
    c5cc:	681b      	ldr	r3, [r3, #0]
    c5ce:	227c      	movs	r2, #124	; 0x7c
    c5d0:	701a      	strb	r2, [r3, #0]
	iRet = appGet(appGprsUser, tcUser, lenGprsUser+1);              // Retrieve username to show
    c5d2:	f107 0418 	add.w	r4, r7, #24
    c5d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
    c5da:	200f      	movs	r0, #15
    c5dc:	4619      	mov	r1, r3
    c5de:	221f      	movs	r2, #31
    c5e0:	f003 f892 	bl	f708 <appGet>
    c5e4:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c5e6:	f107 0318 	add.w	r3, r7, #24
    c5ea:	681b      	ldr	r3, [r3, #0]
    c5ec:	2b00      	cmp	r3, #0
    c5ee:	f2c0 8449 	blt.w	ce84 <ComGPRS+0xa70>
	iRet = GoalDspLine(hScreen, 1, tcUser, &txGPRS[1], 0, true);    // Show username
    c5f2:	f107 0308 	add.w	r3, r7, #8
    c5f6:	681a      	ldr	r2, [r3, #0]
    c5f8:	f107 0418 	add.w	r4, r7, #24
    c5fc:	f107 0378 	add.w	r3, r7, #120	; 0x78
    c600:	2100      	movs	r1, #0
    c602:	9100      	str	r1, [sp, #0]
    c604:	2101      	movs	r1, #1
    c606:	9101      	str	r1, [sp, #4]
    c608:	4610      	mov	r0, r2
    c60a:	2101      	movs	r1, #1
    c60c:	461a      	mov	r2, r3
    c60e:	4bc9      	ldr	r3, [pc, #804]	; (c934 <ComGPRS+0x520>)
    c610:	f001 f816 	bl	d640 <GoalDspLine>
    c614:	6020      	str	r0, [r4, #0]
	iRet = StartGPRS(hScreen, tcStr);                               // ** Start **
    c616:	f107 0308 	add.w	r3, r7, #8
    c61a:	681a      	ldr	r2, [r3, #0]
    c61c:	f107 0418 	add.w	r4, r7, #24
    c620:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
    c624:	4610      	mov	r0, r2
    c626:	4619      	mov	r1, r3
    c628:	f7fe ffba 	bl	b5a0 <StartGPRS>
    c62c:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblComKO);
    c62e:	f107 0318 	add.w	r3, r7, #24
    c632:	681b      	ldr	r3, [r3, #0]
    c634:	2b00      	cmp	r3, #0
    c636:	f2c0 83a7 	blt.w	cd88 <ComGPRS+0x974>
	CHECK(iRet!=0, lblEnd);                                         // Exit on cancel/timeout
    c63a:	f107 0318 	add.w	r3, r7, #24
    c63e:	681b      	ldr	r3, [r3, #0]
    c640:	2b00      	cmp	r3, #0
    c642:	f000 8447 	beq.w	ced4 <ComGPRS+0xac0>
	iRet = GoalDspLine(hScreen, 2, "1-comStart OK", &txGPRS[2], 0, true);
    c646:	f107 0308 	add.w	r3, r7, #8
    c64a:	681b      	ldr	r3, [r3, #0]
    c64c:	f107 0418 	add.w	r4, r7, #24
    c650:	2200      	movs	r2, #0
    c652:	9200      	str	r2, [sp, #0]
    c654:	2201      	movs	r2, #1
    c656:	9201      	str	r2, [sp, #4]
    c658:	4618      	mov	r0, r3
    c65a:	2102      	movs	r1, #2
    c65c:	f243 0224 	movw	r2, #12324	; 0x3024
    c660:	f2c0 0202 	movt	r2, #2
    c664:	4bb4      	ldr	r3, [pc, #720]	; (c938 <ComGPRS+0x524>)
    c666:	f000 ffeb 	bl	d640 <GoalDspLine>
    c66a:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c66c:	f107 0318 	add.w	r3, r7, #24
    c670:	681b      	ldr	r3, [r3, #0]
    c672:	2b00      	cmp	r3, #0
    c674:	f2c0 8374 	blt.w	cd60 <ComGPRS+0x94c>

	// Transmission through GPRS layer in progress
	// *******************************************
	memset(tcSnd, 0, sizeof(tcSnd));
    c678:	f507 7355 	add.w	r3, r7, #852	; 0x354
    c67c:	4618      	mov	r0, r3
    c67e:	2100      	movs	r1, #0
    c680:	f240 2201 	movw	r2, #513	; 0x201
    c684:	f7fc ea9a 	blx	8bbc <_init+0x5c>
	memset(tcRsp, 0, sizeof(tcRsp));
    c688:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
    c68c:	4618      	mov	r0, r3
    c68e:	2100      	movs	r1, #0
    c690:	f240 2201 	movw	r2, #513	; 0x201
    c694:	f7fc ea92 	blx	8bbc <_init+0x5c>

	// Open GPRS layer
	// ===============
	iRet = GoalDspLine(hScreen, 3, "2-comOpen...", &txGPRS[3], 0, true);
    c698:	f107 0308 	add.w	r3, r7, #8
    c69c:	681b      	ldr	r3, [r3, #0]
    c69e:	f107 0418 	add.w	r4, r7, #24
    c6a2:	2200      	movs	r2, #0
    c6a4:	9200      	str	r2, [sp, #0]
    c6a6:	2201      	movs	r2, #1
    c6a8:	9201      	str	r2, [sp, #4]
    c6aa:	4618      	mov	r0, r3
    c6ac:	2103      	movs	r1, #3
    c6ae:	f243 0234 	movw	r2, #12340	; 0x3034
    c6b2:	f2c0 0202 	movt	r2, #2
    c6b6:	4ba1      	ldr	r3, [pc, #644]	; (c93c <ComGPRS+0x528>)
    c6b8:	f000 ffc2 	bl	d640 <GoalDspLine>
    c6bc:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c6be:	f107 0318 	add.w	r3, r7, #24
    c6c2:	681b      	ldr	r3, [r3, #0]
    c6c4:	2b00      	cmp	r3, #0
    c6c6:	f2c0 834b 	blt.w	cd60 <ComGPRS+0x94c>
	iRet = appGet(appGprsIpRemote, tcIpAddress, lenGprsIpRemote+1);   // Retrieve remote IP
    c6ca:	f107 0418 	add.w	r4, r7, #24
    c6ce:	f507 73a8 	add.w	r3, r7, #336	; 0x150
    c6d2:	2011      	movs	r0, #17
    c6d4:	4619      	mov	r1, r3
    c6d6:	f240 2201 	movw	r2, #513	; 0x201
    c6da:	f003 f815 	bl	f708 <appGet>
    c6de:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c6e0:	f107 0318 	add.w	r3, r7, #24
    c6e4:	681b      	ldr	r3, [r3, #0]
    c6e6:	2b00      	cmp	r3, #0
    c6e8:	f2c0 83cc 	blt.w	ce84 <ComGPRS+0xa70>
	iRet = GoalDspLine(hScreen, 4, tcIpAddress, &txGPRS[4], 0, true); // Show IP Address
    c6ec:	f107 0308 	add.w	r3, r7, #8
    c6f0:	681a      	ldr	r2, [r3, #0]
    c6f2:	f107 0418 	add.w	r4, r7, #24
    c6f6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
    c6fa:	2100      	movs	r1, #0
    c6fc:	9100      	str	r1, [sp, #0]
    c6fe:	2101      	movs	r1, #1
    c700:	9101      	str	r1, [sp, #4]
    c702:	4610      	mov	r0, r2
    c704:	2104      	movs	r1, #4
    c706:	461a      	mov	r2, r3
    c708:	4b8d      	ldr	r3, [pc, #564]	; (c940 <ComGPRS+0x52c>)
    c70a:	f000 ff99 	bl	d640 <GoalDspLine>
    c70e:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c710:	f107 0318 	add.w	r3, r7, #24
    c714:	681b      	ldr	r3, [r3, #0]
    c716:	2b00      	cmp	r3, #0
    c718:	f2c0 8322 	blt.w	cd60 <ComGPRS+0x94c>
	iRet = appGet(appGprsPort, tcPort, lenGprsPort+1);                // Retrieve port number
    c71c:	f107 0418 	add.w	r4, r7, #24
    c720:	f107 0370 	add.w	r3, r7, #112	; 0x70
    c724:	2012      	movs	r0, #18
    c726:	4619      	mov	r1, r3
    c728:	2206      	movs	r2, #6
    c72a:	f002 ffed 	bl	f708 <appGet>
    c72e:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblDbaErr);
    c730:	f107 0318 	add.w	r3, r7, #24
    c734:	681b      	ldr	r3, [r3, #0]
    c736:	2b00      	cmp	r3, #0
    c738:	f2c0 83a4 	blt.w	ce84 <ComGPRS+0xa70>
	iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL, false); // Clear screen
    c73c:	f107 0308 	add.w	r3, r7, #8
    c740:	681b      	ldr	r3, [r3, #0]
    c742:	f107 0418 	add.w	r4, r7, #24
    c746:	4618      	mov	r0, r3
    c748:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    c74c:	2202      	movs	r2, #2
    c74e:	2300      	movs	r3, #0
    c750:	f000 fe5c 	bl	d40c <GoalClrScreen>
    c754:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c756:	f107 0318 	add.w	r3, r7, #24
    c75a:	681b      	ldr	r3, [r3, #0]
    c75c:	2b00      	cmp	r3, #0
    c75e:	f2c0 82ff 	blt.w	cd60 <ComGPRS+0x94c>
	iRet = GoalDspLine(hScreen, 0, tcPort, &txGPRS[0], 0, true);      // Show port number
    c762:	f107 0308 	add.w	r3, r7, #8
    c766:	681a      	ldr	r2, [r3, #0]
    c768:	f107 0418 	add.w	r4, r7, #24
    c76c:	f107 0370 	add.w	r3, r7, #112	; 0x70
    c770:	2100      	movs	r1, #0
    c772:	9100      	str	r1, [sp, #0]
    c774:	2101      	movs	r1, #1
    c776:	9101      	str	r1, [sp, #4]
    c778:	4610      	mov	r0, r2
    c77a:	2100      	movs	r1, #0
    c77c:	461a      	mov	r2, r3
    c77e:	f642 139c 	movw	r3, #10652	; 0x299c
    c782:	f2c0 0302 	movt	r3, #2
    c786:	f000 ff5b 	bl	d640 <GoalDspLine>
    c78a:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c78c:	f107 0318 	add.w	r3, r7, #24
    c790:	681b      	ldr	r3, [r3, #0]
    c792:	2b00      	cmp	r3, #0
    c794:	f2c0 82e4 	blt.w	cd60 <ComGPRS+0x94c>
	Telium_Sprintf (tcStr, "%s|%s", tcIpAddress, tcPort);
    c798:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
    c79c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
    c7a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
    c7a4:	4608      	mov	r0, r1
    c7a6:	f243 0144 	movw	r1, #12356	; 0x3044
    c7aa:	f2c0 0102 	movt	r1, #2
    c7ae:	f014 f825 	bl	207fc <Telium_Sprintf>
	hGPRS = OpenGPRS(tcStr);                                          // ** Open **
    c7b2:	f107 0414 	add.w	r4, r7, #20
    c7b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
    c7ba:	4618      	mov	r0, r3
    c7bc:	f7ff f83a 	bl	b834 <OpenGPRS>
    c7c0:	6020      	str	r0, [r4, #0]
	CHECK(hGPRS!=NULL, lblKO);
    c7c2:	f107 0314 	add.w	r3, r7, #20
    c7c6:	681b      	ldr	r3, [r3, #0]
    c7c8:	2b00      	cmp	r3, #0
    c7ca:	f000 82c9 	beq.w	cd60 <ComGPRS+0x94c>
	iRet = GoalDspLine(hScreen, 1, "2-comOpen OK", &txGPRS[1], 0, true);
    c7ce:	f107 0308 	add.w	r3, r7, #8
    c7d2:	681b      	ldr	r3, [r3, #0]
    c7d4:	f107 0418 	add.w	r4, r7, #24
    c7d8:	2200      	movs	r2, #0
    c7da:	9200      	str	r2, [sp, #0]
    c7dc:	2201      	movs	r2, #1
    c7de:	9201      	str	r2, [sp, #4]
    c7e0:	4618      	mov	r0, r3
    c7e2:	2101      	movs	r1, #1
    c7e4:	f243 024c 	movw	r2, #12364	; 0x304c
    c7e8:	f2c0 0202 	movt	r2, #2
    c7ec:	4b51      	ldr	r3, [pc, #324]	; (c934 <ComGPRS+0x520>)
    c7ee:	f000 ff27 	bl	d640 <GoalDspLine>
    c7f2:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c7f4:	f107 0318 	add.w	r3, r7, #24
    c7f8:	681b      	ldr	r3, [r3, #0]
    c7fa:	2b00      	cmp	r3, #0
    c7fc:	f2c0 82b0 	blt.w	cd60 <ComGPRS+0x94c>

	// Connect GPRS layer
	// ==================
	iRet = GoalDspLine(hScreen, 2, "3-comConnect...", &txGPRS[2], 0, true);
    c800:	f107 0308 	add.w	r3, r7, #8
    c804:	681b      	ldr	r3, [r3, #0]
    c806:	f107 0418 	add.w	r4, r7, #24
    c80a:	2200      	movs	r2, #0
    c80c:	9200      	str	r2, [sp, #0]
    c80e:	2201      	movs	r2, #1
    c810:	9201      	str	r2, [sp, #4]
    c812:	4618      	mov	r0, r3
    c814:	2102      	movs	r1, #2
    c816:	f243 025c 	movw	r2, #12380	; 0x305c
    c81a:	f2c0 0202 	movt	r2, #2
    c81e:	4b46      	ldr	r3, [pc, #280]	; (c938 <ComGPRS+0x524>)
    c820:	f000 ff0e 	bl	d640 <GoalDspLine>
    c824:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c826:	f107 0318 	add.w	r3, r7, #24
    c82a:	681b      	ldr	r3, [r3, #0]
    c82c:	2b00      	cmp	r3, #0
    c82e:	f2c0 8297 	blt.w	cd60 <ComGPRS+0x94c>
	iRet = ConnectGPRS(hGPRS);                                        // ** Connect **
    c832:	f107 0418 	add.w	r4, r7, #24
    c836:	f107 0314 	add.w	r3, r7, #20
    c83a:	6818      	ldr	r0, [r3, #0]
    c83c:	f7ff f8ee 	bl	ba1c <ConnectGPRS>
    c840:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblComKO);
    c842:	f107 0318 	add.w	r3, r7, #24
    c846:	681b      	ldr	r3, [r3, #0]
    c848:	2b00      	cmp	r3, #0
    c84a:	f2c0 829d 	blt.w	cd88 <ComGPRS+0x974>
	iRet = GoalDspLine(hScreen, 3, "3-comConnect OK", &txGPRS[3], 0, true);
    c84e:	f107 0308 	add.w	r3, r7, #8
    c852:	681b      	ldr	r3, [r3, #0]
    c854:	f107 0418 	add.w	r4, r7, #24
    c858:	2200      	movs	r2, #0
    c85a:	9200      	str	r2, [sp, #0]
    c85c:	2201      	movs	r2, #1
    c85e:	9201      	str	r2, [sp, #4]
    c860:	4618      	mov	r0, r3
    c862:	2103      	movs	r1, #3
    c864:	f243 026c 	movw	r2, #12396	; 0x306c
    c868:	f2c0 0202 	movt	r2, #2
    c86c:	4b33      	ldr	r3, [pc, #204]	; (c93c <ComGPRS+0x528>)
    c86e:	f000 fee7 	bl	d640 <GoalDspLine>
    c872:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c874:	f107 0318 	add.w	r3, r7, #24
    c878:	681b      	ldr	r3, [r3, #0]
    c87a:	2b00      	cmp	r3, #0
    c87c:	f2c0 8270 	blt.w	cd60 <ComGPRS+0x94c>

	// Clear sending/receiving buffers
	// ===============================
	iRet = LL_ClearSendBuffer(hGPRS);
    c880:	f107 0418 	add.w	r4, r7, #24
    c884:	f107 0314 	add.w	r3, r7, #20
    c888:	6818      	ldr	r0, [r3, #0]
    c88a:	f012 fe1e 	bl	1f4ca <LL_ClearSendBuffer>
    c88e:	6020      	str	r0, [r4, #0]
	CHECK(iRet==LL_ERROR_OK, lblComKO);
    c890:	f107 0318 	add.w	r3, r7, #24
    c894:	681b      	ldr	r3, [r3, #0]
    c896:	2b00      	cmp	r3, #0
    c898:	f040 8276 	bne.w	cd88 <ComGPRS+0x974>
	iRet = LL_ClearReceiveBuffer(hGPRS);
    c89c:	f107 0418 	add.w	r4, r7, #24
    c8a0:	f107 0314 	add.w	r3, r7, #20
    c8a4:	6818      	ldr	r0, [r3, #0]
    c8a6:	f012 fdfe 	bl	1f4a6 <LL_ClearReceiveBuffer>
    c8aa:	6020      	str	r0, [r4, #0]
	CHECK(iRet==LL_ERROR_OK, lblComKO);
    c8ac:	f107 0318 	add.w	r3, r7, #24
    c8b0:	681b      	ldr	r3, [r3, #0]
    c8b2:	2b00      	cmp	r3, #0
    c8b4:	f040 8268 	bne.w	cd88 <ComGPRS+0x974>

	// Send data through GPRS layer
	// ============================
	iRet = GoalDspLine(hScreen, 4, "4-comSend...", &txGPRS[4], 0, true);
    c8b8:	f107 0308 	add.w	r3, r7, #8
    c8bc:	681b      	ldr	r3, [r3, #0]
    c8be:	f107 0418 	add.w	r4, r7, #24
    c8c2:	2200      	movs	r2, #0
    c8c4:	9200      	str	r2, [sp, #0]
    c8c6:	2201      	movs	r2, #1
    c8c8:	9201      	str	r2, [sp, #4]
    c8ca:	4618      	mov	r0, r3
    c8cc:	2104      	movs	r1, #4
    c8ce:	f243 027c 	movw	r2, #12412	; 0x307c
    c8d2:	f2c0 0202 	movt	r2, #2
    c8d6:	4b1a      	ldr	r3, [pc, #104]	; (c940 <ComGPRS+0x52c>)
    c8d8:	f000 feb2 	bl	d640 <GoalDspLine>
    c8dc:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c8de:	f107 0318 	add.w	r3, r7, #24
    c8e2:	681b      	ldr	r3, [r3, #0]
    c8e4:	2b00      	cmp	r3, #0
    c8e6:	f2c0 823b 	blt.w	cd60 <ComGPRS+0x94c>

	mapGet(traMessagePack, tcSnd, appLen(traMessagePack));
    c8ea:	201f      	movs	r0, #31
    c8ec:	f002 fdc6 	bl	f47c <appLen>
    c8f0:	4603      	mov	r3, r0
    c8f2:	f507 7255 	add.w	r2, r7, #852	; 0x354
    c8f6:	201f      	movs	r0, #31
    c8f8:	4611      	mov	r1, r2
    c8fa:	461a      	mov	r2, r3
    c8fc:	f009 fe14 	bl	16528 <mapGet>
//	strcpy(tcSnd, "Kevin Njenga\n"                          // Data to send
//			"Hello, do you hear me?\n"
//			"Hello, do you hear me?\n"
//			"Hello, do you hear me?\n"
//			"Hello, do you hear me?\n");
	iRet = SendGPRS(hGPRS, tcSnd, (word) strlen(tcSnd));              // ** Send data **
    c900:	f507 7355 	add.w	r3, r7, #852	; 0x354
    c904:	4618      	mov	r0, r3
    c906:	f7fc e9be 	blx	8c84 <_init+0x124>
    c90a:	4603      	mov	r3, r0
    c90c:	b29b      	uxth	r3, r3
    c90e:	f107 0418 	add.w	r4, r7, #24
    c912:	f107 0114 	add.w	r1, r7, #20
    c916:	f507 7255 	add.w	r2, r7, #852	; 0x354
    c91a:	6808      	ldr	r0, [r1, #0]
    c91c:	4611      	mov	r1, r2
    c91e:	461a      	mov	r2, r3
    c920:	f7ff f89a 	bl	ba58 <SendGPRS>
    c924:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblComKO);
    c926:	f107 0318 	add.w	r3, r7, #24
    c92a:	681b      	ldr	r3, [r3, #0]
    c92c:	2b00      	cmp	r3, #0
    c92e:	f2c0 822b 	blt.w	cd88 <ComGPRS+0x974>
    c932:	e007      	b.n	c944 <ComGPRS+0x530>
    c934:	00022a48 	.word	0x00022a48
    c938:	00022af4 	.word	0x00022af4
    c93c:	00022ba0 	.word	0x00022ba0
    c940:	00022c4c 	.word	0x00022c4c
	iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL, false); // Clear screen
    c944:	f107 0308 	add.w	r3, r7, #8
    c948:	681b      	ldr	r3, [r3, #0]
    c94a:	f107 0418 	add.w	r4, r7, #24
    c94e:	4618      	mov	r0, r3
    c950:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    c954:	2202      	movs	r2, #2
    c956:	2300      	movs	r3, #0
    c958:	f000 fd58 	bl	d40c <GoalClrScreen>
    c95c:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c95e:	f107 0318 	add.w	r3, r7, #24
    c962:	681b      	ldr	r3, [r3, #0]
    c964:	2b00      	cmp	r3, #0
    c966:	f2c0 81fb 	blt.w	cd60 <ComGPRS+0x94c>
	iRet = GoalDspLine(hScreen, 0, "4-comSend OK", &txGPRS[0], 0, true);
    c96a:	f107 0308 	add.w	r3, r7, #8
    c96e:	681b      	ldr	r3, [r3, #0]
    c970:	f107 0418 	add.w	r4, r7, #24
    c974:	2200      	movs	r2, #0
    c976:	9200      	str	r2, [sp, #0]
    c978:	2201      	movs	r2, #1
    c97a:	9201      	str	r2, [sp, #4]
    c97c:	4618      	mov	r0, r3
    c97e:	2100      	movs	r1, #0
    c980:	f243 028c 	movw	r2, #12428	; 0x308c
    c984:	f2c0 0202 	movt	r2, #2
    c988:	f642 139c 	movw	r3, #10652	; 0x299c
    c98c:	f2c0 0302 	movt	r3, #2
    c990:	f000 fe56 	bl	d640 <GoalDspLine>
    c994:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c996:	f107 0318 	add.w	r3, r7, #24
    c99a:	681b      	ldr	r3, [r3, #0]
    c99c:	2b00      	cmp	r3, #0
    c99e:	f2c0 81df 	blt.w	cd60 <ComGPRS+0x94c>

	// Receive data through GPRS layer
	// ===============================
	iRet = GoalDspLine(hScreen, 1, "5-comRec...", &txGPRS[1], 0, true);
    c9a2:	f107 0308 	add.w	r3, r7, #8
    c9a6:	681b      	ldr	r3, [r3, #0]
    c9a8:	f107 0418 	add.w	r4, r7, #24
    c9ac:	2200      	movs	r2, #0
    c9ae:	9200      	str	r2, [sp, #0]
    c9b0:	2201      	movs	r2, #1
    c9b2:	9201      	str	r2, [sp, #4]
    c9b4:	4618      	mov	r0, r3
    c9b6:	2101      	movs	r1, #1
    c9b8:	f243 029c 	movw	r2, #12444	; 0x309c
    c9bc:	f2c0 0202 	movt	r2, #2
    c9c0:	4bb9      	ldr	r3, [pc, #740]	; (cca8 <ComGPRS+0x894>)
    c9c2:	f000 fe3d 	bl	d640 <GoalDspLine>
    c9c6:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    c9c8:	f107 0318 	add.w	r3, r7, #24
    c9cc:	681b      	ldr	r3, [r3, #0]
    c9ce:	2b00      	cmp	r3, #0
    c9d0:	f2c0 81c6 	blt.w	cd60 <ComGPRS+0x94c>
	iRet = ReceiveGPRS(hGPRS, hScreen, tcRsp, sizeof(tcRsp), 30);     // ** Receive data **
    c9d4:	f107 0308 	add.w	r3, r7, #8
    c9d8:	681a      	ldr	r2, [r3, #0]
    c9da:	f107 0418 	add.w	r4, r7, #24
    c9de:	f107 0114 	add.w	r1, r7, #20
    c9e2:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
    c9e6:	201e      	movs	r0, #30
    c9e8:	9000      	str	r0, [sp, #0]
    c9ea:	6808      	ldr	r0, [r1, #0]
    c9ec:	4611      	mov	r1, r2
    c9ee:	461a      	mov	r2, r3
    c9f0:	f240 2301 	movw	r3, #513	; 0x201
    c9f4:	f7ff f85e 	bl	bab4 <ReceiveGPRS>
    c9f8:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblComKO);
    c9fa:	f107 0318 	add.w	r3, r7, #24
    c9fe:	681b      	ldr	r3, [r3, #0]
    ca00:	2b00      	cmp	r3, #0
    ca02:	f2c0 81c1 	blt.w	cd88 <ComGPRS+0x974>
	if (iRet > MAX_RSP) strcpy (tcRsp, "Buffer overflow Max=512");    // Data overflow
    ca06:	f107 0318 	add.w	r3, r7, #24
    ca0a:	681b      	ldr	r3, [r3, #0]
    ca0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    ca10:	dd0d      	ble.n	ca2e <ComGPRS+0x61a>
    ca12:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
    ca16:	f243 03a8 	movw	r3, #12456	; 0x30a8
    ca1a:	f2c0 0302 	movt	r3, #2
    ca1e:	4614      	mov	r4, r2
    ca20:	461d      	mov	r5, r3
    ca22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ca24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ca26:	e895 0003 	ldmia.w	r5, {r0, r1}
    ca2a:	e884 0003 	stmia.w	r4, {r0, r1}
	iRet = GoalDspLine(hScreen, 2, "5-comRec OK", &txGPRS[2], 0, true);
    ca2e:	f107 0308 	add.w	r3, r7, #8
    ca32:	681b      	ldr	r3, [r3, #0]
    ca34:	f107 0418 	add.w	r4, r7, #24
    ca38:	2200      	movs	r2, #0
    ca3a:	9200      	str	r2, [sp, #0]
    ca3c:	2201      	movs	r2, #1
    ca3e:	9201      	str	r2, [sp, #4]
    ca40:	4618      	mov	r0, r3
    ca42:	2102      	movs	r1, #2
    ca44:	f243 02c0 	movw	r2, #12480	; 0x30c0
    ca48:	f2c0 0202 	movt	r2, #2
    ca4c:	4b97      	ldr	r3, [pc, #604]	; (ccac <ComGPRS+0x898>)
    ca4e:	f000 fdf7 	bl	d640 <GoalDspLine>
    ca52:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    ca54:	f107 0318 	add.w	r3, r7, #24
    ca58:	681b      	ldr	r3, [r3, #0]
    ca5a:	2b00      	cmp	r3, #0
    ca5c:	f2c0 8180 	blt.w	cd60 <ComGPRS+0x94c>

	// Disconnection
	// =============
	iRet = DisconnectGPRS(hGPRS);                                     // ** Disconnect **
    ca60:	f107 0418 	add.w	r4, r7, #24
    ca64:	f107 0314 	add.w	r3, r7, #20
    ca68:	6818      	ldr	r0, [r3, #0]
    ca6a:	f7ff f8d3 	bl	bc14 <DisconnectGPRS>
    ca6e:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblComKO);
    ca70:	f107 0318 	add.w	r3, r7, #24
    ca74:	681b      	ldr	r3, [r3, #0]
    ca76:	2b00      	cmp	r3, #0
    ca78:	f2c0 8186 	blt.w	cd88 <ComGPRS+0x974>
	iRet = GoalDspLine(hScreen, 3, "6-comDisconn OK", &txGPRS[3], 0, true);
    ca7c:	f107 0308 	add.w	r3, r7, #8
    ca80:	681b      	ldr	r3, [r3, #0]
    ca82:	f107 0418 	add.w	r4, r7, #24
    ca86:	2200      	movs	r2, #0
    ca88:	9200      	str	r2, [sp, #0]
    ca8a:	2201      	movs	r2, #1
    ca8c:	9201      	str	r2, [sp, #4]
    ca8e:	4618      	mov	r0, r3
    ca90:	2103      	movs	r1, #3
    ca92:	f243 02cc 	movw	r2, #12492	; 0x30cc
    ca96:	f2c0 0202 	movt	r2, #2
    ca9a:	4b85      	ldr	r3, [pc, #532]	; (ccb0 <ComGPRS+0x89c>)
    ca9c:	f000 fdd0 	bl	d640 <GoalDspLine>
    caa0:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    caa2:	f107 0318 	add.w	r3, r7, #24
    caa6:	681b      	ldr	r3, [r3, #0]
    caa8:	2b00      	cmp	r3, #0
    caaa:	f2c0 8159 	blt.w	cd60 <ComGPRS+0x94c>
	iRet = CloseGPRS(hGPRS);                                          // ** Close **
    caae:	f107 0418 	add.w	r4, r7, #24
    cab2:	f107 0314 	add.w	r3, r7, #20
    cab6:	6818      	ldr	r0, [r3, #0]
    cab8:	f7ff f8ca 	bl	bc50 <CloseGPRS>
    cabc:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblComKO);
    cabe:	f107 0318 	add.w	r3, r7, #24
    cac2:	681b      	ldr	r3, [r3, #0]
    cac4:	2b00      	cmp	r3, #0
    cac6:	f2c0 815f 	blt.w	cd88 <ComGPRS+0x974>

	// Display transmission data
	// =========================
	iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL | KEY_VALID, false);
    caca:	f107 0308 	add.w	r3, r7, #8
    cace:	681b      	ldr	r3, [r3, #0]
    cad0:	f107 0418 	add.w	r4, r7, #24
    cad4:	4618      	mov	r0, r3
    cad6:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    cada:	2203      	movs	r2, #3
    cadc:	2300      	movs	r3, #0
    cade:	f000 fc95 	bl	d40c <GoalClrScreen>
    cae2:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);                                            // Clear screen
    cae4:	f107 0318 	add.w	r3, r7, #24
    cae8:	681b      	ldr	r3, [r3, #0]
    caea:	2b00      	cmp	r3, #0
    caec:	f2c0 8138 	blt.w	cd60 <ComGPRS+0x94c>
	iRet = GoalDspMultiLine(hScreen, 0, tcRsp, strlen(tcRsp), txGPRS, NUMBER_OF_LINES(txGPRS), 0, true);
    caf0:	f107 0308 	add.w	r3, r7, #8
    caf4:	681e      	ldr	r6, [r3, #0]
    caf6:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
    cafa:	4618      	mov	r0, r3
    cafc:	f7fc e8c2 	blx	8c84 <_init+0x124>
    cb00:	4603      	mov	r3, r0
    cb02:	461d      	mov	r5, r3
    cb04:	f107 0418 	add.w	r4, r7, #24
    cb08:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
    cb0c:	f642 139c 	movw	r3, #10652	; 0x299c
    cb10:	f2c0 0302 	movt	r3, #2
    cb14:	9300      	str	r3, [sp, #0]
    cb16:	2305      	movs	r3, #5
    cb18:	9301      	str	r3, [sp, #4]
    cb1a:	2300      	movs	r3, #0
    cb1c:	9302      	str	r3, [sp, #8]
    cb1e:	2301      	movs	r3, #1
    cb20:	9303      	str	r3, [sp, #12]
    cb22:	4630      	mov	r0, r6
    cb24:	2100      	movs	r1, #0
    cb26:	462b      	mov	r3, r5
    cb28:	f000 ff5e 	bl	d9e8 <GoalDspMultiLine>
    cb2c:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);                                            // Show data to receive
    cb2e:	f107 0318 	add.w	r3, r7, #24
    cb32:	681b      	ldr	r3, [r3, #0]
    cb34:	2b00      	cmp	r3, #0
    cb36:	f2c0 8113 	blt.w	cd60 <ComGPRS+0x94c>

	// Print transmission data
	// =======================
	p=0;
    cb3a:	1dfb      	adds	r3, r7, #7
    cb3c:	2200      	movs	r2, #0
    cb3e:	701a      	strb	r2, [r3, #0]
	hDocument = GoalCreateDocument(gGoalGraphicLibInstance, GL_ENCODING_UTF8);          // Create document
    cb40:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    cb44:	f2c0 0302 	movt	r3, #2
    cb48:	681b      	ldr	r3, [r3, #0]
    cb4a:	4618      	mov	r0, r3
    cb4c:	2100      	movs	r1, #0
    cb4e:	f002 f9c3 	bl	eed8 <GoalCreateDocument>
    cb52:	4602      	mov	r2, r0
    cb54:	f107 030c 	add.w	r3, r7, #12
    cb58:	601a      	str	r2, [r3, #0]
	CHECK(hDocument!=NULL, lblKO);
    cb5a:	f107 030c 	add.w	r3, r7, #12
    cb5e:	681b      	ldr	r3, [r3, #0]
    cb60:	2b00      	cmp	r3, #0
    cb62:	f000 80fd 	beq.w	cd60 <ComGPRS+0x94c>

	xLine = xPrinter;                                                 // Build document (Demo, Tx/Rx data)
    cb66:	f107 0220 	add.w	r2, r7, #32
    cb6a:	f642 43f8 	movw	r3, #11512	; 0x2cf8
    cb6e:	f2c0 0302 	movt	r3, #2
    cb72:	4611      	mov	r1, r2
    cb74:	461a      	mov	r2, r3
    cb76:	2350      	movs	r3, #80	; 0x50
    cb78:	4608      	mov	r0, r1
    cb7a:	4611      	mov	r1, r2
    cb7c:	461a      	mov	r2, r3
    cb7e:	f7fc e87c 	blx	8c78 <_init+0x118>
	xLine.eTextAlign = GL_ALIGN_CENTER;
    cb82:	f107 0320 	add.w	r3, r7, #32
    cb86:	2200      	movs	r2, #0
    cb88:	601a      	str	r2, [r3, #0]
	xLine.bReverse = TRUE;
    cb8a:	f107 0320 	add.w	r3, r7, #32
    cb8e:	2201      	movs	r2, #1
    cb90:	721a      	strb	r2, [r3, #8]
	xLine.xMargin.usBottom = PIXEL_BOTTOM;
    cb92:	f107 0320 	add.w	r3, r7, #32
    cb96:	2228      	movs	r2, #40	; 0x28
    cb98:	641a      	str	r2, [r3, #64]	; 0x40
	xLine.xFont.eScale = GL_SCALE_XXLARGE;
    cb9a:	f107 0320 	add.w	r3, r7, #32
    cb9e:	f643 72f6 	movw	r2, #16374	; 0x3ff6
    cba2:	64da      	str	r2, [r3, #76]	; 0x4c
	iRet = GoalPrnLine(hDocument, p++, "GPRS Demo", &xLine);
    cba4:	f107 030c 	add.w	r3, r7, #12
    cba8:	6819      	ldr	r1, [r3, #0]
    cbaa:	1dfb      	adds	r3, r7, #7
    cbac:	781b      	ldrb	r3, [r3, #0]
    cbae:	b29a      	uxth	r2, r3
    cbb0:	1dfb      	adds	r3, r7, #7
    cbb2:	1df8      	adds	r0, r7, #7
    cbb4:	7800      	ldrb	r0, [r0, #0]
    cbb6:	3001      	adds	r0, #1
    cbb8:	7018      	strb	r0, [r3, #0]
    cbba:	f107 0418 	add.w	r4, r7, #24
    cbbe:	f107 0320 	add.w	r3, r7, #32
    cbc2:	4608      	mov	r0, r1
    cbc4:	4611      	mov	r1, r2
    cbc6:	f243 02dc 	movw	r2, #12508	; 0x30dc
    cbca:	f2c0 0202 	movt	r2, #2
    cbce:	f002 f9bf 	bl	ef50 <GoalPrnLine>
    cbd2:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    cbd4:	f107 0318 	add.w	r3, r7, #24
    cbd8:	681b      	ldr	r3, [r3, #0]
    cbda:	2b00      	cmp	r3, #0
    cbdc:	f2c0 80c0 	blt.w	cd60 <ComGPRS+0x94c>

	xLine = xPrinter;
    cbe0:	f107 0220 	add.w	r2, r7, #32
    cbe4:	f642 43f8 	movw	r3, #11512	; 0x2cf8
    cbe8:	f2c0 0302 	movt	r3, #2
    cbec:	4611      	mov	r1, r2
    cbee:	461a      	mov	r2, r3
    cbf0:	2350      	movs	r3, #80	; 0x50
    cbf2:	4608      	mov	r0, r1
    cbf4:	4611      	mov	r1, r2
    cbf6:	461a      	mov	r2, r3
    cbf8:	f7fc e83e 	blx	8c78 <_init+0x118>
	iRet = GoalPrnLine(hDocument, p++, "Sending:", &xLine);           // Data to send
    cbfc:	f107 030c 	add.w	r3, r7, #12
    cc00:	6819      	ldr	r1, [r3, #0]
    cc02:	1dfb      	adds	r3, r7, #7
    cc04:	781b      	ldrb	r3, [r3, #0]
    cc06:	b29a      	uxth	r2, r3
    cc08:	1dfb      	adds	r3, r7, #7
    cc0a:	1df8      	adds	r0, r7, #7
    cc0c:	7800      	ldrb	r0, [r0, #0]
    cc0e:	3001      	adds	r0, #1
    cc10:	7018      	strb	r0, [r3, #0]
    cc12:	f107 0418 	add.w	r4, r7, #24
    cc16:	f107 0320 	add.w	r3, r7, #32
    cc1a:	4608      	mov	r0, r1
    cc1c:	4611      	mov	r1, r2
    cc1e:	f243 02e8 	movw	r2, #12520	; 0x30e8
    cc22:	f2c0 0202 	movt	r2, #2
    cc26:	f002 f993 	bl	ef50 <GoalPrnLine>
    cc2a:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    cc2c:	f107 0318 	add.w	r3, r7, #24
    cc30:	681b      	ldr	r3, [r3, #0]
    cc32:	2b00      	cmp	r3, #0
    cc34:	f2c0 8094 	blt.w	cd60 <ComGPRS+0x94c>
	iRet = GoalPrnLine(hDocument, p++, tcSnd, &xLine);
    cc38:	f107 030c 	add.w	r3, r7, #12
    cc3c:	6818      	ldr	r0, [r3, #0]
    cc3e:	1dfb      	adds	r3, r7, #7
    cc40:	781b      	ldrb	r3, [r3, #0]
    cc42:	b299      	uxth	r1, r3
    cc44:	1dfb      	adds	r3, r7, #7
    cc46:	1dfa      	adds	r2, r7, #7
    cc48:	7812      	ldrb	r2, [r2, #0]
    cc4a:	3201      	adds	r2, #1
    cc4c:	701a      	strb	r2, [r3, #0]
    cc4e:	f107 0418 	add.w	r4, r7, #24
    cc52:	f507 7255 	add.w	r2, r7, #852	; 0x354
    cc56:	f107 0320 	add.w	r3, r7, #32
    cc5a:	f002 f979 	bl	ef50 <GoalPrnLine>
    cc5e:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    cc60:	f107 0318 	add.w	r3, r7, #24
    cc64:	681b      	ldr	r3, [r3, #0]
    cc66:	2b00      	cmp	r3, #0
    cc68:	db7a      	blt.n	cd60 <ComGPRS+0x94c>
	iRet = GoalPrnLine(hDocument, p++, "\nReceiving:", &xLine);       // Data to receive
    cc6a:	f107 030c 	add.w	r3, r7, #12
    cc6e:	6819      	ldr	r1, [r3, #0]
    cc70:	1dfb      	adds	r3, r7, #7
    cc72:	781b      	ldrb	r3, [r3, #0]
    cc74:	b29a      	uxth	r2, r3
    cc76:	1dfb      	adds	r3, r7, #7
    cc78:	1df8      	adds	r0, r7, #7
    cc7a:	7800      	ldrb	r0, [r0, #0]
    cc7c:	3001      	adds	r0, #1
    cc7e:	7018      	strb	r0, [r3, #0]
    cc80:	f107 0418 	add.w	r4, r7, #24
    cc84:	f107 0320 	add.w	r3, r7, #32
    cc88:	4608      	mov	r0, r1
    cc8a:	4611      	mov	r1, r2
    cc8c:	f243 02f4 	movw	r2, #12532	; 0x30f4
    cc90:	f2c0 0202 	movt	r2, #2
    cc94:	f002 f95c 	bl	ef50 <GoalPrnLine>
    cc98:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    cc9a:	f107 0318 	add.w	r3, r7, #24
    cc9e:	681b      	ldr	r3, [r3, #0]
    cca0:	2b00      	cmp	r3, #0
    cca2:	db5d      	blt.n	cd60 <ComGPRS+0x94c>
    cca4:	e006      	b.n	ccb4 <ComGPRS+0x8a0>
    cca6:	bf00      	nop
    cca8:	00022a48 	.word	0x00022a48
    ccac:	00022af4 	.word	0x00022af4
    ccb0:	00022ba0 	.word	0x00022ba0
	iRet = GoalPrnLine(hDocument, p++, tcRsp, &xLine);
    ccb4:	f107 030c 	add.w	r3, r7, #12
    ccb8:	6818      	ldr	r0, [r3, #0]
    ccba:	1dfb      	adds	r3, r7, #7
    ccbc:	781b      	ldrb	r3, [r3, #0]
    ccbe:	b299      	uxth	r1, r3
    ccc0:	1dfb      	adds	r3, r7, #7
    ccc2:	1dfa      	adds	r2, r7, #7
    ccc4:	7812      	ldrb	r2, [r2, #0]
    ccc6:	3201      	adds	r2, #1
    ccc8:	701a      	strb	r2, [r3, #0]
    ccca:	f107 0418 	add.w	r4, r7, #24
    ccce:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
    ccd2:	f107 0320 	add.w	r3, r7, #32
    ccd6:	f002 f93b 	bl	ef50 <GoalPrnLine>
    ccda:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    ccdc:	f107 0318 	add.w	r3, r7, #24
    cce0:	681b      	ldr	r3, [r3, #0]
    cce2:	2b00      	cmp	r3, #0
    cce4:	db3c      	blt.n	cd60 <ComGPRS+0x94c>
	iRet = GoalPrnLine(hDocument, p++, "\n\n\n\n", &xLine);
    cce6:	f107 030c 	add.w	r3, r7, #12
    ccea:	6819      	ldr	r1, [r3, #0]
    ccec:	1dfb      	adds	r3, r7, #7
    ccee:	781b      	ldrb	r3, [r3, #0]
    ccf0:	b29a      	uxth	r2, r3
    ccf2:	1dfb      	adds	r3, r7, #7
    ccf4:	1df8      	adds	r0, r7, #7
    ccf6:	7800      	ldrb	r0, [r0, #0]
    ccf8:	3001      	adds	r0, #1
    ccfa:	7018      	strb	r0, [r3, #0]
    ccfc:	f107 0418 	add.w	r4, r7, #24
    cd00:	f107 0320 	add.w	r3, r7, #32
    cd04:	4608      	mov	r0, r1
    cd06:	4611      	mov	r1, r2
    cd08:	f243 1200 	movw	r2, #12544	; 0x3100
    cd0c:	f2c0 0202 	movt	r2, #2
    cd10:	f002 f91e 	bl	ef50 <GoalPrnLine>
    cd14:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    cd16:	f107 0318 	add.w	r3, r7, #24
    cd1a:	681b      	ldr	r3, [r3, #0]
    cd1c:	2b00      	cmp	r3, #0
    cd1e:	db1f      	blt.n	cd60 <ComGPRS+0x94c>

	iRet = GoalPrnDocument(hDocument);
    cd20:	f107 030c 	add.w	r3, r7, #12
    cd24:	681b      	ldr	r3, [r3, #0]
    cd26:	f107 0418 	add.w	r4, r7, #24
    cd2a:	4618      	mov	r0, r3
    cd2c:	f002 fb22 	bl	f374 <GoalPrnDocument>
    cd30:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
    cd32:	f107 0318 	add.w	r3, r7, #24
    cd36:	681b      	ldr	r3, [r3, #0]
    cd38:	2b00      	cmp	r3, #0
    cd3a:	db11      	blt.n	cd60 <ComGPRS+0x94c>

	GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 30*1000, true);                  // Wait for key pressed/touched (shortcut)
    cd3c:	f107 0308 	add.w	r3, r7, #8
    cd40:	681a      	ldr	r2, [r3, #0]
    cd42:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    cd46:	f2c0 0302 	movt	r3, #2
    cd4a:	681b      	ldr	r3, [r3, #0]
    cd4c:	2101      	movs	r1, #1
    cd4e:	9100      	str	r1, [sp, #0]
    cd50:	4610      	mov	r0, r2
    cd52:	4619      	mov	r1, r3
    cd54:	2201      	movs	r2, #1
    cd56:	f247 5330 	movw	r3, #30000	; 0x7530
    cd5a:	f000 ffa7 	bl	dcac <GoalGetKey>

	goto lblEnd;
    cd5e:	e0b9      	b.n	ced4 <ComGPRS+0xac0>

	// Errors treatment
	// ****************
	lblKO:                                                                // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    cd60:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    cd64:	f2c0 0302 	movt	r3, #2
    cd68:	681b      	ldr	r3, [r3, #0]
    cd6a:	2201      	movs	r2, #1
    cd6c:	9200      	str	r2, [sp, #0]
    cd6e:	f241 3288 	movw	r2, #5000	; 0x1388
    cd72:	9201      	str	r2, [sp, #4]
    cd74:	4618      	mov	r0, r3
    cd76:	2100      	movs	r1, #0
    cd78:	f243 1208 	movw	r2, #12552	; 0x3108
    cd7c:	f2c0 0202 	movt	r2, #2
    cd80:	2304      	movs	r3, #4
    cd82:	f014 fc81 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
    cd86:	e0a5      	b.n	ced4 <ComGPRS+0xac0>
	lblComKO:                                                             // Communication error
	strcpy(tcDisplay, LL_ErrorMsg(iRet));                             // Link Layer error
    cd88:	f107 0318 	add.w	r3, r7, #24
    cd8c:	6818      	ldr	r0, [r3, #0]
    cd8e:	f003 fb3d 	bl	1040c <LL_ErrorMsg>
    cd92:	4603      	mov	r3, r0
    cd94:	f107 0298 	add.w	r2, r7, #152	; 0x98
    cd98:	4610      	mov	r0, r2
    cd9a:	4619      	mov	r1, r3
    cd9c:	f7fb ef40 	blx	8c20 <_init+0xc0>
	if (iRet == LL_Network_GetStatus(LL_PHYSICAL_V_GPRS, &iStatus))
    cda0:	f107 0310 	add.w	r3, r7, #16
    cda4:	2029      	movs	r0, #41	; 0x29
    cda6:	4619      	mov	r1, r3
    cda8:	f012 fc1f 	bl	1f5ea <LL_Network_GetStatus>
    cdac:	4602      	mov	r2, r0
    cdae:	f107 0318 	add.w	r3, r7, #24
    cdb2:	681b      	ldr	r3, [r3, #0]
    cdb4:	429a      	cmp	r2, r3
    cdb6:	d14c      	bne.n	ce52 <ComGPRS+0xa3e>
	{
		switch(iStatus)
    cdb8:	f107 0310 	add.w	r3, r7, #16
    cdbc:	681a      	ldr	r2, [r3, #0]
    cdbe:	f240 5305 	movw	r3, #1285	; 0x505
    cdc2:	f2c0 1300 	movt	r3, #256	; 0x100
    cdc6:	429a      	cmp	r2, r3
    cdc8:	d013      	beq.n	cdf2 <ComGPRS+0x9de>
    cdca:	f240 5306 	movw	r3, #1286	; 0x506
    cdce:	f2c0 1300 	movt	r3, #256	; 0x100
    cdd2:	429a      	cmp	r2, r3
    cdd4:	d015      	beq.n	ce02 <ComGPRS+0x9ee>
    cdd6:	f240 5301 	movw	r3, #1281	; 0x501
    cdda:	f2c0 1300 	movt	r3, #256	; 0x100
    cdde:	429a      	cmp	r2, r3
    cde0:	d115      	bne.n	ce0e <ComGPRS+0x9fa>
		{
		case LL_STATUS_GPRS_ERROR_NO_SIM:   iStatus=LL_STATUS_GPRS_NO_SIM;      break;
    cde2:	f107 0210 	add.w	r2, r7, #16
    cde6:	f64f 4322 	movw	r3, #64546	; 0xfc22
    cdea:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    cdee:	6013      	str	r3, [r2, #0]
    cdf0:	e013      	b.n	ce1a <ComGPRS+0xa06>
		case LL_STATUS_GPRS_ERROR_PPP:      iStatus=LL_STATUS_GPRS_ERR_PPP;     break;
    cdf2:	f107 0210 	add.w	r2, r7, #16
    cdf6:	f64f 4320 	movw	r3, #64544	; 0xfc20
    cdfa:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    cdfe:	6013      	str	r3, [r2, #0]
    ce00:	e00b      	b.n	ce1a <ComGPRS+0xa06>
		case LL_STATUS_GPRS_ERROR_UNKNOWN:  iStatus=LL_STATUS_GPRS_ERR_UNKNOWN; break;
    ce02:	f107 0310 	add.w	r3, r7, #16
    ce06:	f46f 7278 	mvn.w	r2, #992	; 0x3e0
    ce0a:	601a      	str	r2, [r3, #0]
    ce0c:	e005      	b.n	ce1a <ComGPRS+0xa06>
		default:                            iStatus=-1;                         break;
    ce0e:	f107 0310 	add.w	r3, r7, #16
    ce12:	f04f 32ff 	mov.w	r2, #4294967295
    ce16:	601a      	str	r2, [r3, #0]
    ce18:	bf00      	nop
		}
		strcat(tcDisplay, "\n");
    ce1a:	f107 0398 	add.w	r3, r7, #152	; 0x98
    ce1e:	4618      	mov	r0, r3
    ce20:	f7fb ef30 	blx	8c84 <_init+0x124>
    ce24:	4603      	mov	r3, r0
    ce26:	f107 0298 	add.w	r2, r7, #152	; 0x98
    ce2a:	18d2      	adds	r2, r2, r3
    ce2c:	f243 131c 	movw	r3, #12572	; 0x311c
    ce30:	f2c0 0302 	movt	r3, #2
    ce34:	881b      	ldrh	r3, [r3, #0]
    ce36:	8013      	strh	r3, [r2, #0]
		strcat(tcDisplay, LL_ErrorMsg(iStatus));                      // Link Layer status
    ce38:	f107 0310 	add.w	r3, r7, #16
    ce3c:	681b      	ldr	r3, [r3, #0]
    ce3e:	4618      	mov	r0, r3
    ce40:	f003 fae4 	bl	1040c <LL_ErrorMsg>
    ce44:	4603      	mov	r3, r0
    ce46:	f107 0298 	add.w	r2, r7, #152	; 0x98
    ce4a:	4610      	mov	r0, r2
    ce4c:	4619      	mov	r1, r3
    ce4e:	f7fb eef4 	blx	8c38 <_init+0xd8>
	}
	if (iRet != LL_ERROR_TIMEOUT)                                     // Cancel or timeout ?
    ce52:	f107 0318 	add.w	r3, r7, #24
    ce56:	681b      	ldr	r3, [r3, #0]
    ce58:	f513 7f7b 	cmn.w	r3, #1004	; 0x3ec
    ce5c:	d039      	beq.n	ced2 <ComGPRS+0xabe>
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    ce5e:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    ce62:	f2c0 0302 	movt	r3, #2
    ce66:	681a      	ldr	r2, [r3, #0]
    ce68:	f107 0398 	add.w	r3, r7, #152	; 0x98
    ce6c:	2101      	movs	r1, #1
    ce6e:	9100      	str	r1, [sp, #0]
    ce70:	f241 3188 	movw	r1, #5000	; 0x1388
    ce74:	9101      	str	r1, [sp, #4]
    ce76:	4610      	mov	r0, r2
    ce78:	2100      	movs	r1, #0
    ce7a:	461a      	mov	r2, r3
    ce7c:	2304      	movs	r3, #4
    ce7e:	f014 fc03 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
    ce82:	e026      	b.n	ced2 <ComGPRS+0xabe>
	lblDbaErr:                                                            // Data base error
	Telium_Sprintf(tcDisplay, "%s\n%s", FMG_ErrorMsg(iRet), "Software Reset Needed");
    ce84:	f107 0318 	add.w	r3, r7, #24
    ce88:	6818      	ldr	r0, [r3, #0]
    ce8a:	f003 f9d7 	bl	1023c <FMG_ErrorMsg>
    ce8e:	4603      	mov	r3, r0
    ce90:	f107 0298 	add.w	r2, r7, #152	; 0x98
    ce94:	4610      	mov	r0, r2
    ce96:	f243 0104 	movw	r1, #12292	; 0x3004
    ce9a:	f2c0 0102 	movt	r1, #2
    ce9e:	461a      	mov	r2, r3
    cea0:	f243 030c 	movw	r3, #12300	; 0x300c
    cea4:	f2c0 0302 	movt	r3, #2
    cea8:	f013 fca8 	bl	207fc <Telium_Sprintf>
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    ceac:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    ceb0:	f2c0 0302 	movt	r3, #2
    ceb4:	681a      	ldr	r2, [r3, #0]
    ceb6:	f107 0398 	add.w	r3, r7, #152	; 0x98
    ceba:	2101      	movs	r1, #1
    cebc:	9100      	str	r1, [sp, #0]
    cebe:	f241 3188 	movw	r1, #5000	; 0x1388
    cec2:	9101      	str	r1, [sp, #4]
    cec4:	4610      	mov	r0, r2
    cec6:	2100      	movs	r1, #0
    cec8:	461a      	mov	r2, r3
    ceca:	2304      	movs	r3, #4
    cecc:	f014 fbdc 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
    ced0:	e000      	b.n	ced4 <ComGPRS+0xac0>
		strcat(tcDisplay, "\n");
		strcat(tcDisplay, LL_ErrorMsg(iStatus));                      // Link Layer status
	}
	if (iRet != LL_ERROR_TIMEOUT)                                     // Cancel or timeout ?
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
	goto lblEnd;
    ced2:	bf00      	nop
	lblDbaErr:                                                            // Data base error
	Telium_Sprintf(tcDisplay, "%s\n%s", FMG_ErrorMsg(iRet), "Software Reset Needed");
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
	goto lblEnd;
	lblEnd:
	if (hGPRS) {
    ced4:	f107 0314 	add.w	r3, r7, #20
    ced8:	681b      	ldr	r3, [r3, #0]
    ceda:	2b00      	cmp	r3, #0
    cedc:	d009      	beq.n	cef2 <ComGPRS+0xade>
		DisconnectGPRS(hGPRS);                                        // ** Disconnect **
    cede:	f107 0314 	add.w	r3, r7, #20
    cee2:	6818      	ldr	r0, [r3, #0]
    cee4:	f7fe fe96 	bl	bc14 <DisconnectGPRS>
		CloseGPRS(hGPRS);                                             // ** Close **
    cee8:	f107 0314 	add.w	r3, r7, #20
    ceec:	6818      	ldr	r0, [r3, #0]
    ceee:	f7fe feaf 	bl	bc50 <CloseGPRS>
	}
	StopGPRS();                                                       // ** Stop **
    cef2:	f7fe fecd 	bl	bc90 <StopGPRS>
	if (hScreen)
    cef6:	f107 0308 	add.w	r3, r7, #8
    cefa:	681b      	ldr	r3, [r3, #0]
    cefc:	2b00      	cmp	r3, #0
    cefe:	d004      	beq.n	cf0a <ComGPRS+0xaf6>
		GoalDestroyScreen(&hScreen);                                  // Destroy screen
    cf00:	f107 0308 	add.w	r3, r7, #8
    cf04:	4618      	mov	r0, r3
    cf06:	f001 f833 	bl	df70 <GoalDestroyScreen>
	if (hDocument)
    cf0a:	f107 030c 	add.w	r3, r7, #12
    cf0e:	681b      	ldr	r3, [r3, #0]
    cf10:	2b00      	cmp	r3, #0
    cf12:	d004      	beq.n	cf1e <ComGPRS+0xb0a>
		GoalDestroyDocument(&hDocument);                              // Destroy document
    cf14:	f107 030c 	add.w	r3, r7, #12
    cf18:	4618      	mov	r0, r3
    cf1a:	f002 fa57 	bl	f3cc <GoalDestroyDocument>
}
    cf1e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    cf22:	f2c0 0302 	movt	r3, #2
    cf26:	f8d7 275c 	ldr.w	r2, [r7, #1884]	; 0x75c
    cf2a:	681b      	ldr	r3, [r3, #0]
    cf2c:	429a      	cmp	r2, r3
    cf2e:	d001      	beq.n	cf34 <ComGPRS+0xb20>
    cf30:	f7fc f838 	bl	8fa4 <__stack_chk_fail>
    cf34:	f507 7759 	add.w	r7, r7, #868	; 0x364
    cf38:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    cf3c:	46bd      	mov	sp, r7
    cf3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cf40 <CallBackPressKey>:
//  true : When leaving the loop GL_Window_MainLoop
//  false : When leaving the loop GL_Window_MainLoop
//****************************************************************************

static bool CallBackPressKey(T_GL_HMESSAGE hMessage)
{
    cf40:	b580      	push	{r7, lr}
    cf42:	b084      	sub	sp, #16
    cf44:	af00      	add	r7, sp, #0
    cf46:	6078      	str	r0, [r7, #4]
    cf48:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    cf4c:	f2c0 0302 	movt	r3, #2
    cf50:	681b      	ldr	r3, [r3, #0]
    cf52:	60fb      	str	r3, [r7, #12]
	T_GL_WCHAR ulKey;

	// Retrieve key pressed
	ulKey = GL_Message_GetKey(hMessage);
    cf54:	6878      	ldr	r0, [r7, #4]
    cf56:	f014 fd63 	bl	21a20 <GL_Message_GetKey>
    cf5a:	4603      	mov	r3, r0
    cf5c:	60bb      	str	r3, [r7, #8]

    // Sets the data user attached to the window
    GL_Message_SetUserData(hMessage, &ulKey, sizeof(ulKey));
    cf5e:	f107 0308 	add.w	r3, r7, #8
    cf62:	6878      	ldr	r0, [r7, #4]
    cf64:	4619      	mov	r1, r3
    cf66:	2204      	movs	r2, #4
    cf68:	f014 fd90 	bl	21a8c <GL_Message_SetUserData>

	// Will exit the application from the loop on GL_Window_MainLoop by returning
	// the result RES_PRESS_STATUS
	GL_Message_SetResult(hMessage, RES_PRESS_STATUS);
    cf6c:	6878      	ldr	r0, [r7, #4]
    cf6e:	2105      	movs	r1, #5
    cf70:	f014 fd7a 	bl	21a68 <GL_Message_SetResult>

	// Force the value to true when releasing the application from the main loop
	return true;
    cf74:	2301      	movs	r3, #1
}
    cf76:	4618      	mov	r0, r3
    cf78:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    cf7c:	f2c0 0302 	movt	r3, #2
    cf80:	68fa      	ldr	r2, [r7, #12]
    cf82:	681b      	ldr	r3, [r3, #0]
    cf84:	429a      	cmp	r2, r3
    cf86:	d001      	beq.n	cf8c <CallBackPressKey+0x4c>
    cf88:	f7fc f80c 	bl	8fa4 <__stack_chk_fail>
    cf8c:	f107 0710 	add.w	r7, r7, #16
    cf90:	46bd      	mov	sp, r7
    cf92:	bd80      	pop	{r7, pc}

0000cf94 <CallBackValidKey>:
//  true : When leaving the loop GL_Window_MainLoop
//  false : When leaving the loop GL_Window_MainLoop
//****************************************************************************

static bool CallBackValidKey(T_GL_HMESSAGE hMessage)
{
    cf94:	b580      	push	{r7, lr}
    cf96:	b084      	sub	sp, #16
    cf98:	af00      	add	r7, sp, #0
    cf9a:	6078      	str	r0, [r7, #4]
    cf9c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    cfa0:	f2c0 0302 	movt	r3, #2
    cfa4:	681b      	ldr	r3, [r3, #0]
    cfa6:	60fb      	str	r3, [r7, #12]
	// Will exit the application from the loop on GL_Window_MainLoop by returning
	// the result RES_VALID_STATUS
	GL_Message_SetResult(hMessage, RES_VALID_STATUS);
    cfa8:	6878      	ldr	r0, [r7, #4]
    cfaa:	2100      	movs	r1, #0
    cfac:	f014 fd5c 	bl	21a68 <GL_Message_SetResult>

	// Force the value to true when releasing the application from the main loop
	return true;
    cfb0:	2301      	movs	r3, #1
}
    cfb2:	4618      	mov	r0, r3
    cfb4:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    cfb8:	f2c0 0302 	movt	r3, #2
    cfbc:	68fa      	ldr	r2, [r7, #12]
    cfbe:	681b      	ldr	r3, [r3, #0]
    cfc0:	429a      	cmp	r2, r3
    cfc2:	d001      	beq.n	cfc8 <CallBackValidKey+0x34>
    cfc4:	f7fb ffee 	bl	8fa4 <__stack_chk_fail>
    cfc8:	f107 0710 	add.w	r7, r7, #16
    cfcc:	46bd      	mov	sp, r7
    cfce:	bd80      	pop	{r7, pc}

0000cfd0 <CallBackCancelKey>:
//  true : When leaving the loop GL_Window_MainLoop.
//  false : When leaving the loop GL_Window_MainLoop.
//****************************************************************************

static bool CallBackCancelKey(T_GL_HMESSAGE hMessage)
{
    cfd0:	b580      	push	{r7, lr}
    cfd2:	b084      	sub	sp, #16
    cfd4:	af00      	add	r7, sp, #0
    cfd6:	6078      	str	r0, [r7, #4]
    cfd8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    cfdc:	f2c0 0302 	movt	r3, #2
    cfe0:	681b      	ldr	r3, [r3, #0]
    cfe2:	60fb      	str	r3, [r7, #12]
	// Will exit the application from the loop on GL_Window_MainLoop by returning
	// the result RES_CANCEL_STATUS
	GL_Message_SetResult(hMessage, RES_CANCEL_STATUS);
    cfe4:	6878      	ldr	r0, [r7, #4]
    cfe6:	2101      	movs	r1, #1
    cfe8:	f014 fd3e 	bl	21a68 <GL_Message_SetResult>

	// Force the value to true when releasing the application from the main loop
	return true;
    cfec:	2301      	movs	r3, #1
}
    cfee:	4618      	mov	r0, r3
    cff0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    cff4:	f2c0 0302 	movt	r3, #2
    cff8:	68fa      	ldr	r2, [r7, #12]
    cffa:	681b      	ldr	r3, [r3, #0]
    cffc:	429a      	cmp	r2, r3
    cffe:	d001      	beq.n	d004 <CallBackCancelKey+0x34>
    d000:	f7fb ffd0 	bl	8fa4 <__stack_chk_fail>
    d004:	f107 0710 	add.w	r7, r7, #16
    d008:	46bd      	mov	sp, r7
    d00a:	bd80      	pop	{r7, pc}

0000d00c <CallBackDownKey>:
//  true : When leaving the loop GL_Windpw_MainLoop.
//  false : When leaving the loop GL_Window_MainLoop.
//****************************************************************************

static bool CallBackDownKey(T_GL_HMESSAGE hMessage)
{
    d00c:	b580      	push	{r7, lr}
    d00e:	b084      	sub	sp, #16
    d010:	af00      	add	r7, sp, #0
    d012:	6078      	str	r0, [r7, #4]
    d014:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    d018:	f2c0 0302 	movt	r3, #2
    d01c:	681b      	ldr	r3, [r3, #0]
    d01e:	60fb      	str	r3, [r7, #12]
	// Will exit the application from the loop on GL_Window_MainLoop by returning
	// the result RES_DOWN_STATUS
	GL_Message_SetResult(hMessage, RES_DOWN_STATUS);
    d020:	6878      	ldr	r0, [r7, #4]
    d022:	2102      	movs	r1, #2
    d024:	f014 fd20 	bl	21a68 <GL_Message_SetResult>

	// Force the value to true when releasing the application from the main loop
	return true;
    d028:	2301      	movs	r3, #1
}
    d02a:	4618      	mov	r0, r3
    d02c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    d030:	f2c0 0302 	movt	r3, #2
    d034:	68fa      	ldr	r2, [r7, #12]
    d036:	681b      	ldr	r3, [r3, #0]
    d038:	429a      	cmp	r2, r3
    d03a:	d001      	beq.n	d040 <CallBackDownKey+0x34>
    d03c:	f7fb ffb2 	bl	8fa4 <__stack_chk_fail>
    d040:	f107 0710 	add.w	r7, r7, #16
    d044:	46bd      	mov	sp, r7
    d046:	bd80      	pop	{r7, pc}

0000d048 <CallBackUpKey>:
//  true : When leaving the loop GL_Window_MainLoop.
//  false : When leaving the loop GL_Window_MainLoop.
//****************************************************************************

static bool CallBackUpKey(T_GL_HMESSAGE hMessage)
{
    d048:	b580      	push	{r7, lr}
    d04a:	b084      	sub	sp, #16
    d04c:	af00      	add	r7, sp, #0
    d04e:	6078      	str	r0, [r7, #4]
    d050:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    d054:	f2c0 0302 	movt	r3, #2
    d058:	681b      	ldr	r3, [r3, #0]
    d05a:	60fb      	str	r3, [r7, #12]
	// Will exit the application from the loop on GL_Window_MainLoop by returning
	// the result RES_UP_STATUS
	GL_Message_SetResult(hMessage, RES_UP_STATUS);
    d05c:	6878      	ldr	r0, [r7, #4]
    d05e:	2103      	movs	r1, #3
    d060:	f014 fd02 	bl	21a68 <GL_Message_SetResult>

	// Force the value to true when releasing the application from the main loop
	return true;
    d064:	2301      	movs	r3, #1
}
    d066:	4618      	mov	r0, r3
    d068:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    d06c:	f2c0 0302 	movt	r3, #2
    d070:	68fa      	ldr	r2, [r7, #12]
    d072:	681b      	ldr	r3, [r3, #0]
    d074:	429a      	cmp	r2, r3
    d076:	d001      	beq.n	d07c <CallBackUpKey+0x34>
    d078:	f7fb ff94 	bl	8fa4 <__stack_chk_fail>
    d07c:	f107 0710 	add.w	r7, r7, #16
    d080:	46bd      	mov	sp, r7
    d082:	bd80      	pop	{r7, pc}

0000d084 <CallBackTimeout>:
//  true : When leaving the loop GL_Window_MainLoop.
//  false : When leaving the loop GL_Window_MainLoop.
//****************************************************************************

static bool CallBackTimeout(T_GL_HMESSAGE hMessage)
{
    d084:	b580      	push	{r7, lr}
    d086:	b084      	sub	sp, #16
    d088:	af00      	add	r7, sp, #0
    d08a:	6078      	str	r0, [r7, #4]
    d08c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    d090:	f2c0 0302 	movt	r3, #2
    d094:	681b      	ldr	r3, [r3, #0]
    d096:	60fb      	str	r3, [r7, #12]
	// Will exit the application from the loop on GL_Window_MainLoop by returning
	// the result RES_TIMER_STATUS
	GL_Message_SetResult(hMessage, RES_TIMER_STATUS);
    d098:	6878      	ldr	r0, [r7, #4]
    d09a:	2104      	movs	r1, #4
    d09c:	f014 fce4 	bl	21a68 <GL_Message_SetResult>

	// Stop the timer
	GL_Timer_Stop(GL_Message_GetWidget(hMessage));
    d0a0:	6878      	ldr	r0, [r7, #4]
    d0a2:	f014 fccf 	bl	21a44 <GL_Message_GetWidget>
    d0a6:	4603      	mov	r3, r0
    d0a8:	4618      	mov	r0, r3
    d0aa:	f014 fd49 	bl	21b40 <GL_Timer_Stop>

	// Force the value to true when releasing the application from the main loop
	return true;
    d0ae:	2301      	movs	r3, #1
}
    d0b0:	4618      	mov	r0, r3
    d0b2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    d0b6:	f2c0 0302 	movt	r3, #2
    d0ba:	68fa      	ldr	r2, [r7, #12]
    d0bc:	681b      	ldr	r3, [r3, #0]
    d0be:	429a      	cmp	r2, r3
    d0c0:	d001      	beq.n	d0c6 <CallBackTimeout+0x42>
    d0c2:	f7fb ff6f 	bl	8fa4 <__stack_chk_fail>
    d0c6:	f107 0710 	add.w	r7, r7, #16
    d0ca:	46bd      	mov	sp, r7
    d0cc:	bd80      	pop	{r7, pc}
    d0ce:	bf00      	nop

0000d0d0 <GoalCreateScreen>:
//   !NULL : The handle of the screen.
//   NULL : Screen failed
//****************************************************************************

T_GL_HWIDGET GoalCreateScreen (T_GL_HGRAPHIC_LIB hGraphicLib, const ST_DSP_LINE txLine[], ushort usMaxLine, T_GL_ENCODING_CHARSET eCharSet)
{
    d0d0:	b580      	push	{r7, lr}
    d0d2:	b090      	sub	sp, #64	; 0x40
    d0d4:	af00      	add	r7, sp, #0
    d0d6:	60f8      	str	r0, [r7, #12]
    d0d8:	60b9      	str	r1, [r7, #8]
    d0da:	603b      	str	r3, [r7, #0]
    d0dc:	4613      	mov	r3, r2
    d0de:	80fb      	strh	r3, [r7, #6]
    d0e0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    d0e4:	f2c0 0302 	movt	r3, #2
    d0e8:	681b      	ldr	r3, [r3, #0]
    d0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	bool bTouch;
	ushort usLine;

	// Build screen context with MAX labels and 4 buttons (Cancel, Valid, Down and Up)
	// *******************************************************************************
	GL_GraphicLib_SetCharset(hGraphicLib, eCharSet);                                  // Change the encoding charset of the graphic library
    d0ec:	68f8      	ldr	r0, [r7, #12]
    d0ee:	6839      	ldr	r1, [r7, #0]
    d0f0:	f014 fc4e 	bl	21990 <GL_GraphicLib_SetCharset>

	bTouch = GL_GraphicLib_IsTouchPresent(hGraphicLib);                               // Is it a touch screen?
    d0f4:	68f8      	ldr	r0, [r7, #12]
    d0f6:	f014 fc39 	bl	2196c <GL_GraphicLib_IsTouchPresent>
    d0fa:	4603      	mov	r3, r0
    d0fc:	757b      	strb	r3, [r7, #21]

	hWindow = GL_Window_Create(hGraphicLib);                                          // Create a window in the user area
    d0fe:	68f8      	ldr	r0, [r7, #12]
    d100:	f014 ff3a 	bl	21f78 <GL_Window_Create>
    d104:	61b8      	str	r0, [r7, #24]
	CHECK(hWindow!=NULL, lblKO);
    d106:	69bb      	ldr	r3, [r7, #24]
    d108:	2b00      	cmp	r3, #0
    d10a:	f000 8163 	beq.w	d3d4 <GoalCreateScreen+0x304>

	hTimer = GL_Timer_Create(hWindow);                                                // Create a timer on this window
    d10e:	69b8      	ldr	r0, [r7, #24]
    d110:	f014 fcf2 	bl	21af8 <GL_Timer_Create>
    d114:	61f8      	str	r0, [r7, #28]
	CHECK(hTimer!=NULL, lblKO);
    d116:	69fb      	ldr	r3, [r7, #28]
    d118:	2b00      	cmp	r3, #0
    d11a:	f000 815b 	beq.w	d3d4 <GoalCreateScreen+0x304>
	GL_Widget_SetId(hTimer, TIMER_ID);                                                // Timer Identifier TIMER_ID
    d11e:	69f8      	ldr	r0, [r7, #28]
    d120:	2100      	movs	r1, #0
    d122:	f014 fe1b 	bl	21d5c <GL_Widget_SetId>
	GL_Widget_RegisterCallback(hTimer, GL_EVENT_TIMER_OUT, CallBackTimeout);          // Call back when the timer expired
    d126:	69f8      	ldr	r0, [r7, #28]
    d128:	2108      	movs	r1, #8
    d12a:	f24d 0285 	movw	r2, #53381	; 0xd085
    d12e:	f2c0 0200 	movt	r2, #0
    d132:	f014 fd3b 	bl	21bac <GL_Widget_RegisterCallback>

	hLayout = GL_Layout_Create(hWindow);                                              // Create a layout on this window
    d136:	69b8      	ldr	r0, [r7, #24]
    d138:	f014 fc60 	bl	219fc <GL_Layout_Create>
    d13c:	6238      	str	r0, [r7, #32]
	CHECK(hLayout!=NULL, lblKO);
    d13e:	6a3b      	ldr	r3, [r7, #32]
    d140:	2b00      	cmp	r3, #0
    d142:	f000 8147 	beq.w	d3d4 <GoalCreateScreen+0x304>

	for (usLine=0; usLine<usMaxLine; usLine++)                                        // Build labels on this layout
    d146:	2300      	movs	r3, #0
    d148:	82fb      	strh	r3, [r7, #22]
    d14a:	e03c      	b.n	d1c6 <GoalCreateScreen+0xf6>
	{
		hLabel = GL_Label_Create(hLayout);                                            // Create a label on this layout
    d14c:	6a38      	ldr	r0, [r7, #32]
    d14e:	f014 fc43 	bl	219d8 <GL_Label_Create>
    d152:	6278      	str	r0, [r7, #36]	; 0x24
		CHECK(hLabel!=NULL, lblKO);
    d154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d156:	2b00      	cmp	r3, #0
    d158:	f000 813c 	beq.w	d3d4 <GoalCreateScreen+0x304>
		GL_Widget_SetItem(hLabel, 0, usLine);                                         // Label location on this layout
    d15c:	8afb      	ldrh	r3, [r7, #22]
    d15e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d160:	2100      	movs	r1, #0
    d162:	461a      	mov	r2, r3
    d164:	f014 fe0c 	bl	21d80 <GL_Widget_SetItem>
		GL_Widget_SetText(hLabel, NULL);                                              // Clear text on this label
    d168:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d16a:	2100      	movs	r1, #0
    d16c:	f014 fe86 	bl	21e7c <GL_Widget_SetText>
		GL_Widget_SetShrink(hLabel, GL_DIRECTION_WIDTH);                              // Shrink beyond its size (No width scrolling cell if label goes over screen)
    d170:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d172:	2101      	movs	r1, #1
    d174:	f014 fe4c 	bl	21e10 <GL_Widget_SetShrink>
		if (IsColorDisplay())                                                         // Color display?
    d178:	f013 f9f2 	bl	20560 <IsColorDisplay>
    d17c:	4603      	mov	r3, r0
    d17e:	2b00      	cmp	r3, #0
    d180:	d00b      	beq.n	d19a <GoalCreateScreen+0xca>
			GL_Widget_SetFontScale(hLabel, txLine[usLine].xColor.xFont.eScale);       // Yes, font scale color
    d182:	8afb      	ldrh	r3, [r7, #22]
    d184:	22ac      	movs	r2, #172	; 0xac
    d186:	fb02 f303 	mul.w	r3, r2, r3
    d18a:	68ba      	ldr	r2, [r7, #8]
    d18c:	18d3      	adds	r3, r2, r3
    d18e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    d190:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d192:	4619      	mov	r1, r3
    d194:	f014 fd9a 	bl	21ccc <GL_Widget_SetFontScale>
    d198:	e00b      	b.n	d1b2 <GoalCreateScreen+0xe2>
		else
			GL_Widget_SetFontScale(hLabel, txLine[usLine].xBW.xFont.eScale);          // No, font scale B&W
    d19a:	8afb      	ldrh	r3, [r7, #22]
    d19c:	22ac      	movs	r2, #172	; 0xac
    d19e:	fb02 f303 	mul.w	r3, r2, r3
    d1a2:	68ba      	ldr	r2, [r7, #8]
    d1a4:	18d3      	adds	r3, r2, r3
    d1a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    d1aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d1ac:	4619      	mov	r1, r3
    d1ae:	f014 fd8d 	bl	21ccc <GL_Widget_SetFontScale>
		GL_Widget_SetId(hLabel, LABEL_0_ID+usLine);                                   // Label identifier LABEL0_ID + (0..8)
    d1b2:	8afb      	ldrh	r3, [r7, #22]
    d1b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
    d1b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d1ba:	4619      	mov	r1, r3
    d1bc:	f014 fdce 	bl	21d5c <GL_Widget_SetId>
	GL_Widget_RegisterCallback(hTimer, GL_EVENT_TIMER_OUT, CallBackTimeout);          // Call back when the timer expired

	hLayout = GL_Layout_Create(hWindow);                                              // Create a layout on this window
	CHECK(hLayout!=NULL, lblKO);

	for (usLine=0; usLine<usMaxLine; usLine++)                                        // Build labels on this layout
    d1c0:	8afb      	ldrh	r3, [r7, #22]
    d1c2:	3301      	adds	r3, #1
    d1c4:	82fb      	strh	r3, [r7, #22]
    d1c6:	8afa      	ldrh	r2, [r7, #22]
    d1c8:	88fb      	ldrh	r3, [r7, #6]
    d1ca:	429a      	cmp	r2, r3
    d1cc:	d3be      	bcc.n	d14c <GoalCreateScreen+0x7c>
		else
			GL_Widget_SetFontScale(hLabel, txLine[usLine].xBW.xFont.eScale);          // No, font scale B&W
		GL_Widget_SetId(hLabel, LABEL_0_ID+usLine);                                   // Label identifier LABEL0_ID + (0..8)
	}

	hLayout2 = GL_Layout_Create(hLayout);                                             // Create a second layout on this layout
    d1ce:	6a38      	ldr	r0, [r7, #32]
    d1d0:	f014 fc14 	bl	219fc <GL_Layout_Create>
    d1d4:	62b8      	str	r0, [r7, #40]	; 0x28
	CHECK(hLayout2!=NULL, lblKO);
    d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d1d8:	2b00      	cmp	r3, #0
    d1da:	f000 80fb 	beq.w	d3d4 <GoalCreateScreen+0x304>
	GL_Widget_SetId(hLayout2, LAYOUT2_ID);                                            // Second layout identifier
    d1de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d1e0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    d1e4:	f014 fdba 	bl	21d5c <GL_Widget_SetId>
	GL_Widget_SetItem(hLayout2, 0, usLine);                                           // Second layout location on this layout
    d1e8:	8afb      	ldrh	r3, [r7, #22]
    d1ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d1ec:	2100      	movs	r1, #0
    d1ee:	461a      	mov	r2, r3
    d1f0:	f014 fdc6 	bl	21d80 <GL_Widget_SetItem>
	GL_Widget_SetGrow(hLayout2, GL_DIRECTION_WIDTH);                                  // Grow beyond its size (Background width around layout will fill the complete cell)
    d1f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d1f6:	2101      	movs	r1, #1
    d1f8:	f014 fd9e 	bl	21d38 <GL_Widget_SetGrow>

	hButtonCan = GL_Button_Create(hLayout2);                                          // Create a cancel button on this second layout
    d1fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d1fe:	f014 f9fb 	bl	215f8 <GL_Button_Create>
    d202:	62f8      	str	r0, [r7, #44]	; 0x2c
	CHECK(hButtonCan!=NULL, lblKO);
    d204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d206:	2b00      	cmp	r3, #0
    d208:	f000 80e4 	beq.w	d3d4 <GoalCreateScreen+0x304>
	GL_Widget_SetSource(hButtonCan, "skin://images/cancel.wgu");                      // Set the cancel skinned image
    d20c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d20e:	f243 1120 	movw	r1, #12576	; 0x3120
    d212:	f2c0 0102 	movt	r1, #2
    d216:	f014 fe1f 	bl	21e58 <GL_Widget_SetSource>
	GL_Widget_SetItem(hButtonCan, 0, 0);                                              // Button location on this layout
    d21a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d21c:	2100      	movs	r1, #0
    d21e:	2200      	movs	r2, #0
    d220:	f014 fdae 	bl	21d80 <GL_Widget_SetItem>
	GL_Widget_SetExpand(hButtonCan, GL_DIRECTION_WIDTH);                              // Expand button width
    d224:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d226:	2101      	movs	r1, #1
    d228:	f014 fd1a 	bl	21c60 <GL_Widget_SetExpand>
	GL_Widget_SetShortcut(hButtonCan, GL_KEY_CANCEL);                                 // Shortcut on this button
    d22c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d22e:	f64f 0151 	movw	r1, #63569	; 0xf851
    d232:	f014 fddb 	bl	21dec <GL_Widget_SetShortcut>
	GL_Widget_SetId(hButtonCan, BUTTON_CAN_ID);                                       // Cancel button Identifier
    d236:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d238:	f44f 7140 	mov.w	r1, #768	; 0x300
    d23c:	f014 fd8e 	bl	21d5c <GL_Widget_SetId>
	GL_Widget_SetGrow(hButtonCan, GL_DIRECTION_WIDTH);                                // Grow beyond its size (Background width around cancel button will fill the complete cell)
    d240:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d242:	2101      	movs	r1, #1
    d244:	f014 fd78 	bl	21d38 <GL_Widget_SetGrow>
	GL_Widget_SetFocusable(hButtonCan, false);                                        // No focus on this button
    d248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d24a:	2100      	movs	r1, #0
    d24c:	f014 fd1a 	bl	21c84 <GL_Widget_SetFocusable>
	GL_Widget_RegisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Call back when key pressed
    d250:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d252:	2167      	movs	r1, #103	; 0x67
    d254:	f64c 72d1 	movw	r2, #53201	; 0xcfd1
    d258:	f2c0 0200 	movt	r2, #0
    d25c:	f014 fca6 	bl	21bac <GL_Widget_RegisterCallback>

	hButtonDown = GL_Button_Create(hLayout2);                                         // Create a down button on this layout
    d260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d262:	f014 f9c9 	bl	215f8 <GL_Button_Create>
    d266:	6338      	str	r0, [r7, #48]	; 0x30
	CHECK(hButtonDown!=NULL, lblKO);
    d268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d26a:	2b00      	cmp	r3, #0
    d26c:	f000 80b2 	beq.w	d3d4 <GoalCreateScreen+0x304>
	GL_Widget_SetSource(hButtonDown, "skin://images/downArrow.wgu");                  // Set the down arrow skinned image
    d270:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d272:	f243 113c 	movw	r1, #12604	; 0x313c
    d276:	f2c0 0102 	movt	r1, #2
    d27a:	f014 fded 	bl	21e58 <GL_Widget_SetSource>
	GL_Widget_SetItem(hButtonDown, 1, 0);                                             // Button location on this layout
    d27e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d280:	2101      	movs	r1, #1
    d282:	2200      	movs	r2, #0
    d284:	f014 fd7c 	bl	21d80 <GL_Widget_SetItem>
	GL_Widget_SetExpand(hButtonDown, GL_DIRECTION_WIDTH);                             // Expand button width
    d288:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d28a:	2101      	movs	r1, #1
    d28c:	f014 fce8 	bl	21c60 <GL_Widget_SetExpand>
	GL_Widget_SetForeColor(hButtonDown, GL_COLOR_WHITE);                              // Foreground color
    d290:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d292:	f04f 31ff 	mov.w	r1, #4294967295
    d296:	f014 fd3d 	bl	21d14 <GL_Widget_SetForeColor>
	if (bTouch)
    d29a:	7d7b      	ldrb	r3, [r7, #21]
    d29c:	2b00      	cmp	r3, #0
    d29e:	d004      	beq.n	d2aa <GoalCreateScreen+0x1da>
		GL_Widget_SetShortcut(hButtonDown, GL_KEY_DOT);                               // Shortcut on this button
    d2a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d2a2:	212e      	movs	r1, #46	; 0x2e
    d2a4:	f014 fda2 	bl	21dec <GL_Widget_SetShortcut>
    d2a8:	e004      	b.n	d2b4 <GoalCreateScreen+0x1e4>
	else
		GL_Widget_SetShortcut(hButtonDown, GL_KEY_DOWN);                              // Shortcut on this button
    d2aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d2ac:	f64f 015a 	movw	r1, #63578	; 0xf85a
    d2b0:	f014 fd9c 	bl	21dec <GL_Widget_SetShortcut>
	GL_Widget_SetId(hButtonDown, BUTTON_DOWN_ID);                                     // Down button Identifier
    d2b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d2b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    d2ba:	f014 fd4f 	bl	21d5c <GL_Widget_SetId>
	GL_Widget_SetGrow(hButtonDown, GL_DIRECTION_WIDTH);                               // Grow beyond its size (Background width around down button will fill the complete cell)
    d2be:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d2c0:	2101      	movs	r1, #1
    d2c2:	f014 fd39 	bl	21d38 <GL_Widget_SetGrow>
	GL_Widget_SetFocusable(hButtonDown, false);                                       // No focus on this button
    d2c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d2c8:	2100      	movs	r1, #0
    d2ca:	f014 fcdb 	bl	21c84 <GL_Widget_SetFocusable>
	GL_Widget_RegisterCallback(hButtonDown, GL_EVENT_STYLUS_CLICK, CallBackDownKey);  // Call back when key pressed
    d2ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
    d2d0:	2167      	movs	r1, #103	; 0x67
    d2d2:	f24d 020d 	movw	r2, #53261	; 0xd00d
    d2d6:	f2c0 0200 	movt	r2, #0
    d2da:	f014 fc67 	bl	21bac <GL_Widget_RegisterCallback>

	hButtonUp = GL_Button_Create(hLayout2);                                           // Create a up button on this layout
    d2de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d2e0:	f014 f98a 	bl	215f8 <GL_Button_Create>
    d2e4:	6378      	str	r0, [r7, #52]	; 0x34
	CHECK(hButtonUp!=NULL, lblKO);
    d2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2e8:	2b00      	cmp	r3, #0
    d2ea:	d073      	beq.n	d3d4 <GoalCreateScreen+0x304>
	GL_Widget_SetSource(hButtonUp, "skin://images/upArrow.wgu");                      // Set the up arrow skinned image
    d2ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d2ee:	f243 1158 	movw	r1, #12632	; 0x3158
    d2f2:	f2c0 0102 	movt	r1, #2
    d2f6:	f014 fdaf 	bl	21e58 <GL_Widget_SetSource>
	GL_Widget_SetItem(hButtonUp, 2, 0);                                               // Button location on this layout
    d2fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d2fc:	2102      	movs	r1, #2
    d2fe:	2200      	movs	r2, #0
    d300:	f014 fd3e 	bl	21d80 <GL_Widget_SetItem>
	GL_Widget_SetExpand(hButtonUp, GL_DIRECTION_WIDTH);                               // Expand button width
    d304:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d306:	2101      	movs	r1, #1
    d308:	f014 fcaa 	bl	21c60 <GL_Widget_SetExpand>
	GL_Widget_SetForeColor(hButtonUp, GL_COLOR_WHITE);                                // Foreground color
    d30c:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d30e:	f04f 31ff 	mov.w	r1, #4294967295
    d312:	f014 fcff 	bl	21d14 <GL_Widget_SetForeColor>
	if (bTouch)                                                                       // Touch screen?
    d316:	7d7b      	ldrb	r3, [r7, #21]
    d318:	2b00      	cmp	r3, #0
    d31a:	d005      	beq.n	d328 <GoalCreateScreen+0x258>
		GL_Widget_SetShortcut(hButtonUp, GL_KEY_F);                                   // Yes, Shortcut (Key F) on this button
    d31c:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d31e:	f64f 0154 	movw	r1, #63572	; 0xf854
    d322:	f014 fd63 	bl	21dec <GL_Widget_SetShortcut>
    d326:	e004      	b.n	d332 <GoalCreateScreen+0x262>
	else
		GL_Widget_SetShortcut(hButtonUp, GL_KEY_UP);                                  // No, Shortcut (Key Up) on this button
    d328:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d32a:	f64f 0159 	movw	r1, #63577	; 0xf859
    d32e:	f014 fd5d 	bl	21dec <GL_Widget_SetShortcut>
	GL_Widget_SetId(hButtonUp, BUTTON_UP_ID);                                         // Up button Identifier
    d332:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d334:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    d338:	f014 fd10 	bl	21d5c <GL_Widget_SetId>
	GL_Widget_SetGrow(hButtonUp, GL_DIRECTION_WIDTH);                                 // Grow beyond its size (Background width around up button will fill the complete cell)
    d33c:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d33e:	2101      	movs	r1, #1
    d340:	f014 fcfa 	bl	21d38 <GL_Widget_SetGrow>
	GL_Widget_SetFocusable(hButtonUp, false);                                         // No focus on this button
    d344:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d346:	2100      	movs	r1, #0
    d348:	f014 fc9c 	bl	21c84 <GL_Widget_SetFocusable>
	GL_Widget_RegisterCallback(hButtonUp, GL_EVENT_STYLUS_CLICK, CallBackUpKey);      // Call back when key pressed
    d34c:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d34e:	2167      	movs	r1, #103	; 0x67
    d350:	f24d 0249 	movw	r2, #53321	; 0xd049
    d354:	f2c0 0200 	movt	r2, #0
    d358:	f014 fc28 	bl	21bac <GL_Widget_RegisterCallback>

	hButtonVal = GL_Button_Create(hLayout2);                                          // Create a valid button on this second layout
    d35c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d35e:	f014 f94b 	bl	215f8 <GL_Button_Create>
    d362:	63b8      	str	r0, [r7, #56]	; 0x38
	CHECK(hButtonVal!=NULL, lblKO);
    d364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d366:	2b00      	cmp	r3, #0
    d368:	d034      	beq.n	d3d4 <GoalCreateScreen+0x304>
	GL_Widget_SetSource(hButtonVal, "skin://images/validation.wgu");                  // Set the valid skinned image
    d36a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d36c:	f243 1174 	movw	r1, #12660	; 0x3174
    d370:	f2c0 0102 	movt	r1, #2
    d374:	f014 fd70 	bl	21e58 <GL_Widget_SetSource>
	GL_Widget_SetItem(hButtonVal, 3, 0);                                              // Button location on this layout
    d378:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d37a:	2103      	movs	r1, #3
    d37c:	2200      	movs	r2, #0
    d37e:	f014 fcff 	bl	21d80 <GL_Widget_SetItem>
	GL_Widget_SetExpand(hButtonVal, GL_DIRECTION_WIDTH);                              // Expand button width
    d382:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d384:	2101      	movs	r1, #1
    d386:	f014 fc6b 	bl	21c60 <GL_Widget_SetExpand>
	GL_Widget_SetShortcut(hButtonVal, GL_KEY_VALID);                                  // Shortcut on this button
    d38a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d38c:	f64f 0150 	movw	r1, #63568	; 0xf850
    d390:	f014 fd2c 	bl	21dec <GL_Widget_SetShortcut>
	GL_Widget_SetId(hButtonVal, BUTTON_VAL_ID);                                       // Valid button Identifier
    d394:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d396:	f44f 7100 	mov.w	r1, #512	; 0x200
    d39a:	f014 fcdf 	bl	21d5c <GL_Widget_SetId>
	GL_Widget_SetGrow(hButtonVal, GL_DIRECTION_WIDTH);                                // Grow beyond its size (Background width around valid button will fill the complete cell)
    d39e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d3a0:	2101      	movs	r1, #1
    d3a2:	f014 fcc9 	bl	21d38 <GL_Widget_SetGrow>
	GL_Widget_SetFocusable(hButtonVal, false);                                        // No focus on this button
    d3a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d3a8:	2100      	movs	r1, #0
    d3aa:	f014 fc6b 	bl	21c84 <GL_Widget_SetFocusable>
	GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey);  // Call back when key pressed
    d3ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    d3b0:	2167      	movs	r1, #103	; 0x67
    d3b2:	f64c 7295 	movw	r2, #53141	; 0xcf95
    d3b6:	f2c0 0200 	movt	r2, #0
    d3ba:	f014 fbf7 	bl	21bac <GL_Widget_RegisterCallback>

	if(!bTouch)                                                                       // Touch screen?
    d3be:	7d7b      	ldrb	r3, [r7, #21]
    d3c0:	f083 0301 	eor.w	r3, r3, #1
    d3c4:	b2db      	uxtb	r3, r3
    d3c6:	2b00      	cmp	r3, #0
    d3c8:	d00d      	beq.n	d3e6 <GoalCreateScreen+0x316>
		GL_Widget_SetVisible(hLayout2, false);                                        // No, do not show second layout (keep shortcut access on key pressed)
    d3ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d3cc:	2100      	movs	r1, #0
    d3ce:	f014 fd9d 	bl	21f0c <GL_Widget_SetVisible>

	goto lblEnd;
    d3d2:	e008      	b.n	d3e6 <GoalCreateScreen+0x316>

	// Errors treatment
    // ****************
lblKO:                                                                                // Window creation failed
	if (hWindow)
    d3d4:	69bb      	ldr	r3, [r7, #24]
    d3d6:	2b00      	cmp	r3, #0
    d3d8:	d007      	beq.n	d3ea <GoalCreateScreen+0x31a>
	{
		GL_Widget_Destroy(hWindow);                                                   // Destroy window and all widgets
    d3da:	69b8      	ldr	r0, [r7, #24]
    d3dc:	f014 fbc2 	bl	21b64 <GL_Widget_Destroy>
		hWindow=NULL;
    d3e0:	2300      	movs	r3, #0
    d3e2:	61bb      	str	r3, [r7, #24]
	}
	goto lblEnd;
    d3e4:	e001      	b.n	d3ea <GoalCreateScreen+0x31a>
	GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey);  // Call back when key pressed

	if(!bTouch)                                                                       // Touch screen?
		GL_Widget_SetVisible(hLayout2, false);                                        // No, do not show second layout (keep shortcut access on key pressed)

	goto lblEnd;
    d3e6:	bf00      	nop
    d3e8:	e000      	b.n	d3ec <GoalCreateScreen+0x31c>
	if (hWindow)
	{
		GL_Widget_Destroy(hWindow);                                                   // Destroy window and all widgets
		hWindow=NULL;
	}
	goto lblEnd;
    d3ea:	bf00      	nop
lblEnd:
	return hWindow;
    d3ec:	69bb      	ldr	r3, [r7, #24]
}
    d3ee:	4618      	mov	r0, r3
    d3f0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    d3f4:	f2c0 0302 	movt	r3, #2
    d3f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d3fa:	681b      	ldr	r3, [r3, #0]
    d3fc:	429a      	cmp	r2, r3
    d3fe:	d001      	beq.n	d404 <GoalCreateScreen+0x334>
    d400:	f7fb fdd0 	bl	8fa4 <__stack_chk_fail>
    d404:	f107 0740 	add.w	r7, r7, #64	; 0x40
    d408:	46bd      	mov	sp, r7
    d40a:	bd80      	pop	{r7, pc}

0000d40c <GoalClrScreen>:
//   >=0 : Clear screen done.
//   <0 : Clear screen failed.
//****************************************************************************

int GoalClrScreen(T_GL_HWIDGET hWindow, T_GL_COLOR ulBackColor, unsigned int uiKeys, bool bRefresh)
{
    d40c:	b580      	push	{r7, lr}
    d40e:	b090      	sub	sp, #64	; 0x40
    d410:	af04      	add	r7, sp, #16
    d412:	60f8      	str	r0, [r7, #12]
    d414:	60b9      	str	r1, [r7, #8]
    d416:	607a      	str	r2, [r7, #4]
    d418:	70fb      	strb	r3, [r7, #3]
    d41a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    d41e:	f2c0 0302 	movt	r3, #2
    d422:	681b      	ldr	r3, [r3, #0]
    d424:	62fb      	str	r3, [r7, #44]	; 0x2c
	T_GL_HWIDGET hLabel, hButtonVal, hButtonCan, hButtonDown, hButtonUp;
	int iRet;

	// Disable the complete second layout
	// **********************************
	hButtonCan = GL_Widget_SearchId(hWindow, BUTTON_CAN_ID);      // Retrieve the cancel button on this second layout
    d426:	68f8      	ldr	r0, [r7, #12]
    d428:	f44f 7140 	mov.w	r1, #768	; 0x300
    d42c:	f014 fbd0 	bl	21bd0 <GL_Widget_SearchId>
    d430:	61b8      	str	r0, [r7, #24]
	CHECK(hButtonCan!=NULL, lblKO);
    d432:	69bb      	ldr	r3, [r7, #24]
    d434:	2b00      	cmp	r3, #0
    d436:	f000 80d3 	beq.w	d5e0 <GoalClrScreen+0x1d4>
	hButtonDown = GL_Widget_SearchId(hWindow, BUTTON_DOWN_ID);    // Retrieve the down button on this second layout
    d43a:	68f8      	ldr	r0, [r7, #12]
    d43c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    d440:	f014 fbc6 	bl	21bd0 <GL_Widget_SearchId>
    d444:	61f8      	str	r0, [r7, #28]
	CHECK(hButtonDown!=NULL, lblKO);
    d446:	69fb      	ldr	r3, [r7, #28]
    d448:	2b00      	cmp	r3, #0
    d44a:	f000 80c9 	beq.w	d5e0 <GoalClrScreen+0x1d4>
	hButtonUp = GL_Widget_SearchId(hWindow, BUTTON_UP_ID);        // Retrieve the up button on this second layout
    d44e:	68f8      	ldr	r0, [r7, #12]
    d450:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    d454:	f014 fbbc 	bl	21bd0 <GL_Widget_SearchId>
    d458:	6238      	str	r0, [r7, #32]
	CHECK(hButtonUp!=NULL, lblKO);
    d45a:	6a3b      	ldr	r3, [r7, #32]
    d45c:	2b00      	cmp	r3, #0
    d45e:	f000 80bf 	beq.w	d5e0 <GoalClrScreen+0x1d4>
	hButtonVal = GL_Widget_SearchId(hWindow, BUTTON_VAL_ID);      // Retrieve the valid button on this second layout
    d462:	68f8      	ldr	r0, [r7, #12]
    d464:	f44f 7100 	mov.w	r1, #512	; 0x200
    d468:	f014 fbb2 	bl	21bd0 <GL_Widget_SearchId>
    d46c:	6278      	str	r0, [r7, #36]	; 0x24
	CHECK(hButtonVal!=NULL, lblKO);
    d46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d470:	2b00      	cmp	r3, #0
    d472:	f000 80b5 	beq.w	d5e0 <GoalClrScreen+0x1d4>

	GL_Widget_SetVisible(hButtonCan, false);                      // Blind the cancel button
    d476:	69b8      	ldr	r0, [r7, #24]
    d478:	2100      	movs	r1, #0
    d47a:	f014 fd47 	bl	21f0c <GL_Widget_SetVisible>
	GL_Widget_UnregisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Unregister call back on cancel button
    d47e:	69b8      	ldr	r0, [r7, #24]
    d480:	2167      	movs	r1, #103	; 0x67
    d482:	f64c 72d1 	movw	r2, #53201	; 0xcfd1
    d486:	f2c0 0200 	movt	r2, #0
    d48a:	f014 fd63 	bl	21f54 <GL_Widget_UnregisterCallback>

	GL_Widget_SetVisible(hButtonDown, false);                     // Blind the down button
    d48e:	69f8      	ldr	r0, [r7, #28]
    d490:	2100      	movs	r1, #0
    d492:	f014 fd3b 	bl	21f0c <GL_Widget_SetVisible>
	GL_Widget_UnregisterCallback(hButtonDown, GL_EVENT_STYLUS_CLICK, CallBackDownKey); // Unregister call back on down button
    d496:	69f8      	ldr	r0, [r7, #28]
    d498:	2167      	movs	r1, #103	; 0x67
    d49a:	f24d 020d 	movw	r2, #53261	; 0xd00d
    d49e:	f2c0 0200 	movt	r2, #0
    d4a2:	f014 fd57 	bl	21f54 <GL_Widget_UnregisterCallback>

	GL_Widget_SetVisible(hButtonUp, false);                       // Blind the up button
    d4a6:	6a38      	ldr	r0, [r7, #32]
    d4a8:	2100      	movs	r1, #0
    d4aa:	f014 fd2f 	bl	21f0c <GL_Widget_SetVisible>
	GL_Widget_UnregisterCallback(hButtonUp, GL_EVENT_STYLUS_CLICK, CallBackUpKey); // Unregister call back on up button
    d4ae:	6a38      	ldr	r0, [r7, #32]
    d4b0:	2167      	movs	r1, #103	; 0x67
    d4b2:	f24d 0249 	movw	r2, #53321	; 0xd049
    d4b6:	f2c0 0200 	movt	r2, #0
    d4ba:	f014 fd4b 	bl	21f54 <GL_Widget_UnregisterCallback>

	GL_Widget_SetVisible(hButtonVal, false);                      // Blind the valid button
    d4be:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d4c0:	2100      	movs	r1, #0
    d4c2:	f014 fd23 	bl	21f0c <GL_Widget_SetVisible>
	GL_Widget_UnregisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Unregister call back on valid button
    d4c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d4c8:	2167      	movs	r1, #103	; 0x67
    d4ca:	f64c 7295 	movw	r2, #53141	; 0xcf95
    d4ce:	f2c0 0200 	movt	r2, #0
    d4d2:	f014 fd3f 	bl	21f54 <GL_Widget_UnregisterCallback>

	// Set the second layout with the right properties
	// ***********************************************
	if ((uiKeys & KEY_CANCEL) == KEY_CANCEL)                      // Cancel key?
    d4d6:	687b      	ldr	r3, [r7, #4]
    d4d8:	f003 0302 	and.w	r3, r3, #2
    d4dc:	2b00      	cmp	r3, #0
    d4de:	d00b      	beq.n	d4f8 <GoalClrScreen+0xec>
	{
		GL_Widget_SetVisible(hButtonCan, true);                   // Yes, show the cancel key on this second layout
    d4e0:	69b8      	ldr	r0, [r7, #24]
    d4e2:	2101      	movs	r1, #1
    d4e4:	f014 fd12 	bl	21f0c <GL_Widget_SetVisible>
		GL_Widget_RegisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Register call back when cancel key pressed or touched
    d4e8:	69b8      	ldr	r0, [r7, #24]
    d4ea:	2167      	movs	r1, #103	; 0x67
    d4ec:	f64c 72d1 	movw	r2, #53201	; 0xcfd1
    d4f0:	f2c0 0200 	movt	r2, #0
    d4f4:	f014 fb5a 	bl	21bac <GL_Widget_RegisterCallback>
	}

	if ((uiKeys & KEY_DOWN) == KEY_DOWN)                          // Down key?
    d4f8:	687b      	ldr	r3, [r7, #4]
    d4fa:	f003 0308 	and.w	r3, r3, #8
    d4fe:	2b00      	cmp	r3, #0
    d500:	d00b      	beq.n	d51a <GoalClrScreen+0x10e>
	{
		GL_Widget_SetVisible(hButtonDown, true);                  // Yes, show the down key on this second layout
    d502:	69f8      	ldr	r0, [r7, #28]
    d504:	2101      	movs	r1, #1
    d506:	f014 fd01 	bl	21f0c <GL_Widget_SetVisible>
		GL_Widget_RegisterCallback(hButtonDown, GL_EVENT_STYLUS_CLICK, CallBackDownKey); // Register call back when down key pressed or touched
    d50a:	69f8      	ldr	r0, [r7, #28]
    d50c:	2167      	movs	r1, #103	; 0x67
    d50e:	f24d 020d 	movw	r2, #53261	; 0xd00d
    d512:	f2c0 0200 	movt	r2, #0
    d516:	f014 fb49 	bl	21bac <GL_Widget_RegisterCallback>
	}

	if ((uiKeys & KEY_UP) == KEY_UP)                              // Up key?
    d51a:	687b      	ldr	r3, [r7, #4]
    d51c:	f003 0304 	and.w	r3, r3, #4
    d520:	2b00      	cmp	r3, #0
    d522:	d00b      	beq.n	d53c <GoalClrScreen+0x130>
	{
		GL_Widget_SetVisible(hButtonUp, true);                    // Yes, show the up key on this second layout
    d524:	6a38      	ldr	r0, [r7, #32]
    d526:	2101      	movs	r1, #1
    d528:	f014 fcf0 	bl	21f0c <GL_Widget_SetVisible>
		GL_Widget_RegisterCallback(hButtonUp, GL_EVENT_STYLUS_CLICK, CallBackUpKey); // Register call back when up key pressed or touched
    d52c:	6a38      	ldr	r0, [r7, #32]
    d52e:	2167      	movs	r1, #103	; 0x67
    d530:	f24d 0249 	movw	r2, #53321	; 0xd049
    d534:	f2c0 0200 	movt	r2, #0
    d538:	f014 fb38 	bl	21bac <GL_Widget_RegisterCallback>
	}

	if ((uiKeys & KEY_VALID) == KEY_VALID)                        // Valid key?
    d53c:	687b      	ldr	r3, [r7, #4]
    d53e:	f003 0301 	and.w	r3, r3, #1
    d542:	2b00      	cmp	r3, #0
    d544:	d00b      	beq.n	d55e <GoalClrScreen+0x152>
	{
		GL_Widget_SetVisible(hButtonVal, true);                   // Yes, show the valid key on this second layout
    d546:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d548:	2101      	movs	r1, #1
    d54a:	f014 fcdf 	bl	21f0c <GL_Widget_SetVisible>
		GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Register call back when key pressed or touched
    d54e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d550:	2167      	movs	r1, #103	; 0x67
    d552:	f64c 7295 	movw	r2, #53141	; 0xcf95
    d556:	f2c0 0200 	movt	r2, #0
    d55a:	f014 fb27 	bl	21bac <GL_Widget_RegisterCallback>
	}

	if (IsColorDisplay())                                         // Color display?
    d55e:	f012 ffff 	bl	20560 <IsColorDisplay>
    d562:	4603      	mov	r3, r0
    d564:	2b00      	cmp	r3, #0
    d566:	d004      	beq.n	d572 <GoalClrScreen+0x166>
		GL_Widget_SetBackColor(hWindow, ulBackColor);             // Yes, set window back color
    d568:	68f8      	ldr	r0, [r7, #12]
    d56a:	68b9      	ldr	r1, [r7, #8]
    d56c:	f014 fb54 	bl	21c18 <GL_Widget_SetBackColor>
    d570:	e006      	b.n	d580 <GoalClrScreen+0x174>
	else
	{
		ulBackColor = GL_COLOR_WHITE;                             // No, force window back color to white
    d572:	f04f 33ff 	mov.w	r3, #4294967295
    d576:	60bb      	str	r3, [r7, #8]
		GL_Widget_SetBackColor(hWindow, ulBackColor);
    d578:	68f8      	ldr	r0, [r7, #12]
    d57a:	68b9      	ldr	r1, [r7, #8]
    d57c:	f014 fb4c 	bl	21c18 <GL_Widget_SetBackColor>
	}

	// Clear screen
	// ************
	usIdx=0;
    d580:	2300      	movs	r3, #0
    d582:	827b      	strh	r3, [r7, #18]
	while(1)
	{
		hLabel = GL_Widget_SearchId(hWindow, LABEL_0_ID+usIdx++);  // Get label from its id
    d584:	8a7b      	ldrh	r3, [r7, #18]
    d586:	f503 7380 	add.w	r3, r3, #256	; 0x100
    d58a:	8a7a      	ldrh	r2, [r7, #18]
    d58c:	3201      	adds	r2, #1
    d58e:	827a      	strh	r2, [r7, #18]
    d590:	68f8      	ldr	r0, [r7, #12]
    d592:	4619      	mov	r1, r3
    d594:	f014 fb1c 	bl	21bd0 <GL_Widget_SearchId>
    d598:	62b8      	str	r0, [r7, #40]	; 0x28
		if(hLabel == NULL)
    d59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d59c:	2b00      	cmp	r3, #0
    d59e:	d014      	beq.n	d5ca <GoalClrScreen+0x1be>
			break;
		GL_Widget_SetText(hLabel, NULL);                          // Remove label text
    d5a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d5a2:	2100      	movs	r1, #0
    d5a4:	f014 fc6a 	bl	21e7c <GL_Widget_SetText>
		GL_Widget_SetBorders(hLabel, 0, 0, 0, 0, GL_UNIT_PIXEL, ulBackColor); // Remove border with window back color
    d5a8:	2300      	movs	r3, #0
    d5aa:	9300      	str	r3, [sp, #0]
    d5ac:	2300      	movs	r3, #0
    d5ae:	9301      	str	r3, [sp, #4]
    d5b0:	68bb      	ldr	r3, [r7, #8]
    d5b2:	9302      	str	r3, [sp, #8]
    d5b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d5b6:	2100      	movs	r1, #0
    d5b8:	2200      	movs	r2, #0
    d5ba:	2300      	movs	r3, #0
    d5bc:	f014 fb3e 	bl	21c3c <GL_Widget_SetBorders>
		GL_Widget_SetBackColor(hLabel, ulBackColor);              // Paint label back color with window back color
    d5c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d5c2:	68b9      	ldr	r1, [r7, #8]
    d5c4:	f014 fb28 	bl	21c18 <GL_Widget_SetBackColor>
	}
    d5c8:	e7dc      	b.n	d584 <GoalClrScreen+0x178>
	usIdx=0;
	while(1)
	{
		hLabel = GL_Widget_SearchId(hWindow, LABEL_0_ID+usIdx++);  // Get label from its id
		if(hLabel == NULL)
			break;
    d5ca:	bf00      	nop
		GL_Widget_SetText(hLabel, NULL);                          // Remove label text
		GL_Widget_SetBorders(hLabel, 0, 0, 0, 0, GL_UNIT_PIXEL, ulBackColor); // Remove border with window back color
		GL_Widget_SetBackColor(hLabel, ulBackColor);              // Paint label back color with window back color
	}

	if (bRefresh)                                                 // Refresh window?
    d5cc:	78fb      	ldrb	r3, [r7, #3]
    d5ce:	2b00      	cmp	r3, #0
    d5d0:	d003      	beq.n	d5da <GoalClrScreen+0x1ce>
		GL_Window_Dispatch(hWindow, 0);                           // Yes, refresh it
    d5d2:	68f8      	ldr	r0, [r7, #12]
    d5d4:	2100      	movs	r1, #0
    d5d6:	f014 fce1 	bl	21f9c <GL_Window_Dispatch>

	iRet=1;
    d5da:	2301      	movs	r3, #1
    d5dc:	617b      	str	r3, [r7, #20]
	goto lblEnd;
    d5de:	e003      	b.n	d5e8 <GoalClrScreen+0x1dc>

	// Errors treatment
    // ****************
lblKO:                                                            // Clear screen failed
	iRet=-1;
    d5e0:	f04f 33ff 	mov.w	r3, #4294967295
    d5e4:	617b      	str	r3, [r7, #20]
	goto lblEnd;
    d5e6:	bf00      	nop
lblEnd:
	return iRet;
    d5e8:	697b      	ldr	r3, [r7, #20]
}
    d5ea:	4618      	mov	r0, r3
    d5ec:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    d5f0:	f2c0 0302 	movt	r3, #2
    d5f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d5f6:	681b      	ldr	r3, [r3, #0]
    d5f8:	429a      	cmp	r2, r3
    d5fa:	d001      	beq.n	d600 <GoalClrScreen+0x1f4>
    d5fc:	f7fb fcd2 	bl	8fa4 <__stack_chk_fail>
    d600:	f107 0730 	add.w	r7, r7, #48	; 0x30
    d604:	46bd      	mov	sp, r7
    d606:	bd80      	pop	{r7, pc}

0000d608 <GoalRefreshScreen>:
//   hWindow (I-) : Window context handle.
// This function has return value.
//****************************************************************************

void GoalRefreshScreen(T_GL_HWIDGET hWindow)
{
    d608:	b580      	push	{r7, lr}
    d60a:	b084      	sub	sp, #16
    d60c:	af00      	add	r7, sp, #0
    d60e:	6078      	str	r0, [r7, #4]
    d610:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    d614:	f2c0 0302 	movt	r3, #2
    d618:	681b      	ldr	r3, [r3, #0]
    d61a:	60fb      	str	r3, [r7, #12]
    // ***************
		// Empty

	// Refresh screen
	// **************
	GL_Window_Dispatch(hWindow, 0);  // Refresh the window and dispatch all messages received
    d61c:	6878      	ldr	r0, [r7, #4]
    d61e:	2100      	movs	r1, #0
    d620:	f014 fcbc 	bl	21f9c <GL_Window_Dispatch>
}
    d624:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    d628:	f2c0 0302 	movt	r3, #2
    d62c:	68fa      	ldr	r2, [r7, #12]
    d62e:	681b      	ldr	r3, [r3, #0]
    d630:	429a      	cmp	r2, r3
    d632:	d001      	beq.n	d638 <GoalRefreshScreen+0x30>
    d634:	f7fb fcb6 	bl	8fa4 <__stack_chk_fail>
    d638:	f107 0710 	add.w	r7, r7, #16
    d63c:	46bd      	mov	sp, r7
    d63e:	bd80      	pop	{r7, pc}

0000d640 <GoalDspLine>:
//   >=0 : Display line done (Exit screen: 0=timeout,GL_KEY_CANCEL,GL_KEY_VALID).
//   <0 : Display line failed.
//****************************************************************************

int GoalDspLine(T_GL_HWIDGET hWindow, ushort usLine, char *pcText, const ST_DSP_LINE* pxLine, ulong ulTimeOut, bool bRefresh)
{
    d640:	b590      	push	{r4, r7, lr}
    d642:	b08f      	sub	sp, #60	; 0x3c
    d644:	af04      	add	r7, sp, #16
    d646:	6178      	str	r0, [r7, #20]
    d648:	60fa      	str	r2, [r7, #12]
    d64a:	60bb      	str	r3, [r7, #8]
    d64c:	460b      	mov	r3, r1
    d64e:	827b      	strh	r3, [r7, #18]
    d650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d652:	607b      	str	r3, [r7, #4]
    d654:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    d658:	747b      	strb	r3, [r7, #17]
    d65a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    d65e:	f2c0 0302 	movt	r3, #2
    d662:	681b      	ldr	r3, [r3, #0]
    d664:	627b      	str	r3, [r7, #36]	; 0x24
	T_GL_HWIDGET hLabel;
	int iRet;

	// Display line
	// ************
	CHECK(pxLine!=NULL, lblKO);
    d666:	68bb      	ldr	r3, [r7, #8]
    d668:	2b00      	cmp	r3, #0
    d66a:	f000 81a7 	beq.w	d9bc <GoalDspLine+0x37c>

	hLabel = GL_Widget_SearchId(hWindow, LABEL_0_ID+usLine); // Get label from its id
    d66e:	8a7b      	ldrh	r3, [r7, #18]
    d670:	f503 7380 	add.w	r3, r3, #256	; 0x100
    d674:	6978      	ldr	r0, [r7, #20]
    d676:	4619      	mov	r1, r3
    d678:	f014 faaa 	bl	21bd0 <GL_Widget_SearchId>
    d67c:	6238      	str	r0, [r7, #32]
	CHECK(hLabel!=NULL, lblKO);
    d67e:	6a3b      	ldr	r3, [r7, #32]
    d680:	2b00      	cmp	r3, #0
    d682:	f000 819b 	beq.w	d9bc <GoalDspLine+0x37c>

	if (pcText)                                              // Null text?
    d686:	68fb      	ldr	r3, [r7, #12]
    d688:	2b00      	cmp	r3, #0
    d68a:	d00c      	beq.n	d6a6 <GoalDspLine+0x66>
	{
		GL_Widget_SetVisible(hLabel, true);
    d68c:	6a38      	ldr	r0, [r7, #32]
    d68e:	2101      	movs	r1, #1
    d690:	f014 fc3c 	bl	21f0c <GL_Widget_SetVisible>
		GL_Widget_SetText(hLabel, "%s", pcText);             // No, show text (add %s to allow '%' to be displayed)
    d694:	6a38      	ldr	r0, [r7, #32]
    d696:	f243 1194 	movw	r1, #12692	; 0x3194
    d69a:	f2c0 0102 	movt	r1, #2
    d69e:	68fa      	ldr	r2, [r7, #12]
    d6a0:	f014 fbec 	bl	21e7c <GL_Widget_SetText>
    d6a4:	e003      	b.n	d6ae <GoalDspLine+0x6e>
	}
	else
		GL_Widget_SetVisible(hLabel, false);                 // Yes, blind text (line is removed)
    d6a6:	6a38      	ldr	r0, [r7, #32]
    d6a8:	2100      	movs	r1, #0
    d6aa:	f014 fc2f 	bl	21f0c <GL_Widget_SetVisible>

	if (IsColorDisplay())                                    // Color display?
    d6ae:	f012 ff57 	bl	20560 <IsColorDisplay>
    d6b2:	4603      	mov	r3, r0
    d6b4:	2b00      	cmp	r3, #0
    d6b6:	d074      	beq.n	d7a2 <GoalDspLine+0x162>
	{                                                        // Yes
		// Color properties
		// ================
		GL_Widget_SetTextAlign(hLabel, pxLine->xColor.eTextAlign);      // Text alignment
    d6b8:	68bb      	ldr	r3, [r7, #8]
    d6ba:	681b      	ldr	r3, [r3, #0]
    d6bc:	6a38      	ldr	r0, [r7, #32]
    d6be:	4619      	mov	r1, r3
    d6c0:	f014 fbee 	bl	21ea0 <GL_Widget_SetTextAlign>
		GL_Widget_SetBackAlign(hLabel, pxLine->xColor.eBackAlign);      // Background alignment
    d6c4:	68bb      	ldr	r3, [r7, #8]
    d6c6:	685b      	ldr	r3, [r3, #4]
    d6c8:	6a38      	ldr	r0, [r7, #32]
    d6ca:	4619      	mov	r1, r3
    d6cc:	f014 fa92 	bl	21bf4 <GL_Widget_SetBackAlign>
		GL_Widget_SetForeColor(hLabel, pxLine->xColor.ulPen);           // Pen color
    d6d0:	68bb      	ldr	r3, [r7, #8]
    d6d2:	689b      	ldr	r3, [r3, #8]
    d6d4:	6a38      	ldr	r0, [r7, #32]
    d6d6:	4619      	mov	r1, r3
    d6d8:	f014 fb1c 	bl	21d14 <GL_Widget_SetForeColor>
		GL_Widget_SetBackColor(hLabel, pxLine->xColor.ulBrush);         // Brush color
    d6dc:	68bb      	ldr	r3, [r7, #8]
    d6de:	68db      	ldr	r3, [r3, #12]
    d6e0:	6a38      	ldr	r0, [r7, #32]
    d6e2:	4619      	mov	r1, r3
    d6e4:	f014 fa98 	bl	21c18 <GL_Widget_SetBackColor>
		if (pxLine->xColor.usSizeWidth < 99)                            // Background width size
    d6e8:	68bb      	ldr	r3, [r7, #8]
    d6ea:	691b      	ldr	r3, [r3, #16]
    d6ec:	2b62      	cmp	r3, #98	; 0x62
    d6ee:	d808      	bhi.n	d702 <GoalDspLine+0xc2>
			GL_Widget_SetMinSize(hLabel, pxLine->xColor.usSizeWidth, 0, GL_UNIT_PERCENT); // The size
    d6f0:	68bb      	ldr	r3, [r7, #8]
    d6f2:	691b      	ldr	r3, [r3, #16]
    d6f4:	6a38      	ldr	r0, [r7, #32]
    d6f6:	4619      	mov	r1, r3
    d6f8:	2200      	movs	r2, #0
    d6fa:	2301      	movs	r3, #1
    d6fc:	f014 fb64 	bl	21dc8 <GL_Widget_SetMinSize>
    d700:	e003      	b.n	d70a <GoalDspLine+0xca>
		else
			GL_Widget_SetExpand(hLabel, GL_DIRECTION_WIDTH);                              // Full size
    d702:	6a38      	ldr	r0, [r7, #32]
    d704:	2101      	movs	r1, #1
    d706:	f014 faab 	bl	21c60 <GL_Widget_SetExpand>
		if (pxLine->xColor.bGrowWidth)                                  // Grow beyond its size
    d70a:	68bb      	ldr	r3, [r7, #8]
    d70c:	7d1b      	ldrb	r3, [r3, #20]
    d70e:	2b00      	cmp	r3, #0
    d710:	d003      	beq.n	d71a <GoalDspLine+0xda>
			GL_Widget_SetGrow(hLabel, GL_DIRECTION_WIDTH);              // Background width around the label will fill the complete cell
    d712:	6a38      	ldr	r0, [r7, #32]
    d714:	2101      	movs	r1, #1
    d716:	f014 fb0f 	bl	21d38 <GL_Widget_SetGrow>
			                                                            // Paddings, Borders and Margins
		GL_Widget_SetTextPaddings(hLabel, pxLine->xColor.xPadding.usLeft, pxLine->xColor.xPadding.usTop, pxLine->xColor.xPadding.usRight, pxLine->xColor.xPadding.usBottom, GL_UNIT_PERCENT);
    d71a:	68bb      	ldr	r3, [r7, #8]
    d71c:	6999      	ldr	r1, [r3, #24]
    d71e:	68bb      	ldr	r3, [r7, #8]
    d720:	69da      	ldr	r2, [r3, #28]
    d722:	68bb      	ldr	r3, [r7, #8]
    d724:	6a1b      	ldr	r3, [r3, #32]
    d726:	68b8      	ldr	r0, [r7, #8]
    d728:	6a40      	ldr	r0, [r0, #36]	; 0x24
    d72a:	9000      	str	r0, [sp, #0]
    d72c:	2001      	movs	r0, #1
    d72e:	9001      	str	r0, [sp, #4]
    d730:	6a38      	ldr	r0, [r7, #32]
    d732:	f014 fbc7 	bl	21ec4 <GL_Widget_SetTextPaddings>
		GL_Widget_SetBorders(hLabel, pxLine->xColor.xBorder.usLeft, pxLine->xColor.xBorder.usTop, pxLine->xColor.xBorder.usRight, pxLine->xColor.xBorder.usBottom, GL_UNIT_PIXEL, pxLine->xColor.xBorder.ulColor);
    d736:	68bb      	ldr	r3, [r7, #8]
    d738:	6a99      	ldr	r1, [r3, #40]	; 0x28
    d73a:	68bb      	ldr	r3, [r7, #8]
    d73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d73e:	68bb      	ldr	r3, [r7, #8]
    d740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d742:	68b8      	ldr	r0, [r7, #8]
    d744:	6b44      	ldr	r4, [r0, #52]	; 0x34
    d746:	68b8      	ldr	r0, [r7, #8]
    d748:	6b80      	ldr	r0, [r0, #56]	; 0x38
    d74a:	9400      	str	r4, [sp, #0]
    d74c:	2400      	movs	r4, #0
    d74e:	9401      	str	r4, [sp, #4]
    d750:	9002      	str	r0, [sp, #8]
    d752:	6a38      	ldr	r0, [r7, #32]
    d754:	f014 fa72 	bl	21c3c <GL_Widget_SetBorders>
		GL_Widget_SetMargins(hLabel, pxLine->xColor.xMargin.usLeft, pxLine->xColor.xMargin.usTop, pxLine->xColor.xMargin.usRight, pxLine->xColor.xMargin.usBottom, GL_UNIT_PIXEL);
    d758:	68bb      	ldr	r3, [r7, #8]
    d75a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    d75c:	68bb      	ldr	r3, [r7, #8]
    d75e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    d760:	68bb      	ldr	r3, [r7, #8]
    d762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d764:	68b8      	ldr	r0, [r7, #8]
    d766:	6c80      	ldr	r0, [r0, #72]	; 0x48
    d768:	9000      	str	r0, [sp, #0]
    d76a:	2000      	movs	r0, #0
    d76c:	9001      	str	r0, [sp, #4]
    d76e:	6a38      	ldr	r0, [r7, #32]
    d770:	f014 fb18 	bl	21da4 <GL_Widget_SetMargins>
		if (pxLine->xColor.xFont.pcName != NULL)
    d774:	68bb      	ldr	r3, [r7, #8]
    d776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    d778:	2b00      	cmp	r3, #0
    d77a:	d005      	beq.n	d788 <GoalDspLine+0x148>
			GL_Widget_SetFontName(hLabel, pxLine->xColor.xFont.pcName); // Font name
    d77c:	68bb      	ldr	r3, [r7, #8]
    d77e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    d780:	6a38      	ldr	r0, [r7, #32]
    d782:	4619      	mov	r1, r3
    d784:	f014 fa90 	bl	21ca8 <GL_Widget_SetFontName>
		GL_Widget_SetFontScale(hLabel, pxLine->xColor.xFont.eScale);    // Font scale
    d788:	68bb      	ldr	r3, [r7, #8]
    d78a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    d78c:	6a38      	ldr	r0, [r7, #32]
    d78e:	4619      	mov	r1, r3
    d790:	f014 fa9c 	bl	21ccc <GL_Widget_SetFontScale>
		GL_Widget_SetFontStyle(hLabel, pxLine->xColor.xFont.eStyle);    // Font style
    d794:	68bb      	ldr	r3, [r7, #8]
    d796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    d798:	6a38      	ldr	r0, [r7, #32]
    d79a:	4619      	mov	r1, r3
    d79c:	f014 faa8 	bl	21cf0 <GL_Widget_SetFontStyle>
    d7a0:	e0ab      	b.n	d8fa <GoalDspLine+0x2ba>
	}
	else                                                     // No
	{
		// Black & White properties
		// ========================
		GL_Widget_SetTextAlign(hLabel, pxLine->xBW.eTextAlign);         // Text alignment
    d7a2:	68bb      	ldr	r3, [r7, #8]
    d7a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    d7a6:	6a38      	ldr	r0, [r7, #32]
    d7a8:	4619      	mov	r1, r3
    d7aa:	f014 fb79 	bl	21ea0 <GL_Widget_SetTextAlign>
		GL_Widget_SetBackAlign(hLabel, pxLine->xBW.eBackAlign);         // Background alignment
    d7ae:	68bb      	ldr	r3, [r7, #8]
    d7b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    d7b2:	6a38      	ldr	r0, [r7, #32]
    d7b4:	4619      	mov	r1, r3
    d7b6:	f014 fa1d 	bl	21bf4 <GL_Widget_SetBackAlign>
		if (!pxLine->xBW.bReverse)                                      // B&W reverse?
    d7ba:	68bb      	ldr	r3, [r7, #8]
    d7bc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    d7c0:	f083 0301 	eor.w	r3, r3, #1
    d7c4:	b2db      	uxtb	r3, r3
    d7c6:	2b00      	cmp	r3, #0
    d7c8:	d00a      	beq.n	d7e0 <GoalDspLine+0x1a0>
		{                                                               // Yes
			GL_Widget_SetForeColor(hLabel, GL_COLOR_BLACK);             // Force pen color to black and brush color to white
    d7ca:	6a38      	ldr	r0, [r7, #32]
    d7cc:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    d7d0:	f014 faa0 	bl	21d14 <GL_Widget_SetForeColor>
			GL_Widget_SetBackColor(hLabel, GL_COLOR_WHITE);
    d7d4:	6a38      	ldr	r0, [r7, #32]
    d7d6:	f04f 31ff 	mov.w	r1, #4294967295
    d7da:	f014 fa1d 	bl	21c18 <GL_Widget_SetBackColor>
    d7de:	e009      	b.n	d7f4 <GoalDspLine+0x1b4>
		}
		else                                                            // No
		{
			GL_Widget_SetForeColor(hLabel, GL_COLOR_WHITE);             // Force pen color to white and brush color to black
    d7e0:	6a38      	ldr	r0, [r7, #32]
    d7e2:	f04f 31ff 	mov.w	r1, #4294967295
    d7e6:	f014 fa95 	bl	21d14 <GL_Widget_SetForeColor>
			GL_Widget_SetBackColor(hLabel, GL_COLOR_BLACK);
    d7ea:	6a38      	ldr	r0, [r7, #32]
    d7ec:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    d7f0:	f014 fa12 	bl	21c18 <GL_Widget_SetBackColor>
		}
		if (pxLine->xBW.usSizeWidth < 99)                               // Background width size
    d7f4:	68bb      	ldr	r3, [r7, #8]
    d7f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    d7f8:	2b62      	cmp	r3, #98	; 0x62
    d7fa:	d808      	bhi.n	d80e <GoalDspLine+0x1ce>
			GL_Widget_SetMinSize(hLabel, pxLine->xBW.usSizeWidth, 0, GL_UNIT_PERCENT); // The size
    d7fc:	68bb      	ldr	r3, [r7, #8]
    d7fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    d800:	6a38      	ldr	r0, [r7, #32]
    d802:	4619      	mov	r1, r3
    d804:	2200      	movs	r2, #0
    d806:	2301      	movs	r3, #1
    d808:	f014 fade 	bl	21dc8 <GL_Widget_SetMinSize>
    d80c:	e003      	b.n	d816 <GoalDspLine+0x1d6>
		else
			GL_Widget_SetExpand(hLabel, GL_DIRECTION_WIDTH);                           // Full size
    d80e:	6a38      	ldr	r0, [r7, #32]
    d810:	2101      	movs	r1, #1
    d812:	f014 fa25 	bl	21c60 <GL_Widget_SetExpand>
		if (pxLine->xBW.bGrowWidth)                                     // Grow beyond its size
    d816:	68bb      	ldr	r3, [r7, #8]
    d818:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    d81c:	2b00      	cmp	r3, #0
    d81e:	d003      	beq.n	d828 <GoalDspLine+0x1e8>
			GL_Widget_SetGrow(hLabel, GL_DIRECTION_WIDTH);              // Background width around the label will fill the complete cell
    d820:	6a38      	ldr	r0, [r7, #32]
    d822:	2101      	movs	r1, #1
    d824:	f014 fa88 	bl	21d38 <GL_Widget_SetGrow>
			                                                            // Paddings, Borders and Margins
		GL_Widget_SetTextPaddings(hLabel, pxLine->xBW.xPadding.usLeft, pxLine->xBW.xPadding.usTop, pxLine->xBW.xPadding.usRight, pxLine->xBW.xPadding.usBottom, GL_UNIT_PERCENT);
    d828:	68bb      	ldr	r3, [r7, #8]
    d82a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
    d82c:	68bb      	ldr	r3, [r7, #8]
    d82e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    d830:	68bb      	ldr	r3, [r7, #8]
    d832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    d834:	68b8      	ldr	r0, [r7, #8]
    d836:	6f80      	ldr	r0, [r0, #120]	; 0x78
    d838:	9000      	str	r0, [sp, #0]
    d83a:	2001      	movs	r0, #1
    d83c:	9001      	str	r0, [sp, #4]
    d83e:	6a38      	ldr	r0, [r7, #32]
    d840:	f014 fb40 	bl	21ec4 <GL_Widget_SetTextPaddings>
		if (pxLine->xBW.xBorder.ulColor != GL_COLOR_BLACK)              // Force border to black or white
    d844:	68bb      	ldr	r3, [r7, #8]
    d846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    d84a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    d84e:	d014      	beq.n	d87a <GoalDspLine+0x23a>
			GL_Widget_SetBorders(hLabel, pxLine->xBW.xBorder.usLeft, pxLine->xBW.xBorder.usTop, pxLine->xBW.xBorder.usRight, pxLine->xBW.xBorder.usBottom, GL_UNIT_PIXEL, GL_COLOR_WHITE);
    d850:	68bb      	ldr	r3, [r7, #8]
    d852:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
    d854:	68bb      	ldr	r3, [r7, #8]
    d856:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    d85a:	68bb      	ldr	r3, [r7, #8]
    d85c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    d860:	68b8      	ldr	r0, [r7, #8]
    d862:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    d866:	9000      	str	r0, [sp, #0]
    d868:	2000      	movs	r0, #0
    d86a:	9001      	str	r0, [sp, #4]
    d86c:	f04f 30ff 	mov.w	r0, #4294967295
    d870:	9002      	str	r0, [sp, #8]
    d872:	6a38      	ldr	r0, [r7, #32]
    d874:	f014 f9e2 	bl	21c3c <GL_Widget_SetBorders>
    d878:	e013      	b.n	d8a2 <GoalDspLine+0x262>
		else
			GL_Widget_SetBorders(hLabel, pxLine->xBW.xBorder.usLeft, pxLine->xBW.xBorder.usTop, pxLine->xBW.xBorder.usRight, pxLine->xBW.xBorder.usBottom, GL_UNIT_PIXEL, GL_COLOR_BLACK);
    d87a:	68bb      	ldr	r3, [r7, #8]
    d87c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
    d87e:	68bb      	ldr	r3, [r7, #8]
    d880:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    d884:	68bb      	ldr	r3, [r7, #8]
    d886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    d88a:	68b8      	ldr	r0, [r7, #8]
    d88c:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    d890:	9000      	str	r0, [sp, #0]
    d892:	2000      	movs	r0, #0
    d894:	9001      	str	r0, [sp, #4]
    d896:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
    d89a:	9002      	str	r0, [sp, #8]
    d89c:	6a38      	ldr	r0, [r7, #32]
    d89e:	f014 f9cd 	bl	21c3c <GL_Widget_SetBorders>
		GL_Widget_SetMargins(hLabel, pxLine->xBW.xMargin.usLeft, pxLine->xBW.xMargin.usTop, pxLine->xBW.xMargin.usRight, pxLine->xBW.xMargin.usBottom, GL_UNIT_PIXEL);
    d8a2:	68bb      	ldr	r3, [r7, #8]
    d8a4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
    d8a8:	68bb      	ldr	r3, [r7, #8]
    d8aa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    d8ae:	68bb      	ldr	r3, [r7, #8]
    d8b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    d8b4:	68b8      	ldr	r0, [r7, #8]
    d8b6:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    d8ba:	9000      	str	r0, [sp, #0]
    d8bc:	2000      	movs	r0, #0
    d8be:	9001      	str	r0, [sp, #4]
    d8c0:	6a38      	ldr	r0, [r7, #32]
    d8c2:	f014 fa6f 	bl	21da4 <GL_Widget_SetMargins>
		if (pxLine->xBW.xFont.pcName != NULL)
    d8c6:	68bb      	ldr	r3, [r7, #8]
    d8c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    d8cc:	2b00      	cmp	r3, #0
    d8ce:	d006      	beq.n	d8de <GoalDspLine+0x29e>
			GL_Widget_SetFontName(hLabel, pxLine->xBW.xFont.pcName);    // Font name
    d8d0:	68bb      	ldr	r3, [r7, #8]
    d8d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    d8d6:	6a38      	ldr	r0, [r7, #32]
    d8d8:	4619      	mov	r1, r3
    d8da:	f014 f9e5 	bl	21ca8 <GL_Widget_SetFontName>
		GL_Widget_SetFontScale(hLabel, pxLine->xBW.xFont.eScale);       // Font scale
    d8de:	68bb      	ldr	r3, [r7, #8]
    d8e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    d8e4:	6a38      	ldr	r0, [r7, #32]
    d8e6:	4619      	mov	r1, r3
    d8e8:	f014 f9f0 	bl	21ccc <GL_Widget_SetFontScale>
		GL_Widget_SetFontStyle(hLabel, pxLine->xBW.xFont.eStyle);       // Font style
    d8ec:	68bb      	ldr	r3, [r7, #8]
    d8ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    d8f2:	6a38      	ldr	r0, [r7, #32]
    d8f4:	4619      	mov	r1, r3
    d8f6:	f014 f9fb 	bl	21cf0 <GL_Widget_SetFontStyle>
	}

	CHECK(ulTimeOut!=0, lblNoTimer)                          // No timer to set
    d8fa:	687b      	ldr	r3, [r7, #4]
    d8fc:	2b00      	cmp	r3, #0
    d8fe:	d045      	beq.n	d98c <GoalDspLine+0x34c>

	// Restart timer
	// *************
	if (ulTimeOut == GL_TIME_INFINITE)                       // Set timeout value
    d900:	687b      	ldr	r3, [r7, #4]
    d902:	f1b3 3fff 	cmp.w	r3, #4294967295
    d906:	d10a      	bne.n	d91e <GoalDspLine+0x2de>
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), 0x7FFFFFFF);   // Bug 0xFFFFFFFF not supported
    d908:	6978      	ldr	r0, [r7, #20]
    d90a:	2100      	movs	r1, #0
    d90c:	f014 f960 	bl	21bd0 <GL_Widget_SearchId>
    d910:	4603      	mov	r3, r0
    d912:	4618      	mov	r0, r3
    d914:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d918:	f014 f900 	bl	21b1c <GL_Timer_SetInterval>
    d91c:	e008      	b.n	d930 <GoalDspLine+0x2f0>
	else
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), ulTimeOut);
    d91e:	6978      	ldr	r0, [r7, #20]
    d920:	2100      	movs	r1, #0
    d922:	f014 f955 	bl	21bd0 <GL_Widget_SearchId>
    d926:	4603      	mov	r3, r0
    d928:	4618      	mov	r0, r3
    d92a:	6879      	ldr	r1, [r7, #4]
    d92c:	f014 f8f6 	bl	21b1c <GL_Timer_SetInterval>

	// Loop indefinitely until the result is set from the call back functions
	// **********************************************************************
	GL_Window_MainLoop(hWindow);                             // Wait until a result is set
    d930:	6978      	ldr	r0, [r7, #20]
    d932:	f014 fb57 	bl	21fe4 <GL_Window_MainLoop>

	// Test the result set by the call back functions
	// **********************************************
	switch(GL_Window_GetResult(hWindow))                     // Get the result
    d936:	6978      	ldr	r0, [r7, #20]
    d938:	f014 fb42 	bl	21fc0 <GL_Window_GetResult>
    d93c:	4603      	mov	r3, r0
    d93e:	2b01      	cmp	r3, #1
    d940:	d010      	beq.n	d964 <GoalDspLine+0x324>
    d942:	2b01      	cmp	r3, #1
    d944:	d302      	bcc.n	d94c <GoalDspLine+0x30c>
    d946:	2b04      	cmp	r3, #4
    d948:	d018      	beq.n	d97c <GoalDspLine+0x33c>
    d94a:	e01a      	b.n	d982 <GoalDspLine+0x342>
	{
	case RES_VALID_STATUS:                                   // Key valid result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    d94c:	6978      	ldr	r0, [r7, #20]
    d94e:	2100      	movs	r1, #0
    d950:	f014 f93e 	bl	21bd0 <GL_Widget_SearchId>
    d954:	4603      	mov	r3, r0
    d956:	4618      	mov	r0, r3
    d958:	f014 f8f2 	bl	21b40 <GL_Timer_Stop>
		iRet=GL_KEY_VALID;
    d95c:	f64f 0350 	movw	r3, #63568	; 0xf850
    d960:	61fb      	str	r3, [r7, #28]
		break;
    d962:	e012      	b.n	d98a <GoalDspLine+0x34a>
	case RES_CANCEL_STATUS:                                  // Key cancel result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    d964:	6978      	ldr	r0, [r7, #20]
    d966:	2100      	movs	r1, #0
    d968:	f014 f932 	bl	21bd0 <GL_Widget_SearchId>
    d96c:	4603      	mov	r3, r0
    d96e:	4618      	mov	r0, r3
    d970:	f014 f8e6 	bl	21b40 <GL_Timer_Stop>
		iRet=GL_KEY_CANCEL;
    d974:	f64f 0351 	movw	r3, #63569	; 0xf851
    d978:	61fb      	str	r3, [r7, #28]
		break;
    d97a:	e006      	b.n	d98a <GoalDspLine+0x34a>
	case RES_TIMER_STATUS:                                   // Timer result
		iRet=0;
    d97c:	2300      	movs	r3, #0
    d97e:	61fb      	str	r3, [r7, #28]
		break;
    d980:	e003      	b.n	d98a <GoalDspLine+0x34a>
	default:                                                 // Unknown result
		iRet=-1;
    d982:	f04f 33ff 	mov.w	r3, #4294967295
    d986:	61fb      	str	r3, [r7, #28]
		break;
    d988:	bf00      	nop
	}

	goto lblEnd;
    d98a:	e01c      	b.n	d9c6 <GoalDspLine+0x386>

	// Errors treatment
    // ****************
lblNoTimer:                                                  // No timer used
	iRet=0;
    d98c:	2300      	movs	r3, #0
    d98e:	61fb      	str	r3, [r7, #28]
	if (bRefresh)
    d990:	7c7b      	ldrb	r3, [r7, #17]
    d992:	2b00      	cmp	r3, #0
    d994:	d016      	beq.n	d9c4 <GoalDspLine+0x384>
	{
		iRet = GL_Window_Dispatch(hWindow, 0);               // Refresh the window
    d996:	6978      	ldr	r0, [r7, #20]
    d998:	2100      	movs	r1, #0
    d99a:	f014 faff 	bl	21f9c <GL_Window_Dispatch>
    d99e:	4603      	mov	r3, r0
    d9a0:	61fb      	str	r3, [r7, #28]
		if (iRet == RES_VALID_STATUS)
    d9a2:	69fb      	ldr	r3, [r7, #28]
    d9a4:	2b00      	cmp	r3, #0
    d9a6:	d102      	bne.n	d9ae <GoalDspLine+0x36e>
			iRet=GL_KEY_VALID;
    d9a8:	f64f 0350 	movw	r3, #63568	; 0xf850
    d9ac:	61fb      	str	r3, [r7, #28]
		if (iRet == RES_CANCEL_STATUS)
    d9ae:	69fb      	ldr	r3, [r7, #28]
    d9b0:	2b01      	cmp	r3, #1
    d9b2:	d107      	bne.n	d9c4 <GoalDspLine+0x384>
			iRet=GL_KEY_CANCEL;
    d9b4:	f64f 0351 	movw	r3, #63569	; 0xf851
    d9b8:	61fb      	str	r3, [r7, #28]
	}
	goto lblEnd;
    d9ba:	e003      	b.n	d9c4 <GoalDspLine+0x384>
lblKO:                                                       // Display line failed
	iRet=-1;
    d9bc:	f04f 33ff 	mov.w	r3, #4294967295
    d9c0:	61fb      	str	r3, [r7, #28]
	goto lblEnd;
    d9c2:	e000      	b.n	d9c6 <GoalDspLine+0x386>
		if (iRet == RES_VALID_STATUS)
			iRet=GL_KEY_VALID;
		if (iRet == RES_CANCEL_STATUS)
			iRet=GL_KEY_CANCEL;
	}
	goto lblEnd;
    d9c4:	bf00      	nop
lblKO:                                                       // Display line failed
	iRet=-1;
	goto lblEnd;
lblEnd:
	return iRet;
    d9c6:	69fb      	ldr	r3, [r7, #28]
}
    d9c8:	4618      	mov	r0, r3
    d9ca:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    d9ce:	f2c0 0302 	movt	r3, #2
    d9d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d9d4:	681b      	ldr	r3, [r3, #0]
    d9d6:	429a      	cmp	r2, r3
    d9d8:	d001      	beq.n	d9de <GoalDspLine+0x39e>
    d9da:	f7fb fae3 	bl	8fa4 <__stack_chk_fail>
    d9de:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    d9e2:	46bd      	mov	sp, r7
    d9e4:	bd90      	pop	{r4, r7, pc}
    d9e6:	bf00      	nop

0000d9e8 <GoalDspMultiLine>:
//    >=0 : Display buffer done (Exit screen : 0=timeout,GL_KEY_CANCEL,GL_KEY_VALID).
//    <0 : Display buffer failed.
//****************************************************************************

int GoalDspMultiLine(T_GL_HWIDGET hWindow, ushort usLine, char *pcData , int iLen, const ST_DSP_LINE txLine[], ushort usMaxLine, ulong ulTimeOut, bool bRefresh)
{
    d9e8:	b5b0      	push	{r4, r5, r7, lr}
    d9ea:	b0d2      	sub	sp, #328	; 0x148
    d9ec:	af02      	add	r7, sp, #8
    d9ee:	f107 041c 	add.w	r4, r7, #28
    d9f2:	6020      	str	r0, [r4, #0]
    d9f4:	460d      	mov	r5, r1
    d9f6:	f107 0114 	add.w	r1, r7, #20
    d9fa:	600a      	str	r2, [r1, #0]
    d9fc:	f107 0210 	add.w	r2, r7, #16
    da00:	6013      	str	r3, [r2, #0]
    da02:	f107 000c 	add.w	r0, r7, #12
    da06:	f107 0118 	add.w	r1, r7, #24
    da0a:	f107 0208 	add.w	r2, r7, #8
    da0e:	1dfb      	adds	r3, r7, #7
    da10:	f107 041a 	add.w	r4, r7, #26
    da14:	8025      	strh	r5, [r4, #0]
    da16:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
    da1a:	6004      	str	r4, [r0, #0]
    da1c:	f8b7 0154 	ldrh.w	r0, [r7, #340]	; 0x154
    da20:	8008      	strh	r0, [r1, #0]
    da22:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
    da26:	6011      	str	r1, [r2, #0]
    da28:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
    da2c:	701a      	strb	r2, [r3, #0]
    da2e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    da32:	f2c0 0302 	movt	r3, #2
    da36:	681b      	ldr	r3, [r3, #0]
    da38:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	// Local variables
    // ***************
	ST_DSP_LINE xLine;
	int iCount=0;
    da3c:	f107 0320 	add.w	r3, r7, #32
    da40:	2200      	movs	r2, #0
    da42:	601a      	str	r2, [r3, #0]
	char tcBuffer[100+1];
	int iRet=-1;
    da44:	f107 0324 	add.w	r3, r7, #36	; 0x24
    da48:	f04f 32ff 	mov.w	r2, #4294967295
    da4c:	601a      	str	r2, [r3, #0]

	// Printing in progress
	// ********************
	CHECK ((pcData!=NULL) && (iLen>=0), lblKO);
    da4e:	f107 0314 	add.w	r3, r7, #20
    da52:	681b      	ldr	r3, [r3, #0]
    da54:	2b00      	cmp	r3, #0
    da56:	f000 8110 	beq.w	dc7a <GoalDspMultiLine+0x292>
    da5a:	f107 0310 	add.w	r3, r7, #16
    da5e:	681b      	ldr	r3, [r3, #0]
    da60:	2b00      	cmp	r3, #0
    da62:	f2c0 810a 	blt.w	dc7a <GoalDspMultiLine+0x292>

	memset(tcBuffer, 0, sizeof(tcBuffer));
    da66:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
    da6a:	4618      	mov	r0, r3
    da6c:	2100      	movs	r1, #0
    da6e:	2265      	movs	r2, #101	; 0x65
    da70:	f7fb e8a4 	blx	8bbc <_init+0x5c>
	while(usLine < usMaxLine)
    da74:	e0f6      	b.n	dc64 <GoalDspMultiLine+0x27c>
	{
		if (iLen > 0)               // Check if it is the end of data
    da76:	f107 0310 	add.w	r3, r7, #16
    da7a:	681b      	ldr	r3, [r3, #0]
    da7c:	2b00      	cmp	r3, #0
    da7e:	f340 80ba 	ble.w	dbf6 <GoalDspMultiLine+0x20e>
		{                           // No, it's a line with '\n' detected
			if (*pcData != '\n')    // Save character into buffer
    da82:	f107 0314 	add.w	r3, r7, #20
    da86:	681b      	ldr	r3, [r3, #0]
    da88:	781b      	ldrb	r3, [r3, #0]
    da8a:	2b0a      	cmp	r3, #10
    da8c:	d039      	beq.n	db02 <GoalDspMultiLine+0x11a>
			{
				if (iCount < 100)
    da8e:	f107 0320 	add.w	r3, r7, #32
    da92:	681b      	ldr	r3, [r3, #0]
    da94:	2b63      	cmp	r3, #99	; 0x63
    da96:	dc20      	bgt.n	dada <GoalDspMultiLine+0xf2>
				{
					tcBuffer[iCount++] = *pcData++;
    da98:	f107 0314 	add.w	r3, r7, #20
    da9c:	681b      	ldr	r3, [r3, #0]
    da9e:	781a      	ldrb	r2, [r3, #0]
    daa0:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
    daa4:	f107 0320 	add.w	r3, r7, #32
    daa8:	681b      	ldr	r3, [r3, #0]
    daaa:	18cb      	adds	r3, r1, r3
    daac:	701a      	strb	r2, [r3, #0]
    daae:	f107 0320 	add.w	r3, r7, #32
    dab2:	f107 0220 	add.w	r2, r7, #32
    dab6:	6812      	ldr	r2, [r2, #0]
    dab8:	3201      	adds	r2, #1
    daba:	601a      	str	r2, [r3, #0]
    dabc:	f107 0314 	add.w	r3, r7, #20
    dac0:	f107 0214 	add.w	r2, r7, #20
    dac4:	6812      	ldr	r2, [r2, #0]
    dac6:	3201      	adds	r2, #1
    dac8:	601a      	str	r2, [r3, #0]
					tcBuffer[iCount]=0;
    daca:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
    dace:	f107 0320 	add.w	r3, r7, #32
    dad2:	681b      	ldr	r3, [r3, #0]
    dad4:	18d3      	adds	r3, r2, r3
    dad6:	2200      	movs	r2, #0
    dad8:	701a      	strb	r2, [r3, #0]
				}
				iLen--;
    dada:	f107 0310 	add.w	r3, r7, #16
    dade:	f107 0210 	add.w	r2, r7, #16
    dae2:	6812      	ldr	r2, [r2, #0]
    dae4:	3a01      	subs	r2, #1
    dae6:	601a      	str	r2, [r3, #0]
    dae8:	f107 031a 	add.w	r3, r7, #26
    daec:	f107 021a 	add.w	r2, r7, #26
    daf0:	8812      	ldrh	r2, [r2, #0]
    daf2:	801a      	strh	r2, [r3, #0]
    daf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
    daf8:	f107 0224 	add.w	r2, r7, #36	; 0x24
    dafc:	6812      	ldr	r2, [r2, #0]
    dafe:	601a      	str	r2, [r3, #0]
    db00:	e0b0      	b.n	dc64 <GoalDspMultiLine+0x27c>
			}
			else                    // '\n' detected
			{
				xLine = txLine[usLine];
    db02:	f107 031a 	add.w	r3, r7, #26
    db06:	881b      	ldrh	r3, [r3, #0]
    db08:	22ac      	movs	r2, #172	; 0xac
    db0a:	fb02 f303 	mul.w	r3, r2, r3
    db0e:	f107 020c 	add.w	r2, r7, #12
    db12:	6812      	ldr	r2, [r2, #0]
    db14:	18d3      	adds	r3, r2, r3
    db16:	f107 0228 	add.w	r2, r7, #40	; 0x28
    db1a:	4611      	mov	r1, r2
    db1c:	461a      	mov	r2, r3
    db1e:	23ac      	movs	r3, #172	; 0xac
    db20:	4608      	mov	r0, r1
    db22:	4611      	mov	r1, r2
    db24:	461a      	mov	r2, r3
    db26:	f7fb e8a8 	blx	8c78 <_init+0x118>
				if (usLine == usMaxLine-1)
    db2a:	f107 031a 	add.w	r3, r7, #26
    db2e:	881a      	ldrh	r2, [r3, #0]
    db30:	f107 0318 	add.w	r3, r7, #24
    db34:	881b      	ldrh	r3, [r3, #0]
    db36:	3b01      	subs	r3, #1
    db38:	429a      	cmp	r2, r3
    db3a:	d122      	bne.n	db82 <GoalDspMultiLine+0x19a>
				{                   // Last line to display
					iRet = GoalDspLine(hWindow, usLine++, tcBuffer, &xLine, ulTimeOut, bRefresh);
    db3c:	f107 031a 	add.w	r3, r7, #26
    db40:	8819      	ldrh	r1, [r3, #0]
    db42:	f107 031a 	add.w	r3, r7, #26
    db46:	f107 021a 	add.w	r2, r7, #26
    db4a:	8812      	ldrh	r2, [r2, #0]
    db4c:	3201      	adds	r2, #1
    db4e:	801a      	strh	r2, [r3, #0]
    db50:	f107 0424 	add.w	r4, r7, #36	; 0x24
    db54:	f107 001c 	add.w	r0, r7, #28
    db58:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
    db5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
    db60:	f107 0508 	add.w	r5, r7, #8
    db64:	682d      	ldr	r5, [r5, #0]
    db66:	9500      	str	r5, [sp, #0]
    db68:	1dfd      	adds	r5, r7, #7
    db6a:	782d      	ldrb	r5, [r5, #0]
    db6c:	9501      	str	r5, [sp, #4]
    db6e:	6800      	ldr	r0, [r0, #0]
    db70:	f7ff fd66 	bl	d640 <GoalDspLine>
    db74:	6020      	str	r0, [r4, #0]
					CHECK(iRet>=0, lblKO);
    db76:	f107 0324 	add.w	r3, r7, #36	; 0x24
    db7a:	681b      	ldr	r3, [r3, #0]
    db7c:	2b00      	cmp	r3, #0
    db7e:	db7c      	blt.n	dc7a <GoalDspMultiLine+0x292>
    db80:	e01e      	b.n	dbc0 <GoalDspMultiLine+0x1d8>
				}
				else
				{                   // Next line to display
					iRet = GoalDspLine(hWindow, usLine++, tcBuffer, &xLine, 0, false);
    db82:	f107 031a 	add.w	r3, r7, #26
    db86:	8819      	ldrh	r1, [r3, #0]
    db88:	f107 031a 	add.w	r3, r7, #26
    db8c:	f107 021a 	add.w	r2, r7, #26
    db90:	8812      	ldrh	r2, [r2, #0]
    db92:	3201      	adds	r2, #1
    db94:	801a      	strh	r2, [r3, #0]
    db96:	f107 0424 	add.w	r4, r7, #36	; 0x24
    db9a:	f107 001c 	add.w	r0, r7, #28
    db9e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
    dba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
    dba6:	2500      	movs	r5, #0
    dba8:	9500      	str	r5, [sp, #0]
    dbaa:	2500      	movs	r5, #0
    dbac:	9501      	str	r5, [sp, #4]
    dbae:	6800      	ldr	r0, [r0, #0]
    dbb0:	f7ff fd46 	bl	d640 <GoalDspLine>
    dbb4:	6020      	str	r0, [r4, #0]
					CHECK(iRet>=0, lblKO);
    dbb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
    dbba:	681b      	ldr	r3, [r3, #0]
    dbbc:	2b00      	cmp	r3, #0
    dbbe:	db5c      	blt.n	dc7a <GoalDspMultiLine+0x292>
				}
				iCount=0;
    dbc0:	f107 0320 	add.w	r3, r7, #32
    dbc4:	2200      	movs	r2, #0
    dbc6:	601a      	str	r2, [r3, #0]
				tcBuffer[iCount]=0;
    dbc8:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
    dbcc:	f107 0320 	add.w	r3, r7, #32
    dbd0:	681b      	ldr	r3, [r3, #0]
    dbd2:	18d3      	adds	r3, r2, r3
    dbd4:	2200      	movs	r2, #0
    dbd6:	701a      	strb	r2, [r3, #0]
				pcData++;
    dbd8:	f107 0314 	add.w	r3, r7, #20
    dbdc:	f107 0214 	add.w	r2, r7, #20
    dbe0:	6812      	ldr	r2, [r2, #0]
    dbe2:	3201      	adds	r2, #1
    dbe4:	601a      	str	r2, [r3, #0]
				iLen--;
    dbe6:	f107 0310 	add.w	r3, r7, #16
    dbea:	f107 0210 	add.w	r2, r7, #16
    dbee:	6812      	ldr	r2, [r2, #0]
    dbf0:	3a01      	subs	r2, #1
    dbf2:	601a      	str	r2, [r3, #0]
    dbf4:	e036      	b.n	dc64 <GoalDspMultiLine+0x27c>
			}
		}
		else
		{                           // Yes, it's the end of data
			xLine = txLine[usLine]; // Display line
    dbf6:	f107 031a 	add.w	r3, r7, #26
    dbfa:	881b      	ldrh	r3, [r3, #0]
    dbfc:	22ac      	movs	r2, #172	; 0xac
    dbfe:	fb02 f303 	mul.w	r3, r2, r3
    dc02:	f107 020c 	add.w	r2, r7, #12
    dc06:	6812      	ldr	r2, [r2, #0]
    dc08:	18d3      	adds	r3, r2, r3
    dc0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
    dc0e:	4611      	mov	r1, r2
    dc10:	461a      	mov	r2, r3
    dc12:	23ac      	movs	r3, #172	; 0xac
    dc14:	4608      	mov	r0, r1
    dc16:	4611      	mov	r1, r2
    dc18:	461a      	mov	r2, r3
    dc1a:	f7fb e82e 	blx	8c78 <_init+0x118>
			iRet = GoalDspLine(hWindow, usLine++, tcBuffer, &xLine, ulTimeOut, bRefresh);
    dc1e:	f107 031a 	add.w	r3, r7, #26
    dc22:	8819      	ldrh	r1, [r3, #0]
    dc24:	f107 031a 	add.w	r3, r7, #26
    dc28:	f107 021a 	add.w	r2, r7, #26
    dc2c:	8812      	ldrh	r2, [r2, #0]
    dc2e:	3201      	adds	r2, #1
    dc30:	801a      	strh	r2, [r3, #0]
    dc32:	f107 0424 	add.w	r4, r7, #36	; 0x24
    dc36:	f107 001c 	add.w	r0, r7, #28
    dc3a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
    dc3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
    dc42:	f107 0508 	add.w	r5, r7, #8
    dc46:	682d      	ldr	r5, [r5, #0]
    dc48:	9500      	str	r5, [sp, #0]
    dc4a:	1dfd      	adds	r5, r7, #7
    dc4c:	782d      	ldrb	r5, [r5, #0]
    dc4e:	9501      	str	r5, [sp, #4]
    dc50:	6800      	ldr	r0, [r0, #0]
    dc52:	f7ff fcf5 	bl	d640 <GoalDspLine>
    dc56:	6020      	str	r0, [r4, #0]
			CHECK(iRet>=0, lblKO);
    dc58:	f107 0324 	add.w	r3, r7, #36	; 0x24
    dc5c:	681b      	ldr	r3, [r3, #0]
    dc5e:	2b00      	cmp	r3, #0
    dc60:	db0b      	blt.n	dc7a <GoalDspMultiLine+0x292>
			break;                  // Exit from the loop
    dc62:	e009      	b.n	dc78 <GoalDspMultiLine+0x290>
	// Printing in progress
	// ********************
	CHECK ((pcData!=NULL) && (iLen>=0), lblKO);

	memset(tcBuffer, 0, sizeof(tcBuffer));
	while(usLine < usMaxLine)
    dc64:	f107 021a 	add.w	r2, r7, #26
    dc68:	f107 0318 	add.w	r3, r7, #24
    dc6c:	8812      	ldrh	r2, [r2, #0]
    dc6e:	881b      	ldrh	r3, [r3, #0]
    dc70:	429a      	cmp	r2, r3
    dc72:	f4ff af00 	bcc.w	da76 <GoalDspMultiLine+0x8e>
			CHECK(iRet>=0, lblKO);
			break;                  // Exit from the loop
		}
	}

	goto lblEnd;
    dc76:	e006      	b.n	dc86 <GoalDspMultiLine+0x29e>
    dc78:	e005      	b.n	dc86 <GoalDspMultiLine+0x29e>

	// Errors treatment
    // ****************
lblKO:                              // Display buffer failed.
	iRet=-1;
    dc7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
    dc7e:	f04f 32ff 	mov.w	r2, #4294967295
    dc82:	601a      	str	r2, [r3, #0]
	goto lblEnd;
    dc84:	bf00      	nop
lblEnd:
	return iRet;
    dc86:	f107 0324 	add.w	r3, r7, #36	; 0x24
    dc8a:	681b      	ldr	r3, [r3, #0]
}
    dc8c:	4618      	mov	r0, r3
    dc8e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    dc92:	f2c0 0302 	movt	r3, #2
    dc96:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
    dc9a:	681b      	ldr	r3, [r3, #0]
    dc9c:	429a      	cmp	r2, r3
    dc9e:	d001      	beq.n	dca4 <GoalDspMultiLine+0x2bc>
    dca0:	f7fb f980 	bl	8fa4 <__stack_chk_fail>
    dca4:	f507 77a0 	add.w	r7, r7, #320	; 0x140
    dca8:	46bd      	mov	sp, r7
    dcaa:	bdb0      	pop	{r4, r5, r7, pc}

0000dcac <GoalGetKey>:
//   >0 : Key value.
//   =0 : Timeout.
//****************************************************************************

int GoalGetKey(T_GL_HWIDGET hWindow, T_GL_HGRAPHIC_LIB hGraphicLib, bool bShortcut, ulong ulTimeOut, bool bClear)
{
    dcac:	b580      	push	{r7, lr}
    dcae:	b088      	sub	sp, #32
    dcb0:	af00      	add	r7, sp, #0
    dcb2:	60f8      	str	r0, [r7, #12]
    dcb4:	60b9      	str	r1, [r7, #8]
    dcb6:	603b      	str	r3, [r7, #0]
    dcb8:	4613      	mov	r3, r2
    dcba:	71fb      	strb	r3, [r7, #7]
    dcbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    dcc0:	71bb      	strb	r3, [r7, #6]
    dcc2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    dcc6:	f2c0 0302 	movt	r3, #2
    dcca:	681b      	ldr	r3, [r3, #0]
    dccc:	61fb      	str	r3, [r7, #28]
	T_GL_WCHAR ulKey;
	int iRet;

	// Loop indefinitely until the result is set from the call back functions
	// **********************************************************************
	bTouch = GL_GraphicLib_IsTouchPresent(hGraphicLib);       // Touch screen?
    dcce:	68b8      	ldr	r0, [r7, #8]
    dcd0:	f013 fe4c 	bl	2196c <GL_GraphicLib_IsTouchPresent>
    dcd4:	4603      	mov	r3, r0
    dcd6:	74fb      	strb	r3, [r7, #19]
	if (bTouch)
    dcd8:	7cfb      	ldrb	r3, [r7, #19]
    dcda:	2b00      	cmp	r3, #0
    dcdc:	d009      	beq.n	dcf2 <GoalGetKey+0x46>
	{                                                         // Yes,
		GL_GraphicLib_UnbindKey(hGraphicLib, GL_KEY_F);       // Unbind "F" key to Telium Key
    dcde:	68b8      	ldr	r0, [r7, #8]
    dce0:	f64f 0154 	movw	r1, #63572	; 0xf854
    dce4:	f013 fe66 	bl	219b4 <GL_GraphicLib_UnbindKey>
		GL_GraphicLib_UnbindKey(hGraphicLib, GL_KEY_DOT);     // Unbind "Dot" key to Telium Key
    dce8:	68b8      	ldr	r0, [r7, #8]
    dcea:	212e      	movs	r1, #46	; 0x2e
    dcec:	f013 fe62 	bl	219b4 <GL_GraphicLib_UnbindKey>
    dcf0:	e013      	b.n	dd1a <GoalGetKey+0x6e>
	}
	else
	{                                                         // No,
		GL_GraphicLib_UnbindKey(hGraphicLib, GL_KEY_UP);      // Unbind "Up" key to Telium Key
    dcf2:	68b8      	ldr	r0, [r7, #8]
    dcf4:	f64f 0159 	movw	r1, #63577	; 0xf859
    dcf8:	f013 fe5c 	bl	219b4 <GL_GraphicLib_UnbindKey>
		GL_GraphicLib_UnbindKey(hGraphicLib, GL_KEY_DOWN);    // Unbind "Down" key to Telium Key
    dcfc:	68b8      	ldr	r0, [r7, #8]
    dcfe:	f64f 015a 	movw	r1, #63578	; 0xf85a
    dd02:	f013 fe57 	bl	219b4 <GL_GraphicLib_UnbindKey>
		GL_GraphicLib_UnbindKey(hGraphicLib, GL_KEY_F1);      // Unbind "F1" key to Telium Key
    dd06:	68b8      	ldr	r0, [r7, #8]
    dd08:	f64f 0155 	movw	r1, #63573	; 0xf855
    dd0c:	f013 fe52 	bl	219b4 <GL_GraphicLib_UnbindKey>
		GL_GraphicLib_UnbindKey(hGraphicLib, GL_KEY_F4);      // Unbind "F4" key to Telium Key
    dd10:	68b8      	ldr	r0, [r7, #8]
    dd12:	f64f 0158 	movw	r1, #63576	; 0xf858
    dd16:	f013 fe4d 	bl	219b4 <GL_GraphicLib_UnbindKey>
	}

	// Restart timer
	// *************
	if (ulTimeOut == GL_TIME_INFINITE)                        // Set timeout value
    dd1a:	683b      	ldr	r3, [r7, #0]
    dd1c:	f1b3 3fff 	cmp.w	r3, #4294967295
    dd20:	d10a      	bne.n	dd38 <GoalGetKey+0x8c>
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), 0x7FFFFFFF);          // Bug 0xFFFFFFFF not supported
    dd22:	68f8      	ldr	r0, [r7, #12]
    dd24:	2100      	movs	r1, #0
    dd26:	f013 ff53 	bl	21bd0 <GL_Widget_SearchId>
    dd2a:	4603      	mov	r3, r0
    dd2c:	4618      	mov	r0, r3
    dd2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dd32:	f013 fef3 	bl	21b1c <GL_Timer_SetInterval>
    dd36:	e008      	b.n	dd4a <GoalGetKey+0x9e>
	else
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), ulTimeOut);
    dd38:	68f8      	ldr	r0, [r7, #12]
    dd3a:	2100      	movs	r1, #0
    dd3c:	f013 ff48 	bl	21bd0 <GL_Widget_SearchId>
    dd40:	4603      	mov	r3, r0
    dd42:	4618      	mov	r0, r3
    dd44:	6839      	ldr	r1, [r7, #0]
    dd46:	f013 fee9 	bl	21b1c <GL_Timer_SetInterval>

	// Detect key pressed
	// ******************
	if (!bShortcut)                                           // Remove shortcut and enable callback on key pressed?
    dd4a:	79fb      	ldrb	r3, [r7, #7]
    dd4c:	f083 0301 	eor.w	r3, r3, #1
    dd50:	b2db      	uxtb	r3, r3
    dd52:	2b00      	cmp	r3, #0
    dd54:	d033      	beq.n	ddbe <GoalGetKey+0x112>
	{                                                                                     // Yes
		GL_Widget_RegisterCallback(hWindow, GL_EVENT_KEY_DOWN, CallBackPressKey);         // Call back when key pressed
    dd56:	68f8      	ldr	r0, [r7, #12]
    dd58:	2106      	movs	r1, #6
    dd5a:	f64c 7241 	movw	r2, #53057	; 0xcf41
    dd5e:	f2c0 0200 	movt	r2, #0
    dd62:	f013 ff23 	bl	21bac <GL_Widget_RegisterCallback>
		GL_Widget_SetShortcut(GL_Widget_SearchId(hWindow, BUTTON_CAN_ID), GL_KEY_NONE);   // Remove shortcut from cancel button
    dd66:	68f8      	ldr	r0, [r7, #12]
    dd68:	f44f 7140 	mov.w	r1, #768	; 0x300
    dd6c:	f013 ff30 	bl	21bd0 <GL_Widget_SearchId>
    dd70:	4603      	mov	r3, r0
    dd72:	4618      	mov	r0, r3
    dd74:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dd78:	f014 f838 	bl	21dec <GL_Widget_SetShortcut>
		GL_Widget_SetShortcut(GL_Widget_SearchId(hWindow, BUTTON_VAL_ID), GL_KEY_NONE);   // Remove shortcut from valid button
    dd7c:	68f8      	ldr	r0, [r7, #12]
    dd7e:	f44f 7100 	mov.w	r1, #512	; 0x200
    dd82:	f013 ff25 	bl	21bd0 <GL_Widget_SearchId>
    dd86:	4603      	mov	r3, r0
    dd88:	4618      	mov	r0, r3
    dd8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dd8e:	f014 f82d 	bl	21dec <GL_Widget_SetShortcut>
		GL_Widget_SetShortcut(GL_Widget_SearchId(hWindow, BUTTON_DOWN_ID), GL_KEY_NONE);  // Remove shortcut from down button
    dd92:	68f8      	ldr	r0, [r7, #12]
    dd94:	f44f 6180 	mov.w	r1, #1024	; 0x400
    dd98:	f013 ff1a 	bl	21bd0 <GL_Widget_SearchId>
    dd9c:	4603      	mov	r3, r0
    dd9e:	4618      	mov	r0, r3
    dda0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dda4:	f014 f822 	bl	21dec <GL_Widget_SetShortcut>
		GL_Widget_SetShortcut(GL_Widget_SearchId(hWindow, BUTTON_UP_ID), GL_KEY_NONE);    // Remove shortcut from up button
    dda8:	68f8      	ldr	r0, [r7, #12]
    ddaa:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    ddae:	f013 ff0f 	bl	21bd0 <GL_Widget_SearchId>
    ddb2:	4603      	mov	r3, r0
    ddb4:	4618      	mov	r0, r3
    ddb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ddba:	f014 f817 	bl	21dec <GL_Widget_SetShortcut>
		hTsc = Telium_Stdperif("TSCREEN", NULL);                     // Check "touch" peripheral opened?
		if(hTsc)
			Telium_Reset_buf(hTsc, _receive_id);                     // Yes, reset "touch" FIFO
	}
#endif
	GL_Window_MainLoop(hWindow);                              // Wait until a result is set
    ddbe:	68f8      	ldr	r0, [r7, #12]
    ddc0:	f014 f910 	bl	21fe4 <GL_Window_MainLoop>

	// Test the result set by the call back functions
	// **********************************************
	switch(GL_Window_GetResult(hWindow))                      // Get the result
    ddc4:	68f8      	ldr	r0, [r7, #12]
    ddc6:	f014 f8fb 	bl	21fc0 <GL_Window_GetResult>
    ddca:	4603      	mov	r3, r0
    ddcc:	2b05      	cmp	r3, #5
    ddce:	d854      	bhi.n	de7a <GoalGetKey+0x1ce>
    ddd0:	a201      	add	r2, pc, #4	; (adr r2, ddd8 <GoalGetKey+0x12c>)
    ddd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ddd6:	bf00      	nop
    ddd8:	0000de15 	.word	0x0000de15
    dddc:	0000de2d 	.word	0x0000de2d
    dde0:	0000de45 	.word	0x0000de45
    dde4:	0000de5d 	.word	0x0000de5d
    dde8:	0000de75 	.word	0x0000de75
    ddec:	0000ddf1 	.word	0x0000ddf1
	{
	case RES_PRESS_STATUS:                                    // Key press result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    ddf0:	68f8      	ldr	r0, [r7, #12]
    ddf2:	2100      	movs	r1, #0
    ddf4:	f013 feec 	bl	21bd0 <GL_Widget_SearchId>
    ddf8:	4603      	mov	r3, r0
    ddfa:	4618      	mov	r0, r3
    ddfc:	f013 fea0 	bl	21b40 <GL_Timer_Stop>
		GL_Widget_GetUserData(hWindow, &ulKey, sizeof(ulKey));
    de00:	f107 0314 	add.w	r3, r7, #20
    de04:	68f8      	ldr	r0, [r7, #12]
    de06:	4619      	mov	r1, r3
    de08:	2204      	movs	r2, #4
    de0a:	f013 febd 	bl	21b88 <GL_Widget_GetUserData>
		iRet=ulKey;
    de0e:	697b      	ldr	r3, [r7, #20]
    de10:	61bb      	str	r3, [r7, #24]
		break;
    de12:	e035      	b.n	de80 <GoalGetKey+0x1d4>
	case RES_VALID_STATUS:                                    // Key valid result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    de14:	68f8      	ldr	r0, [r7, #12]
    de16:	2100      	movs	r1, #0
    de18:	f013 feda 	bl	21bd0 <GL_Widget_SearchId>
    de1c:	4603      	mov	r3, r0
    de1e:	4618      	mov	r0, r3
    de20:	f013 fe8e 	bl	21b40 <GL_Timer_Stop>
		iRet=GL_KEY_VALID;
    de24:	f64f 0350 	movw	r3, #63568	; 0xf850
    de28:	61bb      	str	r3, [r7, #24]
		break;
    de2a:	e029      	b.n	de80 <GoalGetKey+0x1d4>
	case RES_CANCEL_STATUS:                                   // Key cancel result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    de2c:	68f8      	ldr	r0, [r7, #12]
    de2e:	2100      	movs	r1, #0
    de30:	f013 fece 	bl	21bd0 <GL_Widget_SearchId>
    de34:	4603      	mov	r3, r0
    de36:	4618      	mov	r0, r3
    de38:	f013 fe82 	bl	21b40 <GL_Timer_Stop>
		iRet=GL_KEY_CANCEL;
    de3c:	f64f 0351 	movw	r3, #63569	; 0xf851
    de40:	61bb      	str	r3, [r7, #24]
		break;
    de42:	e01d      	b.n	de80 <GoalGetKey+0x1d4>
	case RES_DOWN_STATUS:                                     // Key down result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    de44:	68f8      	ldr	r0, [r7, #12]
    de46:	2100      	movs	r1, #0
    de48:	f013 fec2 	bl	21bd0 <GL_Widget_SearchId>
    de4c:	4603      	mov	r3, r0
    de4e:	4618      	mov	r0, r3
    de50:	f013 fe76 	bl	21b40 <GL_Timer_Stop>
		iRet=GL_KEY_DOWN;
    de54:	f64f 035a 	movw	r3, #63578	; 0xf85a
    de58:	61bb      	str	r3, [r7, #24]
		break;
    de5a:	e011      	b.n	de80 <GoalGetKey+0x1d4>
	case RES_UP_STATUS:                                       // Key up result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    de5c:	68f8      	ldr	r0, [r7, #12]
    de5e:	2100      	movs	r1, #0
    de60:	f013 feb6 	bl	21bd0 <GL_Widget_SearchId>
    de64:	4603      	mov	r3, r0
    de66:	4618      	mov	r0, r3
    de68:	f013 fe6a 	bl	21b40 <GL_Timer_Stop>
		iRet=GL_KEY_UP;
    de6c:	f64f 0359 	movw	r3, #63577	; 0xf859
    de70:	61bb      	str	r3, [r7, #24]
		break;
    de72:	e005      	b.n	de80 <GoalGetKey+0x1d4>
	case RES_TIMER_STATUS:                                    // Timer result
		iRet=0;
    de74:	2300      	movs	r3, #0
    de76:	61bb      	str	r3, [r7, #24]
		break;
    de78:	e002      	b.n	de80 <GoalGetKey+0x1d4>
	default:                                                  // Unknown result
		iRet=0;
    de7a:	2300      	movs	r3, #0
    de7c:	61bb      	str	r3, [r7, #24]
		break;
    de7e:	bf00      	nop
	}

	if (!bShortcut)                                           // Restore shortcut and disable callback on key pressed?
    de80:	79fb      	ldrb	r3, [r7, #7]
    de82:	f083 0301 	eor.w	r3, r3, #1
    de86:	b2db      	uxtb	r3, r3
    de88:	2b00      	cmp	r3, #0
    de8a:	d033      	beq.n	def4 <GoalGetKey+0x248>
	{                                                                                     // Yes
		GL_Widget_UnregisterCallback(hWindow, GL_EVENT_KEY_DOWN, CallBackPressKey);       // Unregister call back on key pressed
    de8c:	68f8      	ldr	r0, [r7, #12]
    de8e:	2106      	movs	r1, #6
    de90:	f64c 7241 	movw	r2, #53057	; 0xcf41
    de94:	f2c0 0200 	movt	r2, #0
    de98:	f014 f85c 	bl	21f54 <GL_Widget_UnregisterCallback>
		GL_Widget_SetShortcut(GL_Widget_SearchId(hWindow, BUTTON_CAN_ID), GL_KEY_CANCEL); // Set shortcut on cancel button
    de9c:	68f8      	ldr	r0, [r7, #12]
    de9e:	f44f 7140 	mov.w	r1, #768	; 0x300
    dea2:	f013 fe95 	bl	21bd0 <GL_Widget_SearchId>
    dea6:	4603      	mov	r3, r0
    dea8:	4618      	mov	r0, r3
    deaa:	f64f 0151 	movw	r1, #63569	; 0xf851
    deae:	f013 ff9d 	bl	21dec <GL_Widget_SetShortcut>
		GL_Widget_SetShortcut(GL_Widget_SearchId(hWindow, BUTTON_VAL_ID), GL_KEY_VALID);  // Set shortcut on valid button
    deb2:	68f8      	ldr	r0, [r7, #12]
    deb4:	f44f 7100 	mov.w	r1, #512	; 0x200
    deb8:	f013 fe8a 	bl	21bd0 <GL_Widget_SearchId>
    debc:	4603      	mov	r3, r0
    debe:	4618      	mov	r0, r3
    dec0:	f64f 0150 	movw	r1, #63568	; 0xf850
    dec4:	f013 ff92 	bl	21dec <GL_Widget_SetShortcut>
		GL_Widget_SetShortcut(GL_Widget_SearchId(hWindow, BUTTON_DOWN_ID), GL_KEY_DOWN);  // Set shortcut on down button
    dec8:	68f8      	ldr	r0, [r7, #12]
    deca:	f44f 6180 	mov.w	r1, #1024	; 0x400
    dece:	f013 fe7f 	bl	21bd0 <GL_Widget_SearchId>
    ded2:	4603      	mov	r3, r0
    ded4:	4618      	mov	r0, r3
    ded6:	f64f 015a 	movw	r1, #63578	; 0xf85a
    deda:	f013 ff87 	bl	21dec <GL_Widget_SetShortcut>
		GL_Widget_SetShortcut(GL_Widget_SearchId(hWindow, BUTTON_UP_ID), GL_KEY_UP);      // Set shortcut on up button
    dede:	68f8      	ldr	r0, [r7, #12]
    dee0:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    dee4:	f013 fe74 	bl	21bd0 <GL_Widget_SearchId>
    dee8:	4603      	mov	r3, r0
    deea:	4618      	mov	r0, r3
    deec:	f64f 0159 	movw	r1, #63577	; 0xf859
    def0:	f013 ff7c 	bl	21dec <GL_Widget_SetShortcut>
	}

	if (bTouch)                                               // Touch screen?
    def4:	7cfb      	ldrb	r3, [r7, #19]
    def6:	2b00      	cmp	r3, #0
    def8:	d00d      	beq.n	df16 <GoalGetKey+0x26a>
	{                                                                                     // Yes
		GL_GraphicLib_BindSingleKey(hGraphicLib, GL_KEY_F, GL_VIRTUAL_KEY_PREVIOUS);      // Bind "F" key to virtual Key
    defa:	68b8      	ldr	r0, [r7, #8]
    defc:	f64f 0154 	movw	r1, #63572	; 0xf854
    df00:	f64f 021b 	movw	r2, #63515	; 0xf81b
    df04:	f013 fce0 	bl	218c8 <GL_GraphicLib_BindSingleKey>
		GL_GraphicLib_BindSingleKey(hGraphicLib, GL_KEY_DOT, GL_VIRTUAL_KEY_NEXT);        // Bind "Dot" key to virtual Key
    df08:	68b8      	ldr	r0, [r7, #8]
    df0a:	212e      	movs	r1, #46	; 0x2e
    df0c:	f64f 021c 	movw	r2, #63516	; 0xf81c
    df10:	f013 fcda 	bl	218c8 <GL_GraphicLib_BindSingleKey>
    df14:	e01b      	b.n	df4e <GoalGetKey+0x2a2>
	}
	else
	{                                                                                     // No
		GL_GraphicLib_BindSingleKey(hGraphicLib, GL_KEY_UP, GL_VIRTUAL_KEY_PREVIOUS);     // Bind "Up" key to virtual Key
    df16:	68b8      	ldr	r0, [r7, #8]
    df18:	f64f 0159 	movw	r1, #63577	; 0xf859
    df1c:	f64f 021b 	movw	r2, #63515	; 0xf81b
    df20:	f013 fcd2 	bl	218c8 <GL_GraphicLib_BindSingleKey>
		GL_GraphicLib_BindSingleKey(hGraphicLib, GL_KEY_DOWN, GL_VIRTUAL_KEY_NEXT);       // Bind "Down" key to virtual Key
    df24:	68b8      	ldr	r0, [r7, #8]
    df26:	f64f 015a 	movw	r1, #63578	; 0xf85a
    df2a:	f64f 021c 	movw	r2, #63516	; 0xf81c
    df2e:	f013 fccb 	bl	218c8 <GL_GraphicLib_BindSingleKey>
		GL_GraphicLib_BindSingleKey(hGraphicLib, GL_KEY_F1, GL_VIRTUAL_KEY_LEFT);         // Bind "F1" key to virtual Key
    df32:	68b8      	ldr	r0, [r7, #8]
    df34:	f64f 0155 	movw	r1, #63573	; 0xf855
    df38:	f44f 4278 	mov.w	r2, #63488	; 0xf800
    df3c:	f013 fcc4 	bl	218c8 <GL_GraphicLib_BindSingleKey>
		GL_GraphicLib_BindSingleKey(hGraphicLib, GL_KEY_F4, GL_VIRTUAL_KEY_RIGHT);        // Bind "F4" key to virtual Key
    df40:	68b8      	ldr	r0, [r7, #8]
    df42:	f64f 0158 	movw	r1, #63576	; 0xf858
    df46:	f64f 0201 	movw	r2, #63489	; 0xf801
    df4a:	f013 fcbd 	bl	218c8 <GL_GraphicLib_BindSingleKey>
	}

	return iRet;
    df4e:	69bb      	ldr	r3, [r7, #24]
}
    df50:	4618      	mov	r0, r3
    df52:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    df56:	f2c0 0302 	movt	r3, #2
    df5a:	69fa      	ldr	r2, [r7, #28]
    df5c:	681b      	ldr	r3, [r3, #0]
    df5e:	429a      	cmp	r2, r3
    df60:	d001      	beq.n	df66 <GoalGetKey+0x2ba>
    df62:	f7fb f81f 	bl	8fa4 <__stack_chk_fail>
    df66:	f107 0720 	add.w	r7, r7, #32
    df6a:	46bd      	mov	sp, r7
    df6c:	bd80      	pop	{r7, pc}
    df6e:	bf00      	nop

0000df70 <GoalDestroyScreen>:
//   phWindow (I-) : Pointer on window context handle.
// This function has no return value.
//****************************************************************************

void GoalDestroyScreen(T_GL_HWIDGET *phWindow)
{
    df70:	b580      	push	{r7, lr}
    df72:	b084      	sub	sp, #16
    df74:	af00      	add	r7, sp, #0
    df76:	6078      	str	r0, [r7, #4]
    df78:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    df7c:	f2c0 0302 	movt	r3, #2
    df80:	681b      	ldr	r3, [r3, #0]
    df82:	60fb      	str	r3, [r7, #12]
    // ***************
		// Empty

	// Destroy screen
	// **************
	GL_Widget_Destroy(*phWindow); // Destroy window with all widgets attached
    df84:	687b      	ldr	r3, [r7, #4]
    df86:	681b      	ldr	r3, [r3, #0]
    df88:	4618      	mov	r0, r3
    df8a:	f013 fdeb 	bl	21b64 <GL_Widget_Destroy>
	*phWindow=NULL;
    df8e:	687b      	ldr	r3, [r7, #4]
    df90:	2200      	movs	r2, #0
    df92:	601a      	str	r2, [r3, #0]
}
    df94:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    df98:	f2c0 0302 	movt	r3, #2
    df9c:	68fa      	ldr	r2, [r7, #12]
    df9e:	681b      	ldr	r3, [r3, #0]
    dfa0:	429a      	cmp	r2, r3
    dfa2:	d001      	beq.n	dfa8 <GoalDestroyScreen+0x38>
    dfa4:	f7fa fffe 	bl	8fa4 <__stack_chk_fail>
    dfa8:	f107 0710 	add.w	r7, r7, #16
    dfac:	46bd      	mov	sp, r7
    dfae:	bd80      	pop	{r7, pc}

0000dfb0 <GoalCreateDrawing>:
//   !NULL : Pointer to the handle of the drawing.
//   NULL : Drawing failed
//****************************************************************************

T_GL_HWIDGET GoalCreateDrawing (T_GL_HGRAPHIC_LIB hGraphicLib, T_GL_ENCODING_CHARSET eCharSet)
{
    dfb0:	b580      	push	{r7, lr}
    dfb2:	b08c      	sub	sp, #48	; 0x30
    dfb4:	af00      	add	r7, sp, #0
    dfb6:	6078      	str	r0, [r7, #4]
    dfb8:	6039      	str	r1, [r7, #0]
    dfba:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    dfbe:	f2c0 0302 	movt	r3, #2
    dfc2:	681b      	ldr	r3, [r3, #0]
    dfc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	// Local variables
    // ***************
	T_GL_HWIDGET hWindow, hTimer, hLayout, hDrawing, hLayout2, hButtonVal, hButtonCan;
	bool bTouch=FALSE;
    dfc6:	2300      	movs	r3, #0
    dfc8:	73fb      	strb	r3, [r7, #15]

	// Build drawing context with 2 buttons (Cancel and Valid)
	// *******************************************************
    GL_GraphicLib_SetCharset(hGraphicLib, eCharSet);                  // Change the encoding charset of the graphic library
    dfca:	6878      	ldr	r0, [r7, #4]
    dfcc:	6839      	ldr	r1, [r7, #0]
    dfce:	f013 fcdf 	bl	21990 <GL_GraphicLib_SetCharset>

	bTouch = GL_GraphicLib_IsTouchPresent(hGraphicLib);               // Touch screen?
    dfd2:	6878      	ldr	r0, [r7, #4]
    dfd4:	f013 fcca 	bl	2196c <GL_GraphicLib_IsTouchPresent>
    dfd8:	4603      	mov	r3, r0
    dfda:	73fb      	strb	r3, [r7, #15]

	hWindow = GL_Window_Create(hGraphicLib);                          // Create a window in a user area
    dfdc:	6878      	ldr	r0, [r7, #4]
    dfde:	f013 ffcb 	bl	21f78 <GL_Window_Create>
    dfe2:	6138      	str	r0, [r7, #16]
	CHECK(hWindow!=NULL, lblEnd);
    dfe4:	693b      	ldr	r3, [r7, #16]
    dfe6:	2b00      	cmp	r3, #0
    dfe8:	f000 80bc 	beq.w	e164 <GoalCreateDrawing+0x1b4>

	hTimer = GL_Timer_Create(hWindow);                                // Create a timer on this window
    dfec:	6938      	ldr	r0, [r7, #16]
    dfee:	f013 fd83 	bl	21af8 <GL_Timer_Create>
    dff2:	6178      	str	r0, [r7, #20]
	CHECK(hTimer!=NULL, lblKO);
    dff4:	697b      	ldr	r3, [r7, #20]
    dff6:	2b00      	cmp	r3, #0
    dff8:	f000 80a8 	beq.w	e14c <GoalCreateDrawing+0x19c>
	GL_Widget_SetId(hTimer, TIMER_ID);                                // Timer Identifier TIMER_ID
    dffc:	6978      	ldr	r0, [r7, #20]
    dffe:	2100      	movs	r1, #0
    e000:	f013 feac 	bl	21d5c <GL_Widget_SetId>
	GL_Widget_RegisterCallback(hTimer, GL_EVENT_TIMER_OUT, CallBackTimeout); // Call back when the timer expired
    e004:	6978      	ldr	r0, [r7, #20]
    e006:	2108      	movs	r1, #8
    e008:	f24d 0285 	movw	r2, #53381	; 0xd085
    e00c:	f2c0 0200 	movt	r2, #0
    e010:	f013 fdcc 	bl	21bac <GL_Widget_RegisterCallback>

	hLayout = GL_Layout_Create(hWindow);                              // Create a layout on this window
    e014:	6938      	ldr	r0, [r7, #16]
    e016:	f013 fcf1 	bl	219fc <GL_Layout_Create>
    e01a:	61b8      	str	r0, [r7, #24]
	CHECK(hLayout!=NULL, lblKO);
    e01c:	69bb      	ldr	r3, [r7, #24]
    e01e:	2b00      	cmp	r3, #0
    e020:	f000 8094 	beq.w	e14c <GoalCreateDrawing+0x19c>

	hDrawing = GL_Drawing_Create(hLayout);                            // Create a drawing on this layout
    e024:	69b8      	ldr	r0, [r7, #24]
    e026:	f013 fbbf 	bl	217a8 <GL_Drawing_Create>
    e02a:	61f8      	str	r0, [r7, #28]
	CHECK(hDrawing!=NULL, lblKO);
    e02c:	69fb      	ldr	r3, [r7, #28]
    e02e:	2b00      	cmp	r3, #0
    e030:	f000 808c 	beq.w	e14c <GoalCreateDrawing+0x19c>
	GL_Widget_SetId(hDrawing, DRAWING_ID);                            // Drawing Identifier DRAWING_ID
    e034:	69f8      	ldr	r0, [r7, #28]
    e036:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e03a:	f013 fe8f 	bl	21d5c <GL_Widget_SetId>
	GL_Widget_SetItem(hDrawing, 0, 0);                                // Drawing location on this layout
    e03e:	69f8      	ldr	r0, [r7, #28]
    e040:	2100      	movs	r1, #0
    e042:	2200      	movs	r2, #0
    e044:	f013 fe9c 	bl	21d80 <GL_Widget_SetItem>

	hLayout2 = GL_Layout_Create(hLayout);                             // Create a second layout on this layout
    e048:	69b8      	ldr	r0, [r7, #24]
    e04a:	f013 fcd7 	bl	219fc <GL_Layout_Create>
    e04e:	6238      	str	r0, [r7, #32]
	CHECK(hLayout2!=NULL, lblKO);
    e050:	6a3b      	ldr	r3, [r7, #32]
    e052:	2b00      	cmp	r3, #0
    e054:	d07a      	beq.n	e14c <GoalCreateDrawing+0x19c>
	GL_Widget_SetId(hLayout2, LAYOUT2_ID);                            // Second layout identifier
    e056:	6a38      	ldr	r0, [r7, #32]
    e058:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    e05c:	f013 fe7e 	bl	21d5c <GL_Widget_SetId>
	GL_Widget_SetItem(hLayout2, 0, 1);                                // Second layout location on this layout
    e060:	6a38      	ldr	r0, [r7, #32]
    e062:	2100      	movs	r1, #0
    e064:	2201      	movs	r2, #1
    e066:	f013 fe8b 	bl	21d80 <GL_Widget_SetItem>
	GL_Widget_SetGrow(hLayout2, GL_DIRECTION_WIDTH);                  // Grow beyond its size (Background width around layout will fill the complete cell)
    e06a:	6a38      	ldr	r0, [r7, #32]
    e06c:	2101      	movs	r1, #1
    e06e:	f013 fe63 	bl	21d38 <GL_Widget_SetGrow>

	hButtonCan = GL_Button_Create(hLayout2);                          // Create a cancel button on this second layout
    e072:	6a38      	ldr	r0, [r7, #32]
    e074:	f013 fac0 	bl	215f8 <GL_Button_Create>
    e078:	6278      	str	r0, [r7, #36]	; 0x24
	CHECK(hButtonCan!=NULL, lblKO);
    e07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e07c:	2b00      	cmp	r3, #0
    e07e:	d065      	beq.n	e14c <GoalCreateDrawing+0x19c>
	GL_Widget_SetSource(hButtonCan, "skin://images/cancel.wgu");      // Set the cancel skinned image
    e080:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e082:	f243 1120 	movw	r1, #12576	; 0x3120
    e086:	f2c0 0102 	movt	r1, #2
    e08a:	f013 fee5 	bl	21e58 <GL_Widget_SetSource>
	GL_Widget_SetItem(hButtonCan, 0, 0);                              // Button location on this layout
    e08e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e090:	2100      	movs	r1, #0
    e092:	2200      	movs	r2, #0
    e094:	f013 fe74 	bl	21d80 <GL_Widget_SetItem>
	GL_Widget_SetExpand(hButtonCan, GL_DIRECTION_WIDTH);              // Expand button width
    e098:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e09a:	2101      	movs	r1, #1
    e09c:	f013 fde0 	bl	21c60 <GL_Widget_SetExpand>
	GL_Widget_SetShortcut(hButtonCan, GL_KEY_CANCEL);                 // Shortcut on this button
    e0a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e0a2:	f64f 0151 	movw	r1, #63569	; 0xf851
    e0a6:	f013 fea1 	bl	21dec <GL_Widget_SetShortcut>
	GL_Widget_SetId(hButtonCan, BUTTON_CAN_ID);                       // Cancel button Identifier
    e0aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e0ac:	f44f 7140 	mov.w	r1, #768	; 0x300
    e0b0:	f013 fe54 	bl	21d5c <GL_Widget_SetId>
	GL_Widget_SetGrow(hButtonCan, GL_DIRECTION_WIDTH);                // Grow beyond its size (Background width around cancel button will fill the complete cell)
    e0b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e0b6:	2101      	movs	r1, #1
    e0b8:	f013 fe3e 	bl	21d38 <GL_Widget_SetGrow>
	GL_Widget_SetFocusable(hButtonCan, false);                        // No focus on this button
    e0bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e0be:	2100      	movs	r1, #0
    e0c0:	f013 fde0 	bl	21c84 <GL_Widget_SetFocusable>
	GL_Widget_RegisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Call back when key pressed
    e0c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e0c6:	2167      	movs	r1, #103	; 0x67
    e0c8:	f64c 72d1 	movw	r2, #53201	; 0xcfd1
    e0cc:	f2c0 0200 	movt	r2, #0
    e0d0:	f013 fd6c 	bl	21bac <GL_Widget_RegisterCallback>

	hButtonVal = GL_Button_Create(hLayout2);                          // Create a valid button on this second layout
    e0d4:	6a38      	ldr	r0, [r7, #32]
    e0d6:	f013 fa8f 	bl	215f8 <GL_Button_Create>
    e0da:	62b8      	str	r0, [r7, #40]	; 0x28
	CHECK(hButtonVal!=NULL, lblKO);
    e0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e0de:	2b00      	cmp	r3, #0
    e0e0:	d034      	beq.n	e14c <GoalCreateDrawing+0x19c>
	GL_Widget_SetSource(hButtonVal, "skin://images/validation.wgu");  // Set the valid skinned image
    e0e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e0e4:	f243 1174 	movw	r1, #12660	; 0x3174
    e0e8:	f2c0 0102 	movt	r1, #2
    e0ec:	f013 feb4 	bl	21e58 <GL_Widget_SetSource>
	GL_Widget_SetItem(hButtonVal, 1, 0);                              // Button location on this layout
    e0f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e0f2:	2101      	movs	r1, #1
    e0f4:	2200      	movs	r2, #0
    e0f6:	f013 fe43 	bl	21d80 <GL_Widget_SetItem>
	GL_Widget_SetExpand(hButtonVal, GL_DIRECTION_WIDTH);              // Expand button width
    e0fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e0fc:	2101      	movs	r1, #1
    e0fe:	f013 fdaf 	bl	21c60 <GL_Widget_SetExpand>
	GL_Widget_SetShortcut(hButtonVal, GL_KEY_VALID);                  // Shortcut on this button
    e102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e104:	f64f 0150 	movw	r1, #63568	; 0xf850
    e108:	f013 fe70 	bl	21dec <GL_Widget_SetShortcut>
	GL_Widget_SetId(hButtonVal, BUTTON_VAL_ID);                       // Valid button Identifier
    e10c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e10e:	f44f 7100 	mov.w	r1, #512	; 0x200
    e112:	f013 fe23 	bl	21d5c <GL_Widget_SetId>
	GL_Widget_SetGrow(hButtonVal, GL_DIRECTION_WIDTH);                // Grow beyond its size (Background width around valid button will fill the complete cell)
    e116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e118:	2101      	movs	r1, #1
    e11a:	f013 fe0d 	bl	21d38 <GL_Widget_SetGrow>
	GL_Widget_SetFocusable(hButtonVal, false);                        // No focus on this button
    e11e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e120:	2100      	movs	r1, #0
    e122:	f013 fdaf 	bl	21c84 <GL_Widget_SetFocusable>
	GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Call back when key pressed
    e126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e128:	2167      	movs	r1, #103	; 0x67
    e12a:	f64c 7295 	movw	r2, #53141	; 0xcf95
    e12e:	f2c0 0200 	movt	r2, #0
    e132:	f013 fd3b 	bl	21bac <GL_Widget_RegisterCallback>

	if(!bTouch)                                                       // Touch screen?
    e136:	7bfb      	ldrb	r3, [r7, #15]
    e138:	f083 0301 	eor.w	r3, r3, #1
    e13c:	b2db      	uxtb	r3, r3
    e13e:	2b00      	cmp	r3, #0
    e140:	d00d      	beq.n	e15e <GoalCreateDrawing+0x1ae>
		GL_Widget_SetVisible(hLayout2, false);                        // No, do not show second layout (keep shortcut access on key pressed)
    e142:	6a38      	ldr	r0, [r7, #32]
    e144:	2100      	movs	r1, #0
    e146:	f013 fee1 	bl	21f0c <GL_Widget_SetVisible>

	goto lblEnd;
    e14a:	e008      	b.n	e15e <GoalCreateDrawing+0x1ae>

	// Errors treatment
    // ****************
lblKO:                                                                // Window creation failed
	if (hWindow)
    e14c:	693b      	ldr	r3, [r7, #16]
    e14e:	2b00      	cmp	r3, #0
    e150:	d007      	beq.n	e162 <GoalCreateDrawing+0x1b2>
	{
		GL_Widget_Destroy(hWindow);                                   // Destroy window and all widgets
    e152:	6938      	ldr	r0, [r7, #16]
    e154:	f013 fd06 	bl	21b64 <GL_Widget_Destroy>
		hWindow=NULL;
    e158:	2300      	movs	r3, #0
    e15a:	613b      	str	r3, [r7, #16]
	}
	goto lblEnd;
    e15c:	e001      	b.n	e162 <GoalCreateDrawing+0x1b2>
	GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Call back when key pressed

	if(!bTouch)                                                       // Touch screen?
		GL_Widget_SetVisible(hLayout2, false);                        // No, do not show second layout (keep shortcut access on key pressed)

	goto lblEnd;
    e15e:	bf00      	nop
    e160:	e000      	b.n	e164 <GoalCreateDrawing+0x1b4>
	if (hWindow)
	{
		GL_Widget_Destroy(hWindow);                                   // Destroy window and all widgets
		hWindow=NULL;
	}
	goto lblEnd;
    e162:	bf00      	nop
lblEnd:
	return hWindow;
    e164:	693b      	ldr	r3, [r7, #16]
}
    e166:	4618      	mov	r0, r3
    e168:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    e16c:	f2c0 0302 	movt	r3, #2
    e170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e172:	681b      	ldr	r3, [r3, #0]
    e174:	429a      	cmp	r2, r3
    e176:	d001      	beq.n	e17c <GoalCreateDrawing+0x1cc>
    e178:	f7fa ff14 	bl	8fa4 <__stack_chk_fail>
    e17c:	f107 0730 	add.w	r7, r7, #48	; 0x30
    e180:	46bd      	mov	sp, r7
    e182:	bd80      	pop	{r7, pc}

0000e184 <GoalClrDrawing>:
//   >=0 : Clear drawing done.
//   <0 : Clear drawing failed.
//****************************************************************************

int GoalClrDrawing(T_GL_HWIDGET hWindow, T_GL_COLOR ulBackColor, unsigned int uiKeys, bool bRefresh)
{
    e184:	b580      	push	{r7, lr}
    e186:	b088      	sub	sp, #32
    e188:	af00      	add	r7, sp, #0
    e18a:	60f8      	str	r0, [r7, #12]
    e18c:	60b9      	str	r1, [r7, #8]
    e18e:	607a      	str	r2, [r7, #4]
    e190:	70fb      	strb	r3, [r7, #3]
    e192:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    e196:	f2c0 0302 	movt	r3, #2
    e19a:	681b      	ldr	r3, [r3, #0]
    e19c:	61fb      	str	r3, [r7, #28]
	T_GL_HWIDGET hButtonVal, hButtonCan;
	int iRet;

	// Disable the complete second layout
	// **********************************
	hButtonCan = GL_Widget_SearchId(hWindow, BUTTON_CAN_ID);     // Retrieve the cancel button on this second layout
    e19e:	68f8      	ldr	r0, [r7, #12]
    e1a0:	f44f 7140 	mov.w	r1, #768	; 0x300
    e1a4:	f013 fd14 	bl	21bd0 <GL_Widget_SearchId>
    e1a8:	6178      	str	r0, [r7, #20]
	CHECK(hButtonCan!=NULL, lblKO);
    e1aa:	697b      	ldr	r3, [r7, #20]
    e1ac:	2b00      	cmp	r3, #0
    e1ae:	d064      	beq.n	e27a <GoalClrDrawing+0xf6>
	hButtonVal = GL_Widget_SearchId(hWindow, BUTTON_VAL_ID);     // Retrieve the valid button on this second layout
    e1b0:	68f8      	ldr	r0, [r7, #12]
    e1b2:	f44f 7100 	mov.w	r1, #512	; 0x200
    e1b6:	f013 fd0b 	bl	21bd0 <GL_Widget_SearchId>
    e1ba:	61b8      	str	r0, [r7, #24]
	CHECK(hButtonVal!=NULL, lblKO);
    e1bc:	69bb      	ldr	r3, [r7, #24]
    e1be:	2b00      	cmp	r3, #0
    e1c0:	d05b      	beq.n	e27a <GoalClrDrawing+0xf6>

	GL_Widget_SetVisible(hButtonCan, false);                     // Blind the cancel button
    e1c2:	6978      	ldr	r0, [r7, #20]
    e1c4:	2100      	movs	r1, #0
    e1c6:	f013 fea1 	bl	21f0c <GL_Widget_SetVisible>
	GL_Widget_UnregisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Unregister call back on cancel button
    e1ca:	6978      	ldr	r0, [r7, #20]
    e1cc:	2167      	movs	r1, #103	; 0x67
    e1ce:	f64c 72d1 	movw	r2, #53201	; 0xcfd1
    e1d2:	f2c0 0200 	movt	r2, #0
    e1d6:	f013 febd 	bl	21f54 <GL_Widget_UnregisterCallback>
	GL_Widget_SetVisible(hButtonVal, false);                     // Blind the valid button
    e1da:	69b8      	ldr	r0, [r7, #24]
    e1dc:	2100      	movs	r1, #0
    e1de:	f013 fe95 	bl	21f0c <GL_Widget_SetVisible>
	GL_Widget_UnregisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Unregister call back on valid button
    e1e2:	69b8      	ldr	r0, [r7, #24]
    e1e4:	2167      	movs	r1, #103	; 0x67
    e1e6:	f64c 7295 	movw	r2, #53141	; 0xcf95
    e1ea:	f2c0 0200 	movt	r2, #0
    e1ee:	f013 feb1 	bl	21f54 <GL_Widget_UnregisterCallback>

	// Set the second layout with the right properties
	// ***********************************************
	if ((uiKeys & KEY_CANCEL) == KEY_CANCEL)                     // Cancel key?
    e1f2:	687b      	ldr	r3, [r7, #4]
    e1f4:	f003 0302 	and.w	r3, r3, #2
    e1f8:	2b00      	cmp	r3, #0
    e1fa:	d00b      	beq.n	e214 <GoalClrDrawing+0x90>
	{
		GL_Widget_SetVisible(hButtonCan, true);                  // Yes, show the cancel key on this second layout
    e1fc:	6978      	ldr	r0, [r7, #20]
    e1fe:	2101      	movs	r1, #1
    e200:	f013 fe84 	bl	21f0c <GL_Widget_SetVisible>
		GL_Widget_RegisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Register call back when cancel key pressed or touched
    e204:	6978      	ldr	r0, [r7, #20]
    e206:	2167      	movs	r1, #103	; 0x67
    e208:	f64c 72d1 	movw	r2, #53201	; 0xcfd1
    e20c:	f2c0 0200 	movt	r2, #0
    e210:	f013 fccc 	bl	21bac <GL_Widget_RegisterCallback>
	}

	if ((uiKeys & KEY_VALID) == KEY_VALID)                       // Valid key?
    e214:	687b      	ldr	r3, [r7, #4]
    e216:	f003 0301 	and.w	r3, r3, #1
    e21a:	2b00      	cmp	r3, #0
    e21c:	d00b      	beq.n	e236 <GoalClrDrawing+0xb2>
	{
		GL_Widget_SetVisible(hButtonVal, true);                  // Yes, show the valid key on this second layout
    e21e:	69b8      	ldr	r0, [r7, #24]
    e220:	2101      	movs	r1, #1
    e222:	f013 fe73 	bl	21f0c <GL_Widget_SetVisible>
		GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Register call back when valid key pressed or touched
    e226:	69b8      	ldr	r0, [r7, #24]
    e228:	2167      	movs	r1, #103	; 0x67
    e22a:	f64c 7295 	movw	r2, #53141	; 0xcf95
    e22e:	f2c0 0200 	movt	r2, #0
    e232:	f013 fcbb 	bl	21bac <GL_Widget_RegisterCallback>
	}

	if (IsColorDisplay())                                        // Color display?
    e236:	f012 f993 	bl	20560 <IsColorDisplay>
    e23a:	4603      	mov	r3, r0
    e23c:	2b00      	cmp	r3, #0
    e23e:	d004      	beq.n	e24a <GoalClrDrawing+0xc6>
		GL_Widget_SetBackColor(hWindow, ulBackColor);            // Yes, set window back color
    e240:	68f8      	ldr	r0, [r7, #12]
    e242:	68b9      	ldr	r1, [r7, #8]
    e244:	f013 fce8 	bl	21c18 <GL_Widget_SetBackColor>
    e248:	e004      	b.n	e254 <GoalClrDrawing+0xd0>
	else
		GL_Widget_SetBackColor(hWindow, GL_COLOR_WHITE);         // No, force window back color to white
    e24a:	68f8      	ldr	r0, [r7, #12]
    e24c:	f04f 31ff 	mov.w	r1, #4294967295
    e250:	f013 fce2 	bl	21c18 <GL_Widget_SetBackColor>

	// Clear drawing
	// *************
	GL_Drawing_Clear(GL_Widget_SearchId(hWindow, DRAWING_ID));   // Clear drawing
    e254:	68f8      	ldr	r0, [r7, #12]
    e256:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e25a:	f013 fcb9 	bl	21bd0 <GL_Widget_SearchId>
    e25e:	4603      	mov	r3, r0
    e260:	4618      	mov	r0, r3
    e262:	f013 fa8f 	bl	21784 <GL_Drawing_Clear>

	if (bRefresh)                                                // Refresh window?
    e266:	78fb      	ldrb	r3, [r7, #3]
    e268:	2b00      	cmp	r3, #0
    e26a:	d003      	beq.n	e274 <GoalClrDrawing+0xf0>
		GL_Window_Dispatch(hWindow, 0);                          // Yes, refresh it
    e26c:	68f8      	ldr	r0, [r7, #12]
    e26e:	2100      	movs	r1, #0
    e270:	f013 fe94 	bl	21f9c <GL_Window_Dispatch>

	iRet=1;
    e274:	2301      	movs	r3, #1
    e276:	613b      	str	r3, [r7, #16]
	goto lblEnd;
    e278:	e003      	b.n	e282 <GoalClrDrawing+0xfe>

	// Errors treatment
    // ****************
lblKO:                                                           // Clear drawing failed
	iRet=-1;
    e27a:	f04f 33ff 	mov.w	r3, #4294967295
    e27e:	613b      	str	r3, [r7, #16]
	goto lblEnd;
    e280:	bf00      	nop
lblEnd:
	return iRet;
    e282:	693b      	ldr	r3, [r7, #16]
}
    e284:	4618      	mov	r0, r3
    e286:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    e28a:	f2c0 0302 	movt	r3, #2
    e28e:	69fa      	ldr	r2, [r7, #28]
    e290:	681b      	ldr	r3, [r3, #0]
    e292:	429a      	cmp	r2, r3
    e294:	d001      	beq.n	e29a <GoalClrDrawing+0x116>
    e296:	f7fa fe85 	bl	8fa4 <__stack_chk_fail>
    e29a:	f107 0720 	add.w	r7, r7, #32
    e29e:	46bd      	mov	sp, r7
    e2a0:	bd80      	pop	{r7, pc}
    e2a2:	bf00      	nop

0000e2a4 <GoalDrawLine>:
//   >=0 : Drawing line done (Exit screen : 0=timeout,GL_KEY_CANCEL,GL_KEY_VALID).
//   <0 : Drawing line failed.
//****************************************************************************

int GoalDrawLine(T_GL_HWIDGET hWindow, T_GL_COLOR ulPen, T_GL_COORD sX1, T_GL_COORD sY1, T_GL_COORD sX2, T_GL_COORD sY2, ulong ulTimeOut, bool bRefresh)
{
    e2a4:	b580      	push	{r7, lr}
    e2a6:	b08c      	sub	sp, #48	; 0x30
    e2a8:	af02      	add	r7, sp, #8
    e2aa:	61f8      	str	r0, [r7, #28]
    e2ac:	61b9      	str	r1, [r7, #24]
    e2ae:	617a      	str	r2, [r7, #20]
    e2b0:	613b      	str	r3, [r7, #16]
    e2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e2b4:	60fb      	str	r3, [r7, #12]
    e2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e2b8:	60bb      	str	r3, [r7, #8]
    e2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e2bc:	607b      	str	r3, [r7, #4]
    e2be:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    e2c2:	70fb      	strb	r3, [r7, #3]
    e2c4:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    e2c8:	f2c0 0302 	movt	r3, #2
    e2cc:	681b      	ldr	r3, [r3, #0]
    e2ce:	627b      	str	r3, [r7, #36]	; 0x24
    // ***************
	int iRet;

	// Drawing line
	// ************
	GL_Drawing_SetPen(GL_Widget_SearchId(hWindow, DRAWING_ID), ulPen, 1, GL_UNIT_PIXEL); // Set pen color and stroke (only 1 pixel supported)
    e2d0:	69f8      	ldr	r0, [r7, #28]
    e2d2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e2d6:	f013 fc7b 	bl	21bd0 <GL_Widget_SearchId>
    e2da:	4603      	mov	r3, r0
    e2dc:	4618      	mov	r0, r3
    e2de:	69b9      	ldr	r1, [r7, #24]
    e2e0:	2201      	movs	r2, #1
    e2e2:	2300      	movs	r3, #0
    e2e4:	f013 fade 	bl	218a4 <GL_Drawing_SetPen>
	GL_Drawing_DrawLine(GL_Widget_SearchId(hWindow, DRAWING_ID), sX1, sY1, sX2, sY2, GL_UNIT_PERCENT); // Draw line with pen
    e2e8:	69f8      	ldr	r0, [r7, #28]
    e2ea:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e2ee:	f013 fc6f 	bl	21bd0 <GL_Widget_SearchId>
    e2f2:	4603      	mov	r3, r0
    e2f4:	68ba      	ldr	r2, [r7, #8]
    e2f6:	9200      	str	r2, [sp, #0]
    e2f8:	2201      	movs	r2, #1
    e2fa:	9201      	str	r2, [sp, #4]
    e2fc:	4618      	mov	r0, r3
    e2fe:	6979      	ldr	r1, [r7, #20]
    e300:	693a      	ldr	r2, [r7, #16]
    e302:	68fb      	ldr	r3, [r7, #12]
    e304:	f013 fa74 	bl	217f0 <GL_Drawing_DrawLine>

	CHECK(ulTimeOut!=0, lblNoTimer);                       // No timer to set
    e308:	687b      	ldr	r3, [r7, #4]
    e30a:	2b00      	cmp	r3, #0
    e30c:	d045      	beq.n	e39a <GoalDrawLine+0xf6>

	// Restart timer
	// *************
	if (ulTimeOut == GL_TIME_INFINITE)                     // Set timeout value
    e30e:	687b      	ldr	r3, [r7, #4]
    e310:	f1b3 3fff 	cmp.w	r3, #4294967295
    e314:	d10a      	bne.n	e32c <GoalDrawLine+0x88>
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), 0x7FFFFFFF); // Bug 0xFFFFFFFF not supported
    e316:	69f8      	ldr	r0, [r7, #28]
    e318:	2100      	movs	r1, #0
    e31a:	f013 fc59 	bl	21bd0 <GL_Widget_SearchId>
    e31e:	4603      	mov	r3, r0
    e320:	4618      	mov	r0, r3
    e322:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e326:	f013 fbf9 	bl	21b1c <GL_Timer_SetInterval>
    e32a:	e008      	b.n	e33e <GoalDrawLine+0x9a>
	else
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), ulTimeOut);
    e32c:	69f8      	ldr	r0, [r7, #28]
    e32e:	2100      	movs	r1, #0
    e330:	f013 fc4e 	bl	21bd0 <GL_Widget_SearchId>
    e334:	4603      	mov	r3, r0
    e336:	4618      	mov	r0, r3
    e338:	6879      	ldr	r1, [r7, #4]
    e33a:	f013 fbef 	bl	21b1c <GL_Timer_SetInterval>

	// Loop indefinitely until the result is set from the call back functions
	// **********************************************************************
	GL_Window_MainLoop(hWindow);                           // Wait until a result is set
    e33e:	69f8      	ldr	r0, [r7, #28]
    e340:	f013 fe50 	bl	21fe4 <GL_Window_MainLoop>

	// Test the result set by the call back functions
	// **********************************************
	switch(GL_Window_GetResult(hWindow))                   // Get the result
    e344:	69f8      	ldr	r0, [r7, #28]
    e346:	f013 fe3b 	bl	21fc0 <GL_Window_GetResult>
    e34a:	4603      	mov	r3, r0
    e34c:	2b01      	cmp	r3, #1
    e34e:	d010      	beq.n	e372 <GoalDrawLine+0xce>
    e350:	2b01      	cmp	r3, #1
    e352:	d302      	bcc.n	e35a <GoalDrawLine+0xb6>
    e354:	2b04      	cmp	r3, #4
    e356:	d018      	beq.n	e38a <GoalDrawLine+0xe6>
    e358:	e01a      	b.n	e390 <GoalDrawLine+0xec>
	{
	case RES_VALID_STATUS:                                 // Key valid result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    e35a:	69f8      	ldr	r0, [r7, #28]
    e35c:	2100      	movs	r1, #0
    e35e:	f013 fc37 	bl	21bd0 <GL_Widget_SearchId>
    e362:	4603      	mov	r3, r0
    e364:	4618      	mov	r0, r3
    e366:	f013 fbeb 	bl	21b40 <GL_Timer_Stop>
		iRet=GL_KEY_VALID;
    e36a:	f64f 0350 	movw	r3, #63568	; 0xf850
    e36e:	623b      	str	r3, [r7, #32]
		break;
    e370:	e012      	b.n	e398 <GoalDrawLine+0xf4>
	case RES_CANCEL_STATUS:                                // Key cancel result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    e372:	69f8      	ldr	r0, [r7, #28]
    e374:	2100      	movs	r1, #0
    e376:	f013 fc2b 	bl	21bd0 <GL_Widget_SearchId>
    e37a:	4603      	mov	r3, r0
    e37c:	4618      	mov	r0, r3
    e37e:	f013 fbdf 	bl	21b40 <GL_Timer_Stop>
		iRet=GL_KEY_CANCEL;
    e382:	f64f 0351 	movw	r3, #63569	; 0xf851
    e386:	623b      	str	r3, [r7, #32]
		break;
    e388:	e006      	b.n	e398 <GoalDrawLine+0xf4>
	case RES_TIMER_STATUS:                                 // Timer result
		iRet=0;
    e38a:	2300      	movs	r3, #0
    e38c:	623b      	str	r3, [r7, #32]
		break;
    e38e:	e003      	b.n	e398 <GoalDrawLine+0xf4>
	default:                                               // Unknown result
		iRet=-1;
    e390:	f04f 33ff 	mov.w	r3, #4294967295
    e394:	623b      	str	r3, [r7, #32]
		break;
    e396:	bf00      	nop
	}

	goto lblEnd;
    e398:	e017      	b.n	e3ca <GoalDrawLine+0x126>

	// Errors treatment
    // ****************
lblNoTimer:                                                // No timer used
	iRet=0;
    e39a:	2300      	movs	r3, #0
    e39c:	623b      	str	r3, [r7, #32]
	if (bRefresh)
    e39e:	78fb      	ldrb	r3, [r7, #3]
    e3a0:	2b00      	cmp	r3, #0
    e3a2:	d011      	beq.n	e3c8 <GoalDrawLine+0x124>
	{
		iRet = GL_Window_Dispatch(hWindow, 0);             // Refresh the window
    e3a4:	69f8      	ldr	r0, [r7, #28]
    e3a6:	2100      	movs	r1, #0
    e3a8:	f013 fdf8 	bl	21f9c <GL_Window_Dispatch>
    e3ac:	4603      	mov	r3, r0
    e3ae:	623b      	str	r3, [r7, #32]
		if (iRet == RES_VALID_STATUS)
    e3b0:	6a3b      	ldr	r3, [r7, #32]
    e3b2:	2b00      	cmp	r3, #0
    e3b4:	d102      	bne.n	e3bc <GoalDrawLine+0x118>
			iRet=GL_KEY_VALID;
    e3b6:	f64f 0350 	movw	r3, #63568	; 0xf850
    e3ba:	623b      	str	r3, [r7, #32]
		if (iRet == RES_CANCEL_STATUS)
    e3bc:	6a3b      	ldr	r3, [r7, #32]
    e3be:	2b01      	cmp	r3, #1
    e3c0:	d102      	bne.n	e3c8 <GoalDrawLine+0x124>
			iRet=GL_KEY_CANCEL;
    e3c2:	f64f 0351 	movw	r3, #63569	; 0xf851
    e3c6:	623b      	str	r3, [r7, #32]
	}
	goto lblEnd;
    e3c8:	bf00      	nop
lblEnd:
	return iRet;
    e3ca:	6a3b      	ldr	r3, [r7, #32]
}
    e3cc:	4618      	mov	r0, r3
    e3ce:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    e3d2:	f2c0 0302 	movt	r3, #2
    e3d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e3d8:	681b      	ldr	r3, [r3, #0]
    e3da:	429a      	cmp	r2, r3
    e3dc:	d001      	beq.n	e3e2 <GoalDrawLine+0x13e>
    e3de:	f7fa fde1 	bl	8fa4 <__stack_chk_fail>
    e3e2:	f107 0728 	add.w	r7, r7, #40	; 0x28
    e3e6:	46bd      	mov	sp, r7
    e3e8:	bd80      	pop	{r7, pc}
    e3ea:	bf00      	nop

0000e3ec <GoalDrawRect>:
//   >=0 : Drawing rectangle done (Exit screen : 0=timeout,GL_KEY_CANCEL,GL_KEY_VALID).
//   <0 : Drawing rectangle failed.
//****************************************************************************

int GoalDrawRect(T_GL_HWIDGET hWindow, T_GL_COLOR ulPen, T_GL_COLOR ulBrush, T_GL_COORD sX, T_GL_COORD sY, T_GL_COORD sWidth, T_GL_COORD sHeight, ulong ulTimeOut, bool bRefresh)
{
    e3ec:	b580      	push	{r7, lr}
    e3ee:	b08e      	sub	sp, #56	; 0x38
    e3f0:	af02      	add	r7, sp, #8
    e3f2:	6278      	str	r0, [r7, #36]	; 0x24
    e3f4:	6239      	str	r1, [r7, #32]
    e3f6:	61fa      	str	r2, [r7, #28]
    e3f8:	61bb      	str	r3, [r7, #24]
    e3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e3fc:	617b      	str	r3, [r7, #20]
    e3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e400:	613b      	str	r3, [r7, #16]
    e402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e404:	60fb      	str	r3, [r7, #12]
    e406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e408:	60bb      	str	r3, [r7, #8]
    e40a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
    e40e:	71fb      	strb	r3, [r7, #7]
    e410:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    e414:	f2c0 0302 	movt	r3, #2
    e418:	681b      	ldr	r3, [r3, #0]
    e41a:	62fb      	str	r3, [r7, #44]	; 0x2c
    // ***************
	int iRet;

	// Drawing rectangle
	// *****************
	GL_Drawing_SetPen(GL_Widget_SearchId(hWindow, DRAWING_ID), ulPen, 1, GL_UNIT_PIXEL); // Set pen color and stroke (only 1 pixel supported)
    e41c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e41e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e422:	f013 fbd5 	bl	21bd0 <GL_Widget_SearchId>
    e426:	4603      	mov	r3, r0
    e428:	4618      	mov	r0, r3
    e42a:	6a39      	ldr	r1, [r7, #32]
    e42c:	2201      	movs	r2, #1
    e42e:	2300      	movs	r3, #0
    e430:	f013 fa38 	bl	218a4 <GL_Drawing_SetPen>
	GL_Drawing_SetBrush(GL_Widget_SearchId(hWindow, DRAWING_ID), ulBrush);               // Set brush color
    e434:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e436:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e43a:	f013 fbc9 	bl	21bd0 <GL_Widget_SearchId>
    e43e:	4603      	mov	r3, r0
    e440:	4618      	mov	r0, r3
    e442:	69f9      	ldr	r1, [r7, #28]
    e444:	f013 fa0a 	bl	2185c <GL_Drawing_SetBrush>
	GL_Drawing_DrawRect(GL_Widget_SearchId(hWindow, DRAWING_ID), sX, sY, sWidth, sHeight, GL_UNIT_PERCENT); // Draw rectangle with pen and brush
    e448:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e44a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e44e:	f013 fbbf 	bl	21bd0 <GL_Widget_SearchId>
    e452:	4602      	mov	r2, r0
    e454:	693b      	ldr	r3, [r7, #16]
    e456:	68f9      	ldr	r1, [r7, #12]
    e458:	9100      	str	r1, [sp, #0]
    e45a:	2101      	movs	r1, #1
    e45c:	9101      	str	r1, [sp, #4]
    e45e:	4610      	mov	r0, r2
    e460:	69b9      	ldr	r1, [r7, #24]
    e462:	697a      	ldr	r2, [r7, #20]
    e464:	f013 f9d6 	bl	21814 <GL_Drawing_DrawRect>

	CHECK(ulTimeOut!=0, lblNoTimer);                       // No timer to set
    e468:	68bb      	ldr	r3, [r7, #8]
    e46a:	2b00      	cmp	r3, #0
    e46c:	d045      	beq.n	e4fa <GoalDrawRect+0x10e>

	// Restart timer
	// *************
	if (ulTimeOut == GL_TIME_INFINITE)                     // Set timeout value
    e46e:	68bb      	ldr	r3, [r7, #8]
    e470:	f1b3 3fff 	cmp.w	r3, #4294967295
    e474:	d10a      	bne.n	e48c <GoalDrawRect+0xa0>
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), 0x7FFFFFFF); // Bug 0xFFFFFFFF not supported
    e476:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e478:	2100      	movs	r1, #0
    e47a:	f013 fba9 	bl	21bd0 <GL_Widget_SearchId>
    e47e:	4603      	mov	r3, r0
    e480:	4618      	mov	r0, r3
    e482:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e486:	f013 fb49 	bl	21b1c <GL_Timer_SetInterval>
    e48a:	e008      	b.n	e49e <GoalDrawRect+0xb2>
	else
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), ulTimeOut);
    e48c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e48e:	2100      	movs	r1, #0
    e490:	f013 fb9e 	bl	21bd0 <GL_Widget_SearchId>
    e494:	4603      	mov	r3, r0
    e496:	4618      	mov	r0, r3
    e498:	68b9      	ldr	r1, [r7, #8]
    e49a:	f013 fb3f 	bl	21b1c <GL_Timer_SetInterval>

	// Loop indefinitely until the result is set from the call back functions
	// **********************************************************************
	GL_Window_MainLoop(hWindow);                           // Wait until a result is set
    e49e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e4a0:	f013 fda0 	bl	21fe4 <GL_Window_MainLoop>

	// Test the result set by the call back functions
	// **********************************************
	switch(GL_Window_GetResult(hWindow))                   // Get the result
    e4a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e4a6:	f013 fd8b 	bl	21fc0 <GL_Window_GetResult>
    e4aa:	4603      	mov	r3, r0
    e4ac:	2b01      	cmp	r3, #1
    e4ae:	d010      	beq.n	e4d2 <GoalDrawRect+0xe6>
    e4b0:	2b01      	cmp	r3, #1
    e4b2:	d302      	bcc.n	e4ba <GoalDrawRect+0xce>
    e4b4:	2b04      	cmp	r3, #4
    e4b6:	d018      	beq.n	e4ea <GoalDrawRect+0xfe>
    e4b8:	e01a      	b.n	e4f0 <GoalDrawRect+0x104>
	{
	case RES_VALID_STATUS:                                 // Key valid result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    e4ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e4bc:	2100      	movs	r1, #0
    e4be:	f013 fb87 	bl	21bd0 <GL_Widget_SearchId>
    e4c2:	4603      	mov	r3, r0
    e4c4:	4618      	mov	r0, r3
    e4c6:	f013 fb3b 	bl	21b40 <GL_Timer_Stop>
		iRet=GL_KEY_VALID;
    e4ca:	f64f 0350 	movw	r3, #63568	; 0xf850
    e4ce:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
    e4d0:	e012      	b.n	e4f8 <GoalDrawRect+0x10c>
	case RES_CANCEL_STATUS:                                // Key cancel result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    e4d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e4d4:	2100      	movs	r1, #0
    e4d6:	f013 fb7b 	bl	21bd0 <GL_Widget_SearchId>
    e4da:	4603      	mov	r3, r0
    e4dc:	4618      	mov	r0, r3
    e4de:	f013 fb2f 	bl	21b40 <GL_Timer_Stop>
		iRet=GL_KEY_CANCEL;
    e4e2:	f64f 0351 	movw	r3, #63569	; 0xf851
    e4e6:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
    e4e8:	e006      	b.n	e4f8 <GoalDrawRect+0x10c>
	case RES_TIMER_STATUS:                                 // Timer result
		iRet=0;
    e4ea:	2300      	movs	r3, #0
    e4ec:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
    e4ee:	e003      	b.n	e4f8 <GoalDrawRect+0x10c>
	default:                                               // Unknown result
		iRet=-1;
    e4f0:	f04f 33ff 	mov.w	r3, #4294967295
    e4f4:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
    e4f6:	bf00      	nop
	}

	goto lblEnd;
    e4f8:	e017      	b.n	e52a <GoalDrawRect+0x13e>

	// Errors treatment
    // ****************
lblNoTimer:                                                // No timer used
	iRet=0;
    e4fa:	2300      	movs	r3, #0
    e4fc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (bRefresh)
    e4fe:	79fb      	ldrb	r3, [r7, #7]
    e500:	2b00      	cmp	r3, #0
    e502:	d011      	beq.n	e528 <GoalDrawRect+0x13c>
	{
		iRet = GL_Window_Dispatch(hWindow, 0);             // Refresh the window
    e504:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e506:	2100      	movs	r1, #0
    e508:	f013 fd48 	bl	21f9c <GL_Window_Dispatch>
    e50c:	4603      	mov	r3, r0
    e50e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (iRet == RES_VALID_STATUS)
    e510:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e512:	2b00      	cmp	r3, #0
    e514:	d102      	bne.n	e51c <GoalDrawRect+0x130>
			iRet=GL_KEY_VALID;
    e516:	f64f 0350 	movw	r3, #63568	; 0xf850
    e51a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (iRet == RES_CANCEL_STATUS)
    e51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e51e:	2b01      	cmp	r3, #1
    e520:	d102      	bne.n	e528 <GoalDrawRect+0x13c>
			iRet=GL_KEY_CANCEL;
    e522:	f64f 0351 	movw	r3, #63569	; 0xf851
    e526:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	goto lblEnd;
    e528:	bf00      	nop
lblEnd:
	return iRet;
    e52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    e52c:	4618      	mov	r0, r3
    e52e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    e532:	f2c0 0302 	movt	r3, #2
    e536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e538:	681b      	ldr	r3, [r3, #0]
    e53a:	429a      	cmp	r2, r3
    e53c:	d001      	beq.n	e542 <GoalDrawRect+0x156>
    e53e:	f7fa fd31 	bl	8fa4 <__stack_chk_fail>
    e542:	f107 0730 	add.w	r7, r7, #48	; 0x30
    e546:	46bd      	mov	sp, r7
    e548:	bd80      	pop	{r7, pc}
    e54a:	bf00      	nop

0000e54c <GoalDrawEllipse>:
//   >=0 : Drawing ellipse done (Exit screen : 0=timeout,GEL_KEY_CANCEL,GL_KEY_VALID).
//   <0 : Drawing ellipse failed.
//****************************************************************************

int GoalDrawEllipse(T_GL_HWIDGET hWindow, T_GL_COLOR ulPen, T_GL_COLOR ulBrush, T_GL_COORD sX, T_GL_COORD sY, T_GL_DIM usRadiusX, T_GL_DIM usRadiusY, ulong ulTimeOut, bool bRefresh)
{
    e54c:	b580      	push	{r7, lr}
    e54e:	b08e      	sub	sp, #56	; 0x38
    e550:	af02      	add	r7, sp, #8
    e552:	6278      	str	r0, [r7, #36]	; 0x24
    e554:	6239      	str	r1, [r7, #32]
    e556:	61fa      	str	r2, [r7, #28]
    e558:	61bb      	str	r3, [r7, #24]
    e55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e55c:	617b      	str	r3, [r7, #20]
    e55e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e560:	613b      	str	r3, [r7, #16]
    e562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e564:	60fb      	str	r3, [r7, #12]
    e566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e568:	60bb      	str	r3, [r7, #8]
    e56a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
    e56e:	71fb      	strb	r3, [r7, #7]
    e570:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    e574:	f2c0 0302 	movt	r3, #2
    e578:	681b      	ldr	r3, [r3, #0]
    e57a:	62fb      	str	r3, [r7, #44]	; 0x2c
    // ***************
	int iRet;

	// Drawing ellipse
	// ***************
	GL_Drawing_SetPen(GL_Widget_SearchId(hWindow, DRAWING_ID), ulPen, 1, GL_UNIT_PIXEL); // Set pen color and stroke (only 1 pixel supported)
    e57c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e57e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e582:	f013 fb25 	bl	21bd0 <GL_Widget_SearchId>
    e586:	4603      	mov	r3, r0
    e588:	4618      	mov	r0, r3
    e58a:	6a39      	ldr	r1, [r7, #32]
    e58c:	2201      	movs	r2, #1
    e58e:	2300      	movs	r3, #0
    e590:	f013 f988 	bl	218a4 <GL_Drawing_SetPen>
	GL_Drawing_SetBrush(GL_Widget_SearchId(hWindow, DRAWING_ID), ulBrush);               // Set brush color
    e594:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e596:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e59a:	f013 fb19 	bl	21bd0 <GL_Widget_SearchId>
    e59e:	4603      	mov	r3, r0
    e5a0:	4618      	mov	r0, r3
    e5a2:	69f9      	ldr	r1, [r7, #28]
    e5a4:	f013 f95a 	bl	2185c <GL_Drawing_SetBrush>
	GL_Drawing_DrawEllipse(GL_Widget_SearchId(hWindow, DRAWING_ID), sX, sY, usRadiusX, usRadiusY, GL_UNIT_PERCENT); // Draw ellipse with pen and brush
    e5a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e5aa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e5ae:	f013 fb0f 	bl	21bd0 <GL_Widget_SearchId>
    e5b2:	4603      	mov	r3, r0
    e5b4:	68fa      	ldr	r2, [r7, #12]
    e5b6:	9200      	str	r2, [sp, #0]
    e5b8:	2201      	movs	r2, #1
    e5ba:	9201      	str	r2, [sp, #4]
    e5bc:	4618      	mov	r0, r3
    e5be:	69b9      	ldr	r1, [r7, #24]
    e5c0:	697a      	ldr	r2, [r7, #20]
    e5c2:	693b      	ldr	r3, [r7, #16]
    e5c4:	f013 f902 	bl	217cc <GL_Drawing_DrawEllipse>

	CHECK(ulTimeOut!=0, lblNoTimer);                       // No timer to set
    e5c8:	68bb      	ldr	r3, [r7, #8]
    e5ca:	2b00      	cmp	r3, #0
    e5cc:	d045      	beq.n	e65a <GoalDrawEllipse+0x10e>

	// Restart timer
	// *************
	if (ulTimeOut == GL_TIME_INFINITE)                     // Set timeout value
    e5ce:	68bb      	ldr	r3, [r7, #8]
    e5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    e5d4:	d10a      	bne.n	e5ec <GoalDrawEllipse+0xa0>
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), 0x7FFFFFFF); // Bug 0xFFFFFFFF not supported
    e5d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e5d8:	2100      	movs	r1, #0
    e5da:	f013 faf9 	bl	21bd0 <GL_Widget_SearchId>
    e5de:	4603      	mov	r3, r0
    e5e0:	4618      	mov	r0, r3
    e5e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e5e6:	f013 fa99 	bl	21b1c <GL_Timer_SetInterval>
    e5ea:	e008      	b.n	e5fe <GoalDrawEllipse+0xb2>
	else
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), ulTimeOut);
    e5ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e5ee:	2100      	movs	r1, #0
    e5f0:	f013 faee 	bl	21bd0 <GL_Widget_SearchId>
    e5f4:	4603      	mov	r3, r0
    e5f6:	4618      	mov	r0, r3
    e5f8:	68b9      	ldr	r1, [r7, #8]
    e5fa:	f013 fa8f 	bl	21b1c <GL_Timer_SetInterval>

	// Loop indefinitely until the result is set from the call back functions
	// **********************************************************************
	GL_Window_MainLoop(hWindow);                           // Wait until a result is set
    e5fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e600:	f013 fcf0 	bl	21fe4 <GL_Window_MainLoop>

	// Test the result set by the call back functions
	// **********************************************
	switch(GL_Window_GetResult(hWindow))                   // Get the result
    e604:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e606:	f013 fcdb 	bl	21fc0 <GL_Window_GetResult>
    e60a:	4603      	mov	r3, r0
    e60c:	2b01      	cmp	r3, #1
    e60e:	d010      	beq.n	e632 <GoalDrawEllipse+0xe6>
    e610:	2b01      	cmp	r3, #1
    e612:	d302      	bcc.n	e61a <GoalDrawEllipse+0xce>
    e614:	2b04      	cmp	r3, #4
    e616:	d018      	beq.n	e64a <GoalDrawEllipse+0xfe>
    e618:	e01a      	b.n	e650 <GoalDrawEllipse+0x104>
	{
	case RES_VALID_STATUS:                                 // Key valid result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    e61a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e61c:	2100      	movs	r1, #0
    e61e:	f013 fad7 	bl	21bd0 <GL_Widget_SearchId>
    e622:	4603      	mov	r3, r0
    e624:	4618      	mov	r0, r3
    e626:	f013 fa8b 	bl	21b40 <GL_Timer_Stop>
		iRet=GL_KEY_VALID;
    e62a:	f64f 0350 	movw	r3, #63568	; 0xf850
    e62e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
    e630:	e012      	b.n	e658 <GoalDrawEllipse+0x10c>
	case RES_CANCEL_STATUS:                                // Key cancel result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    e632:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e634:	2100      	movs	r1, #0
    e636:	f013 facb 	bl	21bd0 <GL_Widget_SearchId>
    e63a:	4603      	mov	r3, r0
    e63c:	4618      	mov	r0, r3
    e63e:	f013 fa7f 	bl	21b40 <GL_Timer_Stop>
		iRet=GL_KEY_CANCEL;
    e642:	f64f 0351 	movw	r3, #63569	; 0xf851
    e646:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
    e648:	e006      	b.n	e658 <GoalDrawEllipse+0x10c>
	case RES_TIMER_STATUS:                                 // Timer result
		iRet=0;
    e64a:	2300      	movs	r3, #0
    e64c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
    e64e:	e003      	b.n	e658 <GoalDrawEllipse+0x10c>
	default:                                               // Unknown result
		iRet=-1;
    e650:	f04f 33ff 	mov.w	r3, #4294967295
    e654:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
    e656:	bf00      	nop
	}

	goto lblEnd;
    e658:	e017      	b.n	e68a <GoalDrawEllipse+0x13e>

	// Errors treatment
    // ****************
lblNoTimer:                                                // No timer used
	iRet=0;
    e65a:	2300      	movs	r3, #0
    e65c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (bRefresh)
    e65e:	79fb      	ldrb	r3, [r7, #7]
    e660:	2b00      	cmp	r3, #0
    e662:	d011      	beq.n	e688 <GoalDrawEllipse+0x13c>
	{
		iRet = GL_Window_Dispatch(hWindow, 0);             // Refresh the window
    e664:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e666:	2100      	movs	r1, #0
    e668:	f013 fc98 	bl	21f9c <GL_Window_Dispatch>
    e66c:	4603      	mov	r3, r0
    e66e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (iRet == RES_VALID_STATUS)
    e670:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e672:	2b00      	cmp	r3, #0
    e674:	d102      	bne.n	e67c <GoalDrawEllipse+0x130>
			iRet=GL_KEY_VALID;
    e676:	f64f 0350 	movw	r3, #63568	; 0xf850
    e67a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (iRet == RES_CANCEL_STATUS)
    e67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e67e:	2b01      	cmp	r3, #1
    e680:	d102      	bne.n	e688 <GoalDrawEllipse+0x13c>
			iRet=GL_KEY_CANCEL;
    e682:	f64f 0351 	movw	r3, #63569	; 0xf851
    e686:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	goto lblEnd;
    e688:	bf00      	nop
lblEnd:
	return iRet;
    e68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    e68c:	4618      	mov	r0, r3
    e68e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    e692:	f2c0 0302 	movt	r3, #2
    e696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e698:	681b      	ldr	r3, [r3, #0]
    e69a:	429a      	cmp	r2, r3
    e69c:	d001      	beq.n	e6a2 <GoalDrawEllipse+0x156>
    e69e:	f7fa fc81 	bl	8fa4 <__stack_chk_fail>
    e6a2:	f107 0730 	add.w	r7, r7, #48	; 0x30
    e6a6:	46bd      	mov	sp, r7
    e6a8:	bd80      	pop	{r7, pc}
    e6aa:	bf00      	nop

0000e6ac <GoalDrawText>:
//   >=0 : Drawing text done (Exit screen : 0=timeout,GL_KEY_CANCEL,GL_KEY_VALID).
//   <0 : Drawing text failed.
//****************************************************************************

int GoalDrawText(T_GL_HWIDGET hWindow, const char* pcText, const ST_DRAW_FONT* pxFont, T_GL_COLOR ulPen, T_GL_COORD sX, T_GL_COORD sY, ulong ulTimeOut, bool bRefresh)
{
    e6ac:	b590      	push	{r4, r7, lr}
    e6ae:	b08d      	sub	sp, #52	; 0x34
    e6b0:	af02      	add	r7, sp, #8
    e6b2:	61f8      	str	r0, [r7, #28]
    e6b4:	61b9      	str	r1, [r7, #24]
    e6b6:	617a      	str	r2, [r7, #20]
    e6b8:	613b      	str	r3, [r7, #16]
    e6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e6bc:	60fb      	str	r3, [r7, #12]
    e6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e6c0:	60bb      	str	r3, [r7, #8]
    e6c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e6c4:	607b      	str	r3, [r7, #4]
    e6c6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    e6ca:	70fb      	strb	r3, [r7, #3]
    e6cc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    e6d0:	f2c0 0302 	movt	r3, #2
    e6d4:	681b      	ldr	r3, [r3, #0]
    e6d6:	627b      	str	r3, [r7, #36]	; 0x24
    // ***************
	int iRet;

	// Drawing text
	// ************
	GL_Drawing_SetPen(GL_Widget_SearchId(hWindow, DRAWING_ID), ulPen, 1, GL_UNIT_PIXEL);           // Set pen color and stroke (only 1 pixel supported)
    e6d8:	69f8      	ldr	r0, [r7, #28]
    e6da:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e6de:	f013 fa77 	bl	21bd0 <GL_Widget_SearchId>
    e6e2:	4603      	mov	r3, r0
    e6e4:	4618      	mov	r0, r3
    e6e6:	6939      	ldr	r1, [r7, #16]
    e6e8:	2201      	movs	r2, #1
    e6ea:	2300      	movs	r3, #0
    e6ec:	f013 f8da 	bl	218a4 <GL_Drawing_SetPen>
	if (pxFont->pcName!=NULL)                              // Customer font?
    e6f0:	697b      	ldr	r3, [r7, #20]
    e6f2:	681b      	ldr	r3, [r3, #0]
    e6f4:	2b00      	cmp	r3, #0
    e6f6:	d012      	beq.n	e71e <GoalDrawText+0x72>
		GL_Drawing_SetFont(GL_Widget_SearchId(hWindow, DRAWING_ID), pxFont->pcName, pxFont->eStyle, pxFont->usWidth, pxFont->usHeight, GL_UNIT_PERCENT); // Yes, Set customer font
    e6f8:	69f8      	ldr	r0, [r7, #28]
    e6fa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e6fe:	f013 fa67 	bl	21bd0 <GL_Widget_SearchId>
    e702:	697b      	ldr	r3, [r7, #20]
    e704:	6819      	ldr	r1, [r3, #0]
    e706:	697b      	ldr	r3, [r7, #20]
    e708:	685a      	ldr	r2, [r3, #4]
    e70a:	697b      	ldr	r3, [r7, #20]
    e70c:	689b      	ldr	r3, [r3, #8]
    e70e:	697c      	ldr	r4, [r7, #20]
    e710:	68e4      	ldr	r4, [r4, #12]
    e712:	9400      	str	r4, [sp, #0]
    e714:	2401      	movs	r4, #1
    e716:	9401      	str	r4, [sp, #4]
    e718:	f013 f8b2 	bl	21880 <GL_Drawing_SetFont>
    e71c:	e015      	b.n	e74a <GoalDrawText+0x9e>
	else
		GL_Drawing_SetFont(GL_Widget_SearchId(hWindow, DRAWING_ID), "GOAL", pxFont->eStyle, pxFont->usWidth, pxFont->usHeight, GL_UNIT_PERCENT); // No, Set default GOAL font
    e71e:	69f8      	ldr	r0, [r7, #28]
    e720:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e724:	f013 fa54 	bl	21bd0 <GL_Widget_SearchId>
    e728:	4601      	mov	r1, r0
    e72a:	697b      	ldr	r3, [r7, #20]
    e72c:	685a      	ldr	r2, [r3, #4]
    e72e:	697b      	ldr	r3, [r7, #20]
    e730:	689b      	ldr	r3, [r3, #8]
    e732:	6978      	ldr	r0, [r7, #20]
    e734:	68c0      	ldr	r0, [r0, #12]
    e736:	9000      	str	r0, [sp, #0]
    e738:	2001      	movs	r0, #1
    e73a:	9001      	str	r0, [sp, #4]
    e73c:	4608      	mov	r0, r1
    e73e:	f243 1198 	movw	r1, #12696	; 0x3198
    e742:	f2c0 0102 	movt	r1, #2
    e746:	f013 f89b 	bl	21880 <GL_Drawing_SetFont>
	GL_Drawing_DrawText(GL_Widget_SearchId(hWindow, DRAWING_ID), sX, sY, GL_UNIT_PERCENT, pcText); // Draw text with pen
    e74a:	69f8      	ldr	r0, [r7, #28]
    e74c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    e750:	f013 fa3e 	bl	21bd0 <GL_Widget_SearchId>
    e754:	4603      	mov	r3, r0
    e756:	69ba      	ldr	r2, [r7, #24]
    e758:	9200      	str	r2, [sp, #0]
    e75a:	4618      	mov	r0, r3
    e75c:	68f9      	ldr	r1, [r7, #12]
    e75e:	68ba      	ldr	r2, [r7, #8]
    e760:	2301      	movs	r3, #1
    e762:	f013 f869 	bl	21838 <GL_Drawing_DrawText>

	CHECK(ulTimeOut!=0, lblNoTimer);                       // No timer to set
    e766:	687b      	ldr	r3, [r7, #4]
    e768:	2b00      	cmp	r3, #0
    e76a:	d045      	beq.n	e7f8 <GoalDrawText+0x14c>

	// Restart timer
	// *************
	if (ulTimeOut == GL_TIME_INFINITE)                     // Set timeout value
    e76c:	687b      	ldr	r3, [r7, #4]
    e76e:	f1b3 3fff 	cmp.w	r3, #4294967295
    e772:	d10a      	bne.n	e78a <GoalDrawText+0xde>
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), 0x7FFFFFFF); // Bug 0xFFFFFFFF not supported
    e774:	69f8      	ldr	r0, [r7, #28]
    e776:	2100      	movs	r1, #0
    e778:	f013 fa2a 	bl	21bd0 <GL_Widget_SearchId>
    e77c:	4603      	mov	r3, r0
    e77e:	4618      	mov	r0, r3
    e780:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    e784:	f013 f9ca 	bl	21b1c <GL_Timer_SetInterval>
    e788:	e008      	b.n	e79c <GoalDrawText+0xf0>
	else
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), ulTimeOut);
    e78a:	69f8      	ldr	r0, [r7, #28]
    e78c:	2100      	movs	r1, #0
    e78e:	f013 fa1f 	bl	21bd0 <GL_Widget_SearchId>
    e792:	4603      	mov	r3, r0
    e794:	4618      	mov	r0, r3
    e796:	6879      	ldr	r1, [r7, #4]
    e798:	f013 f9c0 	bl	21b1c <GL_Timer_SetInterval>

	// Loop indefinitely until the result is set from the call back functions
	// **********************************************************************
	GL_Window_MainLoop(hWindow);                           // Wait until a result is set
    e79c:	69f8      	ldr	r0, [r7, #28]
    e79e:	f013 fc21 	bl	21fe4 <GL_Window_MainLoop>

	// Test the result set by the call back functions
	// **********************************************
	switch(GL_Window_GetResult(hWindow))                   // Get the result
    e7a2:	69f8      	ldr	r0, [r7, #28]
    e7a4:	f013 fc0c 	bl	21fc0 <GL_Window_GetResult>
    e7a8:	4603      	mov	r3, r0
    e7aa:	2b01      	cmp	r3, #1
    e7ac:	d010      	beq.n	e7d0 <GoalDrawText+0x124>
    e7ae:	2b01      	cmp	r3, #1
    e7b0:	d302      	bcc.n	e7b8 <GoalDrawText+0x10c>
    e7b2:	2b04      	cmp	r3, #4
    e7b4:	d018      	beq.n	e7e8 <GoalDrawText+0x13c>
    e7b6:	e01a      	b.n	e7ee <GoalDrawText+0x142>
	{
	case RES_VALID_STATUS:                                 // Key valid result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    e7b8:	69f8      	ldr	r0, [r7, #28]
    e7ba:	2100      	movs	r1, #0
    e7bc:	f013 fa08 	bl	21bd0 <GL_Widget_SearchId>
    e7c0:	4603      	mov	r3, r0
    e7c2:	4618      	mov	r0, r3
    e7c4:	f013 f9bc 	bl	21b40 <GL_Timer_Stop>
		iRet=GL_KEY_VALID;
    e7c8:	f64f 0350 	movw	r3, #63568	; 0xf850
    e7cc:	623b      	str	r3, [r7, #32]
		break;
    e7ce:	e012      	b.n	e7f6 <GoalDrawText+0x14a>
	case RES_CANCEL_STATUS:                                // Key cancel result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    e7d0:	69f8      	ldr	r0, [r7, #28]
    e7d2:	2100      	movs	r1, #0
    e7d4:	f013 f9fc 	bl	21bd0 <GL_Widget_SearchId>
    e7d8:	4603      	mov	r3, r0
    e7da:	4618      	mov	r0, r3
    e7dc:	f013 f9b0 	bl	21b40 <GL_Timer_Stop>
		iRet=GL_KEY_CANCEL;
    e7e0:	f64f 0351 	movw	r3, #63569	; 0xf851
    e7e4:	623b      	str	r3, [r7, #32]
		break;
    e7e6:	e006      	b.n	e7f6 <GoalDrawText+0x14a>
	case RES_TIMER_STATUS:                                 // Timer result
		iRet=0;
    e7e8:	2300      	movs	r3, #0
    e7ea:	623b      	str	r3, [r7, #32]
		break;
    e7ec:	e003      	b.n	e7f6 <GoalDrawText+0x14a>
	default:                                               // Unknown result
		iRet=-1;
    e7ee:	f04f 33ff 	mov.w	r3, #4294967295
    e7f2:	623b      	str	r3, [r7, #32]
		break;
    e7f4:	bf00      	nop
	}

	goto lblEnd;
    e7f6:	e017      	b.n	e828 <GoalDrawText+0x17c>

	// Errors treatment
    // ****************
lblNoTimer:                                                // No timer used
	iRet=0;
    e7f8:	2300      	movs	r3, #0
    e7fa:	623b      	str	r3, [r7, #32]
	if (bRefresh)
    e7fc:	78fb      	ldrb	r3, [r7, #3]
    e7fe:	2b00      	cmp	r3, #0
    e800:	d011      	beq.n	e826 <GoalDrawText+0x17a>
	{
		iRet=GL_Window_Dispatch(hWindow, 0);               // Refresh the window
    e802:	69f8      	ldr	r0, [r7, #28]
    e804:	2100      	movs	r1, #0
    e806:	f013 fbc9 	bl	21f9c <GL_Window_Dispatch>
    e80a:	4603      	mov	r3, r0
    e80c:	623b      	str	r3, [r7, #32]
		if (iRet == RES_VALID_STATUS)
    e80e:	6a3b      	ldr	r3, [r7, #32]
    e810:	2b00      	cmp	r3, #0
    e812:	d102      	bne.n	e81a <GoalDrawText+0x16e>
			iRet=GL_KEY_VALID;
    e814:	f64f 0350 	movw	r3, #63568	; 0xf850
    e818:	623b      	str	r3, [r7, #32]
		if (iRet == RES_CANCEL_STATUS)
    e81a:	6a3b      	ldr	r3, [r7, #32]
    e81c:	2b01      	cmp	r3, #1
    e81e:	d102      	bne.n	e826 <GoalDrawText+0x17a>
			iRet=GL_KEY_CANCEL;
    e820:	f64f 0351 	movw	r3, #63569	; 0xf851
    e824:	623b      	str	r3, [r7, #32]
	}
	goto lblEnd;
    e826:	bf00      	nop
lblEnd:
	return iRet;
    e828:	6a3b      	ldr	r3, [r7, #32]
}
    e82a:	4618      	mov	r0, r3
    e82c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    e830:	f2c0 0302 	movt	r3, #2
    e834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e836:	681b      	ldr	r3, [r3, #0]
    e838:	429a      	cmp	r2, r3
    e83a:	d001      	beq.n	e840 <GoalDrawText+0x194>
    e83c:	f7fa fbb2 	bl	8fa4 <__stack_chk_fail>
    e840:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    e844:	46bd      	mov	sp, r7
    e846:	bd90      	pop	{r4, r7, pc}

0000e848 <GoalDestroyDrawing>:
//   phWindow (I-) : Pointer on window context handle.
// This function has no return value.
//****************************************************************************

void GoalDestroyDrawing(T_GL_HWIDGET *phWindow)
{
    e848:	b580      	push	{r7, lr}
    e84a:	b084      	sub	sp, #16
    e84c:	af00      	add	r7, sp, #0
    e84e:	6078      	str	r0, [r7, #4]
    e850:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    e854:	f2c0 0302 	movt	r3, #2
    e858:	681b      	ldr	r3, [r3, #0]
    e85a:	60fb      	str	r3, [r7, #12]
    // ***************
		// Empty

	// Destroy screen
	// **************
	GL_Widget_Destroy(*phWindow); // Destroy window with all widgets attached
    e85c:	687b      	ldr	r3, [r7, #4]
    e85e:	681b      	ldr	r3, [r3, #0]
    e860:	4618      	mov	r0, r3
    e862:	f013 f97f 	bl	21b64 <GL_Widget_Destroy>
	*phWindow=NULL;
    e866:	687b      	ldr	r3, [r7, #4]
    e868:	2200      	movs	r2, #0
    e86a:	601a      	str	r2, [r3, #0]
}
    e86c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    e870:	f2c0 0302 	movt	r3, #2
    e874:	68fa      	ldr	r2, [r7, #12]
    e876:	681b      	ldr	r3, [r3, #0]
    e878:	429a      	cmp	r2, r3
    e87a:	d001      	beq.n	e880 <GoalDestroyDrawing+0x38>
    e87c:	f7fa fb92 	bl	8fa4 <__stack_chk_fail>
    e880:	f107 0710 	add.w	r7, r7, #16
    e884:	46bd      	mov	sp, r7
    e886:	bd80      	pop	{r7, pc}

0000e888 <GoalCreatePicture>:
//   !NULL : Pointer to the handle of the picture.
//   NULL : Picture failed
//****************************************************************************

T_GL_HWIDGET GoalCreatePicture (T_GL_HGRAPHIC_LIB hGraphicLib)
{
    e888:	b580      	push	{r7, lr}
    e88a:	b08c      	sub	sp, #48	; 0x30
    e88c:	af00      	add	r7, sp, #0
    e88e:	6078      	str	r0, [r7, #4]
    e890:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    e894:	f2c0 0302 	movt	r3, #2
    e898:	681b      	ldr	r3, [r3, #0]
    e89a:	62fb      	str	r3, [r7, #44]	; 0x2c
	T_GL_HWIDGET hWindow, hTimer, hLayout, hLabel, hPicture, hLayout2, hButtonVal, hButtonCan;
	bool bTouch;

	// Build picture context with 2 buttons (Cancel and Valid)
	// *******************************************************
	bTouch = GL_GraphicLib_IsTouchPresent(hGraphicLib);               // Is a touch screen?
    e89c:	6878      	ldr	r0, [r7, #4]
    e89e:	f013 f865 	bl	2196c <GL_GraphicLib_IsTouchPresent>
    e8a2:	4603      	mov	r3, r0
    e8a4:	72fb      	strb	r3, [r7, #11]

	hWindow = GL_Window_Create(hGraphicLib);                          // Create a window in a user area
    e8a6:	6878      	ldr	r0, [r7, #4]
    e8a8:	f013 fb66 	bl	21f78 <GL_Window_Create>
    e8ac:	60f8      	str	r0, [r7, #12]
	CHECK(hWindow!=NULL, lblEnd);
    e8ae:	68fb      	ldr	r3, [r7, #12]
    e8b0:	2b00      	cmp	r3, #0
    e8b2:	f000 80d8 	beq.w	ea66 <GoalCreatePicture+0x1de>

	hTimer = GL_Timer_Create(hWindow);                                // Create a timer on this window
    e8b6:	68f8      	ldr	r0, [r7, #12]
    e8b8:	f013 f91e 	bl	21af8 <GL_Timer_Create>
    e8bc:	6138      	str	r0, [r7, #16]
	CHECK(hTimer!=NULL, lblKO);
    e8be:	693b      	ldr	r3, [r7, #16]
    e8c0:	2b00      	cmp	r3, #0
    e8c2:	f000 80c4 	beq.w	ea4e <GoalCreatePicture+0x1c6>
	GL_Widget_SetId(hTimer, TIMER_ID);                                // Timer Identifier TIMER_ID
    e8c6:	6938      	ldr	r0, [r7, #16]
    e8c8:	2100      	movs	r1, #0
    e8ca:	f013 fa47 	bl	21d5c <GL_Widget_SetId>
	GL_Widget_RegisterCallback(hTimer, GL_EVENT_TIMER_OUT, CallBackTimeout); // Call back when the timer expired
    e8ce:	6938      	ldr	r0, [r7, #16]
    e8d0:	2108      	movs	r1, #8
    e8d2:	f24d 0285 	movw	r2, #53381	; 0xd085
    e8d6:	f2c0 0200 	movt	r2, #0
    e8da:	f013 f967 	bl	21bac <GL_Widget_RegisterCallback>

	hLayout = GL_Layout_Create(hWindow);                              // Create a layout on this window
    e8de:	68f8      	ldr	r0, [r7, #12]
    e8e0:	f013 f88c 	bl	219fc <GL_Layout_Create>
    e8e4:	6178      	str	r0, [r7, #20]
	CHECK(hLayout!=NULL, lblKO);
    e8e6:	697b      	ldr	r3, [r7, #20]
    e8e8:	2b00      	cmp	r3, #0
    e8ea:	f000 80b0 	beq.w	ea4e <GoalCreatePicture+0x1c6>

	hLabel = GL_Label_Create(hLayout);                                // Create a label on this layout
    e8ee:	6978      	ldr	r0, [r7, #20]
    e8f0:	f013 f872 	bl	219d8 <GL_Label_Create>
    e8f4:	61b8      	str	r0, [r7, #24]
	CHECK(hLabel!=NULL, lblKO);
    e8f6:	69bb      	ldr	r3, [r7, #24]
    e8f8:	2b00      	cmp	r3, #0
    e8fa:	f000 80a8 	beq.w	ea4e <GoalCreatePicture+0x1c6>
	GL_Widget_SetItem(hLabel, 0, 0);                                  // Label location on this layout
    e8fe:	69b8      	ldr	r0, [r7, #24]
    e900:	2100      	movs	r1, #0
    e902:	2200      	movs	r2, #0
    e904:	f013 fa3c 	bl	21d80 <GL_Widget_SetItem>
	GL_Widget_SetText(hLabel, NULL);                                  // Clear text on this label
    e908:	69b8      	ldr	r0, [r7, #24]
    e90a:	2100      	movs	r1, #0
    e90c:	f013 fab6 	bl	21e7c <GL_Widget_SetText>
	GL_Widget_SetShrink(hLabel, GL_DIRECTION_WIDTH);                  // Shrink beyond its size (No width scrolling cell if label goes over screen)
    e910:	69b8      	ldr	r0, [r7, #24]
    e912:	2101      	movs	r1, #1
    e914:	f013 fa7c 	bl	21e10 <GL_Widget_SetShrink>
	GL_Widget_SetId(hLabel, LABEL_0_ID);                              // Label identifier LABEL0_ID
    e918:	69b8      	ldr	r0, [r7, #24]
    e91a:	f44f 7180 	mov.w	r1, #256	; 0x100
    e91e:	f013 fa1d 	bl	21d5c <GL_Widget_SetId>

	hPicture = GL_Picture_Create(hLayout);                            // Create a picture on this layout
    e922:	6978      	ldr	r0, [r7, #20]
    e924:	f013 f8c4 	bl	21ab0 <GL_Picture_Create>
    e928:	61f8      	str	r0, [r7, #28]
	CHECK(hPicture!=NULL, lblKO);
    e92a:	69fb      	ldr	r3, [r7, #28]
    e92c:	2b00      	cmp	r3, #0
    e92e:	f000 808e 	beq.w	ea4e <GoalCreatePicture+0x1c6>
	GL_Widget_SetId(hPicture, PICTURE_ID);                            // Picture Identifier PICTURE_ID
    e932:	69f8      	ldr	r0, [r7, #28]
    e934:	f44f 6100 	mov.w	r1, #2048	; 0x800
    e938:	f013 fa10 	bl	21d5c <GL_Widget_SetId>
	GL_Widget_SetItem(hPicture, 0, 1);                                // Picture location on this layout
    e93c:	69f8      	ldr	r0, [r7, #28]
    e93e:	2100      	movs	r1, #0
    e940:	2201      	movs	r2, #1
    e942:	f013 fa1d 	bl	21d80 <GL_Widget_SetItem>

	hLayout2 = GL_Layout_Create(hLayout);                             // Create a second layout on this layout
    e946:	6978      	ldr	r0, [r7, #20]
    e948:	f013 f858 	bl	219fc <GL_Layout_Create>
    e94c:	6238      	str	r0, [r7, #32]
	CHECK(hLayout2!=NULL, lblKO);
    e94e:	6a3b      	ldr	r3, [r7, #32]
    e950:	2b00      	cmp	r3, #0
    e952:	d07c      	beq.n	ea4e <GoalCreatePicture+0x1c6>
	GL_Widget_SetId(hLayout2, LAYOUT2_ID);                            // Second layout identifier
    e954:	6a38      	ldr	r0, [r7, #32]
    e956:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    e95a:	f013 f9ff 	bl	21d5c <GL_Widget_SetId>
	GL_Widget_SetItem(hLayout2, 0, 2);                                // Second layout location on this layout
    e95e:	6a38      	ldr	r0, [r7, #32]
    e960:	2100      	movs	r1, #0
    e962:	2202      	movs	r2, #2
    e964:	f013 fa0c 	bl	21d80 <GL_Widget_SetItem>
	GL_Widget_SetGrow(hLayout2, GL_DIRECTION_WIDTH);                  // Grow beyond its size (Background width around layout will fill the complete cell)
    e968:	6a38      	ldr	r0, [r7, #32]
    e96a:	2101      	movs	r1, #1
    e96c:	f013 f9e4 	bl	21d38 <GL_Widget_SetGrow>

	hButtonCan = GL_Button_Create(hLayout2);                          // Create a cancel button on this second layout
    e970:	6a38      	ldr	r0, [r7, #32]
    e972:	f012 fe41 	bl	215f8 <GL_Button_Create>
    e976:	6278      	str	r0, [r7, #36]	; 0x24
	CHECK(hButtonCan!=NULL, lblKO);
    e978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e97a:	2b00      	cmp	r3, #0
    e97c:	d067      	beq.n	ea4e <GoalCreatePicture+0x1c6>
	GL_Widget_SetSource(hButtonCan, "skin://images/cancel.wgu");      // Set the cancel skinned image
    e97e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e980:	f243 1120 	movw	r1, #12576	; 0x3120
    e984:	f2c0 0102 	movt	r1, #2
    e988:	f013 fa66 	bl	21e58 <GL_Widget_SetSource>
	GL_Widget_SetItem(hButtonCan, 0, 0);                              // Button location on this layout
    e98c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e98e:	2100      	movs	r1, #0
    e990:	2200      	movs	r2, #0
    e992:	f013 f9f5 	bl	21d80 <GL_Widget_SetItem>
	GL_Widget_SetExpand(hButtonCan, GL_DIRECTION_WIDTH);              // Expand button width
    e996:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e998:	2101      	movs	r1, #1
    e99a:	f013 f961 	bl	21c60 <GL_Widget_SetExpand>
	GL_Widget_SetShortcut(hButtonCan, GL_KEY_CANCEL);                 // Shortcut on this button
    e99e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e9a0:	f64f 0151 	movw	r1, #63569	; 0xf851
    e9a4:	f013 fa22 	bl	21dec <GL_Widget_SetShortcut>
	GL_Widget_SetId(hButtonCan, BUTTON_CAN_ID);                       // Cancel button Identifier
    e9a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e9aa:	f44f 7140 	mov.w	r1, #768	; 0x300
    e9ae:	f013 f9d5 	bl	21d5c <GL_Widget_SetId>
	GL_Widget_SetGrow(hButtonCan, GL_DIRECTION_WIDTH);                // Grow beyond its size (Background width around cancel button will fill the complete cell)
    e9b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e9b4:	2101      	movs	r1, #1
    e9b6:	f013 f9bf 	bl	21d38 <GL_Widget_SetGrow>
	GL_Widget_SetFocusable(hButtonCan, false);                        // No focus on this button
    e9ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e9bc:	2100      	movs	r1, #0
    e9be:	f013 f961 	bl	21c84 <GL_Widget_SetFocusable>
	GL_Widget_RegisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Call back when key pressed
    e9c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e9c4:	2167      	movs	r1, #103	; 0x67
    e9c6:	f64c 72d1 	movw	r2, #53201	; 0xcfd1
    e9ca:	f2c0 0200 	movt	r2, #0
    e9ce:	f013 f8ed 	bl	21bac <GL_Widget_RegisterCallback>

	hButtonVal = GL_Button_Create(hLayout2);                          // Create a valid button on this second layout
    e9d2:	6a38      	ldr	r0, [r7, #32]
    e9d4:	f012 fe10 	bl	215f8 <GL_Button_Create>
    e9d8:	62b8      	str	r0, [r7, #40]	; 0x28
	CHECK(hButtonVal!=NULL, lblKO);
    e9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e9dc:	2b00      	cmp	r3, #0
    e9de:	d036      	beq.n	ea4e <GoalCreatePicture+0x1c6>
	GL_Widget_SetSource(hButtonVal, "skin://images/validation.wgu");  // Set the valid skinned image
    e9e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e9e2:	f243 1174 	movw	r1, #12660	; 0x3174
    e9e6:	f2c0 0102 	movt	r1, #2
    e9ea:	f013 fa35 	bl	21e58 <GL_Widget_SetSource>
	GL_Widget_SetItem(hButtonVal, 1, 0);                              // Button location on this layout
    e9ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e9f0:	2101      	movs	r1, #1
    e9f2:	2200      	movs	r2, #0
    e9f4:	f013 f9c4 	bl	21d80 <GL_Widget_SetItem>
	GL_Widget_SetExpand(hButtonVal, GL_DIRECTION_WIDTH);              // Expand button width
    e9f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e9fa:	2101      	movs	r1, #1
    e9fc:	f013 f930 	bl	21c60 <GL_Widget_SetExpand>
	GL_Widget_SetShortcut(hButtonVal, GL_KEY_VALID);                  // Shortcut on this button
    ea00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ea02:	f64f 0150 	movw	r1, #63568	; 0xf850
    ea06:	f013 f9f1 	bl	21dec <GL_Widget_SetShortcut>
	GL_Widget_SetId(hButtonVal, BUTTON_VAL_ID);                       // Valid button Identifier
    ea0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ea0c:	f44f 7100 	mov.w	r1, #512	; 0x200
    ea10:	f013 f9a4 	bl	21d5c <GL_Widget_SetId>
	GL_Widget_SetGrow(hButtonVal, GL_DIRECTION_WIDTH);                // Grow beyond its size (Background width around valid button will fill the complete cell)
    ea14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ea16:	2101      	movs	r1, #1
    ea18:	f013 f98e 	bl	21d38 <GL_Widget_SetGrow>
	GL_Widget_SetFocusable(hButtonVal, false);                        // No focus on this button
    ea1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ea1e:	2100      	movs	r1, #0
    ea20:	f013 f930 	bl	21c84 <GL_Widget_SetFocusable>
	GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Call back when key pressed
    ea24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ea26:	2167      	movs	r1, #103	; 0x67
    ea28:	f64c 7295 	movw	r2, #53141	; 0xcf95
    ea2c:	f2c0 0200 	movt	r2, #0
    ea30:	f013 f8bc 	bl	21bac <GL_Widget_RegisterCallback>

	if(!bTouch)                                                       // Touch screen?
    ea34:	7afb      	ldrb	r3, [r7, #11]
    ea36:	f083 0301 	eor.w	r3, r3, #1
    ea3a:	b2db      	uxtb	r3, r3
    ea3c:	2b00      	cmp	r3, #0
    ea3e:	d00f      	beq.n	ea60 <GoalCreatePicture+0x1d8>
		GL_Widget_SetSize(hLayout2, 100, 0, GL_UNIT_PERCENT);         // No, do not show second layout (keep shortcut access on key pressed)
    ea40:	6a38      	ldr	r0, [r7, #32]
    ea42:	2164      	movs	r1, #100	; 0x64
    ea44:	2200      	movs	r2, #0
    ea46:	2301      	movs	r3, #1
    ea48:	f013 f9f4 	bl	21e34 <GL_Widget_SetSize>

	goto lblEnd;
    ea4c:	e008      	b.n	ea60 <GoalCreatePicture+0x1d8>

	// Errors treatment
    // ****************
lblKO:                                                                // Window creation failed
	if (hWindow)
    ea4e:	68fb      	ldr	r3, [r7, #12]
    ea50:	2b00      	cmp	r3, #0
    ea52:	d007      	beq.n	ea64 <GoalCreatePicture+0x1dc>
	{
		GL_Widget_Destroy(hWindow);                                   // Destroy window and all widgets
    ea54:	68f8      	ldr	r0, [r7, #12]
    ea56:	f013 f885 	bl	21b64 <GL_Widget_Destroy>
		hWindow=NULL;
    ea5a:	2300      	movs	r3, #0
    ea5c:	60fb      	str	r3, [r7, #12]
	}
	goto lblEnd;
    ea5e:	e001      	b.n	ea64 <GoalCreatePicture+0x1dc>
	GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Call back when key pressed

	if(!bTouch)                                                       // Touch screen?
		GL_Widget_SetSize(hLayout2, 100, 0, GL_UNIT_PERCENT);         // No, do not show second layout (keep shortcut access on key pressed)

	goto lblEnd;
    ea60:	bf00      	nop
    ea62:	e000      	b.n	ea66 <GoalCreatePicture+0x1de>
	if (hWindow)
	{
		GL_Widget_Destroy(hWindow);                                   // Destroy window and all widgets
		hWindow=NULL;
	}
	goto lblEnd;
    ea64:	bf00      	nop
lblEnd:
	return hWindow;
    ea66:	68fb      	ldr	r3, [r7, #12]
}
    ea68:	4618      	mov	r0, r3
    ea6a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    ea6e:	f2c0 0302 	movt	r3, #2
    ea72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ea74:	681b      	ldr	r3, [r3, #0]
    ea76:	429a      	cmp	r2, r3
    ea78:	d001      	beq.n	ea7e <GoalCreatePicture+0x1f6>
    ea7a:	f7fa fa93 	bl	8fa4 <__stack_chk_fail>
    ea7e:	f107 0730 	add.w	r7, r7, #48	; 0x30
    ea82:	46bd      	mov	sp, r7
    ea84:	bd80      	pop	{r7, pc}
    ea86:	bf00      	nop

0000ea88 <GoalClrPicture>:
//   >=0 : Clear picture done.
//   <0 : Clear picture failed.
//****************************************************************************

int GoalClrPicture(T_GL_HWIDGET hWindow, T_GL_COLOR ulBackColor, unsigned int uiKeys, bool bRefresh)
{
    ea88:	b580      	push	{r7, lr}
    ea8a:	b08c      	sub	sp, #48	; 0x30
    ea8c:	af04      	add	r7, sp, #16
    ea8e:	60f8      	str	r0, [r7, #12]
    ea90:	60b9      	str	r1, [r7, #8]
    ea92:	607a      	str	r2, [r7, #4]
    ea94:	70fb      	strb	r3, [r7, #3]
    ea96:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    ea9a:	f2c0 0302 	movt	r3, #2
    ea9e:	681b      	ldr	r3, [r3, #0]
    eaa0:	61fb      	str	r3, [r7, #28]
	T_GL_HWIDGET hButtonVal, hButtonCan;
	int iRet;

	// Disable the complete second layout
	// **********************************
	hButtonCan = GL_Widget_SearchId(hWindow, BUTTON_CAN_ID);     // Retrieve the cancel button on this second layout
    eaa2:	68f8      	ldr	r0, [r7, #12]
    eaa4:	f44f 7140 	mov.w	r1, #768	; 0x300
    eaa8:	f013 f892 	bl	21bd0 <GL_Widget_SearchId>
    eaac:	6178      	str	r0, [r7, #20]
	CHECK(hButtonCan!=NULL, lblKO);
    eaae:	697b      	ldr	r3, [r7, #20]
    eab0:	2b00      	cmp	r3, #0
    eab2:	f000 8085 	beq.w	ebc0 <GoalClrPicture+0x138>
	hButtonVal = GL_Widget_SearchId(hWindow, BUTTON_VAL_ID);     // Retrieve the valid button on this second layout
    eab6:	68f8      	ldr	r0, [r7, #12]
    eab8:	f44f 7100 	mov.w	r1, #512	; 0x200
    eabc:	f013 f888 	bl	21bd0 <GL_Widget_SearchId>
    eac0:	61b8      	str	r0, [r7, #24]
	CHECK(hButtonVal!=NULL, lblKO);
    eac2:	69bb      	ldr	r3, [r7, #24]
    eac4:	2b00      	cmp	r3, #0
    eac6:	d07b      	beq.n	ebc0 <GoalClrPicture+0x138>

	GL_Widget_SetVisible(hButtonCan, false);                     // Blind the cancel button
    eac8:	6978      	ldr	r0, [r7, #20]
    eaca:	2100      	movs	r1, #0
    eacc:	f013 fa1e 	bl	21f0c <GL_Widget_SetVisible>
	GL_Widget_UnregisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Unregister call back on cancel button
    ead0:	6978      	ldr	r0, [r7, #20]
    ead2:	2167      	movs	r1, #103	; 0x67
    ead4:	f64c 72d1 	movw	r2, #53201	; 0xcfd1
    ead8:	f2c0 0200 	movt	r2, #0
    eadc:	f013 fa3a 	bl	21f54 <GL_Widget_UnregisterCallback>
	GL_Widget_SetVisible(hButtonVal, false);                     // Blind the valid button
    eae0:	69b8      	ldr	r0, [r7, #24]
    eae2:	2100      	movs	r1, #0
    eae4:	f013 fa12 	bl	21f0c <GL_Widget_SetVisible>
	GL_Widget_UnregisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Unregister call back on valid button
    eae8:	69b8      	ldr	r0, [r7, #24]
    eaea:	2167      	movs	r1, #103	; 0x67
    eaec:	f64c 7295 	movw	r2, #53141	; 0xcf95
    eaf0:	f2c0 0200 	movt	r2, #0
    eaf4:	f013 fa2e 	bl	21f54 <GL_Widget_UnregisterCallback>

	// Set the second layout with the right properties
	// ***********************************************
	if ((uiKeys & KEY_CANCEL) == KEY_CANCEL)                     // Cancel key?
    eaf8:	687b      	ldr	r3, [r7, #4]
    eafa:	f003 0302 	and.w	r3, r3, #2
    eafe:	2b00      	cmp	r3, #0
    eb00:	d00b      	beq.n	eb1a <GoalClrPicture+0x92>
	{
		GL_Widget_SetVisible(hButtonCan, true);                  // Yes, show the cancel key on this second layout
    eb02:	6978      	ldr	r0, [r7, #20]
    eb04:	2101      	movs	r1, #1
    eb06:	f013 fa01 	bl	21f0c <GL_Widget_SetVisible>
		GL_Widget_RegisterCallback(hButtonCan, GL_EVENT_STYLUS_CLICK, CallBackCancelKey); // Register call back when cancel key pressed or touched
    eb0a:	6978      	ldr	r0, [r7, #20]
    eb0c:	2167      	movs	r1, #103	; 0x67
    eb0e:	f64c 72d1 	movw	r2, #53201	; 0xcfd1
    eb12:	f2c0 0200 	movt	r2, #0
    eb16:	f013 f849 	bl	21bac <GL_Widget_RegisterCallback>
	}

	if ((uiKeys & KEY_VALID) == KEY_VALID)                       // Valid key?
    eb1a:	687b      	ldr	r3, [r7, #4]
    eb1c:	f003 0301 	and.w	r3, r3, #1
    eb20:	2b00      	cmp	r3, #0
    eb22:	d00b      	beq.n	eb3c <GoalClrPicture+0xb4>
	{
		GL_Widget_SetVisible(hButtonVal, true);                  // Yes, show the valid key on this second layout
    eb24:	69b8      	ldr	r0, [r7, #24]
    eb26:	2101      	movs	r1, #1
    eb28:	f013 f9f0 	bl	21f0c <GL_Widget_SetVisible>
		GL_Widget_RegisterCallback(hButtonVal, GL_EVENT_STYLUS_CLICK, CallBackValidKey); // Register call back when valid key pressed or touched
    eb2c:	69b8      	ldr	r0, [r7, #24]
    eb2e:	2167      	movs	r1, #103	; 0x67
    eb30:	f64c 7295 	movw	r2, #53141	; 0xcf95
    eb34:	f2c0 0200 	movt	r2, #0
    eb38:	f013 f838 	bl	21bac <GL_Widget_RegisterCallback>
	}

	if (IsColorDisplay())                                        // Color display?
    eb3c:	f011 fd10 	bl	20560 <IsColorDisplay>
    eb40:	4603      	mov	r3, r0
    eb42:	2b00      	cmp	r3, #0
    eb44:	d004      	beq.n	eb50 <GoalClrPicture+0xc8>
		GL_Widget_SetBackColor(hWindow, ulBackColor);            // Yes, set window back color
    eb46:	68f8      	ldr	r0, [r7, #12]
    eb48:	68b9      	ldr	r1, [r7, #8]
    eb4a:	f013 f865 	bl	21c18 <GL_Widget_SetBackColor>
    eb4e:	e004      	b.n	eb5a <GoalClrPicture+0xd2>
	else
		GL_Widget_SetBackColor(hWindow, GL_COLOR_WHITE);         // No, force window back color to white
    eb50:	68f8      	ldr	r0, [r7, #12]
    eb52:	f04f 31ff 	mov.w	r1, #4294967295
    eb56:	f013 f85f 	bl	21c18 <GL_Widget_SetBackColor>

	// Clear Title
	// ***********
	GL_Widget_SetText(GL_Widget_SearchId(hWindow, LABEL_0_ID), NULL); // Remove label text
    eb5a:	68f8      	ldr	r0, [r7, #12]
    eb5c:	f44f 7180 	mov.w	r1, #256	; 0x100
    eb60:	f013 f836 	bl	21bd0 <GL_Widget_SearchId>
    eb64:	4603      	mov	r3, r0
    eb66:	4618      	mov	r0, r3
    eb68:	2100      	movs	r1, #0
    eb6a:	f013 f987 	bl	21e7c <GL_Widget_SetText>

	// Clear picture
	// *************
	GL_Widget_SetSource(GL_Widget_SearchId(hWindow, PICTURE_ID), ""); // Clear picture
    eb6e:	68f8      	ldr	r0, [r7, #12]
    eb70:	f44f 6100 	mov.w	r1, #2048	; 0x800
    eb74:	f013 f82c 	bl	21bd0 <GL_Widget_SearchId>
    eb78:	4603      	mov	r3, r0
    eb7a:	4618      	mov	r0, r3
    eb7c:	f243 11a0 	movw	r1, #12704	; 0x31a0
    eb80:	f2c0 0102 	movt	r1, #2
    eb84:	f013 f968 	bl	21e58 <GL_Widget_SetSource>
	GL_Widget_SetBorders(GL_Widget_SearchId(hWindow, PICTURE_ID), 0, 0, 0, 0, GL_UNIT_PIXEL, ulBackColor); // Remove border with window back color
    eb88:	68f8      	ldr	r0, [r7, #12]
    eb8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    eb8e:	f013 f81f 	bl	21bd0 <GL_Widget_SearchId>
    eb92:	4603      	mov	r3, r0
    eb94:	2200      	movs	r2, #0
    eb96:	9200      	str	r2, [sp, #0]
    eb98:	2200      	movs	r2, #0
    eb9a:	9201      	str	r2, [sp, #4]
    eb9c:	68ba      	ldr	r2, [r7, #8]
    eb9e:	9202      	str	r2, [sp, #8]
    eba0:	4618      	mov	r0, r3
    eba2:	2100      	movs	r1, #0
    eba4:	2200      	movs	r2, #0
    eba6:	2300      	movs	r3, #0
    eba8:	f013 f848 	bl	21c3c <GL_Widget_SetBorders>

	if (bRefresh)                                                // Refresh window?
    ebac:	78fb      	ldrb	r3, [r7, #3]
    ebae:	2b00      	cmp	r3, #0
    ebb0:	d003      	beq.n	ebba <GoalClrPicture+0x132>
		GL_Window_Dispatch(hWindow, 0);                          // Yes, refresh it
    ebb2:	68f8      	ldr	r0, [r7, #12]
    ebb4:	2100      	movs	r1, #0
    ebb6:	f013 f9f1 	bl	21f9c <GL_Window_Dispatch>

	iRet=1;
    ebba:	2301      	movs	r3, #1
    ebbc:	613b      	str	r3, [r7, #16]
	goto lblEnd;
    ebbe:	e003      	b.n	ebc8 <GoalClrPicture+0x140>

	// Errors treatment
    // ****************
lblKO:                                                           // Clear picture failed
	iRet=-1;
    ebc0:	f04f 33ff 	mov.w	r3, #4294967295
    ebc4:	613b      	str	r3, [r7, #16]
	goto lblEnd;
    ebc6:	bf00      	nop
lblEnd:
	return iRet;
    ebc8:	693b      	ldr	r3, [r7, #16]
}
    ebca:	4618      	mov	r0, r3
    ebcc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    ebd0:	f2c0 0302 	movt	r3, #2
    ebd4:	69fa      	ldr	r2, [r7, #28]
    ebd6:	681b      	ldr	r3, [r3, #0]
    ebd8:	429a      	cmp	r2, r3
    ebda:	d001      	beq.n	ebe0 <GoalClrPicture+0x158>
    ebdc:	f7fa f9e2 	bl	8fa4 <__stack_chk_fail>
    ebe0:	f107 0720 	add.w	r7, r7, #32
    ebe4:	46bd      	mov	sp, r7
    ebe6:	bd80      	pop	{r7, pc}

0000ebe8 <GoalDspPicture>:
//   >=0 : Display picture done (Exit screen : 0=timeout,GL_KEY_CANCEL,GL_KEY_VALID).
//   <0 : Display picture failed.
//****************************************************************************

int GoalDspPicture(T_GL_HWIDGET hWindow, char *pcTitle, const char* pcPicture, const ST_IMAGE* pxImage, ulong ulTimeOut, bool bRefresh)
{
    ebe8:	b590      	push	{r4, r7, lr}
    ebea:	b08f      	sub	sp, #60	; 0x3c
    ebec:	af04      	add	r7, sp, #16
    ebee:	6178      	str	r0, [r7, #20]
    ebf0:	6139      	str	r1, [r7, #16]
    ebf2:	60fa      	str	r2, [r7, #12]
    ebf4:	60bb      	str	r3, [r7, #8]
    ebf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ebf8:	607b      	str	r3, [r7, #4]
    ebfa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    ebfe:	70fb      	strb	r3, [r7, #3]
    ec00:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    ec04:	f2c0 0302 	movt	r3, #2
    ec08:	681b      	ldr	r3, [r3, #0]
    ec0a:	627b      	str	r3, [r7, #36]	; 0x24
	T_GL_HWIDGET hLabel, hPicture;
	int iRet;

	// Display label
	// *************
	hLabel = GL_Widget_SearchId(hWindow, LABEL_0_ID);   // Get label from its id
    ec0c:	6978      	ldr	r0, [r7, #20]
    ec0e:	f44f 7180 	mov.w	r1, #256	; 0x100
    ec12:	f012 ffdd 	bl	21bd0 <GL_Widget_SearchId>
    ec16:	61f8      	str	r0, [r7, #28]
	CHECK(hLabel!=NULL, lblKO);
    ec18:	69fb      	ldr	r3, [r7, #28]
    ec1a:	2b00      	cmp	r3, #0
    ec1c:	f000 8126 	beq.w	ee6c <GoalDspPicture+0x284>

	if (pcTitle)                                        // Null title?
    ec20:	693b      	ldr	r3, [r7, #16]
    ec22:	2b00      	cmp	r3, #0
    ec24:	d00c      	beq.n	ec40 <GoalDspPicture+0x58>
	{
		GL_Widget_SetVisible(hLabel, true);
    ec26:	69f8      	ldr	r0, [r7, #28]
    ec28:	2101      	movs	r1, #1
    ec2a:	f013 f96f 	bl	21f0c <GL_Widget_SetVisible>
		GL_Widget_SetText(hLabel, "%s", pcTitle);       // No, show title (add %s to allow '%' to be displayed)
    ec2e:	69f8      	ldr	r0, [r7, #28]
    ec30:	f243 1194 	movw	r1, #12692	; 0x3194
    ec34:	f2c0 0102 	movt	r1, #2
    ec38:	693a      	ldr	r2, [r7, #16]
    ec3a:	f013 f91f 	bl	21e7c <GL_Widget_SetText>
    ec3e:	e003      	b.n	ec48 <GoalDspPicture+0x60>
	}
	else
		GL_Widget_SetVisible(hLabel, false);            // Yes, blind title (line is removed)
    ec40:	69f8      	ldr	r0, [r7, #28]
    ec42:	2100      	movs	r1, #0
    ec44:	f013 f962 	bl	21f0c <GL_Widget_SetVisible>


	if (IsColorDisplay())                               // Color display?
    ec48:	f011 fc8a 	bl	20560 <IsColorDisplay>
    ec4c:	4603      	mov	r3, r0
    ec4e:	2b00      	cmp	r3, #0
    ec50:	d027      	beq.n	eca2 <GoalDspPicture+0xba>
	{                                                   // Yes
		// Color properties
		// ================
		if (pxImage)
    ec52:	68bb      	ldr	r3, [r7, #8]
    ec54:	2b00      	cmp	r3, #0
    ec56:	d046      	beq.n	ece6 <GoalDspPicture+0xfe>
		{
			GL_Widget_SetForeColor(hLabel, pxImage->xColor.ulPen);           // Pen color
    ec58:	68bb      	ldr	r3, [r7, #8]
    ec5a:	681b      	ldr	r3, [r3, #0]
    ec5c:	69f8      	ldr	r0, [r7, #28]
    ec5e:	4619      	mov	r1, r3
    ec60:	f013 f858 	bl	21d14 <GL_Widget_SetForeColor>
			if (pxImage->xColor.bGrowWidth)                                  // Grow beyond its size
    ec64:	68bb      	ldr	r3, [r7, #8]
    ec66:	791b      	ldrb	r3, [r3, #4]
    ec68:	2b00      	cmp	r3, #0
    ec6a:	d003      	beq.n	ec74 <GoalDspPicture+0x8c>
				GL_Widget_SetGrow(hLabel, GL_DIRECTION_WIDTH);               // Background width around the label will fill the complete cell
    ec6c:	69f8      	ldr	r0, [r7, #28]
    ec6e:	2101      	movs	r1, #1
    ec70:	f013 f862 	bl	21d38 <GL_Widget_SetGrow>
			if (pxImage->xColor.xFont.pcName != NULL)
    ec74:	68bb      	ldr	r3, [r7, #8]
    ec76:	689b      	ldr	r3, [r3, #8]
    ec78:	2b00      	cmp	r3, #0
    ec7a:	d005      	beq.n	ec88 <GoalDspPicture+0xa0>
				GL_Widget_SetFontName(hLabel, pxImage->xColor.xFont.pcName); // Font name
    ec7c:	68bb      	ldr	r3, [r7, #8]
    ec7e:	689b      	ldr	r3, [r3, #8]
    ec80:	69f8      	ldr	r0, [r7, #28]
    ec82:	4619      	mov	r1, r3
    ec84:	f013 f810 	bl	21ca8 <GL_Widget_SetFontName>
			GL_Widget_SetFontScale(hLabel, pxImage->xColor.xFont.eScale);    // Font scale
    ec88:	68bb      	ldr	r3, [r7, #8]
    ec8a:	691b      	ldr	r3, [r3, #16]
    ec8c:	69f8      	ldr	r0, [r7, #28]
    ec8e:	4619      	mov	r1, r3
    ec90:	f013 f81c 	bl	21ccc <GL_Widget_SetFontScale>
			GL_Widget_SetFontStyle(hLabel, pxImage->xColor.xFont.eStyle);    // Font style
    ec94:	68bb      	ldr	r3, [r7, #8]
    ec96:	68db      	ldr	r3, [r3, #12]
    ec98:	69f8      	ldr	r0, [r7, #28]
    ec9a:	4619      	mov	r1, r3
    ec9c:	f013 f828 	bl	21cf0 <GL_Widget_SetFontStyle>
    eca0:	e021      	b.n	ece6 <GoalDspPicture+0xfe>
	}
	else                                                // No
	{
		// Black & White properties
		// ========================
		if (pxImage)
    eca2:	68bb      	ldr	r3, [r7, #8]
    eca4:	2b00      	cmp	r3, #0
    eca6:	d01e      	beq.n	ece6 <GoalDspPicture+0xfe>
		{
			if (pxImage->xBW.bGrowWidth)                                     // Grow beyond its size
    eca8:	68bb      	ldr	r3, [r7, #8]
    ecaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    ecae:	2b00      	cmp	r3, #0
    ecb0:	d003      	beq.n	ecba <GoalDspPicture+0xd2>
				GL_Widget_SetGrow(hLabel, GL_DIRECTION_WIDTH);               // Background width around the label will fill the complete cell
    ecb2:	69f8      	ldr	r0, [r7, #28]
    ecb4:	2101      	movs	r1, #1
    ecb6:	f013 f83f 	bl	21d38 <GL_Widget_SetGrow>
			if (pxImage->xBW.xFont.pcName != NULL)
    ecba:	68bb      	ldr	r3, [r7, #8]
    ecbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ecbe:	2b00      	cmp	r3, #0
    ecc0:	d005      	beq.n	ecce <GoalDspPicture+0xe6>
				GL_Widget_SetFontName(hLabel, pxImage->xBW.xFont.pcName);    // Font name
    ecc2:	68bb      	ldr	r3, [r7, #8]
    ecc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ecc6:	69f8      	ldr	r0, [r7, #28]
    ecc8:	4619      	mov	r1, r3
    ecca:	f012 ffed 	bl	21ca8 <GL_Widget_SetFontName>
			GL_Widget_SetFontScale(hLabel, pxImage->xBW.xFont.eScale);       // Font scale
    ecce:	68bb      	ldr	r3, [r7, #8]
    ecd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ecd2:	69f8      	ldr	r0, [r7, #28]
    ecd4:	4619      	mov	r1, r3
    ecd6:	f012 fff9 	bl	21ccc <GL_Widget_SetFontScale>
			GL_Widget_SetFontStyle(hLabel, pxImage->xBW.xFont.eStyle);       // Font style
    ecda:	68bb      	ldr	r3, [r7, #8]
    ecdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ecde:	69f8      	ldr	r0, [r7, #28]
    ece0:	4619      	mov	r1, r3
    ece2:	f013 f805 	bl	21cf0 <GL_Widget_SetFontStyle>
		}
	}

	// Display picture
	// ***************
	hPicture = GL_Widget_SearchId(hWindow, PICTURE_ID); // Get picture from its id
    ece6:	6978      	ldr	r0, [r7, #20]
    ece8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    ecec:	f012 ff70 	bl	21bd0 <GL_Widget_SearchId>
    ecf0:	6238      	str	r0, [r7, #32]
	GL_Widget_SetSource(hPicture, pcPicture);
    ecf2:	6a38      	ldr	r0, [r7, #32]
    ecf4:	68f9      	ldr	r1, [r7, #12]
    ecf6:	f013 f8af 	bl	21e58 <GL_Widget_SetSource>
	GL_Widget_SetTransformation(hPicture, GL_TRANSFORMATION_STRETCH_ALL); // Stretched along all directions
    ecfa:	6a38      	ldr	r0, [r7, #32]
    ecfc:	2106      	movs	r1, #6
    ecfe:	f013 f8f3 	bl	21ee8 <GL_Widget_SetTransformation>
	GL_Widget_SetShrink(hPicture, GL_DIRECTION_ALL);    // Shrink beyond its size (Picture shrink automatically if picture goes over screen)
    ed02:	6a38      	ldr	r0, [r7, #32]
    ed04:	2103      	movs	r1, #3
    ed06:	f013 f883 	bl	21e10 <GL_Widget_SetShrink>

	if (IsColorDisplay())                               // Color display?
    ed0a:	f011 fc29 	bl	20560 <IsColorDisplay>
    ed0e:	4603      	mov	r3, r0
    ed10:	2b00      	cmp	r3, #0
    ed12:	d025      	beq.n	ed60 <GoalDspPicture+0x178>
	{                                                   // Yes, set expand, border and margin
		GL_Widget_SetExpand(hPicture, pxImage->xColor.eExpand);
    ed14:	68bb      	ldr	r3, [r7, #8]
    ed16:	695b      	ldr	r3, [r3, #20]
    ed18:	6a38      	ldr	r0, [r7, #32]
    ed1a:	4619      	mov	r1, r3
    ed1c:	f012 ffa0 	bl	21c60 <GL_Widget_SetExpand>
		GL_Widget_SetBorders(hPicture, pxImage->xColor.xBorder.usLeft, pxImage->xColor.xBorder.usTop, pxImage->xColor.xBorder.usRight, pxImage->xColor.xBorder.usBottom, GL_UNIT_PIXEL, pxImage->xColor.xBorder.ulColor);
    ed20:	68bb      	ldr	r3, [r7, #8]
    ed22:	6999      	ldr	r1, [r3, #24]
    ed24:	68bb      	ldr	r3, [r7, #8]
    ed26:	69da      	ldr	r2, [r3, #28]
    ed28:	68bb      	ldr	r3, [r7, #8]
    ed2a:	6a1b      	ldr	r3, [r3, #32]
    ed2c:	68b8      	ldr	r0, [r7, #8]
    ed2e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    ed30:	68b8      	ldr	r0, [r7, #8]
    ed32:	6a80      	ldr	r0, [r0, #40]	; 0x28
    ed34:	9400      	str	r4, [sp, #0]
    ed36:	2400      	movs	r4, #0
    ed38:	9401      	str	r4, [sp, #4]
    ed3a:	9002      	str	r0, [sp, #8]
    ed3c:	6a38      	ldr	r0, [r7, #32]
    ed3e:	f012 ff7d 	bl	21c3c <GL_Widget_SetBorders>
		GL_Widget_SetMargins(hPicture, pxImage->xColor.xMargin.usLeft, pxImage->xColor.xMargin.usTop, pxImage->xColor.xMargin.usRight, pxImage->xColor.xMargin.usBottom, GL_UNIT_PIXEL);
    ed42:	68bb      	ldr	r3, [r7, #8]
    ed44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    ed46:	68bb      	ldr	r3, [r7, #8]
    ed48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ed4a:	68bb      	ldr	r3, [r7, #8]
    ed4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ed4e:	68b8      	ldr	r0, [r7, #8]
    ed50:	6b80      	ldr	r0, [r0, #56]	; 0x38
    ed52:	9000      	str	r0, [sp, #0]
    ed54:	2000      	movs	r0, #0
    ed56:	9001      	str	r0, [sp, #4]
    ed58:	6a38      	ldr	r0, [r7, #32]
    ed5a:	f013 f823 	bl	21da4 <GL_Widget_SetMargins>
    ed5e:	e024      	b.n	edaa <GoalDspPicture+0x1c2>
	}
	else
	{                                                   // No, set expand, border and margin
		GL_Widget_SetExpand(hPicture, pxImage->xBW.eExpand);
    ed60:	68bb      	ldr	r3, [r7, #8]
    ed62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ed64:	6a38      	ldr	r0, [r7, #32]
    ed66:	4619      	mov	r1, r3
    ed68:	f012 ff7a 	bl	21c60 <GL_Widget_SetExpand>
		GL_Widget_SetBorders(hPicture, pxImage->xBW.xBorder.usLeft, pxImage->xBW.xBorder.usTop, pxImage->xBW.xBorder.usRight, pxImage->xBW.xBorder.usBottom, GL_UNIT_PIXEL, pxImage->xBW.xBorder.ulColor);
    ed6c:	68bb      	ldr	r3, [r7, #8]
    ed6e:	6d19      	ldr	r1, [r3, #80]	; 0x50
    ed70:	68bb      	ldr	r3, [r7, #8]
    ed72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    ed74:	68bb      	ldr	r3, [r7, #8]
    ed76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    ed78:	68b8      	ldr	r0, [r7, #8]
    ed7a:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
    ed7c:	68b8      	ldr	r0, [r7, #8]
    ed7e:	6e00      	ldr	r0, [r0, #96]	; 0x60
    ed80:	9400      	str	r4, [sp, #0]
    ed82:	2400      	movs	r4, #0
    ed84:	9401      	str	r4, [sp, #4]
    ed86:	9002      	str	r0, [sp, #8]
    ed88:	6a38      	ldr	r0, [r7, #32]
    ed8a:	f012 ff57 	bl	21c3c <GL_Widget_SetBorders>
		GL_Widget_SetMargins(hPicture, pxImage->xBW.xMargin.usLeft, pxImage->xBW.xMargin.usTop, pxImage->xBW.xMargin.usRight, pxImage->xBW.xMargin.usBottom, GL_UNIT_PIXEL);
    ed8e:	68bb      	ldr	r3, [r7, #8]
    ed90:	6e59      	ldr	r1, [r3, #100]	; 0x64
    ed92:	68bb      	ldr	r3, [r7, #8]
    ed94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    ed96:	68bb      	ldr	r3, [r7, #8]
    ed98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    ed9a:	68b8      	ldr	r0, [r7, #8]
    ed9c:	6f00      	ldr	r0, [r0, #112]	; 0x70
    ed9e:	9000      	str	r0, [sp, #0]
    eda0:	2000      	movs	r0, #0
    eda2:	9001      	str	r0, [sp, #4]
    eda4:	6a38      	ldr	r0, [r7, #32]
    eda6:	f012 fffd 	bl	21da4 <GL_Widget_SetMargins>
	}

	CHECK(ulTimeOut!=0, lblNoTimer);                    // No timer to set
    edaa:	687b      	ldr	r3, [r7, #4]
    edac:	2b00      	cmp	r3, #0
    edae:	d045      	beq.n	ee3c <GoalDspPicture+0x254>

	// Restart timer
	// *************
	if (ulTimeOut == GL_TIME_INFINITE)                  // Set timeout value
    edb0:	687b      	ldr	r3, [r7, #4]
    edb2:	f1b3 3fff 	cmp.w	r3, #4294967295
    edb6:	d10a      	bne.n	edce <GoalDspPicture+0x1e6>
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), 0x7FFFFFFF); // Bug 0xFFFFFFFF not supported
    edb8:	6978      	ldr	r0, [r7, #20]
    edba:	2100      	movs	r1, #0
    edbc:	f012 ff08 	bl	21bd0 <GL_Widget_SearchId>
    edc0:	4603      	mov	r3, r0
    edc2:	4618      	mov	r0, r3
    edc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    edc8:	f012 fea8 	bl	21b1c <GL_Timer_SetInterval>
    edcc:	e008      	b.n	ede0 <GoalDspPicture+0x1f8>
	else
		GL_Timer_SetInterval(GL_Widget_SearchId(hWindow, TIMER_ID), ulTimeOut);
    edce:	6978      	ldr	r0, [r7, #20]
    edd0:	2100      	movs	r1, #0
    edd2:	f012 fefd 	bl	21bd0 <GL_Widget_SearchId>
    edd6:	4603      	mov	r3, r0
    edd8:	4618      	mov	r0, r3
    edda:	6879      	ldr	r1, [r7, #4]
    eddc:	f012 fe9e 	bl	21b1c <GL_Timer_SetInterval>

	// Loop indefinitely until the result is set from the call back functions
	// **********************************************************************
	GL_Window_MainLoop(hWindow);                        // Wait until a result is set
    ede0:	6978      	ldr	r0, [r7, #20]
    ede2:	f013 f8ff 	bl	21fe4 <GL_Window_MainLoop>

	// Test the result set by the call back functions
	// **********************************************
	switch(GL_Window_GetResult(hWindow))                // Get the result
    ede6:	6978      	ldr	r0, [r7, #20]
    ede8:	f013 f8ea 	bl	21fc0 <GL_Window_GetResult>
    edec:	4603      	mov	r3, r0
    edee:	2b01      	cmp	r3, #1
    edf0:	d010      	beq.n	ee14 <GoalDspPicture+0x22c>
    edf2:	2b01      	cmp	r3, #1
    edf4:	d302      	bcc.n	edfc <GoalDspPicture+0x214>
    edf6:	2b04      	cmp	r3, #4
    edf8:	d018      	beq.n	ee2c <GoalDspPicture+0x244>
    edfa:	e01a      	b.n	ee32 <GoalDspPicture+0x24a>
	{
	case RES_VALID_STATUS:                              // Key valid result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    edfc:	6978      	ldr	r0, [r7, #20]
    edfe:	2100      	movs	r1, #0
    ee00:	f012 fee6 	bl	21bd0 <GL_Widget_SearchId>
    ee04:	4603      	mov	r3, r0
    ee06:	4618      	mov	r0, r3
    ee08:	f012 fe9a 	bl	21b40 <GL_Timer_Stop>
		iRet=GL_KEY_VALID;
    ee0c:	f64f 0350 	movw	r3, #63568	; 0xf850
    ee10:	61bb      	str	r3, [r7, #24]
		break;
    ee12:	e012      	b.n	ee3a <GoalDspPicture+0x252>
	case RES_CANCEL_STATUS:                             // Key cancel result
		GL_Timer_Stop(GL_Widget_SearchId(hWindow, TIMER_ID));
    ee14:	6978      	ldr	r0, [r7, #20]
    ee16:	2100      	movs	r1, #0
    ee18:	f012 feda 	bl	21bd0 <GL_Widget_SearchId>
    ee1c:	4603      	mov	r3, r0
    ee1e:	4618      	mov	r0, r3
    ee20:	f012 fe8e 	bl	21b40 <GL_Timer_Stop>
		iRet=GL_KEY_CANCEL;
    ee24:	f64f 0351 	movw	r3, #63569	; 0xf851
    ee28:	61bb      	str	r3, [r7, #24]
		break;
    ee2a:	e006      	b.n	ee3a <GoalDspPicture+0x252>
	case RES_TIMER_STATUS:                              // Timer result
		iRet=0;
    ee2c:	2300      	movs	r3, #0
    ee2e:	61bb      	str	r3, [r7, #24]
		break;
    ee30:	e003      	b.n	ee3a <GoalDspPicture+0x252>
	default:                                            // Unknown result
		iRet=-1;
    ee32:	f04f 33ff 	mov.w	r3, #4294967295
    ee36:	61bb      	str	r3, [r7, #24]
		break;
    ee38:	bf00      	nop
	}

	goto lblEnd;
    ee3a:	e01c      	b.n	ee76 <GoalDspPicture+0x28e>

	// Errors treatment
    // ****************
lblNoTimer:                                             // No timer used
	iRet=0;
    ee3c:	2300      	movs	r3, #0
    ee3e:	61bb      	str	r3, [r7, #24]
	if (bRefresh)
    ee40:	78fb      	ldrb	r3, [r7, #3]
    ee42:	2b00      	cmp	r3, #0
    ee44:	d016      	beq.n	ee74 <GoalDspPicture+0x28c>
	{
		iRet=GL_Window_Dispatch(hWindow, 0);            // Refresh the window
    ee46:	6978      	ldr	r0, [r7, #20]
    ee48:	2100      	movs	r1, #0
    ee4a:	f013 f8a7 	bl	21f9c <GL_Window_Dispatch>
    ee4e:	4603      	mov	r3, r0
    ee50:	61bb      	str	r3, [r7, #24]
		if (iRet == RES_VALID_STATUS)
    ee52:	69bb      	ldr	r3, [r7, #24]
    ee54:	2b00      	cmp	r3, #0
    ee56:	d102      	bne.n	ee5e <GoalDspPicture+0x276>
			iRet=GL_KEY_VALID;
    ee58:	f64f 0350 	movw	r3, #63568	; 0xf850
    ee5c:	61bb      	str	r3, [r7, #24]
		if (iRet == RES_CANCEL_STATUS)
    ee5e:	69bb      	ldr	r3, [r7, #24]
    ee60:	2b01      	cmp	r3, #1
    ee62:	d107      	bne.n	ee74 <GoalDspPicture+0x28c>
			iRet=GL_KEY_CANCEL;
    ee64:	f64f 0351 	movw	r3, #63569	; 0xf851
    ee68:	61bb      	str	r3, [r7, #24]
	}
	goto lblEnd;
    ee6a:	e003      	b.n	ee74 <GoalDspPicture+0x28c>
lblKO:                                                  // Display picture failed
	iRet=-1;
    ee6c:	f04f 33ff 	mov.w	r3, #4294967295
    ee70:	61bb      	str	r3, [r7, #24]
	goto lblEnd;
    ee72:	e000      	b.n	ee76 <GoalDspPicture+0x28e>
		if (iRet == RES_VALID_STATUS)
			iRet=GL_KEY_VALID;
		if (iRet == RES_CANCEL_STATUS)
			iRet=GL_KEY_CANCEL;
	}
	goto lblEnd;
    ee74:	bf00      	nop
lblKO:                                                  // Display picture failed
	iRet=-1;
	goto lblEnd;
lblEnd:
	return iRet;
    ee76:	69bb      	ldr	r3, [r7, #24]
}
    ee78:	4618      	mov	r0, r3
    ee7a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    ee7e:	f2c0 0302 	movt	r3, #2
    ee82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ee84:	681b      	ldr	r3, [r3, #0]
    ee86:	429a      	cmp	r2, r3
    ee88:	d001      	beq.n	ee8e <GoalDspPicture+0x2a6>
    ee8a:	f7fa f88b 	bl	8fa4 <__stack_chk_fail>
    ee8e:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    ee92:	46bd      	mov	sp, r7
    ee94:	bd90      	pop	{r4, r7, pc}
    ee96:	bf00      	nop

0000ee98 <GoalDestroyPicture>:
//   phWindow (I-) : Pointer on window context handle.
// This function has no return value.
//****************************************************************************

void GoalDestroyPicture(T_GL_HWIDGET *phWindow)
{
    ee98:	b580      	push	{r7, lr}
    ee9a:	b084      	sub	sp, #16
    ee9c:	af00      	add	r7, sp, #0
    ee9e:	6078      	str	r0, [r7, #4]
    eea0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    eea4:	f2c0 0302 	movt	r3, #2
    eea8:	681b      	ldr	r3, [r3, #0]
    eeaa:	60fb      	str	r3, [r7, #12]
    // ***************
		// Empty

	// Destroy screen
	// **************
	GL_Widget_Destroy(*phWindow); // Destroy window with all widgets attached
    eeac:	687b      	ldr	r3, [r7, #4]
    eeae:	681b      	ldr	r3, [r3, #0]
    eeb0:	4618      	mov	r0, r3
    eeb2:	f012 fe57 	bl	21b64 <GL_Widget_Destroy>
	*phWindow=NULL;
    eeb6:	687b      	ldr	r3, [r7, #4]
    eeb8:	2200      	movs	r2, #0
    eeba:	601a      	str	r2, [r3, #0]
}
    eebc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    eec0:	f2c0 0302 	movt	r3, #2
    eec4:	68fa      	ldr	r2, [r7, #12]
    eec6:	681b      	ldr	r3, [r3, #0]
    eec8:	429a      	cmp	r2, r3
    eeca:	d001      	beq.n	eed0 <GoalDestroyPicture+0x38>
    eecc:	f7fa f86a 	bl	8fa4 <__stack_chk_fail>
    eed0:	f107 0710 	add.w	r7, r7, #16
    eed4:	46bd      	mov	sp, r7
    eed6:	bd80      	pop	{r7, pc}

0000eed8 <GoalCreateDocument>:
//   !NULL : Pointer to the handle of the document.
//   NULL : Document failed
//****************************************************************************

T_GL_HWIDGET GoalCreateDocument (T_GL_HGRAPHIC_LIB hGraphicLib, T_GL_ENCODING_CHARSET eCharSet)
{
    eed8:	b580      	push	{r7, lr}
    eeda:	b086      	sub	sp, #24
    eedc:	af00      	add	r7, sp, #0
    eede:	6078      	str	r0, [r7, #4]
    eee0:	6039      	str	r1, [r7, #0]
    eee2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    eee6:	f2c0 0302 	movt	r3, #2
    eeea:	681b      	ldr	r3, [r3, #0]
    eeec:	617b      	str	r3, [r7, #20]
    // ***************
	T_GL_HWIDGET hDocument, hLayout;

	// Build document context
	// **********************
	GL_GraphicLib_SetCharset(hGraphicLib, eCharSet);  // Changes the encoding charset of the graphic library
    eeee:	6878      	ldr	r0, [r7, #4]
    eef0:	6839      	ldr	r1, [r7, #0]
    eef2:	f012 fd4d 	bl	21990 <GL_GraphicLib_SetCharset>

	hDocument = GL_Document_Create(hGraphicLib);      // Create a document to print
    eef6:	6878      	ldr	r0, [r7, #4]
    eef8:	f012 fc20 	bl	2173c <GL_Document_Create>
    eefc:	60f8      	str	r0, [r7, #12]
	CHECK(hDocument!=NULL, lblEnd);
    eefe:	68fb      	ldr	r3, [r7, #12]
    ef00:	2b00      	cmp	r3, #0
    ef02:	d015      	beq.n	ef30 <GoalCreateDocument+0x58>

	hLayout = GL_Layout_Create(hDocument);            // Create a layout on this document
    ef04:	68f8      	ldr	r0, [r7, #12]
    ef06:	f012 fd79 	bl	219fc <GL_Layout_Create>
    ef0a:	6138      	str	r0, [r7, #16]
	CHECK(hLayout!=NULL, lblKO);
    ef0c:	693b      	ldr	r3, [r7, #16]
    ef0e:	2b00      	cmp	r3, #0
    ef10:	d005      	beq.n	ef1e <GoalCreateDocument+0x46>
	GL_Widget_SetId(hLayout, LAYOUT3_ID);             // Layout Identifier LAYOUT3_ID
    ef12:	6938      	ldr	r0, [r7, #16]
    ef14:	f44f 6110 	mov.w	r1, #2304	; 0x900
    ef18:	f012 ff20 	bl	21d5c <GL_Widget_SetId>

	goto lblEnd;
    ef1c:	e008      	b.n	ef30 <GoalCreateDocument+0x58>

	// Errors treatment
    // ****************
lblKO:                                                // Document creation failed
	if (hDocument)
    ef1e:	68fb      	ldr	r3, [r7, #12]
    ef20:	2b00      	cmp	r3, #0
    ef22:	d004      	beq.n	ef2e <GoalCreateDocument+0x56>
	{
		GL_Widget_Destroy(hDocument);                 // Destroy document and all widgets
    ef24:	68f8      	ldr	r0, [r7, #12]
    ef26:	f012 fe1d 	bl	21b64 <GL_Widget_Destroy>
		hDocument=NULL;
    ef2a:	2300      	movs	r3, #0
    ef2c:	60fb      	str	r3, [r7, #12]
	}
	goto lblEnd;
    ef2e:	bf00      	nop
lblEnd:
	return hDocument;
    ef30:	68fb      	ldr	r3, [r7, #12]
}
    ef32:	4618      	mov	r0, r3
    ef34:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    ef38:	f2c0 0302 	movt	r3, #2
    ef3c:	697a      	ldr	r2, [r7, #20]
    ef3e:	681b      	ldr	r3, [r3, #0]
    ef40:	429a      	cmp	r2, r3
    ef42:	d001      	beq.n	ef48 <GoalCreateDocument+0x70>
    ef44:	f7fa f82e 	bl	8fa4 <__stack_chk_fail>
    ef48:	f107 0718 	add.w	r7, r7, #24
    ef4c:	46bd      	mov	sp, r7
    ef4e:	bd80      	pop	{r7, pc}

0000ef50 <GoalPrnLine>:
//   >=0 : Build line done.
//   <0 : Build line failed.
//****************************************************************************

int GoalPrnLine(T_GL_HWIDGET hDocument, ushort usLine, char *pcText, const ST_PRN_LINE* pxLine)
{
    ef50:	b580      	push	{r7, lr}
    ef52:	b08c      	sub	sp, #48	; 0x30
    ef54:	af04      	add	r7, sp, #16
    ef56:	60f8      	str	r0, [r7, #12]
    ef58:	607a      	str	r2, [r7, #4]
    ef5a:	603b      	str	r3, [r7, #0]
    ef5c:	460b      	mov	r3, r1
    ef5e:	817b      	strh	r3, [r7, #10]
    ef60:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    ef64:	f2c0 0302 	movt	r3, #2
    ef68:	681b      	ldr	r3, [r3, #0]
    ef6a:	61fb      	str	r3, [r7, #28]
	// Local variables
    // ***************
	T_GL_HWIDGET hLayout, hPrint;
	int iRet=0;
    ef6c:	2300      	movs	r3, #0
    ef6e:	613b      	str	r3, [r7, #16]

	// Build line on document
	// **********************
	CHECK((pcText!=NULL) && (pxLine!=NULL), lblKO);
    ef70:	687b      	ldr	r3, [r7, #4]
    ef72:	2b00      	cmp	r3, #0
    ef74:	f000 80c7 	beq.w	f106 <GoalPrnLine+0x1b6>
    ef78:	683b      	ldr	r3, [r7, #0]
    ef7a:	2b00      	cmp	r3, #0
    ef7c:	f000 80c3 	beq.w	f106 <GoalPrnLine+0x1b6>
	CHECK(strlen(pcText)!=0, lblEnd);
    ef80:	687b      	ldr	r3, [r7, #4]
    ef82:	781b      	ldrb	r3, [r3, #0]
    ef84:	2b00      	cmp	r3, #0
    ef86:	f000 80c2 	beq.w	f10e <GoalPrnLine+0x1be>

	hLayout = GL_Widget_SearchId(hDocument, LAYOUT3_ID);      // Get layout from its id
    ef8a:	68f8      	ldr	r0, [r7, #12]
    ef8c:	f44f 6110 	mov.w	r1, #2304	; 0x900
    ef90:	f012 fe1e 	bl	21bd0 <GL_Widget_SearchId>
    ef94:	6178      	str	r0, [r7, #20]
	CHECK(hLayout!=NULL, lblKO);
    ef96:	697b      	ldr	r3, [r7, #20]
    ef98:	2b00      	cmp	r3, #0
    ef9a:	f000 80b4 	beq.w	f106 <GoalPrnLine+0x1b6>

	hPrint = GL_Print_Create(hLayout);                        // Create a print label designed to be printed on this layout
    ef9e:	6978      	ldr	r0, [r7, #20]
    efa0:	f012 fd98 	bl	21ad4 <GL_Print_Create>
    efa4:	61b8      	str	r0, [r7, #24]
	CHECK(hPrint!=NULL, lblKO);
    efa6:	69bb      	ldr	r3, [r7, #24]
    efa8:	2b00      	cmp	r3, #0
    efaa:	f000 80ac 	beq.w	f106 <GoalPrnLine+0x1b6>
	GL_Widget_SetItem(hPrint, 0, usLine);                     // Print label location on this layout
    efae:	897b      	ldrh	r3, [r7, #10]
    efb0:	69b8      	ldr	r0, [r7, #24]
    efb2:	2100      	movs	r1, #0
    efb4:	461a      	mov	r2, r3
    efb6:	f012 fee3 	bl	21d80 <GL_Widget_SetItem>
	GL_Widget_SetText(hPrint, "%s", pcText);                  // Print text (Add %s to allow '%' to be printed)
    efba:	69b8      	ldr	r0, [r7, #24]
    efbc:	f243 1194 	movw	r1, #12692	; 0x3194
    efc0:	f2c0 0102 	movt	r1, #2
    efc4:	687a      	ldr	r2, [r7, #4]
    efc6:	f012 ff59 	bl	21e7c <GL_Widget_SetText>
	GL_Widget_SetWrap(hPrint, true);                          // Set the wrap of text (Allows text to automatically return to the next line if it does not fit in width)
    efca:	69b8      	ldr	r0, [r7, #24]
    efcc:	2101      	movs	r1, #1
    efce:	f012 ffaf 	bl	21f30 <GL_Widget_SetWrap>
	GL_Widget_SetShrink(hPrint, GL_DIRECTION_WIDTH);          // Shrink beyond its size (No width scrolling cell if text goes over printer size)
    efd2:	69b8      	ldr	r0, [r7, #24]
    efd4:	2101      	movs	r1, #1
    efd6:	f012 ff1b 	bl	21e10 <GL_Widget_SetShrink>

	GL_Widget_SetTextAlign(hPrint, pxLine->eTextAlign);       // Text alignment
    efda:	683b      	ldr	r3, [r7, #0]
    efdc:	681b      	ldr	r3, [r3, #0]
    efde:	69b8      	ldr	r0, [r7, #24]
    efe0:	4619      	mov	r1, r3
    efe2:	f012 ff5d 	bl	21ea0 <GL_Widget_SetTextAlign>
	GL_Widget_SetBackAlign(hPrint, pxLine->eBackAlign);       // Background alignment
    efe6:	683b      	ldr	r3, [r7, #0]
    efe8:	685b      	ldr	r3, [r3, #4]
    efea:	69b8      	ldr	r0, [r7, #24]
    efec:	4619      	mov	r1, r3
    efee:	f012 fe01 	bl	21bf4 <GL_Widget_SetBackAlign>
	if (pxLine->usSizeWidth < 99)                             // Background size
    eff2:	683b      	ldr	r3, [r7, #0]
    eff4:	68db      	ldr	r3, [r3, #12]
    eff6:	2b62      	cmp	r3, #98	; 0x62
    eff8:	d808      	bhi.n	f00c <GoalPrnLine+0xbc>
		GL_Widget_SetMinSize(hPrint, pxLine->usSizeWidth, 0, GL_UNIT_PERCENT); // The size
    effa:	683b      	ldr	r3, [r7, #0]
    effc:	68db      	ldr	r3, [r3, #12]
    effe:	69b8      	ldr	r0, [r7, #24]
    f000:	4619      	mov	r1, r3
    f002:	2200      	movs	r2, #0
    f004:	2301      	movs	r3, #1
    f006:	f012 fedf 	bl	21dc8 <GL_Widget_SetMinSize>
    f00a:	e003      	b.n	f014 <GoalPrnLine+0xc4>
	else
		GL_Widget_SetExpand(hPrint, GL_DIRECTION_WIDTH);                       // Full size
    f00c:	69b8      	ldr	r0, [r7, #24]
    f00e:	2101      	movs	r1, #1
    f010:	f012 fe26 	bl	21c60 <GL_Widget_SetExpand>
	if (!pxLine->bReverse)                                    // Reverse mode?
    f014:	683b      	ldr	r3, [r7, #0]
    f016:	7a1b      	ldrb	r3, [r3, #8]
    f018:	f083 0301 	eor.w	r3, r3, #1
    f01c:	b2db      	uxtb	r3, r3
    f01e:	2b00      	cmp	r3, #0
    f020:	d00a      	beq.n	f038 <GoalPrnLine+0xe8>
	{                                                         // No
		GL_Widget_SetForeColor(hPrint, GL_COLOR_BLACK);       // Force pen color to black and brush color to white
    f022:	69b8      	ldr	r0, [r7, #24]
    f024:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    f028:	f012 fe74 	bl	21d14 <GL_Widget_SetForeColor>
		GL_Widget_SetBackColor(hPrint, GL_COLOR_WHITE);
    f02c:	69b8      	ldr	r0, [r7, #24]
    f02e:	f04f 31ff 	mov.w	r1, #4294967295
    f032:	f012 fdf1 	bl	21c18 <GL_Widget_SetBackColor>
    f036:	e009      	b.n	f04c <GoalPrnLine+0xfc>
	}
	else
	{                                                         // Yes
		GL_Widget_SetForeColor(hPrint, GL_COLOR_WHITE);       // Force pen color to white and brush color to black
    f038:	69b8      	ldr	r0, [r7, #24]
    f03a:	f04f 31ff 	mov.w	r1, #4294967295
    f03e:	f012 fe69 	bl	21d14 <GL_Widget_SetForeColor>
		GL_Widget_SetBackColor(hPrint, GL_COLOR_BLACK);
    f042:	69b8      	ldr	r0, [r7, #24]
    f044:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    f048:	f012 fde6 	bl	21c18 <GL_Widget_SetBackColor>
	}
	                                                          // Padding, Border and Margin
	GL_Widget_SetTextPaddings(hPrint, pxLine->xPadding.usLeft, pxLine->xPadding.usTop, pxLine->xPadding.usRight, pxLine->xPadding.usBottom, GL_UNIT_PERCENT);
    f04c:	683b      	ldr	r3, [r7, #0]
    f04e:	6919      	ldr	r1, [r3, #16]
    f050:	683b      	ldr	r3, [r7, #0]
    f052:	695a      	ldr	r2, [r3, #20]
    f054:	683b      	ldr	r3, [r7, #0]
    f056:	699b      	ldr	r3, [r3, #24]
    f058:	6838      	ldr	r0, [r7, #0]
    f05a:	69c0      	ldr	r0, [r0, #28]
    f05c:	9000      	str	r0, [sp, #0]
    f05e:	2001      	movs	r0, #1
    f060:	9001      	str	r0, [sp, #4]
    f062:	69b8      	ldr	r0, [r7, #24]
    f064:	f012 ff2e 	bl	21ec4 <GL_Widget_SetTextPaddings>
	if (pxLine->xBorder.ulColor != GL_COLOR_BLACK)            // Force border to black or white
    f068:	683b      	ldr	r3, [r7, #0]
    f06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f06c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    f070:	d011      	beq.n	f096 <GoalPrnLine+0x146>
		GL_Widget_SetBorders(hPrint, pxLine->xBorder.usLeft, pxLine->xBorder.usTop, pxLine->xBorder.usRight, pxLine->xBorder.usBottom, GL_UNIT_PIXEL, GL_COLOR_WHITE);
    f072:	683b      	ldr	r3, [r7, #0]
    f074:	6a19      	ldr	r1, [r3, #32]
    f076:	683b      	ldr	r3, [r7, #0]
    f078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f07a:	683b      	ldr	r3, [r7, #0]
    f07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f07e:	6838      	ldr	r0, [r7, #0]
    f080:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f082:	9000      	str	r0, [sp, #0]
    f084:	2000      	movs	r0, #0
    f086:	9001      	str	r0, [sp, #4]
    f088:	f04f 30ff 	mov.w	r0, #4294967295
    f08c:	9002      	str	r0, [sp, #8]
    f08e:	69b8      	ldr	r0, [r7, #24]
    f090:	f012 fdd4 	bl	21c3c <GL_Widget_SetBorders>
    f094:	e010      	b.n	f0b8 <GoalPrnLine+0x168>
	else
		GL_Widget_SetBorders(hPrint, pxLine->xBorder.usLeft, pxLine->xBorder.usTop, pxLine->xBorder.usRight, pxLine->xBorder.usBottom, GL_UNIT_PIXEL, GL_COLOR_BLACK);
    f096:	683b      	ldr	r3, [r7, #0]
    f098:	6a19      	ldr	r1, [r3, #32]
    f09a:	683b      	ldr	r3, [r7, #0]
    f09c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f09e:	683b      	ldr	r3, [r7, #0]
    f0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f0a2:	6838      	ldr	r0, [r7, #0]
    f0a4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    f0a6:	9000      	str	r0, [sp, #0]
    f0a8:	2000      	movs	r0, #0
    f0aa:	9001      	str	r0, [sp, #4]
    f0ac:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
    f0b0:	9002      	str	r0, [sp, #8]
    f0b2:	69b8      	ldr	r0, [r7, #24]
    f0b4:	f012 fdc2 	bl	21c3c <GL_Widget_SetBorders>
	GL_Widget_SetMargins(hPrint, pxLine->xMargin.usLeft, pxLine->xMargin.usTop, pxLine->xMargin.usRight, pxLine->xMargin.usBottom, GL_UNIT_PIXEL);
    f0b8:	683b      	ldr	r3, [r7, #0]
    f0ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
    f0bc:	683b      	ldr	r3, [r7, #0]
    f0be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f0c0:	683b      	ldr	r3, [r7, #0]
    f0c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    f0c4:	6838      	ldr	r0, [r7, #0]
    f0c6:	6c00      	ldr	r0, [r0, #64]	; 0x40
    f0c8:	9000      	str	r0, [sp, #0]
    f0ca:	2000      	movs	r0, #0
    f0cc:	9001      	str	r0, [sp, #4]
    f0ce:	69b8      	ldr	r0, [r7, #24]
    f0d0:	f012 fe68 	bl	21da4 <GL_Widget_SetMargins>
	if (pxLine->xFont.pcName != NULL)
    f0d4:	683b      	ldr	r3, [r7, #0]
    f0d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f0d8:	2b00      	cmp	r3, #0
    f0da:	d005      	beq.n	f0e8 <GoalPrnLine+0x198>
		GL_Widget_SetFontName(hPrint, pxLine->xFont.pcName);  // Font name
    f0dc:	683b      	ldr	r3, [r7, #0]
    f0de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    f0e0:	69b8      	ldr	r0, [r7, #24]
    f0e2:	4619      	mov	r1, r3
    f0e4:	f012 fde0 	bl	21ca8 <GL_Widget_SetFontName>
	GL_Widget_SetFontScale(hPrint, pxLine->xFont.eScale);     // Font scale
    f0e8:	683b      	ldr	r3, [r7, #0]
    f0ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f0ec:	69b8      	ldr	r0, [r7, #24]
    f0ee:	4619      	mov	r1, r3
    f0f0:	f012 fdec 	bl	21ccc <GL_Widget_SetFontScale>
	GL_Widget_SetFontStyle(hPrint, pxLine->xFont.eStyle);     // Font style
    f0f4:	683b      	ldr	r3, [r7, #0]
    f0f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    f0f8:	69b8      	ldr	r0, [r7, #24]
    f0fa:	4619      	mov	r1, r3
    f0fc:	f012 fdf8 	bl	21cf0 <GL_Widget_SetFontStyle>

	iRet=1;
    f100:	2301      	movs	r3, #1
    f102:	613b      	str	r3, [r7, #16]
	goto lblEnd;
    f104:	e003      	b.n	f10e <GoalPrnLine+0x1be>

	// Errors treatment
    // ****************
lblKO:                                                        // Build line on document failed
	iRet=-1;
    f106:	f04f 33ff 	mov.w	r3, #4294967295
    f10a:	613b      	str	r3, [r7, #16]
	goto lblEnd;
    f10c:	bf00      	nop
lblEnd:
	return iRet;
    f10e:	693b      	ldr	r3, [r7, #16]
}
    f110:	4618      	mov	r0, r3
    f112:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f116:	f2c0 0302 	movt	r3, #2
    f11a:	69fa      	ldr	r2, [r7, #28]
    f11c:	681b      	ldr	r3, [r3, #0]
    f11e:	429a      	cmp	r2, r3
    f120:	d001      	beq.n	f126 <GoalPrnLine+0x1d6>
    f122:	f7f9 ff3f 	bl	8fa4 <__stack_chk_fail>
    f126:	f107 0720 	add.w	r7, r7, #32
    f12a:	46bd      	mov	sp, r7
    f12c:	bd80      	pop	{r7, pc}
    f12e:	bf00      	nop

0000f130 <GoalPrnMultiLine>:
//    >=0 : Build buffer done.
//    <0 : Build buffer failed.
//****************************************************************************

int GoalPrnMultiLine(T_GL_HWIDGET hDocument, ushort usLine, ushort usSize, char *pcData , ushort usLen, const ST_PRN_LINE* pxLine)
{
    f130:	b590      	push	{r4, r7, lr}
    f132:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
    f136:	af00      	add	r7, sp, #0
    f138:	f107 0414 	add.w	r4, r7, #20
    f13c:	6020      	str	r0, [r4, #0]
    f13e:	460c      	mov	r4, r1
    f140:	4610      	mov	r0, r2
    f142:	f107 020c 	add.w	r2, r7, #12
    f146:	6013      	str	r3, [r2, #0]
    f148:	f107 020a 	add.w	r2, r7, #10
    f14c:	1d3b      	adds	r3, r7, #4
    f14e:	f107 0112 	add.w	r1, r7, #18
    f152:	800c      	strh	r4, [r1, #0]
    f154:	f107 0110 	add.w	r1, r7, #16
    f158:	8008      	strh	r0, [r1, #0]
    f15a:	f8b7 1438 	ldrh.w	r1, [r7, #1080]	; 0x438
    f15e:	8011      	strh	r1, [r2, #0]
    f160:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
    f164:	601a      	str	r2, [r3, #0]
    f166:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f16a:	f2c0 0302 	movt	r3, #2
    f16e:	681b      	ldr	r3, [r3, #0]
    f170:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
	// Local variables
    // ***************
	ushort usIdx=0;
    f174:	f107 0318 	add.w	r3, r7, #24
    f178:	2200      	movs	r2, #0
    f17a:	801a      	strh	r2, [r3, #0]
	ushort usCount=0;
    f17c:	f107 031a 	add.w	r3, r7, #26
    f180:	2200      	movs	r2, #0
    f182:	801a      	strh	r2, [r3, #0]
	char tcBuffer[1024+1];
	int iRet=-1;
    f184:	f107 031c 	add.w	r3, r7, #28
    f188:	f04f 32ff 	mov.w	r2, #4294967295
    f18c:	601a      	str	r2, [r3, #0]

	// Build document in progress
	// **************************
	CHECK ((pcData!=NULL) && (usLen>=0), lblKO)
    f18e:	f107 030c 	add.w	r3, r7, #12
    f192:	681b      	ldr	r3, [r3, #0]
    f194:	2b00      	cmp	r3, #0
    f196:	d07d      	beq.n	f294 <GoalPrnMultiLine+0x164>

	memset(tcBuffer, 0, sizeof(tcBuffer));
    f198:	f107 0320 	add.w	r3, r7, #32
    f19c:	4618      	mov	r0, r3
    f19e:	2100      	movs	r1, #0
    f1a0:	f240 4201 	movw	r2, #1025	; 0x401
    f1a4:	f7f9 ed0a 	blx	8bbc <_init+0x5c>
	while(1)
	{
		if (usLen > 0)                 // Check if it is the end of data
    f1a8:	f107 030a 	add.w	r3, r7, #10
    f1ac:	881b      	ldrh	r3, [r3, #0]
    f1ae:	2b00      	cmp	r3, #0
    f1b0:	d04c      	beq.n	f24c <GoalPrnMultiLine+0x11c>
		{                              // No, it's a line with '\n' detected
			if (usCount < usSize)      // Save character into buffer
    f1b2:	f107 021a 	add.w	r2, r7, #26
    f1b6:	f107 0310 	add.w	r3, r7, #16
    f1ba:	8812      	ldrh	r2, [r2, #0]
    f1bc:	881b      	ldrh	r3, [r3, #0]
    f1be:	429a      	cmp	r2, r3
    f1c0:	d231      	bcs.n	f226 <GoalPrnMultiLine+0xf6>
			{
				if (*pcData == '\n')
    f1c2:	f107 030c 	add.w	r3, r7, #12
    f1c6:	681b      	ldr	r3, [r3, #0]
    f1c8:	781b      	ldrb	r3, [r3, #0]
    f1ca:	2b0a      	cmp	r3, #10
    f1cc:	d104      	bne.n	f1d8 <GoalPrnMultiLine+0xa8>
					usCount=0;
    f1ce:	f107 031a 	add.w	r3, r7, #26
    f1d2:	2200      	movs	r2, #0
    f1d4:	801a      	strh	r2, [r3, #0]
    f1d6:	e006      	b.n	f1e6 <GoalPrnMultiLine+0xb6>
				else
					usCount++;
    f1d8:	f107 031a 	add.w	r3, r7, #26
    f1dc:	f107 021a 	add.w	r2, r7, #26
    f1e0:	8812      	ldrh	r2, [r2, #0]
    f1e2:	3201      	adds	r2, #1
    f1e4:	801a      	strh	r2, [r3, #0]
				tcBuffer[usIdx++] = *pcData++;
    f1e6:	f107 0318 	add.w	r3, r7, #24
    f1ea:	881b      	ldrh	r3, [r3, #0]
    f1ec:	f107 020c 	add.w	r2, r7, #12
    f1f0:	6812      	ldr	r2, [r2, #0]
    f1f2:	7811      	ldrb	r1, [r2, #0]
    f1f4:	f107 0220 	add.w	r2, r7, #32
    f1f8:	54d1      	strb	r1, [r2, r3]
    f1fa:	f107 0318 	add.w	r3, r7, #24
    f1fe:	f107 0218 	add.w	r2, r7, #24
    f202:	8812      	ldrh	r2, [r2, #0]
    f204:	3201      	adds	r2, #1
    f206:	801a      	strh	r2, [r3, #0]
    f208:	f107 030c 	add.w	r3, r7, #12
    f20c:	f107 020c 	add.w	r2, r7, #12
    f210:	6812      	ldr	r2, [r2, #0]
    f212:	3201      	adds	r2, #1
    f214:	601a      	str	r2, [r3, #0]
				usLen--;
    f216:	f107 030a 	add.w	r3, r7, #10
    f21a:	f107 020a 	add.w	r2, r7, #10
    f21e:	8812      	ldrh	r2, [r2, #0]
    f220:	3a01      	subs	r2, #1
    f222:	801a      	strh	r2, [r3, #0]
		{                              // Yes, it's the end of data
			if (usLen != 0)
				tcBuffer[usIdx++] = '\n';
			break;                     // Exit from the loop
		}
	}
    f224:	e7c0      	b.n	f1a8 <GoalPrnMultiLine+0x78>
				tcBuffer[usIdx++] = *pcData++;
				usLen--;
			}
			else                       // Bloc detected
			{
				tcBuffer[usIdx++] = '\n';
    f226:	f107 0318 	add.w	r3, r7, #24
    f22a:	881b      	ldrh	r3, [r3, #0]
    f22c:	f107 0220 	add.w	r2, r7, #32
    f230:	210a      	movs	r1, #10
    f232:	54d1      	strb	r1, [r2, r3]
    f234:	f107 0318 	add.w	r3, r7, #24
    f238:	f107 0218 	add.w	r2, r7, #24
    f23c:	8812      	ldrh	r2, [r2, #0]
    f23e:	3201      	adds	r2, #1
    f240:	801a      	strh	r2, [r3, #0]
				usCount=0;
    f242:	f107 031a 	add.w	r3, r7, #26
    f246:	2200      	movs	r2, #0
    f248:	801a      	strh	r2, [r3, #0]
		{                              // Yes, it's the end of data
			if (usLen != 0)
				tcBuffer[usIdx++] = '\n';
			break;                     // Exit from the loop
		}
	}
    f24a:	e7ad      	b.n	f1a8 <GoalPrnMultiLine+0x78>
				usCount=0;
			}
		}
		else
		{                              // Yes, it's the end of data
			if (usLen != 0)
    f24c:	f107 030a 	add.w	r3, r7, #10
    f250:	881b      	ldrh	r3, [r3, #0]
    f252:	2b00      	cmp	r3, #0
    f254:	d00d      	beq.n	f272 <GoalPrnMultiLine+0x142>
				tcBuffer[usIdx++] = '\n';
    f256:	f107 0318 	add.w	r3, r7, #24
    f25a:	881b      	ldrh	r3, [r3, #0]
    f25c:	f107 0220 	add.w	r2, r7, #32
    f260:	210a      	movs	r1, #10
    f262:	54d1      	strb	r1, [r2, r3]
    f264:	f107 0318 	add.w	r3, r7, #24
    f268:	f107 0218 	add.w	r2, r7, #24
    f26c:	8812      	ldrh	r2, [r2, #0]
    f26e:	3201      	adds	r2, #1
    f270:	801a      	strh	r2, [r3, #0]
			break;                     // Exit from the loop
    f272:	bf00      	nop
		}
	}
                                       // Send line to the document
	iRet = GoalPrnLine(hDocument, usLine, tcBuffer, pxLine);
    f274:	f107 041c 	add.w	r4, r7, #28
    f278:	f107 0014 	add.w	r0, r7, #20
    f27c:	f107 0312 	add.w	r3, r7, #18
    f280:	8819      	ldrh	r1, [r3, #0]
    f282:	f107 0220 	add.w	r2, r7, #32
    f286:	1d3b      	adds	r3, r7, #4
    f288:	6800      	ldr	r0, [r0, #0]
    f28a:	681b      	ldr	r3, [r3, #0]
    f28c:	f7ff fe60 	bl	ef50 <GoalPrnLine>
    f290:	6020      	str	r0, [r4, #0]

	goto lblEnd;
    f292:	e005      	b.n	f2a0 <GoalPrnMultiLine+0x170>

	// Errors treatment
    // ****************
lblKO:                                 // Build buffer failed.
	iRet=-1;
    f294:	f107 031c 	add.w	r3, r7, #28
    f298:	f04f 32ff 	mov.w	r2, #4294967295
    f29c:	601a      	str	r2, [r3, #0]
	goto lblEnd;
    f29e:	bf00      	nop
lblEnd:
	return iRet;
    f2a0:	f107 031c 	add.w	r3, r7, #28
    f2a4:	681b      	ldr	r3, [r3, #0]
}
    f2a6:	4618      	mov	r0, r3
    f2a8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f2ac:	f2c0 0302 	movt	r3, #2
    f2b0:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
    f2b4:	681b      	ldr	r3, [r3, #0]
    f2b6:	429a      	cmp	r2, r3
    f2b8:	d001      	beq.n	f2be <GoalPrnMultiLine+0x18e>
    f2ba:	f7f9 fe73 	bl	8fa4 <__stack_chk_fail>
    f2be:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    f2c2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    f2c6:	46bd      	mov	sp, r7
    f2c8:	bd90      	pop	{r4, r7, pc}
    f2ca:	bf00      	nop

0000f2cc <GoalPrnPicture>:
//   >=0 : Build picture done.
//   <0 : Build picture failed.
//****************************************************************************

int GoalPrnPicture(T_GL_HWIDGET hDocument, ushort usLine, const char* pcPicture, const ST_BORDER* pxBorder)
{
    f2cc:	b590      	push	{r4, r7, lr}
    f2ce:	b08d      	sub	sp, #52	; 0x34
    f2d0:	af04      	add	r7, sp, #16
    f2d2:	60f8      	str	r0, [r7, #12]
    f2d4:	607a      	str	r2, [r7, #4]
    f2d6:	603b      	str	r3, [r7, #0]
    f2d8:	460b      	mov	r3, r1
    f2da:	817b      	strh	r3, [r7, #10]
    f2dc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f2e0:	f2c0 0302 	movt	r3, #2
    f2e4:	681b      	ldr	r3, [r3, #0]
    f2e6:	61fb      	str	r3, [r7, #28]
	T_GL_HWIDGET hLayout, hPrint;
	int iRet;

	// Build picture on document
	// *************************
	hLayout = GL_Widget_SearchId(hDocument, LAYOUT3_ID);    // Get layout from its id
    f2e8:	68f8      	ldr	r0, [r7, #12]
    f2ea:	f44f 6110 	mov.w	r1, #2304	; 0x900
    f2ee:	f012 fc6f 	bl	21bd0 <GL_Widget_SearchId>
    f2f2:	6178      	str	r0, [r7, #20]
	CHECK(hLayout!=NULL, lblKO);
    f2f4:	697b      	ldr	r3, [r7, #20]
    f2f6:	2b00      	cmp	r3, #0
    f2f8:	d028      	beq.n	f34c <GoalPrnPicture+0x80>

	hPrint = GL_Picture_Create(hLayout);                    // Create a picture designed to be printed on this layout
    f2fa:	6978      	ldr	r0, [r7, #20]
    f2fc:	f012 fbd8 	bl	21ab0 <GL_Picture_Create>
    f300:	61b8      	str	r0, [r7, #24]
	CHECK(hPrint!=NULL, lblKO);
    f302:	69bb      	ldr	r3, [r7, #24]
    f304:	2b00      	cmp	r3, #0
    f306:	d021      	beq.n	f34c <GoalPrnPicture+0x80>
	GL_Widget_SetItem(hPrint, 0, usLine);                   // Picture location on this layout
    f308:	897b      	ldrh	r3, [r7, #10]
    f30a:	69b8      	ldr	r0, [r7, #24]
    f30c:	2100      	movs	r1, #0
    f30e:	461a      	mov	r2, r3
    f310:	f012 fd36 	bl	21d80 <GL_Widget_SetItem>
	GL_Widget_SetSource(hPrint, pcPicture);                 // The picture to print
    f314:	69b8      	ldr	r0, [r7, #24]
    f316:	6879      	ldr	r1, [r7, #4]
    f318:	f012 fd9e 	bl	21e58 <GL_Widget_SetSource>

	GL_Widget_SetShrink(hPrint, GL_DIRECTION_WIDTH);        // Shrink beyond its size (Picture shrinks automatically if picture goes over printer size)
    f31c:	69b8      	ldr	r0, [r7, #24]
    f31e:	2101      	movs	r1, #1
    f320:	f012 fd76 	bl	21e10 <GL_Widget_SetShrink>
	                                                        // Border around the picture
	GL_Widget_SetBorders(hPrint, pxBorder->usLeft, pxBorder->usTop, pxBorder->usRight, pxBorder->usBottom, GL_UNIT_PIXEL, pxBorder->ulColor);
    f324:	683b      	ldr	r3, [r7, #0]
    f326:	6819      	ldr	r1, [r3, #0]
    f328:	683b      	ldr	r3, [r7, #0]
    f32a:	685a      	ldr	r2, [r3, #4]
    f32c:	683b      	ldr	r3, [r7, #0]
    f32e:	689b      	ldr	r3, [r3, #8]
    f330:	6838      	ldr	r0, [r7, #0]
    f332:	68c4      	ldr	r4, [r0, #12]
    f334:	6838      	ldr	r0, [r7, #0]
    f336:	6900      	ldr	r0, [r0, #16]
    f338:	9400      	str	r4, [sp, #0]
    f33a:	2400      	movs	r4, #0
    f33c:	9401      	str	r4, [sp, #4]
    f33e:	9002      	str	r0, [sp, #8]
    f340:	69b8      	ldr	r0, [r7, #24]
    f342:	f012 fc7b 	bl	21c3c <GL_Widget_SetBorders>

	iRet=1;
    f346:	2301      	movs	r3, #1
    f348:	613b      	str	r3, [r7, #16]
	goto lblEnd;
    f34a:	e003      	b.n	f354 <GoalPrnPicture+0x88>

	// Errors treatment
    // ****************
lblKO:                                                      // Build picture failed.
	iRet=-1;
    f34c:	f04f 33ff 	mov.w	r3, #4294967295
    f350:	613b      	str	r3, [r7, #16]
	goto lblEnd;
    f352:	bf00      	nop
lblEnd:
	return iRet;
    f354:	693b      	ldr	r3, [r7, #16]
}
    f356:	4618      	mov	r0, r3
    f358:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f35c:	f2c0 0302 	movt	r3, #2
    f360:	69fa      	ldr	r2, [r7, #28]
    f362:	681b      	ldr	r3, [r3, #0]
    f364:	429a      	cmp	r2, r3
    f366:	d001      	beq.n	f36c <GoalPrnPicture+0xa0>
    f368:	f7f9 fe1c 	bl	8fa4 <__stack_chk_fail>
    f36c:	f107 0724 	add.w	r7, r7, #36	; 0x24
    f370:	46bd      	mov	sp, r7
    f372:	bd90      	pop	{r4, r7, pc}

0000f374 <GoalPrnDocument>:
//   >=0 : Print document done.
//   <0 : Print document failed.
//****************************************************************************

int GoalPrnDocument(T_GL_HWIDGET hDocument)
{
    f374:	b580      	push	{r7, lr}
    f376:	b086      	sub	sp, #24
    f378:	af00      	add	r7, sp, #0
    f37a:	6078      	str	r0, [r7, #4]
    f37c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f380:	f2c0 0302 	movt	r3, #2
    f384:	681b      	ldr	r3, [r3, #0]
    f386:	617b      	str	r3, [r7, #20]
	// Local variables
    // ***************
	T_GL_ERROR_CODE eRet;
	int iRet=-1;
    f388:	f04f 33ff 	mov.w	r3, #4294967295
    f38c:	60fb      	str	r3, [r7, #12]

	// Printing in progress
	// ********************
	eRet = GL_Document_Print(hDocument, 0);
    f38e:	6878      	ldr	r0, [r7, #4]
    f390:	2100      	movs	r1, #0
    f392:	f012 f9e5 	bl	21760 <GL_Document_Print>
    f396:	6138      	str	r0, [r7, #16]
	if ((eRet == GL_SUCCESS) || !IsPrinter())
    f398:	693b      	ldr	r3, [r7, #16]
    f39a:	2b00      	cmp	r3, #0
    f39c:	d004      	beq.n	f3a8 <GoalPrnDocument+0x34>
    f39e:	f011 f999 	bl	206d4 <IsPrinter>
    f3a2:	4603      	mov	r3, r0
    f3a4:	2b00      	cmp	r3, #0
    f3a6:	d101      	bne.n	f3ac <GoalPrnDocument+0x38>
		iRet=1;
    f3a8:	2301      	movs	r3, #1
    f3aa:	60fb      	str	r3, [r7, #12]

	return iRet;
    f3ac:	68fb      	ldr	r3, [r7, #12]
}
    f3ae:	4618      	mov	r0, r3
    f3b0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f3b4:	f2c0 0302 	movt	r3, #2
    f3b8:	697a      	ldr	r2, [r7, #20]
    f3ba:	681b      	ldr	r3, [r3, #0]
    f3bc:	429a      	cmp	r2, r3
    f3be:	d001      	beq.n	f3c4 <GoalPrnDocument+0x50>
    f3c0:	f7f9 fdf0 	bl	8fa4 <__stack_chk_fail>
    f3c4:	f107 0718 	add.w	r7, r7, #24
    f3c8:	46bd      	mov	sp, r7
    f3ca:	bd80      	pop	{r7, pc}

0000f3cc <GoalDestroyDocument>:
//   phDocument (I-) : Pointer on document context handle.
// This function has no return value.
//****************************************************************************

void GoalDestroyDocument(T_GL_HWIDGET *phDocument)
{
    f3cc:	b580      	push	{r7, lr}
    f3ce:	b084      	sub	sp, #16
    f3d0:	af00      	add	r7, sp, #0
    f3d2:	6078      	str	r0, [r7, #4]
    f3d4:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f3d8:	f2c0 0302 	movt	r3, #2
    f3dc:	681b      	ldr	r3, [r3, #0]
    f3de:	60fb      	str	r3, [r7, #12]
    // ***************
		// Empty

	// Destroy document
	// ****************
	GL_Widget_Destroy(*phDocument); // Destroy document with all widgets attached
    f3e0:	687b      	ldr	r3, [r7, #4]
    f3e2:	681b      	ldr	r3, [r3, #0]
    f3e4:	4618      	mov	r0, r3
    f3e6:	f012 fbbd 	bl	21b64 <GL_Widget_Destroy>
	*phDocument=NULL;
    f3ea:	687b      	ldr	r3, [r7, #4]
    f3ec:	2200      	movs	r2, #0
    f3ee:	601a      	str	r2, [r3, #0]
}
    f3f0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f3f4:	f2c0 0302 	movt	r3, #2
    f3f8:	68fa      	ldr	r2, [r7, #12]
    f3fa:	681b      	ldr	r3, [r3, #0]
    f3fc:	429a      	cmp	r2, r3
    f3fe:	d001      	beq.n	f404 <GoalDestroyDocument+0x38>
    f400:	f7f9 fdd0 	bl	8fa4 <__stack_chk_fail>
    f404:	f107 0710 	add.w	r7, r7, #16
    f408:	46bd      	mov	sp, r7
    f40a:	bd80      	pop	{r7, pc}

0000f40c <getAppCmpDat>:
#include "VGE_FMG.H"

//****************************************************************************
//      EXTERN                                                              
//****************************************************************************
const char *getAppCmpDat(void){ return __DATE__;} // Return the date of compilation of the file Mapapp.c
    f40c:	b580      	push	{r7, lr}
    f40e:	b082      	sub	sp, #8
    f410:	af00      	add	r7, sp, #0
    f412:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f416:	f2c0 0302 	movt	r3, #2
    f41a:	681b      	ldr	r3, [r3, #0]
    f41c:	607b      	str	r3, [r7, #4]
    f41e:	f243 13a4 	movw	r3, #12708	; 0x31a4
    f422:	f2c0 0302 	movt	r3, #2
    f426:	4618      	mov	r0, r3
    f428:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f42c:	f2c0 0302 	movt	r3, #2
    f430:	687a      	ldr	r2, [r7, #4]
    f432:	681b      	ldr	r3, [r3, #0]
    f434:	429a      	cmp	r2, r3
    f436:	d001      	beq.n	f43c <getAppCmpDat+0x30>
    f438:	f7f9 fdb4 	bl	8fa4 <__stack_chk_fail>
    f43c:	f107 0708 	add.w	r7, r7, #8
    f440:	46bd      	mov	sp, r7
    f442:	bd80      	pop	{r7, pc}

0000f444 <getAppCmpTim>:
const char *getAppCmpTim(void){ return __TIME__;} // Return the time of compilation of the file Mapapp.c
    f444:	b580      	push	{r7, lr}
    f446:	b082      	sub	sp, #8
    f448:	af00      	add	r7, sp, #0
    f44a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f44e:	f2c0 0302 	movt	r3, #2
    f452:	681b      	ldr	r3, [r3, #0]
    f454:	607b      	str	r3, [r7, #4]
    f456:	f243 13b0 	movw	r3, #12720	; 0x31b0
    f45a:	f2c0 0302 	movt	r3, #2
    f45e:	4618      	mov	r0, r3
    f460:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f464:	f2c0 0302 	movt	r3, #2
    f468:	687a      	ldr	r2, [r7, #4]
    f46a:	681b      	ldr	r3, [r3, #0]
    f46c:	429a      	cmp	r2, r3
    f46e:	d001      	beq.n	f474 <getAppCmpTim+0x30>
    f470:	f7f9 fd98 	bl	8fa4 <__stack_chk_fail>
    f474:	f107 0708 	add.w	r7, r7, #8
    f478:	46bd      	mov	sp, r7
    f47a:	bd80      	pop	{r7, pc}

0000f47c <appLen>:
//   <0  : Initialization failed (FMG failed).
//****************************************************************************



word appLen (word usKey) {
    f47c:	b580      	push	{r7, lr}
    f47e:	b084      	sub	sp, #16
    f480:	af00      	add	r7, sp, #0
    f482:	4603      	mov	r3, r0
    f484:	80fb      	strh	r3, [r7, #6]
    f486:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f48a:	f2c0 0302 	movt	r3, #2
    f48e:	681b      	ldr	r3, [r3, #0]
    f490:	60fb      	str	r3, [r7, #12]
	// Local variables
	// ***************

	// Store parameter
	// ***************
	CHECK(tzApp[usKey-appBeg].usKey==usKey, lblKO);     // Check if it is the right key
    f492:	88fb      	ldrh	r3, [r7, #6]
    f494:	1e5a      	subs	r2, r3, #1
    f496:	f243 2350 	movw	r3, #12880	; 0x3250
    f49a:	f2c0 0302 	movt	r3, #2
    f49e:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
    f4a2:	88fa      	ldrh	r2, [r7, #6]
    f4a4:	429a      	cmp	r2, r3
    f4a6:	d109      	bne.n	f4bc <appLen+0x40>

	return tzApp[usKey-appBeg].usLen;
    f4a8:	88fb      	ldrh	r3, [r7, #6]
    f4aa:	3b01      	subs	r3, #1
    f4ac:	f243 2250 	movw	r2, #12880	; 0x3250
    f4b0:	f2c0 0202 	movt	r2, #2
    f4b4:	00db      	lsls	r3, r3, #3
    f4b6:	18d3      	adds	r3, r2, r3
    f4b8:	885b      	ldrh	r3, [r3, #2]
    f4ba:	e001      	b.n	f4c0 <appLen+0x44>

	// Errors treatment
	// ****************
	lblKO:                                                   // Retrieve parameter failed
	return -1;
    f4bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
    f4c0:	4618      	mov	r0, r3
    f4c2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f4c6:	f2c0 0302 	movt	r3, #2
    f4ca:	68fa      	ldr	r2, [r7, #12]
    f4cc:	681b      	ldr	r3, [r3, #0]
    f4ce:	429a      	cmp	r2, r3
    f4d0:	d001      	beq.n	f4d6 <appLen+0x5a>
    f4d2:	f7f9 fd67 	bl	8fa4 <__stack_chk_fail>
    f4d6:	f107 0710 	add.w	r7, r7, #16
    f4da:	46bd      	mov	sp, r7
    f4dc:	bd80      	pop	{r7, pc}
    f4de:	bf00      	nop

0000f4e0 <appReset>:

int appReset (void)
{
    f4e0:	b580      	push	{r7, lr}
    f4e2:	b092      	sub	sp, #72	; 0x48
    f4e4:	af02      	add	r7, sp, #8
    f4e6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f4ea:	f2c0 0302 	movt	r3, #2
    f4ee:	681b      	ldr	r3, [r3, #0]
    f4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	// Local variables 
    // ***************
	FMG_t_file_info xFileInfo;
	word usIdx;
	int iByteNbr=0, iRet;
    f4f2:	2300      	movs	r3, #0
    f4f4:	60bb      	str	r3, [r7, #8]
	
    // Create "app" table
	// ******************
	iRet = FMG_CreateFile(PARAM_DISK, (char*)zAppTab, FMG_VARIABLE_LENGTH, FMG_WITH_CKECKSUM);
    f4f6:	f243 3054 	movw	r0, #13140	; 0x3354
    f4fa:	f2c0 0002 	movt	r0, #2
    f4fe:	f243 3148 	movw	r1, #13128	; 0x3348
    f502:	f2c0 0102 	movt	r1, #2
    f506:	2201      	movs	r2, #1
    f508:	2301      	movs	r3, #1
    f50a:	f00d fbdb 	bl	1ccc4 <FMG_CreateFile>
    f50e:	60f8      	str	r0, [r7, #12]
    CHECK((iRet==FMG_SUCCESS)||(iRet==FMG_FILE_ALREADY_EXIST), lblKO);
    f510:	68fb      	ldr	r3, [r7, #12]
    f512:	2b0a      	cmp	r3, #10
    f514:	d002      	beq.n	f51c <appReset+0x3c>
    f516:	68fb      	ldr	r3, [r7, #12]
    f518:	2b0c      	cmp	r3, #12
    f51a:	d179      	bne.n	f610 <appReset+0x130>

    if (iRet==FMG_FILE_ALREADY_EXIST)                    // File already exist?
    f51c:	68fb      	ldr	r3, [r7, #12]
    f51e:	2b0c      	cmp	r3, #12
    f520:	d11d      	bne.n	f55e <appReset+0x7e>
    {
        iRet = FMG_DeleteFile(PARAM_DISK, (char*)zAppTab);
    f522:	f243 3054 	movw	r0, #13140	; 0x3354
    f526:	f2c0 0002 	movt	r0, #2
    f52a:	f243 3148 	movw	r1, #13128	; 0x3348
    f52e:	f2c0 0102 	movt	r1, #2
    f532:	f00d fca9 	bl	1ce88 <FMG_DeleteFile>
    f536:	60f8      	str	r0, [r7, #12]
        CHECK(iRet==FMG_SUCCESS, lblKO);                 // Delete it
    f538:	68fb      	ldr	r3, [r7, #12]
    f53a:	2b0a      	cmp	r3, #10
    f53c:	d168      	bne.n	f610 <appReset+0x130>
    	iRet = FMG_CreateFile(PARAM_DISK, (char*)zAppTab, FMG_VARIABLE_LENGTH, FMG_WITH_CKECKSUM);
    f53e:	f243 3054 	movw	r0, #13140	; 0x3354
    f542:	f2c0 0002 	movt	r0, #2
    f546:	f243 3148 	movw	r1, #13128	; 0x3348
    f54a:	f2c0 0102 	movt	r1, #2
    f54e:	2201      	movs	r2, #1
    f550:	2301      	movs	r3, #1
    f552:	f00d fbb7 	bl	1ccc4 <FMG_CreateFile>
    f556:	60f8      	str	r0, [r7, #12]
        CHECK(iRet==FMG_SUCCESS, lblKO);                 // Re-create it
    f558:	68fb      	ldr	r3, [r7, #12]
    f55a:	2b0a      	cmp	r3, #10
    f55c:	d158      	bne.n	f610 <appReset+0x130>
    }

	// Reset "app" table
	// *****************
	xFileInfo.eCreationType = FMGPathAndName;            // File type with Path and Name
    f55e:	2300      	movs	r3, #0
    f560:	613b      	str	r3, [r7, #16]
    strcpy((char*)xFileInfo.ucFilePath, PARAM_DISK);     // \PARAMDISK
    f562:	f107 0310 	add.w	r3, r7, #16
    f566:	3304      	adds	r3, #4
    f568:	f243 3254 	movw	r2, #13140	; 0x3354
    f56c:	f2c0 0202 	movt	r2, #2
    f570:	ca07      	ldmia	r2, {r0, r1, r2}
    f572:	c303      	stmia	r3!, {r0, r1}
    f574:	801a      	strh	r2, [r3, #0]
    strcpy((char*)xFileInfo.ucFileName, zAppTab);        // \appTab.par
    f576:	f243 3348 	movw	r3, #13128	; 0x3348
    f57a:	f2c0 0302 	movt	r3, #2
    f57e:	f107 0225 	add.w	r2, r7, #37	; 0x25
    f582:	cb03      	ldmia	r3!, {r0, r1}
    f584:	6010      	str	r0, [r2, #0]
    f586:	6051      	str	r1, [r2, #4]
    f588:	8819      	ldrh	r1, [r3, #0]
    f58a:	789b      	ldrb	r3, [r3, #2]
    f58c:	8111      	strh	r1, [r2, #8]
    f58e:	7293      	strb	r3, [r2, #10]
    for (usIdx=0; usIdx<appEnd-appBeg; usIdx++)          // Build "app" table with parameters filled with default value
    f590:	2300      	movs	r3, #0
    f592:	80fb      	strh	r3, [r7, #6]
    f594:	e036      	b.n	f604 <appReset+0x124>
	{
    	CHECK(tzApp[usIdx].usKey==usIdx+appBeg, lblKO);  // Check if it is the right key
    f596:	88fa      	ldrh	r2, [r7, #6]
    f598:	f243 2350 	movw	r3, #12880	; 0x3250
    f59c:	f2c0 0302 	movt	r3, #2
    f5a0:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
    f5a4:	461a      	mov	r2, r3
    f5a6:	88fb      	ldrh	r3, [r7, #6]
    f5a8:	3301      	adds	r3, #1
    f5aa:	429a      	cmp	r2, r3
    f5ac:	d130      	bne.n	f610 <appReset+0x130>

    	iByteNbr += (int)tzApp[usIdx].usLen;
    f5ae:	88fb      	ldrh	r3, [r7, #6]
    f5b0:	f243 2250 	movw	r2, #12880	; 0x3250
    f5b4:	f2c0 0202 	movt	r2, #2
    f5b8:	00db      	lsls	r3, r3, #3
    f5ba:	18d3      	adds	r3, r2, r3
    f5bc:	885b      	ldrh	r3, [r3, #2]
    f5be:	68ba      	ldr	r2, [r7, #8]
    f5c0:	18d3      	adds	r3, r2, r3
    f5c2:	60bb      	str	r3, [r7, #8]
    	iRet = FMG_AddRecord(&xFileInfo, tzApp[usIdx].pvDefault, (long)tzApp[usIdx].usLen, FMGMiddle, usIdx);
    f5c4:	88fb      	ldrh	r3, [r7, #6]
    f5c6:	f243 2250 	movw	r2, #12880	; 0x3250
    f5ca:	f2c0 0202 	movt	r2, #2
    f5ce:	00db      	lsls	r3, r3, #3
    f5d0:	18d3      	adds	r3, r2, r3
    f5d2:	6859      	ldr	r1, [r3, #4]
    f5d4:	88fb      	ldrh	r3, [r7, #6]
    f5d6:	f243 2250 	movw	r2, #12880	; 0x3250
    f5da:	f2c0 0202 	movt	r2, #2
    f5de:	00db      	lsls	r3, r3, #3
    f5e0:	18d3      	adds	r3, r2, r3
    f5e2:	885b      	ldrh	r3, [r3, #2]
    f5e4:	88f8      	ldrh	r0, [r7, #6]
    f5e6:	f107 0210 	add.w	r2, r7, #16
    f5ea:	9000      	str	r0, [sp, #0]
    f5ec:	4610      	mov	r0, r2
    f5ee:	461a      	mov	r2, r3
    f5f0:	2301      	movs	r3, #1
    f5f2:	f00d ffed 	bl	1d5d0 <FMG_AddRecord>
    f5f6:	60f8      	str	r0, [r7, #12]
    	CHECK(iRet==FMG_SUCCESS, lblKO);
    f5f8:	68fb      	ldr	r3, [r7, #12]
    f5fa:	2b0a      	cmp	r3, #10
    f5fc:	d108      	bne.n	f610 <appReset+0x130>
	// Reset "app" table
	// *****************
	xFileInfo.eCreationType = FMGPathAndName;            // File type with Path and Name
    strcpy((char*)xFileInfo.ucFilePath, PARAM_DISK);     // \PARAMDISK
    strcpy((char*)xFileInfo.ucFileName, zAppTab);        // \appTab.par
    for (usIdx=0; usIdx<appEnd-appBeg; usIdx++)          // Build "app" table with parameters filled with default value
    f5fe:	88fb      	ldrh	r3, [r7, #6]
    f600:	3301      	adds	r3, #1
    f602:	80fb      	strh	r3, [r7, #6]
    f604:	88fb      	ldrh	r3, [r7, #6]
    f606:	2b1e      	cmp	r3, #30
    f608:	d9c5      	bls.n	f596 <appReset+0xb6>
    	iByteNbr += (int)tzApp[usIdx].usLen;
    	iRet = FMG_AddRecord(&xFileInfo, tzApp[usIdx].pvDefault, (long)tzApp[usIdx].usLen, FMGMiddle, usIdx);
    	CHECK(iRet==FMG_SUCCESS, lblKO);
	}

    iRet = iByteNbr;                                     // Size of bytes reseted
    f60a:	68bb      	ldr	r3, [r7, #8]
    f60c:	60fb      	str	r3, [r7, #12]
	goto lblEnd;
    f60e:	e003      	b.n	f618 <appReset+0x138>

	// Errors treatment 
    // ****************
lblKO:                                                   // Initialization failed
	iRet=-1;
    f610:	f04f 33ff 	mov.w	r3, #4294967295
    f614:	60fb      	str	r3, [r7, #12]
	goto lblEnd;
    f616:	bf00      	nop
lblEnd:
    return iRet;
    f618:	68fb      	ldr	r3, [r7, #12]
}
    f61a:	4618      	mov	r0, r3
    f61c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f620:	f2c0 0302 	movt	r3, #2
    f624:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    f626:	681b      	ldr	r3, [r3, #0]
    f628:	429a      	cmp	r2, r3
    f62a:	d001      	beq.n	f630 <appReset+0x150>
    f62c:	f7f9 fcba 	bl	8fa4 <__stack_chk_fail>
    f630:	f107 0740 	add.w	r7, r7, #64	; 0x40
    f634:	46bd      	mov	sp, r7
    f636:	bd80      	pop	{r7, pc}

0000f638 <appPut>:
//   >=0 : Storage done (size of bytes stored).
//   <0  : Storage failed (FMG failed).
//****************************************************************************

int appPut (word usKey, void *pvDat, word usLen)
{
    f638:	b580      	push	{r7, lr}
    f63a:	b092      	sub	sp, #72	; 0x48
    f63c:	af02      	add	r7, sp, #8
    f63e:	6039      	str	r1, [r7, #0]
    f640:	4613      	mov	r3, r2
    f642:	4602      	mov	r2, r0
    f644:	80fa      	strh	r2, [r7, #6]
    f646:	80bb      	strh	r3, [r7, #4]
    f648:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f64c:	f2c0 0302 	movt	r3, #2
    f650:	681b      	ldr	r3, [r3, #0]
    f652:	63fb      	str	r3, [r7, #60]	; 0x3c
	long lLength;
	int iRet;

	// Store parameter
	// ***************
	CHECK(tzApp[usKey-appBeg].usKey==usKey, lblKO);     // Check if it is the right key
    f654:	88fb      	ldrh	r3, [r7, #6]
    f656:	1e5a      	subs	r2, r3, #1
    f658:	f243 2350 	movw	r3, #12880	; 0x3250
    f65c:	f2c0 0302 	movt	r3, #2
    f660:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
    f664:	88fa      	ldrh	r2, [r7, #6]
    f666:	429a      	cmp	r2, r3
    f668:	d13a      	bne.n	f6e0 <appPut+0xa8>
	
	lLength = (long)tzApp[usKey-appBeg].usLen;
    f66a:	88fb      	ldrh	r3, [r7, #6]
    f66c:	3b01      	subs	r3, #1
    f66e:	f243 2250 	movw	r2, #12880	; 0x3250
    f672:	f2c0 0202 	movt	r2, #2
    f676:	00db      	lsls	r3, r3, #3
    f678:	18d3      	adds	r3, r2, r3
    f67a:	885b      	ldrh	r3, [r3, #2]
    f67c:	60bb      	str	r3, [r7, #8]
	if (lLength > usLen)
    f67e:	88ba      	ldrh	r2, [r7, #4]
    f680:	68bb      	ldr	r3, [r7, #8]
    f682:	429a      	cmp	r2, r3
    f684:	da01      	bge.n	f68a <appPut+0x52>
		lLength = (long)usLen;
    f686:	88bb      	ldrh	r3, [r7, #4]
    f688:	60bb      	str	r3, [r7, #8]
	xFileInfo.eCreationType = FMGPathAndName;           // File type with Path and Name
    f68a:	2300      	movs	r3, #0
    f68c:	613b      	str	r3, [r7, #16]
    strcpy((char*)xFileInfo.ucFilePath, PARAM_DISK);    // \PARAMDISK
    f68e:	f107 0310 	add.w	r3, r7, #16
    f692:	3304      	adds	r3, #4
    f694:	f243 3254 	movw	r2, #13140	; 0x3354
    f698:	f2c0 0202 	movt	r2, #2
    f69c:	ca07      	ldmia	r2, {r0, r1, r2}
    f69e:	c303      	stmia	r3!, {r0, r1}
    f6a0:	801a      	strh	r2, [r3, #0]
    strcpy((char*)xFileInfo.ucFileName, zAppTab);       // \appTab.par
    f6a2:	f243 3348 	movw	r3, #13128	; 0x3348
    f6a6:	f2c0 0302 	movt	r3, #2
    f6aa:	f107 0225 	add.w	r2, r7, #37	; 0x25
    f6ae:	cb03      	ldmia	r3!, {r0, r1}
    f6b0:	6010      	str	r0, [r2, #0]
    f6b2:	6051      	str	r1, [r2, #4]
    f6b4:	8819      	ldrh	r1, [r3, #0]
    f6b6:	789b      	ldrb	r3, [r3, #2]
    f6b8:	8111      	strh	r1, [r2, #8]
    f6ba:	7293      	strb	r3, [r2, #10]
	iRet = FMG_ModifyRecord(&xFileInfo, pvDat, lLength, FMGMiddle, usKey-appBeg);
    f6bc:	88fb      	ldrh	r3, [r7, #6]
    f6be:	1e5a      	subs	r2, r3, #1
    f6c0:	f107 0310 	add.w	r3, r7, #16
    f6c4:	9200      	str	r2, [sp, #0]
    f6c6:	4618      	mov	r0, r3
    f6c8:	6839      	ldr	r1, [r7, #0]
    f6ca:	68ba      	ldr	r2, [r7, #8]
    f6cc:	2301      	movs	r3, #1
    f6ce:	f00e f90b 	bl	1d8e8 <FMG_ModifyRecord>
    f6d2:	60f8      	str	r0, [r7, #12]
	CHECK(iRet==FMG_SUCCESS, lblKO);                    // Store the parameter related to this key
    f6d4:	68fb      	ldr	r3, [r7, #12]
    f6d6:	2b0a      	cmp	r3, #10
    f6d8:	d102      	bne.n	f6e0 <appPut+0xa8>

	iRet = (int)lLength;                                // Size of bytes stored.
    f6da:	68bb      	ldr	r3, [r7, #8]
    f6dc:	60fb      	str	r3, [r7, #12]
	goto lblEnd;
    f6de:	e003      	b.n	f6e8 <appPut+0xb0>

	// Errors treatment 
    // ****************
lblKO:                                                  // Storage parameter failed
    iRet=-1;
    f6e0:	f04f 33ff 	mov.w	r3, #4294967295
    f6e4:	60fb      	str	r3, [r7, #12]
    goto lblEnd;
    f6e6:	bf00      	nop
lblEnd:
    return iRet;
    f6e8:	68fb      	ldr	r3, [r7, #12]
}
    f6ea:	4618      	mov	r0, r3
    f6ec:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f6f0:	f2c0 0302 	movt	r3, #2
    f6f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    f6f6:	681b      	ldr	r3, [r3, #0]
    f6f8:	429a      	cmp	r2, r3
    f6fa:	d001      	beq.n	f700 <appPut+0xc8>
    f6fc:	f7f9 fc52 	bl	8fa4 <__stack_chk_fail>
    f700:	f107 0740 	add.w	r7, r7, #64	; 0x40
    f704:	46bd      	mov	sp, r7
    f706:	bd80      	pop	{r7, pc}

0000f708 <appGet>:
//   >=0 : Retrieve done (size of bytes retrieved)
//   <0  : Retrieve failed (FMG failed)
//****************************************************************************

int appGet (word usKey, void *pvDat, word usLen)
{
    f708:	b580      	push	{r7, lr}
    f70a:	b092      	sub	sp, #72	; 0x48
    f70c:	af02      	add	r7, sp, #8
    f70e:	6039      	str	r1, [r7, #0]
    f710:	4613      	mov	r3, r2
    f712:	4602      	mov	r2, r0
    f714:	80fa      	strh	r2, [r7, #6]
    f716:	80bb      	strh	r3, [r7, #4]
    f718:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f71c:	f2c0 0302 	movt	r3, #2
    f720:	681b      	ldr	r3, [r3, #0]
    f722:	63fb      	str	r3, [r7, #60]	; 0x3c
	long lLength;
	int iRet;

	// Retrieve parameter
	// ******************
	CHECK(tzApp[usKey-appBeg].usKey==usKey, lblKO);
    f724:	88fb      	ldrh	r3, [r7, #6]
    f726:	1e5a      	subs	r2, r3, #1
    f728:	f243 2350 	movw	r3, #12880	; 0x3250
    f72c:	f2c0 0302 	movt	r3, #2
    f730:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
    f734:	88fa      	ldrh	r2, [r7, #6]
    f736:	429a      	cmp	r2, r3
    f738:	d142      	bne.n	f7c0 <appGet+0xb8>

	memset(pvDat, 0, usLen);
    f73a:	88bb      	ldrh	r3, [r7, #4]
    f73c:	6838      	ldr	r0, [r7, #0]
    f73e:	2100      	movs	r1, #0
    f740:	461a      	mov	r2, r3
    f742:	f7f9 ea3c 	blx	8bbc <_init+0x5c>
    lLength = (long) tzApp[usKey-appBeg].usLen;
    f746:	88fb      	ldrh	r3, [r7, #6]
    f748:	3b01      	subs	r3, #1
    f74a:	f243 2250 	movw	r2, #12880	; 0x3250
    f74e:	f2c0 0202 	movt	r2, #2
    f752:	00db      	lsls	r3, r3, #3
    f754:	18d3      	adds	r3, r2, r3
    f756:	885b      	ldrh	r3, [r3, #2]
    f758:	60bb      	str	r3, [r7, #8]
    if (lLength > usLen)
    f75a:	88ba      	ldrh	r2, [r7, #4]
    f75c:	68bb      	ldr	r3, [r7, #8]
    f75e:	429a      	cmp	r2, r3
    f760:	da01      	bge.n	f766 <appGet+0x5e>
    	lLength = (long)usLen;
    f762:	88bb      	ldrh	r3, [r7, #4]
    f764:	60bb      	str	r3, [r7, #8]
	xFileInfo.eCreationType = FMGPathAndName;            // File type with Path and Name
    f766:	2300      	movs	r3, #0
    f768:	613b      	str	r3, [r7, #16]
    strcpy((char*)xFileInfo.ucFilePath, PARAM_DISK);     // \PARAMDISK
    f76a:	f107 0310 	add.w	r3, r7, #16
    f76e:	3304      	adds	r3, #4
    f770:	f243 3254 	movw	r2, #13140	; 0x3354
    f774:	f2c0 0202 	movt	r2, #2
    f778:	ca07      	ldmia	r2, {r0, r1, r2}
    f77a:	c303      	stmia	r3!, {r0, r1}
    f77c:	801a      	strh	r2, [r3, #0]
    strcpy((char*)xFileInfo.ucFileName, zAppTab);        // \appTab.par
    f77e:	f243 3348 	movw	r3, #13128	; 0x3348
    f782:	f2c0 0302 	movt	r3, #2
    f786:	f107 0225 	add.w	r2, r7, #37	; 0x25
    f78a:	cb03      	ldmia	r3!, {r0, r1}
    f78c:	6010      	str	r0, [r2, #0]
    f78e:	6051      	str	r1, [r2, #4]
    f790:	8819      	ldrh	r1, [r3, #0]
    f792:	789b      	ldrb	r3, [r3, #2]
    f794:	8111      	strh	r1, [r2, #8]
    f796:	7293      	strb	r3, [r2, #10]
	iRet = FMG_ReadRecord(&xFileInfo, pvDat, &lLength, FMGMiddle, usKey-appBeg);
    f798:	88fb      	ldrh	r3, [r7, #6]
    f79a:	1e59      	subs	r1, r3, #1
    f79c:	f107 0210 	add.w	r2, r7, #16
    f7a0:	f107 0308 	add.w	r3, r7, #8
    f7a4:	9100      	str	r1, [sp, #0]
    f7a6:	4610      	mov	r0, r2
    f7a8:	6839      	ldr	r1, [r7, #0]
    f7aa:	461a      	mov	r2, r3
    f7ac:	2301      	movs	r3, #1
    f7ae:	f00e fa41 	bl	1dc34 <FMG_ReadRecord>
    f7b2:	60f8      	str	r0, [r7, #12]
	CHECK(iRet==FMG_SUCCESS, lblKO);	                 // Retrieve the parameter related to this key
    f7b4:	68fb      	ldr	r3, [r7, #12]
    f7b6:	2b0a      	cmp	r3, #10
    f7b8:	d102      	bne.n	f7c0 <appGet+0xb8>

	iRet = (int)lLength;                                 // Size of bytes retrieved.
    f7ba:	68bb      	ldr	r3, [r7, #8]
    f7bc:	60fb      	str	r3, [r7, #12]
	goto lblEnd;
    f7be:	e003      	b.n	f7c8 <appGet+0xc0>

	// Errors treatment 
    // ****************
lblKO:                                                   // Retrieve parameter failed
    iRet=-1;
    f7c0:	f04f 33ff 	mov.w	r3, #4294967295
    f7c4:	60fb      	str	r3, [r7, #12]
    goto lblEnd;
    f7c6:	bf00      	nop
lblEnd:
    return iRet;
    f7c8:	68fb      	ldr	r3, [r7, #12]
}
    f7ca:	4618      	mov	r0, r3
    f7cc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f7d0:	f2c0 0302 	movt	r3, #2
    f7d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    f7d6:	681b      	ldr	r3, [r3, #0]
    f7d8:	429a      	cmp	r2, r3
    f7da:	d001      	beq.n	f7e0 <appGet+0xd8>
    f7dc:	f7f9 fbe2 	bl	8fa4 <__stack_chk_fail>
    f7e0:	f107 0740 	add.w	r7, r7, #64	; 0x40
    f7e4:	46bd      	mov	sp, r7
    f7e6:	bd80      	pop	{r7, pc}

0000f7e8 <FMGCreateBatch>:
//  This function has no parameters.
//  This function has no return value.                                      
//****************************************************************************

void FMGCreateBatch(void)
{
    f7e8:	b590      	push	{r4, r7, lr}
    f7ea:	b085      	sub	sp, #20
    f7ec:	af02      	add	r7, sp, #8
    f7ee:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f7f2:	f2c0 0302 	movt	r3, #2
    f7f6:	681b      	ldr	r3, [r3, #0]
    f7f8:	607b      	str	r3, [r7, #4]
    // ***************
    int iRet;

	// FMG0161 Disk + BATCH File creation
    // **********************************
    iRet = FMG_CreateFileType(FMGBatch, FMG_VARIABLE_LENGTH, FMG_WITH_CKECKSUM); 
    f7fa:	2000      	movs	r0, #0
    f7fc:	2101      	movs	r1, #1
    f7fe:	2201      	movs	r2, #1
    f800:	f00d fbb2 	bl	1cf68 <FMG_CreateFileType>
    f804:	6038      	str	r0, [r7, #0]
    CHECK((iRet==FMG_SUCCESS)||(iRet==FMG_FILE_ALREADY_EXIST), lblFmgKO);
    f806:	683b      	ldr	r3, [r7, #0]
    f808:	2b0a      	cmp	r3, #10
    f80a:	d002      	beq.n	f812 <FMGCreateBatch+0x2a>
    f80c:	683b      	ldr	r3, [r7, #0]
    f80e:	2b0c      	cmp	r3, #12
    f810:	d148      	bne.n	f8a4 <FMGCreateBatch+0xbc>
	
    if (iRet == FMG_SUCCESS)
    f812:	683b      	ldr	r3, [r7, #0]
    f814:	2b0a      	cmp	r3, #10
    f816:	d131      	bne.n	f87c <FMGCreateBatch+0x94>
    {
    	xFileInfo.eCreationType = FMGFileType;    // Creation file => File Type
    f818:	f64f 7350 	movw	r3, #65360	; 0xff50
    f81c:	f2c0 0302 	movt	r3, #2
    f820:	2201      	movs	r2, #1
    f822:	601a      	str	r2, [r3, #0]
        xFileInfo.eFileType = FMGBatch;           // File Type = BATCH file
    f824:	f64f 7350 	movw	r3, #65360	; 0xff50
    f828:	f2c0 0302 	movt	r3, #2
    f82c:	2200      	movs	r2, #0
    f82e:	629a      	str	r2, [r3, #40]	; 0x28
    	iRet = FMG_AddRecord(&xFileInfo, (void*) &zBatch.iBatIdx, sizeof(int), FMGBegin, 0);
    f830:	2300      	movs	r3, #0
    f832:	9300      	str	r3, [sp, #0]
    f834:	f64f 7050 	movw	r0, #65360	; 0xff50
    f838:	f2c0 0002 	movt	r0, #2
    f83c:	f643 21c4 	movw	r1, #15044	; 0x3ac4
    f840:	f2c0 0102 	movt	r1, #2
    f844:	2204      	movs	r2, #4
    f846:	2300      	movs	r3, #0
    f848:	f00d fec2 	bl	1d5d0 <FMG_AddRecord>
    f84c:	6038      	str	r0, [r7, #0]
    	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
    f84e:	683b      	ldr	r3, [r7, #0]
    f850:	2b0a      	cmp	r3, #10
    f852:	d127      	bne.n	f8a4 <FMGCreateBatch+0xbc>
    	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Batch Created", GL_ICON_INFORMATION, GL_BUTTON_VALID, 3*1000);
    f854:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    f858:	f2c0 0302 	movt	r3, #2
    f85c:	681b      	ldr	r3, [r3, #0]
    f85e:	2201      	movs	r2, #1
    f860:	9200      	str	r2, [sp, #0]
    f862:	f640 32b8 	movw	r2, #3000	; 0xbb8
    f866:	9201      	str	r2, [sp, #4]
    f868:	4618      	mov	r0, r3
    f86a:	2100      	movs	r1, #0
    f86c:	f643 5248 	movw	r2, #15688	; 0x3d48
    f870:	f2c0 0202 	movt	r2, #2
    f874:	2302      	movs	r3, #2
    f876:	f011 ff07 	bl	21688 <GL_Dialog_Message>
    }
    else
    	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Batch\nAlready Created", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);

    goto lblEnd;
    f87a:	e028      	b.n	f8ce <FMGCreateBatch+0xe6>
    	iRet = FMG_AddRecord(&xFileInfo, (void*) &zBatch.iBatIdx, sizeof(int), FMGBegin, 0);
    	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
    	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Batch Created", GL_ICON_INFORMATION, GL_BUTTON_VALID, 3*1000);
    }
    else
    	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Batch\nAlready Created", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
    f87c:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    f880:	f2c0 0302 	movt	r3, #2
    f884:	681b      	ldr	r3, [r3, #0]
    f886:	2201      	movs	r2, #1
    f888:	9200      	str	r2, [sp, #0]
    f88a:	f640 32b8 	movw	r2, #3000	; 0xbb8
    f88e:	9201      	str	r2, [sp, #4]
    f890:	4618      	mov	r0, r3
    f892:	2100      	movs	r1, #0
    f894:	f643 5258 	movw	r2, #15704	; 0x3d58
    f898:	f2c0 0202 	movt	r2, #2
    f89c:	2303      	movs	r3, #3
    f89e:	f011 fef3 	bl	21688 <GL_Dialog_Message>

    goto lblEnd;
    f8a2:	e014      	b.n	f8ce <FMGCreateBatch+0xe6>
    
	// Errors treatment 
    // ****************
lblFmgKO:                                         // File Management error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, FMG_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    f8a4:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    f8a8:	f2c0 0302 	movt	r3, #2
    f8ac:	681c      	ldr	r4, [r3, #0]
    f8ae:	6838      	ldr	r0, [r7, #0]
    f8b0:	f000 fcc4 	bl	1023c <FMG_ErrorMsg>
    f8b4:	4603      	mov	r3, r0
    f8b6:	2201      	movs	r2, #1
    f8b8:	9200      	str	r2, [sp, #0]
    f8ba:	f241 3288 	movw	r2, #5000	; 0x1388
    f8be:	9201      	str	r2, [sp, #4]
    f8c0:	4620      	mov	r0, r4
    f8c2:	2100      	movs	r1, #0
    f8c4:	461a      	mov	r2, r3
    f8c6:	2304      	movs	r3, #4
    f8c8:	f011 fede 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
    f8cc:	bf00      	nop
lblEnd:
	return;
    f8ce:	bf00      	nop
}
    f8d0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f8d4:	f2c0 0302 	movt	r3, #2
    f8d8:	687a      	ldr	r2, [r7, #4]
    f8da:	681b      	ldr	r3, [r3, #0]
    f8dc:	429a      	cmp	r2, r3
    f8de:	d001      	beq.n	f8e4 <FMGCreateBatch+0xfc>
    f8e0:	f7f9 fb60 	bl	8fa4 <__stack_chk_fail>
    f8e4:	f107 070c 	add.w	r7, r7, #12
    f8e8:	46bd      	mov	sp, r7
    f8ea:	bd90      	pop	{r4, r7, pc}

0000f8ec <FMGDeleteBatch>:
//  This function has no parameters.
//  This function has no return value.                                      
//****************************************************************************

void FMGDeleteBatch(void)
{
    f8ec:	b590      	push	{r4, r7, lr}
    f8ee:	b085      	sub	sp, #20
    f8f0:	af02      	add	r7, sp, #8
    f8f2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f8f6:	f2c0 0302 	movt	r3, #2
    f8fa:	681b      	ldr	r3, [r3, #0]
    f8fc:	607b      	str	r3, [r7, #4]
    // ***************
    int iRet;

    // BATCH File deletion
    // *******************
    iRet = FMG_DeleteFileType(FMGBatch); 
    f8fe:	2000      	movs	r0, #0
    f900:	f00d fc44 	bl	1d18c <FMG_DeleteFileType>
    f904:	6038      	str	r0, [r7, #0]
    CHECK(iRet==FMG_SUCCESS, lblFmgKO);
    f906:	683b      	ldr	r3, [r7, #0]
    f908:	2b0a      	cmp	r3, #10
    f90a:	d113      	bne.n	f934 <FMGDeleteBatch+0x48>
    GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Batch Deleted", GL_ICON_INFORMATION, GL_BUTTON_VALID, 3*1000);
    f90c:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    f910:	f2c0 0302 	movt	r3, #2
    f914:	681b      	ldr	r3, [r3, #0]
    f916:	2201      	movs	r2, #1
    f918:	9200      	str	r2, [sp, #0]
    f91a:	f640 32b8 	movw	r2, #3000	; 0xbb8
    f91e:	9201      	str	r2, [sp, #4]
    f920:	4618      	mov	r0, r3
    f922:	2100      	movs	r1, #0
    f924:	f643 5270 	movw	r2, #15728	; 0x3d70
    f928:	f2c0 0202 	movt	r2, #2
    f92c:	2302      	movs	r3, #2
    f92e:	f011 feab 	bl	21688 <GL_Dialog_Message>

    goto lblEnd;
    f932:	e02b      	b.n	f98c <FMGDeleteBatch+0xa0>
    
	// Errors treatment 
    // ****************
lblFmgKO:                                 // File Management error
	if (iRet == FMG_FILE_DOES_NOT_EXIST)
    f934:	683b      	ldr	r3, [r7, #0]
    f936:	2b0b      	cmp	r3, #11
    f938:	d113      	bne.n	f962 <FMGDeleteBatch+0x76>
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Batch\nAlready Deleted", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    f93a:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    f93e:	f2c0 0302 	movt	r3, #2
    f942:	681b      	ldr	r3, [r3, #0]
    f944:	2201      	movs	r2, #1
    f946:	9200      	str	r2, [sp, #0]
    f948:	f241 3288 	movw	r2, #5000	; 0x1388
    f94c:	9201      	str	r2, [sp, #4]
    f94e:	4618      	mov	r0, r3
    f950:	2100      	movs	r1, #0
    f952:	f643 5280 	movw	r2, #15744	; 0x3d80
    f956:	f2c0 0202 	movt	r2, #2
    f95a:	2304      	movs	r3, #4
    f95c:	f011 fe94 	bl	21688 <GL_Dialog_Message>
	else
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, FMG_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
	goto lblEnd;
    f960:	e013      	b.n	f98a <FMGDeleteBatch+0x9e>
    // ****************
lblFmgKO:                                 // File Management error
	if (iRet == FMG_FILE_DOES_NOT_EXIST)
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Batch\nAlready Deleted", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
	else
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, FMG_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    f962:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    f966:	f2c0 0302 	movt	r3, #2
    f96a:	681c      	ldr	r4, [r3, #0]
    f96c:	6838      	ldr	r0, [r7, #0]
    f96e:	f000 fc65 	bl	1023c <FMG_ErrorMsg>
    f972:	4603      	mov	r3, r0
    f974:	2201      	movs	r2, #1
    f976:	9200      	str	r2, [sp, #0]
    f978:	f241 3288 	movw	r2, #5000	; 0x1388
    f97c:	9201      	str	r2, [sp, #4]
    f97e:	4620      	mov	r0, r4
    f980:	2100      	movs	r1, #0
    f982:	461a      	mov	r2, r3
    f984:	2304      	movs	r3, #4
    f986:	f011 fe7f 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
    f98a:	bf00      	nop
lblEnd:
	return;
    f98c:	bf00      	nop
}
    f98e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f992:	f2c0 0302 	movt	r3, #2
    f996:	687a      	ldr	r2, [r7, #4]
    f998:	681b      	ldr	r3, [r3, #0]
    f99a:	429a      	cmp	r2, r3
    f99c:	d001      	beq.n	f9a2 <FMGDeleteBatch+0xb6>
    f99e:	f7f9 fb01 	bl	8fa4 <__stack_chk_fail>
    f9a2:	f107 070c 	add.w	r7, r7, #12
    f9a6:	46bd      	mov	sp, r7
    f9a8:	bd90      	pop	{r4, r7, pc}
    f9aa:	bf00      	nop

0000f9ac <GetBatchIdx>:
//    >=0 : Return transaction's index.
//    <0  : Batch error.
//****************************************************************************

static int GetBatchIdx(void)
{
    f9ac:	b580      	push	{r7, lr}
    f9ae:	b086      	sub	sp, #24
    f9b0:	af02      	add	r7, sp, #8
    f9b2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    f9b6:	f2c0 0302 	movt	r3, #2
    f9ba:	681b      	ldr	r3, [r3, #0]
    f9bc:	60fb      	str	r3, [r7, #12]
	long lLength;
    int iRet, iBatchIdx;
	
    // Retrieve Idx from BATCH file
    // ****************************
    lLength = sizeof(int);    
    f9be:	2304      	movs	r3, #4
    f9c0:	603b      	str	r3, [r7, #0]
	xFileInfo.eCreationType = FMGFileType;  // Creation file => File Type
    f9c2:	f64f 7350 	movw	r3, #65360	; 0xff50
    f9c6:	f2c0 0302 	movt	r3, #2
    f9ca:	2201      	movs	r2, #1
    f9cc:	601a      	str	r2, [r3, #0]
    xFileInfo.eFileType = FMGBatch;         // File Type = BATCH file
    f9ce:	f64f 7350 	movw	r3, #65360	; 0xff50
    f9d2:	f2c0 0302 	movt	r3, #2
    f9d6:	2200      	movs	r2, #0
    f9d8:	629a      	str	r2, [r3, #40]	; 0x28
    iRet = FMG_ReadRecord(&xFileInfo, &iBatchIdx, &lLength, FMGBegin, 0);
    f9da:	1d3a      	adds	r2, r7, #4
    f9dc:	463b      	mov	r3, r7
    f9de:	2100      	movs	r1, #0
    f9e0:	9100      	str	r1, [sp, #0]
    f9e2:	f64f 7050 	movw	r0, #65360	; 0xff50
    f9e6:	f2c0 0002 	movt	r0, #2
    f9ea:	4611      	mov	r1, r2
    f9ec:	461a      	mov	r2, r3
    f9ee:	2300      	movs	r3, #0
    f9f0:	f00e f920 	bl	1dc34 <FMG_ReadRecord>
    f9f4:	60b8      	str	r0, [r7, #8]
	if (iRet == FMG_SUCCESS)
    f9f6:	68bb      	ldr	r3, [r7, #8]
    f9f8:	2b0a      	cmp	r3, #10
    f9fa:	d102      	bne.n	fa02 <GetBatchIdx+0x56>
		iRet = iBatchIdx;                   // Read Batch Index (Transactions available)
    f9fc:	687b      	ldr	r3, [r7, #4]
    f9fe:	60bb      	str	r3, [r7, #8]
    fa00:	e008      	b.n	fa14 <GetBatchIdx+0x68>
	else if (iRet == FMG_READ_RECORD_ERROR)
    fa02:	68bb      	ldr	r3, [r7, #8]
    fa04:	2b19      	cmp	r3, #25
    fa06:	d102      	bne.n	fa0e <GetBatchIdx+0x62>
		iRet = 0;                           // Reset Batch Index (No transaction)
    fa08:	2300      	movs	r3, #0
    fa0a:	60bb      	str	r3, [r7, #8]
    fa0c:	e002      	b.n	fa14 <GetBatchIdx+0x68>
	else
		iRet = -1;                          // Batch error
    fa0e:	f04f 33ff 	mov.w	r3, #4294967295
    fa12:	60bb      	str	r3, [r7, #8]
	
    return iRet;
    fa14:	68bb      	ldr	r3, [r7, #8]
}
    fa16:	4618      	mov	r0, r3
    fa18:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    fa1c:	f2c0 0302 	movt	r3, #2
    fa20:	68fa      	ldr	r2, [r7, #12]
    fa22:	681b      	ldr	r3, [r3, #0]
    fa24:	429a      	cmp	r2, r3
    fa26:	d001      	beq.n	fa2c <GetBatchIdx+0x80>
    fa28:	f7f9 fabc 	bl	8fa4 <__stack_chk_fail>
    fa2c:	f107 0710 	add.w	r7, r7, #16
    fa30:	46bd      	mov	sp, r7
    fa32:	bd80      	pop	{r7, pc}

0000fa34 <SetBatchIdx>:
//    FMG_SUCCESS : Transaction's index updated.
//    Others  : Batch error.
//****************************************************************************

static int SetBatchIdx(int iBatchIdx)
{
    fa34:	b580      	push	{r7, lr}
    fa36:	b086      	sub	sp, #24
    fa38:	af02      	add	r7, sp, #8
    fa3a:	6078      	str	r0, [r7, #4]
    fa3c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    fa40:	f2c0 0302 	movt	r3, #2
    fa44:	681b      	ldr	r3, [r3, #0]
    fa46:	60fb      	str	r3, [r7, #12]
    // ***************
	int iRet;
	
	// Update and store Idx into BATCH file
	// ************************************
	xFileInfo.eCreationType = FMGFileType;  // Creation file => File Type
    fa48:	f64f 7350 	movw	r3, #65360	; 0xff50
    fa4c:	f2c0 0302 	movt	r3, #2
    fa50:	2201      	movs	r2, #1
    fa52:	601a      	str	r2, [r3, #0]
    xFileInfo.eFileType = FMGBatch;         // File Type = BATCH file
    fa54:	f64f 7350 	movw	r3, #65360	; 0xff50
    fa58:	f2c0 0302 	movt	r3, #2
    fa5c:	2200      	movs	r2, #0
    fa5e:	629a      	str	r2, [r3, #40]	; 0x28
	iRet = FMG_ModifyRecord(&xFileInfo, &iBatchIdx, sizeof(int), FMGBegin, 0);	        	
    fa60:	1d3b      	adds	r3, r7, #4
    fa62:	2200      	movs	r2, #0
    fa64:	9200      	str	r2, [sp, #0]
    fa66:	f64f 7050 	movw	r0, #65360	; 0xff50
    fa6a:	f2c0 0002 	movt	r0, #2
    fa6e:	4619      	mov	r1, r3
    fa70:	2204      	movs	r2, #4
    fa72:	2300      	movs	r3, #0
    fa74:	f00d ff38 	bl	1d8e8 <FMG_ModifyRecord>
    fa78:	60b8      	str	r0, [r7, #8]
	if (iRet == FMG_READ_RECORD_ERROR)      // No more first record
    fa7a:	68bb      	ldr	r3, [r7, #8]
    fa7c:	2b19      	cmp	r3, #25
    fa7e:	d101      	bne.n	fa84 <SetBatchIdx+0x50>
		iRet = FMG_SUCCESS;                                                                        
    fa80:	230a      	movs	r3, #10
    fa82:	60bb      	str	r3, [r7, #8]
	
    return iRet;
    fa84:	68bb      	ldr	r3, [r7, #8]
}
    fa86:	4618      	mov	r0, r3
    fa88:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    fa8c:	f2c0 0302 	movt	r3, #2
    fa90:	68fa      	ldr	r2, [r7, #12]
    fa92:	681b      	ldr	r3, [r3, #0]
    fa94:	429a      	cmp	r2, r3
    fa96:	d001      	beq.n	fa9c <SetBatchIdx+0x68>
    fa98:	f7f9 fa84 	bl	8fa4 <__stack_chk_fail>
    fa9c:	f107 0710 	add.w	r7, r7, #16
    faa0:	46bd      	mov	sp, r7
    faa2:	bd80      	pop	{r7, pc}

0000faa4 <FMGAddDelTransactions>:
//  This function has no parameters.
//  This function has no return value.                                      
//****************************************************************************

void FMGAddDelTransactions(void) 
{
    faa4:	b590      	push	{r4, r7, lr}
    faa6:	b095      	sub	sp, #84	; 0x54
    faa8:	af02      	add	r7, sp, #8
    faaa:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    faae:	f2c0 0302 	movt	r3, #2
    fab2:	681b      	ldr	r3, [r3, #0]
    fab4:	647b      	str	r3, [r7, #68]	; 0x44
	// Local variables 
    // ***************
	T_GL_HWIDGET hScreen=NULL;
    fab6:	2300      	movs	r3, #0
    fab8:	603b      	str	r3, [r7, #0]
	char tcDisplay[50+1];
    int iKey, iRet, iBatchIdx;

    // Batch management
	// ****************
	hScreen = GoalCreateScreen(gGoalGraphicLibInstance, txBatch, NUMBER_OF_LINES(txBatch), GL_ENCODING_UTF8);
    faba:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    fabe:	f2c0 0302 	movt	r3, #2
    fac2:	681b      	ldr	r3, [r3, #0]
    fac4:	4618      	mov	r0, r3
    fac6:	f243 3160 	movw	r1, #13152	; 0x3360
    faca:	f2c0 0102 	movt	r1, #2
    face:	2204      	movs	r2, #4
    fad0:	2300      	movs	r3, #0
    fad2:	f7fd fafd 	bl	d0d0 <GoalCreateScreen>
    fad6:	4603      	mov	r3, r0
    fad8:	603b      	str	r3, [r7, #0]
	CHECK(hScreen!=NULL, lblKO);                                           // Create screen and clear it
    fada:	683b      	ldr	r3, [r7, #0]
    fadc:	2b00      	cmp	r3, #0
    fade:	f000 8194 	beq.w	fe0a <FMGAddDelTransactions+0x366>
	iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL | KEY_DOWN | KEY_UP, false);
    fae2:	683b      	ldr	r3, [r7, #0]
    fae4:	4618      	mov	r0, r3
    fae6:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    faea:	220e      	movs	r2, #14
    faec:	2300      	movs	r3, #0
    faee:	f7fd fc8d 	bl	d40c <GoalClrScreen>
    faf2:	6078      	str	r0, [r7, #4]
	CHECK(iRet>=0, lblKO);
    faf4:	687b      	ldr	r3, [r7, #4]
    faf6:	2b00      	cmp	r3, #0
    faf8:	f2c0 8187 	blt.w	fe0a <FMGAddDelTransactions+0x366>

	iBatchIdx = GetBatchIdx();                                             // Read Batch Index
    fafc:	f7ff ff56 	bl	f9ac <GetBatchIdx>
    fb00:	60b8      	str	r0, [r7, #8]
	CHECK(iBatchIdx>=0, lblKO);
    fb02:	68bb      	ldr	r3, [r7, #8]
    fb04:	2b00      	cmp	r3, #0
    fb06:	f2c0 8180 	blt.w	fe0a <FMGAddDelTransactions+0x366>

    iRet = GoalDspLine(hScreen, 0, "Up to add", &txBatch[0], 0, false);    // Show press up to add transaction
    fb0a:	683b      	ldr	r3, [r7, #0]
    fb0c:	2200      	movs	r2, #0
    fb0e:	9200      	str	r2, [sp, #0]
    fb10:	2200      	movs	r2, #0
    fb12:	9201      	str	r2, [sp, #4]
    fb14:	4618      	mov	r0, r3
    fb16:	2100      	movs	r1, #0
    fb18:	f643 5298 	movw	r2, #15768	; 0x3d98
    fb1c:	f2c0 0202 	movt	r2, #2
    fb20:	f243 3360 	movw	r3, #13152	; 0x3360
    fb24:	f2c0 0302 	movt	r3, #2
    fb28:	f7fd fd8a 	bl	d640 <GoalDspLine>
    fb2c:	6078      	str	r0, [r7, #4]
	CHECK(iRet>=0, lblKO);                                                 // Show transaction remaining
    fb2e:	687b      	ldr	r3, [r7, #4]
    fb30:	2b00      	cmp	r3, #0
    fb32:	f2c0 816a 	blt.w	fe0a <FMGAddDelTransactions+0x366>
    sprintf(tcDisplay, "%d Transaction(s)", iBatchIdx);
    fb36:	f107 0310 	add.w	r3, r7, #16
    fb3a:	4618      	mov	r0, r3
    fb3c:	f643 51a4 	movw	r1, #15780	; 0x3da4
    fb40:	f2c0 0102 	movt	r1, #2
    fb44:	68ba      	ldr	r2, [r7, #8]
    fb46:	f7f9 e8b6 	blx	8cb4 <_init+0x154>
	iRet = GoalDspLine(hScreen, 2, "", &txBatch[2], 0, false);
    fb4a:	683b      	ldr	r3, [r7, #0]
    fb4c:	2200      	movs	r2, #0
    fb4e:	9200      	str	r2, [sp, #0]
    fb50:	2200      	movs	r2, #0
    fb52:	9201      	str	r2, [sp, #4]
    fb54:	4618      	mov	r0, r3
    fb56:	2102      	movs	r1, #2
    fb58:	f643 52b8 	movw	r2, #15800	; 0x3db8
    fb5c:	f2c0 0202 	movt	r2, #2
    fb60:	4bb4      	ldr	r3, [pc, #720]	; (fe34 <FMGAddDelTransactions+0x390>)
    fb62:	f7fd fd6d 	bl	d640 <GoalDspLine>
    fb66:	6078      	str	r0, [r7, #4]
	CHECK(iRet>=0, lblKO);
    fb68:	687b      	ldr	r3, [r7, #4]
    fb6a:	2b00      	cmp	r3, #0
    fb6c:	f2c0 814d 	blt.w	fe0a <FMGAddDelTransactions+0x366>
	if (iBatchIdx == 0)
    fb70:	68bb      	ldr	r3, [r7, #8]
    fb72:	2b00      	cmp	r3, #0
    fb74:	d119      	bne.n	fbaa <FMGAddDelTransactions+0x106>
	{
	    memset(tcDisplay, 0, sizeof(tcDisplay));
    fb76:	f107 0310 	add.w	r3, r7, #16
    fb7a:	4618      	mov	r0, r3
    fb7c:	2100      	movs	r1, #0
    fb7e:	2233      	movs	r2, #51	; 0x33
    fb80:	f7f9 e81c 	blx	8bbc <_init+0x5c>
		iRet = GoalDspLine(hScreen, 2, "Batch Empty !!!", &txBatch[2], 0, false);
    fb84:	683b      	ldr	r3, [r7, #0]
    fb86:	2200      	movs	r2, #0
    fb88:	9200      	str	r2, [sp, #0]
    fb8a:	2200      	movs	r2, #0
    fb8c:	9201      	str	r2, [sp, #4]
    fb8e:	4618      	mov	r0, r3
    fb90:	2102      	movs	r1, #2
    fb92:	f643 52bc 	movw	r2, #15804	; 0x3dbc
    fb96:	f2c0 0202 	movt	r2, #2
    fb9a:	4ba6      	ldr	r3, [pc, #664]	; (fe34 <FMGAddDelTransactions+0x390>)
    fb9c:	f7fd fd50 	bl	d640 <GoalDspLine>
    fba0:	6078      	str	r0, [r7, #4]
		CHECK(iRet>=0, lblKO);                                             // Warm message = Batch empty
    fba2:	687b      	ldr	r3, [r7, #4]
    fba4:	2b00      	cmp	r3, #0
    fba6:	f2c0 8130 	blt.w	fe0a <FMGAddDelTransactions+0x366>
	}
	if (iBatchIdx == MAX_TRANS)
    fbaa:	68bb      	ldr	r3, [r7, #8]
    fbac:	2b0a      	cmp	r3, #10
    fbae:	d112      	bne.n	fbd6 <FMGAddDelTransactions+0x132>
	{
		iRet = GoalDspLine(hScreen, 2, "Batch Full !!!", &txBatch[2], 0, false);
    fbb0:	683b      	ldr	r3, [r7, #0]
    fbb2:	2200      	movs	r2, #0
    fbb4:	9200      	str	r2, [sp, #0]
    fbb6:	2200      	movs	r2, #0
    fbb8:	9201      	str	r2, [sp, #4]
    fbba:	4618      	mov	r0, r3
    fbbc:	2102      	movs	r1, #2
    fbbe:	f643 52cc 	movw	r2, #15820	; 0x3dcc
    fbc2:	f2c0 0202 	movt	r2, #2
    fbc6:	4b9b      	ldr	r3, [pc, #620]	; (fe34 <FMGAddDelTransactions+0x390>)
    fbc8:	f7fd fd3a 	bl	d640 <GoalDspLine>
    fbcc:	6078      	str	r0, [r7, #4]
		CHECK(iRet>=0, lblKO);                                             // Warm message = Batch full
    fbce:	687b      	ldr	r3, [r7, #4]
    fbd0:	2b00      	cmp	r3, #0
    fbd2:	f2c0 811a 	blt.w	fe0a <FMGAddDelTransactions+0x366>
	}
   	iRet = GoalDspLine(hScreen, 3, "Down to del", &txBatch[3], 0, false);  // Show press down to delete transaction
    fbd6:	683b      	ldr	r3, [r7, #0]
    fbd8:	2200      	movs	r2, #0
    fbda:	9200      	str	r2, [sp, #0]
    fbdc:	2200      	movs	r2, #0
    fbde:	9201      	str	r2, [sp, #4]
    fbe0:	4618      	mov	r0, r3
    fbe2:	2103      	movs	r1, #3
    fbe4:	f643 52dc 	movw	r2, #15836	; 0x3ddc
    fbe8:	f2c0 0202 	movt	r2, #2
    fbec:	4b92      	ldr	r3, [pc, #584]	; (fe38 <FMGAddDelTransactions+0x394>)
    fbee:	f7fd fd27 	bl	d640 <GoalDspLine>
    fbf2:	6078      	str	r0, [r7, #4]
    CHECK(iRet>=0, lblKO);
    fbf4:	687b      	ldr	r3, [r7, #4]
    fbf6:	2b00      	cmp	r3, #0
    fbf8:	f2c0 8107 	blt.w	fe0a <FMGAddDelTransactions+0x366>
    fbfc:	e000      	b.n	fc00 <FMGAddDelTransactions+0x15c>
		    		CHECK(iRet>=0, lblKO);
		    		buzzer(10);
	            }
			}
		}
    }
    fbfe:	bf00      	nop
   	iRet = GoalDspLine(hScreen, 3, "Down to del", &txBatch[3], 0, false);  // Show press down to delete transaction
    CHECK(iRet>=0, lblKO);

    while(1) 
	{
    	iRet = GoalDspLine(hScreen, 1, tcDisplay, &txBatch[1], 0, true);
    fc00:	683a      	ldr	r2, [r7, #0]
    fc02:	f107 0310 	add.w	r3, r7, #16
    fc06:	2100      	movs	r1, #0
    fc08:	9100      	str	r1, [sp, #0]
    fc0a:	2101      	movs	r1, #1
    fc0c:	9101      	str	r1, [sp, #4]
    fc0e:	4610      	mov	r0, r2
    fc10:	2101      	movs	r1, #1
    fc12:	461a      	mov	r2, r3
    fc14:	4b89      	ldr	r3, [pc, #548]	; (fe3c <FMGAddDelTransactions+0x398>)
    fc16:	f7fd fd13 	bl	d640 <GoalDspLine>
    fc1a:	6078      	str	r0, [r7, #4]
    	CHECK(iRet>=0, lblKO);                                             // Show transaction recorded or deleted
    fc1c:	687b      	ldr	r3, [r7, #4]
    fc1e:	2b00      	cmp	r3, #0
    fc20:	f2c0 80f3 	blt.w	fe0a <FMGAddDelTransactions+0x366>

		iKey = GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 30*1000, true);            // Wait for key pressed/touched (shortcut)
    fc24:	683a      	ldr	r2, [r7, #0]
    fc26:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    fc2a:	f2c0 0302 	movt	r3, #2
    fc2e:	681b      	ldr	r3, [r3, #0]
    fc30:	2101      	movs	r1, #1
    fc32:	9100      	str	r1, [sp, #0]
    fc34:	4610      	mov	r0, r2
    fc36:	4619      	mov	r1, r3
    fc38:	2201      	movs	r2, #1
    fc3a:	f247 5330 	movw	r3, #30000	; 0x7530
    fc3e:	f7fe f835 	bl	dcac <GoalGetKey>
    fc42:	60f8      	str	r0, [r7, #12]

		// Exit from the batch
		// ===================
        if(iKey==0)
    fc44:	68fb      	ldr	r3, [r7, #12]
    fc46:	2b00      	cmp	r3, #0
    fc48:	f000 80db 	beq.w	fe02 <FMGAddDelTransactions+0x35e>
            break;                                                         // Exit loop if nothing is pressed during 5s
        if (iKey==GL_KEY_CANCEL)
    fc4c:	68fa      	ldr	r2, [r7, #12]
    fc4e:	f64f 0351 	movw	r3, #63569	; 0xf851
    fc52:	429a      	cmp	r2, r3
    fc54:	f000 80d7 	beq.w	fe06 <FMGAddDelTransactions+0x362>
            break;                                                         // Exit loop if red key is pressed

        // Add transactions into the batch
        // ===============================
        if (iKey==GL_KEY_UP)                                               // *** Key UP ***
    fc58:	68fa      	ldr	r2, [r7, #12]
    fc5a:	f64f 0359 	movw	r3, #63577	; 0xf859
    fc5e:	429a      	cmp	r2, r3
    fc60:	d175      	bne.n	fd4e <FMGAddDelTransactions+0x2aa>
		{
			if (iBatchIdx < MAX_TRANS)                                     // Add transaction
    fc62:	68bb      	ldr	r3, [r7, #8]
    fc64:	2b09      	cmp	r3, #9
    fc66:	dc72      	bgt.n	fd4e <FMGAddDelTransactions+0x2aa>
			{        
	        	iRet = FMG_AddRecord(&xFileInfo, (void*) &zBatch.txTable[iBatchIdx], sizeof(ST_TRANSAC), FMGMiddle, iBatchIdx+1);
    fc68:	68bb      	ldr	r3, [r7, #8]
    fc6a:	019a      	lsls	r2, r3, #6
    fc6c:	f643 23c4 	movw	r3, #15044	; 0x3ac4
    fc70:	f2c0 0302 	movt	r3, #2
    fc74:	18d3      	adds	r3, r2, r3
    fc76:	3304      	adds	r3, #4
    fc78:	68ba      	ldr	r2, [r7, #8]
    fc7a:	3201      	adds	r2, #1
    fc7c:	9200      	str	r2, [sp, #0]
    fc7e:	f64f 7050 	movw	r0, #65360	; 0xff50
    fc82:	f2c0 0002 	movt	r0, #2
    fc86:	4619      	mov	r1, r3
    fc88:	2240      	movs	r2, #64	; 0x40
    fc8a:	2301      	movs	r3, #1
    fc8c:	f00d fca0 	bl	1d5d0 <FMG_AddRecord>
    fc90:	6078      	str	r0, [r7, #4]
	        	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
    fc92:	687b      	ldr	r3, [r7, #4]
    fc94:	2b0a      	cmp	r3, #10
    fc96:	f040 80d3 	bne.w	fe40 <FMGAddDelTransactions+0x39c>
	        	iBatchIdx++;                                               // Inc Batch Index
    fc9a:	68bb      	ldr	r3, [r7, #8]
    fc9c:	3301      	adds	r3, #1
    fc9e:	60bb      	str	r3, [r7, #8]
	        	iRet = SetBatchIdx(iBatchIdx);                             // Save Batch Index
    fca0:	68b8      	ldr	r0, [r7, #8]
    fca2:	f7ff fec7 	bl	fa34 <SetBatchIdx>
    fca6:	6078      	str	r0, [r7, #4]
	        	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
    fca8:	687b      	ldr	r3, [r7, #4]
    fcaa:	2b0a      	cmp	r3, #10
    fcac:	f040 80c8 	bne.w	fe40 <FMGAddDelTransactions+0x39c>
	        	sprintf(tcDisplay, "Transaction %d recorded", iBatchIdx);  // Transaction recorded
    fcb0:	f107 0310 	add.w	r3, r7, #16
    fcb4:	4618      	mov	r0, r3
    fcb6:	f643 51e8 	movw	r1, #15848	; 0x3de8
    fcba:	f2c0 0102 	movt	r1, #2
    fcbe:	68ba      	ldr	r2, [r7, #8]
    fcc0:	f7f8 eff8 	blx	8cb4 <_init+0x154>

	            if ((iBatchIdx > MAX_TRANS-3) && (iBatchIdx != MAX_TRANS)) // Batch almost full
    fcc4:	68bb      	ldr	r3, [r7, #8]
    fcc6:	2b07      	cmp	r3, #7
    fcc8:	dd16      	ble.n	fcf8 <FMGAddDelTransactions+0x254>
    fcca:	68bb      	ldr	r3, [r7, #8]
    fccc:	2b0a      	cmp	r3, #10
    fcce:	d013      	beq.n	fcf8 <FMGAddDelTransactions+0x254>
	            {
		    		iRet = GoalDspLine(hScreen, 2, "Batch almost Full !!!", &txBatch[2], 0, false);
    fcd0:	683b      	ldr	r3, [r7, #0]
    fcd2:	2200      	movs	r2, #0
    fcd4:	9200      	str	r2, [sp, #0]
    fcd6:	2200      	movs	r2, #0
    fcd8:	9201      	str	r2, [sp, #4]
    fcda:	4618      	mov	r0, r3
    fcdc:	2102      	movs	r1, #2
    fcde:	f643 6200 	movw	r2, #15872	; 0x3e00
    fce2:	f2c0 0202 	movt	r2, #2
    fce6:	4b53      	ldr	r3, [pc, #332]	; (fe34 <FMGAddDelTransactions+0x390>)
    fce8:	f7fd fcaa 	bl	d640 <GoalDspLine>
    fcec:	6078      	str	r0, [r7, #4]
		    		CHECK(iRet>=0, lblKO);
    fcee:	687b      	ldr	r3, [r7, #4]
    fcf0:	2b00      	cmp	r3, #0
    fcf2:	f2c0 808a 	blt.w	fe0a <FMGAddDelTransactions+0x366>
    fcf6:	e02a      	b.n	fd4e <FMGAddDelTransactions+0x2aa>
	            }
	            else if (iBatchIdx == MAX_TRANS)                           // Batch full
    fcf8:	68bb      	ldr	r3, [r7, #8]
    fcfa:	2b0a      	cmp	r3, #10
    fcfc:	d115      	bne.n	fd2a <FMGAddDelTransactions+0x286>
	            {
			    	iRet = GoalDspLine(hScreen, 2, "Batch Full !!!", &txBatch[2], 0, false);
    fcfe:	683b      	ldr	r3, [r7, #0]
    fd00:	2200      	movs	r2, #0
    fd02:	9200      	str	r2, [sp, #0]
    fd04:	2200      	movs	r2, #0
    fd06:	9201      	str	r2, [sp, #4]
    fd08:	4618      	mov	r0, r3
    fd0a:	2102      	movs	r1, #2
    fd0c:	f643 52cc 	movw	r2, #15820	; 0x3dcc
    fd10:	f2c0 0202 	movt	r2, #2
    fd14:	4b47      	ldr	r3, [pc, #284]	; (fe34 <FMGAddDelTransactions+0x390>)
    fd16:	f7fd fc93 	bl	d640 <GoalDspLine>
    fd1a:	6078      	str	r0, [r7, #4]
			    	CHECK(iRet>=0, lblKO);
    fd1c:	687b      	ldr	r3, [r7, #4]
    fd1e:	2b00      	cmp	r3, #0
    fd20:	db73      	blt.n	fe0a <FMGAddDelTransactions+0x366>
			    	buzzer(10);
    fd22:	200a      	movs	r0, #10
    fd24:	f010 f8b6 	bl	1fe94 <buzzer>
    fd28:	e011      	b.n	fd4e <FMGAddDelTransactions+0x2aa>
	            }
	            else
	            {
		    		iRet = GoalDspLine(hScreen, 2, "", &txBatch[2], 0, false);
    fd2a:	683b      	ldr	r3, [r7, #0]
    fd2c:	2200      	movs	r2, #0
    fd2e:	9200      	str	r2, [sp, #0]
    fd30:	2200      	movs	r2, #0
    fd32:	9201      	str	r2, [sp, #4]
    fd34:	4618      	mov	r0, r3
    fd36:	2102      	movs	r1, #2
    fd38:	f643 52b8 	movw	r2, #15800	; 0x3db8
    fd3c:	f2c0 0202 	movt	r2, #2
    fd40:	4b3c      	ldr	r3, [pc, #240]	; (fe34 <FMGAddDelTransactions+0x390>)
    fd42:	f7fd fc7d 	bl	d640 <GoalDspLine>
    fd46:	6078      	str	r0, [r7, #4]
		    		CHECK(iRet>=0, lblKO);
    fd48:	687b      	ldr	r3, [r7, #4]
    fd4a:	2b00      	cmp	r3, #0
    fd4c:	db5d      	blt.n	fe0a <FMGAddDelTransactions+0x366>
			}
		}
				
		// Delete transactions from the batch
		// ==================================
		if (iKey==GL_KEY_DOWN)                                              // *** Key DOWN ***
    fd4e:	68fa      	ldr	r2, [r7, #12]
    fd50:	f64f 035a 	movw	r3, #63578	; 0xf85a
    fd54:	429a      	cmp	r2, r3
    fd56:	f47f af52 	bne.w	fbfe <FMGAddDelTransactions+0x15a>
		{
        	if (iBatchIdx > 0)                                              // Delete transaction
    fd5a:	68bb      	ldr	r3, [r7, #8]
    fd5c:	2b00      	cmp	r3, #0
    fd5e:	f77f af4e 	ble.w	fbfe <FMGAddDelTransactions+0x15a>
			{
				iBatchIdx--;                                                // Dec Batch Index
    fd62:	68bb      	ldr	r3, [r7, #8]
    fd64:	3b01      	subs	r3, #1
    fd66:	60bb      	str	r3, [r7, #8]
	        	iRet = FMG_DeleteRecord(&xFileInfo, FMGMiddle, sizeof(ST_TRANSAC), iBatchIdx+1);
    fd68:	68bb      	ldr	r3, [r7, #8]
    fd6a:	3301      	adds	r3, #1
    fd6c:	f64f 7050 	movw	r0, #65360	; 0xff50
    fd70:	f2c0 0002 	movt	r0, #2
    fd74:	2101      	movs	r1, #1
    fd76:	2240      	movs	r2, #64	; 0x40
    fd78:	f00e f99e 	bl	1e0b8 <FMG_DeleteRecord>
    fd7c:	6078      	str	r0, [r7, #4]
	        	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
    fd7e:	687b      	ldr	r3, [r7, #4]
    fd80:	2b0a      	cmp	r3, #10
    fd82:	d15d      	bne.n	fe40 <FMGAddDelTransactions+0x39c>
	        	iRet = SetBatchIdx(iBatchIdx);                              // Save Batch Index
    fd84:	68b8      	ldr	r0, [r7, #8]
    fd86:	f7ff fe55 	bl	fa34 <SetBatchIdx>
    fd8a:	6078      	str	r0, [r7, #4]
	        	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
    fd8c:	687b      	ldr	r3, [r7, #4]
    fd8e:	2b0a      	cmp	r3, #10
    fd90:	d156      	bne.n	fe40 <FMGAddDelTransactions+0x39c>
	        	sprintf(tcDisplay, "Transaction %d deleted", iBatchIdx+1);  // Transaction deleted
    fd92:	68bb      	ldr	r3, [r7, #8]
    fd94:	3301      	adds	r3, #1
    fd96:	f107 0210 	add.w	r2, r7, #16
    fd9a:	4610      	mov	r0, r2
    fd9c:	f643 6118 	movw	r1, #15896	; 0x3e18
    fda0:	f2c0 0102 	movt	r1, #2
    fda4:	461a      	mov	r2, r3
    fda6:	f7f8 ef86 	blx	8cb4 <_init+0x154>

	    		iRet = GoalDspLine(hScreen, 2, "", &txBatch[2], 0, false);
    fdaa:	683b      	ldr	r3, [r7, #0]
    fdac:	2200      	movs	r2, #0
    fdae:	9200      	str	r2, [sp, #0]
    fdb0:	2200      	movs	r2, #0
    fdb2:	9201      	str	r2, [sp, #4]
    fdb4:	4618      	mov	r0, r3
    fdb6:	2102      	movs	r1, #2
    fdb8:	f643 52b8 	movw	r2, #15800	; 0x3db8
    fdbc:	f2c0 0202 	movt	r2, #2
    fdc0:	4b1c      	ldr	r3, [pc, #112]	; (fe34 <FMGAddDelTransactions+0x390>)
    fdc2:	f7fd fc3d 	bl	d640 <GoalDspLine>
    fdc6:	6078      	str	r0, [r7, #4]
	    		CHECK(iRet>=0, lblKO);
    fdc8:	687b      	ldr	r3, [r7, #4]
    fdca:	2b00      	cmp	r3, #0
    fdcc:	db1d      	blt.n	fe0a <FMGAddDelTransactions+0x366>

	            if (iBatchIdx == 0)                                         // Batch empty
    fdce:	68bb      	ldr	r3, [r7, #8]
    fdd0:	2b00      	cmp	r3, #0
    fdd2:	f47f af14 	bne.w	fbfe <FMGAddDelTransactions+0x15a>
	            {
		    		iRet = GoalDspLine(hScreen, 2, "Batch Empty !!!", &txBatch[2], 0, false);
    fdd6:	683b      	ldr	r3, [r7, #0]
    fdd8:	2200      	movs	r2, #0
    fdda:	9200      	str	r2, [sp, #0]
    fddc:	2200      	movs	r2, #0
    fdde:	9201      	str	r2, [sp, #4]
    fde0:	4618      	mov	r0, r3
    fde2:	2102      	movs	r1, #2
    fde4:	f643 52bc 	movw	r2, #15804	; 0x3dbc
    fde8:	f2c0 0202 	movt	r2, #2
    fdec:	4b11      	ldr	r3, [pc, #68]	; (fe34 <FMGAddDelTransactions+0x390>)
    fdee:	f7fd fc27 	bl	d640 <GoalDspLine>
    fdf2:	6078      	str	r0, [r7, #4]
		    		CHECK(iRet>=0, lblKO);
    fdf4:	687b      	ldr	r3, [r7, #4]
    fdf6:	2b00      	cmp	r3, #0
    fdf8:	db07      	blt.n	fe0a <FMGAddDelTransactions+0x366>
		    		buzzer(10);
    fdfa:	200a      	movs	r0, #10
    fdfc:	f010 f84a 	bl	1fe94 <buzzer>
	            }
			}
		}
    }
    fe00:	e6fd      	b.n	fbfe <FMGAddDelTransactions+0x15a>
		iKey = GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 30*1000, true);            // Wait for key pressed/touched (shortcut)

		// Exit from the batch
		// ===================
        if(iKey==0)
            break;                                                         // Exit loop if nothing is pressed during 5s
    fe02:	bf00      	nop
    fe04:	e000      	b.n	fe08 <FMGAddDelTransactions+0x364>
        if (iKey==GL_KEY_CANCEL)
            break;                                                         // Exit loop if red key is pressed
    fe06:	bf00      	nop
	            }
			}
		}
    }
    
    goto lblEnd;
    fe08:	e02f      	b.n	fe6a <FMGAddDelTransactions+0x3c6>

	// Errors treatment 
    // ****************
lblKO:                               // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    fe0a:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    fe0e:	f2c0 0302 	movt	r3, #2
    fe12:	681b      	ldr	r3, [r3, #0]
    fe14:	2201      	movs	r2, #1
    fe16:	9200      	str	r2, [sp, #0]
    fe18:	f241 3288 	movw	r2, #5000	; 0x1388
    fe1c:	9201      	str	r2, [sp, #4]
    fe1e:	4618      	mov	r0, r3
    fe20:	2100      	movs	r1, #0
    fe22:	f643 6230 	movw	r2, #15920	; 0x3e30
    fe26:	f2c0 0202 	movt	r2, #2
    fe2a:	2304      	movs	r3, #4
    fe2c:	f011 fc2c 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
    fe30:	e01b      	b.n	fe6a <FMGAddDelTransactions+0x3c6>
    fe32:	bf00      	nop
    fe34:	000234b8 	.word	0x000234b8
    fe38:	00023564 	.word	0x00023564
    fe3c:	0002340c 	.word	0x0002340c
lblFmgKO:                            // File Management error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, FMG_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
    fe40:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    fe44:	f2c0 0302 	movt	r3, #2
    fe48:	681c      	ldr	r4, [r3, #0]
    fe4a:	6878      	ldr	r0, [r7, #4]
    fe4c:	f000 f9f6 	bl	1023c <FMG_ErrorMsg>
    fe50:	4603      	mov	r3, r0
    fe52:	2201      	movs	r2, #1
    fe54:	9200      	str	r2, [sp, #0]
    fe56:	f241 3288 	movw	r2, #5000	; 0x1388
    fe5a:	9201      	str	r2, [sp, #4]
    fe5c:	4620      	mov	r0, r4
    fe5e:	2100      	movs	r1, #0
    fe60:	461a      	mov	r2, r3
    fe62:	2304      	movs	r3, #4
    fe64:	f011 fc10 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
    fe68:	bf00      	nop
lblEnd: 
	if (hScreen)
    fe6a:	683b      	ldr	r3, [r7, #0]
    fe6c:	2b00      	cmp	r3, #0
    fe6e:	d003      	beq.n	fe78 <FMGAddDelTransactions+0x3d4>
		GoalDestroyScreen(&hScreen); // Destroy screen
    fe70:	463b      	mov	r3, r7
    fe72:	4618      	mov	r0, r3
    fe74:	f7fe f87c 	bl	df70 <GoalDestroyScreen>
}
    fe78:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    fe7c:	f2c0 0302 	movt	r3, #2
    fe80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    fe82:	681b      	ldr	r3, [r3, #0]
    fe84:	429a      	cmp	r2, r3
    fe86:	d001      	beq.n	fe8c <FMGAddDelTransactions+0x3e8>
    fe88:	f7f9 f88c 	bl	8fa4 <__stack_chk_fail>
    fe8c:	f107 074c 	add.w	r7, r7, #76	; 0x4c
    fe90:	46bd      	mov	sp, r7
    fe92:	bd90      	pop	{r4, r7, pc}

0000fe94 <FMGReadTransactions>:
//  This function has no parameters.
//  This function has no return value.                                      
//****************************************************************************

void FMGReadTransactions(void) 
{
    fe94:	b590      	push	{r4, r7, lr}
    fe96:	b0a7      	sub	sp, #156	; 0x9c
    fe98:	af02      	add	r7, sp, #8
    fe9a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    fe9e:	f2c0 0302 	movt	r3, #2
    fea2:	681b      	ldr	r3, [r3, #0]
    fea4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	// Local variables 
    // ***************
	T_GL_HWIDGET hScreen=NULL;
    fea8:	2300      	movs	r3, #0
    feaa:	603b      	str	r3, [r7, #0]
    long lLength;
	int iKey, iRet, iBatchIdx, iIdx;

    // Batch management
	// ****************
	memset(&xTransac, 0, sizeof(ST_TRANSAC));
    feac:	f107 0318 	add.w	r3, r7, #24
    feb0:	4618      	mov	r0, r3
    feb2:	2100      	movs	r1, #0
    feb4:	2240      	movs	r2, #64	; 0x40
    feb6:	f7f8 ee82 	blx	8bbc <_init+0x5c>
    iIdx=1;                                                               // Transactions start at iIdx=1
    feba:	2301      	movs	r3, #1
    febc:	60fb      	str	r3, [r7, #12]

	hScreen = GoalCreateScreen(gGoalGraphicLibInstance, txTrans, NUMBER_OF_LINES(txTrans), GL_ENCODING_UTF8);
    febe:	f64f 63e8 	movw	r3, #65256	; 0xfee8
    fec2:	f2c0 0302 	movt	r3, #2
    fec6:	681b      	ldr	r3, [r3, #0]
    fec8:	4618      	mov	r0, r3
    feca:	f243 6110 	movw	r1, #13840	; 0x3610
    fece:	f2c0 0102 	movt	r1, #2
    fed2:	2207      	movs	r2, #7
    fed4:	2300      	movs	r3, #0
    fed6:	f7fd f8fb 	bl	d0d0 <GoalCreateScreen>
    feda:	4603      	mov	r3, r0
    fedc:	603b      	str	r3, [r7, #0]
	CHECK(hScreen!=NULL, lblKO);                                          // Create screen and clear it
    fede:	683b      	ldr	r3, [r7, #0]
    fee0:	2b00      	cmp	r3, #0
    fee2:	f000 814b 	beq.w	1017c <FMGReadTransactions+0x2e8>
	iRet = GoalClrScreen(hScreen, GL_COLOR_BLACK, KEY_CANCEL | KEY_DOWN | KEY_UP, false);
    fee6:	683b      	ldr	r3, [r7, #0]
    fee8:	4618      	mov	r0, r3
    feea:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    feee:	220e      	movs	r2, #14
    fef0:	2300      	movs	r3, #0
    fef2:	f7fd fa8b 	bl	d40c <GoalClrScreen>
    fef6:	60b8      	str	r0, [r7, #8]
	CHECK(iRet>=0, lblKO);
    fef8:	68bb      	ldr	r3, [r7, #8]
    fefa:	2b00      	cmp	r3, #0
    fefc:	f2c0 813e 	blt.w	1017c <FMGReadTransactions+0x2e8>

	// Read first transaction
    // ======================
    iBatchIdx = GetBatchIdx();                                            // Read Batch Index
    ff00:	f7ff fd54 	bl	f9ac <GetBatchIdx>
    ff04:	6138      	str	r0, [r7, #16]
    CHECK(iBatchIdx>=0, lblKO);
    ff06:	693b      	ldr	r3, [r7, #16]
    ff08:	2b00      	cmp	r3, #0
    ff0a:	f2c0 8137 	blt.w	1017c <FMGReadTransactions+0x2e8>
	CHECK(iBatchIdx!=0, lblEmpty);                                        // Check if batch empty
    ff0e:	693b      	ldr	r3, [r7, #16]
    ff10:	2b00      	cmp	r3, #0
    ff12:	f000 8147 	beq.w	101a4 <FMGReadTransactions+0x310>

    lLength = sizeof(ST_TRANSAC);                                         // Read first transaction
    ff16:	2340      	movs	r3, #64	; 0x40
    ff18:	607b      	str	r3, [r7, #4]
	iRet = FMG_ReadRecord(&xFileInfo, &xTransac, &lLength, FMGMiddle, iIdx);
    ff1a:	f107 0218 	add.w	r2, r7, #24
    ff1e:	1d3b      	adds	r3, r7, #4
    ff20:	68f9      	ldr	r1, [r7, #12]
    ff22:	9100      	str	r1, [sp, #0]
    ff24:	f64f 7050 	movw	r0, #65360	; 0xff50
    ff28:	f2c0 0002 	movt	r0, #2
    ff2c:	4611      	mov	r1, r2
    ff2e:	461a      	mov	r2, r3
    ff30:	2301      	movs	r3, #1
    ff32:	f00d fe7f 	bl	1dc34 <FMG_ReadRecord>
    ff36:	60b8      	str	r0, [r7, #8]
	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
    ff38:	68bb      	ldr	r3, [r7, #8]
    ff3a:	2b0a      	cmp	r3, #10
    ff3c:	f040 8146 	bne.w	101cc <FMGReadTransactions+0x338>

	iRet = GoalDspLine(hScreen, 0, "Up to inc", &txTrans[0], 0, false);   // Show press up to read the next transaction
    ff40:	683b      	ldr	r3, [r7, #0]
    ff42:	2200      	movs	r2, #0
    ff44:	9200      	str	r2, [sp, #0]
    ff46:	2200      	movs	r2, #0
    ff48:	9201      	str	r2, [sp, #4]
    ff4a:	4618      	mov	r0, r3
    ff4c:	2100      	movs	r1, #0
    ff4e:	f643 6244 	movw	r2, #15940	; 0x3e44
    ff52:	f2c0 0202 	movt	r2, #2
    ff56:	f243 6310 	movw	r3, #13840	; 0x3610
    ff5a:	f2c0 0302 	movt	r3, #2
    ff5e:	f7fd fb6f 	bl	d640 <GoalDspLine>
    ff62:	60b8      	str	r0, [r7, #8]
	CHECK(iRet>=0, lblKO);
    ff64:	68bb      	ldr	r3, [r7, #8]
    ff66:	2b00      	cmp	r3, #0
    ff68:	f2c0 8108 	blt.w	1017c <FMGReadTransactions+0x2e8>

	iRet = GoalDspLine(hScreen, 6, "Down to dec", &txTrans[6], 0, false); // Show press down to read the previous transaction
    ff6c:	683b      	ldr	r3, [r7, #0]
    ff6e:	2200      	movs	r2, #0
    ff70:	9200      	str	r2, [sp, #0]
    ff72:	2200      	movs	r2, #0
    ff74:	9201      	str	r2, [sp, #4]
    ff76:	4618      	mov	r0, r3
    ff78:	2106      	movs	r1, #6
    ff7a:	f643 6250 	movw	r2, #15952	; 0x3e50
    ff7e:	f2c0 0202 	movt	r2, #2
    ff82:	4ba8      	ldr	r3, [pc, #672]	; (10224 <FMGReadTransactions+0x390>)
    ff84:	f7fd fb5c 	bl	d640 <GoalDspLine>
    ff88:	60b8      	str	r0, [r7, #8]
	CHECK(iRet>=0, lblKO);
    ff8a:	68bb      	ldr	r3, [r7, #8]
    ff8c:	2b00      	cmp	r3, #0
    ff8e:	f2c0 80f5 	blt.w	1017c <FMGReadTransactions+0x2e8>
    ff92:	e000      	b.n	ff96 <FMGReadTransactions+0x102>
		        lLength = sizeof(ST_TRANSAC);
		    	iRet = FMG_ReadRecord(&xFileInfo, &xTransac, &lLength, FMGMiddle, iIdx);
		    	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
			}
		}
    }
    ff94:	bf00      	nop

	// Scrolling transactions
	// ======================
    while(1) 
	{
        sprintf(tcDisplay, "TRANSACTION %02d", iIdx);                     // Show transaction
    ff96:	f107 0358 	add.w	r3, r7, #88	; 0x58
    ff9a:	4618      	mov	r0, r3
    ff9c:	f643 615c 	movw	r1, #15964	; 0x3e5c
    ffa0:	f2c0 0102 	movt	r1, #2
    ffa4:	68fa      	ldr	r2, [r7, #12]
    ffa6:	f7f8 ee86 	blx	8cb4 <_init+0x154>
    	iRet = GoalDspLine(hScreen, 1, tcDisplay, &txTrans[1], 0, false);
    ffaa:	683a      	ldr	r2, [r7, #0]
    ffac:	f107 0358 	add.w	r3, r7, #88	; 0x58
    ffb0:	2100      	movs	r1, #0
    ffb2:	9100      	str	r1, [sp, #0]
    ffb4:	2100      	movs	r1, #0
    ffb6:	9101      	str	r1, [sp, #4]
    ffb8:	4610      	mov	r0, r2
    ffba:	2101      	movs	r1, #1
    ffbc:	461a      	mov	r2, r3
    ffbe:	4b9a      	ldr	r3, [pc, #616]	; (10228 <FMGReadTransactions+0x394>)
    ffc0:	f7fd fb3e 	bl	d640 <GoalDspLine>
    ffc4:	60b8      	str	r0, [r7, #8]
    	CHECK(iRet>=0, lblKO);
    ffc6:	68bb      	ldr	r3, [r7, #8]
    ffc8:	2b00      	cmp	r3, #0
    ffca:	f2c0 80d7 	blt.w	1017c <FMGReadTransactions+0x2e8>
    	sprintf(tcDisplay, "DATE: %s", xTransac.tcDate);
    ffce:	f107 0258 	add.w	r2, r7, #88	; 0x58
    ffd2:	f107 0318 	add.w	r3, r7, #24
    ffd6:	4610      	mov	r0, r2
    ffd8:	f643 6170 	movw	r1, #15984	; 0x3e70
    ffdc:	f2c0 0102 	movt	r1, #2
    ffe0:	461a      	mov	r2, r3
    ffe2:	f7f8 ee68 	blx	8cb4 <_init+0x154>
        iRet = GoalDspLine(hScreen, 2, tcDisplay, &txTrans[2], 0, false);
    ffe6:	683a      	ldr	r2, [r7, #0]
    ffe8:	f107 0358 	add.w	r3, r7, #88	; 0x58
    ffec:	2100      	movs	r1, #0
    ffee:	9100      	str	r1, [sp, #0]
    fff0:	2100      	movs	r1, #0
    fff2:	9101      	str	r1, [sp, #4]
    fff4:	4610      	mov	r0, r2
    fff6:	2102      	movs	r1, #2
    fff8:	461a      	mov	r2, r3
    fffa:	4b8c      	ldr	r3, [pc, #560]	; (1022c <FMGReadTransactions+0x398>)
    fffc:	f7fd fb20 	bl	d640 <GoalDspLine>
   10000:	60b8      	str	r0, [r7, #8]
    	CHECK(iRet>=0, lblKO);
   10002:	68bb      	ldr	r3, [r7, #8]
   10004:	2b00      	cmp	r3, #0
   10006:	f2c0 80b9 	blt.w	1017c <FMGReadTransactions+0x2e8>
        sprintf(tcDisplay, "ACCOUNT #: %s", xTransac.tcAccount);
   1000a:	f107 0258 	add.w	r2, r7, #88	; 0x58
   1000e:	f107 0318 	add.w	r3, r7, #24
   10012:	3311      	adds	r3, #17
   10014:	4610      	mov	r0, r2
   10016:	f643 617c 	movw	r1, #15996	; 0x3e7c
   1001a:	f2c0 0102 	movt	r1, #2
   1001e:	461a      	mov	r2, r3
   10020:	f7f8 ee48 	blx	8cb4 <_init+0x154>
        iRet = GoalDspLine(hScreen, 3, tcDisplay, &txTrans[3], 0, false);
   10024:	683a      	ldr	r2, [r7, #0]
   10026:	f107 0358 	add.w	r3, r7, #88	; 0x58
   1002a:	2100      	movs	r1, #0
   1002c:	9100      	str	r1, [sp, #0]
   1002e:	2100      	movs	r1, #0
   10030:	9101      	str	r1, [sp, #4]
   10032:	4610      	mov	r0, r2
   10034:	2103      	movs	r1, #3
   10036:	461a      	mov	r2, r3
   10038:	4b7d      	ldr	r3, [pc, #500]	; (10230 <FMGReadTransactions+0x39c>)
   1003a:	f7fd fb01 	bl	d640 <GoalDspLine>
   1003e:	60b8      	str	r0, [r7, #8]
    	CHECK(iRet>=0, lblKO);
   10040:	68bb      	ldr	r3, [r7, #8]
   10042:	2b00      	cmp	r3, #0
   10044:	f2c0 809a 	blt.w	1017c <FMGReadTransactions+0x2e8>
        sprintf(tcDisplay, "AMOUNT: %s", xTransac.tcAmount);
   10048:	f107 0258 	add.w	r2, r7, #88	; 0x58
   1004c:	f107 0318 	add.w	r3, r7, #24
   10050:	3322      	adds	r3, #34	; 0x22
   10052:	4610      	mov	r0, r2
   10054:	f643 618c 	movw	r1, #16012	; 0x3e8c
   10058:	f2c0 0102 	movt	r1, #2
   1005c:	461a      	mov	r2, r3
   1005e:	f7f8 ee2a 	blx	8cb4 <_init+0x154>
        iRet = GoalDspLine(hScreen, 4, tcDisplay, &txTrans[4], 0, false);
   10062:	683a      	ldr	r2, [r7, #0]
   10064:	f107 0358 	add.w	r3, r7, #88	; 0x58
   10068:	2100      	movs	r1, #0
   1006a:	9100      	str	r1, [sp, #0]
   1006c:	2100      	movs	r1, #0
   1006e:	9101      	str	r1, [sp, #4]
   10070:	4610      	mov	r0, r2
   10072:	2104      	movs	r1, #4
   10074:	461a      	mov	r2, r3
   10076:	4b6f      	ldr	r3, [pc, #444]	; (10234 <FMGReadTransactions+0x3a0>)
   10078:	f7fd fae2 	bl	d640 <GoalDspLine>
   1007c:	60b8      	str	r0, [r7, #8]
    	CHECK(iRet>=0, lblKO);
   1007e:	68bb      	ldr	r3, [r7, #8]
   10080:	2b00      	cmp	r3, #0
   10082:	db7b      	blt.n	1017c <FMGReadTransactions+0x2e8>
        sprintf(tcDisplay, "TYPE: %s", xTransac.tcType);
   10084:	f107 0258 	add.w	r2, r7, #88	; 0x58
   10088:	f107 0318 	add.w	r3, r7, #24
   1008c:	3332      	adds	r3, #50	; 0x32
   1008e:	4610      	mov	r0, r2
   10090:	f643 6198 	movw	r1, #16024	; 0x3e98
   10094:	f2c0 0102 	movt	r1, #2
   10098:	461a      	mov	r2, r3
   1009a:	f7f8 ee0c 	blx	8cb4 <_init+0x154>
        iRet = GoalDspLine(hScreen, 5, tcDisplay, &txTrans[5], 0, true);
   1009e:	683a      	ldr	r2, [r7, #0]
   100a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
   100a4:	2100      	movs	r1, #0
   100a6:	9100      	str	r1, [sp, #0]
   100a8:	2101      	movs	r1, #1
   100aa:	9101      	str	r1, [sp, #4]
   100ac:	4610      	mov	r0, r2
   100ae:	2105      	movs	r1, #5
   100b0:	461a      	mov	r2, r3
   100b2:	4b61      	ldr	r3, [pc, #388]	; (10238 <FMGReadTransactions+0x3a4>)
   100b4:	f7fd fac4 	bl	d640 <GoalDspLine>
   100b8:	60b8      	str	r0, [r7, #8]
    	CHECK(iRet>=0, lblKO);
   100ba:	68bb      	ldr	r3, [r7, #8]
   100bc:	2b00      	cmp	r3, #0
   100be:	db5d      	blt.n	1017c <FMGReadTransactions+0x2e8>

		iKey = GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 30*1000, false);          // Wait for key pressed/touched (shortcut)
   100c0:	683a      	ldr	r2, [r7, #0]
   100c2:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   100c6:	f2c0 0302 	movt	r3, #2
   100ca:	681b      	ldr	r3, [r3, #0]
   100cc:	2100      	movs	r1, #0
   100ce:	9100      	str	r1, [sp, #0]
   100d0:	4610      	mov	r0, r2
   100d2:	4619      	mov	r1, r3
   100d4:	2201      	movs	r2, #1
   100d6:	f247 5330 	movw	r3, #30000	; 0x7530
   100da:	f7fd fde7 	bl	dcac <GoalGetKey>
   100de:	6178      	str	r0, [r7, #20]

		// Exit from batch
		// ---------------
        if(iKey==0)
   100e0:	697b      	ldr	r3, [r7, #20]
   100e2:	2b00      	cmp	r3, #0
   100e4:	d046      	beq.n	10174 <FMGReadTransactions+0x2e0>
            break;                                                        // Exit loop if nothing is pressed during 5s
        if(iKey==GL_KEY_CANCEL)
   100e6:	697a      	ldr	r2, [r7, #20]
   100e8:	f64f 0351 	movw	r3, #63569	; 0xf851
   100ec:	429a      	cmp	r2, r3
   100ee:	d043      	beq.n	10178 <FMGReadTransactions+0x2e4>
            break;                                                        // Exit loop if red key is pressed
       
        // Scrolling UP transactions
        // -------------------------
        if (iKey==GL_KEY_UP)                                              // *** Key UP ***
   100f0:	697a      	ldr	r2, [r7, #20]
   100f2:	f64f 0359 	movw	r3, #63577	; 0xf859
   100f6:	429a      	cmp	r2, r3
   100f8:	d11a      	bne.n	10130 <FMGReadTransactions+0x29c>
		{
			if (iIdx < iBatchIdx)                                         // Reading transaction
   100fa:	68fa      	ldr	r2, [r7, #12]
   100fc:	693b      	ldr	r3, [r7, #16]
   100fe:	429a      	cmp	r2, r3
   10100:	da16      	bge.n	10130 <FMGReadTransactions+0x29c>
			{         
				iIdx++;
   10102:	68fb      	ldr	r3, [r7, #12]
   10104:	3301      	adds	r3, #1
   10106:	60fb      	str	r3, [r7, #12]
		        lLength = sizeof(ST_TRANSAC);
   10108:	2340      	movs	r3, #64	; 0x40
   1010a:	607b      	str	r3, [r7, #4]
		    	iRet = FMG_ReadRecord(&xFileInfo, &xTransac, &lLength, FMGMiddle, iIdx);
   1010c:	f107 0218 	add.w	r2, r7, #24
   10110:	1d3b      	adds	r3, r7, #4
   10112:	68f9      	ldr	r1, [r7, #12]
   10114:	9100      	str	r1, [sp, #0]
   10116:	f64f 7050 	movw	r0, #65360	; 0xff50
   1011a:	f2c0 0002 	movt	r0, #2
   1011e:	4611      	mov	r1, r2
   10120:	461a      	mov	r2, r3
   10122:	2301      	movs	r3, #1
   10124:	f00d fd86 	bl	1dc34 <FMG_ReadRecord>
   10128:	60b8      	str	r0, [r7, #8]
		    	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
   1012a:	68bb      	ldr	r3, [r7, #8]
   1012c:	2b0a      	cmp	r3, #10
   1012e:	d14d      	bne.n	101cc <FMGReadTransactions+0x338>
			}
		}
				
		// Scrolling DOWN transactions
		// ---------------------------
		if (iKey==GL_KEY_DOWN)                                            // *** Key DOWN ***
   10130:	697a      	ldr	r2, [r7, #20]
   10132:	f64f 035a 	movw	r3, #63578	; 0xf85a
   10136:	429a      	cmp	r2, r3
   10138:	f47f af2c 	bne.w	ff94 <FMGReadTransactions+0x100>
		{
        	if (iIdx > 1)                                                 // Reading transaction
   1013c:	68fb      	ldr	r3, [r7, #12]
   1013e:	2b01      	cmp	r3, #1
   10140:	f77f af28 	ble.w	ff94 <FMGReadTransactions+0x100>
			{
				iIdx--;
   10144:	68fb      	ldr	r3, [r7, #12]
   10146:	3b01      	subs	r3, #1
   10148:	60fb      	str	r3, [r7, #12]
		        lLength = sizeof(ST_TRANSAC);
   1014a:	2340      	movs	r3, #64	; 0x40
   1014c:	607b      	str	r3, [r7, #4]
		    	iRet = FMG_ReadRecord(&xFileInfo, &xTransac, &lLength, FMGMiddle, iIdx);
   1014e:	f107 0218 	add.w	r2, r7, #24
   10152:	1d3b      	adds	r3, r7, #4
   10154:	68f9      	ldr	r1, [r7, #12]
   10156:	9100      	str	r1, [sp, #0]
   10158:	f64f 7050 	movw	r0, #65360	; 0xff50
   1015c:	f2c0 0002 	movt	r0, #2
   10160:	4611      	mov	r1, r2
   10162:	461a      	mov	r2, r3
   10164:	2301      	movs	r3, #1
   10166:	f00d fd65 	bl	1dc34 <FMG_ReadRecord>
   1016a:	60b8      	str	r0, [r7, #8]
		    	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
   1016c:	68bb      	ldr	r3, [r7, #8]
   1016e:	2b0a      	cmp	r3, #10
   10170:	d12c      	bne.n	101cc <FMGReadTransactions+0x338>
			}
		}
    }
   10172:	e70f      	b.n	ff94 <FMGReadTransactions+0x100>
		iKey = GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 30*1000, false);          // Wait for key pressed/touched (shortcut)

		// Exit from batch
		// ---------------
        if(iKey==0)
            break;                                                        // Exit loop if nothing is pressed during 5s
   10174:	bf00      	nop
   10176:	e000      	b.n	1017a <FMGReadTransactions+0x2e6>
        if(iKey==GL_KEY_CANCEL)
            break;                                                        // Exit loop if red key is pressed
   10178:	bf00      	nop
		    	CHECK(iRet==FMG_SUCCESS, lblFmgKO);
			}
		}
    }
    
    goto lblEnd;
   1017a:	e03c      	b.n	101f6 <FMGReadTransactions+0x362>

	// Errors treatment 
    // ****************
lblKO:                               // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   1017c:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   10180:	f2c0 0302 	movt	r3, #2
   10184:	681b      	ldr	r3, [r3, #0]
   10186:	2201      	movs	r2, #1
   10188:	9200      	str	r2, [sp, #0]
   1018a:	f241 3288 	movw	r2, #5000	; 0x1388
   1018e:	9201      	str	r2, [sp, #4]
   10190:	4618      	mov	r0, r3
   10192:	2100      	movs	r1, #0
   10194:	f643 6230 	movw	r2, #15920	; 0x3e30
   10198:	f2c0 0202 	movt	r2, #2
   1019c:	2304      	movs	r3, #4
   1019e:	f011 fa73 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   101a2:	e028      	b.n	101f6 <FMGReadTransactions+0x362>
lblEmpty:                            // Batch file empty
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Batch Empty !!!", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   101a4:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   101a8:	f2c0 0302 	movt	r3, #2
   101ac:	681b      	ldr	r3, [r3, #0]
   101ae:	2201      	movs	r2, #1
   101b0:	9200      	str	r2, [sp, #0]
   101b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
   101b6:	9201      	str	r2, [sp, #4]
   101b8:	4618      	mov	r0, r3
   101ba:	2100      	movs	r1, #0
   101bc:	f643 52bc 	movw	r2, #15804	; 0x3dbc
   101c0:	f2c0 0202 	movt	r2, #2
   101c4:	2303      	movs	r3, #3
   101c6:	f011 fa5f 	bl	21688 <GL_Dialog_Message>
    goto lblEnd;
   101ca:	e014      	b.n	101f6 <FMGReadTransactions+0x362>
lblFmgKO:                            // File Management error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, FMG_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   101cc:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   101d0:	f2c0 0302 	movt	r3, #2
   101d4:	681c      	ldr	r4, [r3, #0]
   101d6:	68b8      	ldr	r0, [r7, #8]
   101d8:	f000 f830 	bl	1023c <FMG_ErrorMsg>
   101dc:	4603      	mov	r3, r0
   101de:	2201      	movs	r2, #1
   101e0:	9200      	str	r2, [sp, #0]
   101e2:	f241 3288 	movw	r2, #5000	; 0x1388
   101e6:	9201      	str	r2, [sp, #4]
   101e8:	4620      	mov	r0, r4
   101ea:	2100      	movs	r1, #0
   101ec:	461a      	mov	r2, r3
   101ee:	2304      	movs	r3, #4
   101f0:	f011 fa4a 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   101f4:	bf00      	nop
lblEnd: 
	if (hScreen)
   101f6:	683b      	ldr	r3, [r7, #0]
   101f8:	2b00      	cmp	r3, #0
   101fa:	d003      	beq.n	10204 <FMGReadTransactions+0x370>
		GoalDestroyScreen(&hScreen); // Destroy screen
   101fc:	463b      	mov	r3, r7
   101fe:	4618      	mov	r0, r3
   10200:	f7fd feb6 	bl	df70 <GoalDestroyScreen>
}
   10204:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   10208:	f2c0 0302 	movt	r3, #2
   1020c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   10210:	681b      	ldr	r3, [r3, #0]
   10212:	429a      	cmp	r2, r3
   10214:	d001      	beq.n	1021a <FMGReadTransactions+0x386>
   10216:	f7f8 fec5 	bl	8fa4 <__stack_chk_fail>
   1021a:	f107 0794 	add.w	r7, r7, #148	; 0x94
   1021e:	46bd      	mov	sp, r7
   10220:	bd90      	pop	{r4, r7, pc}
   10222:	bf00      	nop
   10224:	00023a18 	.word	0x00023a18
   10228:	000236bc 	.word	0x000236bc
   1022c:	00023768 	.word	0x00023768
   10230:	00023814 	.word	0x00023814
   10234:	000238c0 	.word	0x000238c0
   10238:	0002396c 	.word	0x0002396c

0001023c <FMG_ErrorMsg>:
//  This function has return value.
//    A message string regarding the error value.
//****************************************************************************

char* FMG_ErrorMsg (int iValue) 
{
   1023c:	b580      	push	{r7, lr}
   1023e:	b084      	sub	sp, #16
   10240:	af00      	add	r7, sp, #0
   10242:	6078      	str	r0, [r7, #4]
   10244:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   10248:	f2c0 0302 	movt	r3, #2
   1024c:	681b      	ldr	r3, [r3, #0]
   1024e:	60fb      	str	r3, [r7, #12]
    // ***************
	char *pcError;
	
	// List error messages 
    // *******************
	switch (iValue)
   10250:	687b      	ldr	r3, [r7, #4]
   10252:	3301      	adds	r3, #1
   10254:	2b20      	cmp	r3, #32
   10256:	f200 80c3 	bhi.w	103e0 <FMG_ErrorMsg+0x1a4>
   1025a:	a201      	add	r2, pc, #4	; (adr r2, 10260 <FMG_ErrorMsg+0x24>)
   1025c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10260:	000102e5 	.word	0x000102e5
   10264:	000103e1 	.word	0x000103e1
   10268:	000103e1 	.word	0x000103e1
   1026c:	000103e1 	.word	0x000103e1
   10270:	000103e1 	.word	0x000103e1
   10274:	000103e1 	.word	0x000103e1
   10278:	000103e1 	.word	0x000103e1
   1027c:	000103e1 	.word	0x000103e1
   10280:	000103e1 	.word	0x000103e1
   10284:	000103e1 	.word	0x000103e1
   10288:	000103e1 	.word	0x000103e1
   1028c:	000103e1 	.word	0x000103e1
   10290:	000102f1 	.word	0x000102f1
   10294:	000102fd 	.word	0x000102fd
   10298:	00010309 	.word	0x00010309
   1029c:	00010315 	.word	0x00010315
   102a0:	00010321 	.word	0x00010321
   102a4:	0001032d 	.word	0x0001032d
   102a8:	00010339 	.word	0x00010339
   102ac:	00010345 	.word	0x00010345
   102b0:	00010351 	.word	0x00010351
   102b4:	0001035d 	.word	0x0001035d
   102b8:	00010369 	.word	0x00010369
   102bc:	00010375 	.word	0x00010375
   102c0:	00010381 	.word	0x00010381
   102c4:	0001038d 	.word	0x0001038d
   102c8:	00010399 	.word	0x00010399
   102cc:	000103a5 	.word	0x000103a5
   102d0:	000103b1 	.word	0x000103b1
   102d4:	000103bd 	.word	0x000103bd
   102d8:	000103c9 	.word	0x000103c9
   102dc:	000103e1 	.word	0x000103e1
   102e0:	000103d5 	.word	0x000103d5
	{
	case -1:                                   pcError="MEMORY FAILED";    break; // Key unknown from the data base
   102e4:	f643 63d4 	movw	r3, #16084	; 0x3ed4
   102e8:	f2c0 0302 	movt	r3, #2
   102ec:	60bb      	str	r3, [r7, #8]
   102ee:	e07d      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	                       // ERRORS CODES
    // *** Generic errors ***
	case FMG_FILE_DOES_NOT_EXIST:              pcError="Telium_File_t NOT EXIST";   break;
   102f0:	f643 63e4 	movw	r3, #16100	; 0x3ee4
   102f4:	f2c0 0302 	movt	r3, #2
   102f8:	60bb      	str	r3, [r7, #8]
   102fa:	e077      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_FILE_ALREADY_EXIST:               pcError="Telium_File_t YET EXIST";   break;
   102fc:	f643 63fc 	movw	r3, #16124	; 0x3efc
   10300:	f2c0 0302 	movt	r3, #2
   10304:	60bb      	str	r3, [r7, #8]
   10306:	e071      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_BAD_RECORD_TYPE:                  pcError="BAD RECORD TYPE";  break;
   10308:	f643 7314 	movw	r3, #16148	; 0x3f14
   1030c:	f2c0 0302 	movt	r3, #2
   10310:	60bb      	str	r3, [r7, #8]
   10312:	e06b      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_BAD_CHECKSUM_TYPE:                pcError="BAD CHKSUM TYPE";  break;
   10314:	f643 7324 	movw	r3, #16164	; 0x3f24
   10318:	f2c0 0302 	movt	r3, #2
   1031c:	60bb      	str	r3, [r7, #8]
   1031e:	e065      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_BAD_FILE_TYPE:                    pcError="BAD Telium_File_t TYPE";    break;
   10320:	f643 7334 	movw	r3, #16180	; 0x3f34
   10324:	f2c0 0302 	movt	r3, #2
   10328:	60bb      	str	r3, [r7, #8]
   1032a:	e05f      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_BAD_RECORD_POSITION:              pcError="BAD RECORD INDEX"; break;
   1032c:	f643 734c 	movw	r3, #16204	; 0x3f4c
   10330:	f2c0 0302 	movt	r3, #2
   10334:	60bb      	str	r3, [r7, #8]
   10336:	e059      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_BAD_CREATION_PARAM:               pcError="BAD CREATE PARAM"; break;
   10338:	f643 7360 	movw	r3, #16224	; 0x3f60
   1033c:	f2c0 0302 	movt	r3, #2
   10340:	60bb      	str	r3, [r7, #8]
   10342:	e053      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_BAD_PATH:                         pcError="BAD PATH";         break;
   10344:	f643 7374 	movw	r3, #16244	; 0x3f74
   10348:	f2c0 0302 	movt	r3, #2
   1034c:	60bb      	str	r3, [r7, #8]
   1034e:	e04d      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_OPEN_FILE_PROBLEM:                pcError="OPEN Telium_File_t ERROR";  break;
   10350:	f643 7380 	movw	r3, #16256	; 0x3f80
   10354:	f2c0 0302 	movt	r3, #2
   10358:	60bb      	str	r3, [r7, #8]
   1035a:	e047      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_CREATE_FILE_PROBLEM:              pcError="CREATE Telium_File_t ERR";  break;
   1035c:	f643 739c 	movw	r3, #16284	; 0x3f9c
   10360:	f2c0 0302 	movt	r3, #2
   10364:	60bb      	str	r3, [r7, #8]
   10366:	e041      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_DELETE_FILE_PROBLEM:              pcError="DELETE Telium_File_t ERR";  break;
   10368:	f643 73b8 	movw	r3, #16312	; 0x3fb8
   1036c:	f2c0 0302 	movt	r3, #2
   10370:	60bb      	str	r3, [r7, #8]
   10372:	e03b      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_NB_FILE_PROBLEM:                  pcError="Telium_File_t INDEX ERROR"; break;
   10374:	f643 73d4 	movw	r3, #16340	; 0x3fd4
   10378:	f2c0 0302 	movt	r3, #2
   1037c:	60bb      	str	r3, [r7, #8]
   1037e:	e035      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_MANAGEMENT_ERROR:                 pcError="Telium_File_t ERROR";       break;
   10380:	f643 73f0 	movw	r3, #16368	; 0x3ff0
   10384:	f2c0 0302 	movt	r3, #2
   10388:	60bb      	str	r3, [r7, #8]
   1038a:	e02f      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_ADD_RECORD_ERROR:                 pcError="ADD RECORD ERR";   break;
   1038c:	f244 0304 	movw	r3, #16388	; 0x4004
   10390:	f2c0 0302 	movt	r3, #2
   10394:	60bb      	str	r3, [r7, #8]
   10396:	e029      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_READ_RECORD_ERROR:                pcError="READ RECORD ERR";  break;
   10398:	f244 0314 	movw	r3, #16404	; 0x4014
   1039c:	f2c0 0302 	movt	r3, #2
   103a0:	60bb      	str	r3, [r7, #8]
   103a2:	e023      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_DELETE_RECORD_ERROR:              pcError="DEL RECORD ERR";   break;
   103a4:	f244 0324 	movw	r3, #16420	; 0x4024
   103a8:	f2c0 0302 	movt	r3, #2
   103ac:	60bb      	str	r3, [r7, #8]
   103ae:	e01d      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_CHECKSUM_PROBLEM:                 pcError="CHECKSUM ERROR";   break;
   103b0:	f244 0334 	movw	r3, #16436	; 0x4034
   103b4:	f2c0 0302 	movt	r3, #2
   103b8:	60bb      	str	r3, [r7, #8]
   103ba:	e017      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_CORRUPTED_FILE:                   pcError="CORRUPTED Telium_File_t";   break;
   103bc:	f244 0344 	movw	r3, #16452	; 0x4044
   103c0:	f2c0 0302 	movt	r3, #2
   103c4:	60bb      	str	r3, [r7, #8]
   103c6:	e011      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_CORRUPTED_RECORD:                 pcError="CORRUPTED RECORD"; break;
   103c8:	f244 035c 	movw	r3, #16476	; 0x405c
   103cc:	f2c0 0302 	movt	r3, #2
   103d0:	60bb      	str	r3, [r7, #8]
   103d2:	e00b      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	case FMG_INIT_KO:                          pcError="FMG INIT ERROR";   break;
   103d4:	f244 0370 	movw	r3, #16496	; 0x4070
   103d8:	f2c0 0302 	movt	r3, #2
   103dc:	60bb      	str	r3, [r7, #8]
   103de:	e005      	b.n	103ec <FMG_ErrorMsg+0x1b0>
	// *** Other errors
	default:                                   pcError="ERROR UNKNOWN";    break;
   103e0:	f244 0380 	movw	r3, #16512	; 0x4080
   103e4:	f2c0 0302 	movt	r3, #2
   103e8:	60bb      	str	r3, [r7, #8]
   103ea:	bf00      	nop
	}
	
	return pcError;
   103ec:	68bb      	ldr	r3, [r7, #8]
}
   103ee:	4618      	mov	r0, r3
   103f0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   103f4:	f2c0 0302 	movt	r3, #2
   103f8:	68fa      	ldr	r2, [r7, #12]
   103fa:	681b      	ldr	r3, [r3, #0]
   103fc:	429a      	cmp	r2, r3
   103fe:	d001      	beq.n	10404 <FMG_ErrorMsg+0x1c8>
   10400:	f7f8 fdd0 	bl	8fa4 <__stack_chk_fail>
   10404:	f107 0710 	add.w	r7, r7, #16
   10408:	46bd      	mov	sp, r7
   1040a:	bd80      	pop	{r7, pc}

0001040c <LL_ErrorMsg>:
//  This function has return value.
//    A message string regarding the error value.
//****************************************************************************

char* LL_ErrorMsg (int iValue) 
{
   1040c:	b580      	push	{r7, lr}
   1040e:	b084      	sub	sp, #16
   10410:	af00      	add	r7, sp, #0
   10412:	6078      	str	r0, [r7, #4]
   10414:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   10418:	f2c0 0302 	movt	r3, #2
   1041c:	681b      	ldr	r3, [r3, #0]
   1041e:	60fb      	str	r3, [r7, #12]
    // ***************
	char *pcError;
	
	// List error messages 
    // *******************
	switch (iValue)
   10420:	687b      	ldr	r3, [r7, #4]
   10422:	f46f 727e 	mvn.w	r2, #1016	; 0x3f8
   10426:	4293      	cmp	r3, r2
   10428:	f000 8294 	beq.w	10954 <LL_ErrorMsg+0x548>
   1042c:	f46f 727e 	mvn.w	r2, #1016	; 0x3f8
   10430:	4293      	cmp	r3, r2
   10432:	f300 80f9 	bgt.w	10628 <LL_ErrorMsg+0x21c>
   10436:	f64f 22e4 	movw	r2, #64228	; 0xfae4
   1043a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1043e:	4293      	cmp	r3, r2
   10440:	f000 82ee 	beq.w	10a20 <LL_ErrorMsg+0x614>
   10444:	f64f 22e4 	movw	r2, #64228	; 0xfae4
   10448:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1044c:	4293      	cmp	r3, r2
   1044e:	dc78      	bgt.n	10542 <LL_ErrorMsg+0x136>
   10450:	f64f 12bd 	movw	r2, #63933	; 0xf9bd
   10454:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10458:	4293      	cmp	r3, r2
   1045a:	f000 8317 	beq.w	10a8c <LL_ErrorMsg+0x680>
   1045e:	f64f 12bd 	movw	r2, #63933	; 0xf9bd
   10462:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10466:	4293      	cmp	r3, r2
   10468:	dc35      	bgt.n	104d6 <LL_ErrorMsg+0xca>
   1046a:	f64f 125a 	movw	r2, #63834	; 0xf95a
   1046e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10472:	4293      	cmp	r3, r2
   10474:	f000 8322 	beq.w	10abc <LL_ErrorMsg+0x6b0>
   10478:	f64f 125a 	movw	r2, #63834	; 0xf95a
   1047c:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10480:	4293      	cmp	r3, r2
   10482:	dc12      	bgt.n	104aa <LL_ErrorMsg+0x9e>
   10484:	f513 6fe1 	cmn.w	r3, #1800	; 0x708
   10488:	f000 8324 	beq.w	10ad4 <LL_ErrorMsg+0x6c8>
   1048c:	f64f 1259 	movw	r2, #63833	; 0xf959
   10490:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10494:	4293      	cmp	r3, r2
   10496:	f000 8317 	beq.w	10ac8 <LL_ErrorMsg+0x6bc>
   1049a:	f64d 02f0 	movw	r2, #55536	; 0xd8f0
   1049e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   104a2:	4293      	cmp	r3, r2
   104a4:	f000 831c 	beq.w	10ae0 <LL_ErrorMsg+0x6d4>
   104a8:	e320      	b.n	10aec <LL_ErrorMsg+0x6e0>
   104aa:	f64f 12bb 	movw	r2, #63931	; 0xf9bb
   104ae:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   104b2:	4293      	cmp	r3, r2
   104b4:	f000 82f6 	beq.w	10aa4 <LL_ErrorMsg+0x698>
   104b8:	f64f 12bb 	movw	r2, #63931	; 0xf9bb
   104bc:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   104c0:	4293      	cmp	r3, r2
   104c2:	f300 82e9 	bgt.w	10a98 <LL_ErrorMsg+0x68c>
   104c6:	f64f 125b 	movw	r2, #63835	; 0xf95b
   104ca:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   104ce:	4293      	cmp	r3, r2
   104d0:	f000 82ee 	beq.w	10ab0 <LL_ErrorMsg+0x6a4>
   104d4:	e30a      	b.n	10aec <LL_ErrorMsg+0x6e0>
   104d6:	f64f 2222 	movw	r2, #64034	; 0xfa22
   104da:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   104de:	4293      	cmp	r3, r2
   104e0:	f000 82bc 	beq.w	10a5c <LL_ErrorMsg+0x650>
   104e4:	f64f 2222 	movw	r2, #64034	; 0xfa22
   104e8:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   104ec:	4293      	cmp	r3, r2
   104ee:	dc0e      	bgt.n	1050e <LL_ErrorMsg+0x102>
   104f0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   104f4:	4293      	cmp	r3, r2
   104f6:	f000 82bd 	beq.w	10a74 <LL_ErrorMsg+0x668>
   104fa:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   104fe:	4293      	cmp	r3, r2
   10500:	f2c0 82be 	blt.w	10a80 <LL_ErrorMsg+0x674>
   10504:	f513 6fc8 	cmn.w	r3, #1600	; 0x640
   10508:	f000 82ae 	beq.w	10a68 <LL_ErrorMsg+0x65c>
   1050c:	e2ee      	b.n	10aec <LL_ErrorMsg+0x6e0>
   1050e:	f64f 2224 	movw	r2, #64036	; 0xfa24
   10512:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10516:	4293      	cmp	r3, r2
   10518:	f000 8294 	beq.w	10a44 <LL_ErrorMsg+0x638>
   1051c:	f64f 2224 	movw	r2, #64036	; 0xfa24
   10520:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10524:	4293      	cmp	r3, r2
   10526:	f2c0 8293 	blt.w	10a50 <LL_ErrorMsg+0x644>
   1052a:	f513 6faf 	cmn.w	r3, #1400	; 0x578
   1052e:	f000 8283 	beq.w	10a38 <LL_ErrorMsg+0x62c>
   10532:	f64f 22e3 	movw	r2, #64227	; 0xfae3
   10536:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1053a:	4293      	cmp	r3, r2
   1053c:	f000 8276 	beq.w	10a2c <LL_ErrorMsg+0x620>
   10540:	e2d4      	b.n	10aec <LL_ErrorMsg+0x6e0>
   10542:	f64f 22ec 	movw	r2, #64236	; 0xfaec
   10546:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1054a:	4293      	cmp	r3, r2
   1054c:	f000 8238 	beq.w	109c0 <LL_ErrorMsg+0x5b4>
   10550:	f64f 22ec 	movw	r2, #64236	; 0xfaec
   10554:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10558:	4293      	cmp	r3, r2
   1055a:	dc24      	bgt.n	105a6 <LL_ErrorMsg+0x19a>
   1055c:	f513 6fa3 	cmn.w	r3, #1304	; 0x518
   10560:	f000 8246 	beq.w	109f0 <LL_ErrorMsg+0x5e4>
   10564:	f513 6fa3 	cmn.w	r3, #1304	; 0x518
   10568:	dc0e      	bgt.n	10588 <LL_ErrorMsg+0x17c>
   1056a:	f64f 22e6 	movw	r2, #64230	; 0xfae6
   1056e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10572:	4293      	cmp	r3, r2
   10574:	f000 8248 	beq.w	10a08 <LL_ErrorMsg+0x5fc>
   10578:	f64f 22e6 	movw	r2, #64230	; 0xfae6
   1057c:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10580:	4293      	cmp	r3, r2
   10582:	f300 823b 	bgt.w	109fc <LL_ErrorMsg+0x5f0>
   10586:	e245      	b.n	10a14 <LL_ErrorMsg+0x608>
   10588:	f64f 22ea 	movw	r2, #64234	; 0xfaea
   1058c:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10590:	4293      	cmp	r3, r2
   10592:	f000 8221 	beq.w	109d8 <LL_ErrorMsg+0x5cc>
   10596:	f64f 22ea 	movw	r2, #64234	; 0xfaea
   1059a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1059e:	4293      	cmp	r3, r2
   105a0:	f300 8214 	bgt.w	109cc <LL_ErrorMsg+0x5c0>
   105a4:	e21e      	b.n	109e4 <LL_ErrorMsg+0x5d8>
   105a6:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
   105aa:	f000 81f1 	beq.w	10990 <LL_ErrorMsg+0x584>
   105ae:	f513 6f96 	cmn.w	r3, #1200	; 0x4b0
   105b2:	dc15      	bgt.n	105e0 <LL_ErrorMsg+0x1d4>
   105b4:	f64f 324e 	movw	r2, #64334	; 0xfb4e
   105b8:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   105bc:	4293      	cmp	r3, r2
   105be:	f000 81f3 	beq.w	109a8 <LL_ErrorMsg+0x59c>
   105c2:	f64f 324e 	movw	r2, #64334	; 0xfb4e
   105c6:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   105ca:	4293      	cmp	r3, r2
   105cc:	f300 81e6 	bgt.w	1099c <LL_ErrorMsg+0x590>
   105d0:	f64f 324d 	movw	r2, #64333	; 0xfb4d
   105d4:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   105d8:	4293      	cmp	r3, r2
   105da:	f000 81eb 	beq.w	109b4 <LL_ErrorMsg+0x5a8>
   105de:	e285      	b.n	10aec <LL_ErrorMsg+0x6e0>
   105e0:	f64f 32b4 	movw	r2, #64436	; 0xfbb4
   105e4:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   105e8:	4293      	cmp	r3, r2
   105ea:	f000 81c5 	beq.w	10978 <LL_ErrorMsg+0x56c>
   105ee:	f64f 32b4 	movw	r2, #64436	; 0xfbb4
   105f2:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   105f6:	4293      	cmp	r3, r2
   105f8:	dc07      	bgt.n	1060a <LL_ErrorMsg+0x1fe>
   105fa:	f64f 32b3 	movw	r2, #64435	; 0xfbb3
   105fe:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10602:	4293      	cmp	r3, r2
   10604:	f000 81be 	beq.w	10984 <LL_ErrorMsg+0x578>
   10608:	e270      	b.n	10aec <LL_ErrorMsg+0x6e0>
   1060a:	f64f 4205 	movw	r2, #64517	; 0xfc05
   1060e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10612:	4293      	cmp	r3, r2
   10614:	f000 81aa 	beq.w	1096c <LL_ErrorMsg+0x560>
   10618:	f64f 4206 	movw	r2, #64518	; 0xfc06
   1061c:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10620:	4293      	cmp	r3, r2
   10622:	f000 819d 	beq.w	10960 <LL_ErrorMsg+0x554>
   10626:	e261      	b.n	10aec <LL_ErrorMsg+0x6e0>
   10628:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
   1062c:	f000 812c 	beq.w	10888 <LL_ErrorMsg+0x47c>
   10630:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
   10634:	dc62      	bgt.n	106fc <LL_ErrorMsg+0x2f0>
   10636:	f46f 727c 	mvn.w	r2, #1008	; 0x3f0
   1063a:	4293      	cmp	r3, r2
   1063c:	f000 815a 	beq.w	108f4 <LL_ErrorMsg+0x4e8>
   10640:	f46f 727c 	mvn.w	r2, #1008	; 0x3f0
   10644:	4293      	cmp	r3, r2
   10646:	dc26      	bgt.n	10696 <LL_ErrorMsg+0x28a>
   10648:	f46f 727d 	mvn.w	r2, #1012	; 0x3f4
   1064c:	4293      	cmp	r3, r2
   1064e:	f000 8169 	beq.w	10924 <LL_ErrorMsg+0x518>
   10652:	f46f 727d 	mvn.w	r2, #1012	; 0x3f4
   10656:	4293      	cmp	r3, r2
   10658:	dc0e      	bgt.n	10678 <LL_ErrorMsg+0x26c>
   1065a:	f64f 4209 	movw	r2, #64521	; 0xfc09
   1065e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10662:	4293      	cmp	r3, r2
   10664:	f000 816a 	beq.w	1093c <LL_ErrorMsg+0x530>
   10668:	f64f 4209 	movw	r2, #64521	; 0xfc09
   1066c:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10670:	4293      	cmp	r3, r2
   10672:	f300 815d 	bgt.w	10930 <LL_ErrorMsg+0x524>
   10676:	e167      	b.n	10948 <LL_ErrorMsg+0x53c>
   10678:	f64f 420d 	movw	r2, #64525	; 0xfc0d
   1067c:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10680:	4293      	cmp	r3, r2
   10682:	f000 8143 	beq.w	1090c <LL_ErrorMsg+0x500>
   10686:	f64f 420d 	movw	r2, #64525	; 0xfc0d
   1068a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1068e:	4293      	cmp	r3, r2
   10690:	f300 8136 	bgt.w	10900 <LL_ErrorMsg+0x4f4>
   10694:	e140      	b.n	10918 <LL_ErrorMsg+0x50c>
   10696:	f46f 727b 	mvn.w	r2, #1004	; 0x3ec
   1069a:	4293      	cmp	r3, r2
   1069c:	f000 8112 	beq.w	108c4 <LL_ErrorMsg+0x4b8>
   106a0:	f46f 727b 	mvn.w	r2, #1004	; 0x3ec
   106a4:	4293      	cmp	r3, r2
   106a6:	dc0e      	bgt.n	106c6 <LL_ErrorMsg+0x2ba>
   106a8:	f64f 4211 	movw	r2, #64529	; 0xfc11
   106ac:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   106b0:	4293      	cmp	r3, r2
   106b2:	f000 8113 	beq.w	108dc <LL_ErrorMsg+0x4d0>
   106b6:	f64f 4211 	movw	r2, #64529	; 0xfc11
   106ba:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   106be:	4293      	cmp	r3, r2
   106c0:	f300 8106 	bgt.w	108d0 <LL_ErrorMsg+0x4c4>
   106c4:	e110      	b.n	108e8 <LL_ErrorMsg+0x4dc>
   106c6:	f64f 4215 	movw	r2, #64533	; 0xfc15
   106ca:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   106ce:	4293      	cmp	r3, r2
   106d0:	f000 80ec 	beq.w	108ac <LL_ErrorMsg+0x4a0>
   106d4:	f64f 4215 	movw	r2, #64533	; 0xfc15
   106d8:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   106dc:	4293      	cmp	r3, r2
   106de:	f2c0 80eb 	blt.w	108b8 <LL_ErrorMsg+0x4ac>
   106e2:	f64f 4216 	movw	r2, #64534	; 0xfc16
   106e6:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   106ea:	4293      	cmp	r3, r2
   106ec:	f000 80d8 	beq.w	108a0 <LL_ErrorMsg+0x494>
   106f0:	f46f 727a 	mvn.w	r2, #1000	; 0x3e8
   106f4:	4293      	cmp	r3, r2
   106f6:	f000 80cd 	beq.w	10894 <LL_ErrorMsg+0x488>
   106fa:	e1f7      	b.n	10aec <LL_ErrorMsg+0x6e0>
   106fc:	f513 7f75 	cmn.w	r3, #980	; 0x3d4
   10700:	d07a      	beq.n	107f8 <LL_ErrorMsg+0x3ec>
   10702:	f513 7f75 	cmn.w	r3, #980	; 0x3d4
   10706:	dc31      	bgt.n	1076c <LL_ErrorMsg+0x360>
   10708:	f64f 4222 	movw	r2, #64546	; 0xfc22
   1070c:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10710:	4293      	cmp	r3, r2
   10712:	d059      	beq.n	107c8 <LL_ErrorMsg+0x3bc>
   10714:	f64f 4222 	movw	r2, #64546	; 0xfc22
   10718:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1071c:	4293      	cmp	r3, r2
   1071e:	dc0a      	bgt.n	10736 <LL_ErrorMsg+0x32a>
   10720:	f513 7f78 	cmn.w	r3, #992	; 0x3e0
   10724:	d05c      	beq.n	107e0 <LL_ErrorMsg+0x3d4>
   10726:	f513 7f78 	cmn.w	r3, #992	; 0x3e0
   1072a:	dc53      	bgt.n	107d4 <LL_ErrorMsg+0x3c8>
   1072c:	f46f 7278 	mvn.w	r2, #992	; 0x3e0
   10730:	4293      	cmp	r3, r2
   10732:	d05b      	beq.n	107ec <LL_ErrorMsg+0x3e0>
   10734:	e1da      	b.n	10aec <LL_ErrorMsg+0x6e0>
   10736:	f64f 4229 	movw	r2, #64553	; 0xfc29
   1073a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1073e:	4293      	cmp	r3, r2
   10740:	d06c      	beq.n	1081c <LL_ErrorMsg+0x410>
   10742:	f64f 4229 	movw	r2, #64553	; 0xfc29
   10746:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1074a:	4293      	cmp	r3, r2
   1074c:	dc03      	bgt.n	10756 <LL_ErrorMsg+0x34a>
   1074e:	f513 7f76 	cmn.w	r3, #984	; 0x3d8
   10752:	d069      	beq.n	10828 <LL_ErrorMsg+0x41c>
   10754:	e1ca      	b.n	10aec <LL_ErrorMsg+0x6e0>
   10756:	f64f 422a 	movw	r2, #64554	; 0xfc2a
   1075a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1075e:	4293      	cmp	r3, r2
   10760:	d056      	beq.n	10810 <LL_ErrorMsg+0x404>
   10762:	f46f 7275 	mvn.w	r2, #980	; 0x3d4
   10766:	4293      	cmp	r3, r2
   10768:	d04c      	beq.n	10804 <LL_ErrorMsg+0x3f8>
   1076a:	e1bf      	b.n	10aec <LL_ErrorMsg+0x6e0>
   1076c:	f513 7f70 	cmn.w	r3, #960	; 0x3c0
   10770:	d072      	beq.n	10858 <LL_ErrorMsg+0x44c>
   10772:	f513 7f70 	cmn.w	r3, #960	; 0x3c0
   10776:	dc0d      	bgt.n	10794 <LL_ErrorMsg+0x388>
   10778:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
   1077c:	4293      	cmp	r3, r2
   1077e:	d05f      	beq.n	10840 <LL_ErrorMsg+0x434>
   10780:	f513 7f72 	cmn.w	r3, #968	; 0x3c8
   10784:	d062      	beq.n	1084c <LL_ErrorMsg+0x440>
   10786:	f64f 4236 	movw	r2, #64566	; 0xfc36
   1078a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1078e:	4293      	cmp	r3, r2
   10790:	d050      	beq.n	10834 <LL_ErrorMsg+0x428>
   10792:	e1ab      	b.n	10aec <LL_ErrorMsg+0x6e0>
   10794:	f64f 4242 	movw	r2, #64578	; 0xfc42
   10798:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   1079c:	4293      	cmp	r3, r2
   1079e:	d067      	beq.n	10870 <LL_ErrorMsg+0x464>
   107a0:	f64f 4242 	movw	r2, #64578	; 0xfc42
   107a4:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   107a8:	4293      	cmp	r3, r2
   107aa:	db5b      	blt.n	10864 <LL_ErrorMsg+0x458>
   107ac:	f46f 726f 	mvn.w	r2, #956	; 0x3bc
   107b0:	4293      	cmp	r3, r2
   107b2:	d063      	beq.n	1087c <LL_ErrorMsg+0x470>
   107b4:	f1b3 3fff 	cmp.w	r3, #4294967295
   107b8:	f040 8198 	bne.w	10aec <LL_ErrorMsg+0x6e0>
	{
	case -1:                                    pcError="";                 break;  // Timeout/Cancel at GPRS level
   107bc:	f244 0390 	movw	r3, #16528	; 0x4090
   107c0:	f2c0 0302 	movt	r3, #2
   107c4:	60bb      	str	r3, [r7, #8]
   107c6:	e197      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	                       // STATUS CODES (re-define in Training.h)
	// *** GPRS status ***
	case LL_STATUS_GPRS_NO_SIM:                 pcError="NO SIM";           break;  // No SIM card is inserted in the terminal
   107c8:	f244 0394 	movw	r3, #16532	; 0x4094
   107cc:	f2c0 0302 	movt	r3, #2
   107d0:	60bb      	str	r3, [r7, #8]
   107d2:	e191      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_STATUS_GPRS_ERR_SIM_LOCK:           pcError="SIM LOCKED";       break;  // The SIM card is locked, enter PUK from Manager menu
   107d4:	f244 039c 	movw	r3, #16540	; 0x409c
   107d8:	f2c0 0302 	movt	r3, #2
   107dc:	60bb      	str	r3, [r7, #8]
   107de:	e18b      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_STATUS_GPRS_ERR_PPP:                pcError="GPRS PPP ERROR";   break;  // Error occurred during the PPP link establishment
   107e0:	f244 03a8 	movw	r3, #16552	; 0x40a8
   107e4:	f2c0 0302 	movt	r3, #2
   107e8:	60bb      	str	r3, [r7, #8]
   107ea:	e185      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_STATUS_GPRS_ERR_UNKNOWN:            pcError="GPRS UNKNOWN ERR"; break;  // Error GPRS status unknown
   107ec:	f244 03b8 	movw	r3, #16568	; 0x40b8
   107f0:	f2c0 0302 	movt	r3, #2
   107f4:	60bb      	str	r3, [r7, #8]
   107f6:	e17f      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	// *** ETHERNET status ***
	case LL_STATUS_ETH_AVAILABLE:               pcError="LINK AVAILABLE";   break;  // The Ethernet link is available and ready to perform a communication
   107f8:	f244 03cc 	movw	r3, #16588	; 0x40cc
   107fc:	f2c0 0302 	movt	r3, #2
   10800:	60bb      	str	r3, [r7, #8]
   10802:	e179      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_STATUS_ETH_NO_DEFAULT_ROUTE:        pcError="NO DEFAULT ROUTE"; break;  // No default route is configured for Ethernet
   10804:	f244 03dc 	movw	r3, #16604	; 0x40dc
   10808:	f2c0 0302 	movt	r3, #2
   1080c:	60bb      	str	r3, [r7, #8]
   1080e:	e173      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_STATUS_ETH_NOT_PLUGGED:             pcError="CABLE NOT PLUG";   break;  // The Ethernet cable is not plugged to the terminal
   10810:	f244 03f0 	movw	r3, #16624	; 0x40f0
   10814:	f2c0 0302 	movt	r3, #2
   10818:	60bb      	str	r3, [r7, #8]
   1081a:	e16d      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_STATUS_ETH_BASE_NOT_READY:          pcError="BASE NOT READY";   break;  // The link between the Ethernet base and the terminal is not ready yet
   1081c:	f244 1300 	movw	r3, #16640	; 0x4100
   10820:	f2c0 0302 	movt	r3, #2
   10824:	60bb      	str	r3, [r7, #8]
   10826:	e167      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_STATUS_ETH_OUT_OF_BASE:             pcError="OUT OF BASE";      break;  // An Ethernet link is available through a base, but the terminal needs to be on its cradle to use it
   10828:	f244 1310 	movw	r3, #16656	; 0x4110
   1082c:	f2c0 0302 	movt	r3, #2
   10830:	60bb      	str	r3, [r7, #8]
   10832:	e161      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	// *** PHYSICAL status ***
	case LL_STATUS_PHY_PERIPHERAL_BUSY:         pcError="PERIPH BUSY";      break;  // The specified interface of the base is already used
   10834:	f244 131c 	movw	r3, #16668	; 0x411c
   10838:	f2c0 0302 	movt	r3, #2
   1083c:	60bb      	str	r3, [r7, #8]
   1083e:	e15b      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_STATUS_PHY_PERIPHERAL_OUT_OF_BASE:  pcError="OUT OF BASE";      break;  // The peripheral can't be used since the terminal is not on its cradle
   10840:	f244 1310 	movw	r3, #16656	; 0x4110
   10844:	f2c0 0302 	movt	r3, #2
   10848:	60bb      	str	r3, [r7, #8]
   1084a:	e155      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_STATUS_PHY_CONVERTER_NOT_PLUGGED:   pcError="CONVERT NOT PLUG"; break;  // The converter is unplugged
   1084c:	f244 1328 	movw	r3, #16680	; 0x4128
   10850:	f2c0 0302 	movt	r3, #2
   10854:	60bb      	str	r3, [r7, #8]
   10856:	e14f      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	// *** BLUETOOTH status ***
	case LL_STATUS_BT_NO_BASE_ASSOCIATED:       pcError="NO BASE ASSOCIAT"; break;  // No base is associated with the terminal
   10858:	f244 133c 	movw	r3, #16700	; 0x413c
   1085c:	f2c0 0302 	movt	r3, #2
   10860:	60bb      	str	r3, [r7, #8]
   10862:	e149      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_STATUS_BT_PERIPHERAL_NOT_AVAILABLE: pcError="PB BASE ASSOCIAT"; break;  // The associated base does not have the specified communication interface
   10864:	f244 1350 	movw	r3, #16720	; 0x4150
   10868:	f2c0 0302 	movt	r3, #2
   1086c:	60bb      	str	r3, [r7, #8]
   1086e:	e143      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_STATUS_BT_PERIPHERAL_BUSY:          pcError="BASE BUSY";        break;  // The specified interface of the base is already used
   10870:	f244 1364 	movw	r3, #16740	; 0x4164
   10874:	f2c0 0302 	movt	r3, #2
   10878:	60bb      	str	r3, [r7, #8]
   1087a:	e13d      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_STATUS_BT_BASE_NOT_AVAILABLE:       pcError="BASE UNKNOWN";     break;  // The specified base is not available
   1087c:	f244 1370 	movw	r3, #16752	; 0x4170
   10880:	f2c0 0302 	movt	r3, #2
   10884:	60bb      	str	r3, [r7, #8]
   10886:	e137      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	                       // ERRORS CODES
    // *** Generic errors ***
	case LL_ERROR_INTERNAL_RESOURCE:            pcError="RESOURCE ERROR";   break;  // Error in resource allocation (Refer the diagnostic ticket for more information)
   10888:	f244 1380 	movw	r3, #16768	; 0x4180
   1088c:	f2c0 0302 	movt	r3, #2
   10890:	60bb      	str	r3, [r7, #8]
   10892:	e131      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_UNKNOWN_CONFIG:               pcError="UNKOWN CONFIG";    break;  // Unknown Link Layer configuration
   10894:	f244 1390 	movw	r3, #16784	; 0x4190
   10898:	f2c0 0302 	movt	r3, #2
   1089c:	60bb      	str	r3, [r7, #8]
   1089e:	e12b      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_INVALID_HANDLE:               pcError="INVALID HANDLE";   break;  // The specified handle is not valid
   108a0:	f244 13a0 	movw	r3, #16800	; 0x41a0
   108a4:	f2c0 0302 	movt	r3, #2
   108a8:	60bb      	str	r3, [r7, #8]
   108aa:	e125      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_SERVICE_NOT_SUPPORTED:        pcError="INVALID SERVICE";  break;  // Service from the Link Layer is not supported
   108ac:	f244 13b0 	movw	r3, #16816	; 0x41b0
   108b0:	f2c0 0302 	movt	r3, #2
   108b4:	60bb      	str	r3, [r7, #8]
   108b6:	e11f      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_TIMEOUT:                      pcError="TIMEOUT/CANCEL";   break;  // A timeout has expired
   108b8:	f244 13c0 	movw	r3, #16832	; 0x41c0
   108bc:	f2c0 0302 	movt	r3, #2
   108c0:	60bb      	str	r3, [r7, #8]
   108c2:	e119      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_INVALID_PARAMETER:            pcError="INVALID PARAM";    break;  // The specified parameter is not valid
   108c4:	f244 13d0 	movw	r3, #16848	; 0x41d0
   108c8:	f2c0 0302 	movt	r3, #2
   108cc:	60bb      	str	r3, [r7, #8]
   108ce:	e113      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_NOT_CONNECTED:                pcError="NOT CONNECT";      break;  // The communication has been disconnected (The link has been disconnected by the server)
   108d0:	f244 13e0 	movw	r3, #16864	; 0x41e0
   108d4:	f2c0 0302 	movt	r3, #2
   108d8:	60bb      	str	r3, [r7, #8]
   108da:	e10d      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_ALREADY_CONNECTED:            pcError="ALREADY CONNECT";  break;  // You can not modify or delete a configuration that is in use (Disconnect it first)
   108dc:	f244 13ec 	movw	r3, #16876	; 0x41ec
   108e0:	f2c0 0302 	movt	r3, #2
   108e4:	60bb      	str	r3, [r7, #8]
   108e6:	e107      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_DISCONNECTED:                 pcError="DISCONNECT";       break;  // The communication is disconnected due to a protocol or physical error
   108e8:	f244 13fc 	movw	r3, #16892	; 0x41fc
   108ec:	f2c0 0302 	movt	r3, #2
   108f0:	60bb      	str	r3, [r7, #8]
   108f2:	e101      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_BUSY:                         pcError="BUSY";             break;  // The communication is busy
   108f4:	f244 2308 	movw	r3, #16904	; 0x4208
   108f8:	f2c0 0302 	movt	r3, #2
   108fc:	60bb      	str	r3, [r7, #8]
   108fe:	e0fb      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_SERVICE_FORBIDDEN:            pcError="SERVICE REFUSED";  break;  // Service from the Link Layer is forbidden
   10900:	f244 2310 	movw	r3, #16912	; 0x4210
   10904:	f2c0 0302 	movt	r3, #2
   10908:	60bb      	str	r3, [r7, #8]
   1090a:	e0f5      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_NOT_READY:                    pcError="NOT READY";        break;  // The communication is not ready
   1090c:	f244 2320 	movw	r3, #16928	; 0x4220
   10910:	f2c0 0302 	movt	r3, #2
   10914:	60bb      	str	r3, [r7, #8]
   10916:	e0ef      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_NETWORK_NOT_READY:            pcError="NETWRK NOT READY"; break;  // The physical network (GSM, GPRS...) is not ready to perform the requested
   10918:	f244 232c 	movw	r3, #16940	; 0x422c
   1091c:	f2c0 0302 	movt	r3, #2
   10920:	60bb      	str	r3, [r7, #8]
   10922:	e0e9      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_NETWORK_NOT_SUPPORTED:        pcError="INVALID NETWORK";  break;  // The requested physical network is not supported by the terminal
   10924:	f244 2340 	movw	r3, #16960	; 0x4240
   10928:	f2c0 0302 	movt	r3, #2
   1092c:	60bb      	str	r3, [r7, #8]
   1092e:	e0e3      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_NETWORK_ALREADY_CONNECTED:    pcError="NETWORK CONNECT";  break;  // Only returned by LL_GPRS_Connect() (The connection on the GPRS/3G network is already OK)
   10930:	f244 2350 	movw	r3, #16976	; 0x4250
   10934:	f2c0 0302 	movt	r3, #2
   10938:	60bb      	str	r3, [r7, #8]
   1093a:	e0dd      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_NETWORK_ERROR:                pcError="NETWORK ERROR";    break;  // Network error (Such as Ethernet cable not plugged, default route not configured...)
   1093c:	f244 2360 	movw	r3, #16992	; 0x4260
   10940:	f2c0 0302 	movt	r3, #2
   10944:	60bb      	str	r3, [r7, #8]
   10946:	e0d7      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_DLL:                          pcError="SSL DLL MISSING";  break;  // The SSL DLL is not loaded in the terminal
   10948:	f244 2370 	movw	r3, #17008	; 0x4270
   1094c:	f2c0 0302 	movt	r3, #2
   10950:	60bb      	str	r3, [r7, #8]
   10952:	e0d1      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_OUTPUT_BUFFER_TOO_SHORT:      pcError="BUFFER TOO SHORT"; break;  // Internal error (The interface object size is too short)
   10954:	f244 2380 	movw	r3, #17024	; 0x4280
   10958:	f2c0 0302 	movt	r3, #2
   1095c:	60bb      	str	r3, [r7, #8]
   1095e:	e0cb      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_SERVICE_CALL_FAILURE:         pcError="NO LINK LAYER";    break;  // Error calling the service (Please check that the LinkLayer component is loaded in the terminal)
   10960:	f244 2394 	movw	r3, #17044	; 0x4294
   10964:	f2c0 0302 	movt	r3, #2
   10968:	60bb      	str	r3, [r7, #8]
   1096a:	e0c5      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_IP_VERSION_REQUIRED:          pcError="WRONG LINK LAYER"; break;  // The configuration requires the TCP/IP version of LinkLayer component
   1096c:	f244 23a4 	movw	r3, #17060	; 0x42a4
   10970:	f2c0 0302 	movt	r3, #2
   10974:	60bb      	str	r3, [r7, #8]
   10976:	e0bf      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	// *** Session errors ***
	case LL_SESSION_ERROR_TOO_MANY_PROTOCOLS:   pcError="TOO MANY PROTOCL"; break;  // Invalid session stack (It contains too many protocols)
   10978:	f244 23b8 	movw	r3, #17080	; 0x42b8
   1097c:	f2c0 0302 	movt	r3, #2
   10980:	60bb      	str	r3, [r7, #8]
   10982:	e0b9      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_SESSION_ERROR_UNKNOWN_PROTOCOL:     pcError="UNKNOWN PROTOCOL"; break;  // Invalid session stack (It contains an unknown protocol)
   10984:	f244 23cc 	movw	r3, #17100	; 0x42cc
   10988:	f2c0 0302 	movt	r3, #2
   1098c:	60bb      	str	r3, [r7, #8]
   1098e:	e0b3      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	// *** Physical layer errors ***
	case LL_ERROR_PHYSICAL_OVERRUN_BUFFER:      pcError="OVERRUN BUFFER";   break;  // Overrun buffer error
   10990:	f244 23e0 	movw	r3, #17120	; 0x42e0
   10994:	f2c0 0302 	movt	r3, #2
   10998:	60bb      	str	r3, [r7, #8]
   1099a:	e0ad      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_PHYSICAL_OVERRUN:             pcError="OVERRUN";          break;  // Overrun error (the stop bit is missing)
   1099c:	f244 23f0 	movw	r3, #17136	; 0x42f0
   109a0:	f2c0 0302 	movt	r3, #2
   109a4:	60bb      	str	r3, [r7, #8]
   109a6:	e0a7      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_PHYSICAL_FRAMING:             pcError="FRAMING ERROR";    break;  // Framing error
   109a8:	f244 23f8 	movw	r3, #17144	; 0x42f8
   109ac:	f2c0 0302 	movt	r3, #2
   109b0:	60bb      	str	r3, [r7, #8]
   109b2:	e0a1      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_PHYSICAL_PARITY:              pcError="PARITY ERROR";     break;  // Parity error
   109b4:	f244 3308 	movw	r3, #17160	; 0x4308
   109b8:	f2c0 0302 	movt	r3, #2
   109bc:	60bb      	str	r3, [r7, #8]
   109be:	e09b      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	// *** Modem errors ***
	case LL_MODEM_ERROR_SEND_BUFFER_OVERRUN:    pcError="AT CMD OVERRUN";   break;  // Overrun error of the sending buffer
   109c0:	f244 3318 	movw	r3, #17176	; 0x4318
   109c4:	f2c0 0302 	movt	r3, #2
   109c8:	60bb      	str	r3, [r7, #8]
   109ca:	e095      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_INIT_MODEM:             pcError="INIT MODEM ERR";   break;  // String AT command initialization failed
   109cc:	f244 3328 	movw	r3, #17192	; 0x4328
   109d0:	f2c0 0302 	movt	r3, #2
   109d4:	60bb      	str	r3, [r7, #8]
   109d6:	e08f      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_RESPONSE_ERROR:         pcError="INVALID AT CMD";   break;  // The modem has returned an error
   109d8:	f244 3338 	movw	r3, #17208	; 0x4338
   109dc:	f2c0 0302 	movt	r3, #2
   109e0:	60bb      	str	r3, [r7, #8]
   109e2:	e089      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_RESPONSE_BLACKLISTED:   pcError="RESP BLACKLISTED"; break;  // The dialed number is blacklisted
   109e4:	f244 3348 	movw	r3, #17224	; 0x4348
   109e8:	f2c0 0302 	movt	r3, #2
   109ec:	60bb      	str	r3, [r7, #8]
   109ee:	e083      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_RESPONSE_DELAYED:       pcError="RESP DELAYED";     break;  // The modem has returned the DELAYED error
   109f0:	f244 335c 	movw	r3, #17244	; 0x435c
   109f4:	f2c0 0302 	movt	r3, #2
   109f8:	60bb      	str	r3, [r7, #8]
   109fa:	e07d      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_RESPONSE_NO_DIALTONE:   pcError="NO DIALTONE";      break;  // No dial tone error
   109fc:	f244 336c 	movw	r3, #17260	; 0x436c
   10a00:	f2c0 0302 	movt	r3, #2
   10a04:	60bb      	str	r3, [r7, #8]
   10a06:	e077      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_RESPONSE_BUSY:          pcError="LINE BUSY";        break;  // The PSTN line is busy
   10a08:	f244 3378 	movw	r3, #17272	; 0x4378
   10a0c:	f2c0 0302 	movt	r3, #2
   10a10:	60bb      	str	r3, [r7, #8]
   10a12:	e071      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_RESPONSE_NO_ANSWER:     pcError="NO ANSWER";        break;  // No answer from the remote part
   10a14:	f244 3384 	movw	r3, #17284	; 0x4384
   10a18:	f2c0 0302 	movt	r3, #2
   10a1c:	60bb      	str	r3, [r7, #8]
   10a1e:	e06b      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_RESPONSE_NO_CARRIER:    pcError="NO CARRIER";       break;  // The communication has failed upon reception of NO CARRIER
   10a20:	f244 3390 	movw	r3, #17296	; 0x4390
   10a24:	f2c0 0302 	movt	r3, #2
   10a28:	60bb      	str	r3, [r7, #8]
   10a2a:	e065      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_MODEM_ERROR_RESPONSE_INVALID:       pcError="INVALID ANSWER";   break;  // The modem has returned an unexpected answer
   10a2c:	f244 339c 	movw	r3, #17308	; 0x439c
   10a30:	f2c0 0302 	movt	r3, #2
   10a34:	60bb      	str	r3, [r7, #8]
   10a36:	e05f      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	// *** SDL errors ***
	case LL_HDLC_ERROR_CONNECT_TIMEOUT:         pcError="SDLC TIMEOUT";     break;  // The timeout of the HDLC connection has expired
   10a38:	f244 33ac 	movw	r3, #17324	; 0x43ac
   10a3c:	f2c0 0302 	movt	r3, #2
   10a40:	60bb      	str	r3, [r7, #8]
   10a42:	e059      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	// *** PPP errors ***
	case LL_ERROR_PPP_CONNECT:                  pcError="PPP CONNECT ERR";  break;  // PPP connection error (Connection with the PPP provider failed (problem when negociating PPP options...))
   10a44:	f244 33bc 	movw	r3, #17340	; 0x43bc
   10a48:	f2c0 0302 	movt	r3, #2
   10a4c:	60bb      	str	r3, [r7, #8]
   10a4e:	e053      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_PPP_AUTHENTICATION:           pcError="PPP AUTH ERROR";   break;  // PPP authentication error (The login and the password are not valid)
   10a50:	f244 33cc 	movw	r3, #17356	; 0x43cc
   10a54:	f2c0 0302 	movt	r3, #2
   10a58:	60bb      	str	r3, [r7, #8]
   10a5a:	e04d      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_PPP_RAS_MODE:                 pcError="PPP RAS ERROR";    break;  // PPP connection error during the exchange "CLIENT" <-> "CLIENTSERVER"
   10a5c:	f244 33dc 	movw	r3, #17372	; 0x43dc
   10a60:	f2c0 0302 	movt	r3, #2
   10a64:	60bb      	str	r3, [r7, #8]
   10a66:	e047      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	// *** TCP/IP errors ***
	case LL_ERROR_UNKNOWN_HOST:                 pcError="UNKNOWN HOST";     break;  // Unable to resolve the DNS name
   10a68:	f244 33ec 	movw	r3, #17388	; 0x43ec
   10a6c:	f2c0 0302 	movt	r3, #2
   10a70:	60bb      	str	r3, [r7, #8]
   10a72:	e041      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_CREATE_SOCKET:                pcError="SOCK CREATE ERR";  break;  // Error during the socket creation (Can be observed when too many sockets are used at the same time)
   10a74:	f244 33fc 	movw	r3, #17404	; 0x43fc
   10a78:	f2c0 0302 	movt	r3, #2
   10a7c:	60bb      	str	r3, [r7, #8]
   10a7e:	e03b      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_CANNOT_CONNECT:               pcError="SOCK CONNECT ERR"; break;  // Error during the socket connection (Either the remote server is not responding, or settings problems (configuration parameters, wrong certificate in SSL...))
   10a80:	f244 430c 	movw	r3, #17420	; 0x440c
   10a84:	f2c0 0302 	movt	r3, #2
   10a88:	60bb      	str	r3, [r7, #8]
   10a8a:	e035      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_CONNECTION_REFUSED:           pcError="CONNECT REFUSED";  break;  // The connection is refused by the remote server (In TCP, the 'errno' value of the socket is __ECONNREFUSED or In SSL, this can be caused by a failure during the SSL handshake)
   10a8c:	f244 4320 	movw	r3, #17440	; 0x4420
   10a90:	f2c0 0302 	movt	r3, #2
   10a94:	60bb      	str	r3, [r7, #8]
   10a96:	e02f      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_HOST_UNREACHABLE:             pcError="HOST UNREACHABLE"; break;  // The host is unreachable (Cannot access the server : The 'errno' value of the socket is __EHOSTUNREACH)
   10a98:	f244 4330 	movw	r3, #17456	; 0x4430
   10a9c:	f2c0 0302 	movt	r3, #2
   10aa0:	60bb      	str	r3, [r7, #8]
   10aa2:	e029      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_ERROR_NETWORK_UNREACHABLE:          pcError="NET UNREACHABLE";  break;  // The network is unreachable (Cannot access the server : The 'errno' value of the socket is __ENETUNREACH)
   10aa4:	f244 4344 	movw	r3, #17476	; 0x4444
   10aa8:	f2c0 0302 	movt	r3, #2
   10aac:	60bb      	str	r3, [r7, #8]
   10aae:	e023      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	// *** X28 errors ***
	case LL_X28_LIB:                            pcError="X28 LIB";          break;  // The network as returned the X28 message "LIB"
   10ab0:	f244 4354 	movw	r3, #17492	; 0x4454
   10ab4:	f2c0 0302 	movt	r3, #2
   10ab8:	60bb      	str	r3, [r7, #8]
   10aba:	e01d      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_X28_RESET:                          pcError="X28 RESET";        break;  // The network as returned the X28 message "RESET"
   10abc:	f244 435c 	movw	r3, #17500	; 0x445c
   10ac0:	f2c0 0302 	movt	r3, #2
   10ac4:	60bb      	str	r3, [r7, #8]
   10ac6:	e017      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_X28_CLR:                            pcError="X28 CLR";          break;  // The network as returned the X28 message "CLR"
   10ac8:	f244 4368 	movw	r3, #17512	; 0x4468
   10acc:	f2c0 0302 	movt	r3, #2
   10ad0:	60bb      	str	r3, [r7, #8]
   10ad2:	e011      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	// *** SSL errors ***
	case LL_ERROR_SSL_PROFILE:                  pcError="SSL PROFILE ERR";  break;  // The SSL profile cannot be loaded
   10ad4:	f244 4370 	movw	r3, #17520	; 0x4470
   10ad8:	f2c0 0302 	movt	r3, #2
   10adc:	60bb      	str	r3, [r7, #8]
   10ade:	e00b      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	case LL_SSL_ERROR_SPECIFIC:                 pcError="SSL SPECIFIC ERR"; break;  // Base error for all SSL Specific error (from -9000 to -12000)
   10ae0:	f244 4380 	movw	r3, #17536	; 0x4480
   10ae4:	f2c0 0302 	movt	r3, #2
   10ae8:	60bb      	str	r3, [r7, #8]
   10aea:	e005      	b.n	10af8 <LL_ErrorMsg+0x6ec>
	// *** Other errors
	default:                                    pcError="ERROR UNKNOWN";    break;
   10aec:	f244 0380 	movw	r3, #16512	; 0x4080
   10af0:	f2c0 0302 	movt	r3, #2
   10af4:	60bb      	str	r3, [r7, #8]
   10af6:	bf00      	nop
	}
	
	return pcError;
   10af8:	68bb      	ldr	r3, [r7, #8]
}
   10afa:	4618      	mov	r0, r3
   10afc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   10b00:	f2c0 0302 	movt	r3, #2
   10b04:	68fa      	ldr	r2, [r7, #12]
   10b06:	681b      	ldr	r3, [r3, #0]
   10b08:	429a      	cmp	r2, r3
   10b0a:	d001      	beq.n	10b10 <LL_ErrorMsg+0x704>
   10b0c:	f7f8 fa4a 	bl	8fa4 <__stack_chk_fail>
   10b10:	f107 0710 	add.w	r7, r7, #16
   10b14:	46bd      	mov	sp, r7
   10b16:	bd80      	pop	{r7, pc}

00010b18 <SEC_ErrorMsg>:
//  This function has return value.
//    A message string regarding the error value.
//****************************************************************************

char* SEC_ErrorMsg (int iValue)
{
   10b18:	b580      	push	{r7, lr}
   10b1a:	b084      	sub	sp, #16
   10b1c:	af00      	add	r7, sp, #0
   10b1e:	6078      	str	r0, [r7, #4]
   10b20:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   10b24:	f2c0 0302 	movt	r3, #2
   10b28:	681b      	ldr	r3, [r3, #0]
   10b2a:	60fb      	str	r3, [r7, #12]
    // ***************
	char *pcError;

	// List error messages
    // *******************
	switch (iValue)
   10b2c:	687b      	ldr	r3, [r7, #4]
   10b2e:	f64f 32f9 	movw	r2, #64505	; 0xfbf9
   10b32:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b36:	4293      	cmp	r3, r2
   10b38:	f000 8093 	beq.w	10c62 <SEC_ErrorMsg+0x14a>
   10b3c:	f64f 32f9 	movw	r2, #64505	; 0xfbf9
   10b40:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b44:	4293      	cmp	r3, r2
   10b46:	dc36      	bgt.n	10bb6 <SEC_ErrorMsg+0x9e>
   10b48:	f64f 32f4 	movw	r2, #64500	; 0xfbf4
   10b4c:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b50:	4293      	cmp	r3, r2
   10b52:	f000 80a4 	beq.w	10c9e <SEC_ErrorMsg+0x186>
   10b56:	f64f 32f4 	movw	r2, #64500	; 0xfbf4
   10b5a:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b5e:	4293      	cmp	r3, r2
   10b60:	dc15      	bgt.n	10b8e <SEC_ErrorMsg+0x76>
   10b62:	f64f 32f2 	movw	r2, #64498	; 0xfbf2
   10b66:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b6a:	4293      	cmp	r3, r2
   10b6c:	f000 80a3 	beq.w	10cb6 <SEC_ErrorMsg+0x19e>
   10b70:	f64f 32f2 	movw	r2, #64498	; 0xfbf2
   10b74:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b78:	4293      	cmp	r3, r2
   10b7a:	f300 8096 	bgt.w	10caa <SEC_ErrorMsg+0x192>
   10b7e:	f64f 32f1 	movw	r2, #64497	; 0xfbf1
   10b82:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b86:	4293      	cmp	r3, r2
   10b88:	f000 809b 	beq.w	10cc2 <SEC_ErrorMsg+0x1aa>
   10b8c:	e09f      	b.n	10cce <SEC_ErrorMsg+0x1b6>
   10b8e:	f64f 32f6 	movw	r2, #64502	; 0xfbf6
   10b92:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10b96:	4293      	cmp	r3, r2
   10b98:	d075      	beq.n	10c86 <SEC_ErrorMsg+0x16e>
   10b9a:	f64f 32f6 	movw	r2, #64502	; 0xfbf6
   10b9e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10ba2:	4293      	cmp	r3, r2
   10ba4:	db75      	blt.n	10c92 <SEC_ErrorMsg+0x17a>
   10ba6:	f46f 6281 	mvn.w	r2, #1032	; 0x408
   10baa:	4293      	cmp	r3, r2
   10bac:	d065      	beq.n	10c7a <SEC_ErrorMsg+0x162>
   10bae:	f513 6f81 	cmn.w	r3, #1032	; 0x408
   10bb2:	d05c      	beq.n	10c6e <SEC_ErrorMsg+0x156>
   10bb4:	e08b      	b.n	10cce <SEC_ErrorMsg+0x1b6>
   10bb6:	f64f 32fd 	movw	r2, #64509	; 0xfbfd
   10bba:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10bbe:	4293      	cmp	r3, r2
   10bc0:	d037      	beq.n	10c32 <SEC_ErrorMsg+0x11a>
   10bc2:	f64f 32fd 	movw	r2, #64509	; 0xfbfd
   10bc6:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10bca:	4293      	cmp	r3, r2
   10bcc:	dc0c      	bgt.n	10be8 <SEC_ErrorMsg+0xd0>
   10bce:	f64f 32fb 	movw	r2, #64507	; 0xfbfb
   10bd2:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10bd6:	4293      	cmp	r3, r2
   10bd8:	d037      	beq.n	10c4a <SEC_ErrorMsg+0x132>
   10bda:	f64f 32fb 	movw	r2, #64507	; 0xfbfb
   10bde:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   10be2:	4293      	cmp	r3, r2
   10be4:	dc2b      	bgt.n	10c3e <SEC_ErrorMsg+0x126>
   10be6:	e036      	b.n	10c56 <SEC_ErrorMsg+0x13e>
   10be8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
   10bec:	4293      	cmp	r3, r2
   10bee:	d014      	beq.n	10c1a <SEC_ErrorMsg+0x102>
   10bf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
   10bf4:	4293      	cmp	r3, r2
   10bf6:	db16      	blt.n	10c26 <SEC_ErrorMsg+0x10e>
   10bf8:	f513 6f80 	cmn.w	r3, #1024	; 0x400
   10bfc:	d007      	beq.n	10c0e <SEC_ErrorMsg+0xf6>
   10bfe:	2b01      	cmp	r3, #1
   10c00:	d165      	bne.n	10cce <SEC_ErrorMsg+0x1b6>
	{
                            // ERRORS CODES
	// *** Schemes common errors ***
	case 1:                         pcError="SCHEME MISSING\n"
   10c02:	f244 4394 	movw	r3, #17556	; 0x4494
   10c06:	f2c0 0302 	movt	r3, #2
   10c0a:	60bb      	str	r3, [r7, #8]
			                                "OR WRONG PROFILE"; break;
   10c0c:	e0cc      	b.n	10da8 <SEC_ErrorMsg+0x290>
	case ERR_ID_NOT_FOUND:          pcError="ID NOT FOUND";     break;
   10c0e:	f244 43b4 	movw	r3, #17588	; 0x44b4
   10c12:	f2c0 0302 	movt	r3, #2
   10c16:	60bb      	str	r3, [r7, #8]
   10c18:	e0c6      	b.n	10da8 <SEC_ErrorMsg+0x290>
	case ERR_PIN_CODE_NOT_FOUND:    pcError="PIN NOT FOUND";    break;
   10c1a:	f244 43c4 	movw	r3, #17604	; 0x44c4
   10c1e:	f2c0 0302 	movt	r3, #2
   10c22:	60bb      	str	r3, [r7, #8]
   10c24:	e0c0      	b.n	10da8 <SEC_ErrorMsg+0x290>
	case ERR_BAD_PIN_CODE_LEN:      pcError="PIN BAD LENGTH";   break;
   10c26:	f244 43d4 	movw	r3, #17620	; 0x44d4
   10c2a:	f2c0 0302 	movt	r3, #2
   10c2e:	60bb      	str	r3, [r7, #8]
   10c30:	e0ba      	b.n	10da8 <SEC_ErrorMsg+0x290>
	case ERR_BAD_IAPP_OPERATION:    pcError="IAPP FAILED";      break;
   10c32:	f244 43e4 	movw	r3, #17636	; 0x44e4
   10c36:	f2c0 0302 	movt	r3, #2
   10c3a:	60bb      	str	r3, [r7, #8]
   10c3c:	e0b4      	b.n	10da8 <SEC_ErrorMsg+0x290>
	case ERR_UNKNOW_FORMAT:         pcError="UNKNOWN FORMAT";   break;
   10c3e:	f244 43f0 	movw	r3, #17648	; 0x44f0
   10c42:	f2c0 0302 	movt	r3, #2
   10c46:	60bb      	str	r3, [r7, #8]
   10c48:	e0ae      	b.n	10da8 <SEC_ErrorMsg+0x290>
	case ERR_DUKPT_END_OF_LIFE:     pcError="DUKPT EXPIRED";    break;
   10c4a:	f244 5300 	movw	r3, #17664	; 0x4500
   10c4e:	f2c0 0302 	movt	r3, #2
   10c52:	60bb      	str	r3, [r7, #8]
   10c54:	e0a8      	b.n	10da8 <SEC_ErrorMsg+0x290>
	case ERR_BAD_ACTION_TYPE:       pcError="BAD ACTION TYPE";  break;
   10c56:	f244 5310 	movw	r3, #17680	; 0x4510
   10c5a:	f2c0 0302 	movt	r3, #2
   10c5e:	60bb      	str	r3, [r7, #8]
   10c60:	e0a2      	b.n	10da8 <SEC_ErrorMsg+0x290>
	case ERR_ENTRY_CANCELED:        pcError="ENTRY CANCELED";   break;
   10c62:	f244 5320 	movw	r3, #17696	; 0x4520
   10c66:	f2c0 0302 	movt	r3, #2
   10c6a:	60bb      	str	r3, [r7, #8]
   10c6c:	e09c      	b.n	10da8 <SEC_ErrorMsg+0x290>
	case ERR_TIMEOUT:               pcError="TIMEOUT EXPIRED";  break;
   10c6e:	f244 5330 	movw	r3, #17712	; 0x4530
   10c72:	f2c0 0302 	movt	r3, #2
   10c76:	60bb      	str	r3, [r7, #8]
   10c78:	e096      	b.n	10da8 <SEC_ErrorMsg+0x290>
	case ERR_BAD_IHM_OPERATION:     pcError="HMI FAILED";       break;
   10c7a:	f244 5340 	movw	r3, #17728	; 0x4540
   10c7e:	f2c0 0302 	movt	r3, #2
   10c82:	60bb      	str	r3, [r7, #8]
   10c84:	e090      	b.n	10da8 <SEC_ErrorMsg+0x290>
	case ERR_SYSTEM:                pcError="SYSTEM ERROR";     break;
   10c86:	f244 534c 	movw	r3, #17740	; 0x454c
   10c8a:	f2c0 0302 	movt	r3, #2
   10c8e:	60bb      	str	r3, [r7, #8]
   10c90:	e08a      	b.n	10da8 <SEC_ErrorMsg+0x290>
	case ERR_BAD_PARAM:             pcError="BAD PARAMETER";    break;
   10c92:	f244 535c 	movw	r3, #17756	; 0x455c
   10c96:	f2c0 0302 	movt	r3, #2
   10c9a:	60bb      	str	r3, [r7, #8]
   10c9c:	e084      	b.n	10da8 <SEC_ErrorMsg+0x290>
	case ERR_MAC_VERIFY:            pcError="MAC VERIFY KO";    break;
   10c9e:	f244 536c 	movw	r3, #17772	; 0x456c
   10ca2:	f2c0 0302 	movt	r3, #2
   10ca6:	60bb      	str	r3, [r7, #8]
   10ca8:	e07e      	b.n	10da8 <SEC_ErrorMsg+0x290>
	case ERR_MAC_KEY:               pcError="MAC KEY FAILED";   break;
   10caa:	f244 537c 	movw	r3, #17788	; 0x457c
   10cae:	f2c0 0302 	movt	r3, #2
   10cb2:	60bb      	str	r3, [r7, #8]
   10cb4:	e078      	b.n	10da8 <SEC_ErrorMsg+0x290>
	case ERR_DUKPT_NOT_IN_FUNCTION: pcError="DUKPT MISSING";    break;
   10cb6:	f244 538c 	movw	r3, #17804	; 0x458c
   10cba:	f2c0 0302 	movt	r3, #2
   10cbe:	60bb      	str	r3, [r7, #8]
   10cc0:	e072      	b.n	10da8 <SEC_ErrorMsg+0x290>
	case ERR_DIFFERENCE:            pcError="ERROR MISMATCHED"; break;
   10cc2:	f244 539c 	movw	r3, #17820	; 0x459c
   10cc6:	f2c0 0302 	movt	r3, #2
   10cca:	60bb      	str	r3, [r7, #8]
   10ccc:	e06c      	b.n	10da8 <SEC_ErrorMsg+0x290>
#ifndef __FRAMEWORK_TELIUM_PLUS__
	case C_UTLV_TYPE_NOT_TLV:		pcError="NO TLV TYPE";      break;
	case C_UTLV_TYPE_NO_SECRET:     pcError="NO SECRET TYPE";   break;
#endif
	default:
		switch (iValue)
   10cce:	687b      	ldr	r3, [r7, #4]
   10cd0:	330c      	adds	r3, #12
   10cd2:	2b0b      	cmp	r3, #11
   10cd4:	d862      	bhi.n	10d9c <SEC_ErrorMsg+0x284>
   10cd6:	a201      	add	r2, pc, #4	; (adr r2, 10cdc <SEC_ErrorMsg+0x1c4>)
   10cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10cdc:	00010d91 	.word	0x00010d91
   10ce0:	00010d85 	.word	0x00010d85
   10ce4:	00010d79 	.word	0x00010d79
   10ce8:	00010d6d 	.word	0x00010d6d
   10cec:	00010d61 	.word	0x00010d61
   10cf0:	00010d55 	.word	0x00010d55
   10cf4:	00010d49 	.word	0x00010d49
   10cf8:	00010d3d 	.word	0x00010d3d
   10cfc:	00010d31 	.word	0x00010d31
   10d00:	00010d25 	.word	0x00010d25
   10d04:	00010d19 	.word	0x00010d19
   10d08:	00010d0d 	.word	0x00010d0d
		{
		// *** Schemes loading errors ***
		case -1:                    pcError="ID FULL";          break;
   10d0c:	f244 53b0 	movw	r3, #17840	; 0x45b0
   10d10:	f2c0 0302 	movt	r3, #2
   10d14:	60bb      	str	r3, [r7, #8]
   10d16:	e047      	b.n	10da8 <SEC_ErrorMsg+0x290>
		case -2:                    pcError="ID ALREADY EXIST"; break;
   10d18:	f244 53b8 	movw	r3, #17848	; 0x45b8
   10d1c:	f2c0 0302 	movt	r3, #2
   10d20:	60bb      	str	r3, [r7, #8]
   10d22:	e041      	b.n	10da8 <SEC_ErrorMsg+0x290>
		case -3:                    pcError="ID UNKNOWN";       break;
   10d24:	f244 53cc 	movw	r3, #17868	; 0x45cc
   10d28:	f2c0 0302 	movt	r3, #2
   10d2c:	60bb      	str	r3, [r7, #8]
   10d2e:	e03b      	b.n	10da8 <SEC_ErrorMsg+0x290>
		case -4:                    pcError="NO MORE MEMORY";   break;
   10d30:	f244 53d8 	movw	r3, #17880	; 0x45d8
   10d34:	f2c0 0302 	movt	r3, #2
   10d38:	60bb      	str	r3, [r7, #8]
   10d3a:	e035      	b.n	10da8 <SEC_ErrorMsg+0x290>
		case -5:                    pcError="BAD INIT";         break;
   10d3c:	f244 53e8 	movw	r3, #17896	; 0x45e8
   10d40:	f2c0 0302 	movt	r3, #2
   10d44:	60bb      	str	r3, [r7, #8]
   10d46:	e02f      	b.n	10da8 <SEC_ErrorMsg+0x290>
		case -6:                    pcError="JUST DOWNLOADED";  break;
   10d48:	f244 53f4 	movw	r3, #17908	; 0x45f4
   10d4c:	f2c0 0302 	movt	r3, #2
   10d50:	60bb      	str	r3, [r7, #8]
   10d52:	e029      	b.n	10da8 <SEC_ErrorMsg+0x290>
		case -7:                    pcError="BAD PARAMETER";    break;
   10d54:	f244 535c 	movw	r3, #17756	; 0x455c
   10d58:	f2c0 0302 	movt	r3, #2
   10d5c:	60bb      	str	r3, [r7, #8]
   10d5e:	e023      	b.n	10da8 <SEC_ErrorMsg+0x290>
		case -8:                    pcError="GLOBAL ERROR";     break;
   10d60:	f244 6304 	movw	r3, #17924	; 0x4604
   10d64:	f2c0 0302 	movt	r3, #2
   10d68:	60bb      	str	r3, [r7, #8]
   10d6a:	e01d      	b.n	10da8 <SEC_ErrorMsg+0x290>
		case -9:                    pcError="SCHEMES MISSING";  break;
   10d6c:	f244 6314 	movw	r3, #17940	; 0x4614
   10d70:	f2c0 0302 	movt	r3, #2
   10d74:	60bb      	str	r3, [r7, #8]
   10d76:	e017      	b.n	10da8 <SEC_ErrorMsg+0x290>
		case -10:                   pcError="ERROR ADDRESS";    break;
   10d78:	f244 6324 	movw	r3, #17956	; 0x4624
   10d7c:	f2c0 0302 	movt	r3, #2
   10d80:	60bb      	str	r3, [r7, #8]
   10d82:	e011      	b.n	10da8 <SEC_ErrorMsg+0x290>
		case -11:                   pcError="WARNING ADDRESS";  break;
   10d84:	f244 6334 	movw	r3, #17972	; 0x4634
   10d88:	f2c0 0302 	movt	r3, #2
   10d8c:	60bb      	str	r3, [r7, #8]
   10d8e:	e00b      	b.n	10da8 <SEC_ErrorMsg+0x290>
		case -12:                   pcError="CERTIFICATE KO";   break;
   10d90:	f244 6344 	movw	r3, #17988	; 0x4644
   10d94:	f2c0 0302 	movt	r3, #2
   10d98:	60bb      	str	r3, [r7, #8]
   10d9a:	e005      	b.n	10da8 <SEC_ErrorMsg+0x290>
		default:                    pcError="ERROR UNKNOWN";    break;
   10d9c:	f244 0380 	movw	r3, #16512	; 0x4080
   10da0:	f2c0 0302 	movt	r3, #2
   10da4:	60bb      	str	r3, [r7, #8]
   10da6:	bf00      	nop
		}
	}

	return pcError;
   10da8:	68bb      	ldr	r3, [r7, #8]
}
   10daa:	4618      	mov	r0, r3
   10dac:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   10db0:	f2c0 0302 	movt	r3, #2
   10db4:	68fa      	ldr	r2, [r7, #12]
   10db6:	681b      	ldr	r3, [r3, #0]
   10db8:	429a      	cmp	r2, r3
   10dba:	d001      	beq.n	10dc0 <SEC_ErrorMsg+0x2a8>
   10dbc:	f7f8 f8f2 	bl	8fa4 <__stack_chk_fail>
   10dc0:	f107 0710 	add.w	r7, r7, #16
   10dc4:	46bd      	mov	sp, r7
   10dc6:	bd80      	pop	{r7, pc}

00010dc8 <OpenConverter>:
//     NULL if converter not found or wrong parameter.
//     Driver file if converter found.
//****************************************************************************

Telium_File_t *OpenConverter(char *pcName, byte ucSize)
{
   10dc8:	b590      	push	{r4, r7, lr}
   10dca:	b087      	sub	sp, #28
   10dcc:	af00      	add	r7, sp, #0
   10dce:	6078      	str	r0, [r7, #4]
   10dd0:	460b      	mov	r3, r1
   10dd2:	70fb      	strb	r3, [r7, #3]
   10dd4:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   10dd8:	f2c0 0302 	movt	r3, #2
   10ddc:	681b      	ldr	r3, [r3, #0]
   10dde:	617b      	str	r3, [r7, #20]
	Telium_File_t *hCom;
	byte ucSta;

	// Converter detection in progress
	// *******************************
	for (i=0; i<NUMBER_OF_ITEMS(tzConverter); i++)
   10de0:	2300      	movs	r3, #0
   10de2:	60fb      	str	r3, [r7, #12]
   10de4:	e03d      	b.n	10e62 <OpenConverter+0x9a>
	{
		hCom = Telium_Fopen(tzConverter[i], "rw*");                 // Open converter peripheral
   10de6:	f24f 334c 	movw	r3, #62284	; 0xf34c
   10dea:	f2c0 0302 	movt	r3, #2
   10dee:	68fa      	ldr	r2, [r7, #12]
   10df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10df4:	4618      	mov	r0, r3
   10df6:	f244 6154 	movw	r1, #18004	; 0x4654
   10dfa:	f2c0 0102 	movt	r1, #2
   10dfe:	f00e fe2d 	bl	1fa5c <Telium_Fopen>
   10e02:	6138      	str	r0, [r7, #16]
		if(hCom)
   10e04:	693b      	ldr	r3, [r7, #16]
   10e06:	2b00      	cmp	r3, #0
   10e08:	d028      	beq.n	10e5c <OpenConverter+0x94>
		{
			Telium_Status(hCom, &ucSta);                           // Check if converter recognized
   10e0a:	f107 030b 	add.w	r3, r7, #11
   10e0e:	6938      	ldr	r0, [r7, #16]
   10e10:	4619      	mov	r1, r3
   10e12:	f00e ff4b 	bl	1fcac <Telium_Status>
			if ( (ucSta & USB_PRESENT) == USB_PRESENT)
   10e16:	7afb      	ldrb	r3, [r7, #11]
   10e18:	f003 0301 	and.w	r3, r3, #1
   10e1c:	2b00      	cmp	r3, #0
   10e1e:	d01a      	beq.n	10e56 <OpenConverter+0x8e>
			{
				if (ucSize > strlen((char*)tzConverter[i]))
   10e20:	78fc      	ldrb	r4, [r7, #3]
   10e22:	f24f 334c 	movw	r3, #62284	; 0xf34c
   10e26:	f2c0 0302 	movt	r3, #2
   10e2a:	68fa      	ldr	r2, [r7, #12]
   10e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10e30:	4618      	mov	r0, r3
   10e32:	f7f7 ef28 	blx	8c84 <_init+0x124>
   10e36:	4603      	mov	r3, r0
   10e38:	429c      	cmp	r4, r3
   10e3a:	d90f      	bls.n	10e5c <OpenConverter+0x94>
				{
					strcpy (pcName, (char*)tzConverter[i]);	 // Return driver name and driver file
   10e3c:	f24f 334c 	movw	r3, #62284	; 0xf34c
   10e40:	f2c0 0302 	movt	r3, #2
   10e44:	68fa      	ldr	r2, [r7, #12]
   10e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10e4a:	6878      	ldr	r0, [r7, #4]
   10e4c:	4619      	mov	r1, r3
   10e4e:	f7f7 eee8 	blx	8c20 <_init+0xc0>
					return hCom;
   10e52:	693b      	ldr	r3, [r7, #16]
   10e54:	e009      	b.n	10e6a <OpenConverter+0xa2>
				}
			}
			else
				Telium_Fclose(hCom);                                // Close converter unrecognized
   10e56:	6938      	ldr	r0, [r7, #16]
   10e58:	f00e fdce 	bl	1f9f8 <Telium_Fclose>
	Telium_File_t *hCom;
	byte ucSta;

	// Converter detection in progress
	// *******************************
	for (i=0; i<NUMBER_OF_ITEMS(tzConverter); i++)
   10e5c:	68fb      	ldr	r3, [r7, #12]
   10e5e:	3301      	adds	r3, #1
   10e60:	60fb      	str	r3, [r7, #12]
   10e62:	68fb      	ldr	r3, [r7, #12]
   10e64:	2b04      	cmp	r3, #4
   10e66:	d9be      	bls.n	10de6 <OpenConverter+0x1e>
			else
				Telium_Fclose(hCom);                                // Close converter unrecognized
		}
	}

	return NULL;                                             // Converter not found
   10e68:	2300      	movs	r3, #0
}
   10e6a:	4618      	mov	r0, r3
   10e6c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   10e70:	f2c0 0302 	movt	r3, #2
   10e74:	697a      	ldr	r2, [r7, #20]
   10e76:	681b      	ldr	r3, [r3, #0]
   10e78:	429a      	cmp	r2, r3
   10e7a:	d001      	beq.n	10e80 <OpenConverter+0xb8>
   10e7c:	f7f8 f892 	bl	8fa4 <__stack_chk_fail>
   10e80:	f107 071c 	add.w	r7, r7, #28
   10e84:	46bd      	mov	sp, r7
   10e86:	bd90      	pop	{r4, r7, pc}

00010e88 <BitOn>:
//     ucIdx (I-) : Related bit number
//  This function has no return value.
//****************************************************************************

static void BitOn (char *pcBuf, byte ucIdx)
{
   10e88:	b580      	push	{r7, lr}
   10e8a:	b084      	sub	sp, #16
   10e8c:	af00      	add	r7, sp, #0
   10e8e:	6078      	str	r0, [r7, #4]
   10e90:	460b      	mov	r3, r1
   10e92:	70fb      	strb	r3, [r7, #3]
   10e94:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   10e98:	f2c0 0302 	movt	r3, #2
   10e9c:	681b      	ldr	r3, [r3, #0]
   10e9e:	60fb      	str	r3, [r7, #12]
    ucIdx--;
   10ea0:	78fb      	ldrb	r3, [r7, #3]
   10ea2:	3b01      	subs	r3, #1
   10ea4:	70fb      	strb	r3, [r7, #3]
    while(ucIdx >= 8) 
   10ea6:	e005      	b.n	10eb4 <BitOn+0x2c>
    {
        pcBuf++;
   10ea8:	687b      	ldr	r3, [r7, #4]
   10eaa:	3301      	adds	r3, #1
   10eac:	607b      	str	r3, [r7, #4]
        ucIdx -= 8;
   10eae:	78fb      	ldrb	r3, [r7, #3]
   10eb0:	3b08      	subs	r3, #8
   10eb2:	70fb      	strb	r3, [r7, #3]
//****************************************************************************

static void BitOn (char *pcBuf, byte ucIdx)
{
    ucIdx--;
    while(ucIdx >= 8) 
   10eb4:	78fb      	ldrb	r3, [r7, #3]
   10eb6:	2b07      	cmp	r3, #7
   10eb8:	d8f6      	bhi.n	10ea8 <BitOn+0x20>
    {
        pcBuf++;
        ucIdx -= 8;
    }
    *pcBuf |= (0x01 << (7 - ucIdx));
   10eba:	687b      	ldr	r3, [r7, #4]
   10ebc:	781b      	ldrb	r3, [r3, #0]
   10ebe:	b2da      	uxtb	r2, r3
   10ec0:	78fb      	ldrb	r3, [r7, #3]
   10ec2:	f1c3 0307 	rsb	r3, r3, #7
   10ec6:	2101      	movs	r1, #1
   10ec8:	fa01 f303 	lsl.w	r3, r1, r3
   10ecc:	b2db      	uxtb	r3, r3
   10ece:	4313      	orrs	r3, r2
   10ed0:	b2db      	uxtb	r3, r3
   10ed2:	b2da      	uxtb	r2, r3
   10ed4:	687b      	ldr	r3, [r7, #4]
   10ed6:	701a      	strb	r2, [r3, #0]
}
   10ed8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   10edc:	f2c0 0302 	movt	r3, #2
   10ee0:	68fa      	ldr	r2, [r7, #12]
   10ee2:	681b      	ldr	r3, [r3, #0]
   10ee4:	429a      	cmp	r2, r3
   10ee6:	d001      	beq.n	10eec <BitOn+0x64>
   10ee8:	f7f8 f85c 	bl	8fa4 <__stack_chk_fail>
   10eec:	f107 0710 	add.w	r7, r7, #16
   10ef0:	46bd      	mov	sp, r7
   10ef2:	bd80      	pop	{r7, pc}

00010ef4 <BitOff>:
//     ucIdx (I-) : Related bit number
//  This function has no return value.
//****************************************************************************

static void BitOff (char *pcBuf, byte ucIdx)
{
   10ef4:	b580      	push	{r7, lr}
   10ef6:	b084      	sub	sp, #16
   10ef8:	af00      	add	r7, sp, #0
   10efa:	6078      	str	r0, [r7, #4]
   10efc:	460b      	mov	r3, r1
   10efe:	70fb      	strb	r3, [r7, #3]
   10f00:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   10f04:	f2c0 0302 	movt	r3, #2
   10f08:	681b      	ldr	r3, [r3, #0]
   10f0a:	60fb      	str	r3, [r7, #12]
    ucIdx--;
   10f0c:	78fb      	ldrb	r3, [r7, #3]
   10f0e:	3b01      	subs	r3, #1
   10f10:	70fb      	strb	r3, [r7, #3]
    while(ucIdx >= 8) 
   10f12:	e005      	b.n	10f20 <BitOff+0x2c>
    {
        pcBuf++;
   10f14:	687b      	ldr	r3, [r7, #4]
   10f16:	3301      	adds	r3, #1
   10f18:	607b      	str	r3, [r7, #4]
        ucIdx -= 8;
   10f1a:	78fb      	ldrb	r3, [r7, #3]
   10f1c:	3b08      	subs	r3, #8
   10f1e:	70fb      	strb	r3, [r7, #3]
//****************************************************************************

static void BitOff (char *pcBuf, byte ucIdx)
{
    ucIdx--;
    while(ucIdx >= 8) 
   10f20:	78fb      	ldrb	r3, [r7, #3]
   10f22:	2b07      	cmp	r3, #7
   10f24:	d8f6      	bhi.n	10f14 <BitOff+0x20>
    {
        pcBuf++;
        ucIdx -= 8;
    }
    *pcBuf &= ~(0x01 << (7 - ucIdx));
   10f26:	687b      	ldr	r3, [r7, #4]
   10f28:	781b      	ldrb	r3, [r3, #0]
   10f2a:	b2da      	uxtb	r2, r3
   10f2c:	78fb      	ldrb	r3, [r7, #3]
   10f2e:	f1c3 0307 	rsb	r3, r3, #7
   10f32:	2101      	movs	r1, #1
   10f34:	fa01 f303 	lsl.w	r3, r1, r3
   10f38:	b2db      	uxtb	r3, r3
   10f3a:	43db      	mvns	r3, r3
   10f3c:	b2db      	uxtb	r3, r3
   10f3e:	4013      	ands	r3, r2
   10f40:	b2db      	uxtb	r3, r3
   10f42:	b2da      	uxtb	r2, r3
   10f44:	687b      	ldr	r3, [r7, #4]
   10f46:	701a      	strb	r2, [r3, #0]
}
   10f48:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   10f4c:	f2c0 0302 	movt	r3, #2
   10f50:	68fa      	ldr	r2, [r7, #12]
   10f52:	681b      	ldr	r3, [r3, #0]
   10f54:	429a      	cmp	r2, r3
   10f56:	d001      	beq.n	10f5c <BitOff+0x68>
   10f58:	f7f8 f824 	bl	8fa4 <__stack_chk_fail>
   10f5c:	f107 0710 	add.w	r7, r7, #16
   10f60:	46bd      	mov	sp, r7
   10f62:	bd80      	pop	{r7, pc}

00010f64 <BitTest>:
//    0   : if the related bit is off
//    !=0 : otherwise 
//****************************************************************************

static byte BitTest (const char *pcBuf, byte ucIdx)
{
   10f64:	b580      	push	{r7, lr}
   10f66:	b084      	sub	sp, #16
   10f68:	af00      	add	r7, sp, #0
   10f6a:	6078      	str	r0, [r7, #4]
   10f6c:	460b      	mov	r3, r1
   10f6e:	70fb      	strb	r3, [r7, #3]
   10f70:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   10f74:	f2c0 0302 	movt	r3, #2
   10f78:	681b      	ldr	r3, [r3, #0]
   10f7a:	60fb      	str	r3, [r7, #12]
    ucIdx--;
   10f7c:	78fb      	ldrb	r3, [r7, #3]
   10f7e:	3b01      	subs	r3, #1
   10f80:	70fb      	strb	r3, [r7, #3]
    while(ucIdx >= 8) 
   10f82:	e005      	b.n	10f90 <BitTest+0x2c>
    {
        pcBuf++;
   10f84:	687b      	ldr	r3, [r7, #4]
   10f86:	3301      	adds	r3, #1
   10f88:	607b      	str	r3, [r7, #4]
        ucIdx -= 8;
   10f8a:	78fb      	ldrb	r3, [r7, #3]
   10f8c:	3b08      	subs	r3, #8
   10f8e:	70fb      	strb	r3, [r7, #3]
//****************************************************************************

static byte BitTest (const char *pcBuf, byte ucIdx)
{
    ucIdx--;
    while(ucIdx >= 8) 
   10f90:	78fb      	ldrb	r3, [r7, #3]
   10f92:	2b07      	cmp	r3, #7
   10f94:	d8f6      	bhi.n	10f84 <BitTest+0x20>
    {
        pcBuf++;
        ucIdx -= 8;
    }
    return ((*pcBuf) >> (7 - ucIdx)) & 0x01;
   10f96:	687b      	ldr	r3, [r7, #4]
   10f98:	781b      	ldrb	r3, [r3, #0]
   10f9a:	461a      	mov	r2, r3
   10f9c:	78fb      	ldrb	r3, [r7, #3]
   10f9e:	f1c3 0307 	rsb	r3, r3, #7
   10fa2:	fa42 f303 	asr.w	r3, r2, r3
   10fa6:	b2db      	uxtb	r3, r3
   10fa8:	f003 0301 	and.w	r3, r3, #1
   10fac:	b2db      	uxtb	r3, r3
}
   10fae:	4618      	mov	r0, r3
   10fb0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   10fb4:	f2c0 0302 	movt	r3, #2
   10fb8:	68fa      	ldr	r2, [r7, #12]
   10fba:	681b      	ldr	r3, [r3, #0]
   10fbc:	429a      	cmp	r2, r3
   10fbe:	d001      	beq.n	10fc4 <BitTest+0x60>
   10fc0:	f7f7 fff0 	bl	8fa4 <__stack_chk_fail>
   10fc4:	f107 0710 	add.w	r7, r7, #16
   10fc8:	46bd      	mov	sp, r7
   10fca:	bd80      	pop	{r7, pc}

00010fcc <SetParity>:
//     ucTyp (I-) : Even or Odd parity
//  This function has no return value.
//****************************************************************************

void SetParity (char *pcBuf, word usDim, byte ucPar, byte ucTyp)
{
   10fcc:	b580      	push	{r7, lr}
   10fce:	b084      	sub	sp, #16
   10fd0:	af00      	add	r7, sp, #0
   10fd2:	6078      	str	r0, [r7, #4]
   10fd4:	8079      	strh	r1, [r7, #2]
   10fd6:	707a      	strb	r2, [r7, #1]
   10fd8:	703b      	strb	r3, [r7, #0]
   10fda:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   10fde:	f2c0 0302 	movt	r3, #2
   10fe2:	681b      	ldr	r3, [r3, #0]
   10fe4:	60fb      	str	r3, [r7, #12]
    // ***************
    byte ucCnt, ucIdx;

    // Set parity in progress
    // **********************
    while(usDim--) 
   10fe6:	e049      	b.n	1107c <SetParity+0xb0>
    {
        ucCnt=0;
   10fe8:	2300      	movs	r3, #0
   10fea:	72bb      	strb	r3, [r7, #10]
        for (ucIdx=1; ucIdx<=8; ucIdx++) 
   10fec:	2301      	movs	r3, #1
   10fee:	72fb      	strb	r3, [r7, #11]
   10ff0:	e013      	b.n	1101a <SetParity+0x4e>
        {
            if (ucIdx == ucPar)
   10ff2:	7afa      	ldrb	r2, [r7, #11]
   10ff4:	787b      	ldrb	r3, [r7, #1]
   10ff6:	429a      	cmp	r2, r3
   10ff8:	d00b      	beq.n	11012 <SetParity+0x46>
                continue;
            if (BitTest(pcBuf, ucIdx))
   10ffa:	7afb      	ldrb	r3, [r7, #11]
   10ffc:	6878      	ldr	r0, [r7, #4]
   10ffe:	4619      	mov	r1, r3
   11000:	f7ff ffb0 	bl	10f64 <BitTest>
   11004:	4603      	mov	r3, r0
   11006:	2b00      	cmp	r3, #0
   11008:	d004      	beq.n	11014 <SetParity+0x48>
                ucCnt++;
   1100a:	7abb      	ldrb	r3, [r7, #10]
   1100c:	3301      	adds	r3, #1
   1100e:	72bb      	strb	r3, [r7, #10]
   11010:	e000      	b.n	11014 <SetParity+0x48>
    {
        ucCnt=0;
        for (ucIdx=1; ucIdx<=8; ucIdx++) 
        {
            if (ucIdx == ucPar)
                continue;
   11012:	bf00      	nop
    // Set parity in progress
    // **********************
    while(usDim--) 
    {
        ucCnt=0;
        for (ucIdx=1; ucIdx<=8; ucIdx++) 
   11014:	7afb      	ldrb	r3, [r7, #11]
   11016:	3301      	adds	r3, #1
   11018:	72fb      	strb	r3, [r7, #11]
   1101a:	7afb      	ldrb	r3, [r7, #11]
   1101c:	2b08      	cmp	r3, #8
   1101e:	d9e8      	bls.n	10ff2 <SetParity+0x26>
            if (ucIdx == ucPar)
                continue;
            if (BitTest(pcBuf, ucIdx))
                ucCnt++;
        }
        switch (ucTyp) 
   11020:	783b      	ldrb	r3, [r7, #0]
   11022:	2b45      	cmp	r3, #69	; 0x45
   11024:	d002      	beq.n	1102c <SetParity+0x60>
   11026:	2b4f      	cmp	r3, #79	; 0x4f
   11028:	d012      	beq.n	11050 <SetParity+0x84>
   1102a:	e023      	b.n	11074 <SetParity+0xa8>
        {
        case 'E':
        	if (ucCnt % 2)
   1102c:	7abb      	ldrb	r3, [r7, #10]
   1102e:	f003 0301 	and.w	r3, r3, #1
   11032:	b2db      	uxtb	r3, r3
   11034:	2b00      	cmp	r3, #0
   11036:	d005      	beq.n	11044 <SetParity+0x78>
        		BitOn(pcBuf, ucPar);  // An even parity bit is set to 1 if the number of ones in a given set of bits is odd
   11038:	787b      	ldrb	r3, [r7, #1]
   1103a:	6878      	ldr	r0, [r7, #4]
   1103c:	4619      	mov	r1, r3
   1103e:	f7ff ff23 	bl	10e88 <BitOn>
        	else
                BitOff(pcBuf, ucPar);
            break;
   11042:	e018      	b.n	11076 <SetParity+0xaa>
        {
        case 'E':
        	if (ucCnt % 2)
        		BitOn(pcBuf, ucPar);  // An even parity bit is set to 1 if the number of ones in a given set of bits is odd
        	else
                BitOff(pcBuf, ucPar);
   11044:	787b      	ldrb	r3, [r7, #1]
   11046:	6878      	ldr	r0, [r7, #4]
   11048:	4619      	mov	r1, r3
   1104a:	f7ff ff53 	bl	10ef4 <BitOff>
            break;
   1104e:	e012      	b.n	11076 <SetParity+0xaa>
        case 'O':
            if (ucCnt % 2)
   11050:	7abb      	ldrb	r3, [r7, #10]
   11052:	f003 0301 	and.w	r3, r3, #1
   11056:	b2db      	uxtb	r3, r3
   11058:	2b00      	cmp	r3, #0
   1105a:	d005      	beq.n	11068 <SetParity+0x9c>
            	BitOff(pcBuf, ucPar);
   1105c:	787b      	ldrb	r3, [r7, #1]
   1105e:	6878      	ldr	r0, [r7, #4]
   11060:	4619      	mov	r1, r3
   11062:	f7ff ff47 	bl	10ef4 <BitOff>
            else
                BitOn(pcBuf, ucPar);  // An odd parity bit is set to 1 if the number of ones in a given set of bits is even
            break;
   11066:	e006      	b.n	11076 <SetParity+0xaa>
            break;
        case 'O':
            if (ucCnt % 2)
            	BitOff(pcBuf, ucPar);
            else
                BitOn(pcBuf, ucPar);  // An odd parity bit is set to 1 if the number of ones in a given set of bits is even
   11068:	787b      	ldrb	r3, [r7, #1]
   1106a:	6878      	ldr	r0, [r7, #4]
   1106c:	4619      	mov	r1, r3
   1106e:	f7ff ff0b 	bl	10e88 <BitOn>
            break;
   11072:	e000      	b.n	11076 <SetParity+0xaa>
        default:
        	break;
   11074:	bf00      	nop
        }
        pcBuf++;
   11076:	687b      	ldr	r3, [r7, #4]
   11078:	3301      	adds	r3, #1
   1107a:	607b      	str	r3, [r7, #4]
    // ***************
    byte ucCnt, ucIdx;

    // Set parity in progress
    // **********************
    while(usDim--) 
   1107c:	887b      	ldrh	r3, [r7, #2]
   1107e:	2b00      	cmp	r3, #0
   11080:	bf0c      	ite	eq
   11082:	2300      	moveq	r3, #0
   11084:	2301      	movne	r3, #1
   11086:	b2db      	uxtb	r3, r3
   11088:	887a      	ldrh	r2, [r7, #2]
   1108a:	3a01      	subs	r2, #1
   1108c:	807a      	strh	r2, [r7, #2]
   1108e:	2b00      	cmp	r3, #0
   11090:	d1aa      	bne.n	10fe8 <SetParity+0x1c>
        default:
        	break;
        }
        pcBuf++;
    }
}
   11092:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11096:	f2c0 0302 	movt	r3, #2
   1109a:	68fa      	ldr	r2, [r7, #12]
   1109c:	681b      	ldr	r3, [r3, #0]
   1109e:	429a      	cmp	r2, r3
   110a0:	d001      	beq.n	110a6 <SetParity+0xda>
   110a2:	f7f7 ff7f 	bl	8fa4 <__stack_chk_fail>
   110a6:	f107 0710 	add.w	r7, r7, #16
   110aa:	46bd      	mov	sp, r7
   110ac:	bd80      	pop	{r7, pc}
   110ae:	bf00      	nop

000110b0 <CheckParity>:
//    1 : if parity is OK 
//    0 : if parity NOK
//****************************************************************************

byte CheckParity (const char *pcBuf, word usDim, byte ucPar, byte ucTyp)
{
   110b0:	b580      	push	{r7, lr}
   110b2:	b084      	sub	sp, #16
   110b4:	af00      	add	r7, sp, #0
   110b6:	6078      	str	r0, [r7, #4]
   110b8:	8079      	strh	r1, [r7, #2]
   110ba:	707a      	strb	r2, [r7, #1]
   110bc:	703b      	strb	r3, [r7, #0]
   110be:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   110c2:	f2c0 0302 	movt	r3, #2
   110c6:	681b      	ldr	r3, [r3, #0]
   110c8:	60fb      	str	r3, [r7, #12]
    byte ucCnt, ucIdx;
    byte ucRet;

    // Check parity in progress
    // ************************
    ucRet=1;
   110ca:	2301      	movs	r3, #1
   110cc:	72fb      	strb	r3, [r7, #11]
    while (usDim--) 
   110ce:	e035      	b.n	1113c <CheckParity+0x8c>
    {
        ucCnt=0;
   110d0:	2300      	movs	r3, #0
   110d2:	727b      	strb	r3, [r7, #9]
        for (ucIdx=1; ucIdx<=8; ucIdx++) 
   110d4:	2301      	movs	r3, #1
   110d6:	72bb      	strb	r3, [r7, #10]
   110d8:	e00d      	b.n	110f6 <CheckParity+0x46>
        {
            if (BitTest(pcBuf, ucIdx))
   110da:	7abb      	ldrb	r3, [r7, #10]
   110dc:	6878      	ldr	r0, [r7, #4]
   110de:	4619      	mov	r1, r3
   110e0:	f7ff ff40 	bl	10f64 <BitTest>
   110e4:	4603      	mov	r3, r0
   110e6:	2b00      	cmp	r3, #0
   110e8:	d002      	beq.n	110f0 <CheckParity+0x40>
                ucCnt++;
   110ea:	7a7b      	ldrb	r3, [r7, #9]
   110ec:	3301      	adds	r3, #1
   110ee:	727b      	strb	r3, [r7, #9]
    // ************************
    ucRet=1;
    while (usDim--) 
    {
        ucCnt=0;
        for (ucIdx=1; ucIdx<=8; ucIdx++) 
   110f0:	7abb      	ldrb	r3, [r7, #10]
   110f2:	3301      	adds	r3, #1
   110f4:	72bb      	strb	r3, [r7, #10]
   110f6:	7abb      	ldrb	r3, [r7, #10]
   110f8:	2b08      	cmp	r3, #8
   110fa:	d9ee      	bls.n	110da <CheckParity+0x2a>
        {
            if (BitTest(pcBuf, ucIdx))
                ucCnt++;
        }
        switch(ucTyp)
   110fc:	783b      	ldrb	r3, [r7, #0]
   110fe:	2b45      	cmp	r3, #69	; 0x45
   11100:	d00a      	beq.n	11118 <CheckParity+0x68>
   11102:	2b4f      	cmp	r3, #79	; 0x4f
   11104:	d111      	bne.n	1112a <CheckParity+0x7a>
        {
        case 'O' :
        	if (!(ucCnt%2)) // Making the total number of ones, including the parity bit, odd
   11106:	7a7b      	ldrb	r3, [r7, #9]
   11108:	f003 0301 	and.w	r3, r3, #1
   1110c:	b2db      	uxtb	r3, r3
   1110e:	2b00      	cmp	r3, #0
   11110:	d10e      	bne.n	11130 <CheckParity+0x80>
        		ucRet=0;
   11112:	2300      	movs	r3, #0
   11114:	72fb      	strb	r3, [r7, #11]
        	break;
   11116:	e00b      	b.n	11130 <CheckParity+0x80>
		case 'E':
		    if (ucCnt%2)    // Making the total number of ones, including the parity bit, even
   11118:	7a7b      	ldrb	r3, [r7, #9]
   1111a:	f003 0301 	and.w	r3, r3, #1
   1111e:	b2db      	uxtb	r3, r3
   11120:	2b00      	cmp	r3, #0
   11122:	d007      	beq.n	11134 <CheckParity+0x84>
		    	ucRet=0;
   11124:	2300      	movs	r3, #0
   11126:	72fb      	strb	r3, [r7, #11]
        	break;
   11128:	e004      	b.n	11134 <CheckParity+0x84>
		default:            // Unknown parity
			ucRet=0;
   1112a:	2300      	movs	r3, #0
   1112c:	72fb      	strb	r3, [r7, #11]
            break;
   1112e:	e002      	b.n	11136 <CheckParity+0x86>
        switch(ucTyp)
        {
        case 'O' :
        	if (!(ucCnt%2)) // Making the total number of ones, including the parity bit, odd
        		ucRet=0;
        	break;
   11130:	bf00      	nop
   11132:	e000      	b.n	11136 <CheckParity+0x86>
		case 'E':
		    if (ucCnt%2)    // Making the total number of ones, including the parity bit, even
		    	ucRet=0;
        	break;
   11134:	bf00      	nop
		default:            // Unknown parity
			ucRet=0;
            break;
        }
        pcBuf++;
   11136:	687b      	ldr	r3, [r7, #4]
   11138:	3301      	adds	r3, #1
   1113a:	607b      	str	r3, [r7, #4]
    byte ucRet;

    // Check parity in progress
    // ************************
    ucRet=1;
    while (usDim--) 
   1113c:	887b      	ldrh	r3, [r7, #2]
   1113e:	2b00      	cmp	r3, #0
   11140:	bf0c      	ite	eq
   11142:	2300      	moveq	r3, #0
   11144:	2301      	movne	r3, #1
   11146:	b2db      	uxtb	r3, r3
   11148:	887a      	ldrh	r2, [r7, #2]
   1114a:	3a01      	subs	r2, #1
   1114c:	807a      	strh	r2, [r7, #2]
   1114e:	2b00      	cmp	r3, #0
   11150:	d1be      	bne.n	110d0 <CheckParity+0x20>
            break;
        }
        pcBuf++;
    }
    
    return ucRet;
   11152:	7afb      	ldrb	r3, [r7, #11]
}
   11154:	4618      	mov	r0, r3
   11156:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1115a:	f2c0 0302 	movt	r3, #2
   1115e:	68fa      	ldr	r2, [r7, #12]
   11160:	681b      	ldr	r3, [r3, #0]
   11162:	429a      	cmp	r2, r3
   11164:	d001      	beq.n	1116a <CheckParity+0xba>
   11166:	f7f7 ff1d 	bl	8fa4 <__stack_chk_fail>
   1116a:	f107 0710 	add.w	r7, r7, #16
   1116e:	46bd      	mov	sp, r7
   11170:	bd80      	pop	{r7, pc}
   11172:	bf00      	nop

00011174 <parseStr>:
//    NULL : Parsing failed
//    !NULL : Pointer to the end of string extracted.
//****************************************************************************

const char *parseStr(char ucToken, char *pcDst, const char *pcSrc, int iDim)
{
   11174:	b580      	push	{r7, lr}
   11176:	b086      	sub	sp, #24
   11178:	af00      	add	r7, sp, #0
   1117a:	60b9      	str	r1, [r7, #8]
   1117c:	607a      	str	r2, [r7, #4]
   1117e:	603b      	str	r3, [r7, #0]
   11180:	4603      	mov	r3, r0
   11182:	73fb      	strb	r3, [r7, #15]
   11184:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11188:	f2c0 0302 	movt	r3, #2
   1118c:	681b      	ldr	r3, [r3, #0]
   1118e:	617b      	str	r3, [r7, #20]
    while(*pcSrc)
   11190:	e01a      	b.n	111c8 <parseStr+0x54>
    {
    	if (iDim == 0)        // Buffer pcDst overflow
   11192:	683b      	ldr	r3, [r7, #0]
   11194:	2b00      	cmp	r3, #0
   11196:	d101      	bne.n	1119c <parseStr+0x28>
    		return NULL;      // Parsing failed
   11198:	2300      	movs	r3, #0
   1119a:	e01d      	b.n	111d8 <parseStr+0x64>

        if(*pcSrc == ucToken) // Token found
   1119c:	687b      	ldr	r3, [r7, #4]
   1119e:	781b      	ldrb	r3, [r3, #0]
   111a0:	7bfa      	ldrb	r2, [r7, #15]
   111a2:	429a      	cmp	r2, r3
   111a4:	d103      	bne.n	111ae <parseStr+0x3a>
        {
            pcSrc++;          // Skip token
   111a6:	687b      	ldr	r3, [r7, #4]
   111a8:	3301      	adds	r3, #1
   111aa:	607b      	str	r3, [r7, #4]
            break;
   111ac:	e010      	b.n	111d0 <parseStr+0x5c>
        }

        *pcDst++ = *pcSrc++;
   111ae:	687b      	ldr	r3, [r7, #4]
   111b0:	781a      	ldrb	r2, [r3, #0]
   111b2:	68bb      	ldr	r3, [r7, #8]
   111b4:	701a      	strb	r2, [r3, #0]
   111b6:	68bb      	ldr	r3, [r7, #8]
   111b8:	3301      	adds	r3, #1
   111ba:	60bb      	str	r3, [r7, #8]
   111bc:	687b      	ldr	r3, [r7, #4]
   111be:	3301      	adds	r3, #1
   111c0:	607b      	str	r3, [r7, #4]
        iDim--;
   111c2:	683b      	ldr	r3, [r7, #0]
   111c4:	3b01      	subs	r3, #1
   111c6:	603b      	str	r3, [r7, #0]
//    !NULL : Pointer to the end of string extracted.
//****************************************************************************

const char *parseStr(char ucToken, char *pcDst, const char *pcSrc, int iDim)
{
    while(*pcSrc)
   111c8:	687b      	ldr	r3, [r7, #4]
   111ca:	781b      	ldrb	r3, [r3, #0]
   111cc:	2b00      	cmp	r3, #0
   111ce:	d1e0      	bne.n	11192 <parseStr+0x1e>

        *pcDst++ = *pcSrc++;
        iDim--;
    }

    *pcDst=0;
   111d0:	68bb      	ldr	r3, [r7, #8]
   111d2:	2200      	movs	r2, #0
   111d4:	701a      	strb	r2, [r3, #0]
    return pcSrc;
   111d6:	687b      	ldr	r3, [r7, #4]
}
   111d8:	4618      	mov	r0, r3
   111da:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   111de:	f2c0 0302 	movt	r3, #2
   111e2:	697a      	ldr	r2, [r7, #20]
   111e4:	681b      	ldr	r3, [r3, #0]
   111e6:	429a      	cmp	r2, r3
   111e8:	d001      	beq.n	111ee <parseStr+0x7a>
   111ea:	f7f7 fedb 	bl	8fa4 <__stack_chk_fail>
   111ee:	f107 0718 	add.w	r7, r7, #24
   111f2:	46bd      	mov	sp, r7
   111f4:	bd80      	pop	{r7, pc}
   111f6:	bf00      	nop

000111f8 <UintToIp>:
//  This function has return value.
//    A string buffer regarding the IP address.
//****************************************************************************

char* UintToIp(doubleword uiVal)
{
   111f8:	b580      	push	{r7, lr}
   111fa:	b086      	sub	sp, #24
   111fc:	af02      	add	r7, sp, #8
   111fe:	6078      	str	r0, [r7, #4]
   11200:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11204:	f2c0 0302 	movt	r3, #2
   11208:	681b      	ldr	r3, [r3, #0]
   1120a:	60fb      	str	r3, [r7, #12]
    // ***************
	byte ucVal1, ucVal2, ucVal3, ucVal4;

	// Conversion unsigned long to Ip address
	// **************************************
	ucVal1 = uiVal%256;
   1120c:	687b      	ldr	r3, [r7, #4]
   1120e:	723b      	strb	r3, [r7, #8]
	ucVal2 = (uiVal/256)%256;
   11210:	687b      	ldr	r3, [r7, #4]
   11212:	0a1b      	lsrs	r3, r3, #8
   11214:	727b      	strb	r3, [r7, #9]
	ucVal3 = (uiVal/(256*256))%256;
   11216:	687b      	ldr	r3, [r7, #4]
   11218:	0c1b      	lsrs	r3, r3, #16
   1121a:	72bb      	strb	r3, [r7, #10]
	ucVal4 = (uiVal/(256*256*256))%256;
   1121c:	687b      	ldr	r3, [r7, #4]
   1121e:	0e1b      	lsrs	r3, r3, #24
   11220:	72fb      	strb	r3, [r7, #11]

	memset(tcIp, 0, sizeof(tcIp));
   11222:	f64f 707c 	movw	r0, #65404	; 0xff7c
   11226:	f2c0 0002 	movt	r0, #2
   1122a:	2100      	movs	r1, #0
   1122c:	2210      	movs	r2, #16
   1122e:	f7f7 ecc6 	blx	8bbc <_init+0x5c>
	sprintf (tcIp, "%d.%d.%d.%d", ucVal4, ucVal3, ucVal2, ucVal1);
   11232:	7afa      	ldrb	r2, [r7, #11]
   11234:	7abb      	ldrb	r3, [r7, #10]
   11236:	7a78      	ldrb	r0, [r7, #9]
   11238:	7a39      	ldrb	r1, [r7, #8]
   1123a:	9000      	str	r0, [sp, #0]
   1123c:	9101      	str	r1, [sp, #4]
   1123e:	f64f 707c 	movw	r0, #65404	; 0xff7c
   11242:	f2c0 0002 	movt	r0, #2
   11246:	f244 6158 	movw	r1, #18008	; 0x4658
   1124a:	f2c0 0102 	movt	r1, #2
   1124e:	f7f7 ed32 	blx	8cb4 <_init+0x154>

	return tcIp;
   11252:	f64f 737c 	movw	r3, #65404	; 0xff7c
   11256:	f2c0 0302 	movt	r3, #2
}
   1125a:	4618      	mov	r0, r3
   1125c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11260:	f2c0 0302 	movt	r3, #2
   11264:	68fa      	ldr	r2, [r7, #12]
   11266:	681b      	ldr	r3, [r3, #0]
   11268:	429a      	cmp	r2, r3
   1126a:	d001      	beq.n	11270 <UintToIp+0x78>
   1126c:	f7f7 fe9a 	bl	8fa4 <__stack_chk_fail>
   11270:	f107 0710 	add.w	r7, r7, #16
   11274:	46bd      	mov	sp, r7
   11276:	bd80      	pop	{r7, pc}

00011278 <IpToUint>:
//  This function has return value.
//    An unsigned long regarding the IP address.
//****************************************************************************

doubleword IpToUint(const char *pcStr)
{
   11278:	b590      	push	{r4, r7, lr}
   1127a:	b089      	sub	sp, #36	; 0x24
   1127c:	af00      	add	r7, sp, #0
   1127e:	6078      	str	r0, [r7, #4]
   11280:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11284:	f2c0 0302 	movt	r3, #2
   11288:	681b      	ldr	r3, [r3, #0]
   1128a:	61fb      	str	r3, [r7, #28]
	// Local variables
    // ***************
	char tcStr1[3+1], tcStr2[3+1], tcStr3[3+1], tcStr4[3+1];
	doubleword uiVal=0;
   1128c:	2300      	movs	r3, #0
   1128e:	60bb      	str	r3, [r7, #8]
	
	// Conversion Ip address to unsigned int
	// *************************************
	if (*pcStr)
   11290:	687b      	ldr	r3, [r7, #4]
   11292:	781b      	ldrb	r3, [r3, #0]
   11294:	2b00      	cmp	r3, #0
   11296:	d072      	beq.n	1137e <IpToUint+0x106>
	{
		memset(tcStr4, 0, sizeof(tcStr4));
   11298:	f107 0318 	add.w	r3, r7, #24
   1129c:	4618      	mov	r0, r3
   1129e:	2100      	movs	r1, #0
   112a0:	2204      	movs	r2, #4
   112a2:	f7f7 ec8c 	blx	8bbc <_init+0x5c>
		pcStr = parseStr('.', tcStr4, pcStr, sizeof(tcStr4));
   112a6:	f107 0318 	add.w	r3, r7, #24
   112aa:	202e      	movs	r0, #46	; 0x2e
   112ac:	4619      	mov	r1, r3
   112ae:	687a      	ldr	r2, [r7, #4]
   112b0:	2304      	movs	r3, #4
   112b2:	f7ff ff5f 	bl	11174 <parseStr>
   112b6:	6078      	str	r0, [r7, #4]
	    if(pcStr==NULL)
   112b8:	687b      	ldr	r3, [r7, #4]
   112ba:	2b00      	cmp	r3, #0
   112bc:	d101      	bne.n	112c2 <IpToUint+0x4a>
	    	return 0;
   112be:	2300      	movs	r3, #0
   112c0:	e05e      	b.n	11380 <IpToUint+0x108>
	    memset(tcStr3, 0, sizeof(tcStr3));
   112c2:	f107 0314 	add.w	r3, r7, #20
   112c6:	4618      	mov	r0, r3
   112c8:	2100      	movs	r1, #0
   112ca:	2204      	movs	r2, #4
   112cc:	f7f7 ec76 	blx	8bbc <_init+0x5c>
	    pcStr = parseStr('.', tcStr3, pcStr, sizeof(tcStr3));
   112d0:	f107 0314 	add.w	r3, r7, #20
   112d4:	202e      	movs	r0, #46	; 0x2e
   112d6:	4619      	mov	r1, r3
   112d8:	687a      	ldr	r2, [r7, #4]
   112da:	2304      	movs	r3, #4
   112dc:	f7ff ff4a 	bl	11174 <parseStr>
   112e0:	6078      	str	r0, [r7, #4]
	    if(pcStr==NULL)
   112e2:	687b      	ldr	r3, [r7, #4]
   112e4:	2b00      	cmp	r3, #0
   112e6:	d101      	bne.n	112ec <IpToUint+0x74>
	    	return 0;
   112e8:	2300      	movs	r3, #0
   112ea:	e049      	b.n	11380 <IpToUint+0x108>
	    memset(tcStr2, 0, sizeof(tcStr2));
   112ec:	f107 0310 	add.w	r3, r7, #16
   112f0:	4618      	mov	r0, r3
   112f2:	2100      	movs	r1, #0
   112f4:	2204      	movs	r2, #4
   112f6:	f7f7 ec62 	blx	8bbc <_init+0x5c>
	    pcStr = parseStr('.', tcStr2, pcStr, sizeof(tcStr2));
   112fa:	f107 0310 	add.w	r3, r7, #16
   112fe:	202e      	movs	r0, #46	; 0x2e
   11300:	4619      	mov	r1, r3
   11302:	687a      	ldr	r2, [r7, #4]
   11304:	2304      	movs	r3, #4
   11306:	f7ff ff35 	bl	11174 <parseStr>
   1130a:	6078      	str	r0, [r7, #4]
	    if(pcStr==NULL)
   1130c:	687b      	ldr	r3, [r7, #4]
   1130e:	2b00      	cmp	r3, #0
   11310:	d101      	bne.n	11316 <IpToUint+0x9e>
	    	return 0;
   11312:	2300      	movs	r3, #0
   11314:	e034      	b.n	11380 <IpToUint+0x108>
	    memset(tcStr1, 0, sizeof(tcStr1));
   11316:	f107 030c 	add.w	r3, r7, #12
   1131a:	4618      	mov	r0, r3
   1131c:	2100      	movs	r1, #0
   1131e:	2204      	movs	r2, #4
   11320:	f7f7 ec4c 	blx	8bbc <_init+0x5c>
	    pcStr = parseStr('.', tcStr1, pcStr, sizeof(tcStr1));
   11324:	f107 030c 	add.w	r3, r7, #12
   11328:	202e      	movs	r0, #46	; 0x2e
   1132a:	4619      	mov	r1, r3
   1132c:	687a      	ldr	r2, [r7, #4]
   1132e:	2304      	movs	r3, #4
   11330:	f7ff ff20 	bl	11174 <parseStr>
   11334:	6078      	str	r0, [r7, #4]
	    if(pcStr==NULL)
   11336:	687b      	ldr	r3, [r7, #4]
   11338:	2b00      	cmp	r3, #0
   1133a:	d101      	bne.n	11340 <IpToUint+0xc8>
	    	return 0;
   1133c:	2300      	movs	r3, #0
   1133e:	e01f      	b.n	11380 <IpToUint+0x108>

	    uiVal = atoi(tcStr4)*256*256*256 + atoi(tcStr3)*256*256 + atoi(tcStr2)*256 + atoi(tcStr1);
   11340:	f107 0318 	add.w	r3, r7, #24
   11344:	4618      	mov	r0, r3
   11346:	f7f7 ec2e 	blx	8ba4 <_init+0x44>
   1134a:	4603      	mov	r3, r0
   1134c:	021c      	lsls	r4, r3, #8
   1134e:	f107 0314 	add.w	r3, r7, #20
   11352:	4618      	mov	r0, r3
   11354:	f7f7 ec26 	blx	8ba4 <_init+0x44>
   11358:	4603      	mov	r3, r0
   1135a:	18e3      	adds	r3, r4, r3
   1135c:	021c      	lsls	r4, r3, #8
   1135e:	f107 0310 	add.w	r3, r7, #16
   11362:	4618      	mov	r0, r3
   11364:	f7f7 ec1e 	blx	8ba4 <_init+0x44>
   11368:	4603      	mov	r3, r0
   1136a:	18e3      	adds	r3, r4, r3
   1136c:	021c      	lsls	r4, r3, #8
   1136e:	f107 030c 	add.w	r3, r7, #12
   11372:	4618      	mov	r0, r3
   11374:	f7f7 ec16 	blx	8ba4 <_init+0x44>
   11378:	4603      	mov	r3, r0
   1137a:	18e3      	adds	r3, r4, r3
   1137c:	60bb      	str	r3, [r7, #8]
	}

	return uiVal;
   1137e:	68bb      	ldr	r3, [r7, #8]
}
   11380:	4618      	mov	r0, r3
   11382:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11386:	f2c0 0302 	movt	r3, #2
   1138a:	69fa      	ldr	r2, [r7, #28]
   1138c:	681b      	ldr	r3, [r3, #0]
   1138e:	429a      	cmp	r2, r3
   11390:	d001      	beq.n	11396 <IpToUint+0x11e>
   11392:	f7f7 fe07 	bl	8fa4 <__stack_chk_fail>
   11396:	f107 0724 	add.w	r7, r7, #36	; 0x24
   1139a:	46bd      	mov	sp, r7
   1139c:	bd90      	pop	{r4, r7, pc}
   1139e:	bf00      	nop

000113a0 <ParamExist>:
//     true : Parameter file present
//     false : Parameter file absent
//****************************************************************************

int ParamExist(word usAppliType, char *pcFamilyName)
{
   113a0:	b580      	push	{r7, lr}
   113a2:	b096      	sub	sp, #88	; 0x58
   113a4:	af00      	add	r7, sp, #0
   113a6:	4603      	mov	r3, r0
   113a8:	6039      	str	r1, [r7, #0]
   113aa:	80fb      	strh	r3, [r7, #6]
   113ac:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   113b0:	f2c0 0302 	movt	r3, #2
   113b4:	681b      	ldr	r3, [r3, #0]
   113b6:	657b      	str	r3, [r7, #84]	; 0x54
	object_descriptor_t xObj;
	int iRet;

	// Search parameter file
	// *********************
	iRet = ObjectGetDescriptor (OBJECT_TYPE_PARAM, usAppliType, &xObj);
   113b8:	88fa      	ldrh	r2, [r7, #6]
   113ba:	f107 0310 	add.w	r3, r7, #16
   113be:	2003      	movs	r0, #3
   113c0:	4611      	mov	r1, r2
   113c2:	461a      	mov	r2, r3
   113c4:	f00f fc70 	bl	20ca8 <ObjectGetDescriptor>
   113c8:	60f8      	str	r0, [r7, #12]

	if (iRet == 0)
   113ca:	68fb      	ldr	r3, [r7, #12]
   113cc:	2b00      	cmp	r3, #0
   113ce:	d10b      	bne.n	113e8 <ParamExist+0x48>
	{
		if (strcmp ((char*)xObj.appli_family, pcFamilyName) == 0)
   113d0:	f107 0310 	add.w	r3, r7, #16
   113d4:	332d      	adds	r3, #45	; 0x2d
   113d6:	4618      	mov	r0, r3
   113d8:	6839      	ldr	r1, [r7, #0]
   113da:	f7f7 ec80 	blx	8cdc <_init+0x17c>
   113de:	4603      	mov	r3, r0
   113e0:	2b00      	cmp	r3, #0
   113e2:	d101      	bne.n	113e8 <ParamExist+0x48>
			return TRUE; // Parameter file present in SYSTEM disk
   113e4:	2301      	movs	r3, #1
   113e6:	e000      	b.n	113ea <ParamExist+0x4a>
	}

	return FALSE;        // Parameter file absent from SYSTEM disk
   113e8:	2300      	movs	r3, #0
}
   113ea:	4618      	mov	r0, r3
   113ec:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   113f0:	f2c0 0302 	movt	r3, #2
   113f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   113f6:	681b      	ldr	r3, [r3, #0]
   113f8:	429a      	cmp	r2, r3
   113fa:	d001      	beq.n	11400 <ParamExist+0x60>
   113fc:	f7f7 fdd2 	bl	8fa4 <__stack_chk_fail>
   11400:	f107 0758 	add.w	r7, r7, #88	; 0x58
   11404:	46bd      	mov	sp, r7
   11406:	bd80      	pop	{r7, pc}

00011408 <AppliExist>:
//     TRUE : Application file present
//     FALSE : Application file absent
//****************************************************************************

int AppliExist(word usAppliType)
{
   11408:	b580      	push	{r7, lr}
   1140a:	b096      	sub	sp, #88	; 0x58
   1140c:	af00      	add	r7, sp, #0
   1140e:	4603      	mov	r3, r0
   11410:	80fb      	strh	r3, [r7, #6]
   11412:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11416:	f2c0 0302 	movt	r3, #2
   1141a:	681b      	ldr	r3, [r3, #0]
   1141c:	657b      	str	r3, [r7, #84]	; 0x54
	object_descriptor_t xObj;
	int iRet;

	// Search parameter file
	// *********************
	iRet = ObjectGetDescriptor (OBJECT_TYPE_APPLI, usAppliType, &xObj);
   1141e:	88fa      	ldrh	r2, [r7, #6]
   11420:	f107 0310 	add.w	r3, r7, #16
   11424:	2001      	movs	r0, #1
   11426:	4611      	mov	r1, r2
   11428:	461a      	mov	r2, r3
   1142a:	f00f fc3d 	bl	20ca8 <ObjectGetDescriptor>
   1142e:	60f8      	str	r0, [r7, #12]

	if (iRet == 0)
   11430:	68fb      	ldr	r3, [r7, #12]
   11432:	2b00      	cmp	r3, #0
   11434:	d101      	bne.n	1143a <AppliExist+0x32>
		return TRUE;    // Application file present in SYSTEM disk
   11436:	2301      	movs	r3, #1
   11438:	e000      	b.n	1143c <AppliExist+0x34>

	return FALSE;       // Application file absent from SYSTEM disk
   1143a:	2300      	movs	r3, #0
}
   1143c:	4618      	mov	r0, r3
   1143e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11442:	f2c0 0302 	movt	r3, #2
   11446:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   11448:	681b      	ldr	r3, [r3, #0]
   1144a:	429a      	cmp	r2, r3
   1144c:	d001      	beq.n	11452 <AppliExist+0x4a>
   1144e:	f7f7 fda9 	bl	8fa4 <__stack_chk_fail>
   11452:	f107 0758 	add.w	r7, r7, #88	; 0x58
   11456:	46bd      	mov	sp, r7
   11458:	bd80      	pop	{r7, pc}
   1145a:	bf00      	nop

0001145c <TimerStart>:
//     >=0 : TimerStart done
//     <0  : TimerStart failed
//****************************************************************************

long TimerStart(byte ucTimerNbr, long lDelay)
{
   1145c:	b580      	push	{r7, lr}
   1145e:	b086      	sub	sp, #24
   11460:	af00      	add	r7, sp, #0
   11462:	4603      	mov	r3, r0
   11464:	6039      	str	r1, [r7, #0]
   11466:	71fb      	strb	r3, [r7, #7]
   11468:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1146c:	f2c0 0302 	movt	r3, #2
   11470:	681b      	ldr	r3, [r3, #0]
   11472:	617b      	str	r3, [r7, #20]
    // ***************
	T_OSL_TIMESTP llTimer;

    // Start timer in progress
    // ***********************
    CHECK(ucTimerNbr<TMR_NBR, lblKO);
   11474:	79fb      	ldrb	r3, [r7, #7]
   11476:	2b03      	cmp	r3, #3
   11478:	d82c      	bhi.n	114d4 <TimerStart+0x78>

    // Get the current timer value
    // ===========================
    llTimer = OSL_TimeStp_Now();    // In 1ns ticks.
   1147a:	f010 fe80 	bl	2217e <OSL_TimeStp_Now>
   1147e:	e9c7 0102 	strd	r0, r1, [r7, #8]

    // Set the timer to a 'period' into the future
    // ===========================================
    llTimer += (T_OSL_TIMESTP) lDelay*1000*1000;
   11482:	6839      	ldr	r1, [r7, #0]
   11484:	460a      	mov	r2, r1
   11486:	17d3      	asrs	r3, r2, #31
   11488:	f244 2140 	movw	r1, #16960	; 0x4240
   1148c:	f2c0 010f 	movt	r1, #15
   11490:	fb01 f003 	mul.w	r0, r1, r3
   11494:	2100      	movs	r1, #0
   11496:	fb01 f102 	mul.w	r1, r1, r2
   1149a:	1840      	adds	r0, r0, r1
   1149c:	f244 2140 	movw	r1, #16960	; 0x4240
   114a0:	f2c0 010f 	movt	r1, #15
   114a4:	fba2 2301 	umull	r2, r3, r2, r1
   114a8:	18c1      	adds	r1, r0, r3
   114aa:	460b      	mov	r3, r1
   114ac:	edd7 0b02 	vldr	d16, [r7, #8]
   114b0:	ec43 2b31 	vmov	d17, r2, r3
   114b4:	ef70 08a1 	vadd.i64	d16, d16, d17
   114b8:	edc7 0b02 	vstr	d16, [r7, #8]

    // Assign it to the proper timer
    // =============================
    tllTimer[ucTimerNbr]= llTimer;
   114bc:	79fa      	ldrb	r2, [r7, #7]
   114be:	f64f 7390 	movw	r3, #65424	; 0xff90
   114c2:	f2c0 0302 	movt	r3, #2
   114c6:	00d2      	lsls	r2, r2, #3
   114c8:	1899      	adds	r1, r3, r2
   114ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   114ce:	e9c1 2300 	strd	r2, r3, [r1]

    goto lblEnd;
   114d2:	e002      	b.n	114da <TimerStart+0x7e>

	// Errors treatment 
    // ****************
lblKO:
    lDelay=-1;
   114d4:	f04f 33ff 	mov.w	r3, #4294967295
   114d8:	603b      	str	r3, [r7, #0]
lblEnd:
    return lDelay;
   114da:	683b      	ldr	r3, [r7, #0]
}
   114dc:	4618      	mov	r0, r3
   114de:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   114e2:	f2c0 0302 	movt	r3, #2
   114e6:	697a      	ldr	r2, [r7, #20]
   114e8:	681b      	ldr	r3, [r3, #0]
   114ea:	429a      	cmp	r2, r3
   114ec:	d001      	beq.n	114f2 <TimerStart+0x96>
   114ee:	f7f7 fd59 	bl	8fa4 <__stack_chk_fail>
   114f2:	f107 0718 	add.w	r7, r7, #24
   114f6:	46bd      	mov	sp, r7
   114f8:	bd80      	pop	{r7, pc}
   114fa:	bf00      	nop

000114fc <TimerGet>:
//     >=0 : The number of milliseconds rest
//     <0  : TimerGet failed
//****************************************************************************

long TimerGet(byte ucTimerNbr)
{
   114fc:	b580      	push	{r7, lr}
   114fe:	b08a      	sub	sp, #40	; 0x28
   11500:	af00      	add	r7, sp, #0
   11502:	4603      	mov	r3, r0
   11504:	71fb      	strb	r3, [r7, #7]
   11506:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1150a:	f2c0 0302 	movt	r3, #2
   1150e:	681b      	ldr	r3, [r3, #0]
   11510:	627b      	str	r3, [r7, #36]	; 0x24
	T_OSL_TIMESTP llTimerEnd, llTimer;
    long lRet;
    
    // Get timer in progress
    // *********************
    CHECK(ucTimerNbr<TMR_NBR, lblKO);
   11512:	79fb      	ldrb	r3, [r7, #7]
   11514:	2b03      	cmp	r3, #3
   11516:	d821      	bhi.n	1155c <TimerGet+0x60>

    // Get the remaining timer value before expiration
    // ===============================================
    llTimerEnd = tllTimer[ucTimerNbr];  // Retrieve the timer value to reach (ns)
   11518:	79fa      	ldrb	r2, [r7, #7]
   1151a:	f64f 7390 	movw	r3, #65424	; 0xff90
   1151e:	f2c0 0302 	movt	r3, #2
   11522:	00d2      	lsls	r2, r2, #3
   11524:	189b      	adds	r3, r3, r2
   11526:	e9d3 2300 	ldrd	r2, r3, [r3]
   1152a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    llTimer = OSL_TimeStp_Now();        // Get the current timer value (ns).
   1152e:	f010 fe26 	bl	2217e <OSL_TimeStp_Now>
   11532:	e9c7 0106 	strd	r0, r1, [r7, #24]

    if(llTimer < llTimerEnd)
   11536:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   1153a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1153e:	4290      	cmp	r0, r2
   11540:	eb71 0c03 	sbcs.w	ip, r1, r3
   11544:	da07      	bge.n	11556 <TimerGet+0x5a>
    	lRet = OSL_TimeStp_ElapsedMs(llTimer, llTimerEnd);  // Return the remaining value (ms)
   11546:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   1154a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1154e:	f010 fe06 	bl	2215e <OSL_TimeStp_ElapsedMs>
   11552:	60f8      	str	r0, [r7, #12]
    else
    	lRet = 0;                                           // Timer expired
    
    goto lblEnd;
   11554:	e005      	b.n	11562 <TimerGet+0x66>
    llTimer = OSL_TimeStp_Now();        // Get the current timer value (ns).

    if(llTimer < llTimerEnd)
    	lRet = OSL_TimeStp_ElapsedMs(llTimer, llTimerEnd);  // Return the remaining value (ms)
    else
    	lRet = 0;                                           // Timer expired
   11556:	2300      	movs	r3, #0
   11558:	60fb      	str	r3, [r7, #12]
    
    goto lblEnd;
   1155a:	e002      	b.n	11562 <TimerGet+0x66>

	// Errors treatment 
    // ****************
lblKO:
    lRet=-1;
   1155c:	f04f 33ff 	mov.w	r3, #4294967295
   11560:	60fb      	str	r3, [r7, #12]
lblEnd:
    return lRet;
   11562:	68fb      	ldr	r3, [r7, #12]
}
   11564:	4618      	mov	r0, r3
   11566:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1156a:	f2c0 0302 	movt	r3, #2
   1156e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11570:	681b      	ldr	r3, [r3, #0]
   11572:	429a      	cmp	r2, r3
   11574:	d001      	beq.n	1157a <TimerGet+0x7e>
   11576:	f7f7 fd15 	bl	8fa4 <__stack_chk_fail>
   1157a:	f107 0728 	add.w	r7, r7, #40	; 0x28
   1157e:	46bd      	mov	sp, r7
   11580:	bd80      	pop	{r7, pc}
   11582:	bf00      	nop

00011584 <TimerStop>:
//     >=0 : TimerStop done
//     <0  : TimerStop failed
//****************************************************************************

int TimerStop(byte ucTimerNbr)
{
   11584:	b580      	push	{r7, lr}
   11586:	b084      	sub	sp, #16
   11588:	af00      	add	r7, sp, #0
   1158a:	4603      	mov	r3, r0
   1158c:	71fb      	strb	r3, [r7, #7]
   1158e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11592:	f2c0 0302 	movt	r3, #2
   11596:	681b      	ldr	r3, [r3, #0]
   11598:	60fb      	str	r3, [r7, #12]
    // ***************
    int iRet;
	
	// Stop timer in progress
	// **********************
    CHECK(ucTimerNbr<TMR_NBR, lblKO);
   1159a:	79fb      	ldrb	r3, [r7, #7]
   1159c:	2b03      	cmp	r3, #3
   1159e:	d80d      	bhi.n	115bc <TimerStop+0x38>
    
    tllTimer[ucTimerNbr] = 0;
   115a0:	79fa      	ldrb	r2, [r7, #7]
   115a2:	f64f 7390 	movw	r3, #65424	; 0xff90
   115a6:	f2c0 0302 	movt	r3, #2
   115aa:	00d2      	lsls	r2, r2, #3
   115ac:	189b      	adds	r3, r3, r2
   115ae:	efc0 0010 	vmov.i32	d16, #0	; 0x00000000
   115b2:	edc3 0b00 	vstr	d16, [r3]
    
    iRet=0;
   115b6:	2300      	movs	r3, #0
   115b8:	60bb      	str	r3, [r7, #8]
    goto lblEnd;
   115ba:	e002      	b.n	115c2 <TimerStop+0x3e>

	// Errors treatment 
    // ****************
lblKO:
    iRet=-1;
   115bc:	f04f 33ff 	mov.w	r3, #4294967295
   115c0:	60bb      	str	r3, [r7, #8]
lblEnd:
    return iRet; 
   115c2:	68bb      	ldr	r3, [r7, #8]
}
   115c4:	4618      	mov	r0, r3
   115c6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   115ca:	f2c0 0302 	movt	r3, #2
   115ce:	68fa      	ldr	r2, [r7, #12]
   115d0:	681b      	ldr	r3, [r3, #0]
   115d2:	429a      	cmp	r2, r3
   115d4:	d001      	beq.n	115da <TimerStop+0x56>
   115d6:	f7f7 fce5 	bl	8fa4 <__stack_chk_fail>
   115da:	f107 0710 	add.w	r7, r7, #16
   115de:	46bd      	mov	sp, r7
   115e0:	bd80      	pop	{r7, pc}
   115e2:	bf00      	nop

000115e4 <Timer>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void Timer(void)
{
   115e4:	b590      	push	{r4, r7, lr}
   115e6:	b08d      	sub	sp, #52	; 0x34
   115e8:	af02      	add	r7, sp, #8
   115ea:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   115ee:	f2c0 0302 	movt	r3, #2
   115f2:	681b      	ldr	r3, [r3, #0]
   115f4:	627b      	str	r3, [r7, #36]	; 0x24
	// Local variables 
    // ***************
	T_GL_HWIDGET xScreen=NULL;
   115f6:	2300      	movs	r3, #0
   115f8:	607b      	str	r3, [r7, #4]
	long lRet0;
    int iRet;
    
    // Timer demo in progress
    // **********************
	xScreen = GoalCreateScreen(gGoalGraphicLibInstance, txCounter, NUMBER_OF_LINES(txCounter), GL_ENCODING_UTF8);
   115fa:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   115fe:	f2c0 0302 	movt	r3, #2
   11602:	681b      	ldr	r3, [r3, #0]
   11604:	4618      	mov	r0, r3
   11606:	f244 6164 	movw	r1, #18020	; 0x4664
   1160a:	f2c0 0102 	movt	r1, #2
   1160e:	2203      	movs	r2, #3
   11610:	2300      	movs	r3, #0
   11612:	f7fb fd5d 	bl	d0d0 <GoalCreateScreen>
   11616:	4603      	mov	r3, r0
   11618:	607b      	str	r3, [r7, #4]
	CHECK(xScreen!=NULL, lblKO);       // Create screen and clear it
   1161a:	687b      	ldr	r3, [r7, #4]
   1161c:	2b00      	cmp	r3, #0
   1161e:	f000 8097 	beq.w	11750 <Timer+0x16c>
	iRet = GoalClrScreen(xScreen, GL_COLOR_BLACK, KEY_CANCEL, false);
   11622:	687b      	ldr	r3, [r7, #4]
   11624:	4618      	mov	r0, r3
   11626:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
   1162a:	2202      	movs	r2, #2
   1162c:	2300      	movs	r3, #0
   1162e:	f7fb feed 	bl	d40c <GoalClrScreen>
   11632:	60b8      	str	r0, [r7, #8]
	CHECK(iRet>=0, lblKO);
   11634:	68bb      	ldr	r3, [r7, #8]
   11636:	2b00      	cmp	r3, #0
   11638:	f2c0 808a 	blt.w	11750 <Timer+0x16c>

    iRet = GoalDspLine(xScreen, 0, "Expiration Time", &txCounter[0], 0, false);
   1163c:	687b      	ldr	r3, [r7, #4]
   1163e:	2200      	movs	r2, #0
   11640:	9200      	str	r2, [sp, #0]
   11642:	2200      	movs	r2, #0
   11644:	9201      	str	r2, [sp, #4]
   11646:	4618      	mov	r0, r3
   11648:	2100      	movs	r1, #0
   1164a:	f644 0268 	movw	r2, #18536	; 0x4868
   1164e:	f2c0 0202 	movt	r2, #2
   11652:	f244 6364 	movw	r3, #18020	; 0x4664
   11656:	f2c0 0302 	movt	r3, #2
   1165a:	f7fb fff1 	bl	d640 <GoalDspLine>
   1165e:	60b8      	str	r0, [r7, #8]
	CHECK(iRet>=0, lblKO);
   11660:	68bb      	ldr	r3, [r7, #8]
   11662:	2b00      	cmp	r3, #0
   11664:	db74      	blt.n	11750 <Timer+0x16c>
    lRet0 = TimerStart(0, 15*1000);    // Timer0 starts to 15s
   11666:	2000      	movs	r0, #0
   11668:	f643 2198 	movw	r1, #15000	; 0x3a98
   1166c:	f7ff fef6 	bl	1145c <TimerStart>
   11670:	60f8      	str	r0, [r7, #12]
    CHECK(lRet0>=0, lblKO);
   11672:	68fb      	ldr	r3, [r7, #12]
   11674:	2b00      	cmp	r3, #0
   11676:	db6b      	blt.n	11750 <Timer+0x16c>
    while ((lRet0=TimerGet(0)) > 0)    // Check Timer0
   11678:	e03b      	b.n	116f2 <Timer+0x10e>
    {
    	CHECK(lRet0>=0, lblKO);
   1167a:	68fb      	ldr	r3, [r7, #12]
   1167c:	2b00      	cmp	r3, #0
   1167e:	db67      	blt.n	11750 <Timer+0x16c>
    	
        // Display Remaining Time
    	// ======================
        sprintf(tcDisplay, "%2ld.%03ld Sec", lRet0/1000, lRet0%1000);
   11680:	68fa      	ldr	r2, [r7, #12]
   11682:	f644 53d3 	movw	r3, #19923	; 0x4dd3
   11686:	f2c1 0362 	movt	r3, #4194	; 0x1062
   1168a:	fb83 1302 	smull	r1, r3, r3, r2
   1168e:	1199      	asrs	r1, r3, #6
   11690:	17d3      	asrs	r3, r2, #31
   11692:	1acc      	subs	r4, r1, r3
   11694:	68fa      	ldr	r2, [r7, #12]
   11696:	f644 53d3 	movw	r3, #19923	; 0x4dd3
   1169a:	f2c1 0362 	movt	r3, #4194	; 0x1062
   1169e:	fb83 1302 	smull	r1, r3, r3, r2
   116a2:	1199      	asrs	r1, r3, #6
   116a4:	17d3      	asrs	r3, r2, #31
   116a6:	1acb      	subs	r3, r1, r3
   116a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   116ac:	fb01 f303 	mul.w	r3, r1, r3
   116b0:	1ad3      	subs	r3, r2, r3
   116b2:	f107 0210 	add.w	r2, r7, #16
   116b6:	4610      	mov	r0, r2
   116b8:	f644 0178 	movw	r1, #18552	; 0x4878
   116bc:	f2c0 0102 	movt	r1, #2
   116c0:	4622      	mov	r2, r4
   116c2:	f7f7 eaf8 	blx	8cb4 <_init+0x154>
    	iRet = GoalDspLine(xScreen, 1, tcDisplay, &txCounter[1], 0, true);
   116c6:	687a      	ldr	r2, [r7, #4]
   116c8:	f107 0310 	add.w	r3, r7, #16
   116cc:	2100      	movs	r1, #0
   116ce:	9100      	str	r1, [sp, #0]
   116d0:	2101      	movs	r1, #1
   116d2:	9101      	str	r1, [sp, #4]
   116d4:	4610      	mov	r0, r2
   116d6:	2101      	movs	r1, #1
   116d8:	461a      	mov	r2, r3
   116da:	4b34      	ldr	r3, [pc, #208]	; (117ac <Timer+0x1c8>)
   116dc:	f7fb ffb0 	bl	d640 <GoalDspLine>
   116e0:	60b8      	str	r0, [r7, #8]
		CHECK(iRet>=0, lblKO);
   116e2:	68bb      	ldr	r3, [r7, #8]
   116e4:	2b00      	cmp	r3, #0
   116e6:	db33      	blt.n	11750 <Timer+0x16c>
		CHECK(iRet!=GL_KEY_CANCEL, lblEnd);    // Exit on cancel key
   116e8:	68ba      	ldr	r2, [r7, #8]
   116ea:	f64f 0351 	movw	r3, #63569	; 0xf851
   116ee:	429a      	cmp	r2, r3
   116f0:	d043      	beq.n	1177a <Timer+0x196>

    iRet = GoalDspLine(xScreen, 0, "Expiration Time", &txCounter[0], 0, false);
	CHECK(iRet>=0, lblKO);
    lRet0 = TimerStart(0, 15*1000);    // Timer0 starts to 15s
    CHECK(lRet0>=0, lblKO);
    while ((lRet0=TimerGet(0)) > 0)    // Check Timer0
   116f2:	2000      	movs	r0, #0
   116f4:	f7ff ff02 	bl	114fc <TimerGet>
   116f8:	60f8      	str	r0, [r7, #12]
   116fa:	68fb      	ldr	r3, [r7, #12]
   116fc:	2b00      	cmp	r3, #0
   116fe:	dcbc      	bgt.n	1167a <Timer+0x96>
    	iRet = GoalDspLine(xScreen, 1, tcDisplay, &txCounter[1], 0, true);
		CHECK(iRet>=0, lblKO);
		CHECK(iRet!=GL_KEY_CANCEL, lblEnd);    // Exit on cancel key
    }

	iRet = GoalDspLine(xScreen, 1, " 0.000 Sec", &txCounter[1], 0, false);
   11700:	687b      	ldr	r3, [r7, #4]
   11702:	2200      	movs	r2, #0
   11704:	9200      	str	r2, [sp, #0]
   11706:	2200      	movs	r2, #0
   11708:	9201      	str	r2, [sp, #4]
   1170a:	4618      	mov	r0, r3
   1170c:	2101      	movs	r1, #1
   1170e:	f644 0288 	movw	r2, #18568	; 0x4888
   11712:	f2c0 0202 	movt	r2, #2
   11716:	4b25      	ldr	r3, [pc, #148]	; (117ac <Timer+0x1c8>)
   11718:	f7fb ff92 	bl	d640 <GoalDspLine>
   1171c:	60b8      	str	r0, [r7, #8]
	CHECK(iRet>=0, lblKO);
   1171e:	68bb      	ldr	r3, [r7, #8]
   11720:	2b00      	cmp	r3, #0
   11722:	db15      	blt.n	11750 <Timer+0x16c>
    buzzer(10);
   11724:	200a      	movs	r0, #10
   11726:	f00e fbb5 	bl	1fe94 <buzzer>
	iRet = GoalDspLine(xScreen, 2, "Timer expired !!!", &txCounter[2], 5*1000, true);
   1172a:	687b      	ldr	r3, [r7, #4]
   1172c:	f241 3288 	movw	r2, #5000	; 0x1388
   11730:	9200      	str	r2, [sp, #0]
   11732:	2201      	movs	r2, #1
   11734:	9201      	str	r2, [sp, #4]
   11736:	4618      	mov	r0, r3
   11738:	2102      	movs	r1, #2
   1173a:	f644 0294 	movw	r2, #18580	; 0x4894
   1173e:	f2c0 0202 	movt	r2, #2
   11742:	4b1b      	ldr	r3, [pc, #108]	; (117b0 <Timer+0x1cc>)
   11744:	f7fb ff7c 	bl	d640 <GoalDspLine>
   11748:	60b8      	str	r0, [r7, #8]
	CHECK(iRet>=0, lblKO);
   1174a:	68bb      	ldr	r3, [r7, #8]
   1174c:	2b00      	cmp	r3, #0
   1174e:	da13      	bge.n	11778 <Timer+0x194>
	goto lblEnd;

	// Errors treatment 
    // ****************
lblKO:                                 // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   11750:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   11754:	f2c0 0302 	movt	r3, #2
   11758:	681b      	ldr	r3, [r3, #0]
   1175a:	2201      	movs	r2, #1
   1175c:	9200      	str	r2, [sp, #0]
   1175e:	f241 3288 	movw	r2, #5000	; 0x1388
   11762:	9201      	str	r2, [sp, #4]
   11764:	4618      	mov	r0, r3
   11766:	2100      	movs	r1, #0
   11768:	f644 02a8 	movw	r2, #18600	; 0x48a8
   1176c:	f2c0 0202 	movt	r2, #2
   11770:	2304      	movs	r3, #4
   11772:	f00f ff89 	bl	21688 <GL_Dialog_Message>
   11776:	e000      	b.n	1177a <Timer+0x196>
	CHECK(iRet>=0, lblKO);
    buzzer(10);
	iRet = GoalDspLine(xScreen, 2, "Timer expired !!!", &txCounter[2], 5*1000, true);
	CHECK(iRet>=0, lblKO);

	goto lblEnd;
   11778:	bf00      	nop
	// Errors treatment 
    // ****************
lblKO:                                 // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
lblEnd:
    TimerStop(0);                      // Stop Timer0
   1177a:	2000      	movs	r0, #0
   1177c:	f7ff ff02 	bl	11584 <TimerStop>

	if (xScreen)
   11780:	687b      	ldr	r3, [r7, #4]
   11782:	2b00      	cmp	r3, #0
   11784:	d003      	beq.n	1178e <Timer+0x1aa>
		GoalDestroyScreen(&xScreen);   // Destroy screen
   11786:	1d3b      	adds	r3, r7, #4
   11788:	4618      	mov	r0, r3
   1178a:	f7fc fbf1 	bl	df70 <GoalDestroyScreen>
}
   1178e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11792:	f2c0 0302 	movt	r3, #2
   11796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11798:	681b      	ldr	r3, [r3, #0]
   1179a:	429a      	cmp	r2, r3
   1179c:	d001      	beq.n	117a2 <Timer+0x1be>
   1179e:	f7f7 fc01 	bl	8fa4 <__stack_chk_fail>
   117a2:	f107 072c 	add.w	r7, r7, #44	; 0x2c
   117a6:	46bd      	mov	sp, r7
   117a8:	bd90      	pop	{r4, r7, pc}
   117aa:	bf00      	nop
   117ac:	00024710 	.word	0x00024710
   117b0:	000247bc 	.word	0x000247bc

000117b4 <isoFmt>:
		LLLBCD,                     // 125
		LLLBCD,                     // 126
		LLLBCD,                     // 127
		8                           // 128 Message Authentication Code (MAC)
};
int isoFmt(byte bit) {
   117b4:	b580      	push	{r7, lr}
   117b6:	b084      	sub	sp, #16
   117b8:	af00      	add	r7, sp, #0
   117ba:	4603      	mov	r3, r0
   117bc:	71fb      	strb	r3, [r7, #7]
   117be:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   117c2:	f2c0 0302 	movt	r3, #2
   117c6:	681b      	ldr	r3, [r3, #0]
   117c8:	60fb      	str	r3, [r7, #12]
	VERIFY(isoBitBeg < bit);
	VERIFY(bit < isoBitEnd);
	return fmt[bit - 1];
   117ca:	79fb      	ldrb	r3, [r7, #7]
   117cc:	1e5a      	subs	r2, r3, #1
   117ce:	f24f 3360 	movw	r3, #62304	; 0xf360
   117d2:	f2c0 0302 	movt	r3, #2
   117d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
   117da:	4618      	mov	r0, r3
   117dc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   117e0:	f2c0 0302 	movt	r3, #2
   117e4:	68fa      	ldr	r2, [r7, #12]
   117e6:	681b      	ldr	r3, [r3, #0]
   117e8:	429a      	cmp	r2, r3
   117ea:	d001      	beq.n	117f0 <isoFmt+0x3c>
   117ec:	f7f7 fbda 	bl	8fa4 <__stack_chk_fail>
   117f0:	f107 0710 	add.w	r7, r7, #16
   117f4:	46bd      	mov	sp, r7
   117f6:	bd80      	pop	{r7, pc}

000117f8 <isoFmt_Gateway>:
int isoFmt_Gateway(byte bit) {
   117f8:	b580      	push	{r7, lr}
   117fa:	b084      	sub	sp, #16
   117fc:	af00      	add	r7, sp, #0
   117fe:	4603      	mov	r3, r0
   11800:	71fb      	strb	r3, [r7, #7]
   11802:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11806:	f2c0 0302 	movt	r3, #2
   1180a:	681b      	ldr	r3, [r3, #0]
   1180c:	60fb      	str	r3, [r7, #12]
	VERIFY(isoBitBeg < bit);
	VERIFY(bit < isoBitEnd);
	return fmt_Gateway[bit - 1];
   1180e:	79fb      	ldrb	r3, [r7, #7]
   11810:	1e5a      	subs	r2, r3, #1
   11812:	f24f 5360 	movw	r3, #62816	; 0xf560
   11816:	f2c0 0302 	movt	r3, #2
   1181a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
   1181e:	4618      	mov	r0, r3
   11820:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11824:	f2c0 0302 	movt	r3, #2
   11828:	68fa      	ldr	r2, [r7, #12]
   1182a:	681b      	ldr	r3, [r3, #0]
   1182c:	429a      	cmp	r2, r3
   1182e:	d001      	beq.n	11834 <isoFmt_Gateway+0x3c>
   11830:	f7f7 fbb8 	bl	8fa4 <__stack_chk_fail>
   11834:	f107 0710 	add.w	r7, r7, #16
   11838:	46bd      	mov	sp, r7
   1183a:	bd80      	pop	{r7, pc}

0001183c <getPanVal>:
static int thereis_F;




static int getPanVal(tBuffer * val) {
   1183c:	b590      	push	{r4, r7, lr}
   1183e:	b0cb      	sub	sp, #300	; 0x12c
   11840:	af00      	add	r7, sp, #0
   11842:	1d3b      	adds	r3, r7, #4
   11844:	6018      	str	r0, [r3, #0]
   11846:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1184a:	f2c0 0302 	movt	r3, #2
   1184e:	681b      	ldr	r3, [r3, #0]
   11850:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	byte buf[256];
	byte bcd[lenPan];


	VERIFY(val);
	ret = mapGet(traPan, buf, 256);
   11854:	f107 040c 	add.w	r4, r7, #12
   11858:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1185c:	201c      	movs	r0, #28
   1185e:	4619      	mov	r1, r3
   11860:	f44f 7280 	mov.w	r2, #256	; 0x100
   11864:	f004 fe60 	bl	16528 <mapGet>
   11868:	6020      	str	r0, [r4, #0]
	CHK;
   1186a:	f107 030c 	add.w	r3, r7, #12
   1186e:	681b      	ldr	r3, [r3, #0]
   11870:	2b00      	cmp	r3, #0
   11872:	db4a      	blt.n	1190a <getPanVal+0xce>
	VERIFY(strlen((char *) buf) <= 256);
   11874:	f107 0324 	add.w	r3, r7, #36	; 0x24
   11878:	4618      	mov	r0, r3
   1187a:	f7f7 ea04 	blx	8c84 <_init+0x124>
	bufReset(val);
   1187e:	1d3b      	adds	r3, r7, #4
   11880:	6818      	ldr	r0, [r3, #0]
   11882:	f001 fbb5 	bl	12ff0 <bufReset>

	ret = strlen((char *) buf);
   11886:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1188a:	4618      	mov	r0, r3
   1188c:	f7f7 e9fa 	blx	8c84 <_init+0x124>
   11890:	4602      	mov	r2, r0
   11892:	f107 030c 	add.w	r3, r7, #12
   11896:	601a      	str	r2, [r3, #0]
	if(ret % 2 != 0)
   11898:	f107 030c 	add.w	r3, r7, #12
   1189c:	681b      	ldr	r3, [r3, #0]
   1189e:	f003 0301 	and.w	r3, r3, #1
   118a2:	2b00      	cmp	r3, #0
   118a4:	d006      	beq.n	118b4 <getPanVal+0x78>
		ret++;
   118a6:	f107 030c 	add.w	r3, r7, #12
   118aa:	f107 020c 	add.w	r2, r7, #12
   118ae:	6812      	ldr	r2, [r2, #0]
   118b0:	3201      	adds	r2, #1
   118b2:	601a      	str	r2, [r3, #0]

	hex2bin(bcd, (char *)buf, ret/2);
   118b4:	f107 030c 	add.w	r3, r7, #12
   118b8:	681b      	ldr	r3, [r3, #0]
   118ba:	2b00      	cmp	r3, #0
   118bc:	da00      	bge.n	118c0 <getPanVal+0x84>
   118be:	3301      	adds	r3, #1
   118c0:	105b      	asrs	r3, r3, #1
   118c2:	f107 0110 	add.w	r1, r7, #16
   118c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
   118ca:	4608      	mov	r0, r1
   118cc:	4611      	mov	r1, r2
   118ce:	461a      	mov	r2, r3
   118d0:	f001 f96e 	bl	12bb0 <hex2bin>

	ret = bufApp(val, bcd, ret/2);
   118d4:	f107 030c 	add.w	r3, r7, #12
   118d8:	681b      	ldr	r3, [r3, #0]
   118da:	2b00      	cmp	r3, #0
   118dc:	da00      	bge.n	118e0 <getPanVal+0xa4>
   118de:	3301      	adds	r3, #1
   118e0:	105b      	asrs	r3, r3, #1
   118e2:	f107 040c 	add.w	r4, r7, #12
   118e6:	1d39      	adds	r1, r7, #4
   118e8:	f107 0210 	add.w	r2, r7, #16
   118ec:	6808      	ldr	r0, [r1, #0]
   118ee:	4611      	mov	r1, r2
   118f0:	461a      	mov	r2, r3
   118f2:	f001 fd5d 	bl	133b0 <bufApp>
   118f6:	6020      	str	r0, [r4, #0]
	CHK;
   118f8:	f107 030c 	add.w	r3, r7, #12
   118fc:	681b      	ldr	r3, [r3, #0]
   118fe:	2b00      	cmp	r3, #0
   11900:	db03      	blt.n	1190a <getPanVal+0xce>

	return ret;
   11902:	f107 030c 	add.w	r3, r7, #12
   11906:	681b      	ldr	r3, [r3, #0]
   11908:	e001      	b.n	1190e <getPanVal+0xd2>
	lblKO:
	return -1;
   1190a:	f04f 33ff 	mov.w	r3, #4294967295
}
   1190e:	4618      	mov	r0, r3
   11910:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11914:	f2c0 0302 	movt	r3, #2
   11918:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
   1191c:	681b      	ldr	r3, [r3, #0]
   1191e:	429a      	cmp	r2, r3
   11920:	d001      	beq.n	11926 <getPanVal+0xea>
   11922:	f7f7 fb3f 	bl	8fa4 <__stack_chk_fail>
   11926:	f507 7796 	add.w	r7, r7, #300	; 0x12c
   1192a:	46bd      	mov	sp, r7
   1192c:	bd90      	pop	{r4, r7, pc}
   1192e:	bf00      	nop

00011930 <getAmt>:


static int getAmt(tBuffer * val) {
   11930:	b580      	push	{r7, lr}
   11932:	b08c      	sub	sp, #48	; 0x30
   11934:	af00      	add	r7, sp, #0
   11936:	6078      	str	r0, [r7, #4]
   11938:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1193c:	f2c0 0302 	movt	r3, #2
   11940:	681b      	ldr	r3, [r3, #0]
   11942:	62fb      	str	r3, [r7, #44]	; 0x2c
	byte bcd[lenAmtBcd];
	word Amtkey;

	VERIFY(val);

	memset(amt, 0, sizeof(amt));
   11944:	f107 031c 	add.w	r3, r7, #28
   11948:	4618      	mov	r0, r3
   1194a:	2100      	movs	r1, #0
   1194c:	220d      	movs	r2, #13
   1194e:	f7f7 e936 	blx	8bbc <_init+0x5c>
	//          Amtkey = logTraAmt;
	//          TipAmtkey = logTipAmt;
	//          break;
	//      case 'T':
	default:
		Amtkey = traAmt;
   11952:	231b      	movs	r3, #27
   11954:	81fb      	strh	r3, [r7, #14]
		break;
   11956:	bf00      	nop
	}

	MAPGET(Amtkey, amt, lblKO);
   11958:	89fa      	ldrh	r2, [r7, #14]
   1195a:	f107 031c 	add.w	r3, r7, #28
   1195e:	4610      	mov	r0, r2
   11960:	4619      	mov	r1, r3
   11962:	220d      	movs	r2, #13
   11964:	f004 fde0 	bl	16528 <mapGet>
   11968:	6138      	str	r0, [r7, #16]
   1196a:	693b      	ldr	r3, [r7, #16]
   1196c:	2b00      	cmp	r3, #0
   1196e:	db1d      	blt.n	119ac <getAmt+0x7c>

	fmtPad(amt, -lenAmt, '0');
   11970:	f107 031c 	add.w	r3, r7, #28
   11974:	4618      	mov	r0, r3
   11976:	f06f 010b 	mvn.w	r1, #11
   1197a:	2230      	movs	r2, #48	; 0x30
   1197c:	f002 faa4 	bl	13ec8 <fmtPad>
	hex2bin(bcd, amt, 0);
   11980:	f107 0214 	add.w	r2, r7, #20
   11984:	f107 031c 	add.w	r3, r7, #28
   11988:	4610      	mov	r0, r2
   1198a:	4619      	mov	r1, r3
   1198c:	2200      	movs	r2, #0
   1198e:	f001 f90f 	bl	12bb0 <hex2bin>

	ret = bufApp(val, bcd, lenAmtBcd);
   11992:	f107 0314 	add.w	r3, r7, #20
   11996:	6878      	ldr	r0, [r7, #4]
   11998:	4619      	mov	r1, r3
   1199a:	2206      	movs	r2, #6
   1199c:	f001 fd08 	bl	133b0 <bufApp>
   119a0:	6138      	str	r0, [r7, #16]
	CHK;
   119a2:	693b      	ldr	r3, [r7, #16]
   119a4:	2b00      	cmp	r3, #0
   119a6:	db01      	blt.n	119ac <getAmt+0x7c>

	return ret;
   119a8:	693b      	ldr	r3, [r7, #16]
   119aa:	e001      	b.n	119b0 <getAmt+0x80>
	lblKO:
	return -1;
   119ac:	f04f 33ff 	mov.w	r3, #4294967295
}
   119b0:	4618      	mov	r0, r3
   119b2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   119b6:	f2c0 0302 	movt	r3, #2
   119ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   119bc:	681b      	ldr	r3, [r3, #0]
   119be:	429a      	cmp	r2, r3
   119c0:	d001      	beq.n	119c6 <getAmt+0x96>
   119c2:	f7f7 faef 	bl	8fa4 <__stack_chk_fail>
   119c6:	f107 0730 	add.w	r7, r7, #48	; 0x30
   119ca:	46bd      	mov	sp, r7
   119cc:	bd80      	pop	{r7, pc}
   119ce:	bf00      	nop

000119d0 <getPIN>:


static int getPIN(tBuffer * val) {
   119d0:	b580      	push	{r7, lr}
   119d2:	b088      	sub	sp, #32
   119d4:	af00      	add	r7, sp, #0
   119d6:	6078      	str	r0, [r7, #4]
   119d8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   119dc:	f2c0 0302 	movt	r3, #2
   119e0:	681b      	ldr	r3, [r3, #0]
   119e2:	61fb      	str	r3, [r7, #28]
	byte PIN[1 + lenPinBlk];
	//	char tmp[2 * lenPIN + 1];

	VERIFY(val);

	ret = mapGet(traPinBlk, PIN, sizeof(PIN));
   119e4:	f107 0310 	add.w	r3, r7, #16
   119e8:	201e      	movs	r0, #30
   119ea:	4619      	mov	r1, r3
   119ec:	2209      	movs	r2, #9
   119ee:	f004 fd9b 	bl	16528 <mapGet>
   119f2:	60f8      	str	r0, [r7, #12]
	CHK;
   119f4:	68fb      	ldr	r3, [r7, #12]
   119f6:	2b00      	cmp	r3, #0
   119f8:	db0c      	blt.n	11a14 <getPIN+0x44>

	//	CHECK(*PIN == lenPinBlk, lblKO);
	//	bin2hex(tmp, (byte *) PIN + 1, lenPinBlk);
	//	ret = bufApp(val, (byte *) tmp, lenPinBlk);
	//	CHK;
	ret = bufApp(val, PIN, lenPinBlk);
   119fa:	f107 0310 	add.w	r3, r7, #16
   119fe:	6878      	ldr	r0, [r7, #4]
   11a00:	4619      	mov	r1, r3
   11a02:	2208      	movs	r2, #8
   11a04:	f001 fcd4 	bl	133b0 <bufApp>
   11a08:	60f8      	str	r0, [r7, #12]
	CHK;
   11a0a:	68fb      	ldr	r3, [r7, #12]
   11a0c:	2b00      	cmp	r3, #0
   11a0e:	db01      	blt.n	11a14 <getPIN+0x44>

	return ret;
   11a10:	68fb      	ldr	r3, [r7, #12]
   11a12:	e001      	b.n	11a18 <getPIN+0x48>
	lblKO:
	return -1;
   11a14:	f04f 33ff 	mov.w	r3, #4294967295
}
   11a18:	4618      	mov	r0, r3
   11a1a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11a1e:	f2c0 0302 	movt	r3, #2
   11a22:	69fa      	ldr	r2, [r7, #28]
   11a24:	681b      	ldr	r3, [r3, #0]
   11a26:	429a      	cmp	r2, r3
   11a28:	d001      	beq.n	11a2e <getPIN+0x5e>
   11a2a:	f7f7 fabb 	bl	8fa4 <__stack_chk_fail>
   11a2e:	f107 0720 	add.w	r7, r7, #32
   11a32:	46bd      	mov	sp, r7
   11a34:	bd80      	pop	{r7, pc}
   11a36:	bf00      	nop

00011a38 <getPrcCod>:


static int getPrcCod(tBuffer * val) {
   11a38:	b580      	push	{r7, lr}
   11a3a:	b088      	sub	sp, #32
   11a3c:	af00      	add	r7, sp, #0
   11a3e:	6078      	str	r0, [r7, #4]
   11a40:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11a44:	f2c0 0302 	movt	r3, #2
   11a48:	681b      	ldr	r3, [r3, #0]
   11a4a:	61fb      	str	r3, [r7, #28]
	byte PrcCod[1 + lenPrcCod];
	char PrcCodStr[1 + (lenPrcCod*2)];

	VERIFY(val);

	memset(PrcCodStr, 0, sizeof(PrcCodStr));
   11a4c:	f107 0314 	add.w	r3, r7, #20
   11a50:	4618      	mov	r0, r3
   11a52:	2100      	movs	r1, #0
   11a54:	2207      	movs	r2, #7
   11a56:	f7f7 e8b2 	blx	8bbc <_init+0x5c>
	memset(PrcCod,0,sizeof(PrcCod));
   11a5a:	f107 0310 	add.w	r3, r7, #16
   11a5e:	4618      	mov	r0, r3
   11a60:	2100      	movs	r1, #0
   11a62:	2204      	movs	r2, #4
   11a64:	f7f7 e8aa 	blx	8bbc <_init+0x5c>

	strcpy(PrcCodStr, "000000");
   11a68:	f644 02bc 	movw	r2, #18620	; 0x48bc
   11a6c:	f2c0 0202 	movt	r2, #2
   11a70:	f107 0314 	add.w	r3, r7, #20
   11a74:	e892 0003 	ldmia.w	r2, {r0, r1}
   11a78:	6018      	str	r0, [r3, #0]
   11a7a:	3304      	adds	r3, #4
   11a7c:	8019      	strh	r1, [r3, #0]
   11a7e:	3302      	adds	r3, #2
   11a80:	0c0a      	lsrs	r2, r1, #16
   11a82:	701a      	strb	r2, [r3, #0]

	hex2bin(PrcCod, PrcCodStr, 0);
   11a84:	f107 0210 	add.w	r2, r7, #16
   11a88:	f107 0314 	add.w	r3, r7, #20
   11a8c:	4610      	mov	r0, r2
   11a8e:	4619      	mov	r1, r3
   11a90:	2200      	movs	r2, #0
   11a92:	f001 f88d 	bl	12bb0 <hex2bin>

	ret = bufApp(val, PrcCod, lenPrcCod);
   11a96:	f107 0310 	add.w	r3, r7, #16
   11a9a:	6878      	ldr	r0, [r7, #4]
   11a9c:	4619      	mov	r1, r3
   11a9e:	2203      	movs	r2, #3
   11aa0:	f001 fc86 	bl	133b0 <bufApp>
   11aa4:	60f8      	str	r0, [r7, #12]
	CHK;
   11aa6:	68fb      	ldr	r3, [r7, #12]
   11aa8:	2b00      	cmp	r3, #0
   11aaa:	db01      	blt.n	11ab0 <getPrcCod+0x78>

	return ret;
   11aac:	68fb      	ldr	r3, [r7, #12]
   11aae:	e001      	b.n	11ab4 <getPrcCod+0x7c>
	lblKO:
	return -1;
   11ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
   11ab4:	4618      	mov	r0, r3
   11ab6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11aba:	f2c0 0302 	movt	r3, #2
   11abe:	69fa      	ldr	r2, [r7, #28]
   11ac0:	681b      	ldr	r3, [r3, #0]
   11ac2:	429a      	cmp	r2, r3
   11ac4:	d001      	beq.n	11aca <getPrcCod+0x92>
   11ac6:	f7f7 fa6d 	bl	8fa4 <__stack_chk_fail>
   11aca:	f107 0720 	add.w	r7, r7, #32
   11ace:	46bd      	mov	sp, r7
   11ad0:	bd80      	pop	{r7, pc}
   11ad2:	bf00      	nop

00011ad4 <getTrack2>:


static int getTrack2(tBuffer * val) {
   11ad4:	b580      	push	{r7, lr}
   11ad6:	b098      	sub	sp, #96	; 0x60
   11ad8:	af00      	add	r7, sp, #0
   11ada:	6078      	str	r0, [r7, #4]
   11adc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11ae0:	f2c0 0302 	movt	r3, #2
   11ae4:	681b      	ldr	r3, [r3, #0]
   11ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
	int ret, ctr, len;
	char track2[lenTrk2 + 1];
	byte bcdTrack2[(lenTrk2 + 1) / 2];
	word key;
	int x = 0;
   11ae8:	2300      	movs	r3, #0
   11aea:	617b      	str	r3, [r7, #20]

	memset(track2, 0, sizeof(track2));
   11aec:	f107 0330 	add.w	r3, r7, #48	; 0x30
   11af0:	4618      	mov	r0, r3
   11af2:	2100      	movs	r1, #0
   11af4:	2229      	movs	r2, #41	; 0x29
   11af6:	f7f7 e862 	blx	8bbc <_init+0x5c>
	memset(bcdTrack2, 0, sizeof(bcdTrack2));
   11afa:	f107 031c 	add.w	r3, r7, #28
   11afe:	4618      	mov	r0, r3
   11b00:	2100      	movs	r1, #0
   11b02:	2214      	movs	r2, #20
   11b04:	f7f7 e85a 	blx	8bbc <_init+0x5c>

	thereis_F = 0;
   11b08:	f64f 73b4 	movw	r3, #65460	; 0xffb4
   11b0c:	f2c0 0302 	movt	r3, #2
   11b10:	2200      	movs	r2, #0
   11b12:	601a      	str	r2, [r3, #0]
	//          break;
	//      case 'L':
	//          key = logTrk2;
	//          break;
	default:
		key = traTrk2;
   11b14:	231d      	movs	r3, #29
   11b16:	817b      	strh	r3, [r7, #10]
		break;
   11b18:	bf00      	nop
	}

	ret = mapGet(key, track2, sizeof(track2));
   11b1a:	897a      	ldrh	r2, [r7, #10]
   11b1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
   11b20:	4610      	mov	r0, r2
   11b22:	4619      	mov	r1, r3
   11b24:	2229      	movs	r2, #41	; 0x29
   11b26:	f004 fcff 	bl	16528 <mapGet>
   11b2a:	61b8      	str	r0, [r7, #24]
	CHK;
   11b2c:	69bb      	ldr	r3, [r7, #24]
   11b2e:	2b00      	cmp	r3, #0
   11b30:	f2c0 80c0 	blt.w	11cb4 <getTrack2+0x1e0>

	len = strlen(track2);
   11b34:	f107 0330 	add.w	r3, r7, #48	; 0x30
   11b38:	4618      	mov	r0, r3
   11b3a:	f7f7 e8a4 	blx	8c84 <_init+0x124>
   11b3e:	4603      	mov	r3, r0
   11b40:	613b      	str	r3, [r7, #16]
	for (ctr = 0; ctr < len; ctr++) {
   11b42:	2300      	movs	r3, #0
   11b44:	60fb      	str	r3, [r7, #12]
   11b46:	e070      	b.n	11c2a <getTrack2+0x156>
		if(track2[ctr] == '=') {
   11b48:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11b4c:	68fb      	ldr	r3, [r7, #12]
   11b4e:	18d3      	adds	r3, r2, r3
   11b50:	781b      	ldrb	r3, [r3, #0]
   11b52:	2b3d      	cmp	r3, #61	; 0x3d
   11b54:	d105      	bne.n	11b62 <getTrack2+0x8e>
			track2[ctr] = 'D';
   11b56:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11b5a:	68fb      	ldr	r3, [r7, #12]
   11b5c:	18d3      	adds	r3, r2, r3
   11b5e:	2244      	movs	r2, #68	; 0x44
   11b60:	701a      	strb	r2, [r3, #0]
		}
		if(track2[ctr] == 'F') {
   11b62:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11b66:	68fb      	ldr	r3, [r7, #12]
   11b68:	18d3      	adds	r3, r2, r3
   11b6a:	781b      	ldrb	r3, [r3, #0]
   11b6c:	2b46      	cmp	r3, #70	; 0x46
   11b6e:	d11e      	bne.n	11bae <getTrack2+0xda>
			thereis_F = 1;
   11b70:	f64f 73b4 	movw	r3, #65460	; 0xffb4
   11b74:	f2c0 0302 	movt	r3, #2
   11b78:	2201      	movs	r2, #1
   11b7a:	601a      	str	r2, [r3, #0]
			for (x = 1; x < (len-ctr); x++) {
   11b7c:	2301      	movs	r3, #1
   11b7e:	617b      	str	r3, [r7, #20]
   11b80:	e00b      	b.n	11b9a <getTrack2+0xc6>
				track2[ctr+x] = 0x0;
   11b82:	68fa      	ldr	r2, [r7, #12]
   11b84:	697b      	ldr	r3, [r7, #20]
   11b86:	18d3      	adds	r3, r2, r3
   11b88:	f107 0260 	add.w	r2, r7, #96	; 0x60
   11b8c:	18d3      	adds	r3, r2, r3
   11b8e:	2200      	movs	r2, #0
   11b90:	f803 2c30 	strb.w	r2, [r3, #-48]
		if(track2[ctr] == '=') {
			track2[ctr] = 'D';
		}
		if(track2[ctr] == 'F') {
			thereis_F = 1;
			for (x = 1; x < (len-ctr); x++) {
   11b94:	697b      	ldr	r3, [r7, #20]
   11b96:	3301      	adds	r3, #1
   11b98:	617b      	str	r3, [r7, #20]
   11b9a:	693a      	ldr	r2, [r7, #16]
   11b9c:	68fb      	ldr	r3, [r7, #12]
   11b9e:	1ad2      	subs	r2, r2, r3
   11ba0:	697b      	ldr	r3, [r7, #20]
   11ba2:	429a      	cmp	r2, r3
   11ba4:	dced      	bgt.n	11b82 <getTrack2+0xae>
				track2[ctr+x] = 0x0;
			}
			len = ctr + 1;
   11ba6:	68fb      	ldr	r3, [r7, #12]
   11ba8:	3301      	adds	r3, #1
   11baa:	613b      	str	r3, [r7, #16]
			break;
   11bac:	e041      	b.n	11c32 <getTrack2+0x15e>
		} else if ((track2[ctr] >= 'A' && track2[ctr] <= 'Z') || (track2[ctr] >= 'a' && track2[ctr] <= 'z')){
   11bae:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11bb2:	68fb      	ldr	r3, [r7, #12]
   11bb4:	18d3      	adds	r3, r2, r3
   11bb6:	781b      	ldrb	r3, [r3, #0]
   11bb8:	2b40      	cmp	r3, #64	; 0x40
   11bba:	d906      	bls.n	11bca <getTrack2+0xf6>
   11bbc:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11bc0:	68fb      	ldr	r3, [r7, #12]
   11bc2:	18d3      	adds	r3, r2, r3
   11bc4:	781b      	ldrb	r3, [r3, #0]
   11bc6:	2b5a      	cmp	r3, #90	; 0x5a
   11bc8:	d90d      	bls.n	11be6 <getTrack2+0x112>
   11bca:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11bce:	68fb      	ldr	r3, [r7, #12]
   11bd0:	18d3      	adds	r3, r2, r3
   11bd2:	781b      	ldrb	r3, [r3, #0]
   11bd4:	2b60      	cmp	r3, #96	; 0x60
   11bd6:	d925      	bls.n	11c24 <getTrack2+0x150>
   11bd8:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11bdc:	68fb      	ldr	r3, [r7, #12]
   11bde:	18d3      	adds	r3, r2, r3
   11be0:	781b      	ldrb	r3, [r3, #0]
   11be2:	2b7a      	cmp	r3, #122	; 0x7a
   11be4:	d81e      	bhi.n	11c24 <getTrack2+0x150>
			if(track2[ctr] != 'D') {
   11be6:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11bea:	68fb      	ldr	r3, [r7, #12]
   11bec:	18d3      	adds	r3, r2, r3
   11bee:	781b      	ldrb	r3, [r3, #0]
   11bf0:	2b44      	cmp	r3, #68	; 0x44
   11bf2:	d017      	beq.n	11c24 <getTrack2+0x150>
				for (x = 0; x < (len-ctr); x++) {
   11bf4:	2300      	movs	r3, #0
   11bf6:	617b      	str	r3, [r7, #20]
   11bf8:	e00b      	b.n	11c12 <getTrack2+0x13e>
					track2[ctr+x] = 0x0;
   11bfa:	68fa      	ldr	r2, [r7, #12]
   11bfc:	697b      	ldr	r3, [r7, #20]
   11bfe:	18d3      	adds	r3, r2, r3
   11c00:	f107 0260 	add.w	r2, r7, #96	; 0x60
   11c04:	18d3      	adds	r3, r2, r3
   11c06:	2200      	movs	r2, #0
   11c08:	f803 2c30 	strb.w	r2, [r3, #-48]
			}
			len = ctr + 1;
			break;
		} else if ((track2[ctr] >= 'A' && track2[ctr] <= 'Z') || (track2[ctr] >= 'a' && track2[ctr] <= 'z')){
			if(track2[ctr] != 'D') {
				for (x = 0; x < (len-ctr); x++) {
   11c0c:	697b      	ldr	r3, [r7, #20]
   11c0e:	3301      	adds	r3, #1
   11c10:	617b      	str	r3, [r7, #20]
   11c12:	693a      	ldr	r2, [r7, #16]
   11c14:	68fb      	ldr	r3, [r7, #12]
   11c16:	1ad2      	subs	r2, r2, r3
   11c18:	697b      	ldr	r3, [r7, #20]
   11c1a:	429a      	cmp	r2, r3
   11c1c:	dced      	bgt.n	11bfa <getTrack2+0x126>
					track2[ctr+x] = 0x0;
				}
				len = ctr;
   11c1e:	68fb      	ldr	r3, [r7, #12]
   11c20:	613b      	str	r3, [r7, #16]
				break;
   11c22:	e006      	b.n	11c32 <getTrack2+0x15e>

	ret = mapGet(key, track2, sizeof(track2));
	CHK;

	len = strlen(track2);
	for (ctr = 0; ctr < len; ctr++) {
   11c24:	68fb      	ldr	r3, [r7, #12]
   11c26:	3301      	adds	r3, #1
   11c28:	60fb      	str	r3, [r7, #12]
   11c2a:	68fa      	ldr	r2, [r7, #12]
   11c2c:	693b      	ldr	r3, [r7, #16]
   11c2e:	429a      	cmp	r2, r3
   11c30:	db8a      	blt.n	11b48 <getTrack2+0x74>
				break;
			}
		}
	}

	if((len % 2 != 0) && (!thereis_F)){
   11c32:	693b      	ldr	r3, [r7, #16]
   11c34:	f003 0301 	and.w	r3, r3, #1
   11c38:	2b00      	cmp	r3, #0
   11c3a:	d01d      	beq.n	11c78 <getTrack2+0x1a4>
   11c3c:	f64f 73b4 	movw	r3, #65460	; 0xffb4
   11c40:	f2c0 0302 	movt	r3, #2
   11c44:	681b      	ldr	r3, [r3, #0]
   11c46:	2b00      	cmp	r3, #0
   11c48:	d116      	bne.n	11c78 <getTrack2+0x1a4>
		thereis_F = 1;
   11c4a:	f64f 73b4 	movw	r3, #65460	; 0xffb4
   11c4e:	f2c0 0302 	movt	r3, #2
   11c52:	2201      	movs	r2, #1
   11c54:	601a      	str	r2, [r3, #0]
		track2[len] = 'F'; //to remove error on MTIP transactions that dont need a zero at the end
   11c56:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11c5a:	693b      	ldr	r3, [r7, #16]
   11c5c:	18d3      	adds	r3, r2, r3
   11c5e:	2246      	movs	r2, #70	; 0x46
   11c60:	701a      	strb	r2, [r3, #0]
		track2[len+1] = 0x0;
   11c62:	693b      	ldr	r3, [r7, #16]
   11c64:	3301      	adds	r3, #1
   11c66:	f107 0260 	add.w	r2, r7, #96	; 0x60
   11c6a:	18d3      	adds	r3, r2, r3
   11c6c:	2200      	movs	r2, #0
   11c6e:	f803 2c30 	strb.w	r2, [r3, #-48]
		len = len + 1;
   11c72:	693b      	ldr	r3, [r7, #16]
   11c74:	3301      	adds	r3, #1
   11c76:	613b      	str	r3, [r7, #16]


	//	ret = bufAppStr(val, track2);
	//	CHK;

	hex2bin(bcdTrack2,track2,0);
   11c78:	f107 021c 	add.w	r2, r7, #28
   11c7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
   11c80:	4610      	mov	r0, r2
   11c82:	4619      	mov	r1, r3
   11c84:	2200      	movs	r2, #0
   11c86:	f000 ff93 	bl	12bb0 <hex2bin>
	len = len / 2;
   11c8a:	693b      	ldr	r3, [r7, #16]
   11c8c:	2b00      	cmp	r3, #0
   11c8e:	da00      	bge.n	11c92 <getTrack2+0x1be>
   11c90:	3301      	adds	r3, #1
   11c92:	105b      	asrs	r3, r3, #1
   11c94:	613b      	str	r3, [r7, #16]
	ret = bufApp(val, (byte *) bcdTrack2, len);
   11c96:	f107 031c 	add.w	r3, r7, #28
   11c9a:	6878      	ldr	r0, [r7, #4]
   11c9c:	4619      	mov	r1, r3
   11c9e:	693a      	ldr	r2, [r7, #16]
   11ca0:	f001 fb86 	bl	133b0 <bufApp>
   11ca4:	61b8      	str	r0, [r7, #24]
	CHK;
   11ca6:	69bb      	ldr	r3, [r7, #24]
   11ca8:	2b00      	cmp	r3, #0
   11caa:	db03      	blt.n	11cb4 <getTrack2+0x1e0>

	ret = len;
   11cac:	693b      	ldr	r3, [r7, #16]
   11cae:	61bb      	str	r3, [r7, #24]

	return ret;
   11cb0:	69bb      	ldr	r3, [r7, #24]
   11cb2:	e001      	b.n	11cb8 <getTrack2+0x1e4>
	lblKO:
	return -1;
   11cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
   11cb8:	4618      	mov	r0, r3
   11cba:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11cbe:	f2c0 0302 	movt	r3, #2
   11cc2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   11cc4:	681b      	ldr	r3, [r3, #0]
   11cc6:	429a      	cmp	r2, r3
   11cc8:	d001      	beq.n	11cce <getTrack2+0x1fa>
   11cca:	f7f7 f96b 	bl	8fa4 <__stack_chk_fail>
   11cce:	f107 0760 	add.w	r7, r7, #96	; 0x60
   11cd2:	46bd      	mov	sp, r7
   11cd4:	bd80      	pop	{r7, pc}
   11cd6:	bf00      	nop

00011cd8 <getFld>:



static int getFld(tBuffer * val, byte bit) {
   11cd8:	b580      	push	{r7, lr}
   11cda:	b084      	sub	sp, #16
   11cdc:	af00      	add	r7, sp, #0
   11cde:	6078      	str	r0, [r7, #4]
   11ce0:	460b      	mov	r3, r1
   11ce2:	70fb      	strb	r3, [r7, #3]
   11ce4:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11ce8:	f2c0 0302 	movt	r3, #2
   11cec:	681b      	ldr	r3, [r3, #0]
   11cee:	60fb      	str	r3, [r7, #12]

	VERIFY(val);
	bufReset(val);
   11cf0:	6878      	ldr	r0, [r7, #4]
   11cf2:	f001 f97d 	bl	12ff0 <bufReset>
	switch (bit) {
   11cf6:	78fb      	ldrb	r3, [r7, #3]
   11cf8:	3b02      	subs	r3, #2
   11cfa:	2b32      	cmp	r3, #50	; 0x32
   11cfc:	f200 8083 	bhi.w	11e06 <getFld+0x12e>
   11d00:	a201      	add	r2, pc, #4	; (adr r2, 11d08 <getFld+0x30>)
   11d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11d06:	bf00      	nop
   11d08:	00011dd5 	.word	0x00011dd5
   11d0c:	00011ddf 	.word	0x00011ddf
   11d10:	00011de9 	.word	0x00011de9
   11d14:	00011e07 	.word	0x00011e07
   11d18:	00011e07 	.word	0x00011e07
   11d1c:	00011e07 	.word	0x00011e07
   11d20:	00011e07 	.word	0x00011e07
   11d24:	00011e07 	.word	0x00011e07
   11d28:	00011e07 	.word	0x00011e07
   11d2c:	00011e07 	.word	0x00011e07
   11d30:	00011e07 	.word	0x00011e07
   11d34:	00011e07 	.word	0x00011e07
   11d38:	00011e07 	.word	0x00011e07
   11d3c:	00011e07 	.word	0x00011e07
   11d40:	00011e07 	.word	0x00011e07
   11d44:	00011e07 	.word	0x00011e07
   11d48:	00011e07 	.word	0x00011e07
   11d4c:	00011e07 	.word	0x00011e07
   11d50:	00011e07 	.word	0x00011e07
   11d54:	00011e07 	.word	0x00011e07
   11d58:	00011e07 	.word	0x00011e07
   11d5c:	00011e07 	.word	0x00011e07
   11d60:	00011e07 	.word	0x00011e07
   11d64:	00011e07 	.word	0x00011e07
   11d68:	00011e07 	.word	0x00011e07
   11d6c:	00011e07 	.word	0x00011e07
   11d70:	00011e07 	.word	0x00011e07
   11d74:	00011e07 	.word	0x00011e07
   11d78:	00011e07 	.word	0x00011e07
   11d7c:	00011e07 	.word	0x00011e07
   11d80:	00011e07 	.word	0x00011e07
   11d84:	00011e07 	.word	0x00011e07
   11d88:	00011e07 	.word	0x00011e07
   11d8c:	00011df3 	.word	0x00011df3
   11d90:	00011e07 	.word	0x00011e07
   11d94:	00011e07 	.word	0x00011e07
   11d98:	00011e07 	.word	0x00011e07
   11d9c:	00011e07 	.word	0x00011e07
   11da0:	00011e07 	.word	0x00011e07
   11da4:	00011e07 	.word	0x00011e07
   11da8:	00011e07 	.word	0x00011e07
   11dac:	00011e07 	.word	0x00011e07
   11db0:	00011e07 	.word	0x00011e07
   11db4:	00011e07 	.word	0x00011e07
   11db8:	00011e07 	.word	0x00011e07
   11dbc:	00011e07 	.word	0x00011e07
   11dc0:	00011e07 	.word	0x00011e07
   11dc4:	00011e07 	.word	0x00011e07
   11dc8:	00011e07 	.word	0x00011e07
   11dcc:	00011e07 	.word	0x00011e07
   11dd0:	00011dfd 	.word	0x00011dfd
	case isoPan:
		return getPanVal(val);
   11dd4:	6878      	ldr	r0, [r7, #4]
   11dd6:	f7ff fd31 	bl	1183c <getPanVal>
   11dda:	4603      	mov	r3, r0
   11ddc:	e016      	b.n	11e0c <getFld+0x134>
	case isoPrcCod:
		return getPrcCod(val);
   11dde:	6878      	ldr	r0, [r7, #4]
   11de0:	f7ff fe2a 	bl	11a38 <getPrcCod>
   11de4:	4603      	mov	r3, r0
   11de6:	e011      	b.n	11e0c <getFld+0x134>
	case isoAmt:
		return getAmt(val);
   11de8:	6878      	ldr	r0, [r7, #4]
   11dea:	f7ff fda1 	bl	11930 <getAmt>
   11dee:	4603      	mov	r3, r0
   11df0:	e00c      	b.n	11e0c <getFld+0x134>
	case isoTrk2:
		return getTrack2(val);
   11df2:	6878      	ldr	r0, [r7, #4]
   11df4:	f7ff fe6e 	bl	11ad4 <getTrack2>
   11df8:	4603      	mov	r3, r0
   11dfa:	e007      	b.n	11e0c <getFld+0x134>
	case isoPinDat:          //052  PIN
		return getPIN(val);
   11dfc:	6878      	ldr	r0, [r7, #4]
   11dfe:	f7ff fde7 	bl	119d0 <getPIN>
   11e02:	4603      	mov	r3, r0
   11e04:	e002      	b.n	11e0c <getFld+0x134>
	default:
		break;
   11e06:	bf00      	nop
	}
	return -1;
   11e08:	f04f 33ff 	mov.w	r3, #4294967295
}
   11e0c:	4618      	mov	r0, r3
   11e0e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11e12:	f2c0 0302 	movt	r3, #2
   11e16:	68fa      	ldr	r2, [r7, #12]
   11e18:	681b      	ldr	r3, [r3, #0]
   11e1a:	429a      	cmp	r2, r3
   11e1c:	d001      	beq.n	11e22 <getFld+0x14a>
   11e1e:	f7f7 f8c1 	bl	8fa4 <__stack_chk_fail>
   11e22:	f107 0710 	add.w	r7, r7, #16
   11e26:	46bd      	mov	sp, r7
   11e28:	bd80      	pop	{r7, pc}
   11e2a:	bf00      	nop

00011e2c <getLen_>:


word getLen_(byte bit,int fmt){
   11e2c:	b580      	push	{r7, lr}
   11e2e:	b084      	sub	sp, #16
   11e30:	af00      	add	r7, sp, #0
   11e32:	4603      	mov	r3, r0
   11e34:	6039      	str	r1, [r7, #0]
   11e36:	71fb      	strb	r3, [r7, #7]
   11e38:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11e3c:	f2c0 0302 	movt	r3, #2
   11e40:	681b      	ldr	r3, [r3, #0]
   11e42:	60fb      	str	r3, [r7, #12]
	word returnData=0;
   11e44:	2300      	movs	r3, #0
   11e46:	817b      	strh	r3, [r7, #10]

	switch (bit) {
   11e48:	79fb      	ldrb	r3, [r7, #7]
   11e4a:	3b1c      	subs	r3, #28
   11e4c:	2b19      	cmp	r3, #25
   11e4e:	d80b      	bhi.n	11e68 <getLen_+0x3c>
   11e50:	2201      	movs	r2, #1
   11e52:	409a      	lsls	r2, r3
   11e54:	f64e 6301 	movw	r3, #60929	; 0xee01
   11e58:	f2c0 3320 	movt	r3, #800	; 0x320
   11e5c:	4013      	ands	r3, r2
   11e5e:	2b00      	cmp	r3, #0
   11e60:	d002      	beq.n	11e68 <getLen_+0x3c>
	case 37: case 38: case 39: case 41:
	case 42: case 43: case 49: case 52: case 53:
	case 28:
		returnData=fmt;
   11e62:	683b      	ldr	r3, [r7, #0]
   11e64:	817b      	strh	r3, [r7, #10]
		break;
   11e66:	e00e      	b.n	11e86 <getLen_+0x5a>
	default:
		if(fmt % 2 != 0)
   11e68:	683b      	ldr	r3, [r7, #0]
   11e6a:	f003 0301 	and.w	r3, r3, #1
   11e6e:	2b00      	cmp	r3, #0
   11e70:	d002      	beq.n	11e78 <getLen_+0x4c>
			fmt++;
   11e72:	683b      	ldr	r3, [r7, #0]
   11e74:	3301      	adds	r3, #1
   11e76:	603b      	str	r3, [r7, #0]
		returnData= fmt / 2;
   11e78:	683b      	ldr	r3, [r7, #0]
   11e7a:	2b00      	cmp	r3, #0
   11e7c:	da00      	bge.n	11e80 <getLen_+0x54>
   11e7e:	3301      	adds	r3, #1
   11e80:	105b      	asrs	r3, r3, #1
   11e82:	817b      	strh	r3, [r7, #10]
		break;
   11e84:	bf00      	nop
	}

	return returnData;
   11e86:	897b      	ldrh	r3, [r7, #10]
}
   11e88:	4618      	mov	r0, r3
   11e8a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11e8e:	f2c0 0302 	movt	r3, #2
   11e92:	68fa      	ldr	r2, [r7, #12]
   11e94:	681b      	ldr	r3, [r3, #0]
   11e96:	429a      	cmp	r2, r3
   11e98:	d001      	beq.n	11e9e <getLen_+0x72>
   11e9a:	f7f7 f883 	bl	8fa4 <__stack_chk_fail>
   11e9e:	f107 0710 	add.w	r7, r7, #16
   11ea2:	46bd      	mov	sp, r7
   11ea4:	bd80      	pop	{r7, pc}
   11ea6:	bf00      	nop

00011ea8 <getLen_fmt>:


int getLen_fmt(byte bit,int len){
   11ea8:	b580      	push	{r7, lr}
   11eaa:	b084      	sub	sp, #16
   11eac:	af00      	add	r7, sp, #0
   11eae:	4603      	mov	r3, r0
   11eb0:	6039      	str	r1, [r7, #0]
   11eb2:	71fb      	strb	r3, [r7, #7]
   11eb4:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11eb8:	f2c0 0302 	movt	r3, #2
   11ebc:	681b      	ldr	r3, [r3, #0]
   11ebe:	60fb      	str	r3, [r7, #12]

	if(bit==35){
   11ec0:	79fb      	ldrb	r3, [r7, #7]
   11ec2:	2b23      	cmp	r3, #35	; 0x23
   11ec4:	d118      	bne.n	11ef8 <getLen_fmt+0x50>
		len=len*2;
   11ec6:	683b      	ldr	r3, [r7, #0]
   11ec8:	005b      	lsls	r3, r3, #1
   11eca:	603b      	str	r3, [r7, #0]
		if (thereis_F)
   11ecc:	f64f 73b4 	movw	r3, #65460	; 0xffb4
   11ed0:	f2c0 0302 	movt	r3, #2
   11ed4:	681b      	ldr	r3, [r3, #0]
   11ed6:	2b00      	cmp	r3, #0
   11ed8:	d002      	beq.n	11ee0 <getLen_fmt+0x38>
			len = len - 1;
   11eda:	683b      	ldr	r3, [r7, #0]
   11edc:	3b01      	subs	r3, #1
   11ede:	603b      	str	r3, [r7, #0]
		if(len>37)len=37;
   11ee0:	683b      	ldr	r3, [r7, #0]
   11ee2:	2b25      	cmp	r3, #37	; 0x25
   11ee4:	dd01      	ble.n	11eea <getLen_fmt+0x42>
   11ee6:	2325      	movs	r3, #37	; 0x25
   11ee8:	603b      	str	r3, [r7, #0]

		thereis_F = 0; //notify that 'f' was processed
   11eea:	f64f 73b4 	movw	r3, #65460	; 0xffb4
   11eee:	f2c0 0302 	movt	r3, #2
   11ef2:	2200      	movs	r2, #0
   11ef4:	601a      	str	r2, [r3, #0]
   11ef6:	e00a      	b.n	11f0e <getLen_fmt+0x66>
	}else if(bit==2){
   11ef8:	79fb      	ldrb	r3, [r7, #7]
   11efa:	2b02      	cmp	r3, #2
   11efc:	d107      	bne.n	11f0e <getLen_fmt+0x66>
		len=len*2;
   11efe:	683b      	ldr	r3, [r7, #0]
   11f00:	005b      	lsls	r3, r3, #1
   11f02:	603b      	str	r3, [r7, #0]
		if(len>19)len=19;
   11f04:	683b      	ldr	r3, [r7, #0]
   11f06:	2b13      	cmp	r3, #19
   11f08:	dd01      	ble.n	11f0e <getLen_fmt+0x66>
   11f0a:	2313      	movs	r3, #19
   11f0c:	603b      	str	r3, [r7, #0]
	}

	return len;
   11f0e:	683b      	ldr	r3, [r7, #0]
}
   11f10:	4618      	mov	r0, r3
   11f12:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11f16:	f2c0 0302 	movt	r3, #2
   11f1a:	68fa      	ldr	r2, [r7, #12]
   11f1c:	681b      	ldr	r3, [r3, #0]
   11f1e:	429a      	cmp	r2, r3
   11f20:	d001      	beq.n	11f26 <getLen_fmt+0x7e>
   11f22:	f7f7 f83f 	bl	8fa4 <__stack_chk_fail>
   11f26:	f107 0710 	add.w	r7, r7, #16
   11f2a:	46bd      	mov	sp, r7
   11f2c:	bd80      	pop	{r7, pc}
   11f2e:	bf00      	nop

00011f30 <appFld>:



static int appFld(tBuffer * req, byte bit, const tBuffer * val) {
   11f30:	b590      	push	{r4, r7, lr}
   11f32:	f2ad 4d34 	subw	sp, sp, #1076	; 0x434
   11f36:	af00      	add	r7, sp, #0
   11f38:	f107 030c 	add.w	r3, r7, #12
   11f3c:	6018      	str	r0, [r3, #0]
   11f3e:	1d3b      	adds	r3, r7, #4
   11f40:	601a      	str	r2, [r3, #0]
   11f42:	f107 030b 	add.w	r3, r7, #11
   11f46:	460a      	mov	r2, r1
   11f48:	701a      	strb	r2, [r3, #0]
   11f4a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   11f4e:	f2c0 0302 	movt	r3, #2
   11f52:	681b      	ldr	r3, [r3, #0]
   11f54:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
	int ret = 0;
   11f58:	f107 0314 	add.w	r3, r7, #20
   11f5c:	2200      	movs	r2, #0
   11f5e:	601a      	str	r2, [r3, #0]
	byte buf[1024];
	byte bcd[5 + 1];
	word len;
	byte cnt;

	memset(bcd, 0, sizeof(bcd));
   11f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
   11f64:	4618      	mov	r0, r3
   11f66:	2100      	movs	r1, #0
   11f68:	2206      	movs	r2, #6
   11f6a:	f7f6 ee28 	blx	8bbc <_init+0x5c>
	memset(buf, 0, sizeof(buf));
   11f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   11f72:	4618      	mov	r0, r3
   11f74:	2100      	movs	r1, #0
   11f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11f7a:	f7f6 ee20 	blx	8bbc <_init+0x5c>
	memset(tmp, 0, sizeof(tmp));
   11f7e:	f107 031c 	add.w	r3, r7, #28
   11f82:	4618      	mov	r0, r3
   11f84:	2100      	movs	r1, #0
   11f86:	2206      	movs	r2, #6
   11f88:	f7f6 ee18 	blx	8bbc <_init+0x5c>

	fmt = isoFmt(bit);
   11f8c:	f107 0418 	add.w	r4, r7, #24
   11f90:	f107 030b 	add.w	r3, r7, #11
   11f94:	781b      	ldrb	r3, [r3, #0]
   11f96:	4618      	mov	r0, r3
   11f98:	f7ff fc0c 	bl	117b4 <isoFmt>
   11f9c:	6020      	str	r0, [r4, #0]

	if(fmt < 0) {               //LLVAR or LLLVAR
   11f9e:	f107 0318 	add.w	r3, r7, #24
   11fa2:	681b      	ldr	r3, [r3, #0]
   11fa4:	2b00      	cmp	r3, #0
   11fa6:	da77      	bge.n	12098 <appFld+0x168>
		len = bufLen(val);
   11fa8:	f107 0412 	add.w	r4, r7, #18
   11fac:	1d3b      	adds	r3, r7, #4
   11fae:	6818      	ldr	r0, [r3, #0]
   11fb0:	f001 f8a2 	bl	130f8 <bufLen>
   11fb4:	4603      	mov	r3, r0
   11fb6:	8023      	strh	r3, [r4, #0]

		cnt = -fmt;
   11fb8:	f107 0318 	add.w	r3, r7, #24
   11fbc:	681b      	ldr	r3, [r3, #0]
   11fbe:	b2da      	uxtb	r2, r3
   11fc0:	f107 0311 	add.w	r3, r7, #17
   11fc4:	4252      	negs	r2, r2
   11fc6:	701a      	strb	r2, [r3, #0]
		VERIFY(cnt);

		len = getLen_fmt(bit,len);
   11fc8:	f107 0312 	add.w	r3, r7, #18
   11fcc:	881b      	ldrh	r3, [r3, #0]
   11fce:	f107 020b 	add.w	r2, r7, #11
   11fd2:	7812      	ldrb	r2, [r2, #0]
   11fd4:	4610      	mov	r0, r2
   11fd6:	4619      	mov	r1, r3
   11fd8:	f7ff ff66 	bl	11ea8 <getLen_fmt>
   11fdc:	4602      	mov	r2, r0
   11fde:	f107 0312 	add.w	r3, r7, #18
   11fe2:	801a      	strh	r2, [r3, #0]

		memcpy(buf, bufPtr(val), len);
   11fe4:	1d3b      	adds	r3, r7, #4
   11fe6:	6818      	ldr	r0, [r3, #0]
   11fe8:	f001 f86a 	bl	130c0 <bufPtr>
   11fec:	4602      	mov	r2, r0
   11fee:	f107 0312 	add.w	r3, r7, #18
   11ff2:	881b      	ldrh	r3, [r3, #0]
   11ff4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   11ff8:	4608      	mov	r0, r1
   11ffa:	4611      	mov	r1, r2
   11ffc:	461a      	mov	r2, r3
   11ffe:	f7f6 ee3c 	blx	8c78 <_init+0x118>
		num2dec(tmp, len,(cnt - 1) * 2);
   12002:	f107 0312 	add.w	r3, r7, #18
   12006:	881a      	ldrh	r2, [r3, #0]
   12008:	f107 0311 	add.w	r3, r7, #17
   1200c:	781b      	ldrb	r3, [r3, #0]
   1200e:	3b01      	subs	r3, #1
   12010:	b2db      	uxtb	r3, r3
   12012:	005b      	lsls	r3, r3, #1
   12014:	b2db      	uxtb	r3, r3
   12016:	f107 011c 	add.w	r1, r7, #28
   1201a:	4608      	mov	r0, r1
   1201c:	4611      	mov	r1, r2
   1201e:	461a      	mov	r2, r3
   12020:	f000 fae2 	bl	125e8 <num2dec>
		hex2bin(bcd, tmp, 0);
   12024:	f107 0224 	add.w	r2, r7, #36	; 0x24
   12028:	f107 031c 	add.w	r3, r7, #28
   1202c:	4610      	mov	r0, r2
   1202e:	4619      	mov	r1, r3
   12030:	2200      	movs	r2, #0
   12032:	f000 fdbd 	bl	12bb0 <hex2bin>

		ret = bufApp(req, bcd, cnt - 1);
   12036:	f107 0311 	add.w	r3, r7, #17
   1203a:	781b      	ldrb	r3, [r3, #0]
   1203c:	3b01      	subs	r3, #1
   1203e:	f107 0414 	add.w	r4, r7, #20
   12042:	f107 010c 	add.w	r1, r7, #12
   12046:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1204a:	6808      	ldr	r0, [r1, #0]
   1204c:	4611      	mov	r1, r2
   1204e:	461a      	mov	r2, r3
   12050:	f001 f9ae 	bl	133b0 <bufApp>
   12054:	6020      	str	r0, [r4, #0]

		if(bit==35 || bit==2){ // custom length of postilion
   12056:	f107 030b 	add.w	r3, r7, #11
   1205a:	781b      	ldrb	r3, [r3, #0]
   1205c:	2b23      	cmp	r3, #35	; 0x23
   1205e:	d004      	beq.n	1206a <appFld+0x13a>
   12060:	f107 030b 	add.w	r3, r7, #11
   12064:	781b      	ldrb	r3, [r3, #0]
   12066:	2b02      	cmp	r3, #2
   12068:	d132      	bne.n	120d0 <appFld+0x1a0>
			if(len % 2 != 0) len++;
   1206a:	f107 0312 	add.w	r3, r7, #18
   1206e:	881b      	ldrh	r3, [r3, #0]
   12070:	f003 0301 	and.w	r3, r3, #1
   12074:	b29b      	uxth	r3, r3
   12076:	2b00      	cmp	r3, #0
   12078:	d006      	beq.n	12088 <appFld+0x158>
   1207a:	f107 0312 	add.w	r3, r7, #18
   1207e:	f107 0212 	add.w	r2, r7, #18
   12082:	8812      	ldrh	r2, [r2, #0]
   12084:	3201      	adds	r2, #1
   12086:	801a      	strh	r2, [r3, #0]
			len=len/2;
   12088:	f107 0312 	add.w	r3, r7, #18
   1208c:	f107 0212 	add.w	r2, r7, #18
   12090:	8812      	ldrh	r2, [r2, #0]
   12092:	0852      	lsrs	r2, r2, #1
   12094:	801a      	strh	r2, [r3, #0]
   12096:	e01b      	b.n	120d0 <appFld+0x1a0>
		}
	} else {
		len = getLen_(bit,fmt);///(kev-Code) Modification
   12098:	f107 0412 	add.w	r4, r7, #18
   1209c:	f107 030b 	add.w	r3, r7, #11
   120a0:	781a      	ldrb	r2, [r3, #0]
   120a2:	f107 0318 	add.w	r3, r7, #24
   120a6:	4610      	mov	r0, r2
   120a8:	6819      	ldr	r1, [r3, #0]
   120aa:	f7ff febf 	bl	11e2c <getLen_>
   120ae:	4603      	mov	r3, r0
   120b0:	8023      	strh	r3, [r4, #0]
		memcpy(buf, bufPtr(val), len);
   120b2:	1d3b      	adds	r3, r7, #4
   120b4:	6818      	ldr	r0, [r3, #0]
   120b6:	f001 f803 	bl	130c0 <bufPtr>
   120ba:	4602      	mov	r2, r0
   120bc:	f107 0312 	add.w	r3, r7, #18
   120c0:	881b      	ldrh	r3, [r3, #0]
   120c2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   120c6:	4608      	mov	r0, r1
   120c8:	4611      	mov	r1, r2
   120ca:	461a      	mov	r2, r3
   120cc:	f7f6 edd4 	blx	8c78 <_init+0x118>
	}

	ret = bufApp(req, buf, len);
   120d0:	f107 0312 	add.w	r3, r7, #18
   120d4:	881b      	ldrh	r3, [r3, #0]
   120d6:	f107 0414 	add.w	r4, r7, #20
   120da:	f107 010c 	add.w	r1, r7, #12
   120de:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   120e2:	6808      	ldr	r0, [r1, #0]
   120e4:	4611      	mov	r1, r2
   120e6:	461a      	mov	r2, r3
   120e8:	f001 f962 	bl	133b0 <bufApp>
   120ec:	6020      	str	r0, [r4, #0]
	CHK;
   120ee:	f107 0314 	add.w	r3, r7, #20
   120f2:	681b      	ldr	r3, [r3, #0]
   120f4:	2b00      	cmp	r3, #0
   120f6:	db06      	blt.n	12106 <appFld+0x1d6>

	return bufLen(req);
   120f8:	f107 030c 	add.w	r3, r7, #12
   120fc:	6818      	ldr	r0, [r3, #0]
   120fe:	f000 fffb 	bl	130f8 <bufLen>
   12102:	4603      	mov	r3, r0
   12104:	e001      	b.n	1210a <appFld+0x1da>
	lblKO:
	return -1;
   12106:	f04f 33ff 	mov.w	r3, #4294967295
}
   1210a:	4618      	mov	r0, r3
   1210c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12110:	f2c0 0302 	movt	r3, #2
   12114:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
   12118:	681b      	ldr	r3, [r3, #0]
   1211a:	429a      	cmp	r2, r3
   1211c:	d001      	beq.n	12122 <appFld+0x1f2>
   1211e:	f7f6 ff41 	bl	8fa4 <__stack_chk_fail>
   12122:	f107 0734 	add.w	r7, r7, #52	; 0x34
   12126:	f507 6780 	add.w	r7, r7, #1024	; 0x400
   1212a:	46bd      	mov	sp, r7
   1212c:	bd90      	pop	{r4, r7, pc}
   1212e:	bf00      	nop

00012130 <reqBuild>:

int reqBuild(tBuffer * req) {
   12130:	b5b0      	push	{r4, r5, r7, lr}
   12132:	f5ad 6d90 	sub.w	sp, sp, #1152	; 0x480
   12136:	af00      	add	r7, sp, #0
   12138:	1d3b      	adds	r3, r7, #4
   1213a:	6018      	str	r0, [r3, #0]
   1213c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12140:	f2c0 0302 	movt	r3, #2
   12144:	681b      	ldr	r3, [r3, #0]
   12146:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
	int ret;
	byte bit = 0;
   1214a:	f107 030f 	add.w	r3, r7, #15
   1214e:	2200      	movs	r2, #0
   12150:	701a      	strb	r2, [r3, #0]
	char mtiStr[4 + lenMti];
	char BitmapStr[4 + (lenBitmap*4)];
	tBuffer buf;
	byte dat[999 + 1];
	char keyStr[40];
	card bitLen = 0;
   12152:	f107 0310 	add.w	r3, r7, #16
   12156:	2200      	movs	r2, #0
   12158:	601a      	str	r2, [r3, #0]

	VERIFY(req);

	//    ret = mapGetByte(regLocType, LocationType);
	//    CHK;
	memset(dat, 0, sizeof(dat));
   1215a:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1215e:	4618      	mov	r0, r3
   12160:	2100      	movs	r1, #0
   12162:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12166:	f7f6 ed2a 	blx	8bbc <_init+0x5c>
	memset(mti, 0, sizeof(mti));
   1216a:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1216e:	4618      	mov	r0, r3
   12170:	2100      	movs	r1, #0
   12172:	2205      	movs	r2, #5
   12174:	f7f6 ed22 	blx	8bbc <_init+0x5c>
	memset(keyStr, 0, sizeof(keyStr));
   12178:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   1217c:	4618      	mov	r0, r3
   1217e:	2100      	movs	r1, #0
   12180:	2228      	movs	r2, #40	; 0x28
   12182:	f7f6 ed1c 	blx	8bbc <_init+0x5c>
	memset(mtiStr, 0, sizeof(mtiStr));
   12186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1218a:	4618      	mov	r0, r3
   1218c:	2100      	movs	r1, #0
   1218e:	2208      	movs	r2, #8
   12190:	f7f6 ed14 	blx	8bbc <_init+0x5c>
	memset(Bitmap, 0, sizeof(Bitmap));
   12194:	f107 0334 	add.w	r3, r7, #52	; 0x34
   12198:	4618      	mov	r0, r3
   1219a:	2100      	movs	r1, #0
   1219c:	2211      	movs	r2, #17
   1219e:	f7f6 ed0e 	blx	8bbc <_init+0x5c>
	memset(BitmapStr, 0, sizeof(BitmapStr));
   121a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
   121a6:	4618      	mov	r0, r3
   121a8:	2100      	movs	r1, #0
   121aa:	2224      	movs	r2, #36	; 0x24
   121ac:	f7f6 ed06 	blx	8bbc <_init+0x5c>
	memset(bitLenStr, 0, sizeof(bitLenStr));
   121b0:	f107 0320 	add.w	r3, r7, #32
   121b4:	4618      	mov	r0, r3
   121b6:	2100      	movs	r1, #0
   121b8:	2203      	movs	r2, #3
   121ba:	f7f6 ed00 	blx	8bbc <_init+0x5c>


	//get the MTI of the transaction
	strcpy(mtiStr, "1200");
   121be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   121c2:	f644 02c4 	movw	r2, #18628	; 0x48c4
   121c6:	f2c0 0202 	movt	r2, #2
   121ca:	e892 0003 	ldmia.w	r2, {r0, r1}
   121ce:	6018      	str	r0, [r3, #0]
   121d0:	3304      	adds	r3, #4
   121d2:	7019      	strb	r1, [r3, #0]
	hex2bin(mti, mtiStr, 0);
   121d4:	f107 0224 	add.w	r2, r7, #36	; 0x24
   121d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   121dc:	4610      	mov	r0, r2
   121de:	4619      	mov	r1, r3
   121e0:	2200      	movs	r2, #0
   121e2:	f000 fce5 	bl	12bb0 <hex2bin>
	ret = bufApp(req, mti + 1, 2);
   121e6:	f107 0414 	add.w	r4, r7, #20
   121ea:	1d3a      	adds	r2, r7, #4
   121ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
   121f0:	3301      	adds	r3, #1
   121f2:	6810      	ldr	r0, [r2, #0]
   121f4:	4619      	mov	r1, r3
   121f6:	2202      	movs	r2, #2
   121f8:	f001 f8da 	bl	133b0 <bufApp>
   121fc:	6020      	str	r0, [r4, #0]


	strcpy( BitmapStr, "087000000000001000");
   121fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
   12202:	f644 03cc 	movw	r3, #18636	; 0x48cc
   12206:	f2c0 0302 	movt	r3, #2
   1220a:	4614      	mov	r4, r2
   1220c:	461d      	mov	r5, r3
   1220e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12212:	682b      	ldr	r3, [r5, #0]
   12214:	461a      	mov	r2, r3
   12216:	8022      	strh	r2, [r4, #0]
   12218:	3402      	adds	r4, #2
   1221a:	0c1b      	lsrs	r3, r3, #16
   1221c:	7023      	strb	r3, [r4, #0]
	memset(Bitmap, 0, sizeof(Bitmap));
   1221e:	f107 0334 	add.w	r3, r7, #52	; 0x34
   12222:	4618      	mov	r0, r3
   12224:	2100      	movs	r1, #0
   12226:	2211      	movs	r2, #17
   12228:	f7f6 ecc8 	blx	8bbc <_init+0x5c>
	hex2bin(Bitmap, BitmapStr, 0);
   1222c:	f107 0234 	add.w	r2, r7, #52	; 0x34
   12230:	f107 0348 	add.w	r3, r7, #72	; 0x48
   12234:	4610      	mov	r0, r2
   12236:	4619      	mov	r1, r3
   12238:	2200      	movs	r2, #0
   1223a:	f000 fcb9 	bl	12bb0 <hex2bin>

	//get length of the bitmap
	bin2hex(bitLenStr, Bitmap,1);
   1223e:	f107 0220 	add.w	r2, r7, #32
   12242:	f107 0334 	add.w	r3, r7, #52	; 0x34
   12246:	4610      	mov	r0, r2
   12248:	4619      	mov	r1, r3
   1224a:	2201      	movs	r2, #1
   1224c:	f000 fc60 	bl	12b10 <bin2hex>
	hex2num(&bitLen, bitLenStr, 0);
   12250:	f107 0210 	add.w	r2, r7, #16
   12254:	f107 0320 	add.w	r3, r7, #32
   12258:	4610      	mov	r0, r2
   1225a:	4619      	mov	r1, r3
   1225c:	2200      	movs	r2, #0
   1225e:	f000 fbdf 	bl	12a20 <hex2num>

	ret = bufApp(req, Bitmap + 1, bitLen);
   12262:	f107 0310 	add.w	r3, r7, #16
   12266:	681b      	ldr	r3, [r3, #0]
   12268:	f107 0414 	add.w	r4, r7, #20
   1226c:	1d39      	adds	r1, r7, #4
   1226e:	f107 0234 	add.w	r2, r7, #52	; 0x34
   12272:	3201      	adds	r2, #1
   12274:	6808      	ldr	r0, [r1, #0]
   12276:	4611      	mov	r1, r2
   12278:	461a      	mov	r2, r3
   1227a:	f001 f899 	bl	133b0 <bufApp>
   1227e:	6020      	str	r0, [r4, #0]
	CHK;
   12280:	f107 0314 	add.w	r3, r7, #20
   12284:	681b      	ldr	r3, [r3, #0]
   12286:	2b00      	cmp	r3, #0
   12288:	db5f      	blt.n	1234a <reqBuild+0x21a>

	for (bit = 2; bit <= bitLen * lenBitmap; bit++) {
   1228a:	f107 030f 	add.w	r3, r7, #15
   1228e:	2202      	movs	r2, #2
   12290:	701a      	strb	r2, [r3, #0]
   12292:	e04b      	b.n	1232c <reqBuild+0x1fc>
		if(!bitTest(Bitmap + 1, bit))
   12294:	f107 0334 	add.w	r3, r7, #52	; 0x34
   12298:	1c5a      	adds	r2, r3, #1
   1229a:	f107 030f 	add.w	r3, r7, #15
   1229e:	781b      	ldrb	r3, [r3, #0]
   122a0:	4610      	mov	r0, r2
   122a2:	4619      	mov	r1, r3
   122a4:	f001 fc84 	bl	13bb0 <bitTest>
   122a8:	4603      	mov	r3, r0
   122aa:	2b00      	cmp	r3, #0
   122ac:	d036      	beq.n	1231c <reqBuild+0x1ec>
			continue;

		//clear buffer to hold data
		memset(dat, 0, sizeof(dat));
   122ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
   122b2:	4618      	mov	r0, r3
   122b4:	2100      	movs	r1, #0
   122b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   122ba:	f7f6 ec80 	blx	8bbc <_init+0x5c>
		bufInit(&buf, dat, sizeof(dat));   //initialize temporary buffer for current field
   122be:	f107 0218 	add.w	r2, r7, #24
   122c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
   122c6:	4610      	mov	r0, r2
   122c8:	4619      	mov	r1, r3
   122ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   122ce:	f000 feb3 	bl	13038 <bufInit>

		//get field data
		ret = getFld(&buf, bit);
   122d2:	f107 0414 	add.w	r4, r7, #20
   122d6:	f107 0218 	add.w	r2, r7, #24
   122da:	f107 030f 	add.w	r3, r7, #15
   122de:	781b      	ldrb	r3, [r3, #0]
   122e0:	4610      	mov	r0, r2
   122e2:	4619      	mov	r1, r3
   122e4:	f7ff fcf8 	bl	11cd8 <getFld>
   122e8:	6020      	str	r0, [r4, #0]
		CHK;                    //retrieve the value from the data base
   122ea:	f107 0314 	add.w	r3, r7, #20
   122ee:	681b      	ldr	r3, [r3, #0]
   122f0:	2b00      	cmp	r3, #0
   122f2:	db2a      	blt.n	1234a <reqBuild+0x21a>

		//append to request
		ret = appFld(req, bit, &buf);
   122f4:	f107 0414 	add.w	r4, r7, #20
   122f8:	1d39      	adds	r1, r7, #4
   122fa:	f107 030f 	add.w	r3, r7, #15
   122fe:	781a      	ldrb	r2, [r3, #0]
   12300:	f107 0318 	add.w	r3, r7, #24
   12304:	6808      	ldr	r0, [r1, #0]
   12306:	4611      	mov	r1, r2
   12308:	461a      	mov	r2, r3
   1230a:	f7ff fe11 	bl	11f30 <appFld>
   1230e:	6020      	str	r0, [r4, #0]
		CHK;                    //append it to the iso message
   12310:	f107 0314 	add.w	r3, r7, #20
   12314:	681b      	ldr	r3, [r3, #0]
   12316:	2b00      	cmp	r3, #0
   12318:	db17      	blt.n	1234a <reqBuild+0x21a>
   1231a:	e000      	b.n	1231e <reqBuild+0x1ee>
	ret = bufApp(req, Bitmap + 1, bitLen);
	CHK;

	for (bit = 2; bit <= bitLen * lenBitmap; bit++) {
		if(!bitTest(Bitmap + 1, bit))
			continue;
   1231c:	bf00      	nop
	hex2num(&bitLen, bitLenStr, 0);

	ret = bufApp(req, Bitmap + 1, bitLen);
	CHK;

	for (bit = 2; bit <= bitLen * lenBitmap; bit++) {
   1231e:	f107 030f 	add.w	r3, r7, #15
   12322:	f107 020f 	add.w	r2, r7, #15
   12326:	7812      	ldrb	r2, [r2, #0]
   12328:	3201      	adds	r2, #1
   1232a:	701a      	strb	r2, [r3, #0]
   1232c:	f107 030f 	add.w	r3, r7, #15
   12330:	781a      	ldrb	r2, [r3, #0]
   12332:	f107 0310 	add.w	r3, r7, #16
   12336:	681b      	ldr	r3, [r3, #0]
   12338:	00db      	lsls	r3, r3, #3
   1233a:	429a      	cmp	r2, r3
   1233c:	d9aa      	bls.n	12294 <reqBuild+0x164>
		//append to request
		ret = appFld(req, bit, &buf);
		CHK;                    //append it to the iso message
	}

	return bufLen(req);
   1233e:	1d3b      	adds	r3, r7, #4
   12340:	6818      	ldr	r0, [r3, #0]
   12342:	f000 fed9 	bl	130f8 <bufLen>
   12346:	4603      	mov	r3, r0
   12348:	e001      	b.n	1234e <reqBuild+0x21e>
	lblKO:
	return -1;
   1234a:	f04f 33ff 	mov.w	r3, #4294967295
}
   1234e:	4618      	mov	r0, r3
   12350:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12354:	f2c0 0302 	movt	r3, #2
   12358:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
   1235c:	681b      	ldr	r3, [r3, #0]
   1235e:	429a      	cmp	r2, r3
   12360:	d001      	beq.n	12366 <reqBuild+0x236>
   12362:	f7f6 fe1f 	bl	8fa4 <__stack_chk_fail>
   12366:	f507 6790 	add.w	r7, r7, #1152	; 0x480
   1236a:	46bd      	mov	sp, r7
   1236c:	bdb0      	pop	{r4, r5, r7, pc}
   1236e:	bf00      	nop

00012370 <doTransaction>:

void doTransaction(void){
   12370:	b590      	push	{r4, r7, lr}
   12372:	f5ad 5dc1 	sub.w	sp, sp, #6176	; 0x1820
   12376:	b087      	sub	sp, #28
   12378:	af00      	add	r7, sp, #0
   1237a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1237e:	f2c0 0302 	movt	r3, #2
   12382:	681b      	ldr	r3, [r3, #0]
   12384:	f507 51c1 	add.w	r1, r7, #6176	; 0x1820
   12388:	f101 0114 	add.w	r1, r1, #20
   1238c:	600b      	str	r3, [r1, #0]
	tBuffer bRsp;    // Response Buffer
	byte dRsp[(1024 * 3) + 3]; // Response data
	tBuffer bTPDUReq;// TPDU Request Buffer
	byte dTPDUReq[lenTPDU + lenBCDMsg + 1];
	byte bytTPDU[6 + 1];
	int ret = 0;
   1238e:	f107 0318 	add.w	r3, r7, #24
   12392:	3b18      	subs	r3, #24
   12394:	2200      	movs	r2, #0
   12396:	601a      	str	r2, [r3, #0]


	memset(dRsp, 0, sizeof(dRsp));
   12398:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
   1239c:	4618      	mov	r0, r3
   1239e:	2100      	movs	r1, #0
   123a0:	f640 4203 	movw	r2, #3075	; 0xc03
   123a4:	f7f6 ec0a 	blx	8bbc <_init+0x5c>
	memset(dReq, 0, sizeof(dReq));
   123a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
   123ac:	3b0c      	subs	r3, #12
   123ae:	4618      	mov	r0, r3
   123b0:	2100      	movs	r1, #0
   123b2:	f640 4201 	movw	r2, #3073	; 0xc01
   123b6:	f7f6 ec02 	blx	8bbc <_init+0x5c>
	memset(bytTPDU, 0, sizeof(bytTPDU));
   123ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
   123be:	3b1c      	subs	r3, #28
   123c0:	4618      	mov	r0, r3
   123c2:	2100      	movs	r1, #0
   123c4:	2207      	movs	r2, #7
   123c6:	f7f6 ebfa 	blx	8bbc <_init+0x5c>
//	memset(strTPDU, 0, sizeof(strTPDU));
	memset(dTPDUReq, 0, sizeof(dTPDUReq));
   123ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
   123ce:	3b14      	subs	r3, #20
   123d0:	4618      	mov	r0, r3
   123d2:	2100      	movs	r1, #0
   123d4:	2208      	movs	r2, #8
   123d6:	f7f6 ebf2 	blx	8bbc <_init+0x5c>
//	memset(tpduHead, 0, sizeof(tpduHead));

	//initialize request buffer
	bufInit(&bRsp, dRsp, sizeof(dRsp));
   123da:	f107 0318 	add.w	r3, r7, #24
   123de:	3b0c      	subs	r3, #12
   123e0:	f507 6243 	add.w	r2, r7, #3120	; 0xc30
   123e4:	4618      	mov	r0, r3
   123e6:	4611      	mov	r1, r2
   123e8:	f640 4203 	movw	r2, #3075	; 0xc03
   123ec:	f000 fe24 	bl	13038 <bufInit>
	bufInit(&bReq, dReq, sizeof(dReq));
   123f0:	f107 0218 	add.w	r2, r7, #24
   123f4:	3a14      	subs	r2, #20
   123f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
   123fa:	3b0c      	subs	r3, #12
   123fc:	4610      	mov	r0, r2
   123fe:	4619      	mov	r1, r3
   12400:	f640 4201 	movw	r2, #3073	; 0xc01
   12404:	f000 fe18 	bl	13038 <bufInit>
	bufInit(&bTPDUReq, dTPDUReq, sizeof(dTPDUReq));
   12408:	f107 0218 	add.w	r2, r7, #24
   1240c:	3a04      	subs	r2, #4
   1240e:	f107 0338 	add.w	r3, r7, #56	; 0x38
   12412:	3b14      	subs	r3, #20
   12414:	4610      	mov	r0, r2
   12416:	4619      	mov	r1, r3
   12418:	2208      	movs	r2, #8
   1241a:	f000 fe0d 	bl	13038 <bufInit>

	ret = reqBuild(&bReq);
   1241e:	f107 0418 	add.w	r4, r7, #24
   12422:	3c18      	subs	r4, #24
   12424:	f107 0318 	add.w	r3, r7, #24
   12428:	3b14      	subs	r3, #20
   1242a:	4618      	mov	r0, r3
   1242c:	f7ff fe80 	bl	12130 <reqBuild>
   12430:	6020      	str	r0, [r4, #0]

	MAPPUTSTR(traMessagePack, dReq, lblKO);
   12432:	f107 0418 	add.w	r4, r7, #24
   12436:	3c18      	subs	r4, #24
   12438:	f107 0338 	add.w	r3, r7, #56	; 0x38
   1243c:	3b0c      	subs	r3, #12
   1243e:	201f      	movs	r0, #31
   12440:	4619      	mov	r1, r3
   12442:	2200      	movs	r2, #0
   12444:	f004 f8e2 	bl	1660c <mapPut>
   12448:	6020      	str	r0, [r4, #0]
   1244a:	f107 0318 	add.w	r3, r7, #24
   1244e:	3b18      	subs	r3, #24
   12450:	681b      	ldr	r3, [r3, #0]
   12452:	2b00      	cmp	r3, #0
   12454:	db01      	blt.n	1245a <doTransaction+0xea>

	ComGPRS();
   12456:	f7f9 ffdd 	bl	c414 <ComGPRS>

	lblKO:;
}
   1245a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1245e:	f2c0 0302 	movt	r3, #2
   12462:	f507 51c1 	add.w	r1, r7, #6176	; 0x1820
   12466:	f101 0114 	add.w	r1, r1, #20
   1246a:	680a      	ldr	r2, [r1, #0]
   1246c:	681b      	ldr	r3, [r3, #0]
   1246e:	429a      	cmp	r2, r3
   12470:	d001      	beq.n	12476 <doTransaction+0x106>
   12472:	f7f6 fd97 	bl	8fa4 <__stack_chk_fail>
   12476:	f107 073c 	add.w	r7, r7, #60	; 0x3c
   1247a:	f507 57c0 	add.w	r7, r7, #6144	; 0x1800
   1247e:	46bd      	mov	sp, r7
   12480:	bd90      	pop	{r4, r7, pc}
   12482:	bf00      	nop

00012484 <bPtr>:


//#undef trcOpt
//#define trcOpt (TRCOPT & BIT(trcTBX))

const byte *bPtr(byte val) {
   12484:	b580      	push	{r7, lr}
   12486:	b084      	sub	sp, #16
   12488:	af00      	add	r7, sp, #0
   1248a:	4603      	mov	r3, r0
   1248c:	71fb      	strb	r3, [r7, #7]
   1248e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12492:	f2c0 0302 	movt	r3, #2
   12496:	681b      	ldr	r3, [r3, #0]
   12498:	60fb      	str	r3, [r7, #12]
	static byte x;

	x = val;
   1249a:	f64f 73de 	movw	r3, #65502	; 0xffde
   1249e:	f2c0 0302 	movt	r3, #2
   124a2:	79fa      	ldrb	r2, [r7, #7]
   124a4:	701a      	strb	r2, [r3, #0]
	return &x;
   124a6:	f64f 73de 	movw	r3, #65502	; 0xffde
   124aa:	f2c0 0302 	movt	r3, #2
}
   124ae:	4618      	mov	r0, r3
   124b0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   124b4:	f2c0 0302 	movt	r3, #2
   124b8:	68fa      	ldr	r2, [r7, #12]
   124ba:	681b      	ldr	r3, [r3, #0]
   124bc:	429a      	cmp	r2, r3
   124be:	d001      	beq.n	124c4 <bPtr+0x40>
   124c0:	f7f6 fd70 	bl	8fa4 <__stack_chk_fail>
   124c4:	f107 0710 	add.w	r7, r7, #16
   124c8:	46bd      	mov	sp, r7
   124ca:	bd80      	pop	{r7, pc}

000124cc <wPtr>:

const word *wPtr(word val) {
   124cc:	b580      	push	{r7, lr}
   124ce:	b084      	sub	sp, #16
   124d0:	af00      	add	r7, sp, #0
   124d2:	4603      	mov	r3, r0
   124d4:	80fb      	strh	r3, [r7, #6]
   124d6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   124da:	f2c0 0302 	movt	r3, #2
   124de:	681b      	ldr	r3, [r3, #0]
   124e0:	60fb      	str	r3, [r7, #12]
	static word x;

	x = val;
   124e2:	f64f 73dc 	movw	r3, #65500	; 0xffdc
   124e6:	f2c0 0302 	movt	r3, #2
   124ea:	88fa      	ldrh	r2, [r7, #6]
   124ec:	801a      	strh	r2, [r3, #0]
	return &x;
   124ee:	f64f 73dc 	movw	r3, #65500	; 0xffdc
   124f2:	f2c0 0302 	movt	r3, #2
}
   124f6:	4618      	mov	r0, r3
   124f8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   124fc:	f2c0 0302 	movt	r3, #2
   12500:	68fa      	ldr	r2, [r7, #12]
   12502:	681b      	ldr	r3, [r3, #0]
   12504:	429a      	cmp	r2, r3
   12506:	d001      	beq.n	1250c <wPtr+0x40>
   12508:	f7f6 fd4c 	bl	8fa4 <__stack_chk_fail>
   1250c:	f107 0710 	add.w	r7, r7, #16
   12510:	46bd      	mov	sp, r7
   12512:	bd80      	pop	{r7, pc}

00012514 <cPtr>:

const card *cPtr(card val) {
   12514:	b580      	push	{r7, lr}
   12516:	b084      	sub	sp, #16
   12518:	af00      	add	r7, sp, #0
   1251a:	6078      	str	r0, [r7, #4]
   1251c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12520:	f2c0 0302 	movt	r3, #2
   12524:	681b      	ldr	r3, [r3, #0]
   12526:	60fb      	str	r3, [r7, #12]
	static card x;

	x = val;
   12528:	f64f 73d8 	movw	r3, #65496	; 0xffd8
   1252c:	f2c0 0302 	movt	r3, #2
   12530:	687a      	ldr	r2, [r7, #4]
   12532:	601a      	str	r2, [r3, #0]
	return &x;
   12534:	f64f 73d8 	movw	r3, #65496	; 0xffd8
   12538:	f2c0 0302 	movt	r3, #2
}
   1253c:	4618      	mov	r0, r3
   1253e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12542:	f2c0 0302 	movt	r3, #2
   12546:	68fa      	ldr	r2, [r7, #12]
   12548:	681b      	ldr	r3, [r3, #0]
   1254a:	429a      	cmp	r2, r3
   1254c:	d001      	beq.n	12552 <cPtr+0x3e>
   1254e:	f7f6 fd29 	bl	8fa4 <__stack_chk_fail>
   12552:	f107 0710 	add.w	r7, r7, #16
   12556:	46bd      	mov	sp, r7
   12558:	bd80      	pop	{r7, pc}
   1255a:	bf00      	nop

0001255c <dPtr>:

const byte *dPtr(const char *s) {
   1255c:	b580      	push	{r7, lr}
   1255e:	b084      	sub	sp, #16
   12560:	af00      	add	r7, sp, #0
   12562:	6078      	str	r0, [r7, #4]
   12564:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12568:	f2c0 0302 	movt	r3, #2
   1256c:	681b      	ldr	r3, [r3, #0]
   1256e:	60fb      	str	r3, [r7, #12]
	return (byte *) s;
   12570:	687b      	ldr	r3, [r7, #4]
}
   12572:	4618      	mov	r0, r3
   12574:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12578:	f2c0 0302 	movt	r3, #2
   1257c:	68fa      	ldr	r2, [r7, #12]
   1257e:	681b      	ldr	r3, [r3, #0]
   12580:	429a      	cmp	r2, r3
   12582:	d001      	beq.n	12588 <dPtr+0x2c>
   12584:	f7f6 fd0e 	bl	8fa4 <__stack_chk_fail>
   12588:	f107 0710 	add.w	r7, r7, #16
   1258c:	46bd      	mov	sp, r7
   1258e:	bd80      	pop	{r7, pc}

00012590 <getNumLen>:

//get number of digits in the numeric value based on base
static byte getNumLen(card num, byte base) {
   12590:	b580      	push	{r7, lr}
   12592:	b084      	sub	sp, #16
   12594:	af00      	add	r7, sp, #0
   12596:	6078      	str	r0, [r7, #4]
   12598:	460b      	mov	r3, r1
   1259a:	70fb      	strb	r3, [r7, #3]
   1259c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   125a0:	f2c0 0302 	movt	r3, #2
   125a4:	681b      	ldr	r3, [r3, #0]
   125a6:	60fb      	str	r3, [r7, #12]
	byte ret;

	ret = 0;
   125a8:	2300      	movs	r3, #0
   125aa:	72fb      	strb	r3, [r7, #11]
	while(num) {
   125ac:	e009      	b.n	125c2 <getNumLen+0x32>
		ret++;
   125ae:	7afb      	ldrb	r3, [r7, #11]
   125b0:	3301      	adds	r3, #1
   125b2:	72fb      	strb	r3, [r7, #11]
		num /= base;
   125b4:	78fb      	ldrb	r3, [r7, #3]
   125b6:	6878      	ldr	r0, [r7, #4]
   125b8:	4619      	mov	r1, r3
   125ba:	f00f ee72 	blx	222a0 <__aeabi_uidiv>
   125be:	4603      	mov	r3, r0
   125c0:	607b      	str	r3, [r7, #4]
//get number of digits in the numeric value based on base
static byte getNumLen(card num, byte base) {
	byte ret;

	ret = 0;
	while(num) {
   125c2:	687b      	ldr	r3, [r7, #4]
   125c4:	2b00      	cmp	r3, #0
   125c6:	d1f2      	bne.n	125ae <getNumLen+0x1e>
		ret++;
		num /= base;
	}
	return ret;
   125c8:	7afb      	ldrb	r3, [r7, #11]
}
   125ca:	4618      	mov	r0, r3
   125cc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   125d0:	f2c0 0302 	movt	r3, #2
   125d4:	68fa      	ldr	r2, [r7, #12]
   125d6:	681b      	ldr	r3, [r3, #0]
   125d8:	429a      	cmp	r2, r3
   125da:	d001      	beq.n	125e0 <getNumLen+0x50>
   125dc:	f7f6 fce2 	bl	8fa4 <__stack_chk_fail>
   125e0:	f107 0710 	add.w	r7, r7, #16
   125e4:	46bd      	mov	sp, r7
   125e6:	bd80      	pop	{r7, pc}

000125e8 <num2dec>:
 *    - 0 otherwise.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0004.c
 */
byte num2dec(char *dec, card num, byte len) {
   125e8:	b580      	push	{r7, lr}
   125ea:	b086      	sub	sp, #24
   125ec:	af00      	add	r7, sp, #0
   125ee:	60f8      	str	r0, [r7, #12]
   125f0:	60b9      	str	r1, [r7, #8]
   125f2:	4613      	mov	r3, r2
   125f4:	71fb      	strb	r3, [r7, #7]
   125f6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   125fa:	f2c0 0302 	movt	r3, #2
   125fe:	681b      	ldr	r3, [r3, #0]
   12600:	617b      	str	r3, [r7, #20]

	VERIFY(dec);

	//normally len is the length of the acceptor
	//if len is large, destination is zero padded from left
	if(!len) {                  //calculate len to be equal to the number of decimal digits in num
   12602:	79fb      	ldrb	r3, [r7, #7]
   12604:	2b00      	cmp	r3, #0
   12606:	d10a      	bne.n	1261e <num2dec+0x36>
		len = getNumLen(num, 10);
   12608:	68b8      	ldr	r0, [r7, #8]
   1260a:	210a      	movs	r1, #10
   1260c:	f7ff ffc0 	bl	12590 <getNumLen>
   12610:	4603      	mov	r3, r0
   12612:	71fb      	strb	r3, [r7, #7]
		if(!len)
   12614:	79fb      	ldrb	r3, [r7, #7]
   12616:	2b00      	cmp	r3, #0
   12618:	d101      	bne.n	1261e <num2dec+0x36>
			len = 1;            //zero should be convertod to "0"
   1261a:	2301      	movs	r3, #1
   1261c:	71fb      	strb	r3, [r7, #7]
	}

	ret = len;                  //number of bytes processed is returned
   1261e:	79fb      	ldrb	r3, [r7, #7]
   12620:	74fb      	strb	r3, [r7, #19]
	idx = len;
   12622:	79fb      	ldrb	r3, [r7, #7]
   12624:	74bb      	strb	r3, [r7, #18]
	dec[idx] = 0;
   12626:	7cbb      	ldrb	r3, [r7, #18]
   12628:	68fa      	ldr	r2, [r7, #12]
   1262a:	18d3      	adds	r3, r2, r3
   1262c:	2200      	movs	r2, #0
   1262e:	701a      	strb	r2, [r3, #0]
	while(idx--) {              //fill dec from right to left
   12630:	e01c      	b.n	1266c <num2dec+0x84>
		dec[idx] = (char) ((num % 10) + '0');
   12632:	7cbb      	ldrb	r3, [r7, #18]
   12634:	68fa      	ldr	r2, [r7, #12]
   12636:	18d0      	adds	r0, r2, r3
   12638:	68b9      	ldr	r1, [r7, #8]
   1263a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
   1263e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
   12642:	fba3 2301 	umull	r2, r3, r3, r1
   12646:	08da      	lsrs	r2, r3, #3
   12648:	4613      	mov	r3, r2
   1264a:	009b      	lsls	r3, r3, #2
   1264c:	189b      	adds	r3, r3, r2
   1264e:	005b      	lsls	r3, r3, #1
   12650:	1aca      	subs	r2, r1, r3
   12652:	b2d3      	uxtb	r3, r2
   12654:	3330      	adds	r3, #48	; 0x30
   12656:	b2db      	uxtb	r3, r3
   12658:	7003      	strb	r3, [r0, #0]
		num /= 10;
   1265a:	68ba      	ldr	r2, [r7, #8]
   1265c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
   12660:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
   12664:	fba3 1302 	umull	r1, r3, r3, r2
   12668:	08db      	lsrs	r3, r3, #3
   1266a:	60bb      	str	r3, [r7, #8]
	}

	ret = len;                  //number of bytes processed is returned
	idx = len;
	dec[idx] = 0;
	while(idx--) {              //fill dec from right to left
   1266c:	7cbb      	ldrb	r3, [r7, #18]
   1266e:	2b00      	cmp	r3, #0
   12670:	bf0c      	ite	eq
   12672:	2300      	moveq	r3, #0
   12674:	2301      	movne	r3, #1
   12676:	b2db      	uxtb	r3, r3
   12678:	7cba      	ldrb	r2, [r7, #18]
   1267a:	3a01      	subs	r2, #1
   1267c:	74ba      	strb	r2, [r7, #18]
   1267e:	2b00      	cmp	r3, #0
   12680:	d1d7      	bne.n	12632 <num2dec+0x4a>
		dec[idx] = (char) ((num % 10) + '0');
		num /= 10;
	}
	CHECK(!num, lblKO);         //error: len too small
   12682:	68bb      	ldr	r3, [r7, #8]
   12684:	2b00      	cmp	r3, #0
   12686:	d101      	bne.n	1268c <num2dec+0xa4>
	return ret;
   12688:	7cfb      	ldrb	r3, [r7, #19]
   1268a:	e000      	b.n	1268e <num2dec+0xa6>
	lblKO:
	return 0;
   1268c:	2300      	movs	r3, #0
}
   1268e:	4618      	mov	r0, r3
   12690:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12694:	f2c0 0302 	movt	r3, #2
   12698:	697a      	ldr	r2, [r7, #20]
   1269a:	681b      	ldr	r3, [r3, #0]
   1269c:	429a      	cmp	r2, r3
   1269e:	d001      	beq.n	126a4 <num2dec+0xbc>
   126a0:	f7f6 fc80 	bl	8fa4 <__stack_chk_fail>
   126a4:	f107 0718 	add.w	r7, r7, #24
   126a8:	46bd      	mov	sp, r7
   126aa:	bd80      	pop	{r7, pc}

000126ac <chr2nib>:

static byte chr2nib(char chr) { //convert hexadecimal character to nibble
   126ac:	b580      	push	{r7, lr}
   126ae:	b084      	sub	sp, #16
   126b0:	af00      	add	r7, sp, #0
   126b2:	4603      	mov	r3, r0
   126b4:	71fb      	strb	r3, [r7, #7]
   126b6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   126ba:	f2c0 0302 	movt	r3, #2
   126be:	681b      	ldr	r3, [r3, #0]
   126c0:	60fb      	str	r3, [r7, #12]
	switch (chr) {
   126c2:	79fb      	ldrb	r3, [r7, #7]
   126c4:	3b30      	subs	r3, #48	; 0x30
   126c6:	2b36      	cmp	r3, #54	; 0x36
   126c8:	d87c      	bhi.n	127c4 <chr2nib+0x118>
   126ca:	a201      	add	r2, pc, #4	; (adr r2, 126d0 <chr2nib+0x24>)
   126cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   126d0:	000127ad 	.word	0x000127ad
   126d4:	000127ad 	.word	0x000127ad
   126d8:	000127ad 	.word	0x000127ad
   126dc:	000127ad 	.word	0x000127ad
   126e0:	000127ad 	.word	0x000127ad
   126e4:	000127ad 	.word	0x000127ad
   126e8:	000127ad 	.word	0x000127ad
   126ec:	000127ad 	.word	0x000127ad
   126f0:	000127ad 	.word	0x000127ad
   126f4:	000127ad 	.word	0x000127ad
   126f8:	000127c5 	.word	0x000127c5
   126fc:	000127c5 	.word	0x000127c5
   12700:	000127c5 	.word	0x000127c5
   12704:	000127c5 	.word	0x000127c5
   12708:	000127c5 	.word	0x000127c5
   1270c:	000127c5 	.word	0x000127c5
   12710:	000127c5 	.word	0x000127c5
   12714:	000127b5 	.word	0x000127b5
   12718:	000127b5 	.word	0x000127b5
   1271c:	000127b5 	.word	0x000127b5
   12720:	000127b5 	.word	0x000127b5
   12724:	000127b5 	.word	0x000127b5
   12728:	000127b5 	.word	0x000127b5
   1272c:	000127c5 	.word	0x000127c5
   12730:	000127c5 	.word	0x000127c5
   12734:	000127c5 	.word	0x000127c5
   12738:	000127c5 	.word	0x000127c5
   1273c:	000127c5 	.word	0x000127c5
   12740:	000127c5 	.word	0x000127c5
   12744:	000127c5 	.word	0x000127c5
   12748:	000127c5 	.word	0x000127c5
   1274c:	000127c5 	.word	0x000127c5
   12750:	000127c5 	.word	0x000127c5
   12754:	000127c5 	.word	0x000127c5
   12758:	000127c5 	.word	0x000127c5
   1275c:	000127c5 	.word	0x000127c5
   12760:	000127c5 	.word	0x000127c5
   12764:	000127c5 	.word	0x000127c5
   12768:	000127c5 	.word	0x000127c5
   1276c:	000127c5 	.word	0x000127c5
   12770:	000127c5 	.word	0x000127c5
   12774:	000127c5 	.word	0x000127c5
   12778:	000127c5 	.word	0x000127c5
   1277c:	000127c5 	.word	0x000127c5
   12780:	000127c5 	.word	0x000127c5
   12784:	000127c5 	.word	0x000127c5
   12788:	000127c5 	.word	0x000127c5
   1278c:	000127c5 	.word	0x000127c5
   12790:	000127c5 	.word	0x000127c5
   12794:	000127bd 	.word	0x000127bd
   12798:	000127bd 	.word	0x000127bd
   1279c:	000127bd 	.word	0x000127bd
   127a0:	000127bd 	.word	0x000127bd
   127a4:	000127bd 	.word	0x000127bd
   127a8:	000127bd 	.word	0x000127bd
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
		return (byte) (chr - '0');
   127ac:	79fb      	ldrb	r3, [r7, #7]
   127ae:	3b30      	subs	r3, #48	; 0x30
   127b0:	b2db      	uxtb	r3, r3
   127b2:	e009      	b.n	127c8 <chr2nib+0x11c>
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
		return (byte) (chr - 'A' + 10);
   127b4:	79fb      	ldrb	r3, [r7, #7]
   127b6:	3b37      	subs	r3, #55	; 0x37
   127b8:	b2db      	uxtb	r3, r3
   127ba:	e005      	b.n	127c8 <chr2nib+0x11c>
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
		return (byte) (chr - 'a' + 10);
   127bc:	79fb      	ldrb	r3, [r7, #7]
   127be:	3b57      	subs	r3, #87	; 0x57
   127c0:	b2db      	uxtb	r3, r3
   127c2:	e001      	b.n	127c8 <chr2nib+0x11c>
	default:
		break;
   127c4:	bf00      	nop
	}
	return 0x10;                //KO
   127c6:	2310      	movs	r3, #16
}
   127c8:	4618      	mov	r0, r3
   127ca:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   127ce:	f2c0 0302 	movt	r3, #2
   127d2:	68fa      	ldr	r2, [r7, #12]
   127d4:	681b      	ldr	r3, [r3, #0]
   127d6:	429a      	cmp	r2, r3
   127d8:	d001      	beq.n	127de <chr2nib+0x132>
   127da:	f7f6 fbe3 	bl	8fa4 <__stack_chk_fail>
   127de:	f107 0710 	add.w	r7, r7, #16
   127e2:	46bd      	mov	sp, r7
   127e4:	bd80      	pop	{r7, pc}
   127e6:	bf00      	nop

000127e8 <nib2chr>:

static char nib2chr(byte nib) { //convert nibble to hexadecimal character
   127e8:	b580      	push	{r7, lr}
   127ea:	b084      	sub	sp, #16
   127ec:	af00      	add	r7, sp, #0
   127ee:	4603      	mov	r3, r0
   127f0:	71fb      	strb	r3, [r7, #7]
   127f2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   127f6:	f2c0 0302 	movt	r3, #2
   127fa:	681b      	ldr	r3, [r3, #0]
   127fc:	60fb      	str	r3, [r7, #12]
	VERIFY(nib <= 0x0F);
	if(nib < 10)
   127fe:	79fb      	ldrb	r3, [r7, #7]
   12800:	2b09      	cmp	r3, #9
   12802:	d803      	bhi.n	1280c <nib2chr+0x24>
		return (char) ('0' + nib);
   12804:	79fb      	ldrb	r3, [r7, #7]
   12806:	3330      	adds	r3, #48	; 0x30
   12808:	b2db      	uxtb	r3, r3
   1280a:	e002      	b.n	12812 <nib2chr+0x2a>
	return (char) ('A' + (nib - 10));
   1280c:	79fb      	ldrb	r3, [r7, #7]
   1280e:	3337      	adds	r3, #55	; 0x37
   12810:	b2db      	uxtb	r3, r3
}
   12812:	4618      	mov	r0, r3
   12814:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12818:	f2c0 0302 	movt	r3, #2
   1281c:	68fa      	ldr	r2, [r7, #12]
   1281e:	681b      	ldr	r3, [r3, #0]
   12820:	429a      	cmp	r2, r3
   12822:	d001      	beq.n	12828 <nib2chr+0x40>
   12824:	f7f6 fbbe 	bl	8fa4 <__stack_chk_fail>
   12828:	f107 0710 	add.w	r7, r7, #16
   1282c:	46bd      	mov	sp, r7
   1282e:	bd80      	pop	{r7, pc}

00012830 <dec2num>:
 *    - 0 otherwise.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0004.c
 */
byte dec2num(card * num, const char *dec, byte len) {
   12830:	b580      	push	{r7, lr}
   12832:	b086      	sub	sp, #24
   12834:	af00      	add	r7, sp, #0
   12836:	60f8      	str	r0, [r7, #12]
   12838:	60b9      	str	r1, [r7, #8]
   1283a:	4613      	mov	r3, r2
   1283c:	71fb      	strb	r3, [r7, #7]
   1283e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12842:	f2c0 0302 	movt	r3, #2
   12846:	681b      	ldr	r3, [r3, #0]
   12848:	617b      	str	r3, [r7, #20]

	VERIFY(num);
	VERIFY(dec);

	//normally len is the number of characters to get from source string
	if(!len)
   1284a:	79fb      	ldrb	r3, [r7, #7]
   1284c:	2b00      	cmp	r3, #0
   1284e:	d104      	bne.n	1285a <dec2num+0x2a>
		len = (byte) strlen(dec);   //calcualte length if missing
   12850:	68b8      	ldr	r0, [r7, #8]
   12852:	f7f6 ea18 	blx	8c84 <_init+0x124>
   12856:	4603      	mov	r3, r0
   12858:	71fb      	strb	r3, [r7, #7]

	ret = 0;
   1285a:	2300      	movs	r3, #0
   1285c:	74bb      	strb	r3, [r7, #18]
	*num = 0;
   1285e:	68fb      	ldr	r3, [r7, #12]
   12860:	2200      	movs	r2, #0
   12862:	601a      	str	r2, [r3, #0]
	while((*dec == ' ') || (*dec == '\t')) {    //skip blank characters
   12864:	e00b      	b.n	1287e <dec2num+0x4e>
		dec++;
   12866:	68bb      	ldr	r3, [r7, #8]
   12868:	3301      	adds	r3, #1
   1286a:	60bb      	str	r3, [r7, #8]
		ret++;
   1286c:	7cbb      	ldrb	r3, [r7, #18]
   1286e:	3301      	adds	r3, #1
   12870:	74bb      	strb	r3, [r7, #18]
		CHECK(len, lblKO);      //the input is empty
   12872:	79fb      	ldrb	r3, [r7, #7]
   12874:	2b00      	cmp	r3, #0
   12876:	d057      	beq.n	12928 <dec2num+0xf8>
		len--;
   12878:	79fb      	ldrb	r3, [r7, #7]
   1287a:	3b01      	subs	r3, #1
   1287c:	71fb      	strb	r3, [r7, #7]
	if(!len)
		len = (byte) strlen(dec);   //calcualte length if missing

	ret = 0;
	*num = 0;
	while((*dec == ' ') || (*dec == '\t')) {    //skip blank characters
   1287e:	68bb      	ldr	r3, [r7, #8]
   12880:	781b      	ldrb	r3, [r3, #0]
   12882:	2b20      	cmp	r3, #32
   12884:	d0ef      	beq.n	12866 <dec2num+0x36>
   12886:	68bb      	ldr	r3, [r7, #8]
   12888:	781b      	ldrb	r3, [r3, #0]
   1288a:	2b09      	cmp	r3, #9
   1288c:	d0eb      	beq.n	12866 <dec2num+0x36>
		ret++;
		CHECK(len, lblKO);      //the input is empty
		len--;
	}

	while(*dec) {               //main loop: perform the conversion
   1288e:	e03f      	b.n	12910 <dec2num+0xe0>
		if(*dec < '0')
   12890:	68bb      	ldr	r3, [r7, #8]
   12892:	781b      	ldrb	r3, [r3, #0]
   12894:	2b2f      	cmp	r3, #47	; 0x2f
   12896:	d940      	bls.n	1291a <dec2num+0xea>
			break;
		if(*dec > '9')
   12898:	68bb      	ldr	r3, [r7, #8]
   1289a:	781b      	ldrb	r3, [r3, #0]
   1289c:	2b39      	cmp	r3, #57	; 0x39
   1289e:	d83e      	bhi.n	1291e <dec2num+0xee>
			break;
		tmp = chr2nib(*dec++);  //convert one more character
   128a0:	68bb      	ldr	r3, [r7, #8]
   128a2:	781b      	ldrb	r3, [r3, #0]
   128a4:	68ba      	ldr	r2, [r7, #8]
   128a6:	3201      	adds	r2, #1
   128a8:	60ba      	str	r2, [r7, #8]
   128aa:	4618      	mov	r0, r3
   128ac:	f7ff fefe 	bl	126ac <chr2nib>
   128b0:	4603      	mov	r3, r0
   128b2:	74fb      	strb	r3, [r7, #19]
		VERIFY(tmp <= 10);
		CHECK(tmp < 10, lblKO); //validity check
   128b4:	7cfb      	ldrb	r3, [r7, #19]
   128b6:	2b09      	cmp	r3, #9
   128b8:	d836      	bhi.n	12928 <dec2num+0xf8>
		CHECK(*num <= 0xFFFFFFFFL / 10, lblKO); //dec exceeds 0xFFFFFFFFL
   128ba:	68fb      	ldr	r3, [r7, #12]
   128bc:	681a      	ldr	r2, [r3, #0]
   128be:	f649 1399 	movw	r3, #39321	; 0x9999
   128c2:	f6c1 1399 	movt	r3, #6553	; 0x1999
   128c6:	429a      	cmp	r2, r3
   128c8:	d82e      	bhi.n	12928 <dec2num+0xf8>
		CHECK(!((*num == 0xFFFFFFFFL / 10) && (tmp > 5)), lblKO);   //dec exceeds 0xFFFFFFFFL
   128ca:	68fb      	ldr	r3, [r7, #12]
   128cc:	681a      	ldr	r2, [r3, #0]
   128ce:	f649 1399 	movw	r3, #39321	; 0x9999
   128d2:	f6c1 1399 	movt	r3, #6553	; 0x1999
   128d6:	429a      	cmp	r2, r3
   128d8:	d102      	bne.n	128e0 <dec2num+0xb0>
   128da:	7cfb      	ldrb	r3, [r7, #19]
   128dc:	2b05      	cmp	r3, #5
   128de:	d823      	bhi.n	12928 <dec2num+0xf8>
		*num *= 10;             //OK, we can shift it left
   128e0:	68fb      	ldr	r3, [r7, #12]
   128e2:	681a      	ldr	r2, [r3, #0]
   128e4:	4613      	mov	r3, r2
   128e6:	009b      	lsls	r3, r3, #2
   128e8:	189b      	adds	r3, r3, r2
   128ea:	005b      	lsls	r3, r3, #1
   128ec:	461a      	mov	r2, r3
   128ee:	68fb      	ldr	r3, [r7, #12]
   128f0:	601a      	str	r2, [r3, #0]
		*num += tmp;            //OK, let us do it
   128f2:	68fb      	ldr	r3, [r7, #12]
   128f4:	681a      	ldr	r2, [r3, #0]
   128f6:	7cfb      	ldrb	r3, [r7, #19]
   128f8:	18d2      	adds	r2, r2, r3
   128fa:	68fb      	ldr	r3, [r7, #12]
   128fc:	601a      	str	r2, [r3, #0]
		ret++;                  //one more digit processed
   128fe:	7cbb      	ldrb	r3, [r7, #18]
   12900:	3301      	adds	r3, #1
   12902:	74bb      	strb	r3, [r7, #18]
		len--;
   12904:	79fb      	ldrb	r3, [r7, #7]
   12906:	3b01      	subs	r3, #1
   12908:	71fb      	strb	r3, [r7, #7]
		if(!len)
   1290a:	79fb      	ldrb	r3, [r7, #7]
   1290c:	2b00      	cmp	r3, #0
   1290e:	d008      	beq.n	12922 <dec2num+0xf2>
		ret++;
		CHECK(len, lblKO);      //the input is empty
		len--;
	}

	while(*dec) {               //main loop: perform the conversion
   12910:	68bb      	ldr	r3, [r7, #8]
   12912:	781b      	ldrb	r3, [r3, #0]
   12914:	2b00      	cmp	r3, #0
   12916:	d1bb      	bne.n	12890 <dec2num+0x60>
   12918:	e004      	b.n	12924 <dec2num+0xf4>
		if(*dec < '0')
			break;
   1291a:	bf00      	nop
   1291c:	e002      	b.n	12924 <dec2num+0xf4>
		if(*dec > '9')
			break;
   1291e:	bf00      	nop
   12920:	e000      	b.n	12924 <dec2num+0xf4>
		*num *= 10;             //OK, we can shift it left
		*num += tmp;            //OK, let us do it
		ret++;                  //one more digit processed
		len--;
		if(!len)
			break;
   12922:	bf00      	nop
	}

	return ret;
   12924:	7cbb      	ldrb	r3, [r7, #18]
   12926:	e000      	b.n	1292a <dec2num+0xfa>
	lblKO:
	return 0;
   12928:	2300      	movs	r3, #0
}
   1292a:	4618      	mov	r0, r3
   1292c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12930:	f2c0 0302 	movt	r3, #2
   12934:	697a      	ldr	r2, [r7, #20]
   12936:	681b      	ldr	r3, [r3, #0]
   12938:	429a      	cmp	r2, r3
   1293a:	d001      	beq.n	12940 <dec2num+0x110>
   1293c:	f7f6 fb32 	bl	8fa4 <__stack_chk_fail>
   12940:	f107 0718 	add.w	r7, r7, #24
   12944:	46bd      	mov	sp, r7
   12946:	bd80      	pop	{r7, pc}

00012948 <num2hex>:
 *    - 0 otherwise.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0004.c
 */
byte num2hex(char *hex, card num, byte len) {
   12948:	b580      	push	{r7, lr}
   1294a:	b086      	sub	sp, #24
   1294c:	af00      	add	r7, sp, #0
   1294e:	60f8      	str	r0, [r7, #12]
   12950:	60b9      	str	r1, [r7, #8]
   12952:	4613      	mov	r3, r2
   12954:	71fb      	strb	r3, [r7, #7]
   12956:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1295a:	f2c0 0302 	movt	r3, #2
   1295e:	681b      	ldr	r3, [r3, #0]
   12960:	617b      	str	r3, [r7, #20]

	VERIFY(hex);

	//normally len is the length of the acceptor
	//if len is large, destination is zero padded from left
	if(!len) {                  //calculate len to be equal to the number of hexadecimal digits in num
   12962:	79fb      	ldrb	r3, [r7, #7]
   12964:	2b00      	cmp	r3, #0
   12966:	d10a      	bne.n	1297e <num2hex+0x36>
		len = getNumLen(num, 16);
   12968:	68b8      	ldr	r0, [r7, #8]
   1296a:	2110      	movs	r1, #16
   1296c:	f7ff fe10 	bl	12590 <getNumLen>
   12970:	4603      	mov	r3, r0
   12972:	71fb      	strb	r3, [r7, #7]
		if(!len)
   12974:	79fb      	ldrb	r3, [r7, #7]
   12976:	2b00      	cmp	r3, #0
   12978:	d101      	bne.n	1297e <num2hex+0x36>
			len = 1;            //zero should be convertod to "0"
   1297a:	2301      	movs	r3, #1
   1297c:	71fb      	strb	r3, [r7, #7]
	}

	ret = len;
   1297e:	79fb      	ldrb	r3, [r7, #7]
   12980:	74fb      	strb	r3, [r7, #19]
	idx = len;
   12982:	79fb      	ldrb	r3, [r7, #7]
   12984:	74bb      	strb	r3, [r7, #18]
	hex[idx] = 0;
   12986:	7cbb      	ldrb	r3, [r7, #18]
   12988:	68fa      	ldr	r2, [r7, #12]
   1298a:	18d3      	adds	r3, r2, r3
   1298c:	2200      	movs	r2, #0
   1298e:	701a      	strb	r2, [r3, #0]
	while(idx--) {              //fill hex from right to left
   12990:	e026      	b.n	129e0 <num2hex+0x98>
		hex[idx] = (byte) (num % 16);
   12992:	7cbb      	ldrb	r3, [r7, #18]
   12994:	68fa      	ldr	r2, [r7, #12]
   12996:	18d3      	adds	r3, r2, r3
   12998:	68ba      	ldr	r2, [r7, #8]
   1299a:	b2d2      	uxtb	r2, r2
   1299c:	f002 020f 	and.w	r2, r2, #15
   129a0:	b2d2      	uxtb	r2, r2
   129a2:	701a      	strb	r2, [r3, #0]
		if(hex[idx] < 10)
   129a4:	7cbb      	ldrb	r3, [r7, #18]
   129a6:	68fa      	ldr	r2, [r7, #12]
   129a8:	18d3      	adds	r3, r2, r3
   129aa:	781b      	ldrb	r3, [r3, #0]
   129ac:	2b09      	cmp	r3, #9
   129ae:	d80a      	bhi.n	129c6 <num2hex+0x7e>
			hex[idx] += (char) '0';
   129b0:	7cbb      	ldrb	r3, [r7, #18]
   129b2:	68fa      	ldr	r2, [r7, #12]
   129b4:	18d3      	adds	r3, r2, r3
   129b6:	7cba      	ldrb	r2, [r7, #18]
   129b8:	68f9      	ldr	r1, [r7, #12]
   129ba:	188a      	adds	r2, r1, r2
   129bc:	7812      	ldrb	r2, [r2, #0]
   129be:	3230      	adds	r2, #48	; 0x30
   129c0:	b2d2      	uxtb	r2, r2
   129c2:	701a      	strb	r2, [r3, #0]
   129c4:	e009      	b.n	129da <num2hex+0x92>
		else
			hex[idx] += (char) ('A' - 10);
   129c6:	7cbb      	ldrb	r3, [r7, #18]
   129c8:	68fa      	ldr	r2, [r7, #12]
   129ca:	18d3      	adds	r3, r2, r3
   129cc:	7cba      	ldrb	r2, [r7, #18]
   129ce:	68f9      	ldr	r1, [r7, #12]
   129d0:	188a      	adds	r2, r1, r2
   129d2:	7812      	ldrb	r2, [r2, #0]
   129d4:	3237      	adds	r2, #55	; 0x37
   129d6:	b2d2      	uxtb	r2, r2
   129d8:	701a      	strb	r2, [r3, #0]
		num /= 16;
   129da:	68bb      	ldr	r3, [r7, #8]
   129dc:	091b      	lsrs	r3, r3, #4
   129de:	60bb      	str	r3, [r7, #8]
	}

	ret = len;
	idx = len;
	hex[idx] = 0;
	while(idx--) {              //fill hex from right to left
   129e0:	7cbb      	ldrb	r3, [r7, #18]
   129e2:	2b00      	cmp	r3, #0
   129e4:	bf0c      	ite	eq
   129e6:	2300      	moveq	r3, #0
   129e8:	2301      	movne	r3, #1
   129ea:	b2db      	uxtb	r3, r3
   129ec:	7cba      	ldrb	r2, [r7, #18]
   129ee:	3a01      	subs	r2, #1
   129f0:	74ba      	strb	r2, [r7, #18]
   129f2:	2b00      	cmp	r3, #0
   129f4:	d1cd      	bne.n	12992 <num2hex+0x4a>
			hex[idx] += (char) '0';
		else
			hex[idx] += (char) ('A' - 10);
		num /= 16;
	}
	CHECK(!num, lblKO);         //error: len is too small
   129f6:	68bb      	ldr	r3, [r7, #8]
   129f8:	2b00      	cmp	r3, #0
   129fa:	d101      	bne.n	12a00 <num2hex+0xb8>
	return ret;
   129fc:	7cfb      	ldrb	r3, [r7, #19]
   129fe:	e000      	b.n	12a02 <num2hex+0xba>
	lblKO:
	return 0;
   12a00:	2300      	movs	r3, #0
}
   12a02:	4618      	mov	r0, r3
   12a04:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12a08:	f2c0 0302 	movt	r3, #2
   12a0c:	697a      	ldr	r2, [r7, #20]
   12a0e:	681b      	ldr	r3, [r3, #0]
   12a10:	429a      	cmp	r2, r3
   12a12:	d001      	beq.n	12a18 <num2hex+0xd0>
   12a14:	f7f6 fac6 	bl	8fa4 <__stack_chk_fail>
   12a18:	f107 0718 	add.w	r7, r7, #24
   12a1c:	46bd      	mov	sp, r7
   12a1e:	bd80      	pop	{r7, pc}

00012a20 <hex2num>:
 *    - 0 otherwise.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0004.c
 */
byte hex2num(card * num, const char *hex, byte len) {
   12a20:	b580      	push	{r7, lr}
   12a22:	b086      	sub	sp, #24
   12a24:	af00      	add	r7, sp, #0
   12a26:	60f8      	str	r0, [r7, #12]
   12a28:	60b9      	str	r1, [r7, #8]
   12a2a:	4613      	mov	r3, r2
   12a2c:	71fb      	strb	r3, [r7, #7]
   12a2e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12a32:	f2c0 0302 	movt	r3, #2
   12a36:	681b      	ldr	r3, [r3, #0]
   12a38:	617b      	str	r3, [r7, #20]

	VERIFY(num);
	VERIFY(hex);

	//normally len is the number of characters to get from source string
	if(!len)
   12a3a:	79fb      	ldrb	r3, [r7, #7]
   12a3c:	2b00      	cmp	r3, #0
   12a3e:	d104      	bne.n	12a4a <hex2num+0x2a>
		len = (byte) strlen(hex);   //calcualte length if missing
   12a40:	68b8      	ldr	r0, [r7, #8]
   12a42:	f7f6 e920 	blx	8c84 <_init+0x124>
   12a46:	4603      	mov	r3, r0
   12a48:	71fb      	strb	r3, [r7, #7]

	ret = 0;
   12a4a:	2300      	movs	r3, #0
   12a4c:	74bb      	strb	r3, [r7, #18]
	*num = 0;
   12a4e:	68fb      	ldr	r3, [r7, #12]
   12a50:	2200      	movs	r2, #0
   12a52:	601a      	str	r2, [r3, #0]
	while((*hex == ' ') || (*hex == '\t')) {    //skip blank characters
   12a54:	e00b      	b.n	12a6e <hex2num+0x4e>
		hex++;
   12a56:	68bb      	ldr	r3, [r7, #8]
   12a58:	3301      	adds	r3, #1
   12a5a:	60bb      	str	r3, [r7, #8]
		ret++;
   12a5c:	7cbb      	ldrb	r3, [r7, #18]
   12a5e:	3301      	adds	r3, #1
   12a60:	74bb      	strb	r3, [r7, #18]
		CHECK(len, lblKO);      //the input is empty
   12a62:	79fb      	ldrb	r3, [r7, #7]
   12a64:	2b00      	cmp	r3, #0
   12a66:	d042      	beq.n	12aee <hex2num+0xce>
		len--;
   12a68:	79fb      	ldrb	r3, [r7, #7]
   12a6a:	3b01      	subs	r3, #1
   12a6c:	71fb      	strb	r3, [r7, #7]
	if(!len)
		len = (byte) strlen(hex);   //calcualte length if missing

	ret = 0;
	*num = 0;
	while((*hex == ' ') || (*hex == '\t')) {    //skip blank characters
   12a6e:	68bb      	ldr	r3, [r7, #8]
   12a70:	781b      	ldrb	r3, [r3, #0]
   12a72:	2b20      	cmp	r3, #32
   12a74:	d0ef      	beq.n	12a56 <hex2num+0x36>
   12a76:	68bb      	ldr	r3, [r7, #8]
   12a78:	781b      	ldrb	r3, [r3, #0]
   12a7a:	2b09      	cmp	r3, #9
   12a7c:	d0eb      	beq.n	12a56 <hex2num+0x36>
		ret++;
		CHECK(len, lblKO);      //the input is empty
		len--;
	}

	while(*hex) {               //main loop: perform the conversion
   12a7e:	e02e      	b.n	12ade <hex2num+0xbe>
		tmp = chr2nib(*hex++);  //convert one more character
   12a80:	68bb      	ldr	r3, [r7, #8]
   12a82:	781b      	ldrb	r3, [r3, #0]
   12a84:	68ba      	ldr	r2, [r7, #8]
   12a86:	3201      	adds	r2, #1
   12a88:	60ba      	str	r2, [r7, #8]
   12a8a:	4618      	mov	r0, r3
   12a8c:	f7ff fe0e 	bl	126ac <chr2nib>
   12a90:	4603      	mov	r3, r0
   12a92:	74fb      	strb	r3, [r7, #19]
		VERIFY(tmp <= 0x10);
		CHECK(tmp < 0x10, lblKO);   //validity check
   12a94:	7cfb      	ldrb	r3, [r7, #19]
   12a96:	2b0f      	cmp	r3, #15
   12a98:	d829      	bhi.n	12aee <hex2num+0xce>
		CHECK(*num < 0xFFFFFFFL, lblKO);    //is it too large?
   12a9a:	68fb      	ldr	r3, [r7, #12]
   12a9c:	681a      	ldr	r2, [r3, #0]
   12a9e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   12aa2:	f6c0 73ff 	movt	r3, #4095	; 0xfff
   12aa6:	429a      	cmp	r2, r3
   12aa8:	d821      	bhi.n	12aee <hex2num+0xce>
		*num *= 16;             //OK, we can shift it left
   12aaa:	68fb      	ldr	r3, [r7, #12]
   12aac:	681b      	ldr	r3, [r3, #0]
   12aae:	011a      	lsls	r2, r3, #4
   12ab0:	68fb      	ldr	r3, [r7, #12]
   12ab2:	601a      	str	r2, [r3, #0]
		CHECK(*num < 0xFFFFFFFFL - tmp, lblKO); //can we add one more digit?
   12ab4:	68fb      	ldr	r3, [r7, #12]
   12ab6:	681a      	ldr	r2, [r3, #0]
   12ab8:	7cfb      	ldrb	r3, [r7, #19]
   12aba:	43db      	mvns	r3, r3
   12abc:	429a      	cmp	r2, r3
   12abe:	d216      	bcs.n	12aee <hex2num+0xce>
		*num += tmp;            //OK, let us do it
   12ac0:	68fb      	ldr	r3, [r7, #12]
   12ac2:	681a      	ldr	r2, [r3, #0]
   12ac4:	7cfb      	ldrb	r3, [r7, #19]
   12ac6:	18d2      	adds	r2, r2, r3
   12ac8:	68fb      	ldr	r3, [r7, #12]
   12aca:	601a      	str	r2, [r3, #0]
		ret++;                  //one more digit processed
   12acc:	7cbb      	ldrb	r3, [r7, #18]
   12ace:	3301      	adds	r3, #1
   12ad0:	74bb      	strb	r3, [r7, #18]
		len--;
   12ad2:	79fb      	ldrb	r3, [r7, #7]
   12ad4:	3b01      	subs	r3, #1
   12ad6:	71fb      	strb	r3, [r7, #7]
		if(!len)
   12ad8:	79fb      	ldrb	r3, [r7, #7]
   12ada:	2b00      	cmp	r3, #0
   12adc:	d004      	beq.n	12ae8 <hex2num+0xc8>
		ret++;
		CHECK(len, lblKO);      //the input is empty
		len--;
	}

	while(*hex) {               //main loop: perform the conversion
   12ade:	68bb      	ldr	r3, [r7, #8]
   12ae0:	781b      	ldrb	r3, [r3, #0]
   12ae2:	2b00      	cmp	r3, #0
   12ae4:	d1cc      	bne.n	12a80 <hex2num+0x60>
   12ae6:	e000      	b.n	12aea <hex2num+0xca>
		CHECK(*num < 0xFFFFFFFFL - tmp, lblKO); //can we add one more digit?
		*num += tmp;            //OK, let us do it
		ret++;                  //one more digit processed
		len--;
		if(!len)
			break;
   12ae8:	bf00      	nop
	}

	return ret;
   12aea:	7cbb      	ldrb	r3, [r7, #18]
   12aec:	e000      	b.n	12af0 <hex2num+0xd0>
	lblKO:
	return 0;
   12aee:	2300      	movs	r3, #0
}
   12af0:	4618      	mov	r0, r3
   12af2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12af6:	f2c0 0302 	movt	r3, #2
   12afa:	697a      	ldr	r2, [r7, #20]
   12afc:	681b      	ldr	r3, [r3, #0]
   12afe:	429a      	cmp	r2, r3
   12b00:	d001      	beq.n	12b06 <hex2num+0xe6>
   12b02:	f7f6 fa4f 	bl	8fa4 <__stack_chk_fail>
   12b06:	f107 0718 	add.w	r7, r7, #24
   12b0a:	46bd      	mov	sp, r7
   12b0c:	bd80      	pop	{r7, pc}
   12b0e:	bf00      	nop

00012b10 <bin2hex>:
 *    - strlen(hex). There is no possibility of errors: any input data are acceptable.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0004.c
 */
int bin2hex(char *hex, const byte * bin, int len) {
   12b10:	b580      	push	{r7, lr}
   12b12:	b088      	sub	sp, #32
   12b14:	af00      	add	r7, sp, #0
   12b16:	60f8      	str	r0, [r7, #12]
   12b18:	60b9      	str	r1, [r7, #8]
   12b1a:	607a      	str	r2, [r7, #4]
   12b1c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12b20:	f2c0 0302 	movt	r3, #2
   12b24:	681b      	ldr	r3, [r3, #0]
   12b26:	61fb      	str	r3, [r7, #28]
	VERIFY(bin);
	VERIFY(len);

	//normally len is the number of characters to get from source string
	//if(!len) len= strlen((char *)bin); //is not allowed
	ret = len + len;            //each byte is converted into 2 characters
   12b28:	687a      	ldr	r2, [r7, #4]
   12b2a:	687b      	ldr	r3, [r7, #4]
   12b2c:	18d3      	adds	r3, r2, r3
   12b2e:	61bb      	str	r3, [r7, #24]
	while(len--) {
   12b30:	e020      	b.n	12b74 <bin2hex+0x64>
		tmp = *bin++;           //get a byte
   12b32:	68bb      	ldr	r3, [r7, #8]
   12b34:	781b      	ldrb	r3, [r3, #0]
   12b36:	75fb      	strb	r3, [r7, #23]
   12b38:	68bb      	ldr	r3, [r7, #8]
   12b3a:	3301      	adds	r3, #1
   12b3c:	60bb      	str	r3, [r7, #8]
		*hex++ = nib2chr((byte) (tmp / 16));    //convert first nibble
   12b3e:	7dfb      	ldrb	r3, [r7, #23]
   12b40:	091b      	lsrs	r3, r3, #4
   12b42:	b2db      	uxtb	r3, r3
   12b44:	4618      	mov	r0, r3
   12b46:	f7ff fe4f 	bl	127e8 <nib2chr>
   12b4a:	4603      	mov	r3, r0
   12b4c:	461a      	mov	r2, r3
   12b4e:	68fb      	ldr	r3, [r7, #12]
   12b50:	701a      	strb	r2, [r3, #0]
   12b52:	68fb      	ldr	r3, [r7, #12]
   12b54:	3301      	adds	r3, #1
   12b56:	60fb      	str	r3, [r7, #12]
		*hex++ = nib2chr((byte) (tmp % 16));    //convert second nibble
   12b58:	7dfb      	ldrb	r3, [r7, #23]
   12b5a:	f003 030f 	and.w	r3, r3, #15
   12b5e:	b2db      	uxtb	r3, r3
   12b60:	4618      	mov	r0, r3
   12b62:	f7ff fe41 	bl	127e8 <nib2chr>
   12b66:	4603      	mov	r3, r0
   12b68:	461a      	mov	r2, r3
   12b6a:	68fb      	ldr	r3, [r7, #12]
   12b6c:	701a      	strb	r2, [r3, #0]
   12b6e:	68fb      	ldr	r3, [r7, #12]
   12b70:	3301      	adds	r3, #1
   12b72:	60fb      	str	r3, [r7, #12]
	VERIFY(len);

	//normally len is the number of characters to get from source string
	//if(!len) len= strlen((char *)bin); //is not allowed
	ret = len + len;            //each byte is converted into 2 characters
	while(len--) {
   12b74:	687b      	ldr	r3, [r7, #4]
   12b76:	2b00      	cmp	r3, #0
   12b78:	bf0c      	ite	eq
   12b7a:	2300      	moveq	r3, #0
   12b7c:	2301      	movne	r3, #1
   12b7e:	b2db      	uxtb	r3, r3
   12b80:	687a      	ldr	r2, [r7, #4]
   12b82:	3a01      	subs	r2, #1
   12b84:	607a      	str	r2, [r7, #4]
   12b86:	2b00      	cmp	r3, #0
   12b88:	d1d3      	bne.n	12b32 <bin2hex+0x22>
		tmp = *bin++;           //get a byte
		*hex++ = nib2chr((byte) (tmp / 16));    //convert first nibble
		*hex++ = nib2chr((byte) (tmp % 16));    //convert second nibble
	}
	*hex = 0;
   12b8a:	68fb      	ldr	r3, [r7, #12]
   12b8c:	2200      	movs	r2, #0
   12b8e:	701a      	strb	r2, [r3, #0]
	return ret;
   12b90:	69bb      	ldr	r3, [r7, #24]
}
   12b92:	4618      	mov	r0, r3
   12b94:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12b98:	f2c0 0302 	movt	r3, #2
   12b9c:	69fa      	ldr	r2, [r7, #28]
   12b9e:	681b      	ldr	r3, [r3, #0]
   12ba0:	429a      	cmp	r2, r3
   12ba2:	d001      	beq.n	12ba8 <bin2hex+0x98>
   12ba4:	f7f6 f9fe 	bl	8fa4 <__stack_chk_fail>
   12ba8:	f107 0720 	add.w	r7, r7, #32
   12bac:	46bd      	mov	sp, r7
   12bae:	bd80      	pop	{r7, pc}

00012bb0 <hex2bin>:
 *    - 0 otherwise.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0004.c
 */
int hex2bin(byte * bin, const char *hex, int len) {
   12bb0:	b580      	push	{r7, lr}
   12bb2:	b088      	sub	sp, #32
   12bb4:	af00      	add	r7, sp, #0
   12bb6:	60f8      	str	r0, [r7, #12]
   12bb8:	60b9      	str	r1, [r7, #8]
   12bba:	607a      	str	r2, [r7, #4]
   12bbc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12bc0:	f2c0 0302 	movt	r3, #2
   12bc4:	681b      	ldr	r3, [r3, #0]
   12bc6:	61fb      	str	r3, [r7, #28]

	VERIFY(bin);
	VERIFY(hex);

	//if non-zero, len is the length of acceptor buffer bin
	if(!len) {                  //calcualte length if missing
   12bc8:	687b      	ldr	r3, [r7, #4]
   12bca:	2b00      	cmp	r3, #0
   12bcc:	d104      	bne.n	12bd8 <hex2bin+0x28>
		len = strlen(hex);
   12bce:	68b8      	ldr	r0, [r7, #8]
   12bd0:	f7f6 e858 	blx	8c84 <_init+0x124>
   12bd4:	4603      	mov	r3, r0
   12bd6:	607b      	str	r3, [r7, #4]
		//CHECK(len % 2 == 0, lblKO); //there should be 2 source characters for each output byte
		//len /= 2;
	}
	ret = 0;
   12bd8:	2300      	movs	r3, #0
   12bda:	61bb      	str	r3, [r7, #24]
	while(len--) {
   12bdc:	e02b      	b.n	12c36 <hex2bin+0x86>
		tmp = chr2nib(*hex++);  //get first nibble
   12bde:	68bb      	ldr	r3, [r7, #8]
   12be0:	781b      	ldrb	r3, [r3, #0]
   12be2:	68ba      	ldr	r2, [r7, #8]
   12be4:	3201      	adds	r2, #1
   12be6:	60ba      	str	r2, [r7, #8]
   12be8:	4618      	mov	r0, r3
   12bea:	f7ff fd5f 	bl	126ac <chr2nib>
   12bee:	4603      	mov	r3, r0
   12bf0:	75fb      	strb	r3, [r7, #23]
		if(tmp >= 0x10)
   12bf2:	7dfb      	ldrb	r3, [r7, #23]
   12bf4:	2b0f      	cmp	r3, #15
   12bf6:	d82a      	bhi.n	12c4e <hex2bin+0x9e>
			break;
		*bin = (byte) (tmp << 4);
   12bf8:	7dfb      	ldrb	r3, [r7, #23]
   12bfa:	011b      	lsls	r3, r3, #4
   12bfc:	b2da      	uxtb	r2, r3
   12bfe:	68fb      	ldr	r3, [r7, #12]
   12c00:	701a      	strb	r2, [r3, #0]

		tmp = chr2nib(*hex++);  //get second nibble
   12c02:	68bb      	ldr	r3, [r7, #8]
   12c04:	781b      	ldrb	r3, [r3, #0]
   12c06:	68ba      	ldr	r2, [r7, #8]
   12c08:	3201      	adds	r2, #1
   12c0a:	60ba      	str	r2, [r7, #8]
   12c0c:	4618      	mov	r0, r3
   12c0e:	f7ff fd4d 	bl	126ac <chr2nib>
   12c12:	4603      	mov	r3, r0
   12c14:	75fb      	strb	r3, [r7, #23]
		CHECK(tmp < 0x10, lblKO);
   12c16:	7dfb      	ldrb	r3, [r7, #23]
   12c18:	2b0f      	cmp	r3, #15
   12c1a:	d81b      	bhi.n	12c54 <hex2bin+0xa4>
		*bin |= tmp;
   12c1c:	68fb      	ldr	r3, [r7, #12]
   12c1e:	781a      	ldrb	r2, [r3, #0]
   12c20:	7dfb      	ldrb	r3, [r7, #23]
   12c22:	4313      	orrs	r3, r2
   12c24:	b2da      	uxtb	r2, r3
   12c26:	68fb      	ldr	r3, [r7, #12]
   12c28:	701a      	strb	r2, [r3, #0]

		bin++;
   12c2a:	68fb      	ldr	r3, [r7, #12]
   12c2c:	3301      	adds	r3, #1
   12c2e:	60fb      	str	r3, [r7, #12]
		ret++;
   12c30:	69bb      	ldr	r3, [r7, #24]
   12c32:	3301      	adds	r3, #1
   12c34:	61bb      	str	r3, [r7, #24]
		len = strlen(hex);
		//CHECK(len % 2 == 0, lblKO); //there should be 2 source characters for each output byte
		//len /= 2;
	}
	ret = 0;
	while(len--) {
   12c36:	687b      	ldr	r3, [r7, #4]
   12c38:	2b00      	cmp	r3, #0
   12c3a:	bf0c      	ite	eq
   12c3c:	2300      	moveq	r3, #0
   12c3e:	2301      	movne	r3, #1
   12c40:	b2db      	uxtb	r3, r3
   12c42:	687a      	ldr	r2, [r7, #4]
   12c44:	3a01      	subs	r2, #1
   12c46:	607a      	str	r2, [r7, #4]
   12c48:	2b00      	cmp	r3, #0
   12c4a:	d1c8      	bne.n	12bde <hex2bin+0x2e>
   12c4c:	e000      	b.n	12c50 <hex2bin+0xa0>
		tmp = chr2nib(*hex++);  //get first nibble
		if(tmp >= 0x10)
			break;
   12c4e:	bf00      	nop
		*bin |= tmp;

		bin++;
		ret++;
	}
	return ret;
   12c50:	69bb      	ldr	r3, [r7, #24]
   12c52:	e000      	b.n	12c56 <hex2bin+0xa6>
	lblKO:
	return 0;
   12c54:	2300      	movs	r3, #0
}
   12c56:	4618      	mov	r0, r3
   12c58:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12c5c:	f2c0 0302 	movt	r3, #2
   12c60:	69fa      	ldr	r2, [r7, #28]
   12c62:	681b      	ldr	r3, [r3, #0]
   12c64:	429a      	cmp	r2, r3
   12c66:	d001      	beq.n	12c6c <hex2bin+0xbc>
   12c68:	f7f6 f99c 	bl	8fa4 <__stack_chk_fail>
   12c6c:	f107 0720 	add.w	r7, r7, #32
   12c70:	46bd      	mov	sp, r7
   12c72:	bd80      	pop	{r7, pc}

00012c74 <Hex2Text>:
 *        - hex contains an invalid character (non-hexadecimal digit).
 * \return
 *    - number of bytes written into bin if OK.
 *    - 0 otherwise.
 */
int Hex2Text(char * Text, const char *hex, int len) {
   12c74:	b580      	push	{r7, lr}
   12c76:	b092      	sub	sp, #72	; 0x48
   12c78:	af00      	add	r7, sp, #0
   12c7a:	60f8      	str	r0, [r7, #12]
   12c7c:	60b9      	str	r1, [r7, #8]
   12c7e:	607a      	str	r2, [r7, #4]
   12c80:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12c84:	f2c0 0302 	movt	r3, #2
   12c88:	681b      	ldr	r3, [r3, #0]
   12c8a:	647b      	str	r3, [r7, #68]	; 0x44
	int var = 0;
   12c8c:	2300      	movs	r3, #0
   12c8e:	613b      	str	r3, [r7, #16]
	int length = 0;
   12c90:	2300      	movs	r3, #0
   12c92:	617b      	str	r3, [r7, #20]
	byte binaryData[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };
   12c94:	f107 0318 	add.w	r3, r7, #24
   12c98:	2200      	movs	r2, #0
   12c9a:	601a      	str	r2, [r3, #0]
   12c9c:	3304      	adds	r3, #4
   12c9e:	2200      	movs	r2, #0
   12ca0:	601a      	str	r2, [r3, #0]
   12ca2:	3304      	adds	r3, #4
   12ca4:	2200      	movs	r2, #0
   12ca6:	601a      	str	r2, [r3, #0]
   12ca8:	3304      	adds	r3, #4
   12caa:	2200      	movs	r2, #0
   12cac:	601a      	str	r2, [r3, #0]
   12cae:	3304      	adds	r3, #4
   12cb0:	2200      	movs	r2, #0
   12cb2:	601a      	str	r2, [r3, #0]
   12cb4:	3304      	adds	r3, #4
   12cb6:	2200      	movs	r2, #0
   12cb8:	601a      	str	r2, [r3, #0]
   12cba:	3304      	adds	r3, #4
   12cbc:	2200      	movs	r2, #0
   12cbe:	601a      	str	r2, [r3, #0]
   12cc0:	3304      	adds	r3, #4
   12cc2:	2200      	movs	r2, #0
   12cc4:	601a      	str	r2, [r3, #0]
   12cc6:	3304      	adds	r3, #4
   12cc8:	2200      	movs	r2, #0
   12cca:	601a      	str	r2, [r3, #0]
   12ccc:	3304      	adds	r3, #4
   12cce:	2200      	movs	r2, #0
   12cd0:	601a      	str	r2, [r3, #0]
   12cd2:	3304      	adds	r3, #4
   12cd4:	2200      	movs	r2, #0
   12cd6:	601a      	str	r2, [r3, #0]
   12cd8:	3304      	adds	r3, #4

	if (len == 0)
   12cda:	687b      	ldr	r3, [r7, #4]
   12cdc:	2b00      	cmp	r3, #0
   12cde:	d105      	bne.n	12cec <Hex2Text+0x78>
		length = strlen(hex);
   12ce0:	68b8      	ldr	r0, [r7, #8]
   12ce2:	f7f5 efd0 	blx	8c84 <_init+0x124>
   12ce6:	4603      	mov	r3, r0
   12ce8:	617b      	str	r3, [r7, #20]
   12cea:	e001      	b.n	12cf0 <Hex2Text+0x7c>
	else {
		length = len;
   12cec:	687b      	ldr	r3, [r7, #4]
   12cee:	617b      	str	r3, [r7, #20]
	}

	hex2bin(binaryData, hex, (length / 2));
   12cf0:	697b      	ldr	r3, [r7, #20]
   12cf2:	2b00      	cmp	r3, #0
   12cf4:	da00      	bge.n	12cf8 <Hex2Text+0x84>
   12cf6:	3301      	adds	r3, #1
   12cf8:	105b      	asrs	r3, r3, #1
   12cfa:	f107 0218 	add.w	r2, r7, #24
   12cfe:	4610      	mov	r0, r2
   12d00:	68b9      	ldr	r1, [r7, #8]
   12d02:	461a      	mov	r2, r3
   12d04:	f7ff ff54 	bl	12bb0 <hex2bin>
	for (var = 0; var < (length / 2); var++) {
   12d08:	2300      	movs	r3, #0
   12d0a:	613b      	str	r3, [r7, #16]
   12d0c:	e012      	b.n	12d34 <Hex2Text+0xc0>
		Telium_Sprintf(&Text[var],"%c",binaryData[var]);
   12d0e:	693b      	ldr	r3, [r7, #16]
   12d10:	68fa      	ldr	r2, [r7, #12]
   12d12:	18d2      	adds	r2, r2, r3
   12d14:	f107 0118 	add.w	r1, r7, #24
   12d18:	693b      	ldr	r3, [r7, #16]
   12d1a:	18cb      	adds	r3, r1, r3
   12d1c:	781b      	ldrb	r3, [r3, #0]
   12d1e:	4610      	mov	r0, r2
   12d20:	f644 01e0 	movw	r1, #18656	; 0x48e0
   12d24:	f2c0 0102 	movt	r1, #2
   12d28:	461a      	mov	r2, r3
   12d2a:	f00d fd67 	bl	207fc <Telium_Sprintf>
	else {
		length = len;
	}

	hex2bin(binaryData, hex, (length / 2));
	for (var = 0; var < (length / 2); var++) {
   12d2e:	693b      	ldr	r3, [r7, #16]
   12d30:	3301      	adds	r3, #1
   12d32:	613b      	str	r3, [r7, #16]
   12d34:	697b      	ldr	r3, [r7, #20]
   12d36:	2b00      	cmp	r3, #0
   12d38:	da00      	bge.n	12d3c <Hex2Text+0xc8>
   12d3a:	3301      	adds	r3, #1
   12d3c:	105b      	asrs	r3, r3, #1
   12d3e:	461a      	mov	r2, r3
   12d40:	693b      	ldr	r3, [r7, #16]
   12d42:	429a      	cmp	r2, r3
   12d44:	dce3      	bgt.n	12d0e <Hex2Text+0x9a>
		Telium_Sprintf(&Text[var],"%c",binaryData[var]);
	}

	return var;
   12d46:	693b      	ldr	r3, [r7, #16]
}
   12d48:	4618      	mov	r0, r3
   12d4a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12d4e:	f2c0 0302 	movt	r3, #2
   12d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   12d54:	681b      	ldr	r3, [r3, #0]
   12d56:	429a      	cmp	r2, r3
   12d58:	d001      	beq.n	12d5e <Hex2Text+0xea>
   12d5a:	f7f6 f923 	bl	8fa4 <__stack_chk_fail>
   12d5e:	f107 0748 	add.w	r7, r7, #72	; 0x48
   12d62:	46bd      	mov	sp, r7
   12d64:	bd80      	pop	{r7, pc}
   12d66:	bf00      	nop

00012d68 <bin2num>:
 *    - len. There is no possibility of errors: any input data are acceptable.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0004.c
 */
byte bin2num(card * num, const byte * bin, byte len) {
   12d68:	b580      	push	{r7, lr}
   12d6a:	b086      	sub	sp, #24
   12d6c:	af00      	add	r7, sp, #0
   12d6e:	60f8      	str	r0, [r7, #12]
   12d70:	60b9      	str	r1, [r7, #8]
   12d72:	4613      	mov	r3, r2
   12d74:	71fb      	strb	r3, [r7, #7]
   12d76:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12d7a:	f2c0 0302 	movt	r3, #2
   12d7e:	681b      	ldr	r3, [r3, #0]
   12d80:	617b      	str	r3, [r7, #20]
	VERIFY(bin);
	VERIFY(len);                //there is no way to calculate default value of len
	VERIFY(len <= 4);

	//len is the number of characters to get from source string
	ret = len;
   12d82:	79fb      	ldrb	r3, [r7, #7]
   12d84:	74fb      	strb	r3, [r7, #19]
	*num = 0;
   12d86:	68fb      	ldr	r3, [r7, #12]
   12d88:	2200      	movs	r2, #0
   12d8a:	601a      	str	r2, [r3, #0]
	while(len--) {
   12d8c:	e00e      	b.n	12dac <bin2num+0x44>
		*num *= 256;
   12d8e:	68fb      	ldr	r3, [r7, #12]
   12d90:	681b      	ldr	r3, [r3, #0]
   12d92:	021a      	lsls	r2, r3, #8
   12d94:	68fb      	ldr	r3, [r7, #12]
   12d96:	601a      	str	r2, [r3, #0]
		*num += *bin++;
   12d98:	68fb      	ldr	r3, [r7, #12]
   12d9a:	681a      	ldr	r2, [r3, #0]
   12d9c:	68bb      	ldr	r3, [r7, #8]
   12d9e:	781b      	ldrb	r3, [r3, #0]
   12da0:	18d2      	adds	r2, r2, r3
   12da2:	68fb      	ldr	r3, [r7, #12]
   12da4:	601a      	str	r2, [r3, #0]
   12da6:	68bb      	ldr	r3, [r7, #8]
   12da8:	3301      	adds	r3, #1
   12daa:	60bb      	str	r3, [r7, #8]
	VERIFY(len <= 4);

	//len is the number of characters to get from source string
	ret = len;
	*num = 0;
	while(len--) {
   12dac:	79fb      	ldrb	r3, [r7, #7]
   12dae:	2b00      	cmp	r3, #0
   12db0:	bf0c      	ite	eq
   12db2:	2300      	moveq	r3, #0
   12db4:	2301      	movne	r3, #1
   12db6:	b2db      	uxtb	r3, r3
   12db8:	79fa      	ldrb	r2, [r7, #7]
   12dba:	3a01      	subs	r2, #1
   12dbc:	71fa      	strb	r2, [r7, #7]
   12dbe:	2b00      	cmp	r3, #0
   12dc0:	d1e5      	bne.n	12d8e <bin2num+0x26>
		*num *= 256;
		*num += *bin++;
	}
	return ret;
   12dc2:	7cfb      	ldrb	r3, [r7, #19]
}
   12dc4:	4618      	mov	r0, r3
   12dc6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12dca:	f2c0 0302 	movt	r3, #2
   12dce:	697a      	ldr	r2, [r7, #20]
   12dd0:	681b      	ldr	r3, [r3, #0]
   12dd2:	429a      	cmp	r2, r3
   12dd4:	d001      	beq.n	12dda <bin2num+0x72>
   12dd6:	f7f6 f8e5 	bl	8fa4 <__stack_chk_fail>
   12dda:	f107 0718 	add.w	r7, r7, #24
   12dde:	46bd      	mov	sp, r7
   12de0:	bd80      	pop	{r7, pc}
   12de2:	bf00      	nop

00012de4 <num2bin>:
 *    - 0 otherwise.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0004.c
 */
byte num2bin(byte * bin, card num, byte len) {
   12de4:	b580      	push	{r7, lr}
   12de6:	b086      	sub	sp, #24
   12de8:	af00      	add	r7, sp, #0
   12dea:	60f8      	str	r0, [r7, #12]
   12dec:	60b9      	str	r1, [r7, #8]
   12dee:	4613      	mov	r3, r2
   12df0:	71fb      	strb	r3, [r7, #7]
   12df2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12df6:	f2c0 0302 	movt	r3, #2
   12dfa:	681b      	ldr	r3, [r3, #0]
   12dfc:	617b      	str	r3, [r7, #20]
	VERIFY(bin);
	VERIFY(len);                //there is no way to calculate default value of len
	VERIFY(len <= 4);

	//len is the length of acceptor buffer bib
	ret = len;
   12dfe:	79fb      	ldrb	r3, [r7, #7]
   12e00:	74fb      	strb	r3, [r7, #19]
	while(len--) {              //fill bin from right to left in direct order
   12e02:	e008      	b.n	12e16 <num2bin+0x32>
		bin[len] = (byte) (num % 256);
   12e04:	79fb      	ldrb	r3, [r7, #7]
   12e06:	68fa      	ldr	r2, [r7, #12]
   12e08:	18d3      	adds	r3, r2, r3
   12e0a:	68ba      	ldr	r2, [r7, #8]
   12e0c:	b2d2      	uxtb	r2, r2
   12e0e:	701a      	strb	r2, [r3, #0]
		num /= 256;
   12e10:	68bb      	ldr	r3, [r7, #8]
   12e12:	0a1b      	lsrs	r3, r3, #8
   12e14:	60bb      	str	r3, [r7, #8]
	VERIFY(len);                //there is no way to calculate default value of len
	VERIFY(len <= 4);

	//len is the length of acceptor buffer bib
	ret = len;
	while(len--) {              //fill bin from right to left in direct order
   12e16:	79fb      	ldrb	r3, [r7, #7]
   12e18:	2b00      	cmp	r3, #0
   12e1a:	bf0c      	ite	eq
   12e1c:	2300      	moveq	r3, #0
   12e1e:	2301      	movne	r3, #1
   12e20:	b2db      	uxtb	r3, r3
   12e22:	79fa      	ldrb	r2, [r7, #7]
   12e24:	3a01      	subs	r2, #1
   12e26:	71fa      	strb	r2, [r7, #7]
   12e28:	2b00      	cmp	r3, #0
   12e2a:	d1eb      	bne.n	12e04 <num2bin+0x20>
		bin[len] = (byte) (num % 256);
		num /= 256;
	}
	CHECK(!num, lblKO);         //error: len is too small
   12e2c:	68bb      	ldr	r3, [r7, #8]
   12e2e:	2b00      	cmp	r3, #0
   12e30:	d101      	bne.n	12e36 <num2bin+0x52>
	return ret;
   12e32:	7cfb      	ldrb	r3, [r7, #19]
   12e34:	e000      	b.n	12e38 <num2bin+0x54>
	lblKO:
	return 0;
   12e36:	2300      	movs	r3, #0
}
   12e38:	4618      	mov	r0, r3
   12e3a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12e3e:	f2c0 0302 	movt	r3, #2
   12e42:	697a      	ldr	r2, [r7, #20]
   12e44:	681b      	ldr	r3, [r3, #0]
   12e46:	429a      	cmp	r2, r3
   12e48:	d001      	beq.n	12e4e <num2bin+0x6a>
   12e4a:	f7f6 f8ab 	bl	8fa4 <__stack_chk_fail>
   12e4e:	f107 0718 	add.w	r7, r7, #24
   12e52:	46bd      	mov	sp, r7
   12e54:	bd80      	pop	{r7, pc}
   12e56:	bf00      	nop

00012e58 <tmrStart>:
 * \return non-negative value if OK; negative otherwise
 * \header sys\\sys.h
 * \source sys\\i32.c sys\\tlm.c
 * \test tcab0001.c
 */
int tmrStart(byte tmr, int dly) {
   12e58:	b580      	push	{r7, lr}
   12e5a:	b086      	sub	sp, #24
   12e5c:	af00      	add	r7, sp, #0
   12e5e:	4603      	mov	r3, r0
   12e60:	6039      	str	r1, [r7, #0]
   12e62:	71fb      	strb	r3, [r7, #7]
   12e64:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12e68:	f2c0 0302 	movt	r3, #2
   12e6c:	681b      	ldr	r3, [r3, #0]
   12e6e:	617b      	str	r3, [r7, #20]
	tTimer cnt;

	VERIFY(tmr < tmrN);

	/* Get the current timer value */
	cnt.hi = 0;
   12e70:	2300      	movs	r3, #0
   12e72:	60fb      	str	r3, [r7, #12]
	//    cnt.lo = get_tick_counter();    // In 10ms ticks.
	cnt.lo = GTL_StdTimer_GetCurrent();
   12e74:	f00f f98e 	bl	22194 <GTL_StdTimer_GetCurrent>
   12e78:	4603      	mov	r3, r0
   12e7a:	613b      	str	r3, [r7, #16]

	/* Set the timer a 'period' into the future */
	cnt.lo += dly;
   12e7c:	693a      	ldr	r2, [r7, #16]
   12e7e:	683b      	ldr	r3, [r7, #0]
   12e80:	18d3      	adds	r3, r2, r3
   12e82:	613b      	str	r3, [r7, #16]

	/* If an overflow occurs, adjust the high tick counter */
	//if ((unsigned int)dly > (0xffffffffL - cnt.lo))
	if(cnt.lo < (card) dly)
   12e84:	693a      	ldr	r2, [r7, #16]
   12e86:	683b      	ldr	r3, [r7, #0]
   12e88:	429a      	cmp	r2, r3
   12e8a:	d202      	bcs.n	12e92 <tmrStart+0x3a>
		(cnt.hi)++;
   12e8c:	68fb      	ldr	r3, [r7, #12]
   12e8e:	3301      	adds	r3, #1
   12e90:	60fb      	str	r3, [r7, #12]

	/* Assign it to the proper timer */
	timer[tmr].hi = cnt.hi;
   12e92:	79fa      	ldrb	r2, [r7, #7]
   12e94:	68f9      	ldr	r1, [r7, #12]
   12e96:	f64f 73b8 	movw	r3, #65464	; 0xffb8
   12e9a:	f2c0 0302 	movt	r3, #2
   12e9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	timer[tmr].lo = cnt.lo;
   12ea2:	79fb      	ldrb	r3, [r7, #7]
   12ea4:	6939      	ldr	r1, [r7, #16]
   12ea6:	f64f 72b8 	movw	r2, #65464	; 0xffb8
   12eaa:	f2c0 0202 	movt	r2, #2
   12eae:	00db      	lsls	r3, r3, #3
   12eb0:	18d3      	adds	r3, r2, r3
   12eb2:	6059      	str	r1, [r3, #4]

	return dly;
   12eb4:	683b      	ldr	r3, [r7, #0]
}
   12eb6:	4618      	mov	r0, r3
   12eb8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12ebc:	f2c0 0302 	movt	r3, #2
   12ec0:	697a      	ldr	r2, [r7, #20]
   12ec2:	681b      	ldr	r3, [r3, #0]
   12ec4:	429a      	cmp	r2, r3
   12ec6:	d001      	beq.n	12ecc <tmrStart+0x74>
   12ec8:	f7f6 f86c 	bl	8fa4 <__stack_chk_fail>
   12ecc:	f107 0718 	add.w	r7, r7, #24
   12ed0:	46bd      	mov	sp, r7
   12ed2:	bd80      	pop	{r7, pc}

00012ed4 <tmrGet>:
 *    - otherwise the number of centiseconds rest.
 * \header sys\\sys.h
 * \source sys\\i32.c sys\\tlm.c
 * \test tcab0001.c
 */
int tmrGet(byte tmr) {
   12ed4:	b580      	push	{r7, lr}
   12ed6:	b086      	sub	sp, #24
   12ed8:	af00      	add	r7, sp, #0
   12eda:	4603      	mov	r3, r0
   12edc:	71fb      	strb	r3, [r7, #7]
   12ede:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12ee2:	f2c0 0302 	movt	r3, #2
   12ee6:	681b      	ldr	r3, [r3, #0]
   12ee8:	617b      	str	r3, [r7, #20]
	tTimer cnt;

	VERIFY(tmr < 4);

	/* Get the new time */
	cnt.hi = timer[tmr].hi;
   12eea:	79fa      	ldrb	r2, [r7, #7]
   12eec:	f64f 73b8 	movw	r3, #65464	; 0xffb8
   12ef0:	f2c0 0302 	movt	r3, #2
   12ef4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   12ef8:	60fb      	str	r3, [r7, #12]
	cnt.lo = timer[tmr].lo;
   12efa:	79fb      	ldrb	r3, [r7, #7]
   12efc:	f64f 72b8 	movw	r2, #65464	; 0xffb8
   12f00:	f2c0 0202 	movt	r2, #2
   12f04:	00db      	lsls	r3, r3, #3
   12f06:	18d3      	adds	r3, r2, r3
   12f08:	685b      	ldr	r3, [r3, #4]
   12f0a:	613b      	str	r3, [r7, #16]

	lo = GTL_StdTimer_GetCurrent();  //telium_get_tick_counter() ;    // In 10ms ticks.
   12f0c:	f00f f942 	bl	22194 <GTL_StdTimer_GetCurrent>
   12f10:	60b8      	str	r0, [r7, #8]

	if(lo < cnt.lo)
   12f12:	693a      	ldr	r2, [r7, #16]
   12f14:	68bb      	ldr	r3, [r7, #8]
   12f16:	429a      	cmp	r2, r3
   12f18:	d903      	bls.n	12f22 <tmrGet+0x4e>
		return (cnt.lo - lo);
   12f1a:	693a      	ldr	r2, [r7, #16]
   12f1c:	68bb      	ldr	r3, [r7, #8]
   12f1e:	1ad3      	subs	r3, r2, r3
   12f20:	e000      	b.n	12f24 <tmrGet+0x50>
	return 0;
   12f22:	2300      	movs	r3, #0
}
   12f24:	4618      	mov	r0, r3
   12f26:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12f2a:	f2c0 0302 	movt	r3, #2
   12f2e:	697a      	ldr	r2, [r7, #20]
   12f30:	681b      	ldr	r3, [r3, #0]
   12f32:	429a      	cmp	r2, r3
   12f34:	d001      	beq.n	12f3a <tmrGet+0x66>
   12f36:	f7f6 f835 	bl	8fa4 <__stack_chk_fail>
   12f3a:	f107 0718 	add.w	r7, r7, #24
   12f3e:	46bd      	mov	sp, r7
   12f40:	bd80      	pop	{r7, pc}
   12f42:	bf00      	nop

00012f44 <tmrStop>:
 * \return no
 * \header sys\\sys.h
 * \source sys\\i32.c sys\\tlm.c
 * \test tcab0001.c
 */
void tmrStop(byte tmr) {
   12f44:	b580      	push	{r7, lr}
   12f46:	b084      	sub	sp, #16
   12f48:	af00      	add	r7, sp, #0
   12f4a:	4603      	mov	r3, r0
   12f4c:	71fb      	strb	r3, [r7, #7]
   12f4e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12f52:	f2c0 0302 	movt	r3, #2
   12f56:	681b      	ldr	r3, [r3, #0]
   12f58:	60fb      	str	r3, [r7, #12]
	VERIFY(tmr < 4);
	timer[tmr].hi = 0;
   12f5a:	79fa      	ldrb	r2, [r7, #7]
   12f5c:	f64f 73b8 	movw	r3, #65464	; 0xffb8
   12f60:	f2c0 0302 	movt	r3, #2
   12f64:	2100      	movs	r1, #0
   12f66:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	timer[tmr].lo = 0;
   12f6a:	79fb      	ldrb	r3, [r7, #7]
   12f6c:	f64f 72b8 	movw	r2, #65464	; 0xffb8
   12f70:	f2c0 0202 	movt	r2, #2
   12f74:	00db      	lsls	r3, r3, #3
   12f76:	18d3      	adds	r3, r2, r3
   12f78:	2200      	movs	r2, #0
   12f7a:	605a      	str	r2, [r3, #4]
}
   12f7c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12f80:	f2c0 0302 	movt	r3, #2
   12f84:	68fa      	ldr	r2, [r7, #12]
   12f86:	681b      	ldr	r3, [r3, #0]
   12f88:	429a      	cmp	r2, r3
   12f8a:	d001      	beq.n	12f90 <tmrStop+0x4c>
   12f8c:	f7f6 f80a 	bl	8fa4 <__stack_chk_fail>
   12f90:	f107 0710 	add.w	r7, r7, #16
   12f94:	46bd      	mov	sp, r7
   12f96:	bd80      	pop	{r7, pc}

00012f98 <tmrPause>:

void tmrPause(byte sec) {
   12f98:	b580      	push	{r7, lr}
   12f9a:	b084      	sub	sp, #16
   12f9c:	af00      	add	r7, sp, #0
   12f9e:	4603      	mov	r3, r0
   12fa0:	71fb      	strb	r3, [r7, #7]
   12fa2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12fa6:	f2c0 0302 	movt	r3, #2
   12faa:	681b      	ldr	r3, [r3, #0]
   12fac:	60fb      	str	r3, [r7, #12]
	tmrStart(0, sec * 100);     //start 0th timer for sec seconds
   12fae:	79fb      	ldrb	r3, [r7, #7]
   12fb0:	2264      	movs	r2, #100	; 0x64
   12fb2:	fb02 f303 	mul.w	r3, r2, r3
   12fb6:	2000      	movs	r0, #0
   12fb8:	4619      	mov	r1, r3
   12fba:	f7ff ff4d 	bl	12e58 <tmrStart>
	while(tmrGet(0));           //wait until the 0th timer stops
   12fbe:	bf00      	nop
   12fc0:	2000      	movs	r0, #0
   12fc2:	f7ff ff87 	bl	12ed4 <tmrGet>
   12fc6:	4603      	mov	r3, r0
   12fc8:	2b00      	cmp	r3, #0
   12fca:	d1f9      	bne.n	12fc0 <tmrPause+0x28>
	tmrStop(0);                 //close the 0th timer
   12fcc:	2000      	movs	r0, #0
   12fce:	f7ff ffb9 	bl	12f44 <tmrStop>
}
   12fd2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12fd6:	f2c0 0302 	movt	r3, #2
   12fda:	68fa      	ldr	r2, [r7, #12]
   12fdc:	681b      	ldr	r3, [r3, #0]
   12fde:	429a      	cmp	r2, r3
   12fe0:	d001      	beq.n	12fe6 <tmrPause+0x4e>
   12fe2:	f7f5 ffdf 	bl	8fa4 <__stack_chk_fail>
   12fe6:	f107 0710 	add.w	r7, r7, #16
   12fea:	46bd      	mov	sp, r7
   12fec:	bd80      	pop	{r7, pc}
   12fee:	bf00      	nop

00012ff0 <bufReset>:
 * \return N/A
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 **/
void bufReset(tBuffer * buf) {
   12ff0:	b580      	push	{r7, lr}
   12ff2:	b084      	sub	sp, #16
   12ff4:	af00      	add	r7, sp, #0
   12ff6:	6078      	str	r0, [r7, #4]
   12ff8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   12ffc:	f2c0 0302 	movt	r3, #2
   13000:	681b      	ldr	r3, [r3, #0]
   13002:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	VERIFY(buf->ptr);
	VERIFY(buf->dim);

	memset(buf->ptr, 0, buf->dim);
   13004:	687b      	ldr	r3, [r7, #4]
   13006:	681a      	ldr	r2, [r3, #0]
   13008:	687b      	ldr	r3, [r7, #4]
   1300a:	889b      	ldrh	r3, [r3, #4]
   1300c:	4610      	mov	r0, r2
   1300e:	2100      	movs	r1, #0
   13010:	461a      	mov	r2, r3
   13012:	f7f5 edd4 	blx	8bbc <_init+0x5c>
	buf->pos = 0;
   13016:	687b      	ldr	r3, [r7, #4]
   13018:	2200      	movs	r2, #0
   1301a:	80da      	strh	r2, [r3, #6]
}
   1301c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13020:	f2c0 0302 	movt	r3, #2
   13024:	68fa      	ldr	r2, [r7, #12]
   13026:	681b      	ldr	r3, [r3, #0]
   13028:	429a      	cmp	r2, r3
   1302a:	d001      	beq.n	13030 <bufReset+0x40>
   1302c:	f7f5 ffba 	bl	8fa4 <__stack_chk_fail>
   13030:	f107 0710 	add.w	r7, r7, #16
   13034:	46bd      	mov	sp, r7
   13036:	bd80      	pop	{r7, pc}

00013038 <bufInit>:
 * \return N/A
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 */
void bufInit(tBuffer * buf, byte * ptr, word dim) {
   13038:	b580      	push	{r7, lr}
   1303a:	b086      	sub	sp, #24
   1303c:	af00      	add	r7, sp, #0
   1303e:	60f8      	str	r0, [r7, #12]
   13040:	60b9      	str	r1, [r7, #8]
   13042:	4613      	mov	r3, r2
   13044:	80fb      	strh	r3, [r7, #6]
   13046:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1304a:	f2c0 0302 	movt	r3, #2
   1304e:	681b      	ldr	r3, [r3, #0]
   13050:	617b      	str	r3, [r7, #20]
	VERIFY(buf);
	VERIFY(ptr);
	VERIFY(dim);
	buf->ptr = ptr;
   13052:	68fb      	ldr	r3, [r7, #12]
   13054:	68ba      	ldr	r2, [r7, #8]
   13056:	601a      	str	r2, [r3, #0]
	buf->dim = dim;
   13058:	68fb      	ldr	r3, [r7, #12]
   1305a:	88fa      	ldrh	r2, [r7, #6]
   1305c:	809a      	strh	r2, [r3, #4]
	buf->pos = 0;
   1305e:	68fb      	ldr	r3, [r7, #12]
   13060:	2200      	movs	r2, #0
   13062:	80da      	strh	r2, [r3, #6]

	bufReset(buf);
   13064:	68f8      	ldr	r0, [r7, #12]
   13066:	f7ff ffc3 	bl	12ff0 <bufReset>
}
   1306a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1306e:	f2c0 0302 	movt	r3, #2
   13072:	697a      	ldr	r2, [r7, #20]
   13074:	681b      	ldr	r3, [r3, #0]
   13076:	429a      	cmp	r2, r3
   13078:	d001      	beq.n	1307e <bufInit+0x46>
   1307a:	f7f5 ff93 	bl	8fa4 <__stack_chk_fail>
   1307e:	f107 0718 	add.w	r7, r7, #24
   13082:	46bd      	mov	sp, r7
   13084:	bd80      	pop	{r7, pc}
   13086:	bf00      	nop

00013088 <bufDim>:
 * \return buffer dimension
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 */
word bufDim(const tBuffer * buf) {
   13088:	b580      	push	{r7, lr}
   1308a:	b084      	sub	sp, #16
   1308c:	af00      	add	r7, sp, #0
   1308e:	6078      	str	r0, [r7, #4]
   13090:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13094:	f2c0 0302 	movt	r3, #2
   13098:	681b      	ldr	r3, [r3, #0]
   1309a:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	VERIFY(buf->dim);
	return buf->dim;
   1309c:	687b      	ldr	r3, [r7, #4]
   1309e:	889b      	ldrh	r3, [r3, #4]
}
   130a0:	4618      	mov	r0, r3
   130a2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   130a6:	f2c0 0302 	movt	r3, #2
   130aa:	68fa      	ldr	r2, [r7, #12]
   130ac:	681b      	ldr	r3, [r3, #0]
   130ae:	429a      	cmp	r2, r3
   130b0:	d001      	beq.n	130b6 <bufDim+0x2e>
   130b2:	f7f5 ff77 	bl	8fa4 <__stack_chk_fail>
   130b6:	f107 0710 	add.w	r7, r7, #16
   130ba:	46bd      	mov	sp, r7
   130bc:	bd80      	pop	{r7, pc}
   130be:	bf00      	nop

000130c0 <bufPtr>:
 * \return pointer to the buffer data
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 */
const byte *bufPtr(const tBuffer * buf) {
   130c0:	b580      	push	{r7, lr}
   130c2:	b084      	sub	sp, #16
   130c4:	af00      	add	r7, sp, #0
   130c6:	6078      	str	r0, [r7, #4]
   130c8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   130cc:	f2c0 0302 	movt	r3, #2
   130d0:	681b      	ldr	r3, [r3, #0]
   130d2:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	VERIFY(buf->ptr);
	return buf->ptr;
   130d4:	687b      	ldr	r3, [r7, #4]
   130d6:	681b      	ldr	r3, [r3, #0]
}
   130d8:	4618      	mov	r0, r3
   130da:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   130de:	f2c0 0302 	movt	r3, #2
   130e2:	68fa      	ldr	r2, [r7, #12]
   130e4:	681b      	ldr	r3, [r3, #0]
   130e6:	429a      	cmp	r2, r3
   130e8:	d001      	beq.n	130ee <bufPtr+0x2e>
   130ea:	f7f5 ff5b 	bl	8fa4 <__stack_chk_fail>
   130ee:	f107 0710 	add.w	r7, r7, #16
   130f2:	46bd      	mov	sp, r7
   130f4:	bd80      	pop	{r7, pc}
   130f6:	bf00      	nop

000130f8 <bufLen>:
 * \return current buffer position
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 **/
word bufLen(const tBuffer * buf) {
   130f8:	b580      	push	{r7, lr}
   130fa:	b084      	sub	sp, #16
   130fc:	af00      	add	r7, sp, #0
   130fe:	6078      	str	r0, [r7, #4]
   13100:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13104:	f2c0 0302 	movt	r3, #2
   13108:	681b      	ldr	r3, [r3, #0]
   1310a:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	return buf->pos;
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	88db      	ldrh	r3, [r3, #6]
}
   13110:	4618      	mov	r0, r3
   13112:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13116:	f2c0 0302 	movt	r3, #2
   1311a:	68fa      	ldr	r2, [r7, #12]
   1311c:	681b      	ldr	r3, [r3, #0]
   1311e:	429a      	cmp	r2, r3
   13120:	d001      	beq.n	13126 <bufLen+0x2e>
   13122:	f7f5 ff3f 	bl	8fa4 <__stack_chk_fail>
   13126:	f107 0710 	add.w	r7, r7, #16
   1312a:	46bd      	mov	sp, r7
   1312c:	bd80      	pop	{r7, pc}
   1312e:	bf00      	nop

00013130 <bufSet>:
 * \return current buffer position if OK; negative if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 **/
int bufSet(tBuffer * buf, byte val, word num) {
   13130:	b580      	push	{r7, lr}
   13132:	b084      	sub	sp, #16
   13134:	af00      	add	r7, sp, #0
   13136:	6078      	str	r0, [r7, #4]
   13138:	4613      	mov	r3, r2
   1313a:	460a      	mov	r2, r1
   1313c:	70fa      	strb	r2, [r7, #3]
   1313e:	803b      	strh	r3, [r7, #0]
   13140:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13144:	f2c0 0302 	movt	r3, #2
   13148:	681b      	ldr	r3, [r3, #0]
   1314a:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	VERIFY(buf->ptr);
	VERIFY(buf->dim);

	CHECK(buf->pos + num <= buf->dim, lblKO);
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	88db      	ldrh	r3, [r3, #6]
   13150:	461a      	mov	r2, r3
   13152:	883b      	ldrh	r3, [r7, #0]
   13154:	18d2      	adds	r2, r2, r3
   13156:	687b      	ldr	r3, [r7, #4]
   13158:	889b      	ldrh	r3, [r3, #4]
   1315a:	429a      	cmp	r2, r3
   1315c:	dc15      	bgt.n	1318a <bufSet+0x5a>
	memset(buf->ptr + buf->pos, val, num);
   1315e:	687b      	ldr	r3, [r7, #4]
   13160:	681a      	ldr	r2, [r3, #0]
   13162:	687b      	ldr	r3, [r7, #4]
   13164:	88db      	ldrh	r3, [r3, #6]
   13166:	18d1      	adds	r1, r2, r3
   13168:	78fa      	ldrb	r2, [r7, #3]
   1316a:	883b      	ldrh	r3, [r7, #0]
   1316c:	4608      	mov	r0, r1
   1316e:	4611      	mov	r1, r2
   13170:	461a      	mov	r2, r3
   13172:	f7f5 ed24 	blx	8bbc <_init+0x5c>
	buf->pos += num;
   13176:	687b      	ldr	r3, [r7, #4]
   13178:	88da      	ldrh	r2, [r3, #6]
   1317a:	883b      	ldrh	r3, [r7, #0]
   1317c:	18d3      	adds	r3, r2, r3
   1317e:	b29a      	uxth	r2, r3
   13180:	687b      	ldr	r3, [r7, #4]
   13182:	80da      	strh	r2, [r3, #6]
	return buf->pos;
   13184:	687b      	ldr	r3, [r7, #4]
   13186:	88db      	ldrh	r3, [r3, #6]
   13188:	e001      	b.n	1318e <bufSet+0x5e>
	lblKO:return -1;
   1318a:	f04f 33ff 	mov.w	r3, #4294967295
}
   1318e:	4618      	mov	r0, r3
   13190:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13194:	f2c0 0302 	movt	r3, #2
   13198:	68fa      	ldr	r2, [r7, #12]
   1319a:	681b      	ldr	r3, [r3, #0]
   1319c:	429a      	cmp	r2, r3
   1319e:	d001      	beq.n	131a4 <bufSet+0x74>
   131a0:	f7f5 ff00 	bl	8fa4 <__stack_chk_fail>
   131a4:	f107 0710 	add.w	r7, r7, #16
   131a8:	46bd      	mov	sp, r7
   131aa:	bd80      	pop	{r7, pc}

000131ac <bufIns>:
 * \return current buffer position if OK; negative if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 */
int bufIns(tBuffer * buf, word ofs, const byte * dat, int len) {
   131ac:	b580      	push	{r7, lr}
   131ae:	b086      	sub	sp, #24
   131b0:	af00      	add	r7, sp, #0
   131b2:	60f8      	str	r0, [r7, #12]
   131b4:	607a      	str	r2, [r7, #4]
   131b6:	603b      	str	r3, [r7, #0]
   131b8:	460b      	mov	r3, r1
   131ba:	817b      	strh	r3, [r7, #10]
   131bc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   131c0:	f2c0 0302 	movt	r3, #2
   131c4:	681b      	ldr	r3, [r3, #0]
   131c6:	617b      	str	r3, [r7, #20]
	VERIFY(buf);
	VERIFY(buf->ptr);
	VERIFY(buf->dim);
	VERIFY(ofs <= buf->pos);

	num = (word) len;           //number of bytes from dat to operate
   131c8:	683b      	ldr	r3, [r7, #0]
   131ca:	827b      	strh	r3, [r7, #18]
	if(len <= 0) {              //calculate it if a special case
   131cc:	683b      	ldr	r3, [r7, #0]
   131ce:	2b00      	cmp	r3, #0
   131d0:	dc04      	bgt.n	131dc <bufIns+0x30>
		VERIFY(len >= -1);
		num = (word) strlen((char *) dat);
   131d2:	6878      	ldr	r0, [r7, #4]
   131d4:	f7f5 ed56 	blx	8c84 <_init+0x124>
   131d8:	4603      	mov	r3, r0
   131da:	827b      	strh	r3, [r7, #18]
	}

	CHECK(buf->pos + num <= buf->dim, lblKO);   //is there enough space?
   131dc:	68fb      	ldr	r3, [r7, #12]
   131de:	88db      	ldrh	r3, [r3, #6]
   131e0:	461a      	mov	r2, r3
   131e2:	8a7b      	ldrh	r3, [r7, #18]
   131e4:	18d2      	adds	r2, r2, r3
   131e6:	68fb      	ldr	r3, [r7, #12]
   131e8:	889b      	ldrh	r3, [r3, #4]
   131ea:	429a      	cmp	r2, r3
   131ec:	dc42      	bgt.n	13274 <bufIns+0xc8>
	if(!len) {                  //special case: add zero at the end
   131ee:	683b      	ldr	r3, [r7, #0]
   131f0:	2b00      	cmp	r3, #0
   131f2:	d108      	bne.n	13206 <bufIns+0x5a>
		VERIFY(ofs == buf->pos);    //adding ending zero is valid only in case of append
		CHECK(buf->pos + num < buf->dim, lblKO);
   131f4:	68fb      	ldr	r3, [r7, #12]
   131f6:	88db      	ldrh	r3, [r3, #6]
   131f8:	461a      	mov	r2, r3
   131fa:	8a7b      	ldrh	r3, [r7, #18]
   131fc:	18d2      	adds	r2, r2, r3
   131fe:	68fb      	ldr	r3, [r7, #12]
   13200:	889b      	ldrh	r3, [r3, #4]
   13202:	429a      	cmp	r2, r3
   13204:	da36      	bge.n	13274 <bufIns+0xc8>
	}

	if(ofs != buf->pos) {       //if not at the end, the data will be inserted
   13206:	68fb      	ldr	r3, [r7, #12]
   13208:	88db      	ldrh	r3, [r3, #6]
   1320a:	897a      	ldrh	r2, [r7, #10]
   1320c:	429a      	cmp	r2, r3
   1320e:	d013      	beq.n	13238 <bufIns+0x8c>
		memmove(buf->ptr + ofs + num, buf->ptr + ofs, buf->pos - ofs);
   13210:	68fb      	ldr	r3, [r7, #12]
   13212:	681a      	ldr	r2, [r3, #0]
   13214:	8979      	ldrh	r1, [r7, #10]
   13216:	8a7b      	ldrh	r3, [r7, #18]
   13218:	18cb      	adds	r3, r1, r3
   1321a:	18d1      	adds	r1, r2, r3
   1321c:	68fb      	ldr	r3, [r7, #12]
   1321e:	681a      	ldr	r2, [r3, #0]
   13220:	897b      	ldrh	r3, [r7, #10]
   13222:	18d2      	adds	r2, r2, r3
   13224:	68fb      	ldr	r3, [r7, #12]
   13226:	88db      	ldrh	r3, [r3, #6]
   13228:	4618      	mov	r0, r3
   1322a:	897b      	ldrh	r3, [r7, #10]
   1322c:	1ac3      	subs	r3, r0, r3
   1322e:	4608      	mov	r0, r1
   13230:	4611      	mov	r1, r2
   13232:	461a      	mov	r2, r3
   13234:	f7f5 ece0 	blx	8bf8 <_init+0x98>
	}

	memcpy(buf->ptr + ofs, dat, num);   //now perform the copy operation
   13238:	68fb      	ldr	r3, [r7, #12]
   1323a:	681a      	ldr	r2, [r3, #0]
   1323c:	897b      	ldrh	r3, [r7, #10]
   1323e:	18d2      	adds	r2, r2, r3
   13240:	8a7b      	ldrh	r3, [r7, #18]
   13242:	4610      	mov	r0, r2
   13244:	6879      	ldr	r1, [r7, #4]
   13246:	461a      	mov	r2, r3
   13248:	f7f5 ed16 	blx	8c78 <_init+0x118>
	buf->pos += num;            //and move current position
   1324c:	68fb      	ldr	r3, [r7, #12]
   1324e:	88da      	ldrh	r2, [r3, #6]
   13250:	8a7b      	ldrh	r3, [r7, #18]
   13252:	18d3      	adds	r3, r2, r3
   13254:	b29a      	uxth	r2, r3
   13256:	68fb      	ldr	r3, [r7, #12]
   13258:	80da      	strh	r2, [r3, #6]
	if(!len) {                  //for the special case append zero
   1325a:	683b      	ldr	r3, [r7, #0]
   1325c:	2b00      	cmp	r3, #0
   1325e:	d106      	bne.n	1326e <bufIns+0xc2>
		VERIFY(buf->pos < buf->dim);
		buf->ptr[buf->pos] = 0;
   13260:	68fb      	ldr	r3, [r7, #12]
   13262:	681a      	ldr	r2, [r3, #0]
   13264:	68fb      	ldr	r3, [r7, #12]
   13266:	88db      	ldrh	r3, [r3, #6]
   13268:	18d3      	adds	r3, r2, r3
   1326a:	2200      	movs	r2, #0
   1326c:	701a      	strb	r2, [r3, #0]
	}

	return buf->pos;
   1326e:	68fb      	ldr	r3, [r7, #12]
   13270:	88db      	ldrh	r3, [r3, #6]
   13272:	e001      	b.n	13278 <bufIns+0xcc>
	lblKO:return -1;
   13274:	f04f 33ff 	mov.w	r3, #4294967295
}
   13278:	4618      	mov	r0, r3
   1327a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1327e:	f2c0 0302 	movt	r3, #2
   13282:	697a      	ldr	r2, [r7, #20]
   13284:	681b      	ldr	r3, [r3, #0]
   13286:	429a      	cmp	r2, r3
   13288:	d001      	beq.n	1328e <bufIns+0xe2>
   1328a:	f7f5 fe8b 	bl	8fa4 <__stack_chk_fail>
   1328e:	f107 0718 	add.w	r7, r7, #24
   13292:	46bd      	mov	sp, r7
   13294:	bd80      	pop	{r7, pc}
   13296:	bf00      	nop

00013298 <bufOwr>:
 * \return current buffer position if OK; -1 if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 */
int bufOwr(tBuffer * buf, word ofs, const byte * dat, int len) {
   13298:	b580      	push	{r7, lr}
   1329a:	b088      	sub	sp, #32
   1329c:	af00      	add	r7, sp, #0
   1329e:	60f8      	str	r0, [r7, #12]
   132a0:	607a      	str	r2, [r7, #4]
   132a2:	603b      	str	r3, [r7, #0]
   132a4:	460b      	mov	r3, r1
   132a6:	817b      	strh	r3, [r7, #10]
   132a8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   132ac:	f2c0 0302 	movt	r3, #2
   132b0:	681b      	ldr	r3, [r3, #0]
   132b2:	61fb      	str	r3, [r7, #28]
	int ret;
	word oldPos;

	VERIFY(buf);

	oldPos = buf->pos;
   132b4:	68fb      	ldr	r3, [r7, #12]
   132b6:	88db      	ldrh	r3, [r3, #6]
   132b8:	82fb      	strh	r3, [r7, #22]
	buf->pos = ofs;
   132ba:	68fb      	ldr	r3, [r7, #12]
   132bc:	897a      	ldrh	r2, [r7, #10]
   132be:	80da      	strh	r2, [r3, #6]

	ret = bufIns(buf, ofs, dat, len);
   132c0:	897b      	ldrh	r3, [r7, #10]
   132c2:	68f8      	ldr	r0, [r7, #12]
   132c4:	4619      	mov	r1, r3
   132c6:	687a      	ldr	r2, [r7, #4]
   132c8:	683b      	ldr	r3, [r7, #0]
   132ca:	f7ff ff6f 	bl	131ac <bufIns>
   132ce:	61b8      	str	r0, [r7, #24]
	CHECK(ret != -1, lblKO);
   132d0:	69bb      	ldr	r3, [r7, #24]
   132d2:	f1b3 3fff 	cmp.w	r3, #4294967295
   132d6:	d00a      	beq.n	132ee <bufOwr+0x56>

	if(oldPos > buf->pos) {
   132d8:	68fb      	ldr	r3, [r7, #12]
   132da:	88db      	ldrh	r3, [r3, #6]
   132dc:	8afa      	ldrh	r2, [r7, #22]
   132de:	429a      	cmp	r2, r3
   132e0:	d902      	bls.n	132e8 <bufOwr+0x50>
		buf->pos = oldPos;
   132e2:	68fb      	ldr	r3, [r7, #12]
   132e4:	8afa      	ldrh	r2, [r7, #22]
   132e6:	80da      	strh	r2, [r3, #6]
	}

	return buf->pos;
   132e8:	68fb      	ldr	r3, [r7, #12]
   132ea:	88db      	ldrh	r3, [r3, #6]
   132ec:	e004      	b.n	132f8 <bufOwr+0x60>

	lblKO:
	// bufIns failed : restore the original position
	buf->pos = oldPos;
   132ee:	68fb      	ldr	r3, [r7, #12]
   132f0:	8afa      	ldrh	r2, [r7, #22]
   132f2:	80da      	strh	r2, [r3, #6]
	return -1;
   132f4:	f04f 33ff 	mov.w	r3, #4294967295
}
   132f8:	4618      	mov	r0, r3
   132fa:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   132fe:	f2c0 0302 	movt	r3, #2
   13302:	69fa      	ldr	r2, [r7, #28]
   13304:	681b      	ldr	r3, [r3, #0]
   13306:	429a      	cmp	r2, r3
   13308:	d001      	beq.n	1330e <bufOwr+0x76>
   1330a:	f7f5 fe4b 	bl	8fa4 <__stack_chk_fail>
   1330e:	f107 0720 	add.w	r7, r7, #32
   13312:	46bd      	mov	sp, r7
   13314:	bd80      	pop	{r7, pc}
   13316:	bf00      	nop

00013318 <bufDel>:
 * \return current buffer position
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcgs0021.c
 */
int bufDel(tBuffer * buf, word ofs, int len) {
   13318:	b580      	push	{r7, lr}
   1331a:	b086      	sub	sp, #24
   1331c:	af00      	add	r7, sp, #0
   1331e:	60f8      	str	r0, [r7, #12]
   13320:	460b      	mov	r3, r1
   13322:	607a      	str	r2, [r7, #4]
   13324:	817b      	strh	r3, [r7, #10]
   13326:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1332a:	f2c0 0302 	movt	r3, #2
   1332e:	681b      	ldr	r3, [r3, #0]
   13330:	617b      	str	r3, [r7, #20]
	VERIFY(buf->ptr);
	VERIFY(buf->dim);
	VERIFY(ofs <= buf->pos);
	VERIFY(len >= 0);

	if(len == 0 || (ofs + len > buf->pos)) {    //"erase" all after ofs
   13332:	687b      	ldr	r3, [r7, #4]
   13334:	2b00      	cmp	r3, #0
   13336:	d006      	beq.n	13346 <bufDel+0x2e>
   13338:	897a      	ldrh	r2, [r7, #10]
   1333a:	687b      	ldr	r3, [r7, #4]
   1333c:	18d2      	adds	r2, r2, r3
   1333e:	68fb      	ldr	r3, [r7, #12]
   13340:	88db      	ldrh	r3, [r3, #6]
   13342:	429a      	cmp	r2, r3
   13344:	dd05      	ble.n	13352 <bufDel+0x3a>
		buf->pos = ofs;
   13346:	68fb      	ldr	r3, [r7, #12]
   13348:	897a      	ldrh	r2, [r7, #10]
   1334a:	80da      	strh	r2, [r3, #6]
		return buf->pos;
   1334c:	68fb      	ldr	r3, [r7, #12]
   1334e:	88db      	ldrh	r3, [r3, #6]
   13350:	e01f      	b.n	13392 <bufDel+0x7a>
	}

	memmove(buf->ptr + ofs, buf->ptr + ofs + len, buf->pos - ofs - len);
   13352:	68fb      	ldr	r3, [r7, #12]
   13354:	681a      	ldr	r2, [r3, #0]
   13356:	897b      	ldrh	r3, [r7, #10]
   13358:	18d1      	adds	r1, r2, r3
   1335a:	68fb      	ldr	r3, [r7, #12]
   1335c:	681a      	ldr	r2, [r3, #0]
   1335e:	8978      	ldrh	r0, [r7, #10]
   13360:	687b      	ldr	r3, [r7, #4]
   13362:	18c3      	adds	r3, r0, r3
   13364:	18d2      	adds	r2, r2, r3
   13366:	68fb      	ldr	r3, [r7, #12]
   13368:	88db      	ldrh	r3, [r3, #6]
   1336a:	4618      	mov	r0, r3
   1336c:	897b      	ldrh	r3, [r7, #10]
   1336e:	1ac0      	subs	r0, r0, r3
   13370:	687b      	ldr	r3, [r7, #4]
   13372:	1ac3      	subs	r3, r0, r3
   13374:	4608      	mov	r0, r1
   13376:	4611      	mov	r1, r2
   13378:	461a      	mov	r2, r3
   1337a:	f7f5 ec3e 	blx	8bf8 <_init+0x98>
	buf->pos -= len;
   1337e:	68fb      	ldr	r3, [r7, #12]
   13380:	88da      	ldrh	r2, [r3, #6]
   13382:	687b      	ldr	r3, [r7, #4]
   13384:	b29b      	uxth	r3, r3
   13386:	1ad3      	subs	r3, r2, r3
   13388:	b29a      	uxth	r2, r3
   1338a:	68fb      	ldr	r3, [r7, #12]
   1338c:	80da      	strh	r2, [r3, #6]
	return buf->pos;
   1338e:	68fb      	ldr	r3, [r7, #12]
   13390:	88db      	ldrh	r3, [r3, #6]
}
   13392:	4618      	mov	r0, r3
   13394:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13398:	f2c0 0302 	movt	r3, #2
   1339c:	697a      	ldr	r2, [r7, #20]
   1339e:	681b      	ldr	r3, [r3, #0]
   133a0:	429a      	cmp	r2, r3
   133a2:	d001      	beq.n	133a8 <bufDel+0x90>
   133a4:	f7f5 fdfe 	bl	8fa4 <__stack_chk_fail>
   133a8:	f107 0718 	add.w	r7, r7, #24
   133ac:	46bd      	mov	sp, r7
   133ae:	bd80      	pop	{r7, pc}

000133b0 <bufApp>:
 * \return current buffer position if OK; negative if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 */
int bufApp(tBuffer * buf, const byte * dat, int len) {
   133b0:	b580      	push	{r7, lr}
   133b2:	b086      	sub	sp, #24
   133b4:	af00      	add	r7, sp, #0
   133b6:	60f8      	str	r0, [r7, #12]
   133b8:	60b9      	str	r1, [r7, #8]
   133ba:	607a      	str	r2, [r7, #4]
   133bc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   133c0:	f2c0 0302 	movt	r3, #2
   133c4:	681b      	ldr	r3, [r3, #0]
   133c6:	617b      	str	r3, [r7, #20]
	return bufIns(buf, buf->pos, dat, len);
   133c8:	68fb      	ldr	r3, [r7, #12]
   133ca:	88db      	ldrh	r3, [r3, #6]
   133cc:	68f8      	ldr	r0, [r7, #12]
   133ce:	4619      	mov	r1, r3
   133d0:	68ba      	ldr	r2, [r7, #8]
   133d2:	687b      	ldr	r3, [r7, #4]
   133d4:	f7ff feea 	bl	131ac <bufIns>
   133d8:	4603      	mov	r3, r0
}
   133da:	4618      	mov	r0, r3
   133dc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   133e0:	f2c0 0302 	movt	r3, #2
   133e4:	697a      	ldr	r2, [r7, #20]
   133e6:	681b      	ldr	r3, [r3, #0]
   133e8:	429a      	cmp	r2, r3
   133ea:	d001      	beq.n	133f0 <bufApp+0x40>
   133ec:	f7f5 fdda 	bl	8fa4 <__stack_chk_fail>
   133f0:	f107 0718 	add.w	r7, r7, #24
   133f4:	46bd      	mov	sp, r7
   133f6:	bd80      	pop	{r7, pc}

000133f8 <bufCat>:
 * \return current buffer position if OK; negative if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 */
int bufCat(tBuffer * dst, tBuffer * src) {
   133f8:	b5b0      	push	{r4, r5, r7, lr}
   133fa:	b084      	sub	sp, #16
   133fc:	af00      	add	r7, sp, #0
   133fe:	6078      	str	r0, [r7, #4]
   13400:	6039      	str	r1, [r7, #0]
   13402:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13406:	f2c0 0302 	movt	r3, #2
   1340a:	681b      	ldr	r3, [r3, #0]
   1340c:	60fb      	str	r3, [r7, #12]
	return bufIns(dst, dst->pos, bufPtr(src), bufLen(src));
   1340e:	687b      	ldr	r3, [r7, #4]
   13410:	88dd      	ldrh	r5, [r3, #6]
   13412:	6838      	ldr	r0, [r7, #0]
   13414:	f7ff fe54 	bl	130c0 <bufPtr>
   13418:	4604      	mov	r4, r0
   1341a:	6838      	ldr	r0, [r7, #0]
   1341c:	f7ff fe6c 	bl	130f8 <bufLen>
   13420:	4603      	mov	r3, r0
   13422:	6878      	ldr	r0, [r7, #4]
   13424:	4629      	mov	r1, r5
   13426:	4622      	mov	r2, r4
   13428:	f7ff fec0 	bl	131ac <bufIns>
   1342c:	4603      	mov	r3, r0
}
   1342e:	4618      	mov	r0, r3
   13430:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13434:	f2c0 0302 	movt	r3, #2
   13438:	68fa      	ldr	r2, [r7, #12]
   1343a:	681b      	ldr	r3, [r3, #0]
   1343c:	429a      	cmp	r2, r3
   1343e:	d001      	beq.n	13444 <bufCat+0x4c>
   13440:	f7f5 fdb0 	bl	8fa4 <__stack_chk_fail>
   13444:	f107 0710 	add.w	r7, r7, #16
   13448:	46bd      	mov	sp, r7
   1344a:	bdb0      	pop	{r4, r5, r7, pc}

0001344c <bufCpy>:
 * \return current buffer position if OK; negative if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0009.c
 */
int bufCpy(tBuffer * buf, const byte * dat, int len) {
   1344c:	b580      	push	{r7, lr}
   1344e:	b086      	sub	sp, #24
   13450:	af00      	add	r7, sp, #0
   13452:	60f8      	str	r0, [r7, #12]
   13454:	60b9      	str	r1, [r7, #8]
   13456:	607a      	str	r2, [r7, #4]
   13458:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1345c:	f2c0 0302 	movt	r3, #2
   13460:	681b      	ldr	r3, [r3, #0]
   13462:	617b      	str	r3, [r7, #20]
	bufReset(buf);
   13464:	68f8      	ldr	r0, [r7, #12]
   13466:	f7ff fdc3 	bl	12ff0 <bufReset>
	return bufApp(buf, dat, len);
   1346a:	68f8      	ldr	r0, [r7, #12]
   1346c:	68b9      	ldr	r1, [r7, #8]
   1346e:	687a      	ldr	r2, [r7, #4]
   13470:	f7ff ff9e 	bl	133b0 <bufApp>
   13474:	4603      	mov	r3, r0
}
   13476:	4618      	mov	r0, r3
   13478:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1347c:	f2c0 0302 	movt	r3, #2
   13480:	697a      	ldr	r2, [r7, #20]
   13482:	681b      	ldr	r3, [r3, #0]
   13484:	429a      	cmp	r2, r3
   13486:	d001      	beq.n	1348c <bufCpy+0x40>
   13488:	f7f5 fd8c 	bl	8fa4 <__stack_chk_fail>
   1348c:	f107 0718 	add.w	r7, r7, #24
   13490:	46bd      	mov	sp, r7
   13492:	bd80      	pop	{r7, pc}

00013494 <bufGet>:

int bufGet(tBuffer * buf, byte * dat) {
   13494:	b580      	push	{r7, lr}
   13496:	b084      	sub	sp, #16
   13498:	af00      	add	r7, sp, #0
   1349a:	6078      	str	r0, [r7, #4]
   1349c:	6039      	str	r1, [r7, #0]
   1349e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   134a2:	f2c0 0302 	movt	r3, #2
   134a6:	681b      	ldr	r3, [r3, #0]
   134a8:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	VERIFY(dat);
	VERIFY(buf->ptr);
	memcpy(dat, buf->ptr, buf->pos);
   134aa:	687b      	ldr	r3, [r7, #4]
   134ac:	681a      	ldr	r2, [r3, #0]
   134ae:	687b      	ldr	r3, [r7, #4]
   134b0:	88db      	ldrh	r3, [r3, #6]
   134b2:	6838      	ldr	r0, [r7, #0]
   134b4:	4611      	mov	r1, r2
   134b6:	461a      	mov	r2, r3
   134b8:	f7f5 ebde 	blx	8c78 <_init+0x118>
	return buf->pos;
   134bc:	687b      	ldr	r3, [r7, #4]
   134be:	88db      	ldrh	r3, [r3, #6]
}
   134c0:	4618      	mov	r0, r3
   134c2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   134c6:	f2c0 0302 	movt	r3, #2
   134ca:	68fa      	ldr	r2, [r7, #12]
   134cc:	681b      	ldr	r3, [r3, #0]
   134ce:	429a      	cmp	r2, r3
   134d0:	d001      	beq.n	134d6 <bufGet+0x42>
   134d2:	f7f5 fd67 	bl	8fa4 <__stack_chk_fail>
   134d6:	f107 0710 	add.w	r7, r7, #16
   134da:	46bd      	mov	sp, r7
   134dc:	bd80      	pop	{r7, pc}
   134de:	bf00      	nop

000134e0 <queReset>:
 * \return N/A
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0010.c
 */
void queReset(tQueue * que) {
   134e0:	b580      	push	{r7, lr}
   134e2:	b084      	sub	sp, #16
   134e4:	af00      	add	r7, sp, #0
   134e6:	6078      	str	r0, [r7, #4]
   134e8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   134ec:	f2c0 0302 	movt	r3, #2
   134f0:	681b      	ldr	r3, [r3, #0]
   134f2:	60fb      	str	r3, [r7, #12]
	VERIFY(que);
	VERIFY(que->buf);

	que->cur = que->put = que->get = 0;
   134f4:	687b      	ldr	r3, [r7, #4]
   134f6:	2200      	movs	r2, #0
   134f8:	811a      	strh	r2, [r3, #8]
   134fa:	687b      	ldr	r3, [r7, #4]
   134fc:	891a      	ldrh	r2, [r3, #8]
   134fe:	687b      	ldr	r3, [r7, #4]
   13500:	80da      	strh	r2, [r3, #6]
   13502:	687b      	ldr	r3, [r7, #4]
   13504:	88da      	ldrh	r2, [r3, #6]
   13506:	687b      	ldr	r3, [r7, #4]
   13508:	809a      	strh	r2, [r3, #4]
	bufReset(que->buf);
   1350a:	687b      	ldr	r3, [r7, #4]
   1350c:	681b      	ldr	r3, [r3, #0]
   1350e:	4618      	mov	r0, r3
   13510:	f7ff fd6e 	bl	12ff0 <bufReset>
}
   13514:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13518:	f2c0 0302 	movt	r3, #2
   1351c:	68fa      	ldr	r2, [r7, #12]
   1351e:	681b      	ldr	r3, [r3, #0]
   13520:	429a      	cmp	r2, r3
   13522:	d001      	beq.n	13528 <queReset+0x48>
   13524:	f7f5 fd3e 	bl	8fa4 <__stack_chk_fail>
   13528:	f107 0710 	add.w	r7, r7, #16
   1352c:	46bd      	mov	sp, r7
   1352e:	bd80      	pop	{r7, pc}

00013530 <queInit>:
 * \return N/A
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0010.c
 */
void queInit(tQueue * que, tBuffer * buf) {
   13530:	b580      	push	{r7, lr}
   13532:	b084      	sub	sp, #16
   13534:	af00      	add	r7, sp, #0
   13536:	6078      	str	r0, [r7, #4]
   13538:	6039      	str	r1, [r7, #0]
   1353a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1353e:	f2c0 0302 	movt	r3, #2
   13542:	681b      	ldr	r3, [r3, #0]
   13544:	60fb      	str	r3, [r7, #12]
	VERIFY(que);
	VERIFY(buf);

	que->buf = buf;
   13546:	687b      	ldr	r3, [r7, #4]
   13548:	683a      	ldr	r2, [r7, #0]
   1354a:	601a      	str	r2, [r3, #0]
	queReset(que);
   1354c:	6878      	ldr	r0, [r7, #4]
   1354e:	f7ff ffc7 	bl	134e0 <queReset>
}
   13552:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13556:	f2c0 0302 	movt	r3, #2
   1355a:	68fa      	ldr	r2, [r7, #12]
   1355c:	681b      	ldr	r3, [r3, #0]
   1355e:	429a      	cmp	r2, r3
   13560:	d001      	beq.n	13566 <queInit+0x36>
   13562:	f7f5 fd1f 	bl	8fa4 <__stack_chk_fail>
   13566:	f107 0710 	add.w	r7, r7, #16
   1356a:	46bd      	mov	sp, r7
   1356c:	bd80      	pop	{r7, pc}
   1356e:	bf00      	nop

00013570 <quePut>:
 * \return number of bytes put into the queue; negative value if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0010.c
 */
int quePut(tQueue * que, const byte * dat, int len) {
   13570:	b580      	push	{r7, lr}
   13572:	b088      	sub	sp, #32
   13574:	af00      	add	r7, sp, #0
   13576:	60f8      	str	r0, [r7, #12]
   13578:	60b9      	str	r1, [r7, #8]
   1357a:	607a      	str	r2, [r7, #4]
   1357c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13580:	f2c0 0302 	movt	r3, #2
   13584:	681b      	ldr	r3, [r3, #0]
   13586:	61fb      	str	r3, [r7, #28]
	byte tmp[2];

	VERIFY(que);
	VERIFY(que->buf);

	if(!len)
   13588:	687b      	ldr	r3, [r7, #4]
   1358a:	2b00      	cmp	r3, #0
   1358c:	d104      	bne.n	13598 <quePut+0x28>
		len = strlen((char *) dat); //calculate len if needed
   1358e:	68b8      	ldr	r0, [r7, #8]
   13590:	f7f5 eb78 	blx	8c84 <_init+0x124>
   13594:	4603      	mov	r3, r0
   13596:	607b      	str	r3, [r7, #4]
	tmp[0] = (byte) (len / 256);    //get highest byte
   13598:	687b      	ldr	r3, [r7, #4]
   1359a:	2b00      	cmp	r3, #0
   1359c:	da00      	bge.n	135a0 <quePut+0x30>
   1359e:	33ff      	adds	r3, #255	; 0xff
   135a0:	121b      	asrs	r3, r3, #8
   135a2:	b2db      	uxtb	r3, r3
   135a4:	763b      	strb	r3, [r7, #24]
	tmp[1] = (byte) (len % 256);    //get lowest byte
   135a6:	687a      	ldr	r2, [r7, #4]
   135a8:	23ff      	movs	r3, #255	; 0xff
   135aa:	f2c8 0300 	movt	r3, #32768	; 0x8000
   135ae:	4013      	ands	r3, r2
   135b0:	2b00      	cmp	r3, #0
   135b2:	da03      	bge.n	135bc <quePut+0x4c>
   135b4:	3b01      	subs	r3, #1
   135b6:	f063 03ff 	orn	r3, r3, #255	; 0xff
   135ba:	3301      	adds	r3, #1
   135bc:	b2db      	uxtb	r3, r3
   135be:	767b      	strb	r3, [r7, #25]

	ret = bufApp(que->buf, tmp, 2); //save element length in direct byte order
   135c0:	68fb      	ldr	r3, [r7, #12]
   135c2:	681a      	ldr	r2, [r3, #0]
   135c4:	f107 0318 	add.w	r3, r7, #24
   135c8:	4610      	mov	r0, r2
   135ca:	4619      	mov	r1, r3
   135cc:	2202      	movs	r2, #2
   135ce:	f7ff feef 	bl	133b0 <bufApp>
   135d2:	6178      	str	r0, [r7, #20]
	CHECK(ret > 0, lblKO);
   135d4:	697b      	ldr	r3, [r7, #20]
   135d6:	2b00      	cmp	r3, #0
   135d8:	dd18      	ble.n	1360c <quePut+0x9c>

	ret = bufApp(que->buf, dat, len);   //save the data itself
   135da:	68fb      	ldr	r3, [r7, #12]
   135dc:	681b      	ldr	r3, [r3, #0]
   135de:	4618      	mov	r0, r3
   135e0:	68b9      	ldr	r1, [r7, #8]
   135e2:	687a      	ldr	r2, [r7, #4]
   135e4:	f7ff fee4 	bl	133b0 <bufApp>
   135e8:	6178      	str	r0, [r7, #20]
	CHECK(ret > 0, lblKO);
   135ea:	697b      	ldr	r3, [r7, #20]
   135ec:	2b00      	cmp	r3, #0
   135ee:	dd0d      	ble.n	1360c <quePut+0x9c>

	que->put++;                 //increment number of put elements
   135f0:	68fb      	ldr	r3, [r7, #12]
   135f2:	88db      	ldrh	r3, [r3, #6]
   135f4:	3301      	adds	r3, #1
   135f6:	b29a      	uxth	r2, r3
   135f8:	68fb      	ldr	r3, [r7, #12]
   135fa:	80da      	strh	r2, [r3, #6]
	que->get++;                 //increment number of get elements
   135fc:	68fb      	ldr	r3, [r7, #12]
   135fe:	891b      	ldrh	r3, [r3, #8]
   13600:	3301      	adds	r3, #1
   13602:	b29a      	uxth	r2, r3
   13604:	68fb      	ldr	r3, [r7, #12]
   13606:	811a      	strh	r2, [r3, #8]

	return len;
   13608:	687b      	ldr	r3, [r7, #4]
   1360a:	e001      	b.n	13610 <quePut+0xa0>
	lblKO:return -1;
   1360c:	f04f 33ff 	mov.w	r3, #4294967295
}
   13610:	4618      	mov	r0, r3
   13612:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13616:	f2c0 0302 	movt	r3, #2
   1361a:	69fa      	ldr	r2, [r7, #28]
   1361c:	681b      	ldr	r3, [r3, #0]
   1361e:	429a      	cmp	r2, r3
   13620:	d001      	beq.n	13626 <quePut+0xb6>
   13622:	f7f5 fcbf 	bl	8fa4 <__stack_chk_fail>
   13626:	f107 0720 	add.w	r7, r7, #32
   1362a:	46bd      	mov	sp, r7
   1362c:	bd80      	pop	{r7, pc}
   1362e:	bf00      	nop

00013630 <queNxt>:
 * \return the length of the next data element; zero if the current element is the last
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0010.c
 */
word queNxt(const tQueue * que) {
   13630:	b580      	push	{r7, lr}
   13632:	b086      	sub	sp, #24
   13634:	af00      	add	r7, sp, #0
   13636:	6078      	str	r0, [r7, #4]
   13638:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1363c:	f2c0 0302 	movt	r3, #2
   13640:	681b      	ldr	r3, [r3, #0]
   13642:	617b      	str	r3, [r7, #20]
	word len;

	VERIFY(que);
	VERIFY(que->buf);

	if(!que->get)
   13644:	687b      	ldr	r3, [r7, #4]
   13646:	891b      	ldrh	r3, [r3, #8]
   13648:	2b00      	cmp	r3, #0
   1364a:	d101      	bne.n	13650 <queNxt+0x20>
		return 0;
   1364c:	2300      	movs	r3, #0
   1364e:	e019      	b.n	13684 <queNxt+0x54>

	ptr = bufPtr(que->buf) + que->cur;  //ptr points to the length in direct order
   13650:	687b      	ldr	r3, [r7, #4]
   13652:	681b      	ldr	r3, [r3, #0]
   13654:	4618      	mov	r0, r3
   13656:	f7ff fd33 	bl	130c0 <bufPtr>
   1365a:	4602      	mov	r2, r0
   1365c:	687b      	ldr	r3, [r7, #4]
   1365e:	889b      	ldrh	r3, [r3, #4]
   13660:	18d3      	adds	r3, r2, r3
   13662:	613b      	str	r3, [r7, #16]
	len = *ptr++;               //get highest byte
   13664:	693b      	ldr	r3, [r7, #16]
   13666:	781b      	ldrb	r3, [r3, #0]
   13668:	81fb      	strh	r3, [r7, #14]
   1366a:	693b      	ldr	r3, [r7, #16]
   1366c:	3301      	adds	r3, #1
   1366e:	613b      	str	r3, [r7, #16]
	len *= (word) 256;
   13670:	89fb      	ldrh	r3, [r7, #14]
   13672:	021b      	lsls	r3, r3, #8
   13674:	81fb      	strh	r3, [r7, #14]
	len += *ptr;                //and now get lowest byte
   13676:	693b      	ldr	r3, [r7, #16]
   13678:	781b      	ldrb	r3, [r3, #0]
   1367a:	461a      	mov	r2, r3
   1367c:	89fb      	ldrh	r3, [r7, #14]
   1367e:	18d3      	adds	r3, r2, r3
   13680:	81fb      	strh	r3, [r7, #14]

	return len;
   13682:	89fb      	ldrh	r3, [r7, #14]
}
   13684:	4618      	mov	r0, r3
   13686:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1368a:	f2c0 0302 	movt	r3, #2
   1368e:	697a      	ldr	r2, [r7, #20]
   13690:	681b      	ldr	r3, [r3, #0]
   13692:	429a      	cmp	r2, r3
   13694:	d001      	beq.n	1369a <queNxt+0x6a>
   13696:	f7f5 fc85 	bl	8fa4 <__stack_chk_fail>
   1369a:	f107 0718 	add.w	r7, r7, #24
   1369e:	46bd      	mov	sp, r7
   136a0:	bd80      	pop	{r7, pc}
   136a2:	bf00      	nop

000136a4 <queGet>:
 * \return length of data element retrieved; negative value if there is no more data elements to be retrieved
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0010.c
 */
int queGet(tQueue * que, byte * dat) {
   136a4:	b580      	push	{r7, lr}
   136a6:	b084      	sub	sp, #16
   136a8:	af00      	add	r7, sp, #0
   136aa:	6078      	str	r0, [r7, #4]
   136ac:	6039      	str	r1, [r7, #0]
   136ae:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   136b2:	f2c0 0302 	movt	r3, #2
   136b6:	681b      	ldr	r3, [r3, #0]
   136b8:	60fb      	str	r3, [r7, #12]
	word len;

	VERIFY(que);
	VERIFY(dat);
	VERIFY(que->buf);
	CHECK(que->get, lblKO);     //are there any element to get?
   136ba:	687b      	ldr	r3, [r7, #4]
   136bc:	891b      	ldrh	r3, [r3, #8]
   136be:	2b00      	cmp	r3, #0
   136c0:	d028      	beq.n	13714 <queGet+0x70>

	len = queNxt(que);          //retrieve the length of the next element
   136c2:	6878      	ldr	r0, [r7, #4]
   136c4:	f7ff ffb4 	bl	13630 <queNxt>
   136c8:	4603      	mov	r3, r0
   136ca:	817b      	strh	r3, [r7, #10]
	que->cur += (word) 2;       //skip the length
   136cc:	687b      	ldr	r3, [r7, #4]
   136ce:	889b      	ldrh	r3, [r3, #4]
   136d0:	3302      	adds	r3, #2
   136d2:	b29a      	uxth	r2, r3
   136d4:	687b      	ldr	r3, [r7, #4]
   136d6:	809a      	strh	r2, [r3, #4]

	memcpy(dat, bufPtr(que->buf) + que->cur, len);  //copy data into destination buffer
   136d8:	687b      	ldr	r3, [r7, #4]
   136da:	681b      	ldr	r3, [r3, #0]
   136dc:	4618      	mov	r0, r3
   136de:	f7ff fcef 	bl	130c0 <bufPtr>
   136e2:	4602      	mov	r2, r0
   136e4:	687b      	ldr	r3, [r7, #4]
   136e6:	889b      	ldrh	r3, [r3, #4]
   136e8:	18d2      	adds	r2, r2, r3
   136ea:	897b      	ldrh	r3, [r7, #10]
   136ec:	6838      	ldr	r0, [r7, #0]
   136ee:	4611      	mov	r1, r2
   136f0:	461a      	mov	r2, r3
   136f2:	f7f5 eac2 	blx	8c78 <_init+0x118>
	que->cur += len;            //move current position
   136f6:	687b      	ldr	r3, [r7, #4]
   136f8:	889a      	ldrh	r2, [r3, #4]
   136fa:	897b      	ldrh	r3, [r7, #10]
   136fc:	18d3      	adds	r3, r2, r3
   136fe:	b29a      	uxth	r2, r3
   13700:	687b      	ldr	r3, [r7, #4]
   13702:	809a      	strh	r2, [r3, #4]

	que->get--;                 //decrement number of elements to get
   13704:	687b      	ldr	r3, [r7, #4]
   13706:	891b      	ldrh	r3, [r3, #8]
   13708:	3b01      	subs	r3, #1
   1370a:	b29a      	uxth	r2, r3
   1370c:	687b      	ldr	r3, [r7, #4]
   1370e:	811a      	strh	r2, [r3, #8]

	return len;
   13710:	897b      	ldrh	r3, [r7, #10]
   13712:	e001      	b.n	13718 <queGet+0x74>
	lblKO:return -1;
   13714:	f04f 33ff 	mov.w	r3, #4294967295
}
   13718:	4618      	mov	r0, r3
   1371a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1371e:	f2c0 0302 	movt	r3, #2
   13722:	68fa      	ldr	r2, [r7, #12]
   13724:	681b      	ldr	r3, [r3, #0]
   13726:	429a      	cmp	r2, r3
   13728:	d001      	beq.n	1372e <queGet+0x8a>
   1372a:	f7f5 fc3b 	bl	8fa4 <__stack_chk_fail>
   1372e:	f107 0710 	add.w	r7, r7, #16
   13732:	46bd      	mov	sp, r7
   13734:	bd80      	pop	{r7, pc}
   13736:	bf00      	nop

00013738 <queLen>:
 * \return the number of data elements waiting to be retrieved
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0010.c
 */
word queLen(const tQueue * que) {
   13738:	b580      	push	{r7, lr}
   1373a:	b084      	sub	sp, #16
   1373c:	af00      	add	r7, sp, #0
   1373e:	6078      	str	r0, [r7, #4]
   13740:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13744:	f2c0 0302 	movt	r3, #2
   13748:	681b      	ldr	r3, [r3, #0]
   1374a:	60fb      	str	r3, [r7, #12]
	VERIFY(que);
	return que->get;
   1374c:	687b      	ldr	r3, [r7, #4]
   1374e:	891b      	ldrh	r3, [r3, #8]
}
   13750:	4618      	mov	r0, r3
   13752:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13756:	f2c0 0302 	movt	r3, #2
   1375a:	68fa      	ldr	r2, [r7, #12]
   1375c:	681b      	ldr	r3, [r3, #0]
   1375e:	429a      	cmp	r2, r3
   13760:	d001      	beq.n	13766 <queLen+0x2e>
   13762:	f7f5 fc1f 	bl	8fa4 <__stack_chk_fail>
   13766:	f107 0710 	add.w	r7, r7, #16
   1376a:	46bd      	mov	sp, r7
   1376c:	bd80      	pop	{r7, pc}
   1376e:	bf00      	nop

00013770 <queRewind>:
 * \return N/A
 * \header sys\\sys.h
 * \source sys\\tbx.c
 * \test tcab0010.c
 */
void queRewind(tQueue * que) {
   13770:	b580      	push	{r7, lr}
   13772:	b084      	sub	sp, #16
   13774:	af00      	add	r7, sp, #0
   13776:	6078      	str	r0, [r7, #4]
   13778:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1377c:	f2c0 0302 	movt	r3, #2
   13780:	681b      	ldr	r3, [r3, #0]
   13782:	60fb      	str	r3, [r7, #12]
	VERIFY(que);
	que->cur = 0;
   13784:	687b      	ldr	r3, [r7, #4]
   13786:	2200      	movs	r2, #0
   13788:	809a      	strh	r2, [r3, #4]
	que->get = que->put;
   1378a:	687b      	ldr	r3, [r7, #4]
   1378c:	88da      	ldrh	r2, [r3, #6]
   1378e:	687b      	ldr	r3, [r7, #4]
   13790:	811a      	strh	r2, [r3, #8]
}
   13792:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13796:	f2c0 0302 	movt	r3, #2
   1379a:	68fa      	ldr	r2, [r7, #12]
   1379c:	681b      	ldr	r3, [r3, #0]
   1379e:	429a      	cmp	r2, r3
   137a0:	d001      	beq.n	137a6 <queRewind+0x36>
   137a2:	f7f5 fbff 	bl	8fa4 <__stack_chk_fail>
   137a6:	f107 0710 	add.w	r7, r7, #16
   137aa:	46bd      	mov	sp, r7
   137ac:	bd80      	pop	{r7, pc}
   137ae:	bf00      	nop

000137b0 <quePutTag>:
 *    - que!=0
 * \return number of bytes put into the queue (sizeof(card)); negative value if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
int quePutTag(tQueue * que, card tag) {
   137b0:	b580      	push	{r7, lr}
   137b2:	b084      	sub	sp, #16
   137b4:	af00      	add	r7, sp, #0
   137b6:	6078      	str	r0, [r7, #4]
   137b8:	6039      	str	r1, [r7, #0]
   137ba:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   137be:	f2c0 0302 	movt	r3, #2
   137c2:	681b      	ldr	r3, [r3, #0]
   137c4:	60fb      	str	r3, [r7, #12]
	int ret;

	VERIFY(que);

	ret = quePut(que, (byte *) & tag, sizeof(card));
   137c6:	463b      	mov	r3, r7
   137c8:	6878      	ldr	r0, [r7, #4]
   137ca:	4619      	mov	r1, r3
   137cc:	2204      	movs	r2, #4
   137ce:	f7ff fecf 	bl	13570 <quePut>
   137d2:	60b8      	str	r0, [r7, #8]
	CHECK(ret >= 0, lblKO);
   137d4:	68bb      	ldr	r3, [r7, #8]
   137d6:	2b00      	cmp	r3, #0
   137d8:	db01      	blt.n	137de <quePutTag+0x2e>

	return ret;
   137da:	68bb      	ldr	r3, [r7, #8]
   137dc:	e001      	b.n	137e2 <quePutTag+0x32>
	lblKO:return -1;
   137de:	f04f 33ff 	mov.w	r3, #4294967295
}
   137e2:	4618      	mov	r0, r3
   137e4:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   137e8:	f2c0 0302 	movt	r3, #2
   137ec:	68fa      	ldr	r2, [r7, #12]
   137ee:	681b      	ldr	r3, [r3, #0]
   137f0:	429a      	cmp	r2, r3
   137f2:	d001      	beq.n	137f8 <quePutTag+0x48>
   137f4:	f7f5 fbd6 	bl	8fa4 <__stack_chk_fail>
   137f8:	f107 0710 	add.w	r7, r7, #16
   137fc:	46bd      	mov	sp, r7
   137fe:	bd80      	pop	{r7, pc}

00013800 <quePutTlv>:
 *    - tag!=0
 * \return number of bytes put into the queue; negative value if overflow
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
int quePutTlv(tQueue * que, card tag, word len, byte * val) {
   13800:	b580      	push	{r7, lr}
   13802:	b086      	sub	sp, #24
   13804:	af00      	add	r7, sp, #0
   13806:	60f8      	str	r0, [r7, #12]
   13808:	60b9      	str	r1, [r7, #8]
   1380a:	603b      	str	r3, [r7, #0]
   1380c:	4613      	mov	r3, r2
   1380e:	80fb      	strh	r3, [r7, #6]
   13810:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13814:	f2c0 0302 	movt	r3, #2
   13818:	681b      	ldr	r3, [r3, #0]
   1381a:	617b      	str	r3, [r7, #20]
	int ret;

	VERIFY(que);
	VERIFY(val);

	if(!len)
   1381c:	88fb      	ldrh	r3, [r7, #6]
   1381e:	2b00      	cmp	r3, #0
   13820:	d104      	bne.n	1382c <quePutTlv+0x2c>
		len = (word) strlen((char *) val);
   13822:	6838      	ldr	r0, [r7, #0]
   13824:	f7f5 ea2e 	blx	8c84 <_init+0x124>
   13828:	4603      	mov	r3, r0
   1382a:	80fb      	strh	r3, [r7, #6]

	if(len < 1)
   1382c:	88fb      	ldrh	r3, [r7, #6]
   1382e:	2b00      	cmp	r3, #0
   13830:	d101      	bne.n	13836 <quePutTlv+0x36>
		return 0;
   13832:	2300      	movs	r3, #0
   13834:	e018      	b.n	13868 <quePutTlv+0x68>

	VERIFY(len);

	ret = quePut(que, (byte *) & tag, sizeof(card));
   13836:	f107 0308 	add.w	r3, r7, #8
   1383a:	68f8      	ldr	r0, [r7, #12]
   1383c:	4619      	mov	r1, r3
   1383e:	2204      	movs	r2, #4
   13840:	f7ff fe96 	bl	13570 <quePut>
   13844:	6138      	str	r0, [r7, #16]
	CHECK(ret >= 0, lblKO);
   13846:	693b      	ldr	r3, [r7, #16]
   13848:	2b00      	cmp	r3, #0
   1384a:	db0b      	blt.n	13864 <quePutTlv+0x64>

	ret = quePut(que, val, len);
   1384c:	88fb      	ldrh	r3, [r7, #6]
   1384e:	68f8      	ldr	r0, [r7, #12]
   13850:	6839      	ldr	r1, [r7, #0]
   13852:	461a      	mov	r2, r3
   13854:	f7ff fe8c 	bl	13570 <quePut>
   13858:	6138      	str	r0, [r7, #16]
	CHECK(ret >= 0, lblKO);
   1385a:	693b      	ldr	r3, [r7, #16]
   1385c:	2b00      	cmp	r3, #0
   1385e:	db01      	blt.n	13864 <quePutTlv+0x64>

	return ret;
   13860:	693b      	ldr	r3, [r7, #16]
   13862:	e001      	b.n	13868 <quePutTlv+0x68>
	lblKO:return -1;
   13864:	f04f 33ff 	mov.w	r3, #4294967295
}
   13868:	4618      	mov	r0, r3
   1386a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1386e:	f2c0 0302 	movt	r3, #2
   13872:	697a      	ldr	r2, [r7, #20]
   13874:	681b      	ldr	r3, [r3, #0]
   13876:	429a      	cmp	r2, r3
   13878:	d001      	beq.n	1387e <quePutTlv+0x7e>
   1387a:	f7f5 fb93 	bl	8fa4 <__stack_chk_fail>
   1387e:	f107 0718 	add.w	r7, r7, #24
   13882:	46bd      	mov	sp, r7
   13884:	bd80      	pop	{r7, pc}
   13886:	bf00      	nop

00013888 <queGetTag>:
 *    - queNxt(que)==sizeof(card)
 * \return number of bytes retrieved (sizeof(card)); negative value if failure
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
int queGetTag(tQueue * que, card * tag) {
   13888:	b580      	push	{r7, lr}
   1388a:	b084      	sub	sp, #16
   1388c:	af00      	add	r7, sp, #0
   1388e:	6078      	str	r0, [r7, #4]
   13890:	6039      	str	r1, [r7, #0]
   13892:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13896:	f2c0 0302 	movt	r3, #2
   1389a:	681b      	ldr	r3, [r3, #0]
   1389c:	60fb      	str	r3, [r7, #12]
	int ret;

	VERIFY(queLen(que));
   1389e:	6878      	ldr	r0, [r7, #4]
   138a0:	f7ff ff4a 	bl	13738 <queLen>
	VERIFY(queNxt(que) == sizeof(card));
   138a4:	6878      	ldr	r0, [r7, #4]
   138a6:	f7ff fec3 	bl	13630 <queNxt>

	ret = queGet(que, (byte *) tag);
   138aa:	6878      	ldr	r0, [r7, #4]
   138ac:	6839      	ldr	r1, [r7, #0]
   138ae:	f7ff fef9 	bl	136a4 <queGet>
   138b2:	60b8      	str	r0, [r7, #8]
	VERIFY(ret == sizeof(card));

	return ret;
   138b4:	68bb      	ldr	r3, [r7, #8]
}
   138b6:	4618      	mov	r0, r3
   138b8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   138bc:	f2c0 0302 	movt	r3, #2
   138c0:	68fa      	ldr	r2, [r7, #12]
   138c2:	681b      	ldr	r3, [r3, #0]
   138c4:	429a      	cmp	r2, r3
   138c6:	d001      	beq.n	138cc <queGetTag+0x44>
   138c8:	f7f5 fb6c 	bl	8fa4 <__stack_chk_fail>
   138cc:	f107 0710 	add.w	r7, r7, #16
   138d0:	46bd      	mov	sp, r7
   138d2:	bd80      	pop	{r7, pc}

000138d4 <queGetTlv>:
 *    - val!=0
 * \return number of bytes retrieved; negative value if failure
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
int queGetTlv(tQueue * que, card * tag, word * len, byte * val) {
   138d4:	b580      	push	{r7, lr}
   138d6:	b086      	sub	sp, #24
   138d8:	af00      	add	r7, sp, #0
   138da:	60f8      	str	r0, [r7, #12]
   138dc:	60b9      	str	r1, [r7, #8]
   138de:	607a      	str	r2, [r7, #4]
   138e0:	603b      	str	r3, [r7, #0]
   138e2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   138e6:	f2c0 0302 	movt	r3, #2
   138ea:	681b      	ldr	r3, [r3, #0]
   138ec:	617b      	str	r3, [r7, #20]
	int ret;

	VERIFY(queLen(que) >= 2);
   138ee:	68f8      	ldr	r0, [r7, #12]
   138f0:	f7ff ff22 	bl	13738 <queLen>

	ret = queGetTag(que, tag);
   138f4:	68f8      	ldr	r0, [r7, #12]
   138f6:	68b9      	ldr	r1, [r7, #8]
   138f8:	f7ff ffc6 	bl	13888 <queGetTag>
   138fc:	6138      	str	r0, [r7, #16]
	VERIFY(ret == sizeof(card));

	ret = queGet(que, val);
   138fe:	68f8      	ldr	r0, [r7, #12]
   13900:	6839      	ldr	r1, [r7, #0]
   13902:	f7ff fecf 	bl	136a4 <queGet>
   13906:	6138      	str	r0, [r7, #16]
	VERIFY(ret > 0);

	*len = (word) ret;
   13908:	693b      	ldr	r3, [r7, #16]
   1390a:	b29a      	uxth	r2, r3
   1390c:	687b      	ldr	r3, [r7, #4]
   1390e:	801a      	strh	r2, [r3, #0]

	return ret;
   13910:	693b      	ldr	r3, [r7, #16]
}
   13912:	4618      	mov	r0, r3
   13914:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13918:	f2c0 0302 	movt	r3, #2
   1391c:	697a      	ldr	r2, [r7, #20]
   1391e:	681b      	ldr	r3, [r3, #0]
   13920:	429a      	cmp	r2, r3
   13922:	d001      	beq.n	13928 <queGetTlv+0x54>
   13924:	f7f5 fb3e 	bl	8fa4 <__stack_chk_fail>
   13928:	f107 0718 	add.w	r7, r7, #24
   1392c:	46bd      	mov	sp, r7
   1392e:	bd80      	pop	{r7, pc}

00013930 <queFindTlv>:
 * \param val (O) pointer to the data containing tag value
 * \return number of bytes retrieved; 0 if tag is not found in the queue
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
word queFindTlv(tQueue * que, card tag, byte * val) {
   13930:	b580      	push	{r7, lr}
   13932:	b088      	sub	sp, #32
   13934:	af00      	add	r7, sp, #0
   13936:	60f8      	str	r0, [r7, #12]
   13938:	60b9      	str	r1, [r7, #8]
   1393a:	607a      	str	r2, [r7, #4]
   1393c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13940:	f2c0 0302 	movt	r3, #2
   13944:	681b      	ldr	r3, [r3, #0]
   13946:	61fb      	str	r3, [r7, #28]
	card tmp;
	word len = 0;
   13948:	2300      	movs	r3, #0
   1394a:	82fb      	strh	r3, [r7, #22]

	queRewind(que);
   1394c:	68f8      	ldr	r0, [r7, #12]
   1394e:	f7ff ff0f 	bl	13770 <queRewind>
	while(queLen(que)) {
   13952:	e00f      	b.n	13974 <queFindTlv+0x44>
		queGetTlv(que, &tmp, &len, val);
   13954:	f107 0218 	add.w	r2, r7, #24
   13958:	f107 0316 	add.w	r3, r7, #22
   1395c:	68f8      	ldr	r0, [r7, #12]
   1395e:	4611      	mov	r1, r2
   13960:	461a      	mov	r2, r3
   13962:	687b      	ldr	r3, [r7, #4]
   13964:	f7ff ffb6 	bl	138d4 <queGetTlv>
		VERIFY(len <= 256);

		if(tag == tmp) {
   13968:	69bb      	ldr	r3, [r7, #24]
   1396a:	68ba      	ldr	r2, [r7, #8]
   1396c:	429a      	cmp	r2, r3
   1396e:	d101      	bne.n	13974 <queFindTlv+0x44>
			return len;
   13970:	8afb      	ldrh	r3, [r7, #22]
   13972:	e00a      	b.n	1398a <queFindTlv+0x5a>
word queFindTlv(tQueue * que, card tag, byte * val) {
	card tmp;
	word len = 0;

	queRewind(que);
	while(queLen(que)) {
   13974:	68f8      	ldr	r0, [r7, #12]
   13976:	f7ff fedf 	bl	13738 <queLen>
   1397a:	4603      	mov	r3, r0
   1397c:	2b00      	cmp	r3, #0
   1397e:	d1e9      	bne.n	13954 <queFindTlv+0x24>
		if(tag == tmp) {
			return len;
		}
	}

	len = 0;
   13980:	2300      	movs	r3, #0
   13982:	82fb      	strh	r3, [r7, #22]
	val = 0;
   13984:	2300      	movs	r3, #0
   13986:	607b      	str	r3, [r7, #4]
	return len;
   13988:	8afb      	ldrh	r3, [r7, #22]
}
   1398a:	4618      	mov	r0, r3
   1398c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13990:	f2c0 0302 	movt	r3, #2
   13994:	69fa      	ldr	r2, [r7, #28]
   13996:	681b      	ldr	r3, [r3, #0]
   13998:	429a      	cmp	r2, r3
   1399a:	d001      	beq.n	139a0 <queFindTlv+0x70>
   1399c:	f7f5 fb02 	bl	8fa4 <__stack_chk_fail>
   139a0:	f107 0720 	add.w	r7, r7, #32
   139a4:	46bd      	mov	sp, r7
   139a6:	bd80      	pop	{r7, pc}

000139a8 <queMergeTlv>:
 * \param que2 (I) TLV data to be copied
 * \return number of elements in merged queue if OK; negative value if failure
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
int queMergeTlv(tQueue * que1, tQueue * que2) {
   139a8:	b590      	push	{r4, r7, lr}
   139aa:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
   139ae:	af00      	add	r7, sp, #0
   139b0:	1d3b      	adds	r3, r7, #4
   139b2:	6018      	str	r0, [r3, #0]
   139b4:	463b      	mov	r3, r7
   139b6:	6019      	str	r1, [r3, #0]
   139b8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   139bc:	f2c0 0302 	movt	r3, #2
   139c0:	681b      	ldr	r3, [r3, #0]
   139c2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	card tag1, tag2;
	word len1, len2;
	byte buf1[256], buf2[256];

	//Check que1 if tags from que2 are already present
	queRewind(que2);
   139c6:	463b      	mov	r3, r7
   139c8:	6818      	ldr	r0, [r3, #0]
   139ca:	f7ff fed1 	bl	13770 <queRewind>
	while(queLen(que2)) {
   139ce:	e054      	b.n	13a7a <queMergeTlv+0xd2>
		memset(buf2, 0, sizeof(buf2));
   139d0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
   139d4:	4618      	mov	r0, r3
   139d6:	2100      	movs	r1, #0
   139d8:	f44f 7280 	mov.w	r2, #256	; 0x100
   139dc:	f7f5 e8ee 	blx	8bbc <_init+0x5c>
		ret = queGetTlv(que2, &tag2, &len2, buf2);
   139e0:	f107 0418 	add.w	r4, r7, #24
   139e4:	4638      	mov	r0, r7
   139e6:	f107 0114 	add.w	r1, r7, #20
   139ea:	f107 020e 	add.w	r2, r7, #14
   139ee:	f507 738e 	add.w	r3, r7, #284	; 0x11c
   139f2:	6800      	ldr	r0, [r0, #0]
   139f4:	f7ff ff6e 	bl	138d4 <queGetTlv>
   139f8:	6020      	str	r0, [r4, #0]
		VERIFY(ret >= 0);
		VERIFY(ret == len2);
		CHECK(len2 <= 256, lblKO);
   139fa:	f107 030e 	add.w	r3, r7, #14
   139fe:	881b      	ldrh	r3, [r3, #0]
   13a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   13a04:	d84e      	bhi.n	13aa4 <queMergeTlv+0xfc>

		queRewind(que1);
   13a06:	1d3b      	adds	r3, r7, #4
   13a08:	6818      	ldr	r0, [r3, #0]
   13a0a:	f7ff feb1 	bl	13770 <queRewind>
		while(queLen(que1)) {
   13a0e:	e021      	b.n	13a54 <queMergeTlv+0xac>
			memset(buf1, 0, sizeof(buf1));
   13a10:	f107 031c 	add.w	r3, r7, #28
   13a14:	4618      	mov	r0, r3
   13a16:	2100      	movs	r1, #0
   13a18:	f44f 7280 	mov.w	r2, #256	; 0x100
   13a1c:	f7f5 e8ce 	blx	8bbc <_init+0x5c>
			ret = queGetTlv(que1, &tag1, &len1, buf1);
   13a20:	f107 0418 	add.w	r4, r7, #24
   13a24:	1d38      	adds	r0, r7, #4
   13a26:	f107 0110 	add.w	r1, r7, #16
   13a2a:	f107 020c 	add.w	r2, r7, #12
   13a2e:	f107 031c 	add.w	r3, r7, #28
   13a32:	6800      	ldr	r0, [r0, #0]
   13a34:	f7ff ff4e 	bl	138d4 <queGetTlv>
   13a38:	6020      	str	r0, [r4, #0]
			VERIFY(ret >= 0);
			VERIFY(ret == len1);
			CHECK(len1 <= 256, lblKO);
   13a3a:	f107 030c 	add.w	r3, r7, #12
   13a3e:	881b      	ldrh	r3, [r3, #0]
   13a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   13a44:	d82e      	bhi.n	13aa4 <queMergeTlv+0xfc>

			if(tag1 == tag2) {
   13a46:	f107 0310 	add.w	r3, r7, #16
   13a4a:	681a      	ldr	r2, [r3, #0]
   13a4c:	f107 0314 	add.w	r3, r7, #20
   13a50:	681b      	ldr	r3, [r3, #0]
   13a52:	429a      	cmp	r2, r3
		VERIFY(ret >= 0);
		VERIFY(ret == len2);
		CHECK(len2 <= 256, lblKO);

		queRewind(que1);
		while(queLen(que1)) {
   13a54:	1d3b      	adds	r3, r7, #4
   13a56:	6818      	ldr	r0, [r3, #0]
   13a58:	f7ff fe6e 	bl	13738 <queLen>
   13a5c:	4603      	mov	r3, r0
   13a5e:	2b00      	cmp	r3, #0
   13a60:	d1d6      	bne.n	13a10 <queMergeTlv+0x68>
			if(tag1 == tag2) {
				continue;
			}
		}

		quePutTlv(que1, tag2, len2, buf2);  //add tag if not present on main queue
   13a62:	f107 0314 	add.w	r3, r7, #20
   13a66:	6819      	ldr	r1, [r3, #0]
   13a68:	f107 030e 	add.w	r3, r7, #14
   13a6c:	881a      	ldrh	r2, [r3, #0]
   13a6e:	1d38      	adds	r0, r7, #4
   13a70:	f507 738e 	add.w	r3, r7, #284	; 0x11c
   13a74:	6800      	ldr	r0, [r0, #0]
   13a76:	f7ff fec3 	bl	13800 <quePutTlv>
	word len1, len2;
	byte buf1[256], buf2[256];

	//Check que1 if tags from que2 are already present
	queRewind(que2);
	while(queLen(que2)) {
   13a7a:	463b      	mov	r3, r7
   13a7c:	6818      	ldr	r0, [r3, #0]
   13a7e:	f7ff fe5b 	bl	13738 <queLen>
   13a82:	4603      	mov	r3, r0
   13a84:	2b00      	cmp	r3, #0
   13a86:	d1a3      	bne.n	139d0 <queMergeTlv+0x28>
		}

		quePutTlv(que1, tag2, len2, buf2);  //add tag if not present on main queue
	}

	queRewind(que1);
   13a88:	1d3b      	adds	r3, r7, #4
   13a8a:	6818      	ldr	r0, [r3, #0]
   13a8c:	f7ff fe70 	bl	13770 <queRewind>
	ret = queLen(que1);
   13a90:	1d3b      	adds	r3, r7, #4
   13a92:	6818      	ldr	r0, [r3, #0]
   13a94:	f7ff fe50 	bl	13738 <queLen>
   13a98:	4603      	mov	r3, r0
   13a9a:	461a      	mov	r2, r3
   13a9c:	f107 0318 	add.w	r3, r7, #24
   13aa0:	601a      	str	r2, [r3, #0]
	goto lblEnd;
   13aa2:	e004      	b.n	13aae <queMergeTlv+0x106>

	lblKO:
	ret = -1;
   13aa4:	f107 0318 	add.w	r3, r7, #24
   13aa8:	f04f 32ff 	mov.w	r2, #4294967295
   13aac:	601a      	str	r2, [r3, #0]
	lblEnd:
	return ret;
   13aae:	f107 0318 	add.w	r3, r7, #24
   13ab2:	681b      	ldr	r3, [r3, #0]
}
   13ab4:	4618      	mov	r0, r3
   13ab6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13aba:	f2c0 0302 	movt	r3, #2
   13abe:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
   13ac2:	681b      	ldr	r3, [r3, #0]
   13ac4:	429a      	cmp	r2, r3
   13ac6:	d001      	beq.n	13acc <queMergeTlv+0x124>
   13ac8:	f7f5 fa6c 	bl	8fa4 <__stack_chk_fail>
   13acc:	f507 7709 	add.w	r7, r7, #548	; 0x224
   13ad0:	46bd      	mov	sp, r7
   13ad2:	bd90      	pop	{r4, r7, pc}

00013ad4 <bitOn>:
 * \param idx (I) Related bit number.
 * \return N/A
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
void bitOn(byte * buf, byte idx) {
   13ad4:	b580      	push	{r7, lr}
   13ad6:	b084      	sub	sp, #16
   13ad8:	af00      	add	r7, sp, #0
   13ada:	6078      	str	r0, [r7, #4]
   13adc:	460b      	mov	r3, r1
   13ade:	70fb      	strb	r3, [r7, #3]
   13ae0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13ae4:	f2c0 0302 	movt	r3, #2
   13ae8:	681b      	ldr	r3, [r3, #0]
   13aea:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	VERIFY(idx);
	idx--;
   13aec:	78fb      	ldrb	r3, [r7, #3]
   13aee:	3b01      	subs	r3, #1
   13af0:	70fb      	strb	r3, [r7, #3]
	while(idx >= 8) {
   13af2:	e005      	b.n	13b00 <bitOn+0x2c>
		buf++;
   13af4:	687b      	ldr	r3, [r7, #4]
   13af6:	3301      	adds	r3, #1
   13af8:	607b      	str	r3, [r7, #4]
		idx -= 8;
   13afa:	78fb      	ldrb	r3, [r7, #3]
   13afc:	3b08      	subs	r3, #8
   13afe:	70fb      	strb	r3, [r7, #3]
 */
void bitOn(byte * buf, byte idx) {
	VERIFY(buf);
	VERIFY(idx);
	idx--;
	while(idx >= 8) {
   13b00:	78fb      	ldrb	r3, [r7, #3]
   13b02:	2b07      	cmp	r3, #7
   13b04:	d8f6      	bhi.n	13af4 <bitOn+0x20>
		buf++;
		idx -= 8;
	}
	*buf |= (0x01 << (7 - idx));
   13b06:	687b      	ldr	r3, [r7, #4]
   13b08:	781b      	ldrb	r3, [r3, #0]
   13b0a:	b2da      	uxtb	r2, r3
   13b0c:	78fb      	ldrb	r3, [r7, #3]
   13b0e:	f1c3 0307 	rsb	r3, r3, #7
   13b12:	2101      	movs	r1, #1
   13b14:	fa01 f303 	lsl.w	r3, r1, r3
   13b18:	b2db      	uxtb	r3, r3
   13b1a:	4313      	orrs	r3, r2
   13b1c:	b2db      	uxtb	r3, r3
   13b1e:	b2da      	uxtb	r2, r3
   13b20:	687b      	ldr	r3, [r7, #4]
   13b22:	701a      	strb	r2, [r3, #0]
}
   13b24:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13b28:	f2c0 0302 	movt	r3, #2
   13b2c:	68fa      	ldr	r2, [r7, #12]
   13b2e:	681b      	ldr	r3, [r3, #0]
   13b30:	429a      	cmp	r2, r3
   13b32:	d001      	beq.n	13b38 <bitOn+0x64>
   13b34:	f7f5 fa36 	bl	8fa4 <__stack_chk_fail>
   13b38:	f107 0710 	add.w	r7, r7, #16
   13b3c:	46bd      	mov	sp, r7
   13b3e:	bd80      	pop	{r7, pc}

00013b40 <bitOff>:
 * \param       idx (I) Related bit number.
 * \return N/A
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
void bitOff(byte * buf, byte idx) {
   13b40:	b580      	push	{r7, lr}
   13b42:	b084      	sub	sp, #16
   13b44:	af00      	add	r7, sp, #0
   13b46:	6078      	str	r0, [r7, #4]
   13b48:	460b      	mov	r3, r1
   13b4a:	70fb      	strb	r3, [r7, #3]
   13b4c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13b50:	f2c0 0302 	movt	r3, #2
   13b54:	681b      	ldr	r3, [r3, #0]
   13b56:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	VERIFY(idx);
	idx--;
   13b58:	78fb      	ldrb	r3, [r7, #3]
   13b5a:	3b01      	subs	r3, #1
   13b5c:	70fb      	strb	r3, [r7, #3]
	while(idx >= 8) {
   13b5e:	e005      	b.n	13b6c <bitOff+0x2c>
		buf++;
   13b60:	687b      	ldr	r3, [r7, #4]
   13b62:	3301      	adds	r3, #1
   13b64:	607b      	str	r3, [r7, #4]
		idx -= 8;
   13b66:	78fb      	ldrb	r3, [r7, #3]
   13b68:	3b08      	subs	r3, #8
   13b6a:	70fb      	strb	r3, [r7, #3]
 */
void bitOff(byte * buf, byte idx) {
	VERIFY(buf);
	VERIFY(idx);
	idx--;
	while(idx >= 8) {
   13b6c:	78fb      	ldrb	r3, [r7, #3]
   13b6e:	2b07      	cmp	r3, #7
   13b70:	d8f6      	bhi.n	13b60 <bitOff+0x20>
		buf++;
		idx -= 8;
	}
	*buf &= ~(0x01 << (7 - idx));
   13b72:	687b      	ldr	r3, [r7, #4]
   13b74:	781b      	ldrb	r3, [r3, #0]
   13b76:	b2da      	uxtb	r2, r3
   13b78:	78fb      	ldrb	r3, [r7, #3]
   13b7a:	f1c3 0307 	rsb	r3, r3, #7
   13b7e:	2101      	movs	r1, #1
   13b80:	fa01 f303 	lsl.w	r3, r1, r3
   13b84:	b2db      	uxtb	r3, r3
   13b86:	43db      	mvns	r3, r3
   13b88:	b2db      	uxtb	r3, r3
   13b8a:	4013      	ands	r3, r2
   13b8c:	b2db      	uxtb	r3, r3
   13b8e:	b2da      	uxtb	r2, r3
   13b90:	687b      	ldr	r3, [r7, #4]
   13b92:	701a      	strb	r2, [r3, #0]
}
   13b94:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13b98:	f2c0 0302 	movt	r3, #2
   13b9c:	68fa      	ldr	r2, [r7, #12]
   13b9e:	681b      	ldr	r3, [r3, #0]
   13ba0:	429a      	cmp	r2, r3
   13ba2:	d001      	beq.n	13ba8 <bitOff+0x68>
   13ba4:	f7f5 f9fe 	bl	8fa4 <__stack_chk_fail>
   13ba8:	f107 0710 	add.w	r7, r7, #16
   13bac:	46bd      	mov	sp, r7
   13bae:	bd80      	pop	{r7, pc}

00013bb0 <bitTest>:
 *    - zero if the related bit is off.
 *    - non-zero otherwise.
 * \header sys\\sys.h
 * \source sys\\tbx.c
 */
byte bitTest(const byte * buf, byte idx) {
   13bb0:	b580      	push	{r7, lr}
   13bb2:	b084      	sub	sp, #16
   13bb4:	af00      	add	r7, sp, #0
   13bb6:	6078      	str	r0, [r7, #4]
   13bb8:	460b      	mov	r3, r1
   13bba:	70fb      	strb	r3, [r7, #3]
   13bbc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13bc0:	f2c0 0302 	movt	r3, #2
   13bc4:	681b      	ldr	r3, [r3, #0]
   13bc6:	60fb      	str	r3, [r7, #12]
	VERIFY(buf);
	VERIFY(idx);
	idx--;
   13bc8:	78fb      	ldrb	r3, [r7, #3]
   13bca:	3b01      	subs	r3, #1
   13bcc:	70fb      	strb	r3, [r7, #3]
	while(idx >= 8) {
   13bce:	e005      	b.n	13bdc <bitTest+0x2c>
		buf++;
   13bd0:	687b      	ldr	r3, [r7, #4]
   13bd2:	3301      	adds	r3, #1
   13bd4:	607b      	str	r3, [r7, #4]
		idx -= 8;
   13bd6:	78fb      	ldrb	r3, [r7, #3]
   13bd8:	3b08      	subs	r3, #8
   13bda:	70fb      	strb	r3, [r7, #3]
 */
byte bitTest(const byte * buf, byte idx) {
	VERIFY(buf);
	VERIFY(idx);
	idx--;
	while(idx >= 8) {
   13bdc:	78fb      	ldrb	r3, [r7, #3]
   13bde:	2b07      	cmp	r3, #7
   13be0:	d8f6      	bhi.n	13bd0 <bitTest+0x20>
		buf++;
		idx -= 8;
	}
	return ((*buf) >> (7 - idx)) & 0x01;
   13be2:	687b      	ldr	r3, [r7, #4]
   13be4:	781b      	ldrb	r3, [r3, #0]
   13be6:	461a      	mov	r2, r3
   13be8:	78fb      	ldrb	r3, [r7, #3]
   13bea:	f1c3 0307 	rsb	r3, r3, #7
   13bee:	fa42 f303 	asr.w	r3, r2, r3
   13bf2:	b2db      	uxtb	r3, r3
   13bf4:	f003 0301 	and.w	r3, r3, #1
   13bf8:	b2db      	uxtb	r3, r3
}
   13bfa:	4618      	mov	r0, r3
   13bfc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13c00:	f2c0 0302 	movt	r3, #2
   13c04:	68fa      	ldr	r2, [r7, #12]
   13c06:	681b      	ldr	r3, [r3, #0]
   13c08:	429a      	cmp	r2, r3
   13c0a:	d001      	beq.n	13c10 <bitTest+0x60>
   13c0c:	f7f5 f9ca 	bl	8fa4 <__stack_chk_fail>
   13c10:	f107 0710 	add.w	r7, r7, #16
   13c14:	46bd      	mov	sp, r7
   13c16:	bd80      	pop	{r7, pc}

00013c18 <tbxParity>:
 * \param typ (I) Even or Odd parity
 * \return no
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\tbx.c
 */
void tbxParity(byte * buf, word dim, byte par, byte typ) {  //set parity bits
   13c18:	b580      	push	{r7, lr}
   13c1a:	b084      	sub	sp, #16
   13c1c:	af00      	add	r7, sp, #0
   13c1e:	6078      	str	r0, [r7, #4]
   13c20:	8079      	strh	r1, [r7, #2]
   13c22:	707a      	strb	r2, [r7, #1]
   13c24:	703b      	strb	r3, [r7, #0]
   13c26:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13c2a:	f2c0 0302 	movt	r3, #2
   13c2e:	681b      	ldr	r3, [r3, #0]
   13c30:	60fb      	str	r3, [r7, #12]
	byte cnt, idx;

	VERIFY(buf);
	while(dim--) {
   13c32:	e045      	b.n	13cc0 <tbxParity+0xa8>
		cnt = 0;
   13c34:	2300      	movs	r3, #0
   13c36:	72bb      	strb	r3, [r7, #10]
		for (idx = 1; idx <= 8; idx++) {
   13c38:	2301      	movs	r3, #1
   13c3a:	72fb      	strb	r3, [r7, #11]
   13c3c:	e013      	b.n	13c66 <tbxParity+0x4e>
			if(idx == par)
   13c3e:	7afa      	ldrb	r2, [r7, #11]
   13c40:	787b      	ldrb	r3, [r7, #1]
   13c42:	429a      	cmp	r2, r3
   13c44:	d00b      	beq.n	13c5e <tbxParity+0x46>
				continue;
			if(bitTest(buf, idx))
   13c46:	7afb      	ldrb	r3, [r7, #11]
   13c48:	6878      	ldr	r0, [r7, #4]
   13c4a:	4619      	mov	r1, r3
   13c4c:	f7ff ffb0 	bl	13bb0 <bitTest>
   13c50:	4603      	mov	r3, r0
   13c52:	2b00      	cmp	r3, #0
   13c54:	d004      	beq.n	13c60 <tbxParity+0x48>
				cnt++;
   13c56:	7abb      	ldrb	r3, [r7, #10]
   13c58:	3301      	adds	r3, #1
   13c5a:	72bb      	strb	r3, [r7, #10]
   13c5c:	e000      	b.n	13c60 <tbxParity+0x48>
	VERIFY(buf);
	while(dim--) {
		cnt = 0;
		for (idx = 1; idx <= 8; idx++) {
			if(idx == par)
				continue;
   13c5e:	bf00      	nop
	byte cnt, idx;

	VERIFY(buf);
	while(dim--) {
		cnt = 0;
		for (idx = 1; idx <= 8; idx++) {
   13c60:	7afb      	ldrb	r3, [r7, #11]
   13c62:	3301      	adds	r3, #1
   13c64:	72fb      	strb	r3, [r7, #11]
   13c66:	7afb      	ldrb	r3, [r7, #11]
   13c68:	2b08      	cmp	r3, #8
   13c6a:	d9e8      	bls.n	13c3e <tbxParity+0x26>
			if(idx == par)
				continue;
			if(bitTest(buf, idx))
				cnt++;
		}
		switch (typ) {
   13c6c:	783b      	ldrb	r3, [r7, #0]
   13c6e:	2b45      	cmp	r3, #69	; 0x45
   13c70:	d111      	bne.n	13c96 <tbxParity+0x7e>
		case 'E':
			if(cnt % 2)
   13c72:	7abb      	ldrb	r3, [r7, #10]
   13c74:	f003 0301 	and.w	r3, r3, #1
   13c78:	b2db      	uxtb	r3, r3
   13c7a:	2b00      	cmp	r3, #0
   13c7c:	d005      	beq.n	13c8a <tbxParity+0x72>
				bitOff(buf, par);
   13c7e:	787b      	ldrb	r3, [r7, #1]
   13c80:	6878      	ldr	r0, [r7, #4]
   13c82:	4619      	mov	r1, r3
   13c84:	f7ff ff5c 	bl	13b40 <bitOff>
			else
				bitOn(buf, par);
			break;
   13c88:	e017      	b.n	13cba <tbxParity+0xa2>
		switch (typ) {
		case 'E':
			if(cnt % 2)
				bitOff(buf, par);
			else
				bitOn(buf, par);
   13c8a:	787b      	ldrb	r3, [r7, #1]
   13c8c:	6878      	ldr	r0, [r7, #4]
   13c8e:	4619      	mov	r1, r3
   13c90:	f7ff ff20 	bl	13ad4 <bitOn>
			break;
   13c94:	e011      	b.n	13cba <tbxParity+0xa2>
		case 'O':
		default:
			if(cnt % 2)
   13c96:	7abb      	ldrb	r3, [r7, #10]
   13c98:	f003 0301 	and.w	r3, r3, #1
   13c9c:	b2db      	uxtb	r3, r3
   13c9e:	2b00      	cmp	r3, #0
   13ca0:	d005      	beq.n	13cae <tbxParity+0x96>
				bitOn(buf, par);
   13ca2:	787b      	ldrb	r3, [r7, #1]
   13ca4:	6878      	ldr	r0, [r7, #4]
   13ca6:	4619      	mov	r1, r3
   13ca8:	f7ff ff14 	bl	13ad4 <bitOn>
			else
				bitOff(buf, par);
			break;
   13cac:	e004      	b.n	13cb8 <tbxParity+0xa0>
		case 'O':
		default:
			if(cnt % 2)
				bitOn(buf, par);
			else
				bitOff(buf, par);
   13cae:	787b      	ldrb	r3, [r7, #1]
   13cb0:	6878      	ldr	r0, [r7, #4]
   13cb2:	4619      	mov	r1, r3
   13cb4:	f7ff ff44 	bl	13b40 <bitOff>
			break;
   13cb8:	bf00      	nop
		}

		buf++;
   13cba:	687b      	ldr	r3, [r7, #4]
   13cbc:	3301      	adds	r3, #1
   13cbe:	607b      	str	r3, [r7, #4]
 */
void tbxParity(byte * buf, word dim, byte par, byte typ) {  //set parity bits
	byte cnt, idx;

	VERIFY(buf);
	while(dim--) {
   13cc0:	887b      	ldrh	r3, [r7, #2]
   13cc2:	2b00      	cmp	r3, #0
   13cc4:	bf0c      	ite	eq
   13cc6:	2300      	moveq	r3, #0
   13cc8:	2301      	movne	r3, #1
   13cca:	b2db      	uxtb	r3, r3
   13ccc:	887a      	ldrh	r2, [r7, #2]
   13cce:	3a01      	subs	r2, #1
   13cd0:	807a      	strh	r2, [r7, #2]
   13cd2:	2b00      	cmp	r3, #0
   13cd4:	d1ae      	bne.n	13c34 <tbxParity+0x1c>
			break;
		}

		buf++;
	}
}
   13cd6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13cda:	f2c0 0302 	movt	r3, #2
   13cde:	68fa      	ldr	r2, [r7, #12]
   13ce0:	681b      	ldr	r3, [r3, #0]
   13ce2:	429a      	cmp	r2, r3
   13ce4:	d001      	beq.n	13cea <tbxParity+0xd2>
   13ce6:	f7f5 f95d 	bl	8fa4 <__stack_chk_fail>
   13cea:	f107 0710 	add.w	r7, r7, #16
   13cee:	46bd      	mov	sp, r7
   13cf0:	bd80      	pop	{r7, pc}
   13cf2:	bf00      	nop

00013cf4 <tbxCheckParity>:
 * \param typ (I) Even or Odd parity
 * \return 1 if parity is OK, 0 if parity NOK;
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\tbx.c
 */
byte tbxCheckParity(byte * buf, word dim, byte par, byte typ) { //check parity bits
   13cf4:	b580      	push	{r7, lr}
   13cf6:	b084      	sub	sp, #16
   13cf8:	af00      	add	r7, sp, #0
   13cfa:	6078      	str	r0, [r7, #4]
   13cfc:	8079      	strh	r1, [r7, #2]
   13cfe:	707a      	strb	r2, [r7, #1]
   13d00:	703b      	strb	r3, [r7, #0]
   13d02:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13d06:	f2c0 0302 	movt	r3, #2
   13d0a:	681b      	ldr	r3, [r3, #0]
   13d0c:	60fb      	str	r3, [r7, #12]
	byte ret;
	byte cnt, idx;

	VERIFY(buf);
	ret = 1;
   13d0e:	2301      	movs	r3, #1
   13d10:	727b      	strb	r3, [r7, #9]
	while(dim--) {
   13d12:	e03b      	b.n	13d8c <tbxCheckParity+0x98>
		cnt = 0;
   13d14:	2300      	movs	r3, #0
   13d16:	72bb      	strb	r3, [r7, #10]
		for (idx = 1; idx <= 8; idx++) {
   13d18:	2301      	movs	r3, #1
   13d1a:	72fb      	strb	r3, [r7, #11]
   13d1c:	e013      	b.n	13d46 <tbxCheckParity+0x52>
			if(idx == par)
   13d1e:	7afa      	ldrb	r2, [r7, #11]
   13d20:	787b      	ldrb	r3, [r7, #1]
   13d22:	429a      	cmp	r2, r3
   13d24:	d00b      	beq.n	13d3e <tbxCheckParity+0x4a>
				continue;
			if(bitTest(buf, idx))
   13d26:	7afb      	ldrb	r3, [r7, #11]
   13d28:	6878      	ldr	r0, [r7, #4]
   13d2a:	4619      	mov	r1, r3
   13d2c:	f7ff ff40 	bl	13bb0 <bitTest>
   13d30:	4603      	mov	r3, r0
   13d32:	2b00      	cmp	r3, #0
   13d34:	d004      	beq.n	13d40 <tbxCheckParity+0x4c>
				cnt++;
   13d36:	7abb      	ldrb	r3, [r7, #10]
   13d38:	3301      	adds	r3, #1
   13d3a:	72bb      	strb	r3, [r7, #10]
   13d3c:	e000      	b.n	13d40 <tbxCheckParity+0x4c>
	ret = 1;
	while(dim--) {
		cnt = 0;
		for (idx = 1; idx <= 8; idx++) {
			if(idx == par)
				continue;
   13d3e:	bf00      	nop

	VERIFY(buf);
	ret = 1;
	while(dim--) {
		cnt = 0;
		for (idx = 1; idx <= 8; idx++) {
   13d40:	7afb      	ldrb	r3, [r7, #11]
   13d42:	3301      	adds	r3, #1
   13d44:	72fb      	strb	r3, [r7, #11]
   13d46:	7afb      	ldrb	r3, [r7, #11]
   13d48:	2b08      	cmp	r3, #8
   13d4a:	d9e8      	bls.n	13d1e <tbxCheckParity+0x2a>
			if(idx == par)
				continue;
			if(bitTest(buf, idx))
				cnt++;
		}
		bitTest(buf, par);
   13d4c:	787b      	ldrb	r3, [r7, #1]
   13d4e:	6878      	ldr	r0, [r7, #4]
   13d50:	4619      	mov	r1, r3
   13d52:	f7ff ff2d 	bl	13bb0 <bitTest>
		switch (typ) {
   13d56:	783b      	ldrb	r3, [r7, #0]
   13d58:	2b4f      	cmp	r3, #79	; 0x4f
   13d5a:	d108      	bne.n	13d6e <tbxCheckParity+0x7a>
		case 'O':
			if(!(cnt % 2))
   13d5c:	7abb      	ldrb	r3, [r7, #10]
   13d5e:	f003 0301 	and.w	r3, r3, #1
   13d62:	b2db      	uxtb	r3, r3
   13d64:	2b00      	cmp	r3, #0
   13d66:	d10b      	bne.n	13d80 <tbxCheckParity+0x8c>
				ret = 0;
   13d68:	2300      	movs	r3, #0
   13d6a:	727b      	strb	r3, [r7, #9]
			break;
   13d6c:	e008      	b.n	13d80 <tbxCheckParity+0x8c>
		case 'E':
		default:
			if(cnt % 2)
   13d6e:	7abb      	ldrb	r3, [r7, #10]
   13d70:	f003 0301 	and.w	r3, r3, #1
   13d74:	b2db      	uxtb	r3, r3
   13d76:	2b00      	cmp	r3, #0
   13d78:	d004      	beq.n	13d84 <tbxCheckParity+0x90>
				ret = 0;
   13d7a:	2300      	movs	r3, #0
   13d7c:	727b      	strb	r3, [r7, #9]
			break;
   13d7e:	e001      	b.n	13d84 <tbxCheckParity+0x90>
		bitTest(buf, par);
		switch (typ) {
		case 'O':
			if(!(cnt % 2))
				ret = 0;
			break;
   13d80:	bf00      	nop
   13d82:	e000      	b.n	13d86 <tbxCheckParity+0x92>
		case 'E':
		default:
			if(cnt % 2)
				ret = 0;
			break;
   13d84:	bf00      	nop
		}
		buf++;
   13d86:	687b      	ldr	r3, [r7, #4]
   13d88:	3301      	adds	r3, #1
   13d8a:	607b      	str	r3, [r7, #4]
	byte ret;
	byte cnt, idx;

	VERIFY(buf);
	ret = 1;
	while(dim--) {
   13d8c:	887b      	ldrh	r3, [r7, #2]
   13d8e:	2b00      	cmp	r3, #0
   13d90:	bf0c      	ite	eq
   13d92:	2300      	moveq	r3, #0
   13d94:	2301      	movne	r3, #1
   13d96:	b2db      	uxtb	r3, r3
   13d98:	887a      	ldrh	r2, [r7, #2]
   13d9a:	3a01      	subs	r2, #1
   13d9c:	807a      	strh	r2, [r7, #2]
   13d9e:	2b00      	cmp	r3, #0
   13da0:	d1b8      	bne.n	13d14 <tbxCheckParity+0x20>
				ret = 0;
			break;
		}
		buf++;
	}
	return ret;
   13da2:	7a7b      	ldrb	r3, [r7, #9]
}
   13da4:	4618      	mov	r0, r3
   13da6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13daa:	f2c0 0302 	movt	r3, #2
   13dae:	68fa      	ldr	r2, [r7, #12]
   13db0:	681b      	ldr	r3, [r3, #0]
   13db2:	429a      	cmp	r2, r3
   13db4:	d001      	beq.n	13dba <tbxCheckParity+0xc6>
   13db6:	f7f5 f8f5 	bl	8fa4 <__stack_chk_fail>
   13dba:	f107 0710 	add.w	r7, r7, #16
   13dbe:	46bd      	mov	sp, r7
   13dc0:	bd80      	pop	{r7, pc}
   13dc2:	bf00      	nop

00013dc4 <fmtSbs>:
 *    - strlen(dst)
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 * \test tcab0024.c
 */
int fmtSbs(char *dst, const char *src, byte ofs, byte len) {
   13dc4:	b580      	push	{r7, lr}
   13dc6:	b086      	sub	sp, #24
   13dc8:	af00      	add	r7, sp, #0
   13dca:	60f8      	str	r0, [r7, #12]
   13dcc:	60b9      	str	r1, [r7, #8]
   13dce:	71fa      	strb	r2, [r7, #7]
   13dd0:	71bb      	strb	r3, [r7, #6]
   13dd2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13dd6:	f2c0 0302 	movt	r3, #2
   13dda:	681b      	ldr	r3, [r3, #0]
   13ddc:	617b      	str	r3, [r7, #20]
	VERIFY(dst);
	VERIFY(src);

	memcpy(dst, src + ofs, len);
   13dde:	79fb      	ldrb	r3, [r7, #7]
   13de0:	68ba      	ldr	r2, [r7, #8]
   13de2:	18d2      	adds	r2, r2, r3
   13de4:	79bb      	ldrb	r3, [r7, #6]
   13de6:	68f8      	ldr	r0, [r7, #12]
   13de8:	4611      	mov	r1, r2
   13dea:	461a      	mov	r2, r3
   13dec:	f7f4 ef44 	blx	8c78 <_init+0x118>
	dst[len] = 0;
   13df0:	79bb      	ldrb	r3, [r7, #6]
   13df2:	68fa      	ldr	r2, [r7, #12]
   13df4:	18d3      	adds	r3, r2, r3
   13df6:	2200      	movs	r2, #0
   13df8:	701a      	strb	r2, [r3, #0]

	return strlen(dst);
   13dfa:	68f8      	ldr	r0, [r7, #12]
   13dfc:	f7f4 ef42 	blx	8c84 <_init+0x124>
   13e00:	4603      	mov	r3, r0
}
   13e02:	4618      	mov	r0, r3
   13e04:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13e08:	f2c0 0302 	movt	r3, #2
   13e0c:	697a      	ldr	r2, [r7, #20]
   13e0e:	681b      	ldr	r3, [r3, #0]
   13e10:	429a      	cmp	r2, r3
   13e12:	d001      	beq.n	13e18 <fmtSbs+0x54>
   13e14:	f7f5 f8c6 	bl	8fa4 <__stack_chk_fail>
   13e18:	f107 0718 	add.w	r7, r7, #24
   13e1c:	46bd      	mov	sp, r7
   13e1e:	bd80      	pop	{r7, pc}

00013e20 <fmtTok>:
 *    - strlen(dst)
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 * \test tcab0024.c
 */
int fmtTok(char *dst, const char *src, const char *sep) {
   13e20:	b580      	push	{r7, lr}
   13e22:	b088      	sub	sp, #32
   13e24:	af00      	add	r7, sp, #0
   13e26:	60f8      	str	r0, [r7, #12]
   13e28:	60b9      	str	r1, [r7, #8]
   13e2a:	607a      	str	r2, [r7, #4]
   13e2c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13e30:	f2c0 0302 	movt	r3, #2
   13e34:	681b      	ldr	r3, [r3, #0]
   13e36:	61fb      	str	r3, [r7, #28]
	const char *ptr;

	VERIFY(src);
	VERIFY(sep);

	len = 0;
   13e38:	2300      	movs	r3, #0
   13e3a:	617b      	str	r3, [r7, #20]
	while(*src) {
   13e3c:	e027      	b.n	13e8e <fmtTok+0x6e>
		ptr = sep;
   13e3e:	687b      	ldr	r3, [r7, #4]
   13e40:	61bb      	str	r3, [r7, #24]
		while(*ptr) {
   13e42:	e008      	b.n	13e56 <fmtTok+0x36>
			if(*src == *ptr)
   13e44:	68bb      	ldr	r3, [r7, #8]
   13e46:	781a      	ldrb	r2, [r3, #0]
   13e48:	69bb      	ldr	r3, [r7, #24]
   13e4a:	781b      	ldrb	r3, [r3, #0]
   13e4c:	429a      	cmp	r2, r3
   13e4e:	d007      	beq.n	13e60 <fmtTok+0x40>
				break;
			ptr++;
   13e50:	69bb      	ldr	r3, [r7, #24]
   13e52:	3301      	adds	r3, #1
   13e54:	61bb      	str	r3, [r7, #24]
	VERIFY(sep);

	len = 0;
	while(*src) {
		ptr = sep;
		while(*ptr) {
   13e56:	69bb      	ldr	r3, [r7, #24]
   13e58:	781b      	ldrb	r3, [r3, #0]
   13e5a:	2b00      	cmp	r3, #0
   13e5c:	d1f2      	bne.n	13e44 <fmtTok+0x24>
   13e5e:	e000      	b.n	13e62 <fmtTok+0x42>
			if(*src == *ptr)
				break;
   13e60:	bf00      	nop
			ptr++;
		}
		if(*src == *ptr)
   13e62:	68bb      	ldr	r3, [r7, #8]
   13e64:	781a      	ldrb	r2, [r3, #0]
   13e66:	69bb      	ldr	r3, [r7, #24]
   13e68:	781b      	ldrb	r3, [r3, #0]
   13e6a:	429a      	cmp	r2, r3
   13e6c:	d014      	beq.n	13e98 <fmtTok+0x78>
			break;
		if(dst)
   13e6e:	68fb      	ldr	r3, [r7, #12]
   13e70:	2b00      	cmp	r3, #0
   13e72:	d006      	beq.n	13e82 <fmtTok+0x62>
			*dst++ = *src;
   13e74:	68bb      	ldr	r3, [r7, #8]
   13e76:	781a      	ldrb	r2, [r3, #0]
   13e78:	68fb      	ldr	r3, [r7, #12]
   13e7a:	701a      	strb	r2, [r3, #0]
   13e7c:	68fb      	ldr	r3, [r7, #12]
   13e7e:	3301      	adds	r3, #1
   13e80:	60fb      	str	r3, [r7, #12]
		src++;
   13e82:	68bb      	ldr	r3, [r7, #8]
   13e84:	3301      	adds	r3, #1
   13e86:	60bb      	str	r3, [r7, #8]
		len++;
   13e88:	697b      	ldr	r3, [r7, #20]
   13e8a:	3301      	adds	r3, #1
   13e8c:	617b      	str	r3, [r7, #20]

	VERIFY(src);
	VERIFY(sep);

	len = 0;
	while(*src) {
   13e8e:	68bb      	ldr	r3, [r7, #8]
   13e90:	781b      	ldrb	r3, [r3, #0]
   13e92:	2b00      	cmp	r3, #0
   13e94:	d1d3      	bne.n	13e3e <fmtTok+0x1e>
   13e96:	e000      	b.n	13e9a <fmtTok+0x7a>
			if(*src == *ptr)
				break;
			ptr++;
		}
		if(*src == *ptr)
			break;
   13e98:	bf00      	nop
		if(dst)
			*dst++ = *src;
		src++;
		len++;
	}
	if(dst)
   13e9a:	68fb      	ldr	r3, [r7, #12]
   13e9c:	2b00      	cmp	r3, #0
   13e9e:	d002      	beq.n	13ea6 <fmtTok+0x86>
		*dst = 0;
   13ea0:	68fb      	ldr	r3, [r7, #12]
   13ea2:	2200      	movs	r2, #0
   13ea4:	701a      	strb	r2, [r3, #0]
	return len;
   13ea6:	697b      	ldr	r3, [r7, #20]
}
   13ea8:	4618      	mov	r0, r3
   13eaa:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13eae:	f2c0 0302 	movt	r3, #2
   13eb2:	69fa      	ldr	r2, [r7, #28]
   13eb4:	681b      	ldr	r3, [r3, #0]
   13eb6:	429a      	cmp	r2, r3
   13eb8:	d001      	beq.n	13ebe <fmtTok+0x9e>
   13eba:	f7f5 f873 	bl	8fa4 <__stack_chk_fail>
   13ebe:	f107 0720 	add.w	r7, r7, #32
   13ec2:	46bd      	mov	sp, r7
   13ec4:	bd80      	pop	{r7, pc}
   13ec6:	bf00      	nop

00013ec8 <fmtPad>:
 *    - the length of the result string strlen(str)
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 * \test tcab0024.c
 */
int fmtPad(char *str, int len, char chr) {
   13ec8:	b580      	push	{r7, lr}
   13eca:	b088      	sub	sp, #32
   13ecc:	af00      	add	r7, sp, #0
   13ece:	60f8      	str	r0, [r7, #12]
   13ed0:	60b9      	str	r1, [r7, #8]
   13ed2:	4613      	mov	r3, r2
   13ed4:	71fb      	strb	r3, [r7, #7]
   13ed6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13eda:	f2c0 0302 	movt	r3, #2
   13ede:	681b      	ldr	r3, [r3, #0]
   13ee0:	61fb      	str	r3, [r7, #28]
	char dir;                   //pad direction (left or right)

	VERIFY(str);
	VERIFY(len != 0);

	dir = 'r';
   13ee2:	2372      	movs	r3, #114	; 0x72
   13ee4:	74fb      	strb	r3, [r7, #19]
	if(len < 0) {               //left pad?
   13ee6:	68bb      	ldr	r3, [r7, #8]
   13ee8:	2b00      	cmp	r3, #0
   13eea:	da04      	bge.n	13ef6 <fmtPad+0x2e>
		dir = 'l';
   13eec:	236c      	movs	r3, #108	; 0x6c
   13eee:	74fb      	strb	r3, [r7, #19]
		len = -len;
   13ef0:	68bb      	ldr	r3, [r7, #8]
   13ef2:	425b      	negs	r3, r3
   13ef4:	60bb      	str	r3, [r7, #8]
	}
	str[len] = 0;
   13ef6:	68bb      	ldr	r3, [r7, #8]
   13ef8:	68fa      	ldr	r2, [r7, #12]
   13efa:	18d3      	adds	r3, r2, r3
   13efc:	2200      	movs	r2, #0
   13efe:	701a      	strb	r2, [r3, #0]

	dim = strlen(str);
   13f00:	68f8      	ldr	r0, [r7, #12]
   13f02:	f7f4 eec0 	blx	8c84 <_init+0x124>
   13f06:	4603      	mov	r3, r0
   13f08:	61bb      	str	r3, [r7, #24]
	if(dim >= len)
   13f0a:	69ba      	ldr	r2, [r7, #24]
   13f0c:	68bb      	ldr	r3, [r7, #8]
   13f0e:	429a      	cmp	r2, r3
   13f10:	db01      	blt.n	13f16 <fmtPad+0x4e>
		return dim;             //string is long enough - nothing to pad
   13f12:	69bb      	ldr	r3, [r7, #24]
   13f14:	e021      	b.n	13f5a <fmtPad+0x92>

	ptr = str;                  //ptr will pont to the start of padding
   13f16:	68fb      	ldr	r3, [r7, #12]
   13f18:	617b      	str	r3, [r7, #20]
	if(dir == 'l')
   13f1a:	7cfb      	ldrb	r3, [r7, #19]
   13f1c:	2b6c      	cmp	r3, #108	; 0x6c
   13f1e:	d10b      	bne.n	13f38 <fmtPad+0x70>
		memmove(str + len - dim, str, dim); //left padding: move characters to the right
   13f20:	68ba      	ldr	r2, [r7, #8]
   13f22:	69bb      	ldr	r3, [r7, #24]
   13f24:	1ad3      	subs	r3, r2, r3
   13f26:	68fa      	ldr	r2, [r7, #12]
   13f28:	18d2      	adds	r2, r2, r3
   13f2a:	69bb      	ldr	r3, [r7, #24]
   13f2c:	4610      	mov	r0, r2
   13f2e:	68f9      	ldr	r1, [r7, #12]
   13f30:	461a      	mov	r2, r3
   13f32:	f7f4 ee62 	blx	8bf8 <_init+0x98>
   13f36:	e003      	b.n	13f40 <fmtPad+0x78>
	else
		ptr += dim;             //right padding: move the padding pointer to the end of the string
   13f38:	69bb      	ldr	r3, [r7, #24]
   13f3a:	697a      	ldr	r2, [r7, #20]
   13f3c:	18d3      	adds	r3, r2, r3
   13f3e:	617b      	str	r3, [r7, #20]

	memset(ptr, chr, len - dim);    //now pad dim characters chr starting from ptr
   13f40:	79fa      	ldrb	r2, [r7, #7]
   13f42:	68b9      	ldr	r1, [r7, #8]
   13f44:	69bb      	ldr	r3, [r7, #24]
   13f46:	1acb      	subs	r3, r1, r3
   13f48:	6978      	ldr	r0, [r7, #20]
   13f4a:	4611      	mov	r1, r2
   13f4c:	461a      	mov	r2, r3
   13f4e:	f7f4 ee36 	blx	8bbc <_init+0x5c>

	return strlen(str);
   13f52:	68f8      	ldr	r0, [r7, #12]
   13f54:	f7f4 ee96 	blx	8c84 <_init+0x124>
   13f58:	4603      	mov	r3, r0
}
   13f5a:	4618      	mov	r0, r3
   13f5c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13f60:	f2c0 0302 	movt	r3, #2
   13f64:	69fa      	ldr	r2, [r7, #28]
   13f66:	681b      	ldr	r3, [r3, #0]
   13f68:	429a      	cmp	r2, r3
   13f6a:	d001      	beq.n	13f70 <fmtPad+0xa8>
   13f6c:	f7f5 f81a 	bl	8fa4 <__stack_chk_fail>
   13f70:	f107 0720 	add.w	r7, r7, #32
   13f74:	46bd      	mov	sp, r7
   13f76:	bd80      	pop	{r7, pc}

00013f78 <fmtCnt>:
 *    - strlen(str)
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 * \test tcab0024.c
 */
int fmtCnt(char *str, int len, char chr) {
   13f78:	b580      	push	{r7, lr}
   13f7a:	b088      	sub	sp, #32
   13f7c:	af00      	add	r7, sp, #0
   13f7e:	60f8      	str	r0, [r7, #12]
   13f80:	60b9      	str	r1, [r7, #8]
   13f82:	4613      	mov	r3, r2
   13f84:	71fb      	strb	r3, [r7, #7]
   13f86:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   13f8a:	f2c0 0302 	movt	r3, #2
   13f8e:	681b      	ldr	r3, [r3, #0]
   13f90:	61fb      	str	r3, [r7, #28]
	char *ptr;

	VERIFY(str);
	VERIFY(len != 0);

	idx = strlen(str);
   13f92:	68f8      	ldr	r0, [r7, #12]
   13f94:	f7f4 ee76 	blx	8c84 <_init+0x124>
   13f98:	4603      	mov	r3, r0
   13f9a:	75fb      	strb	r3, [r7, #23]
	while(idx--) {              //remove trailing chr
   13f9c:	e00b      	b.n	13fb6 <fmtCnt+0x3e>
		if(str[idx] != chr)
   13f9e:	7dfb      	ldrb	r3, [r7, #23]
   13fa0:	68fa      	ldr	r2, [r7, #12]
   13fa2:	18d3      	adds	r3, r2, r3
   13fa4:	781b      	ldrb	r3, [r3, #0]
   13fa6:	79fa      	ldrb	r2, [r7, #7]
   13fa8:	429a      	cmp	r2, r3
   13faa:	d110      	bne.n	13fce <fmtCnt+0x56>
			break;
		str[idx] = 0;
   13fac:	7dfb      	ldrb	r3, [r7, #23]
   13fae:	68fa      	ldr	r2, [r7, #12]
   13fb0:	18d3      	adds	r3, r2, r3
   13fb2:	2200      	movs	r2, #0
   13fb4:	701a      	strb	r2, [r3, #0]

	VERIFY(str);
	VERIFY(len != 0);

	idx = strlen(str);
	while(idx--) {              //remove trailing chr
   13fb6:	7dfb      	ldrb	r3, [r7, #23]
   13fb8:	2b00      	cmp	r3, #0
   13fba:	bf0c      	ite	eq
   13fbc:	2300      	moveq	r3, #0
   13fbe:	2301      	movne	r3, #1
   13fc0:	b2db      	uxtb	r3, r3
   13fc2:	7dfa      	ldrb	r2, [r7, #23]
   13fc4:	3a01      	subs	r2, #1
   13fc6:	75fa      	strb	r2, [r7, #23]
   13fc8:	2b00      	cmp	r3, #0
   13fca:	d1e8      	bne.n	13f9e <fmtCnt+0x26>
   13fcc:	e000      	b.n	13fd0 <fmtCnt+0x58>
		if(str[idx] != chr)
			break;
   13fce:	bf00      	nop
		str[idx] = 0;
	}

	idx = 0;
   13fd0:	2300      	movs	r3, #0
   13fd2:	75fb      	strb	r3, [r7, #23]
	while(str[idx] == chr)
   13fd4:	e002      	b.n	13fdc <fmtCnt+0x64>
		idx++;                  //calculate leading chr
   13fd6:	7dfb      	ldrb	r3, [r7, #23]
   13fd8:	3301      	adds	r3, #1
   13fda:	75fb      	strb	r3, [r7, #23]
			break;
		str[idx] = 0;
	}

	idx = 0;
	while(str[idx] == chr)
   13fdc:	7dfb      	ldrb	r3, [r7, #23]
   13fde:	68fa      	ldr	r2, [r7, #12]
   13fe0:	18d3      	adds	r3, r2, r3
   13fe2:	781b      	ldrb	r3, [r3, #0]
   13fe4:	79fa      	ldrb	r2, [r7, #7]
   13fe6:	429a      	cmp	r2, r3
   13fe8:	d0f5      	beq.n	13fd6 <fmtCnt+0x5e>
		idx++;                  //calculate leading chr

	if(idx) {
   13fea:	7dfb      	ldrb	r3, [r7, #23]
   13fec:	2b00      	cmp	r3, #0
   13fee:	d017      	beq.n	14020 <fmtCnt+0xa8>
		ptr = str;
   13ff0:	68fb      	ldr	r3, [r7, #12]
   13ff2:	61bb      	str	r3, [r7, #24]
		while(str[idx]) {
   13ff4:	e00b      	b.n	1400e <fmtCnt+0x96>
			*ptr++ = str[idx++];
   13ff6:	7dfb      	ldrb	r3, [r7, #23]
   13ff8:	68fa      	ldr	r2, [r7, #12]
   13ffa:	18d3      	adds	r3, r2, r3
   13ffc:	781a      	ldrb	r2, [r3, #0]
   13ffe:	69bb      	ldr	r3, [r7, #24]
   14000:	701a      	strb	r2, [r3, #0]
   14002:	69bb      	ldr	r3, [r7, #24]
   14004:	3301      	adds	r3, #1
   14006:	61bb      	str	r3, [r7, #24]
   14008:	7dfb      	ldrb	r3, [r7, #23]
   1400a:	3301      	adds	r3, #1
   1400c:	75fb      	strb	r3, [r7, #23]
	while(str[idx] == chr)
		idx++;                  //calculate leading chr

	if(idx) {
		ptr = str;
		while(str[idx]) {
   1400e:	7dfb      	ldrb	r3, [r7, #23]
   14010:	68fa      	ldr	r2, [r7, #12]
   14012:	18d3      	adds	r3, r2, r3
   14014:	781b      	ldrb	r3, [r3, #0]
   14016:	2b00      	cmp	r3, #0
   14018:	d1ed      	bne.n	13ff6 <fmtCnt+0x7e>
			*ptr++ = str[idx++];
		}
		*ptr = 0;
   1401a:	69bb      	ldr	r3, [r7, #24]
   1401c:	2200      	movs	r2, #0
   1401e:	701a      	strb	r2, [r3, #0]
	}

	idx = strlen(str);
   14020:	68f8      	ldr	r0, [r7, #12]
   14022:	f7f4 ee30 	blx	8c84 <_init+0x124>
   14026:	4603      	mov	r3, r0
   14028:	75fb      	strb	r3, [r7, #23]
	while(idx < len) {
   1402a:	e034      	b.n	14096 <fmtCnt+0x11e>
		if(idx % 2) {
   1402c:	7dfb      	ldrb	r3, [r7, #23]
   1402e:	f003 0301 	and.w	r3, r3, #1
   14032:	b2db      	uxtb	r3, r3
   14034:	2b00      	cmp	r3, #0
   14036:	d010      	beq.n	1405a <fmtCnt+0xe2>
			str[idx++] = chr;
   14038:	7dfb      	ldrb	r3, [r7, #23]
   1403a:	68fa      	ldr	r2, [r7, #12]
   1403c:	18d3      	adds	r3, r2, r3
   1403e:	79fa      	ldrb	r2, [r7, #7]
   14040:	701a      	strb	r2, [r3, #0]
   14042:	7dfb      	ldrb	r3, [r7, #23]
   14044:	3301      	adds	r3, #1
   14046:	75fb      	strb	r3, [r7, #23]
			str[idx++] = 0;
   14048:	7dfb      	ldrb	r3, [r7, #23]
   1404a:	68fa      	ldr	r2, [r7, #12]
   1404c:	18d3      	adds	r3, r2, r3
   1404e:	2200      	movs	r2, #0
   14050:	701a      	strb	r2, [r3, #0]
   14052:	7dfb      	ldrb	r3, [r7, #23]
   14054:	3301      	adds	r3, #1
   14056:	75fb      	strb	r3, [r7, #23]
   14058:	e018      	b.n	1408c <fmtCnt+0x114>
		} else {
			str[idx + 1] = 0;
   1405a:	7dfb      	ldrb	r3, [r7, #23]
   1405c:	3301      	adds	r3, #1
   1405e:	68fa      	ldr	r2, [r7, #12]
   14060:	18d3      	adds	r3, r2, r3
   14062:	2200      	movs	r2, #0
   14064:	701a      	strb	r2, [r3, #0]
			while(idx) {
   14066:	e00b      	b.n	14080 <fmtCnt+0x108>
				str[idx] = str[idx - 1];
   14068:	7dfb      	ldrb	r3, [r7, #23]
   1406a:	68fa      	ldr	r2, [r7, #12]
   1406c:	18d3      	adds	r3, r2, r3
   1406e:	7dfa      	ldrb	r2, [r7, #23]
   14070:	3a01      	subs	r2, #1
   14072:	68f9      	ldr	r1, [r7, #12]
   14074:	188a      	adds	r2, r1, r2
   14076:	7812      	ldrb	r2, [r2, #0]
   14078:	701a      	strb	r2, [r3, #0]
				idx--;
   1407a:	7dfb      	ldrb	r3, [r7, #23]
   1407c:	3b01      	subs	r3, #1
   1407e:	75fb      	strb	r3, [r7, #23]
		if(idx % 2) {
			str[idx++] = chr;
			str[idx++] = 0;
		} else {
			str[idx + 1] = 0;
			while(idx) {
   14080:	7dfb      	ldrb	r3, [r7, #23]
   14082:	2b00      	cmp	r3, #0
   14084:	d1f0      	bne.n	14068 <fmtCnt+0xf0>
				str[idx] = str[idx - 1];
				idx--;
			}
			*str = chr;
   14086:	68fb      	ldr	r3, [r7, #12]
   14088:	79fa      	ldrb	r2, [r7, #7]
   1408a:	701a      	strb	r2, [r3, #0]
		}
		idx = strlen(str);
   1408c:	68f8      	ldr	r0, [r7, #12]
   1408e:	f7f4 edfa 	blx	8c84 <_init+0x124>
   14092:	4603      	mov	r3, r0
   14094:	75fb      	strb	r3, [r7, #23]
		}
		*ptr = 0;
	}

	idx = strlen(str);
	while(idx < len) {
   14096:	7dfa      	ldrb	r2, [r7, #23]
   14098:	68bb      	ldr	r3, [r7, #8]
   1409a:	429a      	cmp	r2, r3
   1409c:	dbc6      	blt.n	1402c <fmtCnt+0xb4>
			}
			*str = chr;
		}
		idx = strlen(str);
	}
	return len;
   1409e:	68bb      	ldr	r3, [r7, #8]
}
   140a0:	4618      	mov	r0, r3
   140a2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   140a6:	f2c0 0302 	movt	r3, #2
   140aa:	69fa      	ldr	r2, [r7, #28]
   140ac:	681b      	ldr	r3, [r3, #0]
   140ae:	429a      	cmp	r2, r3
   140b0:	d001      	beq.n	140b6 <fmtCnt+0x13e>
   140b2:	f7f4 ff77 	bl	8fa4 <__stack_chk_fail>
   140b6:	f107 0720 	add.w	r7, r7, #32
   140ba:	46bd      	mov	sp, r7
   140bc:	bd80      	pop	{r7, pc}
   140be:	bf00      	nop

000140c0 <fmtIns>:
 *    - the length of the resulting string strlen(dst)
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 * \test tcgs0007.c
 */
int fmtIns(char *dst, const char *bgd, const char *ins, byte ofs, int len) {
   140c0:	b590      	push	{r4, r7, lr}
   140c2:	b08b      	sub	sp, #44	; 0x2c
   140c4:	af00      	add	r7, sp, #0
   140c6:	6178      	str	r0, [r7, #20]
   140c8:	6139      	str	r1, [r7, #16]
   140ca:	60fa      	str	r2, [r7, #12]
   140cc:	72fb      	strb	r3, [r7, #11]
   140ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   140d0:	607b      	str	r3, [r7, #4]
   140d2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   140d6:	f2c0 0302 	movt	r3, #2
   140da:	681b      	ldr	r3, [r3, #0]
   140dc:	627b      	str	r3, [r7, #36]	; 0x24

	VERIFY(dst);
	VERIFY(ins);
	VERIFY(bgd);

	if(len == 0)
   140de:	687b      	ldr	r3, [r7, #4]
   140e0:	2b00      	cmp	r3, #0
   140e2:	d109      	bne.n	140f8 <fmtIns+0x38>
		len = strlen(bgd) + strlen(ins);
   140e4:	6938      	ldr	r0, [r7, #16]
   140e6:	f7f4 edce 	blx	8c84 <_init+0x124>
   140ea:	4604      	mov	r4, r0
   140ec:	68f8      	ldr	r0, [r7, #12]
   140ee:	f7f4 edca 	blx	8c84 <_init+0x124>
   140f2:	4603      	mov	r3, r0
   140f4:	18e3      	adds	r3, r4, r3
   140f6:	607b      	str	r3, [r7, #4]
	VERIFY(ofs < len);
	lenIns = strlen(ins);
   140f8:	68f8      	ldr	r0, [r7, #12]
   140fa:	f7f4 edc4 	blx	8c84 <_init+0x124>
   140fe:	4603      	mov	r3, r0
   14100:	623b      	str	r3, [r7, #32]
	lenIns = (lenIns < len - ofs) ? lenIns : (len - ofs);
   14102:	7afb      	ldrb	r3, [r7, #11]
   14104:	687a      	ldr	r2, [r7, #4]
   14106:	1ad3      	subs	r3, r2, r3
   14108:	6a3a      	ldr	r2, [r7, #32]
   1410a:	429a      	cmp	r2, r3
   1410c:	bfb8      	it	lt
   1410e:	4613      	movlt	r3, r2
   14110:	623b      	str	r3, [r7, #32]

	memcpy(dst, bgd, ofs);
   14112:	7afb      	ldrb	r3, [r7, #11]
   14114:	6978      	ldr	r0, [r7, #20]
   14116:	6939      	ldr	r1, [r7, #16]
   14118:	461a      	mov	r2, r3
   1411a:	f7f4 edae 	blx	8c78 <_init+0x118>
	for (idx = len - 1; idx >= ofs + lenIns; idx--)
   1411e:	687b      	ldr	r3, [r7, #4]
   14120:	b29b      	uxth	r3, r3
   14122:	3b01      	subs	r3, #1
   14124:	83fb      	strh	r3, [r7, #30]
   14126:	e00f      	b.n	14148 <fmtIns+0x88>
		memcpy(dst + idx, bgd + idx - lenIns, 1);
   14128:	8bfb      	ldrh	r3, [r7, #30]
   1412a:	697a      	ldr	r2, [r7, #20]
   1412c:	18d2      	adds	r2, r2, r3
   1412e:	8bf9      	ldrh	r1, [r7, #30]
   14130:	6a3b      	ldr	r3, [r7, #32]
   14132:	1acb      	subs	r3, r1, r3
   14134:	6939      	ldr	r1, [r7, #16]
   14136:	18cb      	adds	r3, r1, r3
   14138:	4610      	mov	r0, r2
   1413a:	4619      	mov	r1, r3
   1413c:	2201      	movs	r2, #1
   1413e:	f7f4 ed9c 	blx	8c78 <_init+0x118>
	VERIFY(ofs < len);
	lenIns = strlen(ins);
	lenIns = (lenIns < len - ofs) ? lenIns : (len - ofs);

	memcpy(dst, bgd, ofs);
	for (idx = len - 1; idx >= ofs + lenIns; idx--)
   14142:	8bfb      	ldrh	r3, [r7, #30]
   14144:	3b01      	subs	r3, #1
   14146:	83fb      	strh	r3, [r7, #30]
   14148:	8bfa      	ldrh	r2, [r7, #30]
   1414a:	7af9      	ldrb	r1, [r7, #11]
   1414c:	6a3b      	ldr	r3, [r7, #32]
   1414e:	18cb      	adds	r3, r1, r3
   14150:	429a      	cmp	r2, r3
   14152:	dae9      	bge.n	14128 <fmtIns+0x68>
		memcpy(dst + idx, bgd + idx - lenIns, 1);
	memcpy(dst + ofs, ins, lenIns);
   14154:	7afb      	ldrb	r3, [r7, #11]
   14156:	697a      	ldr	r2, [r7, #20]
   14158:	18d2      	adds	r2, r2, r3
   1415a:	6a3b      	ldr	r3, [r7, #32]
   1415c:	4610      	mov	r0, r2
   1415e:	68f9      	ldr	r1, [r7, #12]
   14160:	461a      	mov	r2, r3
   14162:	f7f4 ed8a 	blx	8c78 <_init+0x118>
	memset(dst + len, 0, 1);
   14166:	687b      	ldr	r3, [r7, #4]
   14168:	697a      	ldr	r2, [r7, #20]
   1416a:	18d3      	adds	r3, r2, r3
   1416c:	4618      	mov	r0, r3
   1416e:	2100      	movs	r1, #0
   14170:	2201      	movs	r2, #1
   14172:	f7f4 ed24 	blx	8bbc <_init+0x5c>

	return strlen(dst);
   14176:	6978      	ldr	r0, [r7, #20]
   14178:	f7f4 ed84 	blx	8c84 <_init+0x124>
   1417c:	4603      	mov	r3, r0
}
   1417e:	4618      	mov	r0, r3
   14180:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14184:	f2c0 0302 	movt	r3, #2
   14188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1418a:	681b      	ldr	r3, [r3, #0]
   1418c:	429a      	cmp	r2, r3
   1418e:	d001      	beq.n	14194 <fmtIns+0xd4>
   14190:	f7f4 ff08 	bl	8fa4 <__stack_chk_fail>
   14194:	f107 072c 	add.w	r7, r7, #44	; 0x2c
   14198:	46bd      	mov	sp, r7
   1419a:	bd90      	pop	{r4, r7, pc}

0001419c <fmtAmt>:
 * It means that decimals are separated by '.', and thousands are not separated.
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 * \test tcab0024.c, tcgs0017.c
 */
int fmtAmt(char *dst, const char *src, byte exp, const char *sep) {
   1419c:	b590      	push	{r4, r7, lr}
   1419e:	b09b      	sub	sp, #108	; 0x6c
   141a0:	af02      	add	r7, sp, #8
   141a2:	60f8      	str	r0, [r7, #12]
   141a4:	60b9      	str	r1, [r7, #8]
   141a6:	603b      	str	r3, [r7, #0]
   141a8:	4613      	mov	r3, r2
   141aa:	71fb      	strb	r3, [r7, #7]
   141ac:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   141b0:	f2c0 0302 	movt	r3, #2
   141b4:	681b      	ldr	r3, [r3, #0]
   141b6:	65fb      	str	r3, [r7, #92]	; 0x5c
	int ret;
	int len;
	char tmp[prtW + 1];
	char _dst[prtW + 1];
	char decSep[2] = { '.', 0 };    //decimal separator
   141b8:	232e      	movs	r3, #46	; 0x2e
   141ba:	773b      	strb	r3, [r7, #28]
   141bc:	2300      	movs	r3, #0
   141be:	777b      	strb	r3, [r7, #29]
	char thsSep[2] = { 0, 0 };  //thousand separator
   141c0:	2300      	movs	r3, #0
   141c2:	f887 3020 	strb.w	r3, [r7, #32]
   141c6:	2300      	movs	r3, #0
   141c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	//    byte isSign = 0;

	VERIFY(dst);
	VERIFY(src);

	memset(_dst, 0, prtW + 1);
   141cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
   141d0:	4618      	mov	r0, r3
   141d2:	2100      	movs	r1, #0
   141d4:	2219      	movs	r2, #25
   141d6:	f7f4 ecf2 	blx	8bbc <_init+0x5c>
	if(*src == '-' || *src == '+') {
   141da:	68bb      	ldr	r3, [r7, #8]
   141dc:	781b      	ldrb	r3, [r3, #0]
   141de:	2b2d      	cmp	r3, #45	; 0x2d
   141e0:	d003      	beq.n	141ea <fmtAmt+0x4e>
   141e2:	68bb      	ldr	r3, [r7, #8]
   141e4:	781b      	ldrb	r3, [r3, #0]
   141e6:	2b2b      	cmp	r3, #43	; 0x2b
   141e8:	d114      	bne.n	14214 <fmtAmt+0x78>
		char sign[2] = { 0, 0 };
   141ea:	2300      	movs	r3, #0
   141ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   141f0:	2300      	movs	r3, #0
   141f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		//        isSign = 1;
		sign[0] = *src;
   141f6:	68bb      	ldr	r3, [r7, #8]
   141f8:	781b      	ldrb	r3, [r3, #0]
   141fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		strcpy(_dst, sign);
   141fe:	f107 0240 	add.w	r2, r7, #64	; 0x40
   14202:	f107 0324 	add.w	r3, r7, #36	; 0x24
   14206:	4610      	mov	r0, r2
   14208:	4619      	mov	r1, r3
   1420a:	f7f4 ed0a 	blx	8c20 <_init+0xc0>
		src++;
   1420e:	68bb      	ldr	r3, [r7, #8]
   14210:	3301      	adds	r3, #1
   14212:	60bb      	str	r3, [r7, #8]
	}

	ret = fmtTok(0, src, "123456789");
   14214:	2000      	movs	r0, #0
   14216:	68b9      	ldr	r1, [r7, #8]
   14218:	f644 02e4 	movw	r2, #18660	; 0x48e4
   1421c:	f2c0 0202 	movt	r2, #2
   14220:	f7ff fdfe 	bl	13e20 <fmtTok>
   14224:	61b8      	str	r0, [r7, #24]
	src += ret;
   14226:	69bb      	ldr	r3, [r7, #24]
   14228:	68ba      	ldr	r2, [r7, #8]
   1422a:	18d3      	adds	r3, r2, r3
   1422c:	60bb      	str	r3, [r7, #8]
	len = strlen(src);
   1422e:	68b8      	ldr	r0, [r7, #8]
   14230:	f7f4 ed28 	blx	8c84 <_init+0x124>
   14234:	4603      	mov	r3, r0
   14236:	617b      	str	r3, [r7, #20]

	memset(tmp, 0, sizeof(tmp));
   14238:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1423c:	4618      	mov	r0, r3
   1423e:	2100      	movs	r1, #0
   14240:	2219      	movs	r2, #25
   14242:	f7f4 ecbc 	blx	8bbc <_init+0x5c>
	if(len) {
   14246:	697b      	ldr	r3, [r7, #20]
   14248:	2b00      	cmp	r3, #0
   1424a:	d01c      	beq.n	14286 <fmtAmt+0xea>
		if(len <= exp) {
   1424c:	79fa      	ldrb	r2, [r7, #7]
   1424e:	697b      	ldr	r3, [r7, #20]
   14250:	429a      	cmp	r2, r3
   14252:	db11      	blt.n	14278 <fmtAmt+0xdc>
			memset(tmp, '0', exp - len + 1);
   14254:	79fa      	ldrb	r2, [r7, #7]
   14256:	697b      	ldr	r3, [r7, #20]
   14258:	1ad3      	subs	r3, r2, r3
   1425a:	3301      	adds	r3, #1
   1425c:	f107 0224 	add.w	r2, r7, #36	; 0x24
   14260:	4610      	mov	r0, r2
   14262:	2130      	movs	r1, #48	; 0x30
   14264:	461a      	mov	r2, r3
   14266:	f7f4 ecaa 	blx	8bbc <_init+0x5c>
			strcat(tmp, src);
   1426a:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1426e:	4618      	mov	r0, r3
   14270:	68b9      	ldr	r1, [r7, #8]
   14272:	f7f4 ece2 	blx	8c38 <_init+0xd8>
   14276:	e00f      	b.n	14298 <fmtAmt+0xfc>
		} else
			strcpy(tmp, src);
   14278:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1427c:	4618      	mov	r0, r3
   1427e:	68b9      	ldr	r1, [r7, #8]
   14280:	f7f4 ecce 	blx	8c20 <_init+0xc0>
   14284:	e008      	b.n	14298 <fmtAmt+0xfc>
	} else {
		memset(tmp, '0', exp + 1);
   14286:	79fb      	ldrb	r3, [r7, #7]
   14288:	3301      	adds	r3, #1
   1428a:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1428e:	4610      	mov	r0, r2
   14290:	2130      	movs	r1, #48	; 0x30
   14292:	461a      	mov	r2, r3
   14294:	f7f4 ec92 	blx	8bbc <_init+0x5c>
	}
	len = strlen(tmp);
   14298:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1429c:	4618      	mov	r0, r3
   1429e:	f7f4 ecf2 	blx	8c84 <_init+0x124>
   142a2:	4603      	mov	r3, r0
   142a4:	617b      	str	r3, [r7, #20]

	if(sep && sep[0]) {
   142a6:	683b      	ldr	r3, [r7, #0]
   142a8:	2b00      	cmp	r3, #0
   142aa:	d00f      	beq.n	142cc <fmtAmt+0x130>
   142ac:	683b      	ldr	r3, [r7, #0]
   142ae:	781b      	ldrb	r3, [r3, #0]
   142b0:	2b00      	cmp	r3, #0
   142b2:	d00b      	beq.n	142cc <fmtAmt+0x130>
		decSep[0] = sep[0];
   142b4:	683b      	ldr	r3, [r7, #0]
   142b6:	781b      	ldrb	r3, [r3, #0]
   142b8:	773b      	strb	r3, [r7, #28]
		if(sep[1]) {
   142ba:	683b      	ldr	r3, [r7, #0]
   142bc:	3301      	adds	r3, #1
   142be:	781b      	ldrb	r3, [r3, #0]
   142c0:	2b00      	cmp	r3, #0
   142c2:	d003      	beq.n	142cc <fmtAmt+0x130>
			thsSep[0] = sep[1];
   142c4:	683b      	ldr	r3, [r7, #0]
   142c6:	785b      	ldrb	r3, [r3, #1]
   142c8:	f887 3020 	strb.w	r3, [r7, #32]
		} else {
			//            VERIFY(isSign + len + !!exp <= prtW);
		}
	}

	if(exp && exp < len) {
   142cc:	79fb      	ldrb	r3, [r7, #7]
   142ce:	2b00      	cmp	r3, #0
   142d0:	d015      	beq.n	142fe <fmtAmt+0x162>
   142d2:	79fa      	ldrb	r2, [r7, #7]
   142d4:	697b      	ldr	r3, [r7, #20]
   142d6:	429a      	cmp	r2, r3
   142d8:	da11      	bge.n	142fe <fmtAmt+0x162>
		fmtIns(tmp, tmp, decSep, (byte) (len - exp), prtW);
   142da:	697b      	ldr	r3, [r7, #20]
   142dc:	b2da      	uxtb	r2, r3
   142de:	79fb      	ldrb	r3, [r7, #7]
   142e0:	1ad3      	subs	r3, r2, r3
   142e2:	b2db      	uxtb	r3, r3
   142e4:	f107 0024 	add.w	r0, r7, #36	; 0x24
   142e8:	f107 0124 	add.w	r1, r7, #36	; 0x24
   142ec:	f107 021c 	add.w	r2, r7, #28
   142f0:	2418      	movs	r4, #24
   142f2:	9400      	str	r4, [sp, #0]
   142f4:	f7ff fee4 	bl	140c0 <fmtIns>
		len++;
   142f8:	697b      	ldr	r3, [r7, #20]
   142fa:	3301      	adds	r3, #1
   142fc:	617b      	str	r3, [r7, #20]
	}
	if(thsSep[0]) {
   142fe:	f897 3020 	ldrb.w	r3, [r7, #32]
   14302:	2b00      	cmp	r3, #0
   14304:	d01d      	beq.n	14342 <fmtAmt+0x1a6>
		for (len -= 3 + (exp ? (exp + 1) : 0); len > 0; len -= 3) {
   14306:	79fb      	ldrb	r3, [r7, #7]
   14308:	2b00      	cmp	r3, #0
   1430a:	d002      	beq.n	14312 <fmtAmt+0x176>
   1430c:	79fb      	ldrb	r3, [r7, #7]
   1430e:	3304      	adds	r3, #4
   14310:	e000      	b.n	14314 <fmtAmt+0x178>
   14312:	2303      	movs	r3, #3
   14314:	697a      	ldr	r2, [r7, #20]
   14316:	1ad3      	subs	r3, r2, r3
   14318:	617b      	str	r3, [r7, #20]
   1431a:	e00f      	b.n	1433c <fmtAmt+0x1a0>
			ret = fmtIns(tmp, tmp, thsSep, (byte) len, prtW);
   1431c:	697b      	ldr	r3, [r7, #20]
   1431e:	b2db      	uxtb	r3, r3
   14320:	f107 0024 	add.w	r0, r7, #36	; 0x24
   14324:	f107 0124 	add.w	r1, r7, #36	; 0x24
   14328:	f107 0220 	add.w	r2, r7, #32
   1432c:	2418      	movs	r4, #24
   1432e:	9400      	str	r4, [sp, #0]
   14330:	f7ff fec6 	bl	140c0 <fmtIns>
   14334:	61b8      	str	r0, [r7, #24]
	if(exp && exp < len) {
		fmtIns(tmp, tmp, decSep, (byte) (len - exp), prtW);
		len++;
	}
	if(thsSep[0]) {
		for (len -= 3 + (exp ? (exp + 1) : 0); len > 0; len -= 3) {
   14336:	697b      	ldr	r3, [r7, #20]
   14338:	3b03      	subs	r3, #3
   1433a:	617b      	str	r3, [r7, #20]
   1433c:	697b      	ldr	r3, [r7, #20]
   1433e:	2b00      	cmp	r3, #0
   14340:	dcec      	bgt.n	1431c <fmtAmt+0x180>
#ifdef __CURR__
	if(exp) {
		strcat(_dst, __CURR__);
	}
#endif
	strcat(_dst, tmp);          //concatenate the prefix and the decimals
   14342:	f107 0240 	add.w	r2, r7, #64	; 0x40
   14346:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1434a:	4610      	mov	r0, r2
   1434c:	4619      	mov	r1, r3
   1434e:	f7f4 ec74 	blx	8c38 <_init+0xd8>
	strcpy(dst, _dst);
   14352:	f107 0340 	add.w	r3, r7, #64	; 0x40
   14356:	68f8      	ldr	r0, [r7, #12]
   14358:	4619      	mov	r1, r3
   1435a:	f7f4 ec62 	blx	8c20 <_init+0xc0>
	return strlen(dst);
   1435e:	68f8      	ldr	r0, [r7, #12]
   14360:	f7f4 ec90 	blx	8c84 <_init+0x124>
   14364:	4603      	mov	r3, r0
}
   14366:	4618      	mov	r0, r3
   14368:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1436c:	f2c0 0302 	movt	r3, #2
   14370:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   14372:	681b      	ldr	r3, [r3, #0]
   14374:	429a      	cmp	r2, r3
   14376:	d001      	beq.n	1437c <fmtAmt+0x1e0>
   14378:	f7f4 fe14 	bl	8fa4 <__stack_chk_fail>
   1437c:	f107 0764 	add.w	r7, r7, #100	; 0x64
   14380:	46bd      	mov	sp, r7
   14382:	bd90      	pop	{r4, r7, pc}

00014384 <fmtMut>:
 *    - the length of the resulting string strlen(dst)
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 * \test tcab0024.c
 */
int fmtMut(char *dst, const char *fgd, const char *bgd, const char *ctl) {
   14384:	b580      	push	{r7, lr}
   14386:	b086      	sub	sp, #24
   14388:	af00      	add	r7, sp, #0
   1438a:	60f8      	str	r0, [r7, #12]
   1438c:	60b9      	str	r1, [r7, #8]
   1438e:	607a      	str	r2, [r7, #4]
   14390:	603b      	str	r3, [r7, #0]
   14392:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14396:	f2c0 0302 	movt	r3, #2
   1439a:	681b      	ldr	r3, [r3, #0]
   1439c:	617b      	str	r3, [r7, #20]
	VERIFY(dst);
	VERIFY(fgd);
	VERIFY(bgd);
	VERIFY(ctl);

	idx = 0;
   1439e:	2300      	movs	r3, #0
   143a0:	747b      	strb	r3, [r7, #17]
	len = 0;
   143a2:	2300      	movs	r3, #0
   143a4:	74bb      	strb	r3, [r7, #18]
	while(*ctl) {
   143a6:	e053      	b.n	14450 <fmtMut+0xcc>
		if(('a' <= (*ctl)) && ((*ctl) <= 'z')) {    //foreground index
   143a8:	683b      	ldr	r3, [r7, #0]
   143aa:	781b      	ldrb	r3, [r3, #0]
   143ac:	2b60      	cmp	r3, #96	; 0x60
   143ae:	d91d      	bls.n	143ec <fmtMut+0x68>
   143b0:	683b      	ldr	r3, [r7, #0]
   143b2:	781b      	ldrb	r3, [r3, #0]
   143b4:	2b7a      	cmp	r3, #122	; 0x7a
   143b6:	d819      	bhi.n	143ec <fmtMut+0x68>
			ref = (*ctl) - 'a';
   143b8:	683b      	ldr	r3, [r7, #0]
   143ba:	781b      	ldrb	r3, [r3, #0]
   143bc:	3b61      	subs	r3, #97	; 0x61
   143be:	74fb      	strb	r3, [r7, #19]
			if(strlen(fgd) <= ref)
   143c0:	68b8      	ldr	r0, [r7, #8]
   143c2:	f7f4 ec60 	blx	8c84 <_init+0x124>
   143c6:	4602      	mov	r2, r0
   143c8:	7cfb      	ldrb	r3, [r7, #19]
   143ca:	429a      	cmp	r2, r3
   143cc:	d805      	bhi.n	143da <fmtMut+0x56>
				dst[idx] = ' '; //fgd too small
   143ce:	7c7b      	ldrb	r3, [r7, #17]
   143d0:	68fa      	ldr	r2, [r7, #12]
   143d2:	18d3      	adds	r3, r2, r3
   143d4:	2220      	movs	r2, #32
   143d6:	701a      	strb	r2, [r3, #0]
	idx = 0;
	len = 0;
	while(*ctl) {
		if(('a' <= (*ctl)) && ((*ctl) <= 'z')) {    //foreground index
			ref = (*ctl) - 'a';
			if(strlen(fgd) <= ref)
   143d8:	e031      	b.n	1443e <fmtMut+0xba>
				dst[idx] = ' '; //fgd too small
			else
				dst[idx] = fgd[ref];
   143da:	7c7b      	ldrb	r3, [r7, #17]
   143dc:	68fa      	ldr	r2, [r7, #12]
   143de:	18d3      	adds	r3, r2, r3
   143e0:	7cfa      	ldrb	r2, [r7, #19]
   143e2:	68b9      	ldr	r1, [r7, #8]
   143e4:	188a      	adds	r2, r1, r2
   143e6:	7812      	ldrb	r2, [r2, #0]
   143e8:	701a      	strb	r2, [r3, #0]
	idx = 0;
	len = 0;
	while(*ctl) {
		if(('a' <= (*ctl)) && ((*ctl) <= 'z')) {    //foreground index
			ref = (*ctl) - 'a';
			if(strlen(fgd) <= ref)
   143ea:	e028      	b.n	1443e <fmtMut+0xba>
				dst[idx] = ' '; //fgd too small
			else
				dst[idx] = fgd[ref];
		} else if(('A' <= (*ctl)) && ((*ctl) <= 'Z')) { //background index
   143ec:	683b      	ldr	r3, [r7, #0]
   143ee:	781b      	ldrb	r3, [r3, #0]
   143f0:	2b40      	cmp	r3, #64	; 0x40
   143f2:	d917      	bls.n	14424 <fmtMut+0xa0>
   143f4:	683b      	ldr	r3, [r7, #0]
   143f6:	781b      	ldrb	r3, [r3, #0]
   143f8:	2b5a      	cmp	r3, #90	; 0x5a
   143fa:	d813      	bhi.n	14424 <fmtMut+0xa0>
			ref = (*ctl) - 'A';
   143fc:	683b      	ldr	r3, [r7, #0]
   143fe:	781b      	ldrb	r3, [r3, #0]
   14400:	3b41      	subs	r3, #65	; 0x41
   14402:	74fb      	strb	r3, [r7, #19]
			if(strlen(bgd) <= ref)
   14404:	6878      	ldr	r0, [r7, #4]
   14406:	f7f4 ec3e 	blx	8c84 <_init+0x124>
   1440a:	4602      	mov	r2, r0
   1440c:	7cfb      	ldrb	r3, [r7, #19]
   1440e:	429a      	cmp	r2, r3
   14410:	d923      	bls.n	1445a <fmtMut+0xd6>
				break;          //bgd too short
			else
				dst[idx] = bgd[ref];
   14412:	7c7b      	ldrb	r3, [r7, #17]
   14414:	68fa      	ldr	r2, [r7, #12]
   14416:	18d3      	adds	r3, r2, r3
   14418:	7cfa      	ldrb	r2, [r7, #19]
   1441a:	6879      	ldr	r1, [r7, #4]
   1441c:	188a      	adds	r2, r1, r2
   1441e:	7812      	ldrb	r2, [r2, #0]
   14420:	701a      	strb	r2, [r3, #0]
				dst[idx] = ' '; //fgd too small
			else
				dst[idx] = fgd[ref];
		} else if(('A' <= (*ctl)) && ((*ctl) <= 'Z')) { //background index
			ref = (*ctl) - 'A';
			if(strlen(bgd) <= ref)
   14422:	e00c      	b.n	1443e <fmtMut+0xba>
				break;          //bgd too short
			else
				dst[idx] = bgd[ref];
		} else {
			if(strlen(fgd) <= len)
   14424:	68b8      	ldr	r0, [r7, #8]
   14426:	f7f4 ec2e 	blx	8c84 <_init+0x124>
   1442a:	4602      	mov	r2, r0
   1442c:	7cbb      	ldrb	r3, [r7, #18]
   1442e:	429a      	cmp	r2, r3
   14430:	d915      	bls.n	1445e <fmtMut+0xda>
				break;          //fgd too short
			else
				dst[idx] = *ctl;
   14432:	7c7b      	ldrb	r3, [r7, #17]
   14434:	68fa      	ldr	r2, [r7, #12]
   14436:	18d3      	adds	r3, r2, r3
   14438:	683a      	ldr	r2, [r7, #0]
   1443a:	7812      	ldrb	r2, [r2, #0]
   1443c:	701a      	strb	r2, [r3, #0]
		}
		idx++;
   1443e:	7c7b      	ldrb	r3, [r7, #17]
   14440:	3301      	adds	r3, #1
   14442:	747b      	strb	r3, [r7, #17]
		ctl++;
   14444:	683b      	ldr	r3, [r7, #0]
   14446:	3301      	adds	r3, #1
   14448:	603b      	str	r3, [r7, #0]
		len++;
   1444a:	7cbb      	ldrb	r3, [r7, #18]
   1444c:	3301      	adds	r3, #1
   1444e:	74bb      	strb	r3, [r7, #18]
	VERIFY(bgd);
	VERIFY(ctl);

	idx = 0;
	len = 0;
	while(*ctl) {
   14450:	683b      	ldr	r3, [r7, #0]
   14452:	781b      	ldrb	r3, [r3, #0]
   14454:	2b00      	cmp	r3, #0
   14456:	d1a7      	bne.n	143a8 <fmtMut+0x24>
   14458:	e002      	b.n	14460 <fmtMut+0xdc>
			else
				dst[idx] = fgd[ref];
		} else if(('A' <= (*ctl)) && ((*ctl) <= 'Z')) { //background index
			ref = (*ctl) - 'A';
			if(strlen(bgd) <= ref)
				break;          //bgd too short
   1445a:	bf00      	nop
   1445c:	e000      	b.n	14460 <fmtMut+0xdc>
			else
				dst[idx] = bgd[ref];
		} else {
			if(strlen(fgd) <= len)
				break;          //fgd too short
   1445e:	bf00      	nop
		}
		idx++;
		ctl++;
		len++;
	}
	dst[idx] = 0;               //add ending zero
   14460:	7c7b      	ldrb	r3, [r7, #17]
   14462:	68fa      	ldr	r2, [r7, #12]
   14464:	18d3      	adds	r3, r2, r3
   14466:	2200      	movs	r2, #0
   14468:	701a      	strb	r2, [r3, #0]
	return idx;
   1446a:	7c7b      	ldrb	r3, [r7, #17]
}
   1446c:	4618      	mov	r0, r3
   1446e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14472:	f2c0 0302 	movt	r3, #2
   14476:	697a      	ldr	r2, [r7, #20]
   14478:	681b      	ldr	r3, [r3, #0]
   1447a:	429a      	cmp	r2, r3
   1447c:	d001      	beq.n	14482 <fmtMut+0xfe>
   1447e:	f7f4 fd91 	bl	8fa4 <__stack_chk_fail>
   14482:	f107 0718 	add.w	r7, r7, #24
   14486:	46bd      	mov	sp, r7
   14488:	bd80      	pop	{r7, pc}
   1448a:	bf00      	nop

0001448c <fmtDel>:
 *    - the length of the resulting string strlen(dst)
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 * \test tcgs0007.c
 */
int fmtDel(char *dst, const char *src, byte ofs, int len) {
   1448c:	b590      	push	{r4, r7, lr}
   1448e:	b087      	sub	sp, #28
   14490:	af00      	add	r7, sp, #0
   14492:	60f8      	str	r0, [r7, #12]
   14494:	60b9      	str	r1, [r7, #8]
   14496:	603b      	str	r3, [r7, #0]
   14498:	4613      	mov	r3, r2
   1449a:	71fb      	strb	r3, [r7, #7]
   1449c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   144a0:	f2c0 0302 	movt	r3, #2
   144a4:	681b      	ldr	r3, [r3, #0]
   144a6:	617b      	str	r3, [r7, #20]

	VERIFY(src);
	VERIFY(dst);
	VERIFY(len > 0);

	if((word) (ofs + len) >= strlen(src)) {
   144a8:	79fb      	ldrb	r3, [r7, #7]
   144aa:	b29a      	uxth	r2, r3
   144ac:	683b      	ldr	r3, [r7, #0]
   144ae:	b29b      	uxth	r3, r3
   144b0:	18d3      	adds	r3, r2, r3
   144b2:	b29b      	uxth	r3, r3
   144b4:	461c      	mov	r4, r3
   144b6:	68b8      	ldr	r0, [r7, #8]
   144b8:	f7f4 ebe4 	blx	8c84 <_init+0x124>
   144bc:	4603      	mov	r3, r0
   144be:	429c      	cmp	r4, r3
   144c0:	d30f      	bcc.n	144e2 <fmtDel+0x56>
		memcpy(dst, src, ofs);
   144c2:	79fb      	ldrb	r3, [r7, #7]
   144c4:	68f8      	ldr	r0, [r7, #12]
   144c6:	68b9      	ldr	r1, [r7, #8]
   144c8:	461a      	mov	r2, r3
   144ca:	f7f4 ebd6 	blx	8c78 <_init+0x118>
		dst[ofs] = 0;
   144ce:	79fb      	ldrb	r3, [r7, #7]
   144d0:	68fa      	ldr	r2, [r7, #12]
   144d2:	18d3      	adds	r3, r2, r3
   144d4:	2200      	movs	r2, #0
   144d6:	701a      	strb	r2, [r3, #0]
		return strlen(dst);
   144d8:	68f8      	ldr	r0, [r7, #12]
   144da:	f7f4 ebd4 	blx	8c84 <_init+0x124>
   144de:	4603      	mov	r3, r0
   144e0:	e027      	b.n	14532 <fmtDel+0xa6>
	}
	memcpy(dst, src, ofs);
   144e2:	79fb      	ldrb	r3, [r7, #7]
   144e4:	68f8      	ldr	r0, [r7, #12]
   144e6:	68b9      	ldr	r1, [r7, #8]
   144e8:	461a      	mov	r2, r3
   144ea:	f7f4 ebc6 	blx	8c78 <_init+0x118>
	for (idx = ofs + len; idx <= strlen(src); idx++) {
   144ee:	79fb      	ldrb	r3, [r7, #7]
   144f0:	b29a      	uxth	r2, r3
   144f2:	683b      	ldr	r3, [r7, #0]
   144f4:	b29b      	uxth	r3, r3
   144f6:	18d3      	adds	r3, r2, r3
   144f8:	827b      	strh	r3, [r7, #18]
   144fa:	e00f      	b.n	1451c <fmtDel+0x90>
		memcpy(dst + idx - len, src + idx, 1);
   144fc:	8a7a      	ldrh	r2, [r7, #18]
   144fe:	683b      	ldr	r3, [r7, #0]
   14500:	1ad3      	subs	r3, r2, r3
   14502:	68fa      	ldr	r2, [r7, #12]
   14504:	18d2      	adds	r2, r2, r3
   14506:	8a7b      	ldrh	r3, [r7, #18]
   14508:	68b9      	ldr	r1, [r7, #8]
   1450a:	18cb      	adds	r3, r1, r3
   1450c:	4610      	mov	r0, r2
   1450e:	4619      	mov	r1, r3
   14510:	2201      	movs	r2, #1
   14512:	f7f4 ebb2 	blx	8c78 <_init+0x118>
		memcpy(dst, src, ofs);
		dst[ofs] = 0;
		return strlen(dst);
	}
	memcpy(dst, src, ofs);
	for (idx = ofs + len; idx <= strlen(src); idx++) {
   14516:	8a7b      	ldrh	r3, [r7, #18]
   14518:	3301      	adds	r3, #1
   1451a:	827b      	strh	r3, [r7, #18]
   1451c:	8a7c      	ldrh	r4, [r7, #18]
   1451e:	68b8      	ldr	r0, [r7, #8]
   14520:	f7f4 ebb0 	blx	8c84 <_init+0x124>
   14524:	4603      	mov	r3, r0
   14526:	429c      	cmp	r4, r3
   14528:	d9e8      	bls.n	144fc <fmtDel+0x70>
		memcpy(dst + idx - len, src + idx, 1);
	}
	return strlen(dst);
   1452a:	68f8      	ldr	r0, [r7, #12]
   1452c:	f7f4 ebaa 	blx	8c84 <_init+0x124>
   14530:	4603      	mov	r3, r0
}
   14532:	4618      	mov	r0, r3
   14534:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14538:	f2c0 0302 	movt	r3, #2
   1453c:	697a      	ldr	r2, [r7, #20]
   1453e:	681b      	ldr	r3, [r3, #0]
   14540:	429a      	cmp	r2, r3
   14542:	d001      	beq.n	14548 <fmtDel+0xbc>
   14544:	f7f4 fd2e 	bl	8fa4 <__stack_chk_fail>
   14548:	f107 071c 	add.w	r7, r7, #28
   1454c:	46bd      	mov	sp, r7
   1454e:	bd90      	pop	{r4, r7, pc}

00014550 <fmtTcp>:
 *    - the length of the resulting string strlen(dst)
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\fmt.c
 */

int fmtTcp(char *dst, char *src, int len) {
   14550:	b580      	push	{r7, lr}
   14552:	b086      	sub	sp, #24
   14554:	af00      	add	r7, sp, #0
   14556:	60f8      	str	r0, [r7, #12]
   14558:	60b9      	str	r1, [r7, #8]
   1455a:	607a      	str	r2, [r7, #4]
   1455c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14560:	f2c0 0302 	movt	r3, #2
   14564:	681b      	ldr	r3, [r3, #0]
   14566:	617b      	str	r3, [r7, #20]
	int dim;

	VERIFY(src);
	VERIFY(len <= dspW);

	for (dim = 0; dim < len; dim++) // Verify the size of the address
   14568:	2300      	movs	r3, #0
   1456a:	613b      	str	r3, [r7, #16]
   1456c:	e020      	b.n	145b0 <fmtTcp+0x60>
	{
		if(dim != 0 && (dim + 1) % 4 == 0 && *src != '.') {
   1456e:	693b      	ldr	r3, [r7, #16]
   14570:	2b00      	cmp	r3, #0
   14572:	d010      	beq.n	14596 <fmtTcp+0x46>
   14574:	693b      	ldr	r3, [r7, #16]
   14576:	3301      	adds	r3, #1
   14578:	f003 0303 	and.w	r3, r3, #3
   1457c:	2b00      	cmp	r3, #0
   1457e:	d10a      	bne.n	14596 <fmtTcp+0x46>
   14580:	68bb      	ldr	r3, [r7, #8]
   14582:	781b      	ldrb	r3, [r3, #0]
   14584:	2b2e      	cmp	r3, #46	; 0x2e
   14586:	d006      	beq.n	14596 <fmtTcp+0x46>
			*dst = '.';         // Add a dot every 4 inputs - the index starts at 0
   14588:	68fb      	ldr	r3, [r7, #12]
   1458a:	222e      	movs	r2, #46	; 0x2e
   1458c:	701a      	strb	r2, [r3, #0]
			len++;
   1458e:	687b      	ldr	r3, [r7, #4]
   14590:	3301      	adds	r3, #1
   14592:	607b      	str	r3, [r7, #4]
   14594:	e006      	b.n	145a4 <fmtTcp+0x54>
		} else {
			*dst = *src;
   14596:	68bb      	ldr	r3, [r7, #8]
   14598:	781a      	ldrb	r2, [r3, #0]
   1459a:	68fb      	ldr	r3, [r7, #12]
   1459c:	701a      	strb	r2, [r3, #0]
			src++;
   1459e:	68bb      	ldr	r3, [r7, #8]
   145a0:	3301      	adds	r3, #1
   145a2:	60bb      	str	r3, [r7, #8]
		}

		dst++;
   145a4:	68fb      	ldr	r3, [r7, #12]
   145a6:	3301      	adds	r3, #1
   145a8:	60fb      	str	r3, [r7, #12]
	int dim;

	VERIFY(src);
	VERIFY(len <= dspW);

	for (dim = 0; dim < len; dim++) // Verify the size of the address
   145aa:	693b      	ldr	r3, [r7, #16]
   145ac:	3301      	adds	r3, #1
   145ae:	613b      	str	r3, [r7, #16]
   145b0:	693a      	ldr	r2, [r7, #16]
   145b2:	687b      	ldr	r3, [r7, #4]
   145b4:	429a      	cmp	r2, r3
   145b6:	dbda      	blt.n	1456e <fmtTcp+0x1e>
			src++;
		}

		dst++;
	}
	*dst = 0;
   145b8:	68fb      	ldr	r3, [r7, #12]
   145ba:	2200      	movs	r2, #0
   145bc:	701a      	strb	r2, [r3, #0]
	dim--;
   145be:	693b      	ldr	r3, [r7, #16]
   145c0:	3b01      	subs	r3, #1
   145c2:	613b      	str	r3, [r7, #16]
	return dim;
   145c4:	693b      	ldr	r3, [r7, #16]
}
   145c6:	4618      	mov	r0, r3
   145c8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   145cc:	f2c0 0302 	movt	r3, #2
   145d0:	697a      	ldr	r2, [r7, #20]
   145d2:	681b      	ldr	r3, [r3, #0]
   145d4:	429a      	cmp	r2, r3
   145d6:	d001      	beq.n	145dc <fmtTcp+0x8c>
   145d8:	f7f4 fce4 	bl	8fa4 <__stack_chk_fail>
   145dc:	f107 0718 	add.w	r7, r7, #24
   145e0:	46bd      	mov	sp, r7
   145e2:	bd80      	pop	{r7, pc}

000145e4 <fmtDate>:

int fmtDate(char *dst, char *src, int len) {
   145e4:	b580      	push	{r7, lr}
   145e6:	b086      	sub	sp, #24
   145e8:	af00      	add	r7, sp, #0
   145ea:	60f8      	str	r0, [r7, #12]
   145ec:	60b9      	str	r1, [r7, #8]
   145ee:	607a      	str	r2, [r7, #4]
   145f0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   145f4:	f2c0 0302 	movt	r3, #2
   145f8:	681b      	ldr	r3, [r3, #0]
   145fa:	617b      	str	r3, [r7, #20]
	int dim;

	VERIFY(src);
	VERIFY(len <= dspW);

	for (dim = 0; dim < len; dim++) // Verify the size of the address
   145fc:	2300      	movs	r3, #0
   145fe:	613b      	str	r3, [r7, #16]
   14600:	e02a      	b.n	14658 <fmtDate+0x74>
	{
		if(dim != 0 && (dim + 1) % 3 == 0 && *src != '/') {
   14602:	693b      	ldr	r3, [r7, #16]
   14604:	2b00      	cmp	r3, #0
   14606:	d01a      	beq.n	1463e <fmtDate+0x5a>
   14608:	693b      	ldr	r3, [r7, #16]
   1460a:	1c59      	adds	r1, r3, #1
   1460c:	f245 5356 	movw	r3, #21846	; 0x5556
   14610:	f2c5 5355 	movt	r3, #21845	; 0x5555
   14614:	fb83 0201 	smull	r0, r2, r3, r1
   14618:	17cb      	asrs	r3, r1, #31
   1461a:	1ad2      	subs	r2, r2, r3
   1461c:	4613      	mov	r3, r2
   1461e:	005b      	lsls	r3, r3, #1
   14620:	189b      	adds	r3, r3, r2
   14622:	1aca      	subs	r2, r1, r3
   14624:	2a00      	cmp	r2, #0
   14626:	d10a      	bne.n	1463e <fmtDate+0x5a>
   14628:	68bb      	ldr	r3, [r7, #8]
   1462a:	781b      	ldrb	r3, [r3, #0]
   1462c:	2b2f      	cmp	r3, #47	; 0x2f
   1462e:	d006      	beq.n	1463e <fmtDate+0x5a>
			*dst = '/';         // Add a dot every 4 inputs - the index starts at 0
   14630:	68fb      	ldr	r3, [r7, #12]
   14632:	222f      	movs	r2, #47	; 0x2f
   14634:	701a      	strb	r2, [r3, #0]
			len++;
   14636:	687b      	ldr	r3, [r7, #4]
   14638:	3301      	adds	r3, #1
   1463a:	607b      	str	r3, [r7, #4]
   1463c:	e006      	b.n	1464c <fmtDate+0x68>
		} else {
			*dst = *src;
   1463e:	68bb      	ldr	r3, [r7, #8]
   14640:	781a      	ldrb	r2, [r3, #0]
   14642:	68fb      	ldr	r3, [r7, #12]
   14644:	701a      	strb	r2, [r3, #0]
			src++;
   14646:	68bb      	ldr	r3, [r7, #8]
   14648:	3301      	adds	r3, #1
   1464a:	60bb      	str	r3, [r7, #8]
		}

		dst++;
   1464c:	68fb      	ldr	r3, [r7, #12]
   1464e:	3301      	adds	r3, #1
   14650:	60fb      	str	r3, [r7, #12]
	int dim;

	VERIFY(src);
	VERIFY(len <= dspW);

	for (dim = 0; dim < len; dim++) // Verify the size of the address
   14652:	693b      	ldr	r3, [r7, #16]
   14654:	3301      	adds	r3, #1
   14656:	613b      	str	r3, [r7, #16]
   14658:	693a      	ldr	r2, [r7, #16]
   1465a:	687b      	ldr	r3, [r7, #4]
   1465c:	429a      	cmp	r2, r3
   1465e:	dbd0      	blt.n	14602 <fmtDate+0x1e>
			src++;
		}

		dst++;
	}
	*dst = 0;
   14660:	68fb      	ldr	r3, [r7, #12]
   14662:	2200      	movs	r2, #0
   14664:	701a      	strb	r2, [r3, #0]
	dim--;
   14666:	693b      	ldr	r3, [r7, #16]
   14668:	3b01      	subs	r3, #1
   1466a:	613b      	str	r3, [r7, #16]
	return dim;
   1466c:	693b      	ldr	r3, [r7, #16]
}
   1466e:	4618      	mov	r0, r3
   14670:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14674:	f2c0 0302 	movt	r3, #2
   14678:	697a      	ldr	r2, [r7, #20]
   1467a:	681b      	ldr	r3, [r3, #0]
   1467c:	429a      	cmp	r2, r3
   1467e:	d001      	beq.n	14684 <fmtDate+0xa0>
   14680:	f7f4 fc90 	bl	8fa4 <__stack_chk_fail>
   14684:	f107 0718 	add.w	r7, r7, #24
   14688:	46bd      	mov	sp, r7
   1468a:	bd80      	pop	{r7, pc}

0001468c <fmtTime>:

int fmtTime(char *dst, char *src, int len) {
   1468c:	b580      	push	{r7, lr}
   1468e:	b086      	sub	sp, #24
   14690:	af00      	add	r7, sp, #0
   14692:	60f8      	str	r0, [r7, #12]
   14694:	60b9      	str	r1, [r7, #8]
   14696:	607a      	str	r2, [r7, #4]
   14698:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1469c:	f2c0 0302 	movt	r3, #2
   146a0:	681b      	ldr	r3, [r3, #0]
   146a2:	617b      	str	r3, [r7, #20]
	int dim;

	VERIFY(src);
	VERIFY(len <= dspW);

	for (dim = 0; dim < len; dim++) {// Verify the size of the address
   146a4:	2300      	movs	r3, #0
   146a6:	613b      	str	r3, [r7, #16]
   146a8:	e02a      	b.n	14700 <fmtTime+0x74>

		if(dim != 0 && (dim + 1) % 3 == 0 && *src != ':') {
   146aa:	693b      	ldr	r3, [r7, #16]
   146ac:	2b00      	cmp	r3, #0
   146ae:	d01a      	beq.n	146e6 <fmtTime+0x5a>
   146b0:	693b      	ldr	r3, [r7, #16]
   146b2:	1c59      	adds	r1, r3, #1
   146b4:	f245 5356 	movw	r3, #21846	; 0x5556
   146b8:	f2c5 5355 	movt	r3, #21845	; 0x5555
   146bc:	fb83 0201 	smull	r0, r2, r3, r1
   146c0:	17cb      	asrs	r3, r1, #31
   146c2:	1ad2      	subs	r2, r2, r3
   146c4:	4613      	mov	r3, r2
   146c6:	005b      	lsls	r3, r3, #1
   146c8:	189b      	adds	r3, r3, r2
   146ca:	1aca      	subs	r2, r1, r3
   146cc:	2a00      	cmp	r2, #0
   146ce:	d10a      	bne.n	146e6 <fmtTime+0x5a>
   146d0:	68bb      	ldr	r3, [r7, #8]
   146d2:	781b      	ldrb	r3, [r3, #0]
   146d4:	2b3a      	cmp	r3, #58	; 0x3a
   146d6:	d006      	beq.n	146e6 <fmtTime+0x5a>
			*dst = ':';         // Add a dot every 4 inputs - the index starts at 0
   146d8:	68fb      	ldr	r3, [r7, #12]
   146da:	223a      	movs	r2, #58	; 0x3a
   146dc:	701a      	strb	r2, [r3, #0]
			len++;
   146de:	687b      	ldr	r3, [r7, #4]
   146e0:	3301      	adds	r3, #1
   146e2:	607b      	str	r3, [r7, #4]
   146e4:	e006      	b.n	146f4 <fmtTime+0x68>
		} else {
			*dst = *src;
   146e6:	68bb      	ldr	r3, [r7, #8]
   146e8:	781a      	ldrb	r2, [r3, #0]
   146ea:	68fb      	ldr	r3, [r7, #12]
   146ec:	701a      	strb	r2, [r3, #0]
			src++;
   146ee:	68bb      	ldr	r3, [r7, #8]
   146f0:	3301      	adds	r3, #1
   146f2:	60bb      	str	r3, [r7, #8]
		}

		dst++;
   146f4:	68fb      	ldr	r3, [r7, #12]
   146f6:	3301      	adds	r3, #1
   146f8:	60fb      	str	r3, [r7, #12]
	int dim;

	VERIFY(src);
	VERIFY(len <= dspW);

	for (dim = 0; dim < len; dim++) {// Verify the size of the address
   146fa:	693b      	ldr	r3, [r7, #16]
   146fc:	3301      	adds	r3, #1
   146fe:	613b      	str	r3, [r7, #16]
   14700:	693a      	ldr	r2, [r7, #16]
   14702:	687b      	ldr	r3, [r7, #4]
   14704:	429a      	cmp	r2, r3
   14706:	dbd0      	blt.n	146aa <fmtTime+0x1e>
			src++;
		}

		dst++;
	}
	*dst = 0;
   14708:	68fb      	ldr	r3, [r7, #12]
   1470a:	2200      	movs	r2, #0
   1470c:	701a      	strb	r2, [r3, #0]
	dim--;
   1470e:	693b      	ldr	r3, [r7, #16]
   14710:	3b01      	subs	r3, #1
   14712:	613b      	str	r3, [r7, #16]
	return dim;
   14714:	693b      	ldr	r3, [r7, #16]
}
   14716:	4618      	mov	r0, r3
   14718:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1471c:	f2c0 0302 	movt	r3, #2
   14720:	697a      	ldr	r2, [r7, #20]
   14722:	681b      	ldr	r3, [r3, #0]
   14724:	429a      	cmp	r2, r3
   14726:	d001      	beq.n	1472c <fmtTime+0xa0>
   14728:	f7f4 fc3c 	bl	8fa4 <__stack_chk_fail>
   1472c:	f107 0718 	add.w	r7, r7, #24
   14730:	46bd      	mov	sp, r7
   14732:	bd80      	pop	{r7, pc}

00014734 <isSorted>:
 * \return
 *    - 1 if a<b<c and 0 otherwise.
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 */
byte isSorted(word a, word b, word c) {
   14734:	b580      	push	{r7, lr}
   14736:	b084      	sub	sp, #16
   14738:	af00      	add	r7, sp, #0
   1473a:	4613      	mov	r3, r2
   1473c:	4602      	mov	r2, r0
   1473e:	80fa      	strh	r2, [r7, #6]
   14740:	460a      	mov	r2, r1
   14742:	80ba      	strh	r2, [r7, #4]
   14744:	807b      	strh	r3, [r7, #2]
   14746:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1474a:	f2c0 0302 	movt	r3, #2
   1474e:	681b      	ldr	r3, [r3, #0]
   14750:	60fb      	str	r3, [r7, #12]
	if(b < a)
   14752:	88ba      	ldrh	r2, [r7, #4]
   14754:	88fb      	ldrh	r3, [r7, #6]
   14756:	429a      	cmp	r2, r3
   14758:	d201      	bcs.n	1475e <isSorted+0x2a>
		return 0;
   1475a:	2300      	movs	r3, #0
   1475c:	e006      	b.n	1476c <isSorted+0x38>
	if(c < b)
   1475e:	887a      	ldrh	r2, [r7, #2]
   14760:	88bb      	ldrh	r3, [r7, #4]
   14762:	429a      	cmp	r2, r3
   14764:	d201      	bcs.n	1476a <isSorted+0x36>
		return 0;
   14766:	2300      	movs	r3, #0
   14768:	e000      	b.n	1476c <isSorted+0x38>
	return 1;
   1476a:	2301      	movs	r3, #1
}
   1476c:	4618      	mov	r0, r3
   1476e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14772:	f2c0 0302 	movt	r3, #2
   14776:	68fa      	ldr	r2, [r7, #12]
   14778:	681b      	ldr	r3, [r3, #0]
   1477a:	429a      	cmp	r2, r3
   1477c:	d001      	beq.n	14782 <isSorted+0x4e>
   1477e:	f7f4 fc11 	bl	8fa4 <__stack_chk_fail>
   14782:	f107 0710 	add.w	r7, r7, #16
   14786:	46bd      	mov	sp, r7
   14788:	bd80      	pop	{r7, pc}
   1478a:	bf00      	nop

0001478c <negStr>:


static void negStr(char *str) { //convert str into it supplementary
   1478c:	b580      	push	{r7, lr}
   1478e:	b090      	sub	sp, #64	; 0x40
   14790:	af00      	add	r7, sp, #0
   14792:	6078      	str	r0, [r7, #4]
   14794:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14798:	f2c0 0302 	movt	r3, #2
   1479c:	681b      	ldr	r3, [r3, #0]
   1479e:	63fb      	str	r3, [r7, #60]	; 0x3c
	char tmp[16 + 1];
	char dst[16 + 1];

	VERIFY(str);

	strcpy(tmp, str);
   147a0:	f107 0314 	add.w	r3, r7, #20
   147a4:	4618      	mov	r0, r3
   147a6:	6879      	ldr	r1, [r7, #4]
   147a8:	f7f4 ea3a 	blx	8c20 <_init+0xc0>
	fmtPad(tmp, -16, '0');      //left pad by zeroes to length 16
   147ac:	f107 0314 	add.w	r3, r7, #20
   147b0:	4618      	mov	r0, r3
   147b2:	f06f 010f 	mvn.w	r1, #15
   147b6:	2230      	movs	r2, #48	; 0x30
   147b8:	f7ff fb86 	bl	13ec8 <fmtPad>

	i = 16;
   147bc:	2310      	movs	r3, #16
   147be:	73bb      	strb	r3, [r7, #14]
	p = 0;
   147c0:	2300      	movs	r3, #0
   147c2:	73fb      	strb	r3, [r7, #15]
	memset(dst, 0, 16 + 1);
   147c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
   147c8:	4618      	mov	r0, r3
   147ca:	2100      	movs	r1, #0
   147cc:	2211      	movs	r2, #17
   147ce:	f7f4 e9f6 	blx	8bbc <_init+0x5c>
	while(i--) {
   147d2:	e023      	b.n	1481c <negStr+0x90>
		VERIFY(tmp[i] <= '9');
		VERIFY(tmp[i] >= '0');
		n = tmp[i] - '0';
   147d4:	7bbb      	ldrb	r3, [r7, #14]
   147d6:	f107 0140 	add.w	r1, r7, #64	; 0x40
   147da:	18cb      	adds	r3, r1, r3
   147dc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
   147e0:	3b30      	subs	r3, #48	; 0x30
   147e2:	613b      	str	r3, [r7, #16]

		n = -n;
   147e4:	693b      	ldr	r3, [r7, #16]
   147e6:	425b      	negs	r3, r3
   147e8:	613b      	str	r3, [r7, #16]
		n -= p;
   147ea:	7bfb      	ldrb	r3, [r7, #15]
   147ec:	693a      	ldr	r2, [r7, #16]
   147ee:	1ad3      	subs	r3, r2, r3
   147f0:	613b      	str	r3, [r7, #16]
		if(n < 0) {
   147f2:	693b      	ldr	r3, [r7, #16]
   147f4:	2b00      	cmp	r3, #0
   147f6:	da05      	bge.n	14804 <negStr+0x78>
			n += 10;
   147f8:	693b      	ldr	r3, [r7, #16]
   147fa:	330a      	adds	r3, #10
   147fc:	613b      	str	r3, [r7, #16]
			VERIFY(n >= 0);
			p = 1;
   147fe:	2301      	movs	r3, #1
   14800:	73fb      	strb	r3, [r7, #15]
   14802:	e001      	b.n	14808 <negStr+0x7c>
		} else
			p = 0;
   14804:	2300      	movs	r3, #0
   14806:	73fb      	strb	r3, [r7, #15]

		VERIFY(n >= 0);
		VERIFY(n < 10);
		dst[i] = n + '0';
   14808:	7bbb      	ldrb	r3, [r7, #14]
   1480a:	693a      	ldr	r2, [r7, #16]
   1480c:	b2d2      	uxtb	r2, r2
   1480e:	3230      	adds	r2, #48	; 0x30
   14810:	b2d2      	uxtb	r2, r2
   14812:	f107 0140 	add.w	r1, r7, #64	; 0x40
   14816:	18cb      	adds	r3, r1, r3
   14818:	f803 2c18 	strb.w	r2, [r3, #-24]
	fmtPad(tmp, -16, '0');      //left pad by zeroes to length 16

	i = 16;
	p = 0;
	memset(dst, 0, 16 + 1);
	while(i--) {
   1481c:	7bbb      	ldrb	r3, [r7, #14]
   1481e:	2b00      	cmp	r3, #0
   14820:	bf0c      	ite	eq
   14822:	2300      	moveq	r3, #0
   14824:	2301      	movne	r3, #1
   14826:	b2db      	uxtb	r3, r3
   14828:	7bba      	ldrb	r2, [r7, #14]
   1482a:	3a01      	subs	r2, #1
   1482c:	73ba      	strb	r2, [r7, #14]
   1482e:	2b00      	cmp	r3, #0
   14830:	d1d0      	bne.n	147d4 <negStr+0x48>
		VERIFY(n >= 0);
		VERIFY(n < 10);
		dst[i] = n + '0';
	}

	VERIFY(strlen(dst) <= 16);
   14832:	f107 0328 	add.w	r3, r7, #40	; 0x28
   14836:	4618      	mov	r0, r3
   14838:	f7f4 ea24 	blx	8c84 <_init+0x124>
	strcpy(str, dst);
   1483c:	f107 0328 	add.w	r3, r7, #40	; 0x28
   14840:	6878      	ldr	r0, [r7, #4]
   14842:	4619      	mov	r1, r3
   14844:	f7f4 e9ec 	blx	8c20 <_init+0xc0>
}
   14848:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1484c:	f2c0 0302 	movt	r3, #2
   14850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14852:	681b      	ldr	r3, [r3, #0]
   14854:	429a      	cmp	r2, r3
   14856:	d001      	beq.n	1485c <negStr+0xd0>
   14858:	f7f4 fba4 	bl	8fa4 <__stack_chk_fail>
   1485c:	f107 0740 	add.w	r7, r7, #64	; 0x40
   14860:	46bd      	mov	sp, r7
   14862:	bd80      	pop	{r7, pc}

00014864 <neg2sup>:

static void neg2sup(char *str) {    //if negative, convert it to supplementary
   14864:	b580      	push	{r7, lr}
   14866:	b084      	sub	sp, #16
   14868:	af00      	add	r7, sp, #0
   1486a:	6078      	str	r0, [r7, #4]
   1486c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14870:	f2c0 0302 	movt	r3, #2
   14874:	681b      	ldr	r3, [r3, #0]
   14876:	60fb      	str	r3, [r7, #12]
	VERIFY(str);
	if(str[0] != '-')
   14878:	687b      	ldr	r3, [r7, #4]
   1487a:	781b      	ldrb	r3, [r3, #0]
   1487c:	2b2d      	cmp	r3, #45	; 0x2d
   1487e:	d106      	bne.n	1488e <neg2sup+0x2a>
		return;                 //non-negative - nothing to do
	*str = '0';
   14880:	687b      	ldr	r3, [r7, #4]
   14882:	2230      	movs	r2, #48	; 0x30
   14884:	701a      	strb	r2, [r3, #0]
	negStr(str);
   14886:	6878      	ldr	r0, [r7, #4]
   14888:	f7ff ff80 	bl	1478c <negStr>
   1488c:	e000      	b.n	14890 <neg2sup+0x2c>
}

static void neg2sup(char *str) {    //if negative, convert it to supplementary
	VERIFY(str);
	if(str[0] != '-')
		return;                 //non-negative - nothing to do
   1488e:	bf00      	nop
	*str = '0';
	negStr(str);
}
   14890:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14894:	f2c0 0302 	movt	r3, #2
   14898:	68fa      	ldr	r2, [r7, #12]
   1489a:	681b      	ldr	r3, [r3, #0]
   1489c:	429a      	cmp	r2, r3
   1489e:	d001      	beq.n	148a4 <neg2sup+0x40>
   148a0:	f7f4 fb80 	bl	8fa4 <__stack_chk_fail>
   148a4:	f107 0710 	add.w	r7, r7, #16
   148a8:	46bd      	mov	sp, r7
   148aa:	bd80      	pop	{r7, pc}

000148ac <sup2neg>:

static void sup2neg(char *str) {    //if supplementary, add '-' sign
   148ac:	b580      	push	{r7, lr}
   148ae:	b08a      	sub	sp, #40	; 0x28
   148b0:	af00      	add	r7, sp, #0
   148b2:	6078      	str	r0, [r7, #4]
   148b4:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   148b8:	f2c0 0302 	movt	r3, #2
   148bc:	681b      	ldr	r3, [r3, #0]
   148be:	627b      	str	r3, [r7, #36]	; 0x24
	byte i;
	char tmp[16 + 1];

	VERIFY(str);
	if(strlen(str) < 16)
   148c0:	6878      	ldr	r0, [r7, #4]
   148c2:	f7f4 e9e0 	blx	8c84 <_init+0x124>
   148c6:	4603      	mov	r3, r0
   148c8:	2b0f      	cmp	r3, #15
   148ca:	d937      	bls.n	1493c <sup2neg+0x90>
		return;                 //non-negative - nothing to do
	if(str[0] < '5')
   148cc:	687b      	ldr	r3, [r7, #4]
   148ce:	781b      	ldrb	r3, [r3, #0]
   148d0:	2b34      	cmp	r3, #52	; 0x34
   148d2:	d933      	bls.n	1493c <sup2neg+0x90>
		return;                 //non-negative - nothing to do
	negStr(str);
   148d4:	6878      	ldr	r0, [r7, #4]
   148d6:	f7ff ff59 	bl	1478c <negStr>

	i = 0;
   148da:	2300      	movs	r3, #0
   148dc:	73fb      	strb	r3, [r7, #15]
	while(str[i]) {             //the leading zeroes are to be skipped
   148de:	e008      	b.n	148f2 <sup2neg+0x46>
		if(str[i] != '0')
   148e0:	7bfb      	ldrb	r3, [r7, #15]
   148e2:	687a      	ldr	r2, [r7, #4]
   148e4:	18d3      	adds	r3, r2, r3
   148e6:	781b      	ldrb	r3, [r3, #0]
   148e8:	2b30      	cmp	r3, #48	; 0x30
   148ea:	d109      	bne.n	14900 <sup2neg+0x54>
			break;
		i++;
   148ec:	7bfb      	ldrb	r3, [r7, #15]
   148ee:	3301      	adds	r3, #1
   148f0:	73fb      	strb	r3, [r7, #15]
	if(str[0] < '5')
		return;                 //non-negative - nothing to do
	negStr(str);

	i = 0;
	while(str[i]) {             //the leading zeroes are to be skipped
   148f2:	7bfb      	ldrb	r3, [r7, #15]
   148f4:	687a      	ldr	r2, [r7, #4]
   148f6:	18d3      	adds	r3, r2, r3
   148f8:	781b      	ldrb	r3, [r3, #0]
   148fa:	2b00      	cmp	r3, #0
   148fc:	d1f0      	bne.n	148e0 <sup2neg+0x34>
   148fe:	e000      	b.n	14902 <sup2neg+0x56>
		if(str[i] != '0')
			break;
   14900:	bf00      	nop
		i++;
	}
	strcpy(tmp, str + i);
   14902:	7bfb      	ldrb	r3, [r7, #15]
   14904:	687a      	ldr	r2, [r7, #4]
   14906:	18d3      	adds	r3, r2, r3
   14908:	f107 0210 	add.w	r2, r7, #16
   1490c:	4610      	mov	r0, r2
   1490e:	4619      	mov	r1, r3
   14910:	f7f4 e986 	blx	8c20 <_init+0xc0>
	strcpy(str, tmp);
   14914:	f107 0310 	add.w	r3, r7, #16
   14918:	6878      	ldr	r0, [r7, #4]
   1491a:	4619      	mov	r1, r3
   1491c:	f7f4 e980 	blx	8c20 <_init+0xc0>

	VERIFY(strlen(str) + 1 <= 16);
   14920:	6878      	ldr	r0, [r7, #4]
   14922:	f7f4 e9b0 	blx	8c84 <_init+0x124>
	fmtPad(str, -(int) (strlen(str) + 1), '-'); //add leading '-'
   14926:	6878      	ldr	r0, [r7, #4]
   14928:	f7f4 e9ac 	blx	8c84 <_init+0x124>
   1492c:	4603      	mov	r3, r0
   1492e:	3301      	adds	r3, #1
   14930:	425b      	negs	r3, r3
   14932:	6878      	ldr	r0, [r7, #4]
   14934:	4619      	mov	r1, r3
   14936:	222d      	movs	r2, #45	; 0x2d
   14938:	f7ff fac6 	bl	13ec8 <fmtPad>
}
   1493c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14940:	f2c0 0302 	movt	r3, #2
   14944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14946:	681b      	ldr	r3, [r3, #0]
   14948:	429a      	cmp	r2, r3
   1494a:	d001      	beq.n	14950 <sup2neg+0xa4>
   1494c:	f7f4 fb2a 	bl	8fa4 <__stack_chk_fail>
   14950:	f107 0728 	add.w	r7, r7, #40	; 0x28
   14954:	46bd      	mov	sp, r7
   14956:	bd80      	pop	{r7, pc}

00014958 <addSup>:

static byte addSup(char *dst, const char *arg1, const char *arg2) { //add two values converted into supplementaries if necessary
   14958:	b580      	push	{r7, lr}
   1495a:	b096      	sub	sp, #88	; 0x58
   1495c:	af00      	add	r7, sp, #0
   1495e:	60f8      	str	r0, [r7, #12]
   14960:	60b9      	str	r1, [r7, #8]
   14962:	607a      	str	r2, [r7, #4]
   14964:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14968:	f2c0 0302 	movt	r3, #2
   1496c:	681b      	ldr	r3, [r3, #0]
   1496e:	657b      	str	r3, [r7, #84]	; 0x54

	VERIFY(dst);
	VERIFY(arg1);
	VERIFY(arg2);

	strcpy(tmp1, arg1);
   14970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14974:	4618      	mov	r0, r3
   14976:	68b9      	ldr	r1, [r7, #8]
   14978:	f7f4 e952 	blx	8c20 <_init+0xc0>
	fmtPad(tmp1, -16, '0');     //left pad by zeroes to length 16
   1497c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14980:	4618      	mov	r0, r3
   14982:	f06f 010f 	mvn.w	r1, #15
   14986:	2230      	movs	r2, #48	; 0x30
   14988:	f7ff fa9e 	bl	13ec8 <fmtPad>

	strcpy(tmp2, arg2);
   1498c:	f107 0340 	add.w	r3, r7, #64	; 0x40
   14990:	4618      	mov	r0, r3
   14992:	6879      	ldr	r1, [r7, #4]
   14994:	f7f4 e944 	blx	8c20 <_init+0xc0>
	fmtPad(tmp2, -16, '0');     //left pad by zeroes to length 16
   14998:	f107 0340 	add.w	r3, r7, #64	; 0x40
   1499c:	4618      	mov	r0, r3
   1499e:	f06f 010f 	mvn.w	r1, #15
   149a2:	2230      	movs	r2, #48	; 0x30
   149a4:	f7ff fa90 	bl	13ec8 <fmtPad>

	i = 16;
   149a8:	2310      	movs	r3, #16
   149aa:	757b      	strb	r3, [r7, #21]
	p = 0;
   149ac:	2300      	movs	r3, #0
   149ae:	75fb      	strb	r3, [r7, #23]
	memset(tmp, 0, 16 + 1);
   149b0:	f107 0318 	add.w	r3, r7, #24
   149b4:	4618      	mov	r0, r3
   149b6:	2100      	movs	r1, #0
   149b8:	2211      	movs	r2, #17
   149ba:	f7f4 e900 	blx	8bbc <_init+0x5c>
	while(i--) {                //perform the addition
   149be:	e02a      	b.n	14a16 <addSup+0xbe>
		VERIFY(tmp1[i] <= '9');
		VERIFY(tmp1[i] >= '0');
		n = tmp1[i] - '0';
   149c0:	7d7b      	ldrb	r3, [r7, #21]
   149c2:	f107 0158 	add.w	r1, r7, #88	; 0x58
   149c6:	18cb      	adds	r3, r1, r3
   149c8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
   149cc:	3b30      	subs	r3, #48	; 0x30
   149ce:	75bb      	strb	r3, [r7, #22]

		VERIFY(tmp2[i] <= '9');
		VERIFY(tmp2[i] >= '0');
		n += tmp2[i] - '0';
   149d0:	7d7b      	ldrb	r3, [r7, #21]
   149d2:	f107 0258 	add.w	r2, r7, #88	; 0x58
   149d6:	18d3      	adds	r3, r2, r3
   149d8:	f813 2c18 	ldrb.w	r2, [r3, #-24]
   149dc:	7dbb      	ldrb	r3, [r7, #22]
   149de:	18d3      	adds	r3, r2, r3
   149e0:	b2db      	uxtb	r3, r3
   149e2:	3b30      	subs	r3, #48	; 0x30
   149e4:	75bb      	strb	r3, [r7, #22]

		n += p;
   149e6:	7dba      	ldrb	r2, [r7, #22]
   149e8:	7dfb      	ldrb	r3, [r7, #23]
   149ea:	18d3      	adds	r3, r2, r3
   149ec:	75bb      	strb	r3, [r7, #22]
		if(n >= 10) {
   149ee:	7dbb      	ldrb	r3, [r7, #22]
   149f0:	2b09      	cmp	r3, #9
   149f2:	d905      	bls.n	14a00 <addSup+0xa8>
			VERIFY(n <= 19);
			n -= 10;
   149f4:	7dbb      	ldrb	r3, [r7, #22]
   149f6:	3b0a      	subs	r3, #10
   149f8:	75bb      	strb	r3, [r7, #22]
			p = 1;
   149fa:	2301      	movs	r3, #1
   149fc:	75fb      	strb	r3, [r7, #23]
   149fe:	e001      	b.n	14a04 <addSup+0xac>
		} else
			p = 0;
   14a00:	2300      	movs	r3, #0
   14a02:	75fb      	strb	r3, [r7, #23]

		VERIFY(n < 10);
		tmp[i] = n + '0';
   14a04:	7d7b      	ldrb	r3, [r7, #21]
   14a06:	7dba      	ldrb	r2, [r7, #22]
   14a08:	3230      	adds	r2, #48	; 0x30
   14a0a:	b2d2      	uxtb	r2, r2
   14a0c:	f107 0158 	add.w	r1, r7, #88	; 0x58
   14a10:	18cb      	adds	r3, r1, r3
   14a12:	f803 2c40 	strb.w	r2, [r3, #-64]
	fmtPad(tmp2, -16, '0');     //left pad by zeroes to length 16

	i = 16;
	p = 0;
	memset(tmp, 0, 16 + 1);
	while(i--) {                //perform the addition
   14a16:	7d7b      	ldrb	r3, [r7, #21]
   14a18:	2b00      	cmp	r3, #0
   14a1a:	bf0c      	ite	eq
   14a1c:	2300      	moveq	r3, #0
   14a1e:	2301      	movne	r3, #1
   14a20:	b2db      	uxtb	r3, r3
   14a22:	7d7a      	ldrb	r2, [r7, #21]
   14a24:	3a01      	subs	r2, #1
   14a26:	757a      	strb	r2, [r7, #21]
   14a28:	2b00      	cmp	r3, #0
   14a2a:	d1c9      	bne.n	149c0 <addSup+0x68>

		VERIFY(n < 10);
		tmp[i] = n + '0';
	}

	i = 0;
   14a2c:	2300      	movs	r3, #0
   14a2e:	757b      	strb	r3, [r7, #21]
	while(tmp[i]) {             //the leading zeroes are to be skipped
   14a30:	e00a      	b.n	14a48 <addSup+0xf0>
		if(tmp[i] != '0')
   14a32:	7d7b      	ldrb	r3, [r7, #21]
   14a34:	f107 0258 	add.w	r2, r7, #88	; 0x58
   14a38:	18d3      	adds	r3, r2, r3
   14a3a:	f813 3c40 	ldrb.w	r3, [r3, #-64]
   14a3e:	2b30      	cmp	r3, #48	; 0x30
   14a40:	d10b      	bne.n	14a5a <addSup+0x102>
			break;
		i++;
   14a42:	7d7b      	ldrb	r3, [r7, #21]
   14a44:	3301      	adds	r3, #1
   14a46:	757b      	strb	r3, [r7, #21]
		VERIFY(n < 10);
		tmp[i] = n + '0';
	}

	i = 0;
	while(tmp[i]) {             //the leading zeroes are to be skipped
   14a48:	7d7b      	ldrb	r3, [r7, #21]
   14a4a:	f107 0158 	add.w	r1, r7, #88	; 0x58
   14a4e:	18cb      	adds	r3, r1, r3
   14a50:	f813 3c40 	ldrb.w	r3, [r3, #-64]
   14a54:	2b00      	cmp	r3, #0
   14a56:	d1ec      	bne.n	14a32 <addSup+0xda>
   14a58:	e000      	b.n	14a5c <addSup+0x104>
		if(tmp[i] != '0')
			break;
   14a5a:	bf00      	nop
		i++;
	}

	VERIFY(strlen(tmp + i) <= 16);
   14a5c:	7d7b      	ldrb	r3, [r7, #21]
   14a5e:	f107 0218 	add.w	r2, r7, #24
   14a62:	18d3      	adds	r3, r2, r3
   14a64:	4618      	mov	r0, r3
   14a66:	f7f4 e90e 	blx	8c84 <_init+0x124>
	if(!*(tmp + i))             //full zero string
   14a6a:	7d7b      	ldrb	r3, [r7, #21]
   14a6c:	f107 0218 	add.w	r2, r7, #24
   14a70:	18d3      	adds	r3, r2, r3
   14a72:	781b      	ldrb	r3, [r3, #0]
   14a74:	2b00      	cmp	r3, #0
   14a76:	d107      	bne.n	14a88 <addSup+0x130>
		strcpy(dst, "0");
   14a78:	68fa      	ldr	r2, [r7, #12]
   14a7a:	f644 03f0 	movw	r3, #18672	; 0x48f0
   14a7e:	f2c0 0302 	movt	r3, #2
   14a82:	881b      	ldrh	r3, [r3, #0]
   14a84:	8013      	strh	r3, [r2, #0]
   14a86:	e007      	b.n	14a98 <addSup+0x140>
	else
		strcpy(dst, tmp + i);
   14a88:	7d7b      	ldrb	r3, [r7, #21]
   14a8a:	f107 0218 	add.w	r2, r7, #24
   14a8e:	18d3      	adds	r3, r2, r3
   14a90:	68f8      	ldr	r0, [r7, #12]
   14a92:	4619      	mov	r1, r3
   14a94:	f7f4 e8c4 	blx	8c20 <_init+0xc0>
	return strlen(dst);
   14a98:	68f8      	ldr	r0, [r7, #12]
   14a9a:	f7f4 e8f4 	blx	8c84 <_init+0x124>
   14a9e:	4603      	mov	r3, r0
   14aa0:	b2db      	uxtb	r3, r3
}
   14aa2:	4618      	mov	r0, r3
   14aa4:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14aa8:	f2c0 0302 	movt	r3, #2
   14aac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   14aae:	681b      	ldr	r3, [r3, #0]
   14ab0:	429a      	cmp	r2, r3
   14ab2:	d001      	beq.n	14ab8 <addSup+0x160>
   14ab4:	f7f4 fa76 	bl	8fa4 <__stack_chk_fail>
   14ab8:	f107 0758 	add.w	r7, r7, #88	; 0x58
   14abc:	46bd      	mov	sp, r7
   14abe:	bd80      	pop	{r7, pc}

00014ac0 <addStr>:
 *    - strlen(dst)
 *
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 */
byte addStr(char *dst, const char *arg1, const char *arg2) {
   14ac0:	b580      	push	{r7, lr}
   14ac2:	b090      	sub	sp, #64	; 0x40
   14ac4:	af00      	add	r7, sp, #0
   14ac6:	60f8      	str	r0, [r7, #12]
   14ac8:	60b9      	str	r1, [r7, #8]
   14aca:	607a      	str	r2, [r7, #4]
   14acc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14ad0:	f2c0 0302 	movt	r3, #2
   14ad4:	681b      	ldr	r3, [r3, #0]
   14ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
	char tmp2[16 + 1];

	VERIFY(dst);
	VERIFY(arg1);
	VERIFY(arg2);
	VERIFY(strlen(arg1) <= 16);
   14ad8:	68b8      	ldr	r0, [r7, #8]
   14ada:	f7f4 e8d4 	blx	8c84 <_init+0x124>
	VERIFY(strlen(arg2) <= 16);
   14ade:	6878      	ldr	r0, [r7, #4]
   14ae0:	f7f4 e8d0 	blx	8c84 <_init+0x124>

	strcpy(tmp1, arg1);
   14ae4:	f107 0314 	add.w	r3, r7, #20
   14ae8:	4618      	mov	r0, r3
   14aea:	68b9      	ldr	r1, [r7, #8]
   14aec:	f7f4 e898 	blx	8c20 <_init+0xc0>
	neg2sup(tmp1);
   14af0:	f107 0314 	add.w	r3, r7, #20
   14af4:	4618      	mov	r0, r3
   14af6:	f7ff feb5 	bl	14864 <neg2sup>

	strcpy(tmp2, arg2);
   14afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
   14afe:	4618      	mov	r0, r3
   14b00:	6879      	ldr	r1, [r7, #4]
   14b02:	f7f4 e88e 	blx	8c20 <_init+0xc0>
	neg2sup(tmp2);
   14b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
   14b0a:	4618      	mov	r0, r3
   14b0c:	f7ff feaa 	bl	14864 <neg2sup>

	i = addSup(dst, tmp1, tmp2);
   14b10:	f107 0214 	add.w	r2, r7, #20
   14b14:	f107 0328 	add.w	r3, r7, #40	; 0x28
   14b18:	68f8      	ldr	r0, [r7, #12]
   14b1a:	4611      	mov	r1, r2
   14b1c:	461a      	mov	r2, r3
   14b1e:	f7ff ff1b 	bl	14958 <addSup>
   14b22:	4603      	mov	r3, r0
   14b24:	74fb      	strb	r3, [r7, #19]
	sup2neg(dst);
   14b26:	68f8      	ldr	r0, [r7, #12]
   14b28:	f7ff fec0 	bl	148ac <sup2neg>
	return i;
   14b2c:	7cfb      	ldrb	r3, [r7, #19]
}
   14b2e:	4618      	mov	r0, r3
   14b30:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14b34:	f2c0 0302 	movt	r3, #2
   14b38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14b3a:	681b      	ldr	r3, [r3, #0]
   14b3c:	429a      	cmp	r2, r3
   14b3e:	d001      	beq.n	14b44 <addStr+0x84>
   14b40:	f7f4 fa30 	bl	8fa4 <__stack_chk_fail>
   14b44:	f107 0740 	add.w	r7, r7, #64	; 0x40
   14b48:	46bd      	mov	sp, r7
   14b4a:	bd80      	pop	{r7, pc}

00014b4c <subStr>:
 *    - strlen(dst)
 *
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 */
byte subStr(char *dst, const char *arg1, const char *arg2) {
   14b4c:	b580      	push	{r7, lr}
   14b4e:	b090      	sub	sp, #64	; 0x40
   14b50:	af00      	add	r7, sp, #0
   14b52:	60f8      	str	r0, [r7, #12]
   14b54:	60b9      	str	r1, [r7, #8]
   14b56:	607a      	str	r2, [r7, #4]
   14b58:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14b5c:	f2c0 0302 	movt	r3, #2
   14b60:	681b      	ldr	r3, [r3, #0]
   14b62:	63fb      	str	r3, [r7, #60]	; 0x3c
	char tmp2[16 + 1];

	VERIFY(dst);
	VERIFY(arg1);
	VERIFY(arg2);
	VERIFY(strlen(arg1) <= 16);
   14b64:	68b8      	ldr	r0, [r7, #8]
   14b66:	f7f4 e88e 	blx	8c84 <_init+0x124>
	VERIFY(strlen(arg2) <= 16);
   14b6a:	6878      	ldr	r0, [r7, #4]
   14b6c:	f7f4 e88a 	blx	8c84 <_init+0x124>

	strcpy(tmp1, arg1);
   14b70:	f107 0314 	add.w	r3, r7, #20
   14b74:	4618      	mov	r0, r3
   14b76:	68b9      	ldr	r1, [r7, #8]
   14b78:	f7f4 e852 	blx	8c20 <_init+0xc0>
	neg2sup(tmp1);
   14b7c:	f107 0314 	add.w	r3, r7, #20
   14b80:	4618      	mov	r0, r3
   14b82:	f7ff fe6f 	bl	14864 <neg2sup>

	strcpy(tmp2, arg2);
   14b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
   14b8a:	4618      	mov	r0, r3
   14b8c:	6879      	ldr	r1, [r7, #4]
   14b8e:	f7f4 e848 	blx	8c20 <_init+0xc0>
	neg2sup(tmp2);
   14b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
   14b96:	4618      	mov	r0, r3
   14b98:	f7ff fe64 	bl	14864 <neg2sup>
	negStr(tmp2);
   14b9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
   14ba0:	4618      	mov	r0, r3
   14ba2:	f7ff fdf3 	bl	1478c <negStr>

	i = addSup(dst, tmp1, tmp2);
   14ba6:	f107 0214 	add.w	r2, r7, #20
   14baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
   14bae:	68f8      	ldr	r0, [r7, #12]
   14bb0:	4611      	mov	r1, r2
   14bb2:	461a      	mov	r2, r3
   14bb4:	f7ff fed0 	bl	14958 <addSup>
   14bb8:	4603      	mov	r3, r0
   14bba:	74fb      	strb	r3, [r7, #19]
	sup2neg(dst);
   14bbc:	68f8      	ldr	r0, [r7, #12]
   14bbe:	f7ff fe75 	bl	148ac <sup2neg>
	return i;
   14bc2:	7cfb      	ldrb	r3, [r7, #19]
}
   14bc4:	4618      	mov	r0, r3
   14bc6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14bca:	f2c0 0302 	movt	r3, #2
   14bce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14bd0:	681b      	ldr	r3, [r3, #0]
   14bd2:	429a      	cmp	r2, r3
   14bd4:	d001      	beq.n	14bda <subStr+0x8e>
   14bd6:	f7f4 f9e5 	bl	8fa4 <__stack_chk_fail>
   14bda:	f107 0740 	add.w	r7, r7, #64	; 0x40
   14bde:	46bd      	mov	sp, r7
   14be0:	bd80      	pop	{r7, pc}
   14be2:	bf00      	nop

00014be4 <stdPow>:

/**
 * \todo To be documented
 */
card stdPow(int num, int exp) {
   14be4:	b580      	push	{r7, lr}
   14be6:	b086      	sub	sp, #24
   14be8:	af00      	add	r7, sp, #0
   14bea:	6078      	str	r0, [r7, #4]
   14bec:	6039      	str	r1, [r7, #0]
   14bee:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14bf2:	f2c0 0302 	movt	r3, #2
   14bf6:	681b      	ldr	r3, [r3, #0]
   14bf8:	617b      	str	r3, [r7, #20]
	int i;
	card c = 1;
   14bfa:	2301      	movs	r3, #1
   14bfc:	613b      	str	r3, [r7, #16]

	for (i = 1; i <= exp; i++, c *= num);
   14bfe:	2301      	movs	r3, #1
   14c00:	60fb      	str	r3, [r7, #12]
   14c02:	e007      	b.n	14c14 <stdPow+0x30>
   14c04:	68fb      	ldr	r3, [r7, #12]
   14c06:	3301      	adds	r3, #1
   14c08:	60fb      	str	r3, [r7, #12]
   14c0a:	687a      	ldr	r2, [r7, #4]
   14c0c:	693b      	ldr	r3, [r7, #16]
   14c0e:	fb02 f303 	mul.w	r3, r2, r3
   14c12:	613b      	str	r3, [r7, #16]
   14c14:	68fa      	ldr	r2, [r7, #12]
   14c16:	683b      	ldr	r3, [r7, #0]
   14c18:	429a      	cmp	r2, r3
   14c1a:	ddf3      	ble.n	14c04 <stdPow+0x20>
	return c;
   14c1c:	693b      	ldr	r3, [r7, #16]
}
   14c1e:	4618      	mov	r0, r3
   14c20:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14c24:	f2c0 0302 	movt	r3, #2
   14c28:	697a      	ldr	r2, [r7, #20]
   14c2a:	681b      	ldr	r3, [r3, #0]
   14c2c:	429a      	cmp	r2, r3
   14c2e:	d001      	beq.n	14c34 <stdPow+0x50>
   14c30:	f7f4 f9b8 	bl	8fa4 <__stack_chk_fail>
   14c34:	f107 0718 	add.w	r7, r7, #24
   14c38:	46bd      	mov	sp, r7
   14c3a:	bd80      	pop	{r7, pc}

00014c3c <stdLrc>:
 * \return
 *    - lrc checksum calculated
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 */
byte stdLrc(const byte * buf, int len) {
   14c3c:	b580      	push	{r7, lr}
   14c3e:	b084      	sub	sp, #16
   14c40:	af00      	add	r7, sp, #0
   14c42:	6078      	str	r0, [r7, #4]
   14c44:	6039      	str	r1, [r7, #0]
   14c46:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14c4a:	f2c0 0302 	movt	r3, #2
   14c4e:	681b      	ldr	r3, [r3, #0]
   14c50:	60fb      	str	r3, [r7, #12]
	byte lrc;

	VERIFY(buf);
	lrc = 0;
   14c52:	2300      	movs	r3, #0
   14c54:	72fb      	strb	r3, [r7, #11]
	while(len--)
   14c56:	e007      	b.n	14c68 <stdLrc+0x2c>
		lrc ^= *buf++;
   14c58:	687b      	ldr	r3, [r7, #4]
   14c5a:	781a      	ldrb	r2, [r3, #0]
   14c5c:	7afb      	ldrb	r3, [r7, #11]
   14c5e:	4053      	eors	r3, r2
   14c60:	72fb      	strb	r3, [r7, #11]
   14c62:	687b      	ldr	r3, [r7, #4]
   14c64:	3301      	adds	r3, #1
   14c66:	607b      	str	r3, [r7, #4]
byte stdLrc(const byte * buf, int len) {
	byte lrc;

	VERIFY(buf);
	lrc = 0;
	while(len--)
   14c68:	683b      	ldr	r3, [r7, #0]
   14c6a:	2b00      	cmp	r3, #0
   14c6c:	bf0c      	ite	eq
   14c6e:	2300      	moveq	r3, #0
   14c70:	2301      	movne	r3, #1
   14c72:	b2db      	uxtb	r3, r3
   14c74:	683a      	ldr	r2, [r7, #0]
   14c76:	3a01      	subs	r2, #1
   14c78:	603a      	str	r2, [r7, #0]
   14c7a:	2b00      	cmp	r3, #0
   14c7c:	d1ec      	bne.n	14c58 <stdLrc+0x1c>
		lrc ^= *buf++;
	return lrc;
   14c7e:	7afb      	ldrb	r3, [r7, #11]
}
   14c80:	4618      	mov	r0, r3
   14c82:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14c86:	f2c0 0302 	movt	r3, #2
   14c8a:	68fa      	ldr	r2, [r7, #12]
   14c8c:	681b      	ldr	r3, [r3, #0]
   14c8e:	429a      	cmp	r2, r3
   14c90:	d001      	beq.n	14c96 <stdLrc+0x5a>
   14c92:	f7f4 f987 	bl	8fa4 <__stack_chk_fail>
   14c96:	f107 0710 	add.w	r7, r7, #16
   14c9a:	46bd      	mov	sp, r7
   14c9c:	bd80      	pop	{r7, pc}
   14c9e:	bf00      	nop

00014ca0 <trk2Lrc>:
 *    - lrc checksum calculated
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 * \test tcnl0028.c
 */
byte trk2Lrc(const byte * buf, int len) {
   14ca0:	b580      	push	{r7, lr}
   14ca2:	b084      	sub	sp, #16
   14ca4:	af00      	add	r7, sp, #0
   14ca6:	6078      	str	r0, [r7, #4]
   14ca8:	6039      	str	r1, [r7, #0]
   14caa:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14cae:	f2c0 0302 	movt	r3, #2
   14cb2:	681b      	ldr	r3, [r3, #0]
   14cb4:	60fb      	str	r3, [r7, #12]
	byte lrc;
	byte a = 0;
   14cb6:	2300      	movs	r3, #0
   14cb8:	72fb      	strb	r3, [r7, #11]

	VERIFY(buf);
	lrc = 0;
   14cba:	2300      	movs	r3, #0
   14cbc:	72bb      	strb	r3, [r7, #10]
	while(len--) {
   14cbe:	e009      	b.n	14cd4 <trk2Lrc+0x34>
		a = *buf;
   14cc0:	687b      	ldr	r3, [r7, #4]
   14cc2:	781b      	ldrb	r3, [r3, #0]
   14cc4:	72fb      	strb	r3, [r7, #11]
		lrc ^= a;
   14cc6:	7aba      	ldrb	r2, [r7, #10]
   14cc8:	7afb      	ldrb	r3, [r7, #11]
   14cca:	4053      	eors	r3, r2
   14ccc:	72bb      	strb	r3, [r7, #10]
		buf++;
   14cce:	687b      	ldr	r3, [r7, #4]
   14cd0:	3301      	adds	r3, #1
   14cd2:	607b      	str	r3, [r7, #4]
	byte lrc;
	byte a = 0;

	VERIFY(buf);
	lrc = 0;
	while(len--) {
   14cd4:	683b      	ldr	r3, [r7, #0]
   14cd6:	2b00      	cmp	r3, #0
   14cd8:	bf0c      	ite	eq
   14cda:	2300      	moveq	r3, #0
   14cdc:	2301      	movne	r3, #1
   14cde:	b2db      	uxtb	r3, r3
   14ce0:	683a      	ldr	r2, [r7, #0]
   14ce2:	3a01      	subs	r2, #1
   14ce4:	603a      	str	r2, [r7, #0]
   14ce6:	2b00      	cmp	r3, #0
   14ce8:	d1ea      	bne.n	14cc0 <trk2Lrc+0x20>
		a = *buf;
		lrc ^= a;
		buf++;
	}
	lrc = lrc & 0x0F;
   14cea:	7abb      	ldrb	r3, [r7, #10]
   14cec:	f003 030f 	and.w	r3, r3, #15
   14cf0:	72bb      	strb	r3, [r7, #10]
	lrc = lrc + 0x30;
   14cf2:	7abb      	ldrb	r3, [r7, #10]
   14cf4:	3330      	adds	r3, #48	; 0x30
   14cf6:	72bb      	strb	r3, [r7, #10]
	return lrc;
   14cf8:	7abb      	ldrb	r3, [r7, #10]

}
   14cfa:	4618      	mov	r0, r3
   14cfc:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14d00:	f2c0 0302 	movt	r3, #2
   14d04:	68fa      	ldr	r2, [r7, #12]
   14d06:	681b      	ldr	r3, [r3, #0]
   14d08:	429a      	cmp	r2, r3
   14d0a:	d001      	beq.n	14d10 <trk2Lrc+0x70>
   14d0c:	f7f4 f94a 	bl	8fa4 <__stack_chk_fail>
   14d10:	f107 0710 	add.w	r7, r7, #16
   14d14:	46bd      	mov	sp, r7
   14d16:	bd80      	pop	{r7, pc}

00014d18 <stdGetAcc>:
 *    - negative otherwise (short pan).
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 */
#define lenAcc 12
byte stdGetAcc(byte * acc, const char *pan) {
   14d18:	b580      	push	{r7, lr}
   14d1a:	b08a      	sub	sp, #40	; 0x28
   14d1c:	af00      	add	r7, sp, #0
   14d1e:	6078      	str	r0, [r7, #4]
   14d20:	6039      	str	r1, [r7, #0]
   14d22:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14d26:	f2c0 0302 	movt	r3, #2
   14d2a:	681b      	ldr	r3, [r3, #0]
   14d2c:	627b      	str	r3, [r7, #36]	; 0x24

	VERIFY(acc);
	VERIFY(pan);
	VERIFY(strlen(pan));

	memset(acc, 0, 8);
   14d2e:	6878      	ldr	r0, [r7, #4]
   14d30:	2100      	movs	r1, #0
   14d32:	2208      	movs	r2, #8
   14d34:	f7f3 ef42 	blx	8bbc <_init+0x5c>

	idx = strlen(pan) - 1;      //non include Luhn code
   14d38:	6838      	ldr	r0, [r7, #0]
   14d3a:	f7f3 efa4 	blx	8c84 <_init+0x124>
   14d3e:	4603      	mov	r3, r0
   14d40:	b2db      	uxtb	r3, r3
   14d42:	3b01      	subs	r3, #1
   14d44:	73fb      	strb	r3, [r7, #15]
	if(idx < lenAcc)
   14d46:	7bfb      	ldrb	r3, [r7, #15]
   14d48:	2b0b      	cmp	r3, #11
   14d4a:	d801      	bhi.n	14d50 <stdGetAcc+0x38>
		return 0;               //pan too short
   14d4c:	2300      	movs	r3, #0
   14d4e:	e01d      	b.n	14d8c <stdGetAcc+0x74>

	idx -= lenAcc;
   14d50:	7bfb      	ldrb	r3, [r7, #15]
   14d52:	3b0c      	subs	r3, #12
   14d54:	73fb      	strb	r3, [r7, #15]
	ret = fmtSbs(asc, pan, idx, lenAcc);
   14d56:	f107 0214 	add.w	r2, r7, #20
   14d5a:	7bfb      	ldrb	r3, [r7, #15]
   14d5c:	4610      	mov	r0, r2
   14d5e:	6839      	ldr	r1, [r7, #0]
   14d60:	461a      	mov	r2, r3
   14d62:	230c      	movs	r3, #12
   14d64:	f7ff f82e 	bl	13dc4 <fmtSbs>
   14d68:	6138      	str	r0, [r7, #16]
	VERIFY(ret == lenAcc);
	VERIFY(strlen(asc) == lenAcc);
   14d6a:	f107 0314 	add.w	r3, r7, #20
   14d6e:	4618      	mov	r0, r3
   14d70:	f7f3 ef88 	blx	8c84 <_init+0x124>

	ret = hex2bin(acc + 2, asc, lenAcc / 2);
   14d74:	687b      	ldr	r3, [r7, #4]
   14d76:	1c9a      	adds	r2, r3, #2
   14d78:	f107 0314 	add.w	r3, r7, #20
   14d7c:	4610      	mov	r0, r2
   14d7e:	4619      	mov	r1, r3
   14d80:	2206      	movs	r2, #6
   14d82:	f7fd ff15 	bl	12bb0 <hex2bin>
   14d86:	6138      	str	r0, [r7, #16]
	VERIFY(ret == (lenAcc / 2));

	return (byte) ret;
   14d88:	693b      	ldr	r3, [r7, #16]
   14d8a:	b2db      	uxtb	r3, r3
}
   14d8c:	4618      	mov	r0, r3
   14d8e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14d92:	f2c0 0302 	movt	r3, #2
   14d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14d98:	681b      	ldr	r3, [r3, #0]
   14d9a:	429a      	cmp	r2, r3
   14d9c:	d001      	beq.n	14da2 <stdGetAcc+0x8a>
   14d9e:	f7f4 f901 	bl	8fa4 <__stack_chk_fail>
   14da2:	f107 0728 	add.w	r7, r7, #40	; 0x28
   14da6:	46bd      	mov	sp, r7
   14da8:	bd80      	pop	{r7, pc}
   14daa:	bf00      	nop

00014dac <stdLuhnCheck>:
 *    - 0 otherwise.
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 * \test tcab0053.c
 */
byte stdLuhnCheck(const char *pan) {
   14dac:	b580      	push	{r7, lr}
   14dae:	b086      	sub	sp, #24
   14db0:	af00      	add	r7, sp, #0
   14db2:	6078      	str	r0, [r7, #4]
   14db4:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14db8:	f2c0 0302 	movt	r3, #2
   14dbc:	681b      	ldr	r3, [r3, #0]
   14dbe:	617b      	str	r3, [r7, #20]
	byte odd;                   //odd/even flag
	byte tmp;

	VERIFY(pan);

	len = strlen(pan);
   14dc0:	6878      	ldr	r0, [r7, #4]
   14dc2:	f7f3 ef60 	blx	8c84 <_init+0x124>
   14dc6:	4603      	mov	r3, r0
   14dc8:	74fb      	strb	r3, [r7, #19]
	if(!len)
   14dca:	7cfb      	ldrb	r3, [r7, #19]
   14dcc:	2b00      	cmp	r3, #0
   14dce:	d101      	bne.n	14dd4 <stdLuhnCheck+0x28>
		return 0;               //empty pan
   14dd0:	2300      	movs	r3, #0
   14dd2:	e065      	b.n	14ea0 <stdLuhnCheck+0xf4>
	idx = len;
   14dd4:	7cfb      	ldrb	r3, [r7, #19]
   14dd6:	73fb      	strb	r3, [r7, #15]
	sum = 0;
   14dd8:	2300      	movs	r3, #0
   14dda:	743b      	strb	r3, [r7, #16]
	odd = 1;
   14ddc:	2301      	movs	r3, #1
   14dde:	747b      	strb	r3, [r7, #17]
	while(idx--) {
   14de0:	e040      	b.n	14e64 <stdLuhnCheck+0xb8>
		if(pan[idx] < '0')
   14de2:	7bfb      	ldrb	r3, [r7, #15]
   14de4:	687a      	ldr	r2, [r7, #4]
   14de6:	18d3      	adds	r3, r2, r3
   14de8:	781b      	ldrb	r3, [r3, #0]
   14dea:	2b2f      	cmp	r3, #47	; 0x2f
   14dec:	d801      	bhi.n	14df2 <stdLuhnCheck+0x46>
			return 0;           //invalid character
   14dee:	2300      	movs	r3, #0
   14df0:	e056      	b.n	14ea0 <stdLuhnCheck+0xf4>
		if(pan[idx] > '9')
   14df2:	7bfb      	ldrb	r3, [r7, #15]
   14df4:	687a      	ldr	r2, [r7, #4]
   14df6:	18d3      	adds	r3, r2, r3
   14df8:	781b      	ldrb	r3, [r3, #0]
   14dfa:	2b39      	cmp	r3, #57	; 0x39
   14dfc:	d901      	bls.n	14e02 <stdLuhnCheck+0x56>
			return 0;           //invalid character
   14dfe:	2300      	movs	r3, #0
   14e00:	e04e      	b.n	14ea0 <stdLuhnCheck+0xf4>
		tmp = pan[idx] - '0';
   14e02:	7bfb      	ldrb	r3, [r7, #15]
   14e04:	687a      	ldr	r2, [r7, #4]
   14e06:	18d3      	adds	r3, r2, r3
   14e08:	781b      	ldrb	r3, [r3, #0]
   14e0a:	3b30      	subs	r3, #48	; 0x30
   14e0c:	74bb      	strb	r3, [r7, #18]
		if(!odd) {
   14e0e:	7c7b      	ldrb	r3, [r7, #17]
   14e10:	2b00      	cmp	r3, #0
   14e12:	d11c      	bne.n	14e4e <stdLuhnCheck+0xa2>
			tmp += tmp;
   14e14:	7cba      	ldrb	r2, [r7, #18]
   14e16:	7cbb      	ldrb	r3, [r7, #18]
   14e18:	18d3      	adds	r3, r2, r3
   14e1a:	74bb      	strb	r3, [r7, #18]
			tmp = (tmp % 10) + (tmp / 10);
   14e1c:	7cba      	ldrb	r2, [r7, #18]
   14e1e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
   14e22:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
   14e26:	fba3 0302 	umull	r0, r3, r3, r2
   14e2a:	08d9      	lsrs	r1, r3, #3
   14e2c:	460b      	mov	r3, r1
   14e2e:	009b      	lsls	r3, r3, #2
   14e30:	185b      	adds	r3, r3, r1
   14e32:	005b      	lsls	r3, r3, #1
   14e34:	1ad3      	subs	r3, r2, r3
   14e36:	b2da      	uxtb	r2, r3
   14e38:	7cb9      	ldrb	r1, [r7, #18]
   14e3a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
   14e3e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
   14e42:	fba3 0301 	umull	r0, r3, r3, r1
   14e46:	08db      	lsrs	r3, r3, #3
   14e48:	b2db      	uxtb	r3, r3
   14e4a:	18d3      	adds	r3, r2, r3
   14e4c:	74bb      	strb	r3, [r7, #18]
		}
		sum += tmp;
   14e4e:	7c3a      	ldrb	r2, [r7, #16]
   14e50:	7cbb      	ldrb	r3, [r7, #18]
   14e52:	18d3      	adds	r3, r2, r3
   14e54:	743b      	strb	r3, [r7, #16]
		odd = !odd;
   14e56:	7c7b      	ldrb	r3, [r7, #17]
   14e58:	2b00      	cmp	r3, #0
   14e5a:	bf14      	ite	ne
   14e5c:	2300      	movne	r3, #0
   14e5e:	2301      	moveq	r3, #1
   14e60:	b2db      	uxtb	r3, r3
   14e62:	747b      	strb	r3, [r7, #17]
	if(!len)
		return 0;               //empty pan
	idx = len;
	sum = 0;
	odd = 1;
	while(idx--) {
   14e64:	7bfb      	ldrb	r3, [r7, #15]
   14e66:	2b00      	cmp	r3, #0
   14e68:	bf0c      	ite	eq
   14e6a:	2300      	moveq	r3, #0
   14e6c:	2301      	movne	r3, #1
   14e6e:	b2db      	uxtb	r3, r3
   14e70:	7bfa      	ldrb	r2, [r7, #15]
   14e72:	3a01      	subs	r2, #1
   14e74:	73fa      	strb	r2, [r7, #15]
   14e76:	2b00      	cmp	r3, #0
   14e78:	d1b3      	bne.n	14de2 <stdLuhnCheck+0x36>
			tmp = (tmp % 10) + (tmp / 10);
		}
		sum += tmp;
		odd = !odd;
	}
	if(sum % 10 == 0)
   14e7a:	7c3a      	ldrb	r2, [r7, #16]
   14e7c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
   14e80:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
   14e84:	fba3 1302 	umull	r1, r3, r3, r2
   14e88:	08d9      	lsrs	r1, r3, #3
   14e8a:	460b      	mov	r3, r1
   14e8c:	009b      	lsls	r3, r3, #2
   14e8e:	185b      	adds	r3, r3, r1
   14e90:	005b      	lsls	r3, r3, #1
   14e92:	1ad3      	subs	r3, r2, r3
   14e94:	b2db      	uxtb	r3, r3
   14e96:	2b00      	cmp	r3, #0
   14e98:	d101      	bne.n	14e9e <stdLuhnCheck+0xf2>
		return 1;
   14e9a:	2301      	movs	r3, #1
   14e9c:	e000      	b.n	14ea0 <stdLuhnCheck+0xf4>
	return 0;
   14e9e:	2300      	movs	r3, #0
}
   14ea0:	4618      	mov	r0, r3
   14ea2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14ea6:	f2c0 0302 	movt	r3, #2
   14eaa:	697a      	ldr	r2, [r7, #20]
   14eac:	681b      	ldr	r3, [r3, #0]
   14eae:	429a      	cmp	r2, r3
   14eb0:	d001      	beq.n	14eb6 <stdLuhnCheck+0x10a>
   14eb2:	f7f4 f877 	bl	8fa4 <__stack_chk_fail>
   14eb6:	f107 0718 	add.w	r7, r7, #24
   14eba:	46bd      	mov	sp, r7
   14ebc:	bd80      	pop	{r7, pc}
   14ebe:	bf00      	nop

00014ec0 <stdArgMsgCrc16>:

/**
 * \todo To be documented
 */
void stdArgMsgCrc16(word * crc_val) {
   14ec0:	b580      	push	{r7, lr}
   14ec2:	b084      	sub	sp, #16
   14ec4:	af00      	add	r7, sp, #0
   14ec6:	6078      	str	r0, [r7, #4]
   14ec8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14ecc:	f2c0 0302 	movt	r3, #2
   14ed0:	681b      	ldr	r3, [r3, #0]
   14ed2:	60fb      	str	r3, [r7, #12]
	word i = 0, flag;
   14ed4:	2300      	movs	r3, #0
   14ed6:	813b      	strh	r3, [r7, #8]

	for (i = 0; i < 16; i++) {
   14ed8:	2300      	movs	r3, #0
   14eda:	813b      	strh	r3, [r7, #8]
   14edc:	e01b      	b.n	14f16 <stdArgMsgCrc16+0x56>
		flag = (crc_val[0] & 0x8000);
   14ede:	687b      	ldr	r3, [r7, #4]
   14ee0:	881b      	ldrh	r3, [r3, #0]
   14ee2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
   14ee6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   14eea:	817b      	strh	r3, [r7, #10]
		crc_val[0] <<= 1;
   14eec:	687b      	ldr	r3, [r7, #4]
   14eee:	881b      	ldrh	r3, [r3, #0]
   14ef0:	005b      	lsls	r3, r3, #1
   14ef2:	b29a      	uxth	r2, r3
   14ef4:	687b      	ldr	r3, [r7, #4]
   14ef6:	801a      	strh	r2, [r3, #0]
		if(flag)
   14ef8:	897b      	ldrh	r3, [r7, #10]
   14efa:	2b00      	cmp	r3, #0
   14efc:	d008      	beq.n	14f10 <stdArgMsgCrc16+0x50>
			crc_val[0] ^= 0x1021;
   14efe:	687b      	ldr	r3, [r7, #4]
   14f00:	881b      	ldrh	r3, [r3, #0]
   14f02:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
   14f06:	f083 0301 	eor.w	r3, r3, #1
   14f0a:	b29a      	uxth	r2, r3
   14f0c:	687b      	ldr	r3, [r7, #4]
   14f0e:	801a      	strh	r2, [r3, #0]
 * \todo To be documented
 */
void stdArgMsgCrc16(word * crc_val) {
	word i = 0, flag;

	for (i = 0; i < 16; i++) {
   14f10:	893b      	ldrh	r3, [r7, #8]
   14f12:	3301      	adds	r3, #1
   14f14:	813b      	strh	r3, [r7, #8]
   14f16:	893b      	ldrh	r3, [r7, #8]
   14f18:	2b0f      	cmp	r3, #15
   14f1a:	d9e0      	bls.n	14ede <stdArgMsgCrc16+0x1e>
		flag = (crc_val[0] & 0x8000);
		crc_val[0] <<= 1;
		if(flag)
			crc_val[0] ^= 0x1021;
	}
}
   14f1c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14f20:	f2c0 0302 	movt	r3, #2
   14f24:	68fa      	ldr	r2, [r7, #12]
   14f26:	681b      	ldr	r3, [r3, #0]
   14f28:	429a      	cmp	r2, r3
   14f2a:	d001      	beq.n	14f30 <stdArgMsgCrc16+0x70>
   14f2c:	f7f4 f83a 	bl	8fa4 <__stack_chk_fail>
   14f30:	f107 0710 	add.w	r7, r7, #16
   14f34:	46bd      	mov	sp, r7
   14f36:	bd80      	pop	{r7, pc}

00014f38 <stdCrc16>:

/** Crc16(Xmodem) calculation according to CCITT-1021
 * \todo To be documented
 * \test tcnl0015.C
 */
word stdCrc16(const byte * buf, word len, byte augment_message_for_crc) {
   14f38:	b580      	push	{r7, lr}
   14f3a:	b086      	sub	sp, #24
   14f3c:	af00      	add	r7, sp, #0
   14f3e:	6078      	str	r0, [r7, #4]
   14f40:	4613      	mov	r3, r2
   14f42:	460a      	mov	r2, r1
   14f44:	807a      	strh	r2, [r7, #2]
   14f46:	707b      	strb	r3, [r7, #1]
   14f48:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14f4c:	f2c0 0302 	movt	r3, #2
   14f50:	681b      	ldr	r3, [r3, #0]
   14f52:	617b      	str	r3, [r7, #20]

	word crc_val = 0x0000;
   14f54:	2300      	movs	r3, #0
   14f56:	81bb      	strh	r3, [r7, #12]
	word i = 0;
   14f58:	2300      	movs	r3, #0
   14f5a:	81fb      	strh	r3, [r7, #14]
	word shifter, flag;

	crc_val = 0;
   14f5c:	2300      	movs	r3, #0
   14f5e:	81bb      	strh	r3, [r7, #12]
	do {
		for (shifter = 0x80; shifter; shifter >>= 1) {
   14f60:	2380      	movs	r3, #128	; 0x80
   14f62:	823b      	strh	r3, [r7, #16]
   14f64:	e028      	b.n	14fb8 <stdCrc16+0x80>
			flag = ((crc_val) & 0x8000);
   14f66:	89bb      	ldrh	r3, [r7, #12]
   14f68:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
   14f6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   14f70:	827b      	strh	r3, [r7, #18]
			(crc_val) <<= 1;
   14f72:	89bb      	ldrh	r3, [r7, #12]
   14f74:	005b      	lsls	r3, r3, #1
   14f76:	b29b      	uxth	r3, r3
   14f78:	81bb      	strh	r3, [r7, #12]
			(crc_val) |= ((shifter & buf[i]) ? 1 : 0);
   14f7a:	8a3a      	ldrh	r2, [r7, #16]
   14f7c:	89fb      	ldrh	r3, [r7, #14]
   14f7e:	6879      	ldr	r1, [r7, #4]
   14f80:	18cb      	adds	r3, r1, r3
   14f82:	781b      	ldrb	r3, [r3, #0]
   14f84:	4013      	ands	r3, r2
   14f86:	2b00      	cmp	r3, #0
   14f88:	bf0c      	ite	eq
   14f8a:	2300      	moveq	r3, #0
   14f8c:	2301      	movne	r3, #1
   14f8e:	b2db      	uxtb	r3, r3
   14f90:	461a      	mov	r2, r3
   14f92:	89bb      	ldrh	r3, [r7, #12]
   14f94:	b29b      	uxth	r3, r3
   14f96:	4313      	orrs	r3, r2
   14f98:	b29b      	uxth	r3, r3
   14f9a:	b29b      	uxth	r3, r3
   14f9c:	81bb      	strh	r3, [r7, #12]
			if(flag)
   14f9e:	8a7b      	ldrh	r3, [r7, #18]
   14fa0:	2b00      	cmp	r3, #0
   14fa2:	d006      	beq.n	14fb2 <stdCrc16+0x7a>
				(crc_val) ^= 0x1021;
   14fa4:	89bb      	ldrh	r3, [r7, #12]
   14fa6:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
   14faa:	f083 0301 	eor.w	r3, r3, #1
   14fae:	b29b      	uxth	r3, r3
   14fb0:	81bb      	strh	r3, [r7, #12]
	word i = 0;
	word shifter, flag;

	crc_val = 0;
	do {
		for (shifter = 0x80; shifter; shifter >>= 1) {
   14fb2:	8a3b      	ldrh	r3, [r7, #16]
   14fb4:	085b      	lsrs	r3, r3, #1
   14fb6:	823b      	strh	r3, [r7, #16]
   14fb8:	8a3b      	ldrh	r3, [r7, #16]
   14fba:	2b00      	cmp	r3, #0
   14fbc:	d1d3      	bne.n	14f66 <stdCrc16+0x2e>
			(crc_val) |= ((shifter & buf[i]) ? 1 : 0);
			if(flag)
				(crc_val) ^= 0x1021;
		}

	} while(++i < len);
   14fbe:	89fb      	ldrh	r3, [r7, #14]
   14fc0:	3301      	adds	r3, #1
   14fc2:	81fb      	strh	r3, [r7, #14]
   14fc4:	89fa      	ldrh	r2, [r7, #14]
   14fc6:	887b      	ldrh	r3, [r7, #2]
   14fc8:	429a      	cmp	r2, r3
   14fca:	d3c9      	bcc.n	14f60 <stdCrc16+0x28>
	if(augment_message_for_crc) {
   14fcc:	787b      	ldrb	r3, [r7, #1]
   14fce:	2b00      	cmp	r3, #0
   14fd0:	d004      	beq.n	14fdc <stdCrc16+0xa4>
		stdArgMsgCrc16(&crc_val);
   14fd2:	f107 030c 	add.w	r3, r7, #12
   14fd6:	4618      	mov	r0, r3
   14fd8:	f7ff ff72 	bl	14ec0 <stdArgMsgCrc16>
	}

	return crc_val;
   14fdc:	89bb      	ldrh	r3, [r7, #12]
}
   14fde:	4618      	mov	r0, r3
   14fe0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   14fe4:	f2c0 0302 	movt	r3, #2
   14fe8:	697a      	ldr	r2, [r7, #20]
   14fea:	681b      	ldr	r3, [r3, #0]
   14fec:	429a      	cmp	r2, r3
   14fee:	d001      	beq.n	14ff4 <stdCrc16+0xbc>
   14ff0:	f7f3 ffd8 	bl	8fa4 <__stack_chk_fail>
   14ff4:	f107 0718 	add.w	r7, r7, #24
   14ff8:	46bd      	mov	sp, r7
   14ffa:	bd80      	pop	{r7, pc}

00014ffc <xor>:
 * \return no
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\tbx.c
 * \test tcab0057.c
 */
void xor(const byte * b1, const byte * b2, byte * dst, word len) {
   14ffc:	b580      	push	{r7, lr}
   14ffe:	b086      	sub	sp, #24
   15000:	af00      	add	r7, sp, #0
   15002:	60f8      	str	r0, [r7, #12]
   15004:	60b9      	str	r1, [r7, #8]
   15006:	607a      	str	r2, [r7, #4]
   15008:	807b      	strh	r3, [r7, #2]
   1500a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1500e:	f2c0 0302 	movt	r3, #2
   15012:	681b      	ldr	r3, [r3, #0]
   15014:	617b      	str	r3, [r7, #20]
	VERIFY(b1);
	VERIFY(b2);
	VERIFY(dst);
	while(len--)
   15016:	e010      	b.n	1503a <xor+0x3e>
		*dst++ = *b1++ ^ *b2++;
   15018:	68fb      	ldr	r3, [r7, #12]
   1501a:	781a      	ldrb	r2, [r3, #0]
   1501c:	68bb      	ldr	r3, [r7, #8]
   1501e:	781b      	ldrb	r3, [r3, #0]
   15020:	4053      	eors	r3, r2
   15022:	b2da      	uxtb	r2, r3
   15024:	687b      	ldr	r3, [r7, #4]
   15026:	701a      	strb	r2, [r3, #0]
   15028:	687b      	ldr	r3, [r7, #4]
   1502a:	3301      	adds	r3, #1
   1502c:	607b      	str	r3, [r7, #4]
   1502e:	68fb      	ldr	r3, [r7, #12]
   15030:	3301      	adds	r3, #1
   15032:	60fb      	str	r3, [r7, #12]
   15034:	68bb      	ldr	r3, [r7, #8]
   15036:	3301      	adds	r3, #1
   15038:	60bb      	str	r3, [r7, #8]
 */
void xor(const byte * b1, const byte * b2, byte * dst, word len) {
	VERIFY(b1);
	VERIFY(b2);
	VERIFY(dst);
	while(len--)
   1503a:	887b      	ldrh	r3, [r7, #2]
   1503c:	2b00      	cmp	r3, #0
   1503e:	bf0c      	ite	eq
   15040:	2300      	moveq	r3, #0
   15042:	2301      	movne	r3, #1
   15044:	b2db      	uxtb	r3, r3
   15046:	887a      	ldrh	r2, [r7, #2]
   15048:	3a01      	subs	r2, #1
   1504a:	807a      	strh	r2, [r7, #2]
   1504c:	2b00      	cmp	r3, #0
   1504e:	d1e3      	bne.n	15018 <xor+0x1c>
		*dst++ = *b1++ ^ *b2++;
}
   15050:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15054:	f2c0 0302 	movt	r3, #2
   15058:	697a      	ldr	r2, [r7, #20]
   1505a:	681b      	ldr	r3, [r3, #0]
   1505c:	429a      	cmp	r2, r3
   1505e:	d001      	beq.n	15064 <xor+0x68>
   15060:	f7f3 ffa0 	bl	8fa4 <__stack_chk_fail>
   15064:	f107 0718 	add.w	r7, r7, #24
   15068:	46bd      	mov	sp, r7
   1506a:	bd80      	pop	{r7, pc}

0001506c <stdParity>:
 * \return no
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\std.c
 * \test tcab0057.c
 */
void stdParity(byte * buf, word dim, byte par) {    //set parity bits
   1506c:	b580      	push	{r7, lr}
   1506e:	b084      	sub	sp, #16
   15070:	af00      	add	r7, sp, #0
   15072:	6078      	str	r0, [r7, #4]
   15074:	4613      	mov	r3, r2
   15076:	460a      	mov	r2, r1
   15078:	807a      	strh	r2, [r7, #2]
   1507a:	707b      	strb	r3, [r7, #1]
   1507c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15080:	f2c0 0302 	movt	r3, #2
   15084:	681b      	ldr	r3, [r3, #0]
   15086:	60fb      	str	r3, [r7, #12]
	byte cnt, idx;

	VERIFY(buf);
	while(dim--) {
   15088:	e02f      	b.n	150ea <stdParity+0x7e>
		cnt = 0;
   1508a:	2300      	movs	r3, #0
   1508c:	72bb      	strb	r3, [r7, #10]
		for (idx = 1; idx < 8; idx++) {
   1508e:	2301      	movs	r3, #1
   15090:	72fb      	strb	r3, [r7, #11]
   15092:	e013      	b.n	150bc <stdParity+0x50>
			if(idx == par)
   15094:	7afa      	ldrb	r2, [r7, #11]
   15096:	787b      	ldrb	r3, [r7, #1]
   15098:	429a      	cmp	r2, r3
   1509a:	d00b      	beq.n	150b4 <stdParity+0x48>
				continue;
			if(bitTest(buf, idx))
   1509c:	7afb      	ldrb	r3, [r7, #11]
   1509e:	6878      	ldr	r0, [r7, #4]
   150a0:	4619      	mov	r1, r3
   150a2:	f7fe fd85 	bl	13bb0 <bitTest>
   150a6:	4603      	mov	r3, r0
   150a8:	2b00      	cmp	r3, #0
   150aa:	d004      	beq.n	150b6 <stdParity+0x4a>
				cnt++;
   150ac:	7abb      	ldrb	r3, [r7, #10]
   150ae:	3301      	adds	r3, #1
   150b0:	72bb      	strb	r3, [r7, #10]
   150b2:	e000      	b.n	150b6 <stdParity+0x4a>
	VERIFY(buf);
	while(dim--) {
		cnt = 0;
		for (idx = 1; idx < 8; idx++) {
			if(idx == par)
				continue;
   150b4:	bf00      	nop
	byte cnt, idx;

	VERIFY(buf);
	while(dim--) {
		cnt = 0;
		for (idx = 1; idx < 8; idx++) {
   150b6:	7afb      	ldrb	r3, [r7, #11]
   150b8:	3301      	adds	r3, #1
   150ba:	72fb      	strb	r3, [r7, #11]
   150bc:	7afb      	ldrb	r3, [r7, #11]
   150be:	2b07      	cmp	r3, #7
   150c0:	d9e8      	bls.n	15094 <stdParity+0x28>
			if(idx == par)
				continue;
			if(bitTest(buf, idx))
				cnt++;
		}
		if(cnt % 2)
   150c2:	7abb      	ldrb	r3, [r7, #10]
   150c4:	f003 0301 	and.w	r3, r3, #1
   150c8:	b2db      	uxtb	r3, r3
   150ca:	2b00      	cmp	r3, #0
   150cc:	d005      	beq.n	150da <stdParity+0x6e>
			bitOff(buf, par);
   150ce:	787b      	ldrb	r3, [r7, #1]
   150d0:	6878      	ldr	r0, [r7, #4]
   150d2:	4619      	mov	r1, r3
   150d4:	f7fe fd34 	bl	13b40 <bitOff>
   150d8:	e004      	b.n	150e4 <stdParity+0x78>
		else
			bitOn(buf, par);
   150da:	787b      	ldrb	r3, [r7, #1]
   150dc:	6878      	ldr	r0, [r7, #4]
   150de:	4619      	mov	r1, r3
   150e0:	f7fe fcf8 	bl	13ad4 <bitOn>
		buf++;
   150e4:	687b      	ldr	r3, [r7, #4]
   150e6:	3301      	adds	r3, #1
   150e8:	607b      	str	r3, [r7, #4]
 */
void stdParity(byte * buf, word dim, byte par) {    //set parity bits
	byte cnt, idx;

	VERIFY(buf);
	while(dim--) {
   150ea:	887b      	ldrh	r3, [r7, #2]
   150ec:	2b00      	cmp	r3, #0
   150ee:	bf0c      	ite	eq
   150f0:	2300      	moveq	r3, #0
   150f2:	2301      	movne	r3, #1
   150f4:	b2db      	uxtb	r3, r3
   150f6:	887a      	ldrh	r2, [r7, #2]
   150f8:	3a01      	subs	r2, #1
   150fa:	807a      	strh	r2, [r7, #2]
   150fc:	2b00      	cmp	r3, #0
   150fe:	d1c4      	bne.n	1508a <stdParity+0x1e>
			bitOff(buf, par);
		else
			bitOn(buf, par);
		buf++;
	}
}
   15100:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15104:	f2c0 0302 	movt	r3, #2
   15108:	68fa      	ldr	r2, [r7, #12]
   1510a:	681b      	ldr	r3, [r3, #0]
   1510c:	429a      	cmp	r2, r3
   1510e:	d001      	beq.n	15114 <stdParity+0xa8>
   15110:	f7f3 ff48 	bl	8fa4 <__stack_chk_fail>
   15114:	f107 0710 	add.w	r7, r7, #16
   15118:	46bd      	mov	sp, r7
   1511a:	bd80      	pop	{r7, pc}

0001511c <justdes2>:

static void justdes2(byte * dst, const byte * src, const byte * key, int ctl) {
   1511c:	b580      	push	{r7, lr}
   1511e:	b08c      	sub	sp, #48	; 0x30
   15120:	af00      	add	r7, sp, #0
   15122:	60f8      	str	r0, [r7, #12]
   15124:	60b9      	str	r1, [r7, #8]
   15126:	607a      	str	r2, [r7, #4]
   15128:	603b      	str	r3, [r7, #0]
   1512a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1512e:	f2c0 0302 	movt	r3, #2
   15132:	681b      	ldr	r3, [r3, #0]
   15134:	62fb      	str	r3, [r7, #44]	; 0x2c
			0x8C0F78A0, 0x0D3095EF, 0x7A506B8E, 0x8445D610,
			0x5223AB47, 0x724C0C34, 0x45AF54BC, 0x38DBF9CB
	};

	/* initial permutations IP and PC1 */
	l = r = c = d = 0;
   15136:	2300      	movs	r3, #0
   15138:	61bb      	str	r3, [r7, #24]
   1513a:	69bb      	ldr	r3, [r7, #24]
   1513c:	617b      	str	r3, [r7, #20]
   1513e:	697b      	ldr	r3, [r7, #20]
   15140:	61fb      	str	r3, [r7, #28]
   15142:	69fb      	ldr	r3, [r7, #28]
   15144:	623b      	str	r3, [r7, #32]
	i = 7;
   15146:	2307      	movs	r3, #7
   15148:	627b      	str	r3, [r7, #36]	; 0x24
	do {
		x = src[i];
   1514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1514c:	68ba      	ldr	r2, [r7, #8]
   1514e:	18d3      	adds	r3, r2, r3
   15150:	781b      	ldrb	r3, [r3, #0]
   15152:	62bb      	str	r3, [r7, #40]	; 0x28
		l = l << 1 | (x & 1 << 0) | (x & 1 << 2) << 6 | (x & 1 << 4) << 12 | (x
   15154:	6a3b      	ldr	r3, [r7, #32]
   15156:	005a      	lsls	r2, r3, #1
   15158:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1515a:	f003 0301 	and.w	r3, r3, #1
   1515e:	431a      	orrs	r2, r3
   15160:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15162:	f003 0304 	and.w	r3, r3, #4
   15166:	019b      	lsls	r3, r3, #6
   15168:	431a      	orrs	r2, r3
   1516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1516c:	f003 0310 	and.w	r3, r3, #16
   15170:	031b      	lsls	r3, r3, #12
   15172:	431a      	orrs	r2, r3
				&
   15174:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15176:	f003 0340 	and.w	r3, r3, #64	; 0x40
				1
				<<
				6)
				<< 18;
   1517a:	049b      	lsls	r3, r3, #18
	/* initial permutations IP and PC1 */
	l = r = c = d = 0;
	i = 7;
	do {
		x = src[i];
		l = l << 1 | (x & 1 << 0) | (x & 1 << 2) << 6 | (x & 1 << 4) << 12 | (x
   1517c:	4313      	orrs	r3, r2
   1517e:	623b      	str	r3, [r7, #32]
				&
				1
				<<
				6)
				<< 18;
		r = r << 1 | (x & 1 << 1) >> 1 | (x & 1 << 3) << 5 | (x & 1 << 5) << 11
   15180:	69fb      	ldr	r3, [r7, #28]
   15182:	005a      	lsls	r2, r3, #1
   15184:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15186:	f003 0302 	and.w	r3, r3, #2
   1518a:	085b      	lsrs	r3, r3, #1
   1518c:	431a      	orrs	r2, r3
   1518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15190:	f003 0308 	and.w	r3, r3, #8
   15194:	015b      	lsls	r3, r3, #5
   15196:	431a      	orrs	r2, r3
   15198:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1519a:	f003 0320 	and.w	r3, r3, #32
   1519e:	02db      	lsls	r3, r3, #11
   151a0:	431a      	orrs	r2, r3
				| (x & 1 << 7) << 17;
   151a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   151a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   151a8:	045b      	lsls	r3, r3, #17
				&
				1
				<<
				6)
				<< 18;
		r = r << 1 | (x & 1 << 1) >> 1 | (x & 1 << 3) << 5 | (x & 1 << 5) << 11
   151aa:	4313      	orrs	r3, r2
   151ac:	61fb      	str	r3, [r7, #28]
				| (x & 1 << 7) << 17;
		x = key[i];
   151ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   151b0:	687a      	ldr	r2, [r7, #4]
   151b2:	18d3      	adds	r3, r2, r3
   151b4:	781b      	ldrb	r3, [r3, #0]
   151b6:	62bb      	str	r3, [r7, #40]	; 0x28
		c = c << 1 | (x & 1 << 7) << 17 | (x & 1 << 6) << 10 | (x & 1 << 5) << 3
   151b8:	697b      	ldr	r3, [r7, #20]
   151ba:	005a      	lsls	r2, r3, #1
   151bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   151be:	f003 0380 	and.w	r3, r3, #128	; 0x80
   151c2:	045b      	lsls	r3, r3, #17
   151c4:	431a      	orrs	r2, r3
   151c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   151c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
   151cc:	029b      	lsls	r3, r3, #10
   151ce:	431a      	orrs	r2, r3
   151d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   151d2:	f003 0320 	and.w	r3, r3, #32
   151d6:	00db      	lsls	r3, r3, #3
   151d8:	431a      	orrs	r2, r3
				| (x & 1 << 4) >> 4;
   151da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   151dc:	f003 0310 	and.w	r3, r3, #16
   151e0:	091b      	lsrs	r3, r3, #4
				6)
				<< 18;
		r = r << 1 | (x & 1 << 1) >> 1 | (x & 1 << 3) << 5 | (x & 1 << 5) << 11
				| (x & 1 << 7) << 17;
		x = key[i];
		c = c << 1 | (x & 1 << 7) << 17 | (x & 1 << 6) << 10 | (x & 1 << 5) << 3
   151e2:	4313      	orrs	r3, r2
   151e4:	617b      	str	r3, [r7, #20]
				| (x & 1 << 4) >> 4;
		d = d << 1 | (x & 1 << 1) << 19 | (x & 1 << 2) << 10 | (x & 1 << 3) <<
   151e6:	69bb      	ldr	r3, [r7, #24]
   151e8:	005a      	lsls	r2, r3, #1
   151ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   151ec:	f003 0302 	and.w	r3, r3, #2
   151f0:	04db      	lsls	r3, r3, #19
   151f2:	431a      	orrs	r2, r3
   151f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   151f6:	f003 0304 	and.w	r3, r3, #4
   151fa:	029b      	lsls	r3, r3, #10
   151fc:	431a      	orrs	r2, r3
   151fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15200:	f003 0308 	and.w	r3, r3, #8
   15204:	005b      	lsls	r3, r3, #1
   15206:	4313      	orrs	r3, r2
   15208:	61bb      	str	r3, [r7, #24]
				1;
	} while(--i >= 0);
   1520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1520c:	3b01      	subs	r3, #1
   1520e:	627b      	str	r3, [r7, #36]	; 0x24
   15210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15212:	2b00      	cmp	r3, #0
   15214:	da99      	bge.n	1514a <justdes2+0x2e>
	d |= c & 0x0F;
   15216:	697b      	ldr	r3, [r7, #20]
   15218:	f003 030f 	and.w	r3, r3, #15
   1521c:	69ba      	ldr	r2, [r7, #24]
   1521e:	4313      	orrs	r3, r2
   15220:	61bb      	str	r3, [r7, #24]
	c >>= 4;
   15222:	697b      	ldr	r3, [r7, #20]
   15224:	091b      	lsrs	r3, r3, #4
   15226:	617b      	str	r3, [r7, #20]
	i = 24;
   15228:	2318      	movs	r3, #24
   1522a:	627b      	str	r3, [r7, #36]	; 0x24
	/* first round is special: one left shift on encipher, no shift en decipher */
	if(ctl != 0)
   1522c:	683b      	ldr	r3, [r7, #0]
   1522e:	2b00      	cmp	r3, #0
   15230:	d112      	bne.n	15258 <justdes2+0x13c>
   15232:	e000      	b.n	15236 <justdes2+0x11a>
	r = x;
	/* decide/perform key shifts */
	if((i & 7) == 0) {
		i -= 2;
		if(ctl == 0)
			goto leftby1;
   15234:	bf00      	nop
	i = 24;
	/* first round is special: one left shift on encipher, no shift en decipher */
	if(ctl != 0)
		goto startround;
	leftby1:
	c = c << 1 | ((c >> 27) & 1);
   15236:	697b      	ldr	r3, [r7, #20]
   15238:	005a      	lsls	r2, r3, #1
   1523a:	697b      	ldr	r3, [r7, #20]
   1523c:	0edb      	lsrs	r3, r3, #27
   1523e:	f003 0301 	and.w	r3, r3, #1
   15242:	4313      	orrs	r3, r2
   15244:	617b      	str	r3, [r7, #20]
	d = d << 1 | ((d >> 27) & 1);
   15246:	69bb      	ldr	r3, [r7, #24]
   15248:	005a      	lsls	r2, r3, #1
   1524a:	69bb      	ldr	r3, [r7, #24]
   1524c:	0edb      	lsrs	r3, r3, #27
   1524e:	f003 0301 	and.w	r3, r3, #1
   15252:	4313      	orrs	r3, r2
   15254:	61bb      	str	r3, [r7, #24]
   15256:	e000      	b.n	1525a <justdes2+0x13e>
	d |= c & 0x0F;
	c >>= 4;
	i = 24;
	/* first round is special: one left shift on encipher, no shift en decipher */
	if(ctl != 0)
		goto startround;
   15258:	bf00      	nop
	leftby1:
	c = c << 1 | ((c >> 27) & 1);
	d = d << 1 | ((d >> 27) & 1);
	startround:
	/* a round - apply PC2, the S-boxes and permutation E */
	x = (s[((r >> 26 & 62) | (r & 1)) ^
   1525a:	69fb      	ldr	r3, [r7, #28]
   1525c:	0e9b      	lsrs	r3, r3, #26
   1525e:	f003 023e 	and.w	r2, r3, #62	; 0x3e
   15262:	69fb      	ldr	r3, [r7, #28]
   15264:	f003 0301 	and.w	r3, r3, #1
   15268:	431a      	orrs	r2, r3
		   ((c >> 6 & 32) | (c >> 13 & 16) | (c >> 1 & 8) | (c >> 25 & 4) |
   1526a:	697b      	ldr	r3, [r7, #20]
   1526c:	099b      	lsrs	r3, r3, #6
   1526e:	f003 0120 	and.w	r1, r3, #32
   15272:	697b      	ldr	r3, [r7, #20]
   15274:	0b5b      	lsrs	r3, r3, #13
   15276:	f003 0310 	and.w	r3, r3, #16
   1527a:	4319      	orrs	r1, r3
   1527c:	697b      	ldr	r3, [r7, #20]
   1527e:	085b      	lsrs	r3, r3, #1
   15280:	f003 0308 	and.w	r3, r3, #8
   15284:	4319      	orrs	r1, r3
   15286:	697b      	ldr	r3, [r7, #20]
   15288:	0e5b      	lsrs	r3, r3, #25
   1528a:	f003 0304 	and.w	r3, r3, #4
   1528e:	4319      	orrs	r1, r3
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
   15290:	697b      	ldr	r3, [r7, #20]
   15292:	0d9b      	lsrs	r3, r3, #22
   15294:	f003 0302 	and.w	r3, r3, #2
	c = c << 1 | ((c >> 27) & 1);
	d = d << 1 | ((d >> 27) & 1);
	startround:
	/* a round - apply PC2, the S-boxes and permutation E */
	x = (s[((r >> 26 & 62) | (r & 1)) ^
		   ((c >> 6 & 32) | (c >> 13 & 16) | (c >> 1 & 8) | (c >> 25 & 4) |
   15298:	4319      	orrs	r1, r3
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
   1529a:	697b      	ldr	r3, [r7, #20]
   1529c:	0b9b      	lsrs	r3, r3, #14
   1529e:	f003 0301 	and.w	r3, r3, #1
   152a2:	430b      	orrs	r3, r1
	leftby1:
	c = c << 1 | ((c >> 27) & 1);
	d = d << 1 | ((d >> 27) & 1);
	startround:
	/* a round - apply PC2, the S-boxes and permutation E */
	x = (s[((r >> 26 & 62) | (r & 1)) ^
   152a4:	405a      	eors	r2, r3
   152a6:	f644 336c 	movw	r3, #19308	; 0x4b6c
   152aa:	f2c0 0302 	movt	r3, #2
   152ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		   ((c >> 6 & 32) | (c >> 13 & 16) | (c >> 1 & 8) | (c >> 25 & 4) |
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
   152b2:	f248 2302 	movw	r3, #33282	; 0x8202
   152b6:	f2c0 0380 	movt	r3, #128	; 0x80
   152ba:	4013      	ands	r3, r2
	leftby1:
	c = c << 1 | ((c >> 27) & 1);
	d = d << 1 | ((d >> 27) & 1);
	startround:
	/* a round - apply PC2, the S-boxes and permutation E */
	x = (s[((r >> 26 & 62) | (r & 1)) ^
   152bc:	6a3a      	ldr	r2, [r7, #32]
   152be:	4053      	eors	r3, r2
   152c0:	62bb      	str	r3, [r7, #40]	; 0x28
		   ((c >> 6 & 32) | (c >> 13 & 16) | (c >> 1 & 8) | (c >> 25 & 4) |
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
	x ^= s[(r >> 23 & 63) ^
   152c2:	69fb      	ldr	r3, [r7, #28]
   152c4:	0ddb      	lsrs	r3, r3, #23
   152c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		   ((c >> 20 & 32) | (c << 4 & 16) | (c >> 10 & 8) | (c >> 20 & 4) |
   152ca:	697b      	ldr	r3, [r7, #20]
   152cc:	0d1b      	lsrs	r3, r3, #20
   152ce:	f003 0120 	and.w	r1, r3, #32
   152d2:	697b      	ldr	r3, [r7, #20]
   152d4:	011b      	lsls	r3, r3, #4
   152d6:	f003 0310 	and.w	r3, r3, #16
   152da:	4319      	orrs	r1, r3
   152dc:	697b      	ldr	r3, [r7, #20]
   152de:	0a9b      	lsrs	r3, r3, #10
   152e0:	f003 0308 	and.w	r3, r3, #8
   152e4:	4319      	orrs	r1, r3
   152e6:	697b      	ldr	r3, [r7, #20]
   152e8:	0d1b      	lsrs	r3, r3, #20
   152ea:	f003 0304 	and.w	r3, r3, #4
   152ee:	4319      	orrs	r1, r3
				   (c >> 6 & 2)
   152f0:	697b      	ldr	r3, [r7, #20]
   152f2:	099b      	lsrs	r3, r3, #6
   152f4:	f003 0302 	and.w	r3, r3, #2
	/* a round - apply PC2, the S-boxes and permutation E */
	x = (s[((r >> 26 & 62) | (r & 1)) ^
		   ((c >> 6 & 32) | (c >> 13 & 16) | (c >> 1 & 8) | (c >> 25 & 4) |
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
	x ^= s[(r >> 23 & 63) ^
		   ((c >> 20 & 32) | (c << 4 & 16) | (c >> 10 & 8) | (c >> 20 & 4) |
   152f8:	4319      	orrs	r1, r3
				   (c >> 6 & 2)
				   | (c >> 18 & 1))] & 0x40084010;
   152fa:	697b      	ldr	r3, [r7, #20]
   152fc:	0c9b      	lsrs	r3, r3, #18
   152fe:	f003 0301 	and.w	r3, r3, #1
   15302:	430b      	orrs	r3, r1
	startround:
	/* a round - apply PC2, the S-boxes and permutation E */
	x = (s[((r >> 26 & 62) | (r & 1)) ^
		   ((c >> 6 & 32) | (c >> 13 & 16) | (c >> 1 & 8) | (c >> 25 & 4) |
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
	x ^= s[(r >> 23 & 63) ^
   15304:	405a      	eors	r2, r3
   15306:	f644 336c 	movw	r3, #19308	; 0x4b6c
   1530a:	f2c0 0302 	movt	r3, #2
   1530e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		   ((c >> 20 & 32) | (c << 4 & 16) | (c >> 10 & 8) | (c >> 20 & 4) |
				   (c >> 6 & 2)
				   | (c >> 18 & 1))] & 0x40084010;
   15312:	f244 0310 	movw	r3, #16400	; 0x4010
   15316:	f2c4 0308 	movt	r3, #16392	; 0x4008
   1531a:	4013      	ands	r3, r2
	startround:
	/* a round - apply PC2, the S-boxes and permutation E */
	x = (s[((r >> 26 & 62) | (r & 1)) ^
		   ((c >> 6 & 32) | (c >> 13 & 16) | (c >> 1 & 8) | (c >> 25 & 4) |
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
	x ^= s[(r >> 23 & 63) ^
   1531c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1531e:	4053      	eors	r3, r2
   15320:	62bb      	str	r3, [r7, #40]	; 0x28
		   ((c >> 20 & 32) | (c << 4 & 16) | (c >> 10 & 8) | (c >> 20 & 4) |
				   (c >> 6 & 2)
				   | (c >> 18 & 1))] & 0x40084010;
	x ^= s[(r >> 19 & 63) ^
   15322:	69fb      	ldr	r3, [r7, #28]
   15324:	0cdb      	lsrs	r3, r3, #19
   15326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
   1532a:	697b      	ldr	r3, [r7, #20]
   1532c:	f003 0120 	and.w	r1, r3, #32
   15330:	697b      	ldr	r3, [r7, #20]
   15332:	095b      	lsrs	r3, r3, #5
   15334:	f003 0310 	and.w	r3, r3, #16
   15338:	4319      	orrs	r1, r3
   1533a:	697b      	ldr	r3, [r7, #20]
   1533c:	0b5b      	lsrs	r3, r3, #13
   1533e:	f003 0308 	and.w	r3, r3, #8
   15342:	4319      	orrs	r1, r3
   15344:	697b      	ldr	r3, [r7, #20]
   15346:	0d9b      	lsrs	r3, r3, #22
   15348:	f003 0304 	and.w	r3, r3, #4
   1534c:	4319      	orrs	r1, r3
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
   1534e:	697b      	ldr	r3, [r7, #20]
   15350:	085b      	lsrs	r3, r3, #1
   15352:	f003 0302 	and.w	r3, r3, #2
	x ^= s[(r >> 23 & 63) ^
		   ((c >> 20 & 32) | (c << 4 & 16) | (c >> 10 & 8) | (c >> 20 & 4) |
				   (c >> 6 & 2)
				   | (c >> 18 & 1))] & 0x40084010;
	x ^= s[(r >> 19 & 63) ^
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
   15356:	4319      	orrs	r1, r3
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
   15358:	697b      	ldr	r3, [r7, #20]
   1535a:	0d1b      	lsrs	r3, r3, #20
   1535c:	f003 0301 	and.w	r3, r3, #1
   15360:	430b      	orrs	r3, r1
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
	x ^= s[(r >> 23 & 63) ^
		   ((c >> 20 & 32) | (c << 4 & 16) | (c >> 10 & 8) | (c >> 20 & 4) |
				   (c >> 6 & 2)
				   | (c >> 18 & 1))] & 0x40084010;
	x ^= s[(r >> 19 & 63) ^
   15362:	405a      	eors	r2, r3
   15364:	f644 336c 	movw	r3, #19308	; 0x4b6c
   15368:	f2c0 0302 	movt	r3, #2
   1536c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
   15370:	f44f 7382 	mov.w	r3, #260	; 0x104
   15374:	f2c0 4301 	movt	r3, #1025	; 0x401
   15378:	4013      	ands	r3, r2
				   (c >> 22 & 2) | (c >> 14 & 1))] & 0x00808202) ^ l;
	x ^= s[(r >> 23 & 63) ^
		   ((c >> 20 & 32) | (c << 4 & 16) | (c >> 10 & 8) | (c >> 20 & 4) |
				   (c >> 6 & 2)
				   | (c >> 18 & 1))] & 0x40084010;
	x ^= s[(r >> 19 & 63) ^
   1537a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1537c:	4053      	eors	r3, r2
   1537e:	62bb      	str	r3, [r7, #40]	; 0x28
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
	x ^= s[(r >> 15 & 63) ^
   15380:	69fb      	ldr	r3, [r7, #28]
   15382:	0bdb      	lsrs	r3, r3, #15
   15384:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
   15388:	697b      	ldr	r3, [r7, #20]
   1538a:	09db      	lsrs	r3, r3, #7
   1538c:	f003 0120 	and.w	r1, r3, #32
   15390:	697b      	ldr	r3, [r7, #20]
   15392:	0c5b      	lsrs	r3, r3, #17
   15394:	f003 0310 	and.w	r3, r3, #16
   15398:	4319      	orrs	r1, r3
   1539a:	697b      	ldr	r3, [r7, #20]
   1539c:	009b      	lsls	r3, r3, #2
   1539e:	f003 0308 	and.w	r3, r3, #8
   153a2:	4319      	orrs	r1, r3
   153a4:	697b      	ldr	r3, [r7, #20]
   153a6:	099b      	lsrs	r3, r3, #6
   153a8:	f003 0304 	and.w	r3, r3, #4
   153ac:	4319      	orrs	r1, r3
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
   153ae:	697b      	ldr	r3, [r7, #20]
   153b0:	0b9b      	lsrs	r3, r3, #14
   153b2:	f003 0302 	and.w	r3, r3, #2
				   | (c >> 18 & 1))] & 0x40084010;
	x ^= s[(r >> 19 & 63) ^
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
	x ^= s[(r >> 15 & 63) ^
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
   153b6:	4319      	orrs	r1, r3
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
   153b8:	697b      	ldr	r3, [r7, #20]
   153ba:	0e9b      	lsrs	r3, r3, #26
   153bc:	f003 0301 	and.w	r3, r3, #1
   153c0:	430b      	orrs	r3, r1
				   (c >> 6 & 2)
				   | (c >> 18 & 1))] & 0x40084010;
	x ^= s[(r >> 19 & 63) ^
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
	x ^= s[(r >> 15 & 63) ^
   153c2:	405a      	eors	r2, r3
   153c4:	f644 336c 	movw	r3, #19308	; 0x4b6c
   153c8:	f2c0 0302 	movt	r3, #2
   153cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
   153d0:	f44f 5382 	mov.w	r3, #4160	; 0x1040
   153d4:	f2c8 0340 	movt	r3, #32832	; 0x8040
   153d8:	4013      	ands	r3, r2
				   (c >> 6 & 2)
				   | (c >> 18 & 1))] & 0x40084010;
	x ^= s[(r >> 19 & 63) ^
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
	x ^= s[(r >> 15 & 63) ^
   153da:	6aba      	ldr	r2, [r7, #40]	; 0x28
   153dc:	4053      	eors	r3, r2
   153de:	62bb      	str	r3, [r7, #40]	; 0x28
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
	x ^= s[(r >> 11 & 63) ^
   153e0:	69fb      	ldr	r3, [r7, #28]
   153e2:	0adb      	lsrs	r3, r3, #11
   153e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		   ((d >> 10 & 32) | (d & 16) | (d >> 22 & 8) | (d >> 17 & 4) |
   153e8:	69bb      	ldr	r3, [r7, #24]
   153ea:	0a9b      	lsrs	r3, r3, #10
   153ec:	f003 0120 	and.w	r1, r3, #32
   153f0:	69bb      	ldr	r3, [r7, #24]
   153f2:	f003 0310 	and.w	r3, r3, #16
   153f6:	4319      	orrs	r1, r3
   153f8:	69bb      	ldr	r3, [r7, #24]
   153fa:	0d9b      	lsrs	r3, r3, #22
   153fc:	f003 0308 	and.w	r3, r3, #8
   15400:	4319      	orrs	r1, r3
   15402:	69bb      	ldr	r3, [r7, #24]
   15404:	0c5b      	lsrs	r3, r3, #17
   15406:	f003 0304 	and.w	r3, r3, #4
   1540a:	4319      	orrs	r1, r3
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
   1540c:	69bb      	ldr	r3, [r7, #24]
   1540e:	0a1b      	lsrs	r3, r3, #8
   15410:	f003 0302 	and.w	r3, r3, #2
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
	x ^= s[(r >> 15 & 63) ^
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
	x ^= s[(r >> 11 & 63) ^
		   ((d >> 10 & 32) | (d & 16) | (d >> 22 & 8) | (d >> 17 & 4) |
   15414:	4319      	orrs	r1, r3
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
   15416:	69bb      	ldr	r3, [r7, #24]
   15418:	085b      	lsrs	r3, r3, #1
   1541a:	f003 0301 	and.w	r3, r3, #1
   1541e:	430b      	orrs	r3, r1
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
	x ^= s[(r >> 15 & 63) ^
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
	x ^= s[(r >> 11 & 63) ^
   15420:	405a      	eors	r2, r3
   15422:	f644 336c 	movw	r3, #19308	; 0x4b6c
   15426:	f2c0 0302 	movt	r3, #2
   1542a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		   ((d >> 10 & 32) | (d & 16) | (d >> 22 & 8) | (d >> 17 & 4) |
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
   1542e:	2380      	movs	r3, #128	; 0x80
   15430:	f2c2 1304 	movt	r3, #8452	; 0x2104
   15434:	4013      	ands	r3, r2
		   ((c & 32) | (c >> 5 & 16) | (c >> 13 & 8) | (c >> 22 & 4) |
				   (c >> 1 & 2) | (c >> 20 & 1))] & 0x04010104;
	x ^= s[(r >> 15 & 63) ^
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
	x ^= s[(r >> 11 & 63) ^
   15436:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15438:	4053      	eors	r3, r2
   1543a:	62bb      	str	r3, [r7, #40]	; 0x28
		   ((d >> 10 & 32) | (d & 16) | (d >> 22 & 8) | (d >> 17 & 4) |
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
	x ^= s[(r >> 7 & 63) ^
   1543c:	69fb      	ldr	r3, [r7, #28]
   1543e:	09db      	lsrs	r3, r3, #7
   15440:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		   ((d >> 21 & 32) | (d >> 12 & 16) | (d >> 2 & 8) | (d >> 9 & 4) |
   15444:	69bb      	ldr	r3, [r7, #24]
   15446:	0d5b      	lsrs	r3, r3, #21
   15448:	f003 0120 	and.w	r1, r3, #32
   1544c:	69bb      	ldr	r3, [r7, #24]
   1544e:	0b1b      	lsrs	r3, r3, #12
   15450:	f003 0310 	and.w	r3, r3, #16
   15454:	4319      	orrs	r1, r3
   15456:	69bb      	ldr	r3, [r7, #24]
   15458:	089b      	lsrs	r3, r3, #2
   1545a:	f003 0308 	and.w	r3, r3, #8
   1545e:	4319      	orrs	r1, r3
   15460:	69bb      	ldr	r3, [r7, #24]
   15462:	0a5b      	lsrs	r3, r3, #9
   15464:	f003 0304 	and.w	r3, r3, #4
   15468:	4319      	orrs	r1, r3
				   (d >> 22 & 2)
   1546a:	69bb      	ldr	r3, [r7, #24]
   1546c:	0d9b      	lsrs	r3, r3, #22
   1546e:	f003 0302 	and.w	r3, r3, #2
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
	x ^= s[(r >> 11 & 63) ^
		   ((d >> 10 & 32) | (d & 16) | (d >> 22 & 8) | (d >> 17 & 4) |
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
	x ^= s[(r >> 7 & 63) ^
		   ((d >> 21 & 32) | (d >> 12 & 16) | (d >> 2 & 8) | (d >> 9 & 4) |
   15472:	4319      	orrs	r1, r3
				   (d >> 22 & 2)
				   | (d >> 8 & 1))] & 0x10202008;
   15474:	69bb      	ldr	r3, [r7, #24]
   15476:	0a1b      	lsrs	r3, r3, #8
   15478:	f003 0301 	and.w	r3, r3, #1
   1547c:	430b      	orrs	r3, r1
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
	x ^= s[(r >> 11 & 63) ^
		   ((d >> 10 & 32) | (d & 16) | (d >> 22 & 8) | (d >> 17 & 4) |
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
	x ^= s[(r >> 7 & 63) ^
   1547e:	405a      	eors	r2, r3
   15480:	f644 336c 	movw	r3, #19308	; 0x4b6c
   15484:	f2c0 0302 	movt	r3, #2
   15488:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		   ((d >> 21 & 32) | (d >> 12 & 16) | (d >> 2 & 8) | (d >> 9 & 4) |
				   (d >> 22 & 2)
				   | (d >> 8 & 1))] & 0x10202008;
   1548c:	f242 0308 	movw	r3, #8200	; 0x2008
   15490:	f2c1 0320 	movt	r3, #4128	; 0x1020
   15494:	4013      	ands	r3, r2
		   ((c >> 7 & 32) | (c >> 17 & 16) | (c << 2 & 8) | (c >> 6 & 4) |
				   (c >> 14 & 2) | (c >> 26 & 1))] & 0x80401040;
	x ^= s[(r >> 11 & 63) ^
		   ((d >> 10 & 32) | (d & 16) | (d >> 22 & 8) | (d >> 17 & 4) |
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
	x ^= s[(r >> 7 & 63) ^
   15496:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15498:	4053      	eors	r3, r2
   1549a:	62bb      	str	r3, [r7, #40]	; 0x28
		   ((d >> 21 & 32) | (d >> 12 & 16) | (d >> 2 & 8) | (d >> 9 & 4) |
				   (d >> 22 & 2)
				   | (d >> 8 & 1))] & 0x10202008;
	x ^= s[(r >> 3 & 63) ^
   1549c:	69fb      	ldr	r3, [r7, #28]
   1549e:	08db      	lsrs	r3, r3, #3
   154a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		   ((d >> 7 & 32) | (d >> 3 & 16) | (d >> 14 & 8) | (d << 2 & 4) |
   154a4:	69bb      	ldr	r3, [r7, #24]
   154a6:	09db      	lsrs	r3, r3, #7
   154a8:	f003 0120 	and.w	r1, r3, #32
   154ac:	69bb      	ldr	r3, [r7, #24]
   154ae:	08db      	lsrs	r3, r3, #3
   154b0:	f003 0310 	and.w	r3, r3, #16
   154b4:	4319      	orrs	r1, r3
   154b6:	69bb      	ldr	r3, [r7, #24]
   154b8:	0b9b      	lsrs	r3, r3, #14
   154ba:	f003 0308 	and.w	r3, r3, #8
   154be:	4319      	orrs	r1, r3
   154c0:	69bb      	ldr	r3, [r7, #24]
   154c2:	009b      	lsls	r3, r3, #2
   154c4:	f003 0304 	and.w	r3, r3, #4
   154c8:	4319      	orrs	r1, r3
				   (d >> 21 & 2) | (d >> 3 & 1))] & 0x02100401;
   154ca:	69bb      	ldr	r3, [r7, #24]
   154cc:	0d5b      	lsrs	r3, r3, #21
   154ce:	f003 0302 	and.w	r3, r3, #2
	x ^= s[(r >> 7 & 63) ^
		   ((d >> 21 & 32) | (d >> 12 & 16) | (d >> 2 & 8) | (d >> 9 & 4) |
				   (d >> 22 & 2)
				   | (d >> 8 & 1))] & 0x10202008;
	x ^= s[(r >> 3 & 63) ^
		   ((d >> 7 & 32) | (d >> 3 & 16) | (d >> 14 & 8) | (d << 2 & 4) |
   154d2:	4319      	orrs	r1, r3
				   (d >> 21 & 2) | (d >> 3 & 1))] & 0x02100401;
   154d4:	69bb      	ldr	r3, [r7, #24]
   154d6:	08db      	lsrs	r3, r3, #3
   154d8:	f003 0301 	and.w	r3, r3, #1
   154dc:	430b      	orrs	r3, r1
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
	x ^= s[(r >> 7 & 63) ^
		   ((d >> 21 & 32) | (d >> 12 & 16) | (d >> 2 & 8) | (d >> 9 & 4) |
				   (d >> 22 & 2)
				   | (d >> 8 & 1))] & 0x10202008;
	x ^= s[(r >> 3 & 63) ^
   154de:	405a      	eors	r2, r3
   154e0:	f644 336c 	movw	r3, #19308	; 0x4b6c
   154e4:	f2c0 0302 	movt	r3, #2
   154e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		   ((d >> 7 & 32) | (d >> 3 & 16) | (d >> 14 & 8) | (d << 2 & 4) |
				   (d >> 21 & 2) | (d >> 3 & 1))] & 0x02100401;
   154ec:	f240 4301 	movw	r3, #1025	; 0x401
   154f0:	f2c0 2310 	movt	r3, #528	; 0x210
   154f4:	4013      	ands	r3, r2
				   (d >> 8 & 2) | (d >> 1 & 1))] & 0x21040080;
	x ^= s[(r >> 7 & 63) ^
		   ((d >> 21 & 32) | (d >> 12 & 16) | (d >> 2 & 8) | (d >> 9 & 4) |
				   (d >> 22 & 2)
				   | (d >> 8 & 1))] & 0x10202008;
	x ^= s[(r >> 3 & 63) ^
   154f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   154f8:	4053      	eors	r3, r2
   154fa:	62bb      	str	r3, [r7, #40]	; 0x28
		   ((d >> 7 & 32) | (d >> 3 & 16) | (d >> 14 & 8) | (d << 2 & 4) |
				   (d >> 21 & 2) | (d >> 3 & 1))] & 0x02100401;
	x ^= s[((r & 31) | (r >> 26 & 32)) ^
   154fc:	69fb      	ldr	r3, [r7, #28]
   154fe:	f003 021f 	and.w	r2, r3, #31
   15502:	69fb      	ldr	r3, [r7, #28]
   15504:	0e9b      	lsrs	r3, r3, #26
   15506:	f003 0320 	and.w	r3, r3, #32
   1550a:	431a      	orrs	r2, r3
		   ((d >> 19 & 32) | (d >> 6 & 16) | (d >> 11 & 8) | (d >> 4 & 4) |
   1550c:	69bb      	ldr	r3, [r7, #24]
   1550e:	0cdb      	lsrs	r3, r3, #19
   15510:	f003 0120 	and.w	r1, r3, #32
   15514:	69bb      	ldr	r3, [r7, #24]
   15516:	099b      	lsrs	r3, r3, #6
   15518:	f003 0310 	and.w	r3, r3, #16
   1551c:	4319      	orrs	r1, r3
   1551e:	69bb      	ldr	r3, [r7, #24]
   15520:	0adb      	lsrs	r3, r3, #11
   15522:	f003 0308 	and.w	r3, r3, #8
   15526:	4319      	orrs	r1, r3
   15528:	69bb      	ldr	r3, [r7, #24]
   1552a:	091b      	lsrs	r3, r3, #4
   1552c:	f003 0304 	and.w	r3, r3, #4
   15530:	4319      	orrs	r1, r3
				   (d >> 19 & 2)
   15532:	69bb      	ldr	r3, [r7, #24]
   15534:	0cdb      	lsrs	r3, r3, #19
   15536:	f003 0302 	and.w	r3, r3, #2
				   | (d >> 8 & 1))] & 0x10202008;
	x ^= s[(r >> 3 & 63) ^
		   ((d >> 7 & 32) | (d >> 3 & 16) | (d >> 14 & 8) | (d << 2 & 4) |
				   (d >> 21 & 2) | (d >> 3 & 1))] & 0x02100401;
	x ^= s[((r & 31) | (r >> 26 & 32)) ^
		   ((d >> 19 & 32) | (d >> 6 & 16) | (d >> 11 & 8) | (d >> 4 & 4) |
   1553a:	4319      	orrs	r1, r3
				   (d >> 19 & 2)
				   | (d >> 27 & 1))] & 0x08020820;
   1553c:	69bb      	ldr	r3, [r7, #24]
   1553e:	0edb      	lsrs	r3, r3, #27
   15540:	f003 0301 	and.w	r3, r3, #1
   15544:	430b      	orrs	r3, r1
				   (d >> 22 & 2)
				   | (d >> 8 & 1))] & 0x10202008;
	x ^= s[(r >> 3 & 63) ^
		   ((d >> 7 & 32) | (d >> 3 & 16) | (d >> 14 & 8) | (d << 2 & 4) |
				   (d >> 21 & 2) | (d >> 3 & 1))] & 0x02100401;
	x ^= s[((r & 31) | (r >> 26 & 32)) ^
   15546:	405a      	eors	r2, r3
   15548:	f644 336c 	movw	r3, #19308	; 0x4b6c
   1554c:	f2c0 0302 	movt	r3, #2
   15550:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		   ((d >> 19 & 32) | (d >> 6 & 16) | (d >> 11 & 8) | (d >> 4 & 4) |
				   (d >> 19 & 2)
				   | (d >> 27 & 1))] & 0x08020820;
   15554:	f44f 6302 	mov.w	r3, #2080	; 0x820
   15558:	f6c0 0302 	movt	r3, #2050	; 0x802
   1555c:	4013      	ands	r3, r2
				   (d >> 22 & 2)
				   | (d >> 8 & 1))] & 0x10202008;
	x ^= s[(r >> 3 & 63) ^
		   ((d >> 7 & 32) | (d >> 3 & 16) | (d >> 14 & 8) | (d << 2 & 4) |
				   (d >> 21 & 2) | (d >> 3 & 1))] & 0x02100401;
	x ^= s[((r & 31) | (r >> 26 & 32)) ^
   1555e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15560:	4053      	eors	r3, r2
   15562:	62bb      	str	r3, [r7, #40]	; 0x28
		   ((d >> 19 & 32) | (d >> 6 & 16) | (d >> 11 & 8) | (d >> 4 & 4) |
				   (d >> 19 & 2)
				   | (d >> 27 & 1))] & 0x08020820;
	l = r;
   15564:	69fb      	ldr	r3, [r7, #28]
   15566:	623b      	str	r3, [r7, #32]
	r = x;
   15568:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1556a:	61fb      	str	r3, [r7, #28]
	/* decide/perform key shifts */
	if((i & 7) == 0) {
   1556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1556e:	f003 0307 	and.w	r3, r3, #7
   15572:	2b00      	cmp	r3, #0
   15574:	d117      	bne.n	155a6 <justdes2+0x48a>
		i -= 2;
   15576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15578:	3b02      	subs	r3, #2
   1557a:	627b      	str	r3, [r7, #36]	; 0x24
		if(ctl == 0)
   1557c:	683b      	ldr	r3, [r7, #0]
   1557e:	2b00      	cmp	r3, #0
   15580:	f43f ae58 	beq.w	15234 <justdes2+0x118>
			goto leftby1;
		c = c >> 1 | (c & 1) << 27;
   15584:	697b      	ldr	r3, [r7, #20]
   15586:	085a      	lsrs	r2, r3, #1
   15588:	697b      	ldr	r3, [r7, #20]
   1558a:	f003 0301 	and.w	r3, r3, #1
   1558e:	06db      	lsls	r3, r3, #27
   15590:	4313      	orrs	r3, r2
   15592:	617b      	str	r3, [r7, #20]
		d = d >> 1 | (d & 1) << 27;
   15594:	69bb      	ldr	r3, [r7, #24]
   15596:	085a      	lsrs	r2, r3, #1
   15598:	69bb      	ldr	r3, [r7, #24]
   1559a:	f003 0301 	and.w	r3, r3, #1
   1559e:	06db      	lsls	r3, r3, #27
   155a0:	4313      	orrs	r3, r2
   155a2:	61bb      	str	r3, [r7, #24]
		goto startround;
   155a4:	e659      	b.n	1525a <justdes2+0x13e>
	}
	if(i != 6) {
   155a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   155a8:	2b06      	cmp	r3, #6
   155aa:	d027      	beq.n	155fc <justdes2+0x4e0>
		--i;
   155ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   155ae:	3b01      	subs	r3, #1
   155b0:	627b      	str	r3, [r7, #36]	; 0x24
		if(ctl == 0) {
   155b2:	683b      	ldr	r3, [r7, #0]
   155b4:	2b00      	cmp	r3, #0
   155b6:	d110      	bne.n	155da <justdes2+0x4be>
			c = c << 2 | (c >> 26 & 3);
   155b8:	697b      	ldr	r3, [r7, #20]
   155ba:	009a      	lsls	r2, r3, #2
   155bc:	697b      	ldr	r3, [r7, #20]
   155be:	0e9b      	lsrs	r3, r3, #26
   155c0:	f003 0303 	and.w	r3, r3, #3
   155c4:	4313      	orrs	r3, r2
   155c6:	617b      	str	r3, [r7, #20]
			d = d << 2 | (d >> 26 & 3);
   155c8:	69bb      	ldr	r3, [r7, #24]
   155ca:	009a      	lsls	r2, r3, #2
   155cc:	69bb      	ldr	r3, [r7, #24]
   155ce:	0e9b      	lsrs	r3, r3, #26
   155d0:	f003 0303 	and.w	r3, r3, #3
   155d4:	4313      	orrs	r3, r2
   155d6:	61bb      	str	r3, [r7, #24]
			goto startround;
   155d8:	e63f      	b.n	1525a <justdes2+0x13e>
		} else {
			c = c >> 2 | (c & 3) << 26;
   155da:	697b      	ldr	r3, [r7, #20]
   155dc:	089a      	lsrs	r2, r3, #2
   155de:	697b      	ldr	r3, [r7, #20]
   155e0:	f003 0303 	and.w	r3, r3, #3
   155e4:	069b      	lsls	r3, r3, #26
   155e6:	4313      	orrs	r3, r2
   155e8:	617b      	str	r3, [r7, #20]
			d = d >> 2 | (d & 3) << 26;
   155ea:	69bb      	ldr	r3, [r7, #24]
   155ec:	089a      	lsrs	r2, r3, #2
   155ee:	69bb      	ldr	r3, [r7, #24]
   155f0:	f003 0303 	and.w	r3, r3, #3
   155f4:	069b      	lsls	r3, r3, #26
   155f6:	4313      	orrs	r3, r2
   155f8:	61bb      	str	r3, [r7, #24]
			goto startround;
   155fa:	e62e      	b.n	1525a <justdes2+0x13e>
		}
	}
	/* final swap and permutations IP` */
	i = 7;
   155fc:	2307      	movs	r3, #7
   155fe:	627b      	str	r3, [r7, #36]	; 0x24
	do {
		*dst++ =
				(byte) ((r & 1 << 0) | (r >> 6 & 1 << 2) | (r >> 12 & 1 << 4) |
   15600:	69fb      	ldr	r3, [r7, #28]
   15602:	b2db      	uxtb	r3, r3
   15604:	f003 0301 	and.w	r3, r3, #1
   15608:	b2da      	uxtb	r2, r3
   1560a:	69fb      	ldr	r3, [r7, #28]
   1560c:	099b      	lsrs	r3, r3, #6
   1560e:	b2db      	uxtb	r3, r3
   15610:	f003 0304 	and.w	r3, r3, #4
   15614:	b2db      	uxtb	r3, r3
   15616:	4313      	orrs	r3, r2
   15618:	b2da      	uxtb	r2, r3
   1561a:	69fb      	ldr	r3, [r7, #28]
   1561c:	0b1b      	lsrs	r3, r3, #12
   1561e:	b2db      	uxtb	r3, r3
   15620:	f003 0310 	and.w	r3, r3, #16
   15624:	b2db      	uxtb	r3, r3
   15626:	4313      	orrs	r3, r2
   15628:	b2da      	uxtb	r2, r3
						(r >> 18 & 1 << 6) | (l << 1 & 1 << 1) | (l >> 5 & 1 << 3) |
   1562a:	69fb      	ldr	r3, [r7, #28]
   1562c:	0c9b      	lsrs	r3, r3, #18
	}
	/* final swap and permutations IP` */
	i = 7;
	do {
		*dst++ =
				(byte) ((r & 1 << 0) | (r >> 6 & 1 << 2) | (r >> 12 & 1 << 4) |
   1562e:	b2db      	uxtb	r3, r3
   15630:	f003 0340 	and.w	r3, r3, #64	; 0x40
   15634:	b2db      	uxtb	r3, r3
   15636:	4313      	orrs	r3, r2
   15638:	b2da      	uxtb	r2, r3
   1563a:	6a3b      	ldr	r3, [r7, #32]
   1563c:	b2db      	uxtb	r3, r3
   1563e:	005b      	lsls	r3, r3, #1
   15640:	b2db      	uxtb	r3, r3
   15642:	f003 0302 	and.w	r3, r3, #2
   15646:	b2db      	uxtb	r3, r3
   15648:	4313      	orrs	r3, r2
   1564a:	b2da      	uxtb	r2, r3
						(r >> 18 & 1 << 6) | (l << 1 & 1 << 1) | (l >> 5 & 1 << 3) |
   1564c:	6a3b      	ldr	r3, [r7, #32]
   1564e:	095b      	lsrs	r3, r3, #5
	}
	/* final swap and permutations IP` */
	i = 7;
	do {
		*dst++ =
				(byte) ((r & 1 << 0) | (r >> 6 & 1 << 2) | (r >> 12 & 1 << 4) |
   15650:	b2db      	uxtb	r3, r3
   15652:	f003 0308 	and.w	r3, r3, #8
   15656:	b2db      	uxtb	r3, r3
   15658:	4313      	orrs	r3, r2
   1565a:	b2da      	uxtb	r2, r3
						(r >> 18 & 1 << 6) | (l << 1 & 1 << 1) | (l >> 5 & 1 << 3) |
						(l >> 11 & 1 << 5) | (l >> 17 & 1 << 7));
   1565c:	6a3b      	ldr	r3, [r7, #32]
   1565e:	0adb      	lsrs	r3, r3, #11
	}
	/* final swap and permutations IP` */
	i = 7;
	do {
		*dst++ =
				(byte) ((r & 1 << 0) | (r >> 6 & 1 << 2) | (r >> 12 & 1 << 4) |
   15660:	b2db      	uxtb	r3, r3
   15662:	f003 0320 	and.w	r3, r3, #32
   15666:	b2db      	uxtb	r3, r3
   15668:	4313      	orrs	r3, r2
   1566a:	b2da      	uxtb	r2, r3
						(r >> 18 & 1 << 6) | (l << 1 & 1 << 1) | (l >> 5 & 1 << 3) |
						(l >> 11 & 1 << 5) | (l >> 17 & 1 << 7));
   1566c:	6a3b      	ldr	r3, [r7, #32]
   1566e:	0c5b      	lsrs	r3, r3, #17
	}
	/* final swap and permutations IP` */
	i = 7;
	do {
		*dst++ =
				(byte) ((r & 1 << 0) | (r >> 6 & 1 << 2) | (r >> 12 & 1 << 4) |
   15670:	b2db      	uxtb	r3, r3
   15672:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   15676:	b2db      	uxtb	r3, r3
   15678:	4313      	orrs	r3, r2
   1567a:	b2da      	uxtb	r2, r3
		}
	}
	/* final swap and permutations IP` */
	i = 7;
	do {
		*dst++ =
   1567c:	68fb      	ldr	r3, [r7, #12]
   1567e:	701a      	strb	r2, [r3, #0]
   15680:	68fb      	ldr	r3, [r7, #12]
   15682:	3301      	adds	r3, #1
   15684:	60fb      	str	r3, [r7, #12]
				(byte) ((r & 1 << 0) | (r >> 6 & 1 << 2) | (r >> 12 & 1 << 4) |
						(r >> 18 & 1 << 6) | (l << 1 & 1 << 1) | (l >> 5 & 1 << 3) |
						(l >> 11 & 1 << 5) | (l >> 17 & 1 << 7));
		l >>= 1;
   15686:	6a3b      	ldr	r3, [r7, #32]
   15688:	085b      	lsrs	r3, r3, #1
   1568a:	623b      	str	r3, [r7, #32]
		r >>= 1;
   1568c:	69fb      	ldr	r3, [r7, #28]
   1568e:	085b      	lsrs	r3, r3, #1
   15690:	61fb      	str	r3, [r7, #28]
	} while(--i >= 0);
   15692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15694:	3b01      	subs	r3, #1
   15696:	627b      	str	r3, [r7, #36]	; 0x24
   15698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1569a:	2b00      	cmp	r3, #0
   1569c:	dab0      	bge.n	15600 <justdes2+0x4e4>
}
   1569e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   156a2:	f2c0 0302 	movt	r3, #2
   156a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   156a8:	681b      	ldr	r3, [r3, #0]
   156aa:	429a      	cmp	r2, r3
   156ac:	d001      	beq.n	156b2 <justdes2+0x596>
   156ae:	f7f3 fc79 	bl	8fa4 <__stack_chk_fail>
   156b2:	f107 0730 	add.w	r7, r7, #48	; 0x30
   156b6:	46bd      	mov	sp, r7
   156b8:	bd80      	pop	{r7, pc}
   156ba:	bf00      	nop

000156bc <stdDES>:
 * \return no
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\std.c
 * \test tcab0057.c
 */
void stdDES(byte * dst, byte * src, byte * key) {
   156bc:	b580      	push	{r7, lr}
   156be:	b086      	sub	sp, #24
   156c0:	af00      	add	r7, sp, #0
   156c2:	60f8      	str	r0, [r7, #12]
   156c4:	60b9      	str	r1, [r7, #8]
   156c6:	607a      	str	r2, [r7, #4]
   156c8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   156cc:	f2c0 0302 	movt	r3, #2
   156d0:	681b      	ldr	r3, [r3, #0]
   156d2:	617b      	str	r3, [r7, #20]
	justdes2(dst, src, key, 0);
   156d4:	68f8      	ldr	r0, [r7, #12]
   156d6:	68b9      	ldr	r1, [r7, #8]
   156d8:	687a      	ldr	r2, [r7, #4]
   156da:	2300      	movs	r3, #0
   156dc:	f7ff fd1e 	bl	1511c <justdes2>
}
   156e0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   156e4:	f2c0 0302 	movt	r3, #2
   156e8:	697a      	ldr	r2, [r7, #20]
   156ea:	681b      	ldr	r3, [r3, #0]
   156ec:	429a      	cmp	r2, r3
   156ee:	d001      	beq.n	156f4 <stdDES+0x38>
   156f0:	f7f3 fc58 	bl	8fa4 <__stack_chk_fail>
   156f4:	f107 0718 	add.w	r7, r7, #24
   156f8:	46bd      	mov	sp, r7
   156fa:	bd80      	pop	{r7, pc}

000156fc <stdSED>:
 * \return no
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\std.c
 * \test tcab0057.c
 */
void stdSED(byte * dst, byte * src, byte * key) {
   156fc:	b580      	push	{r7, lr}
   156fe:	b086      	sub	sp, #24
   15700:	af00      	add	r7, sp, #0
   15702:	60f8      	str	r0, [r7, #12]
   15704:	60b9      	str	r1, [r7, #8]
   15706:	607a      	str	r2, [r7, #4]
   15708:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1570c:	f2c0 0302 	movt	r3, #2
   15710:	681b      	ldr	r3, [r3, #0]
   15712:	617b      	str	r3, [r7, #20]
	justdes2(dst, src, key, 1);
   15714:	68f8      	ldr	r0, [r7, #12]
   15716:	68b9      	ldr	r1, [r7, #8]
   15718:	687a      	ldr	r2, [r7, #4]
   1571a:	2301      	movs	r3, #1
   1571c:	f7ff fcfe 	bl	1511c <justdes2>
}
   15720:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15724:	f2c0 0302 	movt	r3, #2
   15728:	697a      	ldr	r2, [r7, #20]
   1572a:	681b      	ldr	r3, [r3, #0]
   1572c:	429a      	cmp	r2, r3
   1572e:	d001      	beq.n	15734 <stdSED+0x38>
   15730:	f7f3 fc38 	bl	8fa4 <__stack_chk_fail>
   15734:	f107 0718 	add.w	r7, r7, #24
   15738:	46bd      	mov	sp, r7
   1573a:	bd80      	pop	{r7, pc}

0001573c <stdEDE>:
 * \return no
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\std.c
 * \test tcab0057.c
 */
void stdEDE(byte * dst, byte * src, byte * key) {
   1573c:	b580      	push	{r7, lr}
   1573e:	b088      	sub	sp, #32
   15740:	af00      	add	r7, sp, #0
   15742:	60f8      	str	r0, [r7, #12]
   15744:	60b9      	str	r1, [r7, #8]
   15746:	607a      	str	r2, [r7, #4]
   15748:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1574c:	f2c0 0302 	movt	r3, #2
   15750:	681b      	ldr	r3, [r3, #0]
   15752:	61fb      	str	r3, [r7, #28]
	byte tmp[8];

	stdDES(dst, src, key);
   15754:	68f8      	ldr	r0, [r7, #12]
   15756:	68b9      	ldr	r1, [r7, #8]
   15758:	687a      	ldr	r2, [r7, #4]
   1575a:	f7ff ffaf 	bl	156bc <stdDES>
	stdSED(tmp, dst, key + 8);
   1575e:	687b      	ldr	r3, [r7, #4]
   15760:	3308      	adds	r3, #8
   15762:	f107 0214 	add.w	r2, r7, #20
   15766:	4610      	mov	r0, r2
   15768:	68f9      	ldr	r1, [r7, #12]
   1576a:	461a      	mov	r2, r3
   1576c:	f7ff ffc6 	bl	156fc <stdSED>
	stdDES(dst, tmp, key);
   15770:	f107 0314 	add.w	r3, r7, #20
   15774:	68f8      	ldr	r0, [r7, #12]
   15776:	4619      	mov	r1, r3
   15778:	687a      	ldr	r2, [r7, #4]
   1577a:	f7ff ff9f 	bl	156bc <stdDES>
}
   1577e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15782:	f2c0 0302 	movt	r3, #2
   15786:	69fa      	ldr	r2, [r7, #28]
   15788:	681b      	ldr	r3, [r3, #0]
   1578a:	429a      	cmp	r2, r3
   1578c:	d001      	beq.n	15792 <stdEDE+0x56>
   1578e:	f7f3 fc09 	bl	8fa4 <__stack_chk_fail>
   15792:	f107 0720 	add.w	r7, r7, #32
   15796:	46bd      	mov	sp, r7
   15798:	bd80      	pop	{r7, pc}
   1579a:	bf00      	nop

0001579c <stdDED>:
 * \return no
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\std.c
 * \test tcab0057.c
 */
void stdDED(byte * dst, byte * src, byte * key) {
   1579c:	b580      	push	{r7, lr}
   1579e:	b088      	sub	sp, #32
   157a0:	af00      	add	r7, sp, #0
   157a2:	60f8      	str	r0, [r7, #12]
   157a4:	60b9      	str	r1, [r7, #8]
   157a6:	607a      	str	r2, [r7, #4]
   157a8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   157ac:	f2c0 0302 	movt	r3, #2
   157b0:	681b      	ldr	r3, [r3, #0]
   157b2:	61fb      	str	r3, [r7, #28]
	byte tmp[8];

	stdSED(dst, src, key);
   157b4:	68f8      	ldr	r0, [r7, #12]
   157b6:	68b9      	ldr	r1, [r7, #8]
   157b8:	687a      	ldr	r2, [r7, #4]
   157ba:	f7ff ff9f 	bl	156fc <stdSED>
	stdDES(tmp, dst, key + 8);
   157be:	687b      	ldr	r3, [r7, #4]
   157c0:	3308      	adds	r3, #8
   157c2:	f107 0214 	add.w	r2, r7, #20
   157c6:	4610      	mov	r0, r2
   157c8:	68f9      	ldr	r1, [r7, #12]
   157ca:	461a      	mov	r2, r3
   157cc:	f7ff ff76 	bl	156bc <stdDES>
	stdSED(dst, tmp, key);
   157d0:	f107 0314 	add.w	r3, r7, #20
   157d4:	68f8      	ldr	r0, [r7, #12]
   157d6:	4619      	mov	r1, r3
   157d8:	687a      	ldr	r2, [r7, #4]
   157da:	f7ff ff8f 	bl	156fc <stdSED>
}
   157de:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   157e2:	f2c0 0302 	movt	r3, #2
   157e6:	69fa      	ldr	r2, [r7, #28]
   157e8:	681b      	ldr	r3, [r3, #0]
   157ea:	429a      	cmp	r2, r3
   157ec:	d001      	beq.n	157f2 <stdDED+0x56>
   157ee:	f7f3 fbd9 	bl	8fa4 <__stack_chk_fail>
   157f2:	f107 0720 	add.w	r7, r7, #32
   157f6:	46bd      	mov	sp, r7
   157f8:	bd80      	pop	{r7, pc}
   157fa:	bf00      	nop

000157fc <hashJerkins>:

//Integer hash function for 32 bits based on Robert Jerkins' 32 bit Mix Function.
//http://www.concentric.net/~Ttwang/tech/inthash.htm
static card hashJerkins(card key) {
   157fc:	b580      	push	{r7, lr}
   157fe:	b084      	sub	sp, #16
   15800:	af00      	add	r7, sp, #0
   15802:	6078      	str	r0, [r7, #4]
   15804:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15808:	f2c0 0302 	movt	r3, #2
   1580c:	681b      	ldr	r3, [r3, #0]
   1580e:	60fb      	str	r3, [r7, #12]
	key += (key << 12);
   15810:	687b      	ldr	r3, [r7, #4]
   15812:	031b      	lsls	r3, r3, #12
   15814:	687a      	ldr	r2, [r7, #4]
   15816:	18d3      	adds	r3, r2, r3
   15818:	607b      	str	r3, [r7, #4]
	key ^= (key >> 22);
   1581a:	687b      	ldr	r3, [r7, #4]
   1581c:	0d9b      	lsrs	r3, r3, #22
   1581e:	687a      	ldr	r2, [r7, #4]
   15820:	4053      	eors	r3, r2
   15822:	607b      	str	r3, [r7, #4]
	key += (key << 4);
   15824:	687b      	ldr	r3, [r7, #4]
   15826:	011b      	lsls	r3, r3, #4
   15828:	687a      	ldr	r2, [r7, #4]
   1582a:	18d3      	adds	r3, r2, r3
   1582c:	607b      	str	r3, [r7, #4]
	key ^= (key >> 9);
   1582e:	687b      	ldr	r3, [r7, #4]
   15830:	0a5b      	lsrs	r3, r3, #9
   15832:	687a      	ldr	r2, [r7, #4]
   15834:	4053      	eors	r3, r2
   15836:	607b      	str	r3, [r7, #4]
	key += (key << 10);
   15838:	687b      	ldr	r3, [r7, #4]
   1583a:	029b      	lsls	r3, r3, #10
   1583c:	687a      	ldr	r2, [r7, #4]
   1583e:	18d3      	adds	r3, r2, r3
   15840:	607b      	str	r3, [r7, #4]
	key ^= (key >> 2);
   15842:	687b      	ldr	r3, [r7, #4]
   15844:	089b      	lsrs	r3, r3, #2
   15846:	687a      	ldr	r2, [r7, #4]
   15848:	4053      	eors	r3, r2
   1584a:	607b      	str	r3, [r7, #4]
	key += (key << 7);
   1584c:	687b      	ldr	r3, [r7, #4]
   1584e:	01db      	lsls	r3, r3, #7
   15850:	687a      	ldr	r2, [r7, #4]
   15852:	18d3      	adds	r3, r2, r3
   15854:	607b      	str	r3, [r7, #4]
	key ^= (key >> 12);
   15856:	687b      	ldr	r3, [r7, #4]
   15858:	0b1b      	lsrs	r3, r3, #12
   1585a:	687a      	ldr	r2, [r7, #4]
   1585c:	4053      	eors	r3, r2
   1585e:	607b      	str	r3, [r7, #4]
	return key;
   15860:	687b      	ldr	r3, [r7, #4]
}
   15862:	4618      	mov	r0, r3
   15864:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15868:	f2c0 0302 	movt	r3, #2
   1586c:	68fa      	ldr	r2, [r7, #12]
   1586e:	681b      	ldr	r3, [r3, #0]
   15870:	429a      	cmp	r2, r3
   15872:	d001      	beq.n	15878 <hashJerkins+0x7c>
   15874:	f7f3 fb96 	bl	8fa4 <__stack_chk_fail>
   15878:	f107 0710 	add.w	r7, r7, #16
   1587c:	46bd      	mov	sp, r7
   1587e:	bd80      	pop	{r7, pc}

00015880 <hashJerkinsBin>:
 *    - output integer hash value.
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\std.c
 * \test tcts0002.c
 */
card hashJerkinsBin(const byte * buf, byte len) {
   15880:	b580      	push	{r7, lr}
   15882:	b0c6      	sub	sp, #280	; 0x118
   15884:	af00      	add	r7, sp, #0
   15886:	1d3b      	adds	r3, r7, #4
   15888:	6018      	str	r0, [r3, #0]
   1588a:	460a      	mov	r2, r1
   1588c:	1cfb      	adds	r3, r7, #3
   1588e:	701a      	strb	r2, [r3, #0]
   15890:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15894:	f2c0 0302 	movt	r3, #2
   15898:	681b      	ldr	r3, [r3, #0]
   1589a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	card *ptr;
	card tmp[256 / sizeof(card)];

	VERIFY(len);

	memset(tmp, 0xFF, sizeof(tmp));
   1589e:	f107 0314 	add.w	r3, r7, #20
   158a2:	4618      	mov	r0, r3
   158a4:	21ff      	movs	r1, #255	; 0xff
   158a6:	f44f 7280 	mov.w	r2, #256	; 0x100
   158aa:	f7f3 e988 	blx	8bbc <_init+0x5c>
	memcpy(tmp, buf, len);
   158ae:	1cfb      	adds	r3, r7, #3
   158b0:	781b      	ldrb	r3, [r3, #0]
   158b2:	f107 0114 	add.w	r1, r7, #20
   158b6:	1d3a      	adds	r2, r7, #4
   158b8:	4608      	mov	r0, r1
   158ba:	6811      	ldr	r1, [r2, #0]
   158bc:	461a      	mov	r2, r3
   158be:	f7f3 e9dc 	blx	8c78 <_init+0x118>

	ret = 0;
   158c2:	f107 030c 	add.w	r3, r7, #12
   158c6:	2200      	movs	r2, #0
   158c8:	601a      	str	r2, [r3, #0]
	ptr = tmp;
   158ca:	f107 0310 	add.w	r3, r7, #16
   158ce:	f107 0214 	add.w	r2, r7, #20
   158d2:	601a      	str	r2, [r3, #0]
	len += 3;
   158d4:	1cfb      	adds	r3, r7, #3
   158d6:	1cfa      	adds	r2, r7, #3
   158d8:	7812      	ldrb	r2, [r2, #0]
   158da:	3203      	adds	r2, #3
   158dc:	701a      	strb	r2, [r3, #0]
	len /= 4;
   158de:	1cfb      	adds	r3, r7, #3
   158e0:	1cfa      	adds	r2, r7, #3
   158e2:	7812      	ldrb	r2, [r2, #0]
   158e4:	0892      	lsrs	r2, r2, #2
   158e6:	701a      	strb	r2, [r3, #0]
	while(len) {
   158e8:	e01a      	b.n	15920 <hashJerkinsBin+0xa0>
		ret ^= hashJerkins(*ptr);
   158ea:	f107 0310 	add.w	r3, r7, #16
   158ee:	681b      	ldr	r3, [r3, #0]
   158f0:	681b      	ldr	r3, [r3, #0]
   158f2:	4618      	mov	r0, r3
   158f4:	f7ff ff82 	bl	157fc <hashJerkins>
   158f8:	4601      	mov	r1, r0
   158fa:	f107 030c 	add.w	r3, r7, #12
   158fe:	f107 020c 	add.w	r2, r7, #12
   15902:	6812      	ldr	r2, [r2, #0]
   15904:	404a      	eors	r2, r1
   15906:	601a      	str	r2, [r3, #0]
		ptr++;
   15908:	f107 0310 	add.w	r3, r7, #16
   1590c:	f107 0210 	add.w	r2, r7, #16
   15910:	6812      	ldr	r2, [r2, #0]
   15912:	3204      	adds	r2, #4
   15914:	601a      	str	r2, [r3, #0]
		len--;
   15916:	1cfb      	adds	r3, r7, #3
   15918:	1cfa      	adds	r2, r7, #3
   1591a:	7812      	ldrb	r2, [r2, #0]
   1591c:	3a01      	subs	r2, #1
   1591e:	701a      	strb	r2, [r3, #0]

	ret = 0;
	ptr = tmp;
	len += 3;
	len /= 4;
	while(len) {
   15920:	1cfb      	adds	r3, r7, #3
   15922:	781b      	ldrb	r3, [r3, #0]
   15924:	2b00      	cmp	r3, #0
   15926:	d1e0      	bne.n	158ea <hashJerkinsBin+0x6a>
		ret ^= hashJerkins(*ptr);
		ptr++;
		len--;
	}

	return ret;
   15928:	f107 030c 	add.w	r3, r7, #12
   1592c:	681b      	ldr	r3, [r3, #0]
}
   1592e:	4618      	mov	r0, r3
   15930:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15934:	f2c0 0302 	movt	r3, #2
   15938:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
   1593c:	681b      	ldr	r3, [r3, #0]
   1593e:	429a      	cmp	r2, r3
   15940:	d001      	beq.n	15946 <hashJerkinsBin+0xc6>
   15942:	f7f3 fb2f 	bl	8fa4 <__stack_chk_fail>
   15946:	f507 778c 	add.w	r7, r7, #280	; 0x118
   1594a:	46bd      	mov	sp, r7
   1594c:	bd80      	pop	{r7, pc}
   1594e:	bf00      	nop

00015950 <bmpWdt>:
	ofsBmpBpp,                  //Bits per pixel
	ofsBmpDatChk,               //BMP Data checksum
	ofsBmpDat                   //data follow
};

word bmpWdt(const byte * bmp) {
   15950:	b580      	push	{r7, lr}
   15952:	b084      	sub	sp, #16
   15954:	af00      	add	r7, sp, #0
   15956:	6078      	str	r0, [r7, #4]
   15958:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1595c:	f2c0 0302 	movt	r3, #2
   15960:	681b      	ldr	r3, [r3, #0]
   15962:	60fb      	str	r3, [r7, #12]
	return WORDHL(bmp[ofsBmpWdtMsb], bmp[ofsBmpWdtLsb]);
   15964:	687b      	ldr	r3, [r7, #4]
   15966:	330b      	adds	r3, #11
   15968:	781b      	ldrb	r3, [r3, #0]
   1596a:	021b      	lsls	r3, r3, #8
   1596c:	b29a      	uxth	r2, r3
   1596e:	687b      	ldr	r3, [r7, #4]
   15970:	330c      	adds	r3, #12
   15972:	781b      	ldrb	r3, [r3, #0]
   15974:	4313      	orrs	r3, r2
   15976:	b29b      	uxth	r3, r3
   15978:	b29b      	uxth	r3, r3
}
   1597a:	4618      	mov	r0, r3
   1597c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15980:	f2c0 0302 	movt	r3, #2
   15984:	68fa      	ldr	r2, [r7, #12]
   15986:	681b      	ldr	r3, [r3, #0]
   15988:	429a      	cmp	r2, r3
   1598a:	d001      	beq.n	15990 <bmpWdt+0x40>
   1598c:	f7f3 fb0a 	bl	8fa4 <__stack_chk_fail>
   15990:	f107 0710 	add.w	r7, r7, #16
   15994:	46bd      	mov	sp, r7
   15996:	bd80      	pop	{r7, pc}

00015998 <bmpHgt>:
word bmpHgt(const byte * bmp) {
   15998:	b580      	push	{r7, lr}
   1599a:	b084      	sub	sp, #16
   1599c:	af00      	add	r7, sp, #0
   1599e:	6078      	str	r0, [r7, #4]
   159a0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   159a4:	f2c0 0302 	movt	r3, #2
   159a8:	681b      	ldr	r3, [r3, #0]
   159aa:	60fb      	str	r3, [r7, #12]
	return WORDHL(bmp[ofsBmpHgtMsb], bmp[ofsBmpHgtLsb]);
   159ac:	687b      	ldr	r3, [r7, #4]
   159ae:	330d      	adds	r3, #13
   159b0:	781b      	ldrb	r3, [r3, #0]
   159b2:	021b      	lsls	r3, r3, #8
   159b4:	b29a      	uxth	r2, r3
   159b6:	687b      	ldr	r3, [r7, #4]
   159b8:	330e      	adds	r3, #14
   159ba:	781b      	ldrb	r3, [r3, #0]
   159bc:	4313      	orrs	r3, r2
   159be:	b29b      	uxth	r3, r3
   159c0:	b29b      	uxth	r3, r3
}
   159c2:	4618      	mov	r0, r3
   159c4:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   159c8:	f2c0 0302 	movt	r3, #2
   159cc:	68fa      	ldr	r2, [r7, #12]
   159ce:	681b      	ldr	r3, [r3, #0]
   159d0:	429a      	cmp	r2, r3
   159d2:	d001      	beq.n	159d8 <bmpHgt+0x40>
   159d4:	f7f3 fae6 	bl	8fa4 <__stack_chk_fail>
   159d8:	f107 0710 	add.w	r7, r7, #16
   159dc:	46bd      	mov	sp, r7
   159de:	bd80      	pop	{r7, pc}

000159e0 <bmpDat>:
const byte *bmpDat(const byte * bmp) {
   159e0:	b580      	push	{r7, lr}
   159e2:	b084      	sub	sp, #16
   159e4:	af00      	add	r7, sp, #0
   159e6:	6078      	str	r0, [r7, #4]
   159e8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   159ec:	f2c0 0302 	movt	r3, #2
   159f0:	681b      	ldr	r3, [r3, #0]
   159f2:	60fb      	str	r3, [r7, #12]
	return bmp + ofsBmpDat;
   159f4:	687b      	ldr	r3, [r7, #4]
   159f6:	3311      	adds	r3, #17
}
   159f8:	4618      	mov	r0, r3
   159fa:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   159fe:	f2c0 0302 	movt	r3, #2
   15a02:	68fa      	ldr	r2, [r7, #12]
   15a04:	681b      	ldr	r3, [r3, #0]
   15a06:	429a      	cmp	r2, r3
   15a08:	d001      	beq.n	15a0e <bmpDat+0x2e>
   15a0a:	f7f3 facb 	bl	8fa4 <__stack_chk_fail>
   15a0e:	f107 0710 	add.w	r7, r7, #16
   15a12:	46bd      	mov	sp, r7
   15a14:	bd80      	pop	{r7, pc}
   15a16:	bf00      	nop

00015a18 <Radix64Encode>:
 *
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 * \test tcfa0004.c
 */
int Radix64Encode(byte * inBuf, word inLen, byte * outBuf) {
   15a18:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a1a:	b099      	sub	sp, #100	; 0x64
   15a1c:	af00      	add	r7, sp, #0
   15a1e:	60f8      	str	r0, [r7, #12]
   15a20:	460b      	mov	r3, r1
   15a22:	607a      	str	r2, [r7, #4]
   15a24:	817b      	strh	r3, [r7, #10]
   15a26:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15a2a:	f2c0 0302 	movt	r3, #2
   15a2e:	681b      	ldr	r3, [r3, #0]
   15a30:	65fb      	str	r3, [r7, #92]	; 0x5c
	byte bintoasc[64] = {
   15a32:	f644 03f4 	movw	r3, #18676	; 0x48f4
   15a36:	f2c0 0302 	movt	r3, #2
   15a3a:	461c      	mov	r4, r3
   15a3c:	f107 061c 	add.w	r6, r7, #28
   15a40:	f104 0e40 	add.w	lr, r4, #64	; 0x40
   15a44:	4635      	mov	r5, r6
   15a46:	4623      	mov	r3, r4
   15a48:	6818      	ldr	r0, [r3, #0]
   15a4a:	6859      	ldr	r1, [r3, #4]
   15a4c:	689a      	ldr	r2, [r3, #8]
   15a4e:	68db      	ldr	r3, [r3, #12]
   15a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15a52:	3410      	adds	r4, #16
   15a54:	3610      	adds	r6, #16
   15a56:	4574      	cmp	r4, lr
   15a58:	d1f4      	bne.n	15a44 <Radix64Encode+0x2c>
			'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'
	};

	int i;
	unsigned char *p = outBuf;
   15a5a:	687b      	ldr	r3, [r7, #4]
   15a5c:	61bb      	str	r3, [r7, #24]

	// Transform the 3x8 bits to 4x6 bits, as required by base64.
	for (i = 0; i < inLen; i += 3) {
   15a5e:	2300      	movs	r3, #0
   15a60:	617b      	str	r3, [r7, #20]
   15a62:	e04d      	b.n	15b00 <Radix64Encode+0xe8>
		*p++ = bintoasc[inBuf[0] >> 2];
   15a64:	68fb      	ldr	r3, [r7, #12]
   15a66:	781b      	ldrb	r3, [r3, #0]
   15a68:	089b      	lsrs	r3, r3, #2
   15a6a:	b2db      	uxtb	r3, r3
   15a6c:	f107 0260 	add.w	r2, r7, #96	; 0x60
   15a70:	18d3      	adds	r3, r2, r3
   15a72:	f813 2c44 	ldrb.w	r2, [r3, #-68]
   15a76:	69bb      	ldr	r3, [r7, #24]
   15a78:	701a      	strb	r2, [r3, #0]
   15a7a:	69bb      	ldr	r3, [r7, #24]
   15a7c:	3301      	adds	r3, #1
   15a7e:	61bb      	str	r3, [r7, #24]
		*p++ = bintoasc[((inBuf[0] & 3) << 4) + (inBuf[1] >> 4)];
   15a80:	68fb      	ldr	r3, [r7, #12]
   15a82:	781b      	ldrb	r3, [r3, #0]
   15a84:	f003 0303 	and.w	r3, r3, #3
   15a88:	011a      	lsls	r2, r3, #4
   15a8a:	68fb      	ldr	r3, [r7, #12]
   15a8c:	3301      	adds	r3, #1
   15a8e:	781b      	ldrb	r3, [r3, #0]
   15a90:	091b      	lsrs	r3, r3, #4
   15a92:	b2db      	uxtb	r3, r3
   15a94:	18d3      	adds	r3, r2, r3
   15a96:	f107 0260 	add.w	r2, r7, #96	; 0x60
   15a9a:	18d3      	adds	r3, r2, r3
   15a9c:	f813 2c44 	ldrb.w	r2, [r3, #-68]
   15aa0:	69bb      	ldr	r3, [r7, #24]
   15aa2:	701a      	strb	r2, [r3, #0]
   15aa4:	69bb      	ldr	r3, [r7, #24]
   15aa6:	3301      	adds	r3, #1
   15aa8:	61bb      	str	r3, [r7, #24]
		*p++ = bintoasc[((inBuf[1] & 0xf) << 2) + (inBuf[2] >> 6)];
   15aaa:	68fb      	ldr	r3, [r7, #12]
   15aac:	3301      	adds	r3, #1
   15aae:	781b      	ldrb	r3, [r3, #0]
   15ab0:	f003 030f 	and.w	r3, r3, #15
   15ab4:	009a      	lsls	r2, r3, #2
   15ab6:	68fb      	ldr	r3, [r7, #12]
   15ab8:	3302      	adds	r3, #2
   15aba:	781b      	ldrb	r3, [r3, #0]
   15abc:	099b      	lsrs	r3, r3, #6
   15abe:	b2db      	uxtb	r3, r3
   15ac0:	18d3      	adds	r3, r2, r3
   15ac2:	f107 0260 	add.w	r2, r7, #96	; 0x60
   15ac6:	18d3      	adds	r3, r2, r3
   15ac8:	f813 2c44 	ldrb.w	r2, [r3, #-68]
   15acc:	69bb      	ldr	r3, [r7, #24]
   15ace:	701a      	strb	r2, [r3, #0]
   15ad0:	69bb      	ldr	r3, [r7, #24]
   15ad2:	3301      	adds	r3, #1
   15ad4:	61bb      	str	r3, [r7, #24]
		*p++ = bintoasc[inBuf[2] & 0x3f];
   15ad6:	68fb      	ldr	r3, [r7, #12]
   15ad8:	3302      	adds	r3, #2
   15ada:	781b      	ldrb	r3, [r3, #0]
   15adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15ae0:	f107 0260 	add.w	r2, r7, #96	; 0x60
   15ae4:	18d3      	adds	r3, r2, r3
   15ae6:	f813 2c44 	ldrb.w	r2, [r3, #-68]
   15aea:	69bb      	ldr	r3, [r7, #24]
   15aec:	701a      	strb	r2, [r3, #0]
   15aee:	69bb      	ldr	r3, [r7, #24]
   15af0:	3301      	adds	r3, #1
   15af2:	61bb      	str	r3, [r7, #24]
		inBuf += 3;
   15af4:	68fb      	ldr	r3, [r7, #12]
   15af6:	3303      	adds	r3, #3
   15af8:	60fb      	str	r3, [r7, #12]

	int i;
	unsigned char *p = outBuf;

	// Transform the 3x8 bits to 4x6 bits, as required by base64.
	for (i = 0; i < inLen; i += 3) {
   15afa:	697b      	ldr	r3, [r7, #20]
   15afc:	3303      	adds	r3, #3
   15afe:	617b      	str	r3, [r7, #20]
   15b00:	897a      	ldrh	r2, [r7, #10]
   15b02:	697b      	ldr	r3, [r7, #20]
   15b04:	429a      	cmp	r2, r3
   15b06:	dcad      	bgt.n	15a64 <Radix64Encode+0x4c>
		*p++ = bintoasc[((inBuf[1] & 0xf) << 2) + (inBuf[2] >> 6)];
		*p++ = bintoasc[inBuf[2] & 0x3f];
		inBuf += 3;
	}
	// Pad the result if necessary...
	if(i == inLen + 1)
   15b08:	897b      	ldrh	r3, [r7, #10]
   15b0a:	1c5a      	adds	r2, r3, #1
   15b0c:	697b      	ldr	r3, [r7, #20]
   15b0e:	429a      	cmp	r2, r3
   15b10:	d104      	bne.n	15b1c <Radix64Encode+0x104>
		*(p - 1) = '=';
   15b12:	69bb      	ldr	r3, [r7, #24]
   15b14:	3b01      	subs	r3, #1
   15b16:	223d      	movs	r2, #61	; 0x3d
   15b18:	701a      	strb	r2, [r3, #0]
   15b1a:	e00c      	b.n	15b36 <Radix64Encode+0x11e>
	else if(i == inLen + 2)
   15b1c:	897b      	ldrh	r3, [r7, #10]
   15b1e:	1c9a      	adds	r2, r3, #2
   15b20:	697b      	ldr	r3, [r7, #20]
   15b22:	429a      	cmp	r2, r3
   15b24:	d107      	bne.n	15b36 <Radix64Encode+0x11e>
		*(p - 1) = *(p - 2) = '=';
   15b26:	69bb      	ldr	r3, [r7, #24]
   15b28:	1e5a      	subs	r2, r3, #1
   15b2a:	69bb      	ldr	r3, [r7, #24]
   15b2c:	3b02      	subs	r3, #2
   15b2e:	213d      	movs	r1, #61	; 0x3d
   15b30:	7019      	strb	r1, [r3, #0]
   15b32:	781b      	ldrb	r3, [r3, #0]
   15b34:	7013      	strb	r3, [r2, #0]

	// ...and zero-terminate it.
	*p = '\0';
   15b36:	69bb      	ldr	r3, [r7, #24]
   15b38:	2200      	movs	r2, #0
   15b3a:	701a      	strb	r2, [r3, #0]
	return strlen((char *) outBuf);
   15b3c:	6878      	ldr	r0, [r7, #4]
   15b3e:	f7f3 e8a2 	blx	8c84 <_init+0x124>
   15b42:	4603      	mov	r3, r0
}
   15b44:	4618      	mov	r0, r3
   15b46:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15b4a:	f2c0 0302 	movt	r3, #2
   15b4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   15b50:	681b      	ldr	r3, [r3, #0]
   15b52:	429a      	cmp	r2, r3
   15b54:	d001      	beq.n	15b5a <Radix64Encode+0x142>
   15b56:	f7f3 fa25 	bl	8fa4 <__stack_chk_fail>
   15b5a:	f107 0764 	add.w	r7, r7, #100	; 0x64
   15b5e:	46bd      	mov	sp, r7
   15b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15b62:	bf00      	nop

00015b64 <Radix64Decode>:
 *
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 * \test tcfa0004.c
 */
int Radix64Decode(byte * inBuf, byte * outBuf, word * outLength) {
   15b64:	b580      	push	{r7, lr}
   15b66:	b0c8      	sub	sp, #288	; 0x120
   15b68:	af00      	add	r7, sp, #0
   15b6a:	f107 030c 	add.w	r3, r7, #12
   15b6e:	6018      	str	r0, [r3, #0]
   15b70:	f107 0308 	add.w	r3, r7, #8
   15b74:	6019      	str	r1, [r3, #0]
   15b76:	1d3b      	adds	r3, r7, #4
   15b78:	601a      	str	r2, [r3, #0]
   15b7a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15b7e:	f2c0 0302 	movt	r3, #2
   15b82:	681b      	ldr	r3, [r3, #0]
   15b84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	byte asctobin[256] = {
   15b88:	f107 021c 	add.w	r2, r7, #28
   15b8c:	f644 1334 	movw	r3, #18740	; 0x4934
   15b90:	f2c0 0302 	movt	r3, #2
   15b94:	4611      	mov	r1, r2
   15b96:	461a      	mov	r2, r3
   15b98:	f44f 7380 	mov.w	r3, #256	; 0x100
   15b9c:	4608      	mov	r0, r1
   15b9e:	4611      	mov	r1, r2
   15ba0:	461a      	mov	r2, r3
   15ba2:	f7f3 e86a 	blx	8c78 <_init+0x118>
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff
	};

	int idx = 0;
   15ba6:	f107 0314 	add.w	r3, r7, #20
   15baa:	2200      	movs	r2, #0
   15bac:	601a      	str	r2, [r3, #0]
	unsigned char c, c2, val = '\0';
   15bae:	f107 0312 	add.w	r3, r7, #18
   15bb2:	2200      	movs	r2, #0
   15bb4:	701a      	strb	r2, [r3, #0]
	int n = 0;
   15bb6:	f107 0318 	add.w	r3, r7, #24
   15bba:	2200      	movs	r2, #0
   15bbc:	601a      	str	r2, [r3, #0]

	for (idx = 0, c = *inBuf; c; c = *(++inBuf), idx = (idx + 1) % 4) {
   15bbe:	f107 0314 	add.w	r3, r7, #20
   15bc2:	2200      	movs	r2, #0
   15bc4:	601a      	str	r2, [r3, #0]
   15bc6:	f107 0311 	add.w	r3, r7, #17
   15bca:	f107 020c 	add.w	r2, r7, #12
   15bce:	6812      	ldr	r2, [r2, #0]
   15bd0:	7812      	ldrb	r2, [r2, #0]
   15bd2:	701a      	strb	r2, [r3, #0]
   15bd4:	e0fd      	b.n	15dd2 <Radix64Decode+0x26e>
		if(c == '\n' || c == ' ' || c == '\r' || c == '\t')
   15bd6:	f107 0311 	add.w	r3, r7, #17
   15bda:	781b      	ldrb	r3, [r3, #0]
   15bdc:	2b0a      	cmp	r3, #10
   15bde:	f000 80d8 	beq.w	15d92 <Radix64Decode+0x22e>
   15be2:	f107 0311 	add.w	r3, r7, #17
   15be6:	781b      	ldrb	r3, [r3, #0]
   15be8:	2b20      	cmp	r3, #32
   15bea:	f000 80d2 	beq.w	15d92 <Radix64Decode+0x22e>
   15bee:	f107 0311 	add.w	r3, r7, #17
   15bf2:	781b      	ldrb	r3, [r3, #0]
   15bf4:	2b0d      	cmp	r3, #13
   15bf6:	f000 80cc 	beq.w	15d92 <Radix64Decode+0x22e>
   15bfa:	f107 0311 	add.w	r3, r7, #17
   15bfe:	781b      	ldrb	r3, [r3, #0]
   15c00:	2b09      	cmp	r3, #9
   15c02:	f000 80c6 	beq.w	15d92 <Radix64Decode+0x22e>
			continue;

		if(c == '=') {          // pad character: stop
   15c06:	f107 0311 	add.w	r3, r7, #17
   15c0a:	781b      	ldrb	r3, [r3, #0]
   15c0c:	2b3d      	cmp	r3, #61	; 0x3d
   15c0e:	d118      	bne.n	15c42 <Radix64Decode+0xde>
			if(idx == 1)
   15c10:	f107 0314 	add.w	r3, r7, #20
   15c14:	681b      	ldr	r3, [r3, #0]
   15c16:	2b01      	cmp	r3, #1
   15c18:	f040 80e2 	bne.w	15de0 <Radix64Decode+0x27c>
				outBuf[n++] = val;
   15c1c:	f107 0318 	add.w	r3, r7, #24
   15c20:	681b      	ldr	r3, [r3, #0]
   15c22:	f107 0208 	add.w	r2, r7, #8
   15c26:	6812      	ldr	r2, [r2, #0]
   15c28:	18d3      	adds	r3, r2, r3
   15c2a:	f107 0212 	add.w	r2, r7, #18
   15c2e:	7812      	ldrb	r2, [r2, #0]
   15c30:	701a      	strb	r2, [r3, #0]
   15c32:	f107 0318 	add.w	r3, r7, #24
   15c36:	f107 0218 	add.w	r2, r7, #24
   15c3a:	6812      	ldr	r2, [r2, #0]
   15c3c:	3201      	adds	r2, #1
   15c3e:	601a      	str	r2, [r3, #0]
			break;
   15c40:	e0ce      	b.n	15de0 <Radix64Decode+0x27c>
		}

		if((c = asctobin[(c2 = c)]) == 255)
   15c42:	f107 0313 	add.w	r3, r7, #19
   15c46:	f107 0211 	add.w	r2, r7, #17
   15c4a:	7812      	ldrb	r2, [r2, #0]
   15c4c:	701a      	strb	r2, [r3, #0]
   15c4e:	f107 0313 	add.w	r3, r7, #19
   15c52:	781a      	ldrb	r2, [r3, #0]
   15c54:	f107 0311 	add.w	r3, r7, #17
   15c58:	f107 011c 	add.w	r1, r7, #28
   15c5c:	5c8a      	ldrb	r2, [r1, r2]
   15c5e:	701a      	strb	r2, [r3, #0]
   15c60:	f107 0311 	add.w	r3, r7, #17
   15c64:	781b      	ldrb	r3, [r3, #0]
   15c66:	2bff      	cmp	r3, #255	; 0xff
   15c68:	d102      	bne.n	15c70 <Radix64Decode+0x10c>
			return -1;
   15c6a:	f04f 33ff 	mov.w	r3, #4294967295
   15c6e:	e0c0      	b.n	15df2 <Radix64Decode+0x28e>
		//RadixError;

		switch (idx) {
   15c70:	f107 0314 	add.w	r3, r7, #20
   15c74:	681b      	ldr	r3, [r3, #0]
   15c76:	2b03      	cmp	r3, #3
   15c78:	f200 808c 	bhi.w	15d94 <Radix64Decode+0x230>
   15c7c:	a201      	add	r2, pc, #4	; (adr r2, 15c84 <Radix64Decode+0x120>)
   15c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15c82:	bf00      	nop
   15c84:	00015c95 	.word	0x00015c95
   15c88:	00015ca5 	.word	0x00015ca5
   15c8c:	00015cfb 	.word	0x00015cfb
   15c90:	00015d51 	.word	0x00015d51
		case 0:
			val = c << 2;
   15c94:	f107 0312 	add.w	r3, r7, #18
   15c98:	f107 0211 	add.w	r2, r7, #17
   15c9c:	7812      	ldrb	r2, [r2, #0]
   15c9e:	0092      	lsls	r2, r2, #2
   15ca0:	701a      	strb	r2, [r3, #0]
			break;
   15ca2:	e077      	b.n	15d94 <Radix64Decode+0x230>
		case 1:
			val |= (c >> 4) & 3;
   15ca4:	f107 0311 	add.w	r3, r7, #17
   15ca8:	781b      	ldrb	r3, [r3, #0]
   15caa:	091b      	lsrs	r3, r3, #4
   15cac:	b2db      	uxtb	r3, r3
   15cae:	b2db      	uxtb	r3, r3
   15cb0:	f003 0303 	and.w	r3, r3, #3
   15cb4:	b2da      	uxtb	r2, r3
   15cb6:	f107 0312 	add.w	r3, r7, #18
   15cba:	781b      	ldrb	r3, [r3, #0]
   15cbc:	4313      	orrs	r3, r2
   15cbe:	b2da      	uxtb	r2, r3
   15cc0:	f107 0312 	add.w	r3, r7, #18
   15cc4:	701a      	strb	r2, [r3, #0]
			outBuf[n++] = val;
   15cc6:	f107 0318 	add.w	r3, r7, #24
   15cca:	681b      	ldr	r3, [r3, #0]
   15ccc:	f107 0208 	add.w	r2, r7, #8
   15cd0:	6812      	ldr	r2, [r2, #0]
   15cd2:	18d3      	adds	r3, r2, r3
   15cd4:	f107 0212 	add.w	r2, r7, #18
   15cd8:	7812      	ldrb	r2, [r2, #0]
   15cda:	701a      	strb	r2, [r3, #0]
   15cdc:	f107 0318 	add.w	r3, r7, #24
   15ce0:	f107 0218 	add.w	r2, r7, #24
   15ce4:	6812      	ldr	r2, [r2, #0]
   15ce6:	3201      	adds	r2, #1
   15ce8:	601a      	str	r2, [r3, #0]
			val = (c << 4) & 0xf0;
   15cea:	f107 0311 	add.w	r3, r7, #17
   15cee:	781b      	ldrb	r3, [r3, #0]
   15cf0:	011a      	lsls	r2, r3, #4
   15cf2:	f107 0312 	add.w	r3, r7, #18
   15cf6:	701a      	strb	r2, [r3, #0]
			break;
   15cf8:	e04c      	b.n	15d94 <Radix64Decode+0x230>
		case 2:
			val |= (c >> 2) & 15;
   15cfa:	f107 0311 	add.w	r3, r7, #17
   15cfe:	781b      	ldrb	r3, [r3, #0]
   15d00:	089b      	lsrs	r3, r3, #2
   15d02:	b2db      	uxtb	r3, r3
   15d04:	b2db      	uxtb	r3, r3
   15d06:	f003 030f 	and.w	r3, r3, #15
   15d0a:	b2da      	uxtb	r2, r3
   15d0c:	f107 0312 	add.w	r3, r7, #18
   15d10:	781b      	ldrb	r3, [r3, #0]
   15d12:	4313      	orrs	r3, r2
   15d14:	b2da      	uxtb	r2, r3
   15d16:	f107 0312 	add.w	r3, r7, #18
   15d1a:	701a      	strb	r2, [r3, #0]
			outBuf[n++] = val;
   15d1c:	f107 0318 	add.w	r3, r7, #24
   15d20:	681b      	ldr	r3, [r3, #0]
   15d22:	f107 0208 	add.w	r2, r7, #8
   15d26:	6812      	ldr	r2, [r2, #0]
   15d28:	18d3      	adds	r3, r2, r3
   15d2a:	f107 0212 	add.w	r2, r7, #18
   15d2e:	7812      	ldrb	r2, [r2, #0]
   15d30:	701a      	strb	r2, [r3, #0]
   15d32:	f107 0318 	add.w	r3, r7, #24
   15d36:	f107 0218 	add.w	r2, r7, #24
   15d3a:	6812      	ldr	r2, [r2, #0]
   15d3c:	3201      	adds	r2, #1
   15d3e:	601a      	str	r2, [r3, #0]
			val = (c << 6) & 0xc0;
   15d40:	f107 0311 	add.w	r3, r7, #17
   15d44:	781b      	ldrb	r3, [r3, #0]
   15d46:	019a      	lsls	r2, r3, #6
   15d48:	f107 0312 	add.w	r3, r7, #18
   15d4c:	701a      	strb	r2, [r3, #0]
			break;
   15d4e:	e021      	b.n	15d94 <Radix64Decode+0x230>
		case 3:
			val |= c & 0x3f;
   15d50:	f107 0311 	add.w	r3, r7, #17
   15d54:	781b      	ldrb	r3, [r3, #0]
   15d56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15d5a:	b2da      	uxtb	r2, r3
   15d5c:	f107 0312 	add.w	r3, r7, #18
   15d60:	781b      	ldrb	r3, [r3, #0]
   15d62:	4313      	orrs	r3, r2
   15d64:	b2da      	uxtb	r2, r3
   15d66:	f107 0312 	add.w	r3, r7, #18
   15d6a:	701a      	strb	r2, [r3, #0]
			outBuf[n++] = val;
   15d6c:	f107 0318 	add.w	r3, r7, #24
   15d70:	681b      	ldr	r3, [r3, #0]
   15d72:	f107 0208 	add.w	r2, r7, #8
   15d76:	6812      	ldr	r2, [r2, #0]
   15d78:	18d3      	adds	r3, r2, r3
   15d7a:	f107 0212 	add.w	r2, r7, #18
   15d7e:	7812      	ldrb	r2, [r2, #0]
   15d80:	701a      	strb	r2, [r3, #0]
   15d82:	f107 0318 	add.w	r3, r7, #24
   15d86:	f107 0218 	add.w	r2, r7, #24
   15d8a:	6812      	ldr	r2, [r2, #0]
   15d8c:	3201      	adds	r2, #1
   15d8e:	601a      	str	r2, [r3, #0]
			break;
   15d90:	e000      	b.n	15d94 <Radix64Decode+0x230>
	unsigned char c, c2, val = '\0';
	int n = 0;

	for (idx = 0, c = *inBuf; c; c = *(++inBuf), idx = (idx + 1) % 4) {
		if(c == '\n' || c == ' ' || c == '\r' || c == '\t')
			continue;
   15d92:	bf00      	nop

	int idx = 0;
	unsigned char c, c2, val = '\0';
	int n = 0;

	for (idx = 0, c = *inBuf; c; c = *(++inBuf), idx = (idx + 1) % 4) {
   15d94:	f107 030c 	add.w	r3, r7, #12
   15d98:	f107 020c 	add.w	r2, r7, #12
   15d9c:	6812      	ldr	r2, [r2, #0]
   15d9e:	3201      	adds	r2, #1
   15da0:	601a      	str	r2, [r3, #0]
   15da2:	f107 0311 	add.w	r3, r7, #17
   15da6:	f107 020c 	add.w	r2, r7, #12
   15daa:	6812      	ldr	r2, [r2, #0]
   15dac:	7812      	ldrb	r2, [r2, #0]
   15dae:	701a      	strb	r2, [r3, #0]
   15db0:	f107 0314 	add.w	r3, r7, #20
   15db4:	681b      	ldr	r3, [r3, #0]
   15db6:	1c59      	adds	r1, r3, #1
   15db8:	f107 0214 	add.w	r2, r7, #20
   15dbc:	2303      	movs	r3, #3
   15dbe:	f2c8 0300 	movt	r3, #32768	; 0x8000
   15dc2:	400b      	ands	r3, r1
   15dc4:	2b00      	cmp	r3, #0
   15dc6:	da03      	bge.n	15dd0 <Radix64Decode+0x26c>
   15dc8:	3b01      	subs	r3, #1
   15dca:	f063 0303 	orn	r3, r3, #3
   15dce:	3301      	adds	r3, #1
   15dd0:	6013      	str	r3, [r2, #0]
   15dd2:	f107 0311 	add.w	r3, r7, #17
   15dd6:	781b      	ldrb	r3, [r3, #0]
   15dd8:	2b00      	cmp	r3, #0
   15dda:	f47f aefc 	bne.w	15bd6 <Radix64Decode+0x72>
   15dde:	e000      	b.n	15de2 <Radix64Decode+0x27e>
			continue;

		if(c == '=') {          // pad character: stop
			if(idx == 1)
				outBuf[n++] = val;
			break;
   15de0:	bf00      	nop
			outBuf[n++] = val;
			break;
		}

	}
	*outLength = n;
   15de2:	f107 0318 	add.w	r3, r7, #24
   15de6:	681b      	ldr	r3, [r3, #0]
   15de8:	b29a      	uxth	r2, r3
   15dea:	1d3b      	adds	r3, r7, #4
   15dec:	681b      	ldr	r3, [r3, #0]
   15dee:	801a      	strh	r2, [r3, #0]
	return 1;
   15df0:	2301      	movs	r3, #1
}
   15df2:	4618      	mov	r0, r3
   15df4:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15df8:	f2c0 0302 	movt	r3, #2
   15dfc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
   15e00:	681b      	ldr	r3, [r3, #0]
   15e02:	429a      	cmp	r2, r3
   15e04:	d001      	beq.n	15e0a <Radix64Decode+0x2a6>
   15e06:	f7f3 f8cd 	bl	8fa4 <__stack_chk_fail>
   15e0a:	f507 7790 	add.w	r7, r7, #288	; 0x120
   15e0e:	46bd      	mov	sp, r7
   15e10:	bd80      	pop	{r7, pc}
   15e12:	bf00      	nop

00015e14 <GetIndex>:
 * \param pString (I) The array where in the input character 'search'  is searched
 * \param search (O) The character to be searched
 * \returns the last character to be searched
 * \sa Source: pri\\std.c
 */
static int GetIndex(char *pString, char search) {
   15e14:	b580      	push	{r7, lr}
   15e16:	b084      	sub	sp, #16
   15e18:	af00      	add	r7, sp, #0
   15e1a:	6078      	str	r0, [r7, #4]
   15e1c:	460b      	mov	r3, r1
   15e1e:	70fb      	strb	r3, [r7, #3]
   15e20:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15e24:	f2c0 0302 	movt	r3, #2
   15e28:	681b      	ldr	r3, [r3, #0]
   15e2a:	60fb      	str	r3, [r7, #12]
	int index = 0;
   15e2c:	2300      	movs	r3, #0
   15e2e:	60bb      	str	r3, [r7, #8]

	while(*pString != (char) 0) //Loop will finish at null character if no match is found
   15e30:	e00a      	b.n	15e48 <GetIndex+0x34>
	{
		if(*pString == search)
   15e32:	687b      	ldr	r3, [r7, #4]
   15e34:	781b      	ldrb	r3, [r3, #0]
   15e36:	78fa      	ldrb	r2, [r7, #3]
   15e38:	429a      	cmp	r2, r3
   15e3a:	d00a      	beq.n	15e52 <GetIndex+0x3e>
			break;
		pString++;
   15e3c:	687b      	ldr	r3, [r7, #4]
   15e3e:	3301      	adds	r3, #1
   15e40:	607b      	str	r3, [r7, #4]
		index++;
   15e42:	68bb      	ldr	r3, [r7, #8]
   15e44:	3301      	adds	r3, #1
   15e46:	60bb      	str	r3, [r7, #8]
 * \sa Source: pri\\std.c
 */
static int GetIndex(char *pString, char search) {
	int index = 0;

	while(*pString != (char) 0) //Loop will finish at null character if no match is found
   15e48:	687b      	ldr	r3, [r7, #4]
   15e4a:	781b      	ldrb	r3, [r3, #0]
   15e4c:	2b00      	cmp	r3, #0
   15e4e:	d1f0      	bne.n	15e32 <GetIndex+0x1e>
   15e50:	e000      	b.n	15e54 <GetIndex+0x40>
	{
		if(*pString == search)
			break;
   15e52:	bf00      	nop
		pString++;
		index++;
	}
	return index;
   15e54:	68bb      	ldr	r3, [r7, #8]
}
   15e56:	4618      	mov	r0, r3
   15e58:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15e5c:	f2c0 0302 	movt	r3, #2
   15e60:	68fa      	ldr	r2, [r7, #12]
   15e62:	681b      	ldr	r3, [r3, #0]
   15e64:	429a      	cmp	r2, r3
   15e66:	d001      	beq.n	15e6c <GetIndex+0x58>
   15e68:	f7f3 f89c 	bl	8fa4 <__stack_chk_fail>
   15e6c:	f107 0710 	add.w	r7, r7, #16
   15e70:	46bd      	mov	sp, r7
   15e72:	bd80      	pop	{r7, pc}

00015e74 <BaseToDec>:
 * \returns the last character to be searched
 * \sa Header: pri\\pri.h
 * \sa Source: pri\\std.c
 * \test tcma0020.c
 */
int BaseToDec(char *number, card base) {
   15e74:	b5b0      	push	{r4, r5, r7, lr}
   15e76:	b092      	sub	sp, #72	; 0x48
   15e78:	af00      	add	r7, sp, #0
   15e7a:	6078      	str	r0, [r7, #4]
   15e7c:	6039      	str	r1, [r7, #0]
   15e7e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15e82:	f2c0 0302 	movt	r3, #2
   15e86:	681b      	ldr	r3, [r3, #0]
   15e88:	647b      	str	r3, [r7, #68]	; 0x44
	int NumLength;
	int PlaceValue = 1, total = 0;
   15e8a:	2301      	movs	r3, #1
   15e8c:	60bb      	str	r3, [r7, #8]
   15e8e:	2300      	movs	r3, #0
   15e90:	60fb      	str	r3, [r7, #12]

	//Symbols used to display a number correctly
	//Numbers over base 10 use letters to represent values over and equal to 10
	//It is able to increase the max no. of bases by adding other symbols

	char symbols[37] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
   15e92:	f644 2334 	movw	r3, #18996	; 0x4a34
   15e96:	f2c0 0302 	movt	r3, #2
   15e9a:	f107 041c 	add.w	r4, r7, #28
   15e9e:	461d      	mov	r5, r3
   15ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15ea8:	e895 0003 	ldmia.w	r5, {r0, r1}
   15eac:	6020      	str	r0, [r4, #0]
   15eae:	3404      	adds	r4, #4
   15eb0:	7021      	strb	r1, [r4, #0]
	const int MAX_BASE = 36;    //Highest base allowed (make sure there are enough symbols first!)
   15eb2:	2324      	movs	r3, #36	; 0x24
   15eb4:	617b      	str	r3, [r7, #20]

	if(base < 2 || base > (card) MAX_BASE)
   15eb6:	683b      	ldr	r3, [r7, #0]
   15eb8:	2b01      	cmp	r3, #1
   15eba:	d903      	bls.n	15ec4 <BaseToDec+0x50>
   15ebc:	697a      	ldr	r2, [r7, #20]
   15ebe:	683b      	ldr	r3, [r7, #0]
   15ec0:	429a      	cmp	r2, r3
   15ec2:	d201      	bcs.n	15ec8 <BaseToDec+0x54>
		return 0;               //Failed
   15ec4:	2300      	movs	r3, #0
   15ec6:	e037      	b.n	15f38 <BaseToDec+0xc4>

	NumLength = strlen(number);
   15ec8:	6878      	ldr	r0, [r7, #4]
   15eca:	f7f2 eedc 	blx	8c84 <_init+0x124>
   15ece:	4603      	mov	r3, r0
   15ed0:	61bb      	str	r3, [r7, #24]

	//Work out the place value of the first digit (base^length-1)
	for (i = 1; i < NumLength; i++) {
   15ed2:	2301      	movs	r3, #1
   15ed4:	613b      	str	r3, [r7, #16]
   15ed6:	e007      	b.n	15ee8 <BaseToDec+0x74>
		PlaceValue *= base;
   15ed8:	68bb      	ldr	r3, [r7, #8]
   15eda:	683a      	ldr	r2, [r7, #0]
   15edc:	fb02 f303 	mul.w	r3, r2, r3
   15ee0:	60bb      	str	r3, [r7, #8]
		return 0;               //Failed

	NumLength = strlen(number);

	//Work out the place value of the first digit (base^length-1)
	for (i = 1; i < NumLength; i++) {
   15ee2:	693b      	ldr	r3, [r7, #16]
   15ee4:	3301      	adds	r3, #1
   15ee6:	613b      	str	r3, [r7, #16]
   15ee8:	693a      	ldr	r2, [r7, #16]
   15eea:	69bb      	ldr	r3, [r7, #24]
   15eec:	429a      	cmp	r2, r3
   15eee:	dbf3      	blt.n	15ed8 <BaseToDec+0x64>
		PlaceValue *= base;
	}

	//For each digit, multiply by its place value and add to total
	for (i = 0; i < NumLength; i++) {
   15ef0:	2300      	movs	r3, #0
   15ef2:	613b      	str	r3, [r7, #16]
   15ef4:	e01b      	b.n	15f2e <BaseToDec+0xba>
		total += GetIndex(symbols, *number) * PlaceValue;
   15ef6:	687b      	ldr	r3, [r7, #4]
   15ef8:	781b      	ldrb	r3, [r3, #0]
   15efa:	f107 021c 	add.w	r2, r7, #28
   15efe:	4610      	mov	r0, r2
   15f00:	4619      	mov	r1, r3
   15f02:	f7ff ff87 	bl	15e14 <GetIndex>
   15f06:	4603      	mov	r3, r0
   15f08:	68ba      	ldr	r2, [r7, #8]
   15f0a:	fb02 f303 	mul.w	r3, r2, r3
   15f0e:	68fa      	ldr	r2, [r7, #12]
   15f10:	18d3      	adds	r3, r2, r3
   15f12:	60fb      	str	r3, [r7, #12]
		number++;
   15f14:	687b      	ldr	r3, [r7, #4]
   15f16:	3301      	adds	r3, #1
   15f18:	607b      	str	r3, [r7, #4]
		PlaceValue /= base;     //Next digit's place value (previous/base)
   15f1a:	68bb      	ldr	r3, [r7, #8]
   15f1c:	4618      	mov	r0, r3
   15f1e:	6839      	ldr	r1, [r7, #0]
   15f20:	f00c e9be 	blx	222a0 <__aeabi_uidiv>
   15f24:	4603      	mov	r3, r0
   15f26:	60bb      	str	r3, [r7, #8]
	for (i = 1; i < NumLength; i++) {
		PlaceValue *= base;
	}

	//For each digit, multiply by its place value and add to total
	for (i = 0; i < NumLength; i++) {
   15f28:	693b      	ldr	r3, [r7, #16]
   15f2a:	3301      	adds	r3, #1
   15f2c:	613b      	str	r3, [r7, #16]
   15f2e:	693a      	ldr	r2, [r7, #16]
   15f30:	69bb      	ldr	r3, [r7, #24]
   15f32:	429a      	cmp	r2, r3
   15f34:	dbdf      	blt.n	15ef6 <BaseToDec+0x82>
		total += GetIndex(symbols, *number) * PlaceValue;
		number++;
		PlaceValue /= base;     //Next digit's place value (previous/base)
	}
	return total;
   15f36:	68fb      	ldr	r3, [r7, #12]
}
   15f38:	4618      	mov	r0, r3
   15f3a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15f3e:	f2c0 0302 	movt	r3, #2
   15f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   15f44:	681b      	ldr	r3, [r3, #0]
   15f46:	429a      	cmp	r2, r3
   15f48:	d001      	beq.n	15f4e <BaseToDec+0xda>
   15f4a:	f7f3 f82b 	bl	8fa4 <__stack_chk_fail>
   15f4e:	f107 0748 	add.w	r7, r7, #72	; 0x48
   15f52:	46bd      	mov	sp, r7
   15f54:	bdb0      	pop	{r4, r5, r7, pc}
   15f56:	bf00      	nop

00015f58 <stdOWF>:
 * \return non-negative if OK.
 * \sa Header: sys\\sys.h
 * \sa Source: sys\\std.c
 * \test tcab0057.c
 */
int stdOWF(byte * dst, const byte * dat, const byte * key) {
   15f58:	b580      	push	{r7, lr}
   15f5a:	b08c      	sub	sp, #48	; 0x30
   15f5c:	af00      	add	r7, sp, #0
   15f5e:	60f8      	str	r0, [r7, #12]
   15f60:	60b9      	str	r1, [r7, #8]
   15f62:	607a      	str	r2, [r7, #4]
   15f64:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15f68:	f2c0 0302 	movt	r3, #2
   15f6c:	681b      	ldr	r3, [r3, #0]
   15f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	byte tmpK[8];
	byte tmpD[8];
	byte *owfX = (byte *) "\xA5\xC7\xB2\x82\x84\x76\xA8\x29";
   15f70:	f644 235c 	movw	r3, #19036	; 0x4a5c
   15f74:	f2c0 0302 	movt	r3, #2
   15f78:	617b      	str	r3, [r7, #20]
	byte *owfY = (byte *) "\xB5\xE3\x7F\xC5\xD4\xF7\xA3\x93";
   15f7a:	f644 2368 	movw	r3, #19048	; 0x4a68
   15f7e:	f2c0 0302 	movt	r3, #2
   15f82:	61bb      	str	r3, [r7, #24]

	xor(dat, owfX, tmpD, 8);
   15f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
   15f88:	68b8      	ldr	r0, [r7, #8]
   15f8a:	6979      	ldr	r1, [r7, #20]
   15f8c:	461a      	mov	r2, r3
   15f8e:	2308      	movs	r3, #8
   15f90:	f7ff f834 	bl	14ffc <xor>
	xor(key, owfY, tmpK, 8);
   15f94:	f107 031c 	add.w	r3, r7, #28
   15f98:	6878      	ldr	r0, [r7, #4]
   15f9a:	69b9      	ldr	r1, [r7, #24]
   15f9c:	461a      	mov	r2, r3
   15f9e:	2308      	movs	r3, #8
   15fa0:	f7ff f82c 	bl	14ffc <xor>
	stdParity(tmpK, 8, 8);
   15fa4:	f107 031c 	add.w	r3, r7, #28
   15fa8:	4618      	mov	r0, r3
   15faa:	2108      	movs	r1, #8
   15fac:	2208      	movs	r2, #8
   15fae:	f7ff f85d 	bl	1506c <stdParity>
	stdDES(dst, tmpD, tmpK);
   15fb2:	f107 0224 	add.w	r2, r7, #36	; 0x24
   15fb6:	f107 031c 	add.w	r3, r7, #28
   15fba:	68f8      	ldr	r0, [r7, #12]
   15fbc:	4611      	mov	r1, r2
   15fbe:	461a      	mov	r2, r3
   15fc0:	f7ff fb7c 	bl	156bc <stdDES>
	xor(dst, tmpD, dst, 8);
   15fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
   15fc8:	68f8      	ldr	r0, [r7, #12]
   15fca:	4619      	mov	r1, r3
   15fcc:	68fa      	ldr	r2, [r7, #12]
   15fce:	2308      	movs	r3, #8
   15fd0:	f7ff f814 	bl	14ffc <xor>
	return 1;
   15fd4:	2301      	movs	r3, #1
}
   15fd6:	4618      	mov	r0, r3
   15fd8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   15fdc:	f2c0 0302 	movt	r3, #2
   15fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15fe2:	681b      	ldr	r3, [r3, #0]
   15fe4:	429a      	cmp	r2, r3
   15fe6:	d001      	beq.n	15fec <stdOWF+0x94>
   15fe8:	f7f2 ffdc 	bl	8fa4 <__stack_chk_fail>
   15fec:	f107 0730 	add.w	r7, r7, #48	; 0x30
   15ff0:	46bd      	mov	sp, r7
   15ff2:	bd80      	pop	{r7, pc}

00015ff4 <date_to_jdn>:
 * Returns:
 *     Julian Day Number
 *
 * Reference: Section 2.16.1 of version 2.9 of the FAQ.
 */
static int date_to_jdn(int year, int month, int day) {
   15ff4:	b580      	push	{r7, lr}
   15ff6:	b088      	sub	sp, #32
   15ff8:	af00      	add	r7, sp, #0
   15ffa:	60f8      	str	r0, [r7, #12]
   15ffc:	60b9      	str	r1, [r7, #8]
   15ffe:	607a      	str	r2, [r7, #4]
   16000:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16004:	f2c0 0302 	movt	r3, #2
   16008:	681b      	ldr	r3, [r3, #0]
   1600a:	61fb      	str	r3, [r7, #28]
	int a = (14 - month) / 12;
   1600c:	68bb      	ldr	r3, [r7, #8]
   1600e:	f1c3 020e 	rsb	r2, r3, #14
   16012:	f64a 23ab 	movw	r3, #43691	; 0xaaab
   16016:	f6c2 23aa 	movt	r3, #10922	; 0x2aaa
   1601a:	fb83 0302 	smull	r0, r3, r3, r2
   1601e:	1059      	asrs	r1, r3, #1
   16020:	17d3      	asrs	r3, r2, #31
   16022:	1acb      	subs	r3, r1, r3
   16024:	613b      	str	r3, [r7, #16]
	int y = year + 4800 - a;
   16026:	68fb      	ldr	r3, [r7, #12]
   16028:	f503 5296 	add.w	r2, r3, #4800	; 0x12c0
   1602c:	693b      	ldr	r3, [r7, #16]
   1602e:	1ad3      	subs	r3, r2, r3
   16030:	617b      	str	r3, [r7, #20]
	int m = month + 12 * a - 3;
   16032:	693a      	ldr	r2, [r7, #16]
   16034:	4613      	mov	r3, r2
   16036:	005b      	lsls	r3, r3, #1
   16038:	189b      	adds	r3, r3, r2
   1603a:	009b      	lsls	r3, r3, #2
   1603c:	461a      	mov	r2, r3
   1603e:	68bb      	ldr	r3, [r7, #8]
   16040:	18d3      	adds	r3, r2, r3
   16042:	3b03      	subs	r3, #3
   16044:	61bb      	str	r3, [r7, #24]

	return day + (153 * m + 2) / 5 + y * 365 + y / 4 - y / 100 + y / 400 -
   16046:	69ba      	ldr	r2, [r7, #24]
   16048:	4613      	mov	r3, r2
   1604a:	00db      	lsls	r3, r3, #3
   1604c:	189b      	adds	r3, r3, r2
   1604e:	011a      	lsls	r2, r3, #4
   16050:	189b      	adds	r3, r3, r2
   16052:	1c9a      	adds	r2, r3, #2
   16054:	f246 6367 	movw	r3, #26215	; 0x6667
   16058:	f2c6 6366 	movt	r3, #26214	; 0x6666
   1605c:	fb83 1302 	smull	r1, r3, r3, r2
   16060:	1059      	asrs	r1, r3, #1
   16062:	17d3      	asrs	r3, r2, #31
   16064:	1aca      	subs	r2, r1, r3
   16066:	687b      	ldr	r3, [r7, #4]
   16068:	18d2      	adds	r2, r2, r3
   1606a:	697b      	ldr	r3, [r7, #20]
   1606c:	f240 116d 	movw	r1, #365	; 0x16d
   16070:	fb01 f303 	mul.w	r3, r1, r3
   16074:	18d2      	adds	r2, r2, r3
   16076:	697b      	ldr	r3, [r7, #20]
   16078:	2b00      	cmp	r3, #0
   1607a:	da00      	bge.n	1607e <date_to_jdn+0x8a>
   1607c:	3303      	adds	r3, #3
   1607e:	109b      	asrs	r3, r3, #2
   16080:	18d1      	adds	r1, r2, r3
   16082:	697a      	ldr	r2, [r7, #20]
   16084:	f248 531f 	movw	r3, #34079	; 0x851f
   16088:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1608c:	fb83 0302 	smull	r0, r3, r3, r2
   16090:	1158      	asrs	r0, r3, #5
   16092:	17d3      	asrs	r3, r2, #31
   16094:	1ac3      	subs	r3, r0, r3
   16096:	1ac9      	subs	r1, r1, r3
   16098:	697a      	ldr	r2, [r7, #20]
   1609a:	f248 531f 	movw	r3, #34079	; 0x851f
   1609e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   160a2:	fb83 0302 	smull	r0, r3, r3, r2
   160a6:	11d8      	asrs	r0, r3, #7
   160a8:	17d3      	asrs	r3, r2, #31
   160aa:	1ac3      	subs	r3, r0, r3
   160ac:	18cb      	adds	r3, r1, r3
   160ae:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
   160b2:	3b2d      	subs	r3, #45	; 0x2d
			32045;
}
   160b4:	4618      	mov	r0, r3
   160b6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   160ba:	f2c0 0302 	movt	r3, #2
   160be:	69fa      	ldr	r2, [r7, #28]
   160c0:	681b      	ldr	r3, [r3, #0]
   160c2:	429a      	cmp	r2, r3
   160c4:	d001      	beq.n	160ca <date_to_jdn+0xd6>
   160c6:	f7f2 ff6d 	bl	8fa4 <__stack_chk_fail>
   160ca:	f107 0720 	add.w	r7, r7, #32
   160ce:	46bd      	mov	sp, r7
   160d0:	bd80      	pop	{r7, pc}
   160d2:	bf00      	nop

000160d4 <jdn_to_date>:
 *     Address of month (1..12)
 *     Address of day (1..31)
 *
 * Reference: Section 2.16.1 of version 2.9 of the FAQ.
 */
static void jdn_to_date(int JD, int *year, int *month, int *day) {
   160d4:	b580      	push	{r7, lr}
   160d6:	b08c      	sub	sp, #48	; 0x30
   160d8:	af00      	add	r7, sp, #0
   160da:	60f8      	str	r0, [r7, #12]
   160dc:	60b9      	str	r1, [r7, #8]
   160de:	607a      	str	r2, [r7, #4]
   160e0:	603b      	str	r3, [r7, #0]
   160e2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   160e6:	f2c0 0302 	movt	r3, #2
   160ea:	681b      	ldr	r3, [r3, #0]
   160ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	int a, b, c, d, e, m;

	a = JD + 32044;
   160ee:	68fb      	ldr	r3, [r7, #12]
   160f0:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
   160f4:	332c      	adds	r3, #44	; 0x2c
   160f6:	617b      	str	r3, [r7, #20]
	b = (4 * a + 3) / 146097;
   160f8:	697b      	ldr	r3, [r7, #20]
   160fa:	009b      	lsls	r3, r3, #2
   160fc:	1cda      	adds	r2, r3, #3
   160fe:	f240 63bd 	movw	r3, #1725	; 0x6bd
   16102:	f6c3 136b 	movt	r3, #14699	; 0x396b
   16106:	fb83 0302 	smull	r0, r3, r3, r2
   1610a:	13d9      	asrs	r1, r3, #15
   1610c:	17d3      	asrs	r3, r2, #31
   1610e:	1acb      	subs	r3, r1, r3
   16110:	61bb      	str	r3, [r7, #24]
	c = a - (b * 146097) / 4;
   16112:	69ba      	ldr	r2, [r7, #24]
   16114:	f643 23b1 	movw	r3, #15025	; 0x3ab1
   16118:	f2c0 0302 	movt	r3, #2
   1611c:	fb03 f302 	mul.w	r3, r3, r2
   16120:	2b00      	cmp	r3, #0
   16122:	da00      	bge.n	16126 <jdn_to_date+0x52>
   16124:	3303      	adds	r3, #3
   16126:	109b      	asrs	r3, r3, #2
   16128:	697a      	ldr	r2, [r7, #20]
   1612a:	1ad3      	subs	r3, r2, r3
   1612c:	61fb      	str	r3, [r7, #28]

	d = (4 * c + 3) / 1461;
   1612e:	69fb      	ldr	r3, [r7, #28]
   16130:	009b      	lsls	r3, r3, #2
   16132:	1cda      	adds	r2, r3, #3
   16134:	f24b 0373 	movw	r3, #45171	; 0xb073
   16138:	f2c1 636d 	movt	r3, #5741	; 0x166d
   1613c:	fb83 1302 	smull	r1, r3, r3, r2
   16140:	11d9      	asrs	r1, r3, #7
   16142:	17d3      	asrs	r3, r2, #31
   16144:	1acb      	subs	r3, r1, r3
   16146:	623b      	str	r3, [r7, #32]
	e = c - (1461 * d) / 4;
   16148:	6a3b      	ldr	r3, [r7, #32]
   1614a:	f240 52b5 	movw	r2, #1461	; 0x5b5
   1614e:	fb02 f303 	mul.w	r3, r2, r3
   16152:	2b00      	cmp	r3, #0
   16154:	da00      	bge.n	16158 <jdn_to_date+0x84>
   16156:	3303      	adds	r3, #3
   16158:	109b      	asrs	r3, r3, #2
   1615a:	69fa      	ldr	r2, [r7, #28]
   1615c:	1ad3      	subs	r3, r2, r3
   1615e:	627b      	str	r3, [r7, #36]	; 0x24
	m = (5 * e + 2) / 153;
   16160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16162:	4613      	mov	r3, r2
   16164:	009b      	lsls	r3, r3, #2
   16166:	189b      	adds	r3, r3, r2
   16168:	3302      	adds	r3, #2
   1616a:	f248 02d7 	movw	r2, #32983	; 0x80d7
   1616e:	f2cd 622b 	movt	r2, #54827	; 0xd62b
   16172:	fb82 0203 	smull	r0, r2, r2, r3
   16176:	18d2      	adds	r2, r2, r3
   16178:	11d2      	asrs	r2, r2, #7
   1617a:	17db      	asrs	r3, r3, #31
   1617c:	1ad3      	subs	r3, r2, r3
   1617e:	62bb      	str	r3, [r7, #40]	; 0x28

	*day = e - (153 * m + 2) / 5 + 1;
   16180:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16182:	4613      	mov	r3, r2
   16184:	00db      	lsls	r3, r3, #3
   16186:	189b      	adds	r3, r3, r2
   16188:	011a      	lsls	r2, r3, #4
   1618a:	189b      	adds	r3, r3, r2
   1618c:	1c9a      	adds	r2, r3, #2
   1618e:	f246 6367 	movw	r3, #26215	; 0x6667
   16192:	f2c6 6366 	movt	r3, #26214	; 0x6666
   16196:	fb83 1302 	smull	r1, r3, r3, r2
   1619a:	1059      	asrs	r1, r3, #1
   1619c:	17d3      	asrs	r3, r2, #31
   1619e:	1acb      	subs	r3, r1, r3
   161a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   161a2:	1ad3      	subs	r3, r2, r3
   161a4:	1c5a      	adds	r2, r3, #1
   161a6:	683b      	ldr	r3, [r7, #0]
   161a8:	601a      	str	r2, [r3, #0]
	*month = m + 3 - 12 * (m / 10);
   161aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   161ac:	1cd9      	adds	r1, r3, #3
   161ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
   161b0:	f246 6367 	movw	r3, #26215	; 0x6667
   161b4:	f2c6 6366 	movt	r3, #26214	; 0x6666
   161b8:	fb83 0302 	smull	r0, r3, r3, r2
   161bc:	1098      	asrs	r0, r3, #2
   161be:	17d3      	asrs	r3, r2, #31
   161c0:	1ac2      	subs	r2, r0, r3
   161c2:	4613      	mov	r3, r2
   161c4:	0092      	lsls	r2, r2, #2
   161c6:	1a9b      	subs	r3, r3, r2
   161c8:	009b      	lsls	r3, r3, #2
   161ca:	18ca      	adds	r2, r1, r3
   161cc:	687b      	ldr	r3, [r7, #4]
   161ce:	601a      	str	r2, [r3, #0]
	*year = b * 100 + d - 4800 + m / 10;
   161d0:	69bb      	ldr	r3, [r7, #24]
   161d2:	2264      	movs	r2, #100	; 0x64
   161d4:	fb02 f203 	mul.w	r2, r2, r3
   161d8:	6a3b      	ldr	r3, [r7, #32]
   161da:	18d3      	adds	r3, r2, r3
   161dc:	f5a3 5196 	sub.w	r1, r3, #4800	; 0x12c0
   161e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   161e2:	f246 6367 	movw	r3, #26215	; 0x6667
   161e6:	f2c6 6366 	movt	r3, #26214	; 0x6666
   161ea:	fb83 0302 	smull	r0, r3, r3, r2
   161ee:	1098      	asrs	r0, r3, #2
   161f0:	17d3      	asrs	r3, r2, #31
   161f2:	1ac3      	subs	r3, r0, r3
   161f4:	18ca      	adds	r2, r1, r3
   161f6:	68bb      	ldr	r3, [r7, #8]
   161f8:	601a      	str	r2, [r3, #0]
}
   161fa:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   161fe:	f2c0 0302 	movt	r3, #2
   16202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16204:	681b      	ldr	r3, [r3, #0]
   16206:	429a      	cmp	r2, r3
   16208:	d001      	beq.n	1620e <jdn_to_date+0x13a>
   1620a:	f7f2 fecb 	bl	8fa4 <__stack_chk_fail>
   1620e:	f107 0730 	add.w	r7, r7, #48	; 0x30
   16212:	46bd      	mov	sp, r7
   16214:	bd80      	pop	{r7, pc}
   16216:	bf00      	nop

00016218 <ts2dt>:
 * \header sys\\pri.h
 * \source sys\\std.c
 * \test tcmp0000.c
 *
 */
void ts2dt(card ts, char *YYMMDDhhmmss) {
   16218:	b590      	push	{r4, r7, lr}
   1621a:	b097      	sub	sp, #92	; 0x5c
   1621c:	af04      	add	r7, sp, #16
   1621e:	6078      	str	r0, [r7, #4]
   16220:	6039      	str	r1, [r7, #0]
   16222:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16226:	f2c0 0302 	movt	r3, #2
   1622a:	681b      	ldr	r3, [r3, #0]
   1622c:	647b      	str	r3, [r7, #68]	; 0x44
	card jdnUnix = 2440588;     //julian day number for 01/01/1970
   1622e:	f643 538c 	movw	r3, #15756	; 0x3d8c
   16232:	f2c0 0325 	movt	r3, #37	; 0x25
   16236:	61bb      	str	r3, [r7, #24]
	card spm = 60;              //seconds per minute
   16238:	233c      	movs	r3, #60	; 0x3c
   1623a:	61fb      	str	r3, [r7, #28]
	card mph = 60;              //minutes per hour
   1623c:	233c      	movs	r3, #60	; 0x3c
   1623e:	623b      	str	r3, [r7, #32]
	card hpd = 24;              //hours per day
   16240:	2318      	movs	r3, #24
   16242:	627b      	str	r3, [r7, #36]	; 0x24
	card sph = spm * mph;       //seconds per hour
   16244:	69fb      	ldr	r3, [r7, #28]
   16246:	6a3a      	ldr	r2, [r7, #32]
   16248:	fb02 f303 	mul.w	r3, r2, r3
   1624c:	62bb      	str	r3, [r7, #40]	; 0x28
	card spd = sph * hpd;       //seconds per day
   1624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16252:	fb02 f303 	mul.w	r3, r2, r3
   16256:	62fb      	str	r3, [r7, #44]	; 0x2c
	card days, secs;
	int Y = 0;
   16258:	2300      	movs	r3, #0
   1625a:	60fb      	str	r3, [r7, #12]
	int M = 0;
   1625c:	2300      	movs	r3, #0
   1625e:	613b      	str	r3, [r7, #16]
	int Da = 0;
   16260:	2300      	movs	r3, #0
   16262:	617b      	str	r3, [r7, #20]
	int h = 0;
   16264:	2300      	movs	r3, #0
   16266:	633b      	str	r3, [r7, #48]	; 0x30
	int m = 0;
   16268:	2300      	movs	r3, #0
   1626a:	637b      	str	r3, [r7, #52]	; 0x34
	int s = 0;
   1626c:	2300      	movs	r3, #0
   1626e:	63bb      	str	r3, [r7, #56]	; 0x38

	VERIFY(YYMMDDhhmmss);
	days = ts / spd;            //number of days since 01/01/1970
   16270:	6878      	ldr	r0, [r7, #4]
   16272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   16274:	f00c e814 	blx	222a0 <__aeabi_uidiv>
   16278:	4603      	mov	r3, r0
   1627a:	63fb      	str	r3, [r7, #60]	; 0x3c
	secs = ts % spd;            //number of seconds since midnight
   1627c:	687b      	ldr	r3, [r7, #4]
   1627e:	4618      	mov	r0, r3
   16280:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   16282:	f00c e904 	blx	2248c <__aeabi_uidivmod>
   16286:	460b      	mov	r3, r1
   16288:	643b      	str	r3, [r7, #64]	; 0x40

	jdn_to_date(jdnUnix + days, &Y, &M, &Da);
   1628a:	69ba      	ldr	r2, [r7, #24]
   1628c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1628e:	18d3      	adds	r3, r2, r3
   16290:	4618      	mov	r0, r3
   16292:	f107 010c 	add.w	r1, r7, #12
   16296:	f107 0210 	add.w	r2, r7, #16
   1629a:	f107 0314 	add.w	r3, r7, #20
   1629e:	f7ff ff19 	bl	160d4 <jdn_to_date>
	h = secs / sph;
   162a2:	6c38      	ldr	r0, [r7, #64]	; 0x40
   162a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   162a6:	f00b effc 	blx	222a0 <__aeabi_uidiv>
   162aa:	4603      	mov	r3, r0
   162ac:	633b      	str	r3, [r7, #48]	; 0x30
	secs %= sph;
   162ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   162b0:	4618      	mov	r0, r3
   162b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   162b4:	f00c e8ea 	blx	2248c <__aeabi_uidivmod>
   162b8:	460b      	mov	r3, r1
   162ba:	643b      	str	r3, [r7, #64]	; 0x40
	m = secs / spm;
   162bc:	6c38      	ldr	r0, [r7, #64]	; 0x40
   162be:	69f9      	ldr	r1, [r7, #28]
   162c0:	f00b efee 	blx	222a0 <__aeabi_uidiv>
   162c4:	4603      	mov	r3, r0
   162c6:	637b      	str	r3, [r7, #52]	; 0x34
	s = secs % spm;
   162c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   162ca:	4618      	mov	r0, r3
   162cc:	69f9      	ldr	r1, [r7, #28]
   162ce:	f00c e8de 	blx	2248c <__aeabi_uidivmod>
   162d2:	460b      	mov	r3, r1
   162d4:	63bb      	str	r3, [r7, #56]	; 0x38

	Telium_Sprintf(YYMMDDhhmmss, "%02d%02d%02d%02d%02d%02d", Y % 100, M, Da, h, m, s);
   162d6:	68fa      	ldr	r2, [r7, #12]
   162d8:	f248 531f 	movw	r3, #34079	; 0x851f
   162dc:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   162e0:	fb83 1302 	smull	r1, r3, r3, r2
   162e4:	1159      	asrs	r1, r3, #5
   162e6:	17d3      	asrs	r3, r2, #31
   162e8:	1acb      	subs	r3, r1, r3
   162ea:	2164      	movs	r1, #100	; 0x64
   162ec:	fb01 f303 	mul.w	r3, r1, r3
   162f0:	1ad3      	subs	r3, r2, r3
   162f2:	693c      	ldr	r4, [r7, #16]
   162f4:	697a      	ldr	r2, [r7, #20]
   162f6:	9200      	str	r2, [sp, #0]
   162f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   162fa:	9201      	str	r2, [sp, #4]
   162fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   162fe:	9202      	str	r2, [sp, #8]
   16300:	6bba      	ldr	r2, [r7, #56]	; 0x38
   16302:	9203      	str	r2, [sp, #12]
   16304:	6838      	ldr	r0, [r7, #0]
   16306:	f644 2174 	movw	r1, #19060	; 0x4a74
   1630a:	f2c0 0102 	movt	r1, #2
   1630e:	461a      	mov	r2, r3
   16310:	4623      	mov	r3, r4
   16312:	f00a fa73 	bl	207fc <Telium_Sprintf>

}
   16316:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1631a:	f2c0 0302 	movt	r3, #2
   1631e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   16320:	681b      	ldr	r3, [r3, #0]
   16322:	429a      	cmp	r2, r3
   16324:	d001      	beq.n	1632a <ts2dt+0x112>
   16326:	f7f2 fe3d 	bl	8fa4 <__stack_chk_fail>
   1632a:	f107 074c 	add.w	r7, r7, #76	; 0x4c
   1632e:	46bd      	mov	sp, r7
   16330:	bd90      	pop	{r4, r7, pc}
   16332:	bf00      	nop

00016334 <dt2ts>:
 * \header sys\\pri.h
 * \source sys\\std.c
 * \test tcmp0000.c
 *
 */
card dt2ts(const char *YYMMDDhhmmss) {
   16334:	b580      	push	{r7, lr}
   16336:	b094      	sub	sp, #80	; 0x50
   16338:	af00      	add	r7, sp, #0
   1633a:	6078      	str	r0, [r7, #4]
   1633c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16340:	f2c0 0302 	movt	r3, #2
   16344:	681b      	ldr	r3, [r3, #0]
   16346:	64fb      	str	r3, [r7, #76]	; 0x4c
	int ret;
	card Y, M, Da, h, m, s;
	card days, secs;
	const char *ptr;
	card jdnUnix = 2440588;     //julian day number for 01/01/1970
   16348:	f643 538c 	movw	r3, #15756	; 0x3d8c
   1634c:	f2c0 0325 	movt	r3, #37	; 0x25
   16350:	627b      	str	r3, [r7, #36]	; 0x24
	card spm = 60;              //seconds per minute
   16352:	233c      	movs	r3, #60	; 0x3c
   16354:	62bb      	str	r3, [r7, #40]	; 0x28
	card mph = 60;              //minutes per hour
   16356:	233c      	movs	r3, #60	; 0x3c
   16358:	62fb      	str	r3, [r7, #44]	; 0x2c
	card hpd = 24;              //hours per day
   1635a:	2318      	movs	r3, #24
   1635c:	633b      	str	r3, [r7, #48]	; 0x30
	card sph = spm * mph;       //seconds per hour
   1635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16362:	fb02 f303 	mul.w	r3, r2, r3
   16366:	637b      	str	r3, [r7, #52]	; 0x34
	card spd = sph * hpd;       //seconds per day
   16368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1636a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1636c:	fb02 f303 	mul.w	r3, r2, r3
   16370:	63bb      	str	r3, [r7, #56]	; 0x38

	VERIFY(YYMMDDhhmmss);

	ptr = YYMMDDhhmmss;
   16372:	687b      	ldr	r3, [r7, #4]
   16374:	63fb      	str	r3, [r7, #60]	; 0x3c
	dec2num(&Y, ptr, 2);
   16376:	f107 030c 	add.w	r3, r7, #12
   1637a:	4618      	mov	r0, r3
   1637c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1637e:	2202      	movs	r2, #2
   16380:	f7fc fa56 	bl	12830 <dec2num>
	ptr += 2;
   16384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16386:	3302      	adds	r3, #2
   16388:	63fb      	str	r3, [r7, #60]	; 0x3c
	dec2num(&M, ptr, 2);
   1638a:	f107 0310 	add.w	r3, r7, #16
   1638e:	4618      	mov	r0, r3
   16390:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   16392:	2202      	movs	r2, #2
   16394:	f7fc fa4c 	bl	12830 <dec2num>
	ptr += 2;
   16398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1639a:	3302      	adds	r3, #2
   1639c:	63fb      	str	r3, [r7, #60]	; 0x3c
	dec2num(&Da, ptr, 2);
   1639e:	f107 0314 	add.w	r3, r7, #20
   163a2:	4618      	mov	r0, r3
   163a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   163a6:	2202      	movs	r2, #2
   163a8:	f7fc fa42 	bl	12830 <dec2num>
	ptr += 2;
   163ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   163ae:	3302      	adds	r3, #2
   163b0:	63fb      	str	r3, [r7, #60]	; 0x3c
	dec2num(&h, ptr, 2);
   163b2:	f107 0318 	add.w	r3, r7, #24
   163b6:	4618      	mov	r0, r3
   163b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   163ba:	2202      	movs	r2, #2
   163bc:	f7fc fa38 	bl	12830 <dec2num>
	ptr += 2;
   163c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   163c2:	3302      	adds	r3, #2
   163c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	dec2num(&m, ptr, 2);
   163c6:	f107 031c 	add.w	r3, r7, #28
   163ca:	4618      	mov	r0, r3
   163cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   163ce:	2202      	movs	r2, #2
   163d0:	f7fc fa2e 	bl	12830 <dec2num>
	ptr += 2;
   163d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   163d6:	3302      	adds	r3, #2
   163d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	dec2num(&s, ptr, 2);
   163da:	f107 0320 	add.w	r3, r7, #32
   163de:	4618      	mov	r0, r3
   163e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   163e2:	2202      	movs	r2, #2
   163e4:	f7fc fa24 	bl	12830 <dec2num>

	if(Y > 70)
   163e8:	68fb      	ldr	r3, [r7, #12]
   163ea:	2b46      	cmp	r3, #70	; 0x46
   163ec:	d904      	bls.n	163f8 <dt2ts+0xc4>
		Y += 1900;
   163ee:	68fb      	ldr	r3, [r7, #12]
   163f0:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   163f4:	60fb      	str	r3, [r7, #12]
   163f6:	e003      	b.n	16400 <dt2ts+0xcc>
	else
		Y += 2000;
   163f8:	68fb      	ldr	r3, [r7, #12]
   163fa:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
   163fe:	60fb      	str	r3, [r7, #12]
	days = date_to_jdn(Y, M, Da);
   16400:	68fb      	ldr	r3, [r7, #12]
   16402:	4619      	mov	r1, r3
   16404:	693b      	ldr	r3, [r7, #16]
   16406:	461a      	mov	r2, r3
   16408:	697b      	ldr	r3, [r7, #20]
   1640a:	4608      	mov	r0, r1
   1640c:	4611      	mov	r1, r2
   1640e:	461a      	mov	r2, r3
   16410:	f7ff fdf0 	bl	15ff4 <date_to_jdn>
   16414:	4603      	mov	r3, r0
   16416:	643b      	str	r3, [r7, #64]	; 0x40
	VERIFY(days >= jdnUnix);
	days -= jdnUnix;
   16418:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1641c:	1ad3      	subs	r3, r2, r3
   1641e:	643b      	str	r3, [r7, #64]	; 0x40
	secs = s + m * spm + h * sph;
   16420:	69fb      	ldr	r3, [r7, #28]
   16422:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16424:	fb02 f203 	mul.w	r2, r2, r3
   16428:	69bb      	ldr	r3, [r7, #24]
   1642a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1642c:	fb01 f303 	mul.w	r3, r1, r3
   16430:	18d2      	adds	r2, r2, r3
   16432:	6a3b      	ldr	r3, [r7, #32]
   16434:	18d3      	adds	r3, r2, r3
   16436:	647b      	str	r3, [r7, #68]	; 0x44
	ret = days * spd + secs;
   16438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1643a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1643c:	fb02 f203 	mul.w	r2, r2, r3
   16440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16442:	18d3      	adds	r3, r2, r3
   16444:	64bb      	str	r3, [r7, #72]	; 0x48

	return ret;
   16446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
   16448:	4618      	mov	r0, r3
   1644a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1644e:	f2c0 0302 	movt	r3, #2
   16452:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   16454:	681b      	ldr	r3, [r3, #0]
   16456:	429a      	cmp	r2, r3
   16458:	d001      	beq.n	1645e <dt2ts+0x12a>
   1645a:	f7f2 fda3 	bl	8fa4 <__stack_chk_fail>
   1645e:	f107 0750 	add.w	r7, r7, #80	; 0x50
   16462:	46bd      	mov	sp, r7
   16464:	bd80      	pop	{r7, pc}
   16466:	bf00      	nop

00016468 <count_chars>:
 * This function counts the number occurrence of certain characters in a string
 * @param string
 * @param ch
 * @return the counts
 */
int count_chars(const char* string, char ch){
   16468:	b580      	push	{r7, lr}
   1646a:	b086      	sub	sp, #24
   1646c:	af00      	add	r7, sp, #0
   1646e:	6078      	str	r0, [r7, #4]
   16470:	460b      	mov	r3, r1
   16472:	70fb      	strb	r3, [r7, #3]
   16474:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16478:	f2c0 0302 	movt	r3, #2
   1647c:	681b      	ldr	r3, [r3, #0]
   1647e:	617b      	str	r3, [r7, #20]
	int count = 0;
   16480:	2300      	movs	r3, #0
   16482:	60bb      	str	r3, [r7, #8]

	// We are computing the length once at this point
	// because it is a relatively lengthy operation,
	// and we don't want to have to compute it anew
	// every time the i < length condition is checked.
	int length = strlen(string);
   16484:	6878      	ldr	r0, [r7, #4]
   16486:	f7f2 ebfe 	blx	8c84 <_init+0x124>
   1648a:	4603      	mov	r3, r0
   1648c:	613b      	str	r3, [r7, #16]

	for (i = 0; i < length; i++) {
   1648e:	2300      	movs	r3, #0
   16490:	60fb      	str	r3, [r7, #12]
   16492:	e00c      	b.n	164ae <count_chars+0x46>
		if (string[i] == ch) {
   16494:	68fb      	ldr	r3, [r7, #12]
   16496:	687a      	ldr	r2, [r7, #4]
   16498:	18d3      	adds	r3, r2, r3
   1649a:	781b      	ldrb	r3, [r3, #0]
   1649c:	78fa      	ldrb	r2, [r7, #3]
   1649e:	429a      	cmp	r2, r3
   164a0:	d102      	bne.n	164a8 <count_chars+0x40>
			count++;
   164a2:	68bb      	ldr	r3, [r7, #8]
   164a4:	3301      	adds	r3, #1
   164a6:	60bb      	str	r3, [r7, #8]
	// because it is a relatively lengthy operation,
	// and we don't want to have to compute it anew
	// every time the i < length condition is checked.
	int length = strlen(string);

	for (i = 0; i < length; i++) {
   164a8:	68fb      	ldr	r3, [r7, #12]
   164aa:	3301      	adds	r3, #1
   164ac:	60fb      	str	r3, [r7, #12]
   164ae:	68fa      	ldr	r2, [r7, #12]
   164b0:	693b      	ldr	r3, [r7, #16]
   164b2:	429a      	cmp	r2, r3
   164b4:	dbee      	blt.n	16494 <count_chars+0x2c>
		if (string[i] == ch) {
			count++;
		}
	}

	return count;
   164b6:	68bb      	ldr	r3, [r7, #8]
}
   164b8:	4618      	mov	r0, r3
   164ba:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   164be:	f2c0 0302 	movt	r3, #2
   164c2:	697a      	ldr	r2, [r7, #20]
   164c4:	681b      	ldr	r3, [r3, #0]
   164c6:	429a      	cmp	r2, r3
   164c8:	d001      	beq.n	164ce <count_chars+0x66>
   164ca:	f7f2 fd6b 	bl	8fa4 <__stack_chk_fail>
   164ce:	f107 0718 	add.w	r7, r7, #24
   164d2:	46bd      	mov	sp, r7
   164d4:	bd80      	pop	{r7, pc}
   164d6:	bf00      	nop

000164d8 <begKey>:
 *  - negative if the input key is out of space
 *
 * Used by other map functions to identify a data structure which the
 * data element belongs to
 */
int begKey(word key){ //find starting sentinel of key subspace
   164d8:	b580      	push	{r7, lr}
   164da:	b084      	sub	sp, #16
   164dc:	af00      	add	r7, sp, #0
   164de:	4603      	mov	r3, r0
   164e0:	80fb      	strh	r3, [r7, #6]
   164e2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   164e6:	f2c0 0302 	movt	r3, #2
   164ea:	681b      	ldr	r3, [r3, #0]
   164ec:	60fb      	str	r3, [r7, #12]
	if(isSorted(appBeg,key,appEnd)) return appBeg; //application parameters record
   164ee:	88fb      	ldrh	r3, [r7, #6]
   164f0:	2001      	movs	r0, #1
   164f2:	4619      	mov	r1, r3
   164f4:	2220      	movs	r2, #32
   164f6:	f7fe f91d 	bl	14734 <isSorted>
   164fa:	4603      	mov	r3, r0
   164fc:	2b00      	cmp	r3, #0
   164fe:	d001      	beq.n	16504 <begKey+0x2c>
   16500:	2301      	movs	r3, #1
   16502:	e001      	b.n	16508 <begKey+0x30>
	//    if(isSorted(rptBeg,key,rptEnd)) return rptBeg; //receipt formatting strings
	//    if(isSorted(scrBeg,key,scrEnd)) return scrBeg; //user screen structure
	//    if(isSorted(regBeg,key,regEnd)) return regBeg; //registry record
	//	if(isSorted(traBeg,key,traEnd)) return traBeg; //transaction related data situated in volatile memory
	//	if(isSorted(emvBeg,key,emvEnd)) return emvBeg; //Get Data from the database Emv SQLITE table
	return -1;
   16504:	f04f 33ff 	mov.w	r3, #4294967295
}
   16508:	4618      	mov	r0, r3
   1650a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1650e:	f2c0 0302 	movt	r3, #2
   16512:	68fa      	ldr	r2, [r7, #12]
   16514:	681b      	ldr	r3, [r3, #0]
   16516:	429a      	cmp	r2, r3
   16518:	d001      	beq.n	1651e <begKey+0x46>
   1651a:	f7f2 fd43 	bl	8fa4 <__stack_chk_fail>
   1651e:	f107 0710 	add.w	r7, r7, #16
   16522:	46bd      	mov	sp, r7
   16524:	bd80      	pop	{r7, pc}
   16526:	bf00      	nop

00016528 <mapGet>:
 *  - mapRecGet()
 *  - mapPut()
 *  - mapMove()
 */
int beg;
int mapGet(word key,void *ptr,word len){
   16528:	b580      	push	{r7, lr}
   1652a:	b084      	sub	sp, #16
   1652c:	af00      	add	r7, sp, #0
   1652e:	6039      	str	r1, [r7, #0]
   16530:	4613      	mov	r3, r2
   16532:	4602      	mov	r2, r0
   16534:	80fa      	strh	r2, [r7, #6]
   16536:	80bb      	strh	r3, [r7, #4]
   16538:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1653c:	f2c0 0302 	movt	r3, #2
   16540:	681b      	ldr	r3, [r3, #0]
   16542:	60fb      	str	r3, [r7, #12]
	VERIFY(ptr);
	VERIFY(isSorted(keyBeg,key,keyEnd)); //TODO: KevCode - Assertion fails
   16544:	88fb      	ldrh	r3, [r7, #6]
   16546:	2000      	movs	r0, #0
   16548:	4619      	mov	r1, r3
   1654a:	2221      	movs	r2, #33	; 0x21
   1654c:	f7fe f8f2 	bl	14734 <isSorted>

	beg = begKey(key);
   16550:	88fb      	ldrh	r3, [r7, #6]
   16552:	4618      	mov	r0, r3
   16554:	f7ff ffc0 	bl	164d8 <begKey>
   16558:	4602      	mov	r2, r0
   1655a:	f642 63bc 	movw	r3, #11964	; 0x2ebc
   1655e:	f2c0 0304 	movt	r3, #4
   16562:	601a      	str	r2, [r3, #0]
	VERIFY(beg>0);

	//	key-= beg+1;
	switch(beg){
   16564:	f642 63bc 	movw	r3, #11964	; 0x2ebc
   16568:	f2c0 0304 	movt	r3, #4
   1656c:	681b      	ldr	r3, [r3, #0]
   1656e:	2b01      	cmp	r3, #1
   16570:	d108      	bne.n	16584 <mapGet+0x5c>
	case appBeg: return appGet(key,ptr,len);
   16572:	88fa      	ldrh	r2, [r7, #6]
   16574:	88bb      	ldrh	r3, [r7, #4]
   16576:	4610      	mov	r0, r2
   16578:	6839      	ldr	r1, [r7, #0]
   1657a:	461a      	mov	r2, r3
   1657c:	f7f9 f8c4 	bl	f708 <appGet>
   16580:	4603      	mov	r3, r0
   16582:	e002      	b.n	1658a <mapGet+0x62>
	//        case rptBeg: return mapTabGet(key,ptr,len);
	//        case scrBeg: return mapRecGet(key,ptr,len);
	//        case regBeg: return mapRecGet(key,ptr,len);
//	case traBeg: return traGet(key,ptr,len);
//	case emvBeg: return mapGet_AID_Data(key, ptr);
	default: break;
   16584:	bf00      	nop
	}
	return -1;
   16586:	f04f 33ff 	mov.w	r3, #4294967295
}
   1658a:	4618      	mov	r0, r3
   1658c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16590:	f2c0 0302 	movt	r3, #2
   16594:	68fa      	ldr	r2, [r7, #12]
   16596:	681b      	ldr	r3, [r3, #0]
   16598:	429a      	cmp	r2, r3
   1659a:	d001      	beq.n	165a0 <mapGet+0x78>
   1659c:	f7f2 fd02 	bl	8fa4 <__stack_chk_fail>
   165a0:	f107 0710 	add.w	r7, r7, #16
   165a4:	46bd      	mov	sp, r7
   165a6:	bd80      	pop	{r7, pc}

000165a8 <mapDatLen>:


word mapDatLen(word key){
   165a8:	b580      	push	{r7, lr}
   165aa:	b084      	sub	sp, #16
   165ac:	af00      	add	r7, sp, #0
   165ae:	4603      	mov	r3, r0
   165b0:	80fb      	strh	r3, [r7, #6]
   165b2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   165b6:	f2c0 0302 	movt	r3, #2
   165ba:	681b      	ldr	r3, [r3, #0]
   165bc:	60fb      	str	r3, [r7, #12]
	int beg;
	VERIFY(isSorted(keyBeg,key,keyEnd));  //TODO: Kevcode Assertion fails
   165be:	88fb      	ldrh	r3, [r7, #6]
   165c0:	2000      	movs	r0, #0
   165c2:	4619      	mov	r1, r3
   165c4:	2221      	movs	r2, #33	; 0x21
   165c6:	f7fe f8b5 	bl	14734 <isSorted>

	beg= begKey(key);
   165ca:	88fb      	ldrh	r3, [r7, #6]
   165cc:	4618      	mov	r0, r3
   165ce:	f7ff ff83 	bl	164d8 <begKey>
   165d2:	60b8      	str	r0, [r7, #8]
	VERIFY(beg>0);

	switch(beg){
   165d4:	68bb      	ldr	r3, [r7, #8]
   165d6:	2b01      	cmp	r3, #1
   165d8:	d105      	bne.n	165e6 <mapDatLen+0x3e>
	case appBeg: return appLen(key);
   165da:	88fb      	ldrh	r3, [r7, #6]
   165dc:	4618      	mov	r0, r3
   165de:	f7f8 ff4d 	bl	f47c <appLen>
   165e2:	4603      	mov	r3, r0
   165e4:	e002      	b.n	165ec <mapDatLen+0x44>
//	case traBeg: return traLen(key);
	default: break;
   165e6:	bf00      	nop
	}
	return -1;
   165e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   165ec:	4618      	mov	r0, r3
   165ee:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   165f2:	f2c0 0302 	movt	r3, #2
   165f6:	68fa      	ldr	r2, [r7, #12]
   165f8:	681b      	ldr	r3, [r3, #0]
   165fa:	429a      	cmp	r2, r3
   165fc:	d001      	beq.n	16602 <mapDatLen+0x5a>
   165fe:	f7f2 fcd1 	bl	8fa4 <__stack_chk_fail>
   16602:	f107 0710 	add.w	r7, r7, #16
   16606:	46bd      	mov	sp, r7
   16608:	bd80      	pop	{r7, pc}
   1660a:	bf00      	nop

0001660c <mapPut>:
 *  - mapTabPut()
 *  - mapRecPut()
 *  - mapGet()
 *  - mapMove()
 */
int mapPut(word key,void *ptr,word len){
   1660c:	b580      	push	{r7, lr}
   1660e:	b084      	sub	sp, #16
   16610:	af00      	add	r7, sp, #0
   16612:	6039      	str	r1, [r7, #0]
   16614:	4613      	mov	r3, r2
   16616:	4602      	mov	r2, r0
   16618:	80fa      	strh	r2, [r7, #6]
   1661a:	80bb      	strh	r3, [r7, #4]
   1661c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16620:	f2c0 0302 	movt	r3, #2
   16624:	681b      	ldr	r3, [r3, #0]
   16626:	60fb      	str	r3, [r7, #12]
	int beg;
	VERIFY(ptr);
	VERIFY(isSorted(keyBeg,key,keyEnd));  //TODO: Kevcode Assertion fails
   16628:	88fb      	ldrh	r3, [r7, #6]
   1662a:	2000      	movs	r0, #0
   1662c:	4619      	mov	r1, r3
   1662e:	2221      	movs	r2, #33	; 0x21
   16630:	f7fe f880 	bl	14734 <isSorted>

	beg= begKey(key);
   16634:	88fb      	ldrh	r3, [r7, #6]
   16636:	4618      	mov	r0, r3
   16638:	f7ff ff4e 	bl	164d8 <begKey>
   1663c:	60b8      	str	r0, [r7, #8]
	VERIFY(beg>0);
	//    key-= beg+1; // dont understand the use of this (KevCode)
	if(!len) len= strlen((char *)ptr);
   1663e:	88bb      	ldrh	r3, [r7, #4]
   16640:	2b00      	cmp	r3, #0
   16642:	d104      	bne.n	1664e <mapPut+0x42>
   16644:	6838      	ldr	r0, [r7, #0]
   16646:	f7f2 eb1e 	blx	8c84 <_init+0x124>
   1664a:	4603      	mov	r3, r0
   1664c:	80bb      	strh	r3, [r7, #4]

	if (len > mapDatLen(key)) {
   1664e:	88fb      	ldrh	r3, [r7, #6]
   16650:	4618      	mov	r0, r3
   16652:	f7ff ffa9 	bl	165a8 <mapDatLen>
   16656:	4603      	mov	r3, r0
   16658:	88ba      	ldrh	r2, [r7, #4]
   1665a:	429a      	cmp	r2, r3
   1665c:	d905      	bls.n	1666a <mapPut+0x5e>
		len = mapDatLen(key);
   1665e:	88fb      	ldrh	r3, [r7, #6]
   16660:	4618      	mov	r0, r3
   16662:	f7ff ffa1 	bl	165a8 <mapDatLen>
   16666:	4603      	mov	r3, r0
   16668:	80bb      	strh	r3, [r7, #4]
	}

	switch(beg){
   1666a:	68bb      	ldr	r3, [r7, #8]
   1666c:	2b01      	cmp	r3, #1
   1666e:	d108      	bne.n	16682 <mapPut+0x76>
	case appBeg: return appPut(key,ptr,len);
   16670:	88fa      	ldrh	r2, [r7, #6]
   16672:	88bb      	ldrh	r3, [r7, #4]
   16674:	4610      	mov	r0, r2
   16676:	6839      	ldr	r1, [r7, #0]
   16678:	461a      	mov	r2, r3
   1667a:	f7f8 ffdd 	bl	f638 <appPut>
   1667e:	4603      	mov	r3, r0
   16680:	e002      	b.n	16688 <mapPut+0x7c>
	//        case rptBeg: return mapTabPut(key,ptr,len);
	//        case scrBeg: return mapRecPut(key,ptr,len);
	//        case regBeg: return mapRecPut(key,ptr,len);
//	case traBeg: return traPut(key,ptr,len);
//	case emvBeg: return len;// mapGet_AID_Data(key, ptr);
	default: break;
   16682:	bf00      	nop
	}
	return -1;
   16684:	f04f 33ff 	mov.w	r3, #4294967295
}
   16688:	4618      	mov	r0, r3
   1668a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1668e:	f2c0 0302 	movt	r3, #2
   16692:	68fa      	ldr	r2, [r7, #12]
   16694:	681b      	ldr	r3, [r3, #0]
   16696:	429a      	cmp	r2, r3
   16698:	d001      	beq.n	1669e <mapPut+0x92>
   1669a:	f7f2 fc83 	bl	8fa4 <__stack_chk_fail>
   1669e:	f107 0710 	add.w	r7, r7, #16
   166a2:	46bd      	mov	sp, r7
   166a4:	bd80      	pop	{r7, pc}
   166a6:	bf00      	nop

000166a8 <yisleap>:


static int yisleap(int year) {
   166a8:	b580      	push	{r7, lr}
   166aa:	b084      	sub	sp, #16
   166ac:	af00      	add	r7, sp, #0
   166ae:	6078      	str	r0, [r7, #4]
   166b0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   166b4:	f2c0 0302 	movt	r3, #2
   166b8:	681b      	ldr	r3, [r3, #0]
   166ba:	60fb      	str	r3, [r7, #12]
	return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
   166bc:	687b      	ldr	r3, [r7, #4]
   166be:	f003 0303 	and.w	r3, r3, #3
   166c2:	2b00      	cmp	r3, #0
   166c4:	d10f      	bne.n	166e6 <yisleap+0x3e>
   166c6:	687a      	ldr	r2, [r7, #4]
   166c8:	f248 531f 	movw	r3, #34079	; 0x851f
   166cc:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   166d0:	fb83 1302 	smull	r1, r3, r3, r2
   166d4:	1159      	asrs	r1, r3, #5
   166d6:	17d3      	asrs	r3, r2, #31
   166d8:	1acb      	subs	r3, r1, r3
   166da:	2164      	movs	r1, #100	; 0x64
   166dc:	fb01 f303 	mul.w	r3, r1, r3
   166e0:	1ad3      	subs	r3, r2, r3
   166e2:	2b00      	cmp	r3, #0
   166e4:	d110      	bne.n	16708 <yisleap+0x60>
   166e6:	687a      	ldr	r2, [r7, #4]
   166e8:	f248 531f 	movw	r3, #34079	; 0x851f
   166ec:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   166f0:	fb83 1302 	smull	r1, r3, r3, r2
   166f4:	11d9      	asrs	r1, r3, #7
   166f6:	17d3      	asrs	r3, r2, #31
   166f8:	1acb      	subs	r3, r1, r3
   166fa:	f44f 71c8 	mov.w	r1, #400	; 0x190
   166fe:	fb01 f303 	mul.w	r3, r1, r3
   16702:	1ad3      	subs	r3, r2, r3
   16704:	2b00      	cmp	r3, #0
   16706:	d101      	bne.n	1670c <yisleap+0x64>
   16708:	2301      	movs	r3, #1
   1670a:	e000      	b.n	1670e <yisleap+0x66>
   1670c:	2300      	movs	r3, #0
}
   1670e:	4618      	mov	r0, r3
   16710:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16714:	f2c0 0302 	movt	r3, #2
   16718:	68fa      	ldr	r2, [r7, #12]
   1671a:	681b      	ldr	r3, [r3, #0]
   1671c:	429a      	cmp	r2, r3
   1671e:	d001      	beq.n	16724 <yisleap+0x7c>
   16720:	f7f2 fc40 	bl	8fa4 <__stack_chk_fail>
   16724:	f107 0710 	add.w	r7, r7, #16
   16728:	46bd      	mov	sp, r7
   1672a:	bd80      	pop	{r7, pc}

0001672c <get_yday>:

static int get_yday(int mon, int day, int year) {
   1672c:	b580      	push	{r7, lr}
   1672e:	b086      	sub	sp, #24
   16730:	af00      	add	r7, sp, #0
   16732:	60f8      	str	r0, [r7, #12]
   16734:	60b9      	str	r1, [r7, #8]
   16736:	607a      	str	r2, [r7, #4]
   16738:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1673c:	f2c0 0302 	movt	r3, #2
   16740:	681b      	ldr	r3, [r3, #0]
   16742:	617b      	str	r3, [r7, #20]
	static const int days[2][13] = {
			{0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334},
			{0, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335}
	};
	int leap = yisleap(year);
   16744:	6878      	ldr	r0, [r7, #4]
   16746:	f7ff ffaf 	bl	166a8 <yisleap>
   1674a:	6138      	str	r0, [r7, #16]

	return days[leap][mon] + day;
   1674c:	f644 3204 	movw	r2, #19204	; 0x4b04
   16750:	f2c0 0202 	movt	r2, #2
   16754:	6939      	ldr	r1, [r7, #16]
   16756:	460b      	mov	r3, r1
   16758:	005b      	lsls	r3, r3, #1
   1675a:	185b      	adds	r3, r3, r1
   1675c:	009b      	lsls	r3, r3, #2
   1675e:	185b      	adds	r3, r3, r1
   16760:	68f9      	ldr	r1, [r7, #12]
   16762:	185b      	adds	r3, r3, r1
   16764:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   16768:	68bb      	ldr	r3, [r7, #8]
   1676a:	18d3      	adds	r3, r2, r3
}
   1676c:	4618      	mov	r0, r3
   1676e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16772:	f2c0 0302 	movt	r3, #2
   16776:	697a      	ldr	r2, [r7, #20]
   16778:	681b      	ldr	r3, [r3, #0]
   1677a:	429a      	cmp	r2, r3
   1677c:	d001      	beq.n	16782 <get_yday+0x56>
   1677e:	f7f2 fc11 	bl	8fa4 <__stack_chk_fail>
   16782:	f107 0718 	add.w	r7, r7, #24
   16786:	46bd      	mov	sp, r7
   16788:	bd80      	pop	{r7, pc}
   1678a:	bf00      	nop

0001678c <getDateTime>:
 * \return non-negative value if OK; negative otherwise, Sagem terminals will not fail this function
 * \header sys\\sys.h
 * \source sys\\i32.c sys\\tlm.c
 * \test tcab0050.c
 */
int getDateTime(char *YYMMDDhhmmss) {
   1678c:	b580      	push	{r7, lr}
   1678e:	b096      	sub	sp, #88	; 0x58
   16790:	af04      	add	r7, sp, #16
   16792:	6078      	str	r0, [r7, #4]
   16794:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16798:	f2c0 0302 	movt	r3, #2
   1679c:	681b      	ldr	r3, [r3, #0]
   1679e:	647b      	str	r3, [r7, #68]	; 0x44
	Telium_Date_t Date;
	int yr, mth, dy;
	int hr, min, sec;
	char DateTimeTra[lenDatTim +  5];

	memset(DateTimeTra, 0, sizeof(DateTimeTra));
   167a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
   167a4:	4618      	mov	r0, r3
   167a6:	2100      	movs	r1, #0
   167a8:	2213      	movs	r2, #19
   167aa:	f7f2 ea08 	blx	8bbc <_init+0x5c>

	VERIFY(YYMMDDhhmmss);

	Telium_Read_date (&Date);
   167ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
   167b2:	4618      	mov	r0, r3
   167b4:	f009 fe76 	bl	204a4 <Telium_Read_date>

	ldate = d_tolong(&Date);
   167b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
   167bc:	4618      	mov	r0, r3
   167be:	f009 f87d 	bl	1f8bc <d_tolong>
   167c2:	60b8      	str	r0, [r7, #8]
	VERIFY(ldate);

	dy = (Date.day[0] - '0') * 10 + Date.day[1] - '0';
   167c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   167c8:	461a      	mov	r2, r3
   167ca:	4613      	mov	r3, r2
   167cc:	009b      	lsls	r3, r3, #2
   167ce:	189b      	adds	r3, r3, r2
   167d0:	005b      	lsls	r3, r3, #1
   167d2:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
   167d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   167da:	18d3      	adds	r3, r2, r3
   167dc:	3b30      	subs	r3, #48	; 0x30
   167de:	60fb      	str	r3, [r7, #12]
	mth = (Date.month[0] - '0') * 10 + Date.month[1] - '0';
   167e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   167e4:	461a      	mov	r2, r3
   167e6:	4613      	mov	r3, r2
   167e8:	009b      	lsls	r3, r3, #2
   167ea:	189b      	adds	r3, r3, r2
   167ec:	005b      	lsls	r3, r3, #1
   167ee:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
   167f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   167f6:	18d3      	adds	r3, r2, r3
   167f8:	3b30      	subs	r3, #48	; 0x30
   167fa:	613b      	str	r3, [r7, #16]
	yr = (Date.year[0] - '0') * 10 + Date.year[1] - '0';
   167fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   16800:	461a      	mov	r2, r3
   16802:	4613      	mov	r3, r2
   16804:	009b      	lsls	r3, r3, #2
   16806:	189b      	adds	r3, r3, r2
   16808:	005b      	lsls	r3, r3, #1
   1680a:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
   1680e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   16812:	18d3      	adds	r3, r2, r3
   16814:	3b30      	subs	r3, #48	; 0x30
   16816:	617b      	str	r3, [r7, #20]

	hr = (Date.hour[0] - '0') * 10 + Date.hour[1] - '0';
   16818:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   1681c:	461a      	mov	r2, r3
   1681e:	4613      	mov	r3, r2
   16820:	009b      	lsls	r3, r3, #2
   16822:	189b      	adds	r3, r3, r2
   16824:	005b      	lsls	r3, r3, #1
   16826:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
   1682a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1682e:	18d3      	adds	r3, r2, r3
   16830:	3b30      	subs	r3, #48	; 0x30
   16832:	61bb      	str	r3, [r7, #24]
	min = (Date.minute[0] - '0') * 10 + Date.minute[1] - '0';
   16834:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   16838:	461a      	mov	r2, r3
   1683a:	4613      	mov	r3, r2
   1683c:	009b      	lsls	r3, r3, #2
   1683e:	189b      	adds	r3, r3, r2
   16840:	005b      	lsls	r3, r3, #1
   16842:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
   16846:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1684a:	18d3      	adds	r3, r2, r3
   1684c:	3b30      	subs	r3, #48	; 0x30
   1684e:	61fb      	str	r3, [r7, #28]
	sec = (Date.second[0] - '0') * 10 + Date.second[1] - '0';
   16850:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   16854:	461a      	mov	r2, r3
   16856:	4613      	mov	r3, r2
   16858:	009b      	lsls	r3, r3, #2
   1685a:	189b      	adds	r3, r3, r2
   1685c:	005b      	lsls	r3, r3, #1
   1685e:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
   16862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   16866:	18d3      	adds	r3, r2, r3
   16868:	3b30      	subs	r3, #48	; 0x30
   1686a:	623b      	str	r3, [r7, #32]

	Telium_Sprintf(YYMMDDhhmmss, "%02d%02d%02d%02d%02d%02d", yr, mth, dy, hr, min,sec);
   1686c:	68fb      	ldr	r3, [r7, #12]
   1686e:	9300      	str	r3, [sp, #0]
   16870:	69bb      	ldr	r3, [r7, #24]
   16872:	9301      	str	r3, [sp, #4]
   16874:	69fb      	ldr	r3, [r7, #28]
   16876:	9302      	str	r3, [sp, #8]
   16878:	6a3b      	ldr	r3, [r7, #32]
   1687a:	9303      	str	r3, [sp, #12]
   1687c:	6878      	ldr	r0, [r7, #4]
   1687e:	f644 2174 	movw	r1, #19060	; 0x4a74
   16882:	f2c0 0102 	movt	r1, #2
   16886:	697a      	ldr	r2, [r7, #20]
   16888:	693b      	ldr	r3, [r7, #16]
   1688a:	f009 ffb7 	bl	207fc <Telium_Sprintf>
	Telium_Sprintf(DateTimeTra, "20%02d%02d%02d%02d%02d%02d", yr, mth, dy, hr, min,sec);
   1688e:	f107 0330 	add.w	r3, r7, #48	; 0x30
   16892:	68fa      	ldr	r2, [r7, #12]
   16894:	9200      	str	r2, [sp, #0]
   16896:	69ba      	ldr	r2, [r7, #24]
   16898:	9201      	str	r2, [sp, #4]
   1689a:	69fa      	ldr	r2, [r7, #28]
   1689c:	9202      	str	r2, [sp, #8]
   1689e:	6a3a      	ldr	r2, [r7, #32]
   168a0:	9203      	str	r2, [sp, #12]
   168a2:	4618      	mov	r0, r3
   168a4:	f644 2190 	movw	r1, #19088	; 0x4a90
   168a8:	f2c0 0102 	movt	r1, #2
   168ac:	697a      	ldr	r2, [r7, #20]
   168ae:	693b      	ldr	r3, [r7, #16]
   168b0:	f009 ffa4 	bl	207fc <Telium_Sprintf>
//	mapPut(traDatTim, DateTimeTra, 14);

	return get_yday(mth, dy, yr);
   168b4:	6938      	ldr	r0, [r7, #16]
   168b6:	68f9      	ldr	r1, [r7, #12]
   168b8:	697a      	ldr	r2, [r7, #20]
   168ba:	f7ff ff37 	bl	1672c <get_yday>
   168be:	4603      	mov	r3, r0
}
   168c0:	4618      	mov	r0, r3
   168c2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   168c6:	f2c0 0302 	movt	r3, #2
   168ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   168cc:	681b      	ldr	r3, [r3, #0]
   168ce:	429a      	cmp	r2, r3
   168d0:	d001      	beq.n	168d6 <getDateTime+0x14a>
   168d2:	f7f2 fb67 	bl	8fa4 <__stack_chk_fail>
   168d6:	f107 0748 	add.w	r7, r7, #72	; 0x48
   168da:	46bd      	mov	sp, r7
   168dc:	bd80      	pop	{r7, pc}
   168de:	bf00      	nop

000168e0 <getMonthName>:

static void getMonthName(card monthNumber,char * monthname){
   168e0:	b580      	push	{r7, lr}
   168e2:	b084      	sub	sp, #16
   168e4:	af00      	add	r7, sp, #0
   168e6:	6078      	str	r0, [r7, #4]
   168e8:	6039      	str	r1, [r7, #0]
   168ea:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   168ee:	f2c0 0302 	movt	r3, #2
   168f2:	681b      	ldr	r3, [r3, #0]
   168f4:	60fb      	str	r3, [r7, #12]
	switch (monthNumber) {
   168f6:	687b      	ldr	r3, [r7, #4]
   168f8:	3b01      	subs	r3, #1
   168fa:	2b0b      	cmp	r3, #11
   168fc:	d87a      	bhi.n	169f4 <getMonthName+0x114>
   168fe:	a201      	add	r2, pc, #4	; (adr r2, 16904 <getMonthName+0x24>)
   16900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16904:	00016935 	.word	0x00016935
   16908:	00016945 	.word	0x00016945
   1690c:	00016955 	.word	0x00016955
   16910:	00016965 	.word	0x00016965
   16914:	00016975 	.word	0x00016975
   16918:	00016985 	.word	0x00016985
   1691c:	00016995 	.word	0x00016995
   16920:	000169a5 	.word	0x000169a5
   16924:	000169b5 	.word	0x000169b5
   16928:	000169c5 	.word	0x000169c5
   1692c:	000169d5 	.word	0x000169d5
   16930:	000169e5 	.word	0x000169e5
	case 1:
		strcpy(monthname,"JAN");
   16934:	683a      	ldr	r2, [r7, #0]
   16936:	f644 23ac 	movw	r3, #19116	; 0x4aac
   1693a:	f2c0 0302 	movt	r3, #2
   1693e:	6818      	ldr	r0, [r3, #0]
   16940:	6010      	str	r0, [r2, #0]
		break;
   16942:	e057      	b.n	169f4 <getMonthName+0x114>
	case 2:
		strcpy(monthname,"FEB");
   16944:	683a      	ldr	r2, [r7, #0]
   16946:	f644 23b0 	movw	r3, #19120	; 0x4ab0
   1694a:	f2c0 0302 	movt	r3, #2
   1694e:	6818      	ldr	r0, [r3, #0]
   16950:	6010      	str	r0, [r2, #0]
		break;
   16952:	e04f      	b.n	169f4 <getMonthName+0x114>
	case 3:
		strcpy(monthname,"MAR");
   16954:	683a      	ldr	r2, [r7, #0]
   16956:	f644 23b4 	movw	r3, #19124	; 0x4ab4
   1695a:	f2c0 0302 	movt	r3, #2
   1695e:	6818      	ldr	r0, [r3, #0]
   16960:	6010      	str	r0, [r2, #0]
		break;
   16962:	e047      	b.n	169f4 <getMonthName+0x114>
	case 4:
		strcpy(monthname,"APR");
   16964:	683a      	ldr	r2, [r7, #0]
   16966:	f644 23b8 	movw	r3, #19128	; 0x4ab8
   1696a:	f2c0 0302 	movt	r3, #2
   1696e:	6818      	ldr	r0, [r3, #0]
   16970:	6010      	str	r0, [r2, #0]
		break;
   16972:	e03f      	b.n	169f4 <getMonthName+0x114>
	case 5:
		strcpy(monthname,"MAY");
   16974:	683a      	ldr	r2, [r7, #0]
   16976:	f644 23bc 	movw	r3, #19132	; 0x4abc
   1697a:	f2c0 0302 	movt	r3, #2
   1697e:	6818      	ldr	r0, [r3, #0]
   16980:	6010      	str	r0, [r2, #0]
		break;
   16982:	e037      	b.n	169f4 <getMonthName+0x114>
	case 6:
		strcpy(monthname,"JUN");
   16984:	683a      	ldr	r2, [r7, #0]
   16986:	f644 23c0 	movw	r3, #19136	; 0x4ac0
   1698a:	f2c0 0302 	movt	r3, #2
   1698e:	6818      	ldr	r0, [r3, #0]
   16990:	6010      	str	r0, [r2, #0]
		break;
   16992:	e02f      	b.n	169f4 <getMonthName+0x114>
	case 7:
		strcpy(monthname,"JUL");
   16994:	683a      	ldr	r2, [r7, #0]
   16996:	f644 23c4 	movw	r3, #19140	; 0x4ac4
   1699a:	f2c0 0302 	movt	r3, #2
   1699e:	6818      	ldr	r0, [r3, #0]
   169a0:	6010      	str	r0, [r2, #0]
		break;
   169a2:	e027      	b.n	169f4 <getMonthName+0x114>
	case 8:
		strcpy(monthname,"AUG");
   169a4:	683a      	ldr	r2, [r7, #0]
   169a6:	f644 23c8 	movw	r3, #19144	; 0x4ac8
   169aa:	f2c0 0302 	movt	r3, #2
   169ae:	6818      	ldr	r0, [r3, #0]
   169b0:	6010      	str	r0, [r2, #0]
		break;
   169b2:	e01f      	b.n	169f4 <getMonthName+0x114>
	case 9:
		strcpy(monthname,"SEP");
   169b4:	683a      	ldr	r2, [r7, #0]
   169b6:	f644 23cc 	movw	r3, #19148	; 0x4acc
   169ba:	f2c0 0302 	movt	r3, #2
   169be:	6818      	ldr	r0, [r3, #0]
   169c0:	6010      	str	r0, [r2, #0]
		break;
   169c2:	e017      	b.n	169f4 <getMonthName+0x114>
	case 10:
		strcpy(monthname,"OCT");
   169c4:	683a      	ldr	r2, [r7, #0]
   169c6:	f644 23d0 	movw	r3, #19152	; 0x4ad0
   169ca:	f2c0 0302 	movt	r3, #2
   169ce:	6818      	ldr	r0, [r3, #0]
   169d0:	6010      	str	r0, [r2, #0]
		break;
   169d2:	e00f      	b.n	169f4 <getMonthName+0x114>
	case 11:
		strcpy(monthname,"NOV");
   169d4:	683a      	ldr	r2, [r7, #0]
   169d6:	f644 23d4 	movw	r3, #19156	; 0x4ad4
   169da:	f2c0 0302 	movt	r3, #2
   169de:	6818      	ldr	r0, [r3, #0]
   169e0:	6010      	str	r0, [r2, #0]
		break;
   169e2:	e007      	b.n	169f4 <getMonthName+0x114>
	case 12:
		strcpy(monthname,"DEC");
   169e4:	683a      	ldr	r2, [r7, #0]
   169e6:	f644 23d8 	movw	r3, #19160	; 0x4ad8
   169ea:	f2c0 0302 	movt	r3, #2
   169ee:	6818      	ldr	r0, [r3, #0]
   169f0:	6010      	str	r0, [r2, #0]
		break;
   169f2:	bf00      	nop
	}
}
   169f4:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   169f8:	f2c0 0302 	movt	r3, #2
   169fc:	68fa      	ldr	r2, [r7, #12]
   169fe:	681b      	ldr	r3, [r3, #0]
   16a00:	429a      	cmp	r2, r3
   16a02:	d001      	beq.n	16a08 <getMonthName+0x128>
   16a04:	f7f2 face 	bl	8fa4 <__stack_chk_fail>
   16a08:	f107 0710 	add.w	r7, r7, #16
   16a0c:	46bd      	mov	sp, r7
   16a0e:	bd80      	pop	{r7, pc}

00016a10 <strFormatDatTim>:

int strFormatDatTim(word key){
   16a10:	b580      	push	{r7, lr}
   16a12:	b094      	sub	sp, #80	; 0x50
   16a14:	af00      	add	r7, sp, #0
   16a16:	4603      	mov	r3, r0
   16a18:	80fb      	strh	r3, [r7, #6]
   16a1a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16a1e:	f2c0 0302 	movt	r3, #2
   16a22:	681b      	ldr	r3, [r3, #0]
   16a24:	64fb      	str	r3, [r7, #76]	; 0x4c
	int ret;
	card month;
	char datetime[lenDatTim + 1];
	char newdatetime[lenDatTim + 1];
	char fmtdatetime[lenDatTim + 1];
	const char *bgd = " ";
   16a26:	f644 23dc 	movw	r3, #19164	; 0x4adc
   16a2a:	f2c0 0302 	movt	r3, #2
   16a2e:	617b      	str	r3, [r7, #20]
	const char *ctl = "ghabcdijkl";
   16a30:	f644 23e0 	movw	r3, #19168	; 0x4ae0
   16a34:	f2c0 0302 	movt	r3, #2
   16a38:	61bb      	str	r3, [r7, #24]

	memset(newdatetime, 0, sizeof(newdatetime));
   16a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16a3e:	4618      	mov	r0, r3
   16a40:	2100      	movs	r1, #0
   16a42:	220f      	movs	r2, #15
   16a44:	f7f2 e8ba 	blx	8bbc <_init+0x5c>
	memset(fmtdatetime, 0, sizeof(fmtdatetime));
   16a48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   16a4c:	4618      	mov	r0, r3
   16a4e:	2100      	movs	r1, #0
   16a50:	220f      	movs	r2, #15
   16a52:	f7f2 e8b4 	blx	8bbc <_init+0x5c>
	MAPGET(key, datetime, lblKO);
   16a56:	88fa      	ldrh	r2, [r7, #6]
   16a58:	f107 031c 	add.w	r3, r7, #28
   16a5c:	4610      	mov	r0, r2
   16a5e:	4619      	mov	r1, r3
   16a60:	220f      	movs	r2, #15
   16a62:	f7ff fd61 	bl	16528 <mapGet>
   16a66:	6138      	str	r0, [r7, #16]
   16a68:	693b      	ldr	r3, [r7, #16]
   16a6a:	2b00      	cmp	r3, #0
   16a6c:	db32      	blt.n	16ad4 <strFormatDatTim+0xc4>

	dec2num(&month, &datetime[2], 2);
   16a6e:	f107 020c 	add.w	r2, r7, #12
   16a72:	f107 031c 	add.w	r3, r7, #28
   16a76:	3302      	adds	r3, #2
   16a78:	4610      	mov	r0, r2
   16a7a:	4619      	mov	r1, r3
   16a7c:	2202      	movs	r2, #2
   16a7e:	f7fb fed7 	bl	12830 <dec2num>
	ret = fmtMut(newdatetime, (const char *) datetime, bgd, ctl);
   16a82:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   16a86:	f107 031c 	add.w	r3, r7, #28
   16a8a:	4610      	mov	r0, r2
   16a8c:	4619      	mov	r1, r3
   16a8e:	697a      	ldr	r2, [r7, #20]
   16a90:	69bb      	ldr	r3, [r7, #24]
   16a92:	f7fd fc77 	bl	14384 <fmtMut>
   16a96:	6138      	str	r0, [r7, #16]

	CHECK(month <= 12, lblKO);
   16a98:	68fb      	ldr	r3, [r7, #12]
   16a9a:	2b0c      	cmp	r3, #12
   16a9c:	d81a      	bhi.n	16ad4 <strFormatDatTim+0xc4>
	CHECK(month > 0, lblKO);
   16a9e:	68fb      	ldr	r3, [r7, #12]
   16aa0:	2b00      	cmp	r3, #0
   16aa2:	d017      	beq.n	16ad4 <strFormatDatTim+0xc4>

	getMonthName(month,fmtdatetime);
   16aa4:	68fa      	ldr	r2, [r7, #12]
   16aa6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   16aaa:	4610      	mov	r0, r2
   16aac:	4619      	mov	r1, r3
   16aae:	f7ff ff17 	bl	168e0 <getMonthName>
	memcpy(&fmtdatetime[3], newdatetime, strlen(newdatetime));
   16ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   16ab6:	4618      	mov	r0, r3
   16ab8:	f7f2 e8e4 	blx	8c84 <_init+0x124>
   16abc:	4603      	mov	r3, r0
   16abe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   16ac2:	1cd1      	adds	r1, r2, #3
   16ac4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   16ac8:	4608      	mov	r0, r1
   16aca:	4611      	mov	r1, r2
   16acc:	461a      	mov	r2, r3
   16ace:	f7f2 e8d4 	blx	8c78 <_init+0x118>

//	MAPPUTSTR(traFmtDate, fmtdatetime, lblKO);
//	CHECK(ret > 0, lblKO);

	goto lblEnd;
   16ad2:	e002      	b.n	16ada <strFormatDatTim+0xca>

	lblKO:
	ret = -1;
   16ad4:	f04f 33ff 	mov.w	r3, #4294967295
   16ad8:	613b      	str	r3, [r7, #16]

	lblEnd:
	return ret;
   16ada:	693b      	ldr	r3, [r7, #16]
}
   16adc:	4618      	mov	r0, r3
   16ade:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16ae2:	f2c0 0302 	movt	r3, #2
   16ae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   16ae8:	681b      	ldr	r3, [r3, #0]
   16aea:	429a      	cmp	r2, r3
   16aec:	d001      	beq.n	16af2 <strFormatDatTim+0xe2>
   16aee:	f7f2 fa59 	bl	8fa4 <__stack_chk_fail>
   16af2:	f107 0750 	add.w	r7, r7, #80	; 0x50
   16af6:	46bd      	mov	sp, r7
   16af8:	bd80      	pop	{r7, pc}
   16afa:	bf00      	nop

00016afc <message_RemoveCard>:



//! \brief Wait card removal after an EMV transaction.
void message_RemoveCard(void){
   16afc:	b580      	push	{r7, lr}
   16afe:	b086      	sub	sp, #24
   16b00:	af02      	add	r7, sp, #8
   16b02:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16b06:	f2c0 0302 	movt	r3, #2
   16b0a:	681b      	ldr	r3, [r3, #0]
   16b0c:	60fb      	str	r3, [r7, #12]
	int bCardPresent;
	Telium_File_t* hCam;
	unsigned char ucStatus;

	hCam = NULL;
   16b0e:	2300      	movs	r3, #0
   16b10:	60bb      	str	r3, [r7, #8]

	hCam = stdcam0();
   16b12:	f008 ff01 	bl	1f918 <stdcam0>
   16b16:	60b8      	str	r0, [r7, #8]
	if (hCam==NULL) {
   16b18:	68bb      	ldr	r3, [r7, #8]
   16b1a:	2b00      	cmp	r3, #0
   16b1c:	d10a      	bne.n	16b34 <message_RemoveCard+0x38>
		hCam = Telium_Fopen("CAM0", "rw");
   16b1e:	f644 20ec 	movw	r0, #19180	; 0x4aec
   16b22:	f2c0 0002 	movt	r0, #2
   16b26:	f644 21f4 	movw	r1, #19188	; 0x4af4
   16b2a:	f2c0 0102 	movt	r1, #2
   16b2e:	f008 ff95 	bl	1fa5c <Telium_Fopen>
   16b32:	60b8      	str	r0, [r7, #8]
	}


	bCardPresent = TRUE;
   16b34:	2301      	movs	r3, #1
   16b36:	607b      	str	r3, [r7, #4]
	if (hCam != NULL) {
   16b38:	68bb      	ldr	r3, [r7, #8]
   16b3a:	2b00      	cmp	r3, #0
   16b3c:	d042      	beq.n	16bc4 <message_RemoveCard+0xc8>
		Telium_Status(hCam, &ucStatus);
   16b3e:	1cfb      	adds	r3, r7, #3
   16b40:	68b8      	ldr	r0, [r7, #8]
   16b42:	4619      	mov	r1, r3
   16b44:	f009 f8b2 	bl	1fcac <Telium_Status>
		if ((ucStatus & CAM_PRESENT) == 0) {
   16b48:	78fb      	ldrb	r3, [r7, #3]
   16b4a:	f003 0301 	and.w	r3, r3, #1
   16b4e:	2b00      	cmp	r3, #0
   16b50:	d10a      	bne.n	16b68 <message_RemoveCard+0x6c>
			if (hCam != NULL) {
   16b52:	68bb      	ldr	r3, [r7, #8]
   16b54:	2b00      	cmp	r3, #0
   16b56:	d004      	beq.n	16b62 <message_RemoveCard+0x66>
				Telium_Fclose(hCam);
   16b58:	68b8      	ldr	r0, [r7, #8]
   16b5a:	f008 ff4d 	bl	1f9f8 <Telium_Fclose>
				hCam = NULL;
   16b5e:	2300      	movs	r3, #0
   16b60:	60bb      	str	r3, [r7, #8]
			}
			// A card has been removed
			bCardPresent = FALSE;
   16b62:	2300      	movs	r3, #0
   16b64:	607b      	str	r3, [r7, #4]
			GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Remove card", GL_ICON_INFORMATION, GL_BUTTON_NONE, 0);
//			ClosePeripherals();
		}


		while(bCardPresent) {
   16b66:	e02a      	b.n	16bbe <message_RemoveCard+0xc2>
			// A card has been removed
			bCardPresent = FALSE;
		} else {
//			OpenPeripherals();
			// Display message "Remove card"
			GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Remove card", GL_ICON_INFORMATION, GL_BUTTON_NONE, 0);
   16b68:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   16b6c:	f2c0 0302 	movt	r3, #2
   16b70:	681b      	ldr	r3, [r3, #0]
   16b72:	2200      	movs	r2, #0
   16b74:	9200      	str	r2, [sp, #0]
   16b76:	2200      	movs	r2, #0
   16b78:	9201      	str	r2, [sp, #4]
   16b7a:	4618      	mov	r0, r3
   16b7c:	2100      	movs	r1, #0
   16b7e:	f644 22f8 	movw	r2, #19192	; 0x4af8
   16b82:	f2c0 0202 	movt	r2, #2
   16b86:	2302      	movs	r3, #2
   16b88:	f00a fd7e 	bl	21688 <GL_Dialog_Message>
//			ClosePeripherals();
		}


		while(bCardPresent) {
   16b8c:	e017      	b.n	16bbe <message_RemoveCard+0xc2>
			Telium_Ttestall(CAM0, 0);
   16b8e:	2020      	movs	r0, #32
   16b90:	2100      	movs	r1, #0
   16b92:	f009 f951 	bl	1fe38 <Telium_Ttestall>
			Telium_Status(hCam, &ucStatus);
   16b96:	1cfb      	adds	r3, r7, #3
   16b98:	68b8      	ldr	r0, [r7, #8]
   16b9a:	4619      	mov	r1, r3
   16b9c:	f009 f886 	bl	1fcac <Telium_Status>

			if ((ucStatus & CAM_PRESENT) == 0) {
   16ba0:	78fb      	ldrb	r3, [r7, #3]
   16ba2:	f003 0301 	and.w	r3, r3, #1
   16ba6:	2b00      	cmp	r3, #0
   16ba8:	d109      	bne.n	16bbe <message_RemoveCard+0xc2>
				if (hCam != NULL) {
   16baa:	68bb      	ldr	r3, [r7, #8]
   16bac:	2b00      	cmp	r3, #0
   16bae:	d004      	beq.n	16bba <message_RemoveCard+0xbe>
					Telium_Fclose(hCam);
   16bb0:	68b8      	ldr	r0, [r7, #8]
   16bb2:	f008 ff21 	bl	1f9f8 <Telium_Fclose>
					hCam = NULL;
   16bb6:	2300      	movs	r3, #0
   16bb8:	60bb      	str	r3, [r7, #8]
				}
				// A card has been removed
				bCardPresent = FALSE;
   16bba:	2300      	movs	r3, #0
   16bbc:	607b      	str	r3, [r7, #4]
			GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Remove card", GL_ICON_INFORMATION, GL_BUTTON_NONE, 0);
//			ClosePeripherals();
		}


		while(bCardPresent) {
   16bbe:	687b      	ldr	r3, [r7, #4]
   16bc0:	2b00      	cmp	r3, #0
   16bc2:	d1e4      	bne.n	16b8e <message_RemoveCard+0x92>
				// A card has been removed
				bCardPresent = FALSE;
			}
		}
	}
}
   16bc4:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16bc8:	f2c0 0302 	movt	r3, #2
   16bcc:	68fa      	ldr	r2, [r7, #12]
   16bce:	681b      	ldr	r3, [r3, #0]
   16bd0:	429a      	cmp	r2, r3
   16bd2:	d001      	beq.n	16bd8 <message_RemoveCard+0xdc>
   16bd4:	f7f2 f9e6 	bl	8fa4 <__stack_chk_fail>
   16bd8:	f107 0710 	add.w	r7, r7, #16
   16bdc:	46bd      	mov	sp, r7
   16bde:	bd80      	pop	{r7, pc}

00016be0 <strtouppercase>:


void strtouppercase(char s[]){
   16be0:	b580      	push	{r7, lr}
   16be2:	b084      	sub	sp, #16
   16be4:	af00      	add	r7, sp, #0
   16be6:	6078      	str	r0, [r7, #4]
   16be8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16bec:	f2c0 0302 	movt	r3, #2
   16bf0:	681b      	ldr	r3, [r3, #0]
   16bf2:	60fb      	str	r3, [r7, #12]
	int c = 0;
   16bf4:	2300      	movs	r3, #0
   16bf6:	60bb      	str	r3, [r7, #8]

	while (s[c] != '\0') {
   16bf8:	e018      	b.n	16c2c <strtouppercase+0x4c>
		if (s[c] >= 'a' && s[c] <= 'z') {
   16bfa:	68bb      	ldr	r3, [r7, #8]
   16bfc:	687a      	ldr	r2, [r7, #4]
   16bfe:	18d3      	adds	r3, r2, r3
   16c00:	781b      	ldrb	r3, [r3, #0]
   16c02:	2b60      	cmp	r3, #96	; 0x60
   16c04:	d90f      	bls.n	16c26 <strtouppercase+0x46>
   16c06:	68bb      	ldr	r3, [r7, #8]
   16c08:	687a      	ldr	r2, [r7, #4]
   16c0a:	18d3      	adds	r3, r2, r3
   16c0c:	781b      	ldrb	r3, [r3, #0]
   16c0e:	2b7a      	cmp	r3, #122	; 0x7a
   16c10:	d809      	bhi.n	16c26 <strtouppercase+0x46>
			s[c] = s[c] - 32;
   16c12:	68bb      	ldr	r3, [r7, #8]
   16c14:	687a      	ldr	r2, [r7, #4]
   16c16:	18d3      	adds	r3, r2, r3
   16c18:	68ba      	ldr	r2, [r7, #8]
   16c1a:	6879      	ldr	r1, [r7, #4]
   16c1c:	188a      	adds	r2, r1, r2
   16c1e:	7812      	ldrb	r2, [r2, #0]
   16c20:	3a20      	subs	r2, #32
   16c22:	b2d2      	uxtb	r2, r2
   16c24:	701a      	strb	r2, [r3, #0]
		}
		c++;
   16c26:	68bb      	ldr	r3, [r7, #8]
   16c28:	3301      	adds	r3, #1
   16c2a:	60bb      	str	r3, [r7, #8]


void strtouppercase(char s[]){
	int c = 0;

	while (s[c] != '\0') {
   16c2c:	68bb      	ldr	r3, [r7, #8]
   16c2e:	687a      	ldr	r2, [r7, #4]
   16c30:	18d3      	adds	r3, r2, r3
   16c32:	781b      	ldrb	r3, [r3, #0]
   16c34:	2b00      	cmp	r3, #0
   16c36:	d1e0      	bne.n	16bfa <strtouppercase+0x1a>
		if (s[c] >= 'a' && s[c] <= 'z') {
			s[c] = s[c] - 32;
		}
		c++;
	}
}
   16c38:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16c3c:	f2c0 0302 	movt	r3, #2
   16c40:	68fa      	ldr	r2, [r7, #12]
   16c42:	681b      	ldr	r3, [r3, #0]
   16c44:	429a      	cmp	r2, r3
   16c46:	d001      	beq.n	16c4c <strtouppercase+0x6c>
   16c48:	f7f2 f9ac 	bl	8fa4 <__stack_chk_fail>
   16c4c:	f107 0710 	add.w	r7, r7, #16
   16c50:	46bd      	mov	sp, r7
   16c52:	bd80      	pop	{r7, pc}

00016c54 <kbdKey>:
 *    - In case of error it returns 0xFF.
 * \header sys\\sys.h
 * \source sys\\tlmhmi.c
 * \test tcab0003.c
 */
char kbdKey(void) {
   16c54:	b580      	push	{r7, lr}
   16c56:	b084      	sub	sp, #16
   16c58:	af00      	add	r7, sp, #0
   16c5a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16c5e:	f2c0 0302 	movt	r3, #2
   16c62:	681b      	ldr	r3, [r3, #0]
   16c64:	60fb      	str	r3, [r7, #12]
	int ret;
	byte key = 0;
   16c66:	2300      	movs	r3, #0
   16c68:	71fb      	strb	r3, [r7, #7]

	ret = Telium_Ttestall(KEYBOARD, 1);    // wait for the first event
   16c6a:	2001      	movs	r0, #1
   16c6c:	2101      	movs	r1, #1
   16c6e:	f009 f8e3 	bl	1fe38 <Telium_Ttestall>
   16c72:	4603      	mov	r3, r0
   16c74:	60bb      	str	r3, [r7, #8]

	if(ret & KEYBOARD) {
   16c76:	68bb      	ldr	r3, [r7, #8]
   16c78:	f003 0301 	and.w	r3, r3, #1
   16c7c:	2b00      	cmp	r3, #0
   16c7e:	d007      	beq.n	16c90 <kbdKey+0x3c>
		key = Telium_Getchar();
   16c80:	f009 f844 	bl	1fd0c <Telium_Stdin>
   16c84:	4603      	mov	r3, r0
   16c86:	4618      	mov	r0, r3
   16c88:	f008 ff18 	bl	1fabc <Telium_Getc>
   16c8c:	4603      	mov	r3, r0
   16c8e:	71fb      	strb	r3, [r7, #7]
	}
	return key;
   16c90:	79fb      	ldrb	r3, [r7, #7]
}
   16c92:	4618      	mov	r0, r3
   16c94:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16c98:	f2c0 0302 	movt	r3, #2
   16c9c:	68fa      	ldr	r2, [r7, #12]
   16c9e:	681b      	ldr	r3, [r3, #0]
   16ca0:	429a      	cmp	r2, r3
   16ca2:	d001      	beq.n	16ca8 <kbdKey+0x54>
   16ca4:	f7f2 f97e 	bl	8fa4 <__stack_chk_fail>
   16ca8:	f107 0710 	add.w	r7, r7, #16
   16cac:	46bd      	mov	sp, r7
   16cae:	bd80      	pop	{r7, pc}

00016cb0 <basename>:

char * basename (const char *filename) {
   16cb0:	b580      	push	{r7, lr}
   16cb2:	b084      	sub	sp, #16
   16cb4:	af00      	add	r7, sp, #0
   16cb6:	6078      	str	r0, [r7, #4]
   16cb8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16cbc:	f2c0 0302 	movt	r3, #2
   16cc0:	681b      	ldr	r3, [r3, #0]
   16cc2:	60fb      	str	r3, [r7, #12]
	char *p = strrchr (filename, '/');
   16cc4:	6878      	ldr	r0, [r7, #4]
   16cc6:	212f      	movs	r1, #47	; 0x2f
   16cc8:	f7f2 e81a 	blx	8d00 <_init+0x1a0>
   16ccc:	60b8      	str	r0, [r7, #8]
	return p ? p + 1 : (char *) filename;
   16cce:	68bb      	ldr	r3, [r7, #8]
   16cd0:	2b00      	cmp	r3, #0
   16cd2:	d002      	beq.n	16cda <basename+0x2a>
   16cd4:	68bb      	ldr	r3, [r7, #8]
   16cd6:	3301      	adds	r3, #1
   16cd8:	e000      	b.n	16cdc <basename+0x2c>
   16cda:	687b      	ldr	r3, [r7, #4]
}
   16cdc:	4618      	mov	r0, r3
   16cde:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16ce2:	f2c0 0302 	movt	r3, #2
   16ce6:	68fa      	ldr	r2, [r7, #12]
   16ce8:	681b      	ldr	r3, [r3, #0]
   16cea:	429a      	cmp	r2, r3
   16cec:	d001      	beq.n	16cf2 <basename+0x42>
   16cee:	f7f2 f959 	bl	8fa4 <__stack_chk_fail>
   16cf2:	f107 0710 	add.w	r7, r7, #16
   16cf6:	46bd      	mov	sp, r7
   16cf8:	bd80      	pop	{r7, pc}
   16cfa:	bf00      	nop

00016cfc <IsoError>:
//     pcTrk (-O) : Ascii string
//  This function has no return value.
//****************************************************************************

void IsoError(int iSta, char *pcTrk)
{
   16cfc:	b5b0      	push	{r4, r5, r7, lr}
   16cfe:	b084      	sub	sp, #16
   16d00:	af00      	add	r7, sp, #0
   16d02:	6078      	str	r0, [r7, #4]
   16d04:	6039      	str	r1, [r7, #0]
   16d06:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16d0a:	f2c0 0302 	movt	r3, #2
   16d0e:	681b      	ldr	r3, [r3, #0]
   16d10:	60fb      	str	r3, [r7, #12]
	switch (iSta)
   16d12:	687b      	ldr	r3, [r7, #4]
   16d14:	3b01      	subs	r3, #1
   16d16:	2b05      	cmp	r3, #5
   16d18:	d85c      	bhi.n	16dd4 <IsoError+0xd8>
   16d1a:	a201      	add	r2, pc, #4	; (adr r2, 16d20 <IsoError+0x24>)
   16d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16d20:	00016d39 	.word	0x00016d39
   16d24:	00016d53 	.word	0x00016d53
   16d28:	00016d6d 	.word	0x00016d6d
   16d2c:	00016d83 	.word	0x00016d83
   16d30:	00016d9d 	.word	0x00016d9d
   16d34:	00016db7 	.word	0x00016db7
	{
		case DEF_SEP: strcpy(pcTrk, "Separator fault");  break;
   16d38:	683a      	ldr	r2, [r7, #0]
   16d3a:	f245 23c8 	movw	r3, #21192	; 0x52c8
   16d3e:	f2c0 0302 	movt	r3, #2
   16d42:	4614      	mov	r4, r2
   16d44:	461d      	mov	r5, r3
   16d46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16d48:	6020      	str	r0, [r4, #0]
   16d4a:	6061      	str	r1, [r4, #4]
   16d4c:	60a2      	str	r2, [r4, #8]
   16d4e:	60e3      	str	r3, [r4, #12]
   16d50:	e04d      	b.n	16dee <IsoError+0xf2>
		case DEF_PAR: strcpy(pcTrk, "Parity fault");     break;
   16d52:	683a      	ldr	r2, [r7, #0]
   16d54:	f245 23d8 	movw	r3, #21208	; 0x52d8
   16d58:	f2c0 0302 	movt	r3, #2
   16d5c:	4614      	mov	r4, r2
   16d5e:	cb07      	ldmia	r3!, {r0, r1, r2}
   16d60:	6020      	str	r0, [r4, #0]
   16d62:	6061      	str	r1, [r4, #4]
   16d64:	60a2      	str	r2, [r4, #8]
   16d66:	781b      	ldrb	r3, [r3, #0]
   16d68:	7323      	strb	r3, [r4, #12]
   16d6a:	e040      	b.n	16dee <IsoError+0xf2>
		case DEF_LRC: strcpy(pcTrk, "LRC fault");        break;
   16d6c:	683a      	ldr	r2, [r7, #0]
   16d6e:	f245 23e8 	movw	r3, #21224	; 0x52e8
   16d72:	f2c0 0302 	movt	r3, #2
   16d76:	cb03      	ldmia	r3!, {r0, r1}
   16d78:	6010      	str	r0, [r2, #0]
   16d7a:	6051      	str	r1, [r2, #4]
   16d7c:	881b      	ldrh	r3, [r3, #0]
   16d7e:	8113      	strh	r3, [r2, #8]
   16d80:	e035      	b.n	16dee <IsoError+0xf2>
		case DEF_LUH: strcpy(pcTrk, "Luhn fault");       break;
   16d82:	683a      	ldr	r2, [r7, #0]
   16d84:	f245 23f4 	movw	r3, #21236	; 0x52f4
   16d88:	f2c0 0302 	movt	r3, #2
   16d8c:	cb03      	ldmia	r3!, {r0, r1}
   16d8e:	6010      	str	r0, [r2, #0]
   16d90:	6051      	str	r1, [r2, #4]
   16d92:	8819      	ldrh	r1, [r3, #0]
   16d94:	789b      	ldrb	r3, [r3, #2]
   16d96:	8111      	strh	r1, [r2, #8]
   16d98:	7293      	strb	r3, [r2, #10]
   16d9a:	e028      	b.n	16dee <IsoError+0xf2>
		case DEF_NUM: strcpy(pcTrk, "Numerical fault");  break;
   16d9c:	683a      	ldr	r2, [r7, #0]
   16d9e:	f245 3300 	movw	r3, #21248	; 0x5300
   16da2:	f2c0 0302 	movt	r3, #2
   16da6:	4614      	mov	r4, r2
   16da8:	461d      	mov	r5, r3
   16daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16dac:	6020      	str	r0, [r4, #0]
   16dae:	6061      	str	r1, [r4, #4]
   16db0:	60a2      	str	r2, [r4, #8]
   16db2:	60e3      	str	r3, [r4, #12]
   16db4:	e01b      	b.n	16dee <IsoError+0xf2>
		case NO_DATA: strcpy(pcTrk, "No readable data"); break;
   16db6:	683a      	ldr	r2, [r7, #0]
   16db8:	f245 3310 	movw	r3, #21264	; 0x5310
   16dbc:	f2c0 0302 	movt	r3, #2
   16dc0:	4615      	mov	r5, r2
   16dc2:	461c      	mov	r4, r3
   16dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16dc6:	6028      	str	r0, [r5, #0]
   16dc8:	6069      	str	r1, [r5, #4]
   16dca:	60aa      	str	r2, [r5, #8]
   16dcc:	60eb      	str	r3, [r5, #12]
   16dce:	7823      	ldrb	r3, [r4, #0]
   16dd0:	742b      	strb	r3, [r5, #16]
   16dd2:	e00c      	b.n	16dee <IsoError+0xf2>
		default:      strcpy(pcTrk, "Unknown error");    break;
   16dd4:	683a      	ldr	r2, [r7, #0]
   16dd6:	f245 3324 	movw	r3, #21284	; 0x5324
   16dda:	f2c0 0302 	movt	r3, #2
   16dde:	4614      	mov	r4, r2
   16de0:	cb07      	ldmia	r3!, {r0, r1, r2}
   16de2:	6020      	str	r0, [r4, #0]
   16de4:	6061      	str	r1, [r4, #4]
   16de6:	60a2      	str	r2, [r4, #8]
   16de8:	881b      	ldrh	r3, [r3, #0]
   16dea:	81a3      	strh	r3, [r4, #12]
   16dec:	bf00      	nop
	}
}
   16dee:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16df2:	f2c0 0302 	movt	r3, #2
   16df6:	68fa      	ldr	r2, [r7, #12]
   16df8:	681b      	ldr	r3, [r3, #0]
   16dfa:	429a      	cmp	r2, r3
   16dfc:	d001      	beq.n	16e02 <IsoError+0x106>
   16dfe:	f7f2 f8d1 	bl	8fa4 <__stack_chk_fail>
   16e02:	f107 0710 	add.w	r7, r7, #16
   16e06:	46bd      	mov	sp, r7
   16e08:	bdb0      	pop	{r4, r5, r7, pc}
   16e0a:	bf00      	nop

00016e0c <Magnetic>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void Magnetic(void)
{
   16e0c:	b5b0      	push	{r4, r5, r7, lr}
   16e0e:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
   16e12:	af02      	add	r7, sp, #8
   16e14:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   16e18:	f2c0 0302 	movt	r3, #2
   16e1c:	681b      	ldr	r3, [r3, #0]
   16e1e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	// Local variables
    // ***************
	T_GL_HWIDGET hScreen=NULL;
   16e22:	1d3b      	adds	r3, r7, #4
   16e24:	2200      	movs	r2, #0
   16e26:	601a      	str	r2, [r3, #0]
    Telium_File_t *hMag31=NULL, *hMag2=NULL, *hMag3=NULL;
   16e28:	f107 0308 	add.w	r3, r7, #8
   16e2c:	2200      	movs	r2, #0
   16e2e:	601a      	str	r2, [r3, #0]
   16e30:	f107 030c 	add.w	r3, r7, #12
   16e34:	2200      	movs	r2, #0
   16e36:	601a      	str	r2, [r3, #0]
   16e38:	f107 0310 	add.w	r3, r7, #16
   16e3c:	2200      	movs	r2, #0
   16e3e:	601a      	str	r2, [r3, #0]
	byte ucLen=0;
   16e40:	1cfb      	adds	r3, r7, #3
   16e42:	2200      	movs	r2, #0
   16e44:	701a      	strb	r2, [r3, #0]
    int iSta;
    char tcTmp[128];
    char *pcSrc, *pcDst;
    char tcTrk1[128], tcTrk2[128], tcTrk3[128];
	int iKey, iTimeout=0, iRet;
   16e46:	f107 031c 	add.w	r3, r7, #28
   16e4a:	2200      	movs	r2, #0
   16e4c:	601a      	str	r2, [r3, #0]

	// Swipe card in progress
	// **********************
	strcpy(tcTrk1, "No readable data");               // By default
   16e4e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
   16e52:	f245 3310 	movw	r3, #21264	; 0x5310
   16e56:	f2c0 0302 	movt	r3, #2
   16e5a:	4614      	mov	r4, r2
   16e5c:	461d      	mov	r5, r3
   16e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16e62:	682b      	ldr	r3, [r5, #0]
   16e64:	7023      	strb	r3, [r4, #0]
	strcpy(tcTrk2, "No readable data");
   16e66:	f507 7296 	add.w	r2, r7, #300	; 0x12c
   16e6a:	f245 3310 	movw	r3, #21264	; 0x5310
   16e6e:	f2c0 0302 	movt	r3, #2
   16e72:	4614      	mov	r4, r2
   16e74:	461d      	mov	r5, r3
   16e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16e7a:	682b      	ldr	r3, [r5, #0]
   16e7c:	7023      	strb	r3, [r4, #0]
	strcpy(tcTrk3, "No readable data");
   16e7e:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
   16e82:	f245 3310 	movw	r3, #21264	; 0x5310
   16e86:	f2c0 0302 	movt	r3, #2
   16e8a:	4614      	mov	r4, r2
   16e8c:	461d      	mov	r5, r3
   16e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16e92:	682b      	ldr	r3, [r5, #0]
   16e94:	7023      	strb	r3, [r4, #0]

	// Open peripherals
	// ================
	if (IsISO1() == 1)
   16e96:	f009 fb91 	bl	205bc <IsISO1>
   16e9a:	4603      	mov	r3, r0
   16e9c:	2b01      	cmp	r3, #1
   16e9e:	d112      	bne.n	16ec6 <Magnetic+0xba>
	{
		hMag31 = Telium_Fopen("SWIPE31", "r*");       // Open mag1 peripheral
   16ea0:	f107 0408 	add.w	r4, r7, #8
   16ea4:	f245 3034 	movw	r0, #21300	; 0x5334
   16ea8:	f2c0 0002 	movt	r0, #2
   16eac:	f245 313c 	movw	r1, #21308	; 0x533c
   16eb0:	f2c0 0102 	movt	r1, #2
   16eb4:	f008 fdd2 	bl	1fa5c <Telium_Fopen>
   16eb8:	6020      	str	r0, [r4, #0]
		CHECK(hMag31, lblKO);
   16eba:	f107 0308 	add.w	r3, r7, #8
   16ebe:	681b      	ldr	r3, [r3, #0]
   16ec0:	2b00      	cmp	r3, #0
   16ec2:	f000 82b1 	beq.w	17428 <Magnetic+0x61c>
	}
    if (IsISO2() == 1)
   16ec6:	f009 fba7 	bl	20618 <IsISO2>
   16eca:	4603      	mov	r3, r0
   16ecc:	2b01      	cmp	r3, #1
   16ece:	d112      	bne.n	16ef6 <Magnetic+0xea>
    {
    	hMag2 = Telium_Fopen("SWIPE2", "r*");         // Open mag2 peripheral
   16ed0:	f107 040c 	add.w	r4, r7, #12
   16ed4:	f245 3040 	movw	r0, #21312	; 0x5340
   16ed8:	f2c0 0002 	movt	r0, #2
   16edc:	f245 313c 	movw	r1, #21308	; 0x533c
   16ee0:	f2c0 0102 	movt	r1, #2
   16ee4:	f008 fdba 	bl	1fa5c <Telium_Fopen>
   16ee8:	6020      	str	r0, [r4, #0]
    	CHECK(hMag2, lblKO);
   16eea:	f107 030c 	add.w	r3, r7, #12
   16eee:	681b      	ldr	r3, [r3, #0]
   16ef0:	2b00      	cmp	r3, #0
   16ef2:	f000 8299 	beq.w	17428 <Magnetic+0x61c>
    }
    if (IsISO3() == 1)
   16ef6:	f009 fbbd 	bl	20674 <IsISO3>
   16efa:	4603      	mov	r3, r0
   16efc:	2b01      	cmp	r3, #1
   16efe:	d112      	bne.n	16f26 <Magnetic+0x11a>
    {
    	hMag3 = Telium_Fopen("SWIPE3", "r*");         // Open mag3 peripheral
   16f00:	f107 0410 	add.w	r4, r7, #16
   16f04:	f245 3048 	movw	r0, #21320	; 0x5348
   16f08:	f2c0 0002 	movt	r0, #2
   16f0c:	f245 313c 	movw	r1, #21308	; 0x533c
   16f10:	f2c0 0102 	movt	r1, #2
   16f14:	f008 fda2 	bl	1fa5c <Telium_Fopen>
   16f18:	6020      	str	r0, [r4, #0]
    	CHECK(hMag3, lblKO);
   16f1a:	f107 0310 	add.w	r3, r7, #16
   16f1e:	681b      	ldr	r3, [r3, #0]
   16f20:	2b00      	cmp	r3, #0
   16f22:	f000 8281 	beq.w	17428 <Magnetic+0x61c>
    }

    // Prompt Swipe a card
    // ===================
	hScreen = GoalCreateScreen(gGoalGraphicLibInstance, txMagnetic, NUMBER_OF_LINES(txMagnetic), GL_ENCODING_UTF8);
   16f26:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   16f2a:	f2c0 0302 	movt	r3, #2
   16f2e:	681b      	ldr	r3, [r3, #0]
   16f30:	4618      	mov	r0, r3
   16f32:	f644 416c 	movw	r1, #19564	; 0x4c6c
   16f36:	f2c0 0102 	movt	r1, #2
   16f3a:	2203      	movs	r2, #3
   16f3c:	2300      	movs	r3, #0
   16f3e:	f7f6 f8c7 	bl	d0d0 <GoalCreateScreen>
   16f42:	4602      	mov	r2, r0
   16f44:	1d3b      	adds	r3, r7, #4
   16f46:	601a      	str	r2, [r3, #0]
	CHECK(hScreen!=NULL, lblKO);                      // Create screen and clear it
   16f48:	1d3b      	adds	r3, r7, #4
   16f4a:	681b      	ldr	r3, [r3, #0]
   16f4c:	2b00      	cmp	r3, #0
   16f4e:	f000 826b 	beq.w	17428 <Magnetic+0x61c>
	iRet = GoalClrScreen(hScreen, GL_COLOR_TRANSPARENT, KEY_CANCEL, false);
   16f52:	1d3b      	adds	r3, r7, #4
   16f54:	681b      	ldr	r3, [r3, #0]
   16f56:	f107 0420 	add.w	r4, r7, #32
   16f5a:	4618      	mov	r0, r3
   16f5c:	2100      	movs	r1, #0
   16f5e:	2202      	movs	r2, #2
   16f60:	2300      	movs	r3, #0
   16f62:	f7f6 fa53 	bl	d40c <GoalClrScreen>
   16f66:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
   16f68:	f107 0320 	add.w	r3, r7, #32
   16f6c:	681b      	ldr	r3, [r3, #0]
   16f6e:	2b00      	cmp	r3, #0
   16f70:	f2c0 825a 	blt.w	17428 <Magnetic+0x61c>

	iRet = GoalDspLine(hScreen, 0, "Please Swipe", &txMagnetic[0], 0, false);
   16f74:	1d3b      	adds	r3, r7, #4
   16f76:	681b      	ldr	r3, [r3, #0]
   16f78:	f107 0420 	add.w	r4, r7, #32
   16f7c:	2200      	movs	r2, #0
   16f7e:	9200      	str	r2, [sp, #0]
   16f80:	2200      	movs	r2, #0
   16f82:	9201      	str	r2, [sp, #4]
   16f84:	4618      	mov	r0, r3
   16f86:	2100      	movs	r1, #0
   16f88:	f245 3250 	movw	r2, #21328	; 0x5350
   16f8c:	f2c0 0202 	movt	r2, #2
   16f90:	f644 436c 	movw	r3, #19564	; 0x4c6c
   16f94:	f2c0 0302 	movt	r3, #2
   16f98:	f7f6 fb52 	bl	d640 <GoalDspLine>
   16f9c:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);                            // Prompt for a swiping card
   16f9e:	f107 0320 	add.w	r3, r7, #32
   16fa2:	681b      	ldr	r3, [r3, #0]
   16fa4:	2b00      	cmp	r3, #0
   16fa6:	f2c0 823f 	blt.w	17428 <Magnetic+0x61c>
	iRet = GoalDspLine(hScreen, 1, "Magnetic Card", &txMagnetic[1], 0, true);
   16faa:	1d3b      	adds	r3, r7, #4
   16fac:	681b      	ldr	r3, [r3, #0]
   16fae:	f107 0420 	add.w	r4, r7, #32
   16fb2:	2200      	movs	r2, #0
   16fb4:	9200      	str	r2, [sp, #0]
   16fb6:	2201      	movs	r2, #1
   16fb8:	9201      	str	r2, [sp, #4]
   16fba:	4618      	mov	r0, r3
   16fbc:	2101      	movs	r1, #1
   16fbe:	f245 3260 	movw	r2, #21344	; 0x5360
   16fc2:	f2c0 0202 	movt	r2, #2
   16fc6:	4baf      	ldr	r3, [pc, #700]	; (17284 <Magnetic+0x478>)
   16fc8:	f7f6 fb3a 	bl	d640 <GoalDspLine>
   16fcc:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
   16fce:	f107 0320 	add.w	r3, r7, #32
   16fd2:	681b      	ldr	r3, [r3, #0]
   16fd4:	2b00      	cmp	r3, #0
   16fd6:	f2c0 8227 	blt.w	17428 <Magnetic+0x61c>

	// Wait for magnetic card
	// ======================
    iRet = TimerStart(0, 30*1000);                                   // Timer0 starts to 30s
   16fda:	f107 0420 	add.w	r4, r7, #32
   16fde:	2000      	movs	r0, #0
   16fe0:	f247 5130 	movw	r1, #30000	; 0x7530
   16fe4:	f7fa fa3a 	bl	1145c <TimerStart>
   16fe8:	6020      	str	r0, [r4, #0]
    CHECK(iRet>=0, lblKO);
   16fea:	f107 0320 	add.w	r3, r7, #32
   16fee:	681b      	ldr	r3, [r3, #0]
   16ff0:	2b00      	cmp	r3, #0
   16ff2:	f2c0 8219 	blt.w	17428 <Magnetic+0x61c>
	do
	{
		iSta = Telium_Ttestall(SWIPE31 | SWIPE2 | SWIPE3, 10);       // Wait for the first event SWIPE31
   16ff6:	f44f 7020 	mov.w	r0, #640	; 0x280
   16ffa:	f2c0 0040 	movt	r0, #64	; 0x40
   16ffe:	210a      	movs	r1, #10
   17000:	f008 ff1a 	bl	1fe38 <Telium_Ttestall>
   17004:	4602      	mov	r2, r0
   17006:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1700a:	601a      	str	r2, [r3, #0]
		if (iSta != 0)
   1700c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   17010:	681b      	ldr	r3, [r3, #0]
   17012:	2b00      	cmp	r3, #0
   17014:	d125      	bne.n	17062 <Magnetic+0x256>
			break;                                                   // Swipe detected
		iKey = GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 100, false);         // Get key pressed/touched (shortcut)
   17016:	1d3b      	adds	r3, r7, #4
   17018:	681a      	ldr	r2, [r3, #0]
   1701a:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   1701e:	f2c0 0302 	movt	r3, #2
   17022:	681b      	ldr	r3, [r3, #0]
   17024:	f107 0428 	add.w	r4, r7, #40	; 0x28
   17028:	2100      	movs	r1, #0
   1702a:	9100      	str	r1, [sp, #0]
   1702c:	4610      	mov	r0, r2
   1702e:	4619      	mov	r1, r3
   17030:	2201      	movs	r2, #1
   17032:	2364      	movs	r3, #100	; 0x64
   17034:	f7f6 fe3a 	bl	dcac <GoalGetKey>
   17038:	6020      	str	r0, [r4, #0]
		CHECK(iKey!=GL_KEY_CANCEL, lblEnd);                          // Exit on cancel key
   1703a:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1703e:	681a      	ldr	r2, [r3, #0]
   17040:	f64f 0351 	movw	r3, #63569	; 0xf851
   17044:	429a      	cmp	r2, r3
   17046:	f000 8203 	beq.w	17450 <Magnetic+0x644>
		iTimeout = TimerGet(0);                                      // Retrieve timer value
   1704a:	f107 041c 	add.w	r4, r7, #28
   1704e:	2000      	movs	r0, #0
   17050:	f7fa fa54 	bl	114fc <TimerGet>
   17054:	6020      	str	r0, [r4, #0]
	}while(iTimeout>0);
   17056:	f107 031c 	add.w	r3, r7, #28
   1705a:	681b      	ldr	r3, [r3, #0]
   1705c:	2b00      	cmp	r3, #0
   1705e:	dcca      	bgt.n	16ff6 <Magnetic+0x1ea>
   17060:	e000      	b.n	17064 <Magnetic+0x258>
    CHECK(iRet>=0, lblKO);
	do
	{
		iSta = Telium_Ttestall(SWIPE31 | SWIPE2 | SWIPE3, 10);       // Wait for the first event SWIPE31
		if (iSta != 0)
			break;                                                   // Swipe detected
   17062:	bf00      	nop
		iKey = GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 100, false);         // Get key pressed/touched (shortcut)
		CHECK(iKey!=GL_KEY_CANCEL, lblEnd);                          // Exit on cancel key
		iTimeout = TimerGet(0);                                      // Retrieve timer value
	}while(iTimeout>0);

	CHECK(iTimeout!=0, lblEnd);                                      // Exit on timeout
   17064:	f107 031c 	add.w	r3, r7, #28
   17068:	681b      	ldr	r3, [r3, #0]
   1706a:	2b00      	cmp	r3, #0
   1706c:	f000 81f0 	beq.w	17450 <Magnetic+0x644>

	iSta |= Telium_Ttestall(iSta ^ (SWIPE31 | SWIPE2 | SWIPE3), 10); // Wait for the second event SWIPE2
   17070:	f107 0324 	add.w	r3, r7, #36	; 0x24
   17074:	681b      	ldr	r3, [r3, #0]
   17076:	f483 0380 	eor.w	r3, r3, #4194304	; 0x400000
   1707a:	f483 7320 	eor.w	r3, r3, #640	; 0x280
   1707e:	4618      	mov	r0, r3
   17080:	210a      	movs	r1, #10
   17082:	f008 fed9 	bl	1fe38 <Telium_Ttestall>
   17086:	4602      	mov	r2, r0
   17088:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1708c:	681b      	ldr	r3, [r3, #0]
   1708e:	431a      	orrs	r2, r3
   17090:	f107 0324 	add.w	r3, r7, #36	; 0x24
   17094:	601a      	str	r2, [r3, #0]
	iSta |= Telium_Ttestall(iSta ^ (SWIPE31 | SWIPE2 | SWIPE3), 10); // Wait for the third event SWIPE3
   17096:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1709a:	681b      	ldr	r3, [r3, #0]
   1709c:	f483 0380 	eor.w	r3, r3, #4194304	; 0x400000
   170a0:	f483 7320 	eor.w	r3, r3, #640	; 0x280
   170a4:	4618      	mov	r0, r3
   170a6:	210a      	movs	r1, #10
   170a8:	f008 fec6 	bl	1fe38 <Telium_Ttestall>
   170ac:	4602      	mov	r2, r0
   170ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
   170b2:	681b      	ldr	r3, [r3, #0]
   170b4:	431a      	orrs	r2, r3
   170b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
   170ba:	601a      	str	r2, [r3, #0]

	// Retrieve and analyze ISO1
	// =========================
	if(iSta & SWIPE31)
   170bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
   170c0:	681b      	ldr	r3, [r3, #0]
   170c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
   170c6:	2b00      	cmp	r3, #0
   170c8:	d07b      	beq.n	171c2 <Magnetic+0x3b6>
	{
		memset(tcTmp, 0, sizeof(tcTmp));
   170ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   170ce:	4618      	mov	r0, r3
   170d0:	2100      	movs	r1, #0
   170d2:	2280      	movs	r2, #128	; 0x80
   170d4:	f7f1 ed72 	blx	8bbc <_init+0x5c>
	    memset(tcTrk1, 0, sizeof(tcTrk1));
   170d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   170dc:	4618      	mov	r0, r3
   170de:	2100      	movs	r1, #0
   170e0:	2280      	movs	r2, #128	; 0x80
   170e2:	f7f1 ed6c 	blx	8bbc <_init+0x5c>
		iRet = Telium_Is_iso1(hMag31, &ucLen, (byte*)tcTmp); // *** Read ISO1 to ascii format ***
   170e6:	f107 0420 	add.w	r4, r7, #32
   170ea:	f107 0108 	add.w	r1, r7, #8
   170ee:	1cfa      	adds	r2, r7, #3
   170f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   170f4:	6808      	ldr	r0, [r1, #0]
   170f6:	4611      	mov	r1, r2
   170f8:	461a      	mov	r2, r3
   170fa:	f008 fd11 	bl	1fb20 <Telium_Is_iso1>
   170fe:	6020      	str	r0, [r4, #0]
		if (iRet != ISO_OK)
   17100:	f107 0320 	add.w	r3, r7, #32
   17104:	681b      	ldr	r3, [r3, #0]
   17106:	2b00      	cmp	r3, #0
   17108:	d008      	beq.n	1711c <Magnetic+0x310>
			IsoError (iRet, tcTrk1);
   1710a:	f107 0220 	add.w	r2, r7, #32
   1710e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   17112:	6810      	ldr	r0, [r2, #0]
   17114:	4619      	mov	r1, r3
   17116:	f7ff fdf1 	bl	16cfc <IsoError>
   1711a:	e052      	b.n	171c2 <Magnetic+0x3b6>
		else
		{
			CHECK(strlen(tcTmp)<128, lblKO);
   1711c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17120:	4618      	mov	r0, r3
   17122:	f7f1 edb0 	blx	8c84 <_init+0x124>
   17126:	4603      	mov	r3, r0
   17128:	2b7f      	cmp	r3, #127	; 0x7f
   1712a:	f200 817d 	bhi.w	17428 <Magnetic+0x61c>
			pcSrc = tcTmp;
   1712e:	f107 0314 	add.w	r3, r7, #20
   17132:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   17136:	601a      	str	r2, [r3, #0]
			pcDst = tcTrk1;
   17138:	f107 0318 	add.w	r3, r7, #24
   1713c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
   17140:	601a      	str	r2, [r3, #0]
			while(*pcSrc) {                                  // Find start sentinel
   17142:	e011      	b.n	17168 <Magnetic+0x35c>
				if(*pcSrc++ == '%')
   17144:	f107 0314 	add.w	r3, r7, #20
   17148:	681b      	ldr	r3, [r3, #0]
   1714a:	781b      	ldrb	r3, [r3, #0]
   1714c:	2b25      	cmp	r3, #37	; 0x25
   1714e:	bf14      	ite	ne
   17150:	2300      	movne	r3, #0
   17152:	2301      	moveq	r3, #1
   17154:	b2db      	uxtb	r3, r3
   17156:	f107 0214 	add.w	r2, r7, #20
   1715a:	f107 0114 	add.w	r1, r7, #20
   1715e:	6809      	ldr	r1, [r1, #0]
   17160:	3101      	adds	r1, #1
   17162:	6011      	str	r1, [r2, #0]
   17164:	2b00      	cmp	r3, #0
   17166:	d106      	bne.n	17176 <Magnetic+0x36a>
		else
		{
			CHECK(strlen(tcTmp)<128, lblKO);
			pcSrc = tcTmp;
			pcDst = tcTrk1;
			while(*pcSrc) {                                  // Find start sentinel
   17168:	f107 0314 	add.w	r3, r7, #20
   1716c:	681b      	ldr	r3, [r3, #0]
   1716e:	781b      	ldrb	r3, [r3, #0]
   17170:	2b00      	cmp	r3, #0
   17172:	d1e7      	bne.n	17144 <Magnetic+0x338>
				if(*pcSrc++ == '%')
					break;
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   17174:	e01d      	b.n	171b2 <Magnetic+0x3a6>
			CHECK(strlen(tcTmp)<128, lblKO);
			pcSrc = tcTmp;
			pcDst = tcTrk1;
			while(*pcSrc) {                                  // Find start sentinel
				if(*pcSrc++ == '%')
					break;
   17176:	bf00      	nop
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   17178:	e01b      	b.n	171b2 <Magnetic+0x3a6>
				if(*pcSrc == '?')
   1717a:	f107 0314 	add.w	r3, r7, #20
   1717e:	681b      	ldr	r3, [r3, #0]
   17180:	781b      	ldrb	r3, [r3, #0]
   17182:	2b3f      	cmp	r3, #63	; 0x3f
   17184:	d01c      	beq.n	171c0 <Magnetic+0x3b4>
					break;
				*pcDst++ = *pcSrc++;
   17186:	f107 0314 	add.w	r3, r7, #20
   1718a:	681b      	ldr	r3, [r3, #0]
   1718c:	781a      	ldrb	r2, [r3, #0]
   1718e:	f107 0318 	add.w	r3, r7, #24
   17192:	681b      	ldr	r3, [r3, #0]
   17194:	701a      	strb	r2, [r3, #0]
   17196:	f107 0318 	add.w	r3, r7, #24
   1719a:	f107 0218 	add.w	r2, r7, #24
   1719e:	6812      	ldr	r2, [r2, #0]
   171a0:	3201      	adds	r2, #1
   171a2:	601a      	str	r2, [r3, #0]
   171a4:	f107 0314 	add.w	r3, r7, #20
   171a8:	f107 0214 	add.w	r2, r7, #20
   171ac:	6812      	ldr	r2, [r2, #0]
   171ae:	3201      	adds	r2, #1
   171b0:	601a      	str	r2, [r3, #0]
			pcDst = tcTrk1;
			while(*pcSrc) {                                  // Find start sentinel
				if(*pcSrc++ == '%')
					break;
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   171b2:	f107 0314 	add.w	r3, r7, #20
   171b6:	681b      	ldr	r3, [r3, #0]
   171b8:	781b      	ldrb	r3, [r3, #0]
   171ba:	2b00      	cmp	r3, #0
   171bc:	d1dd      	bne.n	1717a <Magnetic+0x36e>
   171be:	e000      	b.n	171c2 <Magnetic+0x3b6>
				if(*pcSrc == '?')
					break;
   171c0:	bf00      	nop
		}
	}

	// Retrieve and analyze ISO2
	// =========================
	if(iSta & SWIPE2)
   171c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
   171c6:	681b      	ldr	r3, [r3, #0]
   171c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   171cc:	2b00      	cmp	r3, #0
   171ce:	f000 808a 	beq.w	172e6 <Magnetic+0x4da>
	{
		memset(tcTmp, 0, sizeof(tcTmp));
   171d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   171d6:	4618      	mov	r0, r3
   171d8:	2100      	movs	r1, #0
   171da:	2280      	movs	r2, #128	; 0x80
   171dc:	f7f1 ecee 	blx	8bbc <_init+0x5c>
	    memset(tcTrk2, 0, sizeof(tcTrk2));
   171e0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
   171e4:	4618      	mov	r0, r3
   171e6:	2100      	movs	r1, #0
   171e8:	2280      	movs	r2, #128	; 0x80
   171ea:	f7f1 ece8 	blx	8bbc <_init+0x5c>
		iRet = Telium_Is_iso2(hMag2, &ucLen, (byte*)tcTmp);  // *** Read ISO2 to ascii format ***
   171ee:	f107 0420 	add.w	r4, r7, #32
   171f2:	f107 010c 	add.w	r1, r7, #12
   171f6:	1cfa      	adds	r2, r7, #3
   171f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   171fc:	6808      	ldr	r0, [r1, #0]
   171fe:	4611      	mov	r1, r2
   17200:	461a      	mov	r2, r3
   17202:	f008 fcbf 	bl	1fb84 <Telium_Is_iso2>
   17206:	6020      	str	r0, [r4, #0]
		if (iRet != ISO_OK)
   17208:	f107 0320 	add.w	r3, r7, #32
   1720c:	681b      	ldr	r3, [r3, #0]
   1720e:	2b00      	cmp	r3, #0
   17210:	d008      	beq.n	17224 <Magnetic+0x418>
			IsoError (iRet, tcTrk2);
   17212:	f107 0220 	add.w	r2, r7, #32
   17216:	f507 7396 	add.w	r3, r7, #300	; 0x12c
   1721a:	6810      	ldr	r0, [r2, #0]
   1721c:	4619      	mov	r1, r3
   1721e:	f7ff fd6d 	bl	16cfc <IsoError>
   17222:	e060      	b.n	172e6 <Magnetic+0x4da>
		else
		{
			CHECK(strlen(tcTmp)<128, lblKO);
   17224:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17228:	4618      	mov	r0, r3
   1722a:	f7f1 ed2c 	blx	8c84 <_init+0x124>
   1722e:	4603      	mov	r3, r0
   17230:	2b7f      	cmp	r3, #127	; 0x7f
   17232:	f200 80f9 	bhi.w	17428 <Magnetic+0x61c>
			pcSrc = tcTmp;
   17236:	f107 0314 	add.w	r3, r7, #20
   1723a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   1723e:	601a      	str	r2, [r3, #0]
			pcDst = tcTrk2;
   17240:	f107 0318 	add.w	r3, r7, #24
   17244:	f507 7296 	add.w	r2, r7, #300	; 0x12c
   17248:	601a      	str	r2, [r3, #0]
			while(*pcSrc) {                                  // Find start sentinel
   1724a:	e011      	b.n	17270 <Magnetic+0x464>
				if(*pcSrc++ == 'B')
   1724c:	f107 0314 	add.w	r3, r7, #20
   17250:	681b      	ldr	r3, [r3, #0]
   17252:	781b      	ldrb	r3, [r3, #0]
   17254:	2b42      	cmp	r3, #66	; 0x42
   17256:	bf14      	ite	ne
   17258:	2300      	movne	r3, #0
   1725a:	2301      	moveq	r3, #1
   1725c:	b2db      	uxtb	r3, r3
   1725e:	f107 0214 	add.w	r2, r7, #20
   17262:	f107 0114 	add.w	r1, r7, #20
   17266:	6809      	ldr	r1, [r1, #0]
   17268:	3101      	adds	r1, #1
   1726a:	6011      	str	r1, [r2, #0]
   1726c:	2b00      	cmp	r3, #0
   1726e:	d106      	bne.n	1727e <Magnetic+0x472>
		else
		{
			CHECK(strlen(tcTmp)<128, lblKO);
			pcSrc = tcTmp;
			pcDst = tcTrk2;
			while(*pcSrc) {                                  // Find start sentinel
   17270:	f107 0314 	add.w	r3, r7, #20
   17274:	681b      	ldr	r3, [r3, #0]
   17276:	781b      	ldrb	r3, [r3, #0]
   17278:	2b00      	cmp	r3, #0
   1727a:	d1e7      	bne.n	1724c <Magnetic+0x440>
				if(*pcSrc++ == 'B')
					break;
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   1727c:	e02b      	b.n	172d6 <Magnetic+0x4ca>
			CHECK(strlen(tcTmp)<128, lblKO);
			pcSrc = tcTmp;
			pcDst = tcTrk2;
			while(*pcSrc) {                                  // Find start sentinel
				if(*pcSrc++ == 'B')
					break;
   1727e:	bf00      	nop
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   17280:	e029      	b.n	172d6 <Magnetic+0x4ca>
   17282:	bf00      	nop
   17284:	00024d18 	.word	0x00024d18
				if(*pcSrc == 'F')
   17288:	f107 0314 	add.w	r3, r7, #20
   1728c:	681b      	ldr	r3, [r3, #0]
   1728e:	781b      	ldrb	r3, [r3, #0]
   17290:	2b46      	cmp	r3, #70	; 0x46
   17292:	d027      	beq.n	172e4 <Magnetic+0x4d8>
					break;
				if(*pcSrc == 'D')
   17294:	f107 0314 	add.w	r3, r7, #20
   17298:	681b      	ldr	r3, [r3, #0]
   1729a:	781b      	ldrb	r3, [r3, #0]
   1729c:	2b44      	cmp	r3, #68	; 0x44
   1729e:	d104      	bne.n	172aa <Magnetic+0x49e>
					*pcSrc = '=';
   172a0:	f107 0314 	add.w	r3, r7, #20
   172a4:	681b      	ldr	r3, [r3, #0]
   172a6:	223d      	movs	r2, #61	; 0x3d
   172a8:	701a      	strb	r2, [r3, #0]
				*pcDst++ = *pcSrc++;
   172aa:	f107 0314 	add.w	r3, r7, #20
   172ae:	681b      	ldr	r3, [r3, #0]
   172b0:	781a      	ldrb	r2, [r3, #0]
   172b2:	f107 0318 	add.w	r3, r7, #24
   172b6:	681b      	ldr	r3, [r3, #0]
   172b8:	701a      	strb	r2, [r3, #0]
   172ba:	f107 0318 	add.w	r3, r7, #24
   172be:	f107 0218 	add.w	r2, r7, #24
   172c2:	6812      	ldr	r2, [r2, #0]
   172c4:	3201      	adds	r2, #1
   172c6:	601a      	str	r2, [r3, #0]
   172c8:	f107 0314 	add.w	r3, r7, #20
   172cc:	f107 0214 	add.w	r2, r7, #20
   172d0:	6812      	ldr	r2, [r2, #0]
   172d2:	3201      	adds	r2, #1
   172d4:	601a      	str	r2, [r3, #0]
			pcDst = tcTrk2;
			while(*pcSrc) {                                  // Find start sentinel
				if(*pcSrc++ == 'B')
					break;
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   172d6:	f107 0314 	add.w	r3, r7, #20
   172da:	681b      	ldr	r3, [r3, #0]
   172dc:	781b      	ldrb	r3, [r3, #0]
   172de:	2b00      	cmp	r3, #0
   172e0:	d1d2      	bne.n	17288 <Magnetic+0x47c>
   172e2:	e000      	b.n	172e6 <Magnetic+0x4da>
				if(*pcSrc == 'F')
					break;
   172e4:	bf00      	nop
		}
	}

	// Retrieve and analyze ISO3
	// =========================
	if(iSta & SWIPE3)
   172e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
   172ea:	681b      	ldr	r3, [r3, #0]
   172ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
   172f0:	2b00      	cmp	r3, #0
   172f2:	f000 8086 	beq.w	17402 <Magnetic+0x5f6>
	{
		memset(tcTmp, 0, sizeof(tcTmp));
   172f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   172fa:	4618      	mov	r0, r3
   172fc:	2100      	movs	r1, #0
   172fe:	2280      	movs	r2, #128	; 0x80
   17300:	f7f1 ec5c 	blx	8bbc <_init+0x5c>
	    memset(tcTrk3, 0, sizeof(tcTrk3));
   17304:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
   17308:	4618      	mov	r0, r3
   1730a:	2100      	movs	r1, #0
   1730c:	2280      	movs	r2, #128	; 0x80
   1730e:	f7f1 ec56 	blx	8bbc <_init+0x5c>
		iRet = Telium_Is_iso3(hMag3, &ucLen, (byte*)tcTmp);  // *** Read ISO3 to ascii format ***
   17312:	f107 0420 	add.w	r4, r7, #32
   17316:	f107 0110 	add.w	r1, r7, #16
   1731a:	1cfa      	adds	r2, r7, #3
   1731c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   17320:	6808      	ldr	r0, [r1, #0]
   17322:	4611      	mov	r1, r2
   17324:	461a      	mov	r2, r3
   17326:	f008 fc5f 	bl	1fbe8 <Telium_Is_iso3>
   1732a:	6020      	str	r0, [r4, #0]
		if (iRet != ISO_OK)
   1732c:	f107 0320 	add.w	r3, r7, #32
   17330:	681b      	ldr	r3, [r3, #0]
   17332:	2b00      	cmp	r3, #0
   17334:	d008      	beq.n	17348 <Magnetic+0x53c>
			IsoError (iRet, tcTrk3);
   17336:	f107 0220 	add.w	r2, r7, #32
   1733a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
   1733e:	6810      	ldr	r0, [r2, #0]
   17340:	4619      	mov	r1, r3
   17342:	f7ff fcdb 	bl	16cfc <IsoError>
   17346:	e05c      	b.n	17402 <Magnetic+0x5f6>
		else
		{
			CHECK(strlen(tcTmp)<128, lblKO);
   17348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1734c:	4618      	mov	r0, r3
   1734e:	f7f1 ec9a 	blx	8c84 <_init+0x124>
   17352:	4603      	mov	r3, r0
   17354:	2b7f      	cmp	r3, #127	; 0x7f
   17356:	d867      	bhi.n	17428 <Magnetic+0x61c>
			pcSrc = tcTmp;
   17358:	f107 0314 	add.w	r3, r7, #20
   1735c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   17360:	601a      	str	r2, [r3, #0]
			pcDst = tcTrk3;
   17362:	f107 0318 	add.w	r3, r7, #24
   17366:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
   1736a:	601a      	str	r2, [r3, #0]
			while(*pcSrc) {                                  // Find start sentinel
   1736c:	e011      	b.n	17392 <Magnetic+0x586>
				if(*pcSrc++ == 'B')
   1736e:	f107 0314 	add.w	r3, r7, #20
   17372:	681b      	ldr	r3, [r3, #0]
   17374:	781b      	ldrb	r3, [r3, #0]
   17376:	2b42      	cmp	r3, #66	; 0x42
   17378:	bf14      	ite	ne
   1737a:	2300      	movne	r3, #0
   1737c:	2301      	moveq	r3, #1
   1737e:	b2db      	uxtb	r3, r3
   17380:	f107 0214 	add.w	r2, r7, #20
   17384:	f107 0114 	add.w	r1, r7, #20
   17388:	6809      	ldr	r1, [r1, #0]
   1738a:	3101      	adds	r1, #1
   1738c:	6011      	str	r1, [r2, #0]
   1738e:	2b00      	cmp	r3, #0
   17390:	d106      	bne.n	173a0 <Magnetic+0x594>
		else
		{
			CHECK(strlen(tcTmp)<128, lblKO);
			pcSrc = tcTmp;
			pcDst = tcTrk3;
			while(*pcSrc) {                                  // Find start sentinel
   17392:	f107 0314 	add.w	r3, r7, #20
   17396:	681b      	ldr	r3, [r3, #0]
   17398:	781b      	ldrb	r3, [r3, #0]
   1739a:	2b00      	cmp	r3, #0
   1739c:	d1e7      	bne.n	1736e <Magnetic+0x562>
				if(*pcSrc++ == 'B')
					break;
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   1739e:	e028      	b.n	173f2 <Magnetic+0x5e6>
			CHECK(strlen(tcTmp)<128, lblKO);
			pcSrc = tcTmp;
			pcDst = tcTrk3;
			while(*pcSrc) {                                  // Find start sentinel
				if(*pcSrc++ == 'B')
					break;
   173a0:	bf00      	nop
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   173a2:	e026      	b.n	173f2 <Magnetic+0x5e6>
				if(*pcSrc == 'F')
   173a4:	f107 0314 	add.w	r3, r7, #20
   173a8:	681b      	ldr	r3, [r3, #0]
   173aa:	781b      	ldrb	r3, [r3, #0]
   173ac:	2b46      	cmp	r3, #70	; 0x46
   173ae:	d027      	beq.n	17400 <Magnetic+0x5f4>
					break;
				if(*pcSrc == 'D')
   173b0:	f107 0314 	add.w	r3, r7, #20
   173b4:	681b      	ldr	r3, [r3, #0]
   173b6:	781b      	ldrb	r3, [r3, #0]
   173b8:	2b44      	cmp	r3, #68	; 0x44
   173ba:	d104      	bne.n	173c6 <Magnetic+0x5ba>
					*pcSrc = '=';
   173bc:	f107 0314 	add.w	r3, r7, #20
   173c0:	681b      	ldr	r3, [r3, #0]
   173c2:	223d      	movs	r2, #61	; 0x3d
   173c4:	701a      	strb	r2, [r3, #0]
				*pcDst++ = *pcSrc++;
   173c6:	f107 0314 	add.w	r3, r7, #20
   173ca:	681b      	ldr	r3, [r3, #0]
   173cc:	781a      	ldrb	r2, [r3, #0]
   173ce:	f107 0318 	add.w	r3, r7, #24
   173d2:	681b      	ldr	r3, [r3, #0]
   173d4:	701a      	strb	r2, [r3, #0]
   173d6:	f107 0318 	add.w	r3, r7, #24
   173da:	f107 0218 	add.w	r2, r7, #24
   173de:	6812      	ldr	r2, [r2, #0]
   173e0:	3201      	adds	r2, #1
   173e2:	601a      	str	r2, [r3, #0]
   173e4:	f107 0314 	add.w	r3, r7, #20
   173e8:	f107 0214 	add.w	r2, r7, #20
   173ec:	6812      	ldr	r2, [r2, #0]
   173ee:	3201      	adds	r2, #1
   173f0:	601a      	str	r2, [r3, #0]
			pcDst = tcTrk3;
			while(*pcSrc) {                                  // Find start sentinel
				if(*pcSrc++ == 'B')
					break;
			}
			while(*pcSrc) {                                  // Copy all data between start and end sentinels
   173f2:	f107 0314 	add.w	r3, r7, #20
   173f6:	681b      	ldr	r3, [r3, #0]
   173f8:	781b      	ldrb	r3, [r3, #0]
   173fa:	2b00      	cmp	r3, #0
   173fc:	d1d2      	bne.n	173a4 <Magnetic+0x598>
   173fe:	e000      	b.n	17402 <Magnetic+0x5f6>
				if(*pcSrc == 'F')
					break;
   17400:	bf00      	nop
				*pcDst++ = *pcSrc++;
			}
		}
	}

	mapPut(traTrk2, tcTrk2, strlen(tcTrk2));
   17402:	f507 7396 	add.w	r3, r7, #300	; 0x12c
   17406:	4618      	mov	r0, r3
   17408:	f7f1 ec3c 	blx	8c84 <_init+0x124>
   1740c:	4603      	mov	r3, r0
   1740e:	b29b      	uxth	r3, r3
   17410:	f507 7296 	add.w	r2, r7, #300	; 0x12c
   17414:	201d      	movs	r0, #29
   17416:	4611      	mov	r1, r2
   17418:	461a      	mov	r2, r3
   1741a:	f7ff f8f7 	bl	1660c <mapPut>


	GoalDestroyScreen(&hScreen);                             // Destroy screen
   1741e:	1d3b      	adds	r3, r7, #4
   17420:	4618      	mov	r0, r3
   17422:	f7f6 fda5 	bl	df70 <GoalDestroyScreen>

    goto lblEnd;
   17426:	e013      	b.n	17450 <Magnetic+0x644>

	// Errors treatment
    // ****************
lblKO:                                                       // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   17428:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   1742c:	f2c0 0302 	movt	r3, #2
   17430:	681b      	ldr	r3, [r3, #0]
   17432:	2201      	movs	r2, #1
   17434:	9200      	str	r2, [sp, #0]
   17436:	f241 3288 	movw	r2, #5000	; 0x1388
   1743a:	9201      	str	r2, [sp, #4]
   1743c:	4618      	mov	r0, r3
   1743e:	2100      	movs	r1, #0
   17440:	f245 3270 	movw	r2, #21360	; 0x5370
   17444:	f2c0 0202 	movt	r2, #2
   17448:	2304      	movs	r3, #4
   1744a:	f00a f91d 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   1744e:	bf00      	nop
lblEnd:
	TimerStop(0);                                            // Stop Timer0
   17450:	2000      	movs	r0, #0
   17452:	f7fa f897 	bl	11584 <TimerStop>
    if(hMag2)
   17456:	f107 030c 	add.w	r3, r7, #12
   1745a:	681b      	ldr	r3, [r3, #0]
   1745c:	2b00      	cmp	r3, #0
   1745e:	d004      	beq.n	1746a <Magnetic+0x65e>
		Telium_Fclose(hMag2);                                // Close mag2 peripheral
   17460:	f107 030c 	add.w	r3, r7, #12
   17464:	6818      	ldr	r0, [r3, #0]
   17466:	f008 fac7 	bl	1f9f8 <Telium_Fclose>
	if(hMag3)
   1746a:	f107 0310 	add.w	r3, r7, #16
   1746e:	681b      	ldr	r3, [r3, #0]
   17470:	2b00      	cmp	r3, #0
   17472:	d004      	beq.n	1747e <Magnetic+0x672>
		Telium_Fclose(hMag3);                                // Close mag3 peripheral
   17474:	f107 0310 	add.w	r3, r7, #16
   17478:	6818      	ldr	r0, [r3, #0]
   1747a:	f008 fabd 	bl	1f9f8 <Telium_Fclose>
	if(hMag31)
   1747e:	f107 0308 	add.w	r3, r7, #8
   17482:	681b      	ldr	r3, [r3, #0]
   17484:	2b00      	cmp	r3, #0
   17486:	d004      	beq.n	17492 <Magnetic+0x686>
		Telium_Fclose(hMag31);                               // Close mag31 peripheral
   17488:	f107 0308 	add.w	r3, r7, #8
   1748c:	6818      	ldr	r0, [r3, #0]
   1748e:	f008 fab3 	bl	1f9f8 <Telium_Fclose>
	if (hScreen)
   17492:	1d3b      	adds	r3, r7, #4
   17494:	681b      	ldr	r3, [r3, #0]
   17496:	2b00      	cmp	r3, #0
   17498:	d003      	beq.n	174a2 <Magnetic+0x696>
		GoalDestroyScreen(&hScreen);                         // Destroy screen
   1749a:	1d3b      	adds	r3, r7, #4
   1749c:	4618      	mov	r0, r3
   1749e:	f7f6 fd67 	bl	df70 <GoalDestroyScreen>
}
   174a2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   174a6:	f2c0 0302 	movt	r3, #2
   174aa:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
   174ae:	681b      	ldr	r3, [r3, #0]
   174b0:	429a      	cmp	r2, r3
   174b2:	d001      	beq.n	174b8 <Magnetic+0x6ac>
   174b4:	f7f1 fd76 	bl	8fa4 <__stack_chk_fail>
   174b8:	f507 770c 	add.w	r7, r7, #560	; 0x230
   174bc:	46bd      	mov	sp, r7
   174be:	bdb0      	pop	{r4, r5, r7, pc}

000174c0 <ChkPpdConfig>:
//    >=0 : Right configuration (No pinpad=0 or pinpad present>0 1:B1 2:B2, 3:B3)
//     <0 : Wrong configuration (Wrong pinpad or pinpad missing but required=-1)
//****************************************************************************

static int ChkPpdConfig(void)
{
   174c0:	b580      	push	{r7, lr}
   174c2:	b0a0      	sub	sp, #128	; 0x80
   174c4:	af02      	add	r7, sp, #8
   174c6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   174ca:	f2c0 0302 	movt	r3, #2
   174ce:	681b      	ldr	r3, [r3, #0]
   174d0:	677b      	str	r3, [r7, #116]	; 0x74
	// Local variables
	// ***************
	T_GL_HWIDGET hDocument=NULL;
   174d2:	2300      	movs	r3, #0
   174d4:	60bb      	str	r3, [r7, #8]
	char tcReference[17+1];
	int iRet;

	// Check pinpad configuration from Manager
	// ***************************************
	iRet = PSQ_Is_pinpad();
   174d6:	f008 fe05 	bl	200e4 <PSQ_Est_pinpad>
   174da:	60f8      	str	r0, [r7, #12]
	if (iRet != 0)                                              // Manager asks for a pinpad
   174dc:	68fb      	ldr	r3, [r7, #12]
   174de:	2b00      	cmp	r3, #0
   174e0:	f000 815e 	beq.w	177a0 <ChkPpdConfig+0x2e0>
	{
		memset(tcReference, 0, sizeof(tcReference));
   174e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
   174e8:	4618      	mov	r0, r3
   174ea:	2100      	movs	r1, #0
   174ec:	2212      	movs	r2, #18
   174ee:	f7f1 eb66 	blx	8bbc <_init+0x5c>
		iRet = IsPPSConnected(); CHECK(iRet==RET_PP_OK, lblKO); // Check if pinpad is connected
   174f2:	f008 fe9d 	bl	20230 <IsPPSConnected>
   174f6:	60f8      	str	r0, [r7, #12]
   174f8:	68fb      	ldr	r3, [r7, #12]
   174fa:	2b00      	cmp	r3, #0
   174fc:	f040 80e8 	bne.w	176d0 <ChkPpdConfig+0x210>
		PPS_SendTerminalRefRequestCommand((byte*)tcReference);  // Get pinpad reference (Bug ret is always 0)
   17500:	f107 0360 	add.w	r3, r7, #96	; 0x60
   17504:	4618      	mov	r0, r3
   17506:	f008 fecd 	bl	202a4 <PPS_SendTerminalRefRequestCommand>
		switch (PSQ_Pinpad_Value())
   1750a:	f008 fe21 	bl	20150 <PSQ_donner_type_pinpad>
   1750e:	4603      	mov	r3, r0
   17510:	2b09      	cmp	r3, #9
   17512:	f200 80c5 	bhi.w	176a0 <ChkPpdConfig+0x1e0>
   17516:	a201      	add	r2, pc, #4	; (adr r2, 1751c <ChkPpdConfig+0x5c>)
   17518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1751c:	00017545 	.word	0x00017545
   17520:	0001758d 	.word	0x0001758d
   17524:	000175b1 	.word	0x000175b1
   17528:	000175d5 	.word	0x000175d5
   1752c:	00017569 	.word	0x00017569
   17530:	000175f7 	.word	0x000175f7
   17534:	00017619 	.word	0x00017619
   17538:	0001763b 	.word	0x0001763b
   1753c:	0001765d 	.word	0x0001765d
   17540:	0001767f 	.word	0x0001767f
		{
		case PP30_PPAD:                                         // Pinpad characters no-reader Booster1
			CHECK (memcmp(&tcReference[8], "PP30 ", 5)==0, lblKO);
   17544:	f107 0360 	add.w	r3, r7, #96	; 0x60
   17548:	3308      	adds	r3, #8
   1754a:	4618      	mov	r0, r3
   1754c:	f645 3180 	movw	r1, #23424	; 0x5b80
   17550:	f2c0 0102 	movt	r1, #2
   17554:	2205      	movs	r2, #5
   17556:	f7f1 ebce 	blx	8cf4 <_init+0x194>
   1755a:	4603      	mov	r3, r0
   1755c:	2b00      	cmp	r3, #0
   1755e:	f040 80b7 	bne.w	176d0 <ChkPpdConfig+0x210>
			iRet=BOOSTER_1;
   17562:	2301      	movs	r3, #1
   17564:	60fb      	str	r3, [r7, #12]
			break;
   17566:	e0b2      	b.n	176ce <ChkPpdConfig+0x20e>
		case PP30S_PPAD:                                        // Pinpad characters no-reader Booster2
			CHECK (memcmp(&tcReference[8], "PP30S", 5)==0, lblKO);
   17568:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1756c:	3308      	adds	r3, #8
   1756e:	4618      	mov	r0, r3
   17570:	f645 3188 	movw	r1, #23432	; 0x5b88
   17574:	f2c0 0102 	movt	r1, #2
   17578:	2205      	movs	r2, #5
   1757a:	f7f1 ebbc 	blx	8cf4 <_init+0x194>
   1757e:	4603      	mov	r3, r0
   17580:	2b00      	cmp	r3, #0
   17582:	f040 80a5 	bne.w	176d0 <ChkPpdConfig+0x210>
			iRet=BOOSTER_2;
   17586:	2302      	movs	r3, #2
   17588:	60fb      	str	r3, [r7, #12]
			break;
   1758a:	e0a0      	b.n	176ce <ChkPpdConfig+0x20e>
		case PPC30_PPAD:                                        // Pinpad graphic no-reader Booster1
			CHECK (memcmp(&tcReference[8], "PPC30", 5)==0, lblKO);
   1758c:	f107 0360 	add.w	r3, r7, #96	; 0x60
   17590:	3308      	adds	r3, #8
   17592:	4618      	mov	r0, r3
   17594:	f645 3190 	movw	r1, #23440	; 0x5b90
   17598:	f2c0 0102 	movt	r1, #2
   1759c:	2205      	movs	r2, #5
   1759e:	f7f1 ebaa 	blx	8cf4 <_init+0x194>
   175a2:	4603      	mov	r3, r0
   175a4:	2b00      	cmp	r3, #0
   175a6:	f040 8093 	bne.w	176d0 <ChkPpdConfig+0x210>
			iRet=BOOSTER_1;
   175aa:	2301      	movs	r3, #1
   175ac:	60fb      	str	r3, [r7, #12]
			break;
   175ae:	e08e      	b.n	176ce <ChkPpdConfig+0x20e>
		case PPR30_PPAD:                                        // Pinpad graphic reader Booster1
			CHECK (memcmp(&tcReference[8], "PPR30", 5)==0, lblKO);
   175b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
   175b4:	3308      	adds	r3, #8
   175b6:	4618      	mov	r0, r3
   175b8:	f645 3198 	movw	r1, #23448	; 0x5b98
   175bc:	f2c0 0102 	movt	r1, #2
   175c0:	2205      	movs	r2, #5
   175c2:	f7f1 eb98 	blx	8cf4 <_init+0x194>
   175c6:	4603      	mov	r3, r0
   175c8:	2b00      	cmp	r3, #0
   175ca:	f040 8081 	bne.w	176d0 <ChkPpdConfig+0x210>
			iRet=BOOSTER_1;
   175ce:	2301      	movs	r3, #1
   175d0:	60fb      	str	r3, [r7, #12]
			break;
   175d2:	e07c      	b.n	176ce <ChkPpdConfig+0x20e>
		case P30_PPAD:                                          // Pinpad graphic reader Booster2
			CHECK (memcmp(&tcReference[8], "P30  ", 5)==0, lblKO);
   175d4:	f107 0360 	add.w	r3, r7, #96	; 0x60
   175d8:	3308      	adds	r3, #8
   175da:	4618      	mov	r0, r3
   175dc:	f645 31a0 	movw	r1, #23456	; 0x5ba0
   175e0:	f2c0 0102 	movt	r1, #2
   175e4:	2205      	movs	r2, #5
   175e6:	f7f1 eb86 	blx	8cf4 <_init+0x194>
   175ea:	4603      	mov	r3, r0
   175ec:	2b00      	cmp	r3, #0
   175ee:	d16f      	bne.n	176d0 <ChkPpdConfig+0x210>
			iRet=BOOSTER_2;
   175f0:	2302      	movs	r3, #2
   175f2:	60fb      	str	r3, [r7, #12]
			break;
   175f4:	e06b      	b.n	176ce <ChkPpdConfig+0x20e>
		case IPP220_PPAD:                                       // Pinpad character no-reader Booster3
			CHECK (memcmp(&tcReference[8], "IPP2XX", 6)==0, lblKO);
   175f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
   175fa:	3308      	adds	r3, #8
   175fc:	4618      	mov	r0, r3
   175fe:	f645 31a8 	movw	r1, #23464	; 0x5ba8
   17602:	f2c0 0102 	movt	r1, #2
   17606:	2206      	movs	r2, #6
   17608:	f7f1 eb74 	blx	8cf4 <_init+0x194>
   1760c:	4603      	mov	r3, r0
   1760e:	2b00      	cmp	r3, #0
   17610:	d15e      	bne.n	176d0 <ChkPpdConfig+0x210>
			iRet=BOOSTER_3;
   17612:	2303      	movs	r3, #3
   17614:	60fb      	str	r3, [r7, #12]
			break;
   17616:	e05a      	b.n	176ce <ChkPpdConfig+0x20e>
		case IPP250_PPAD:                                       // Pinpad character no-reader color Booster3
			CHECK (memcmp(&tcReference[8], "IPP2XX", 6)==0, lblKO);
   17618:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1761c:	3308      	adds	r3, #8
   1761e:	4618      	mov	r0, r3
   17620:	f645 31a8 	movw	r1, #23464	; 0x5ba8
   17624:	f2c0 0102 	movt	r1, #2
   17628:	2206      	movs	r2, #6
   1762a:	f7f1 eb64 	blx	8cf4 <_init+0x194>
   1762e:	4603      	mov	r3, r0
   17630:	2b00      	cmp	r3, #0
   17632:	d14d      	bne.n	176d0 <ChkPpdConfig+0x210>
			iRet=BOOSTER_3;
   17634:	2303      	movs	r3, #3
   17636:	60fb      	str	r3, [r7, #12]
			break;
   17638:	e049      	b.n	176ce <ChkPpdConfig+0x20e>
		case IPP280_PPAD:                                       // Pinpad graphic no-reader color Booster3
			CHECK (memcmp(&tcReference[8], "IPP2XX", 6)==0, lblKO);
   1763a:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1763e:	3308      	adds	r3, #8
   17640:	4618      	mov	r0, r3
   17642:	f645 31a8 	movw	r1, #23464	; 0x5ba8
   17646:	f2c0 0102 	movt	r1, #2
   1764a:	2206      	movs	r2, #6
   1764c:	f7f1 eb52 	blx	8cf4 <_init+0x194>
   17650:	4603      	mov	r3, r0
   17652:	2b00      	cmp	r3, #0
   17654:	d13c      	bne.n	176d0 <ChkPpdConfig+0x210>
			iRet=BOOSTER_3;
   17656:	2303      	movs	r3, #3
   17658:	60fb      	str	r3, [r7, #12]
			break;
   1765a:	e038      	b.n	176ce <ChkPpdConfig+0x20e>
		case IPP320_PPAD:                                       // Pinpad graphic reader Booster3
			CHECK (memcmp(&tcReference[8], "IPP3XX", 6)==0, lblKO);
   1765c:	f107 0360 	add.w	r3, r7, #96	; 0x60
   17660:	3308      	adds	r3, #8
   17662:	4618      	mov	r0, r3
   17664:	f645 31b0 	movw	r1, #23472	; 0x5bb0
   17668:	f2c0 0102 	movt	r1, #2
   1766c:	2206      	movs	r2, #6
   1766e:	f7f1 eb42 	blx	8cf4 <_init+0x194>
   17672:	4603      	mov	r3, r0
   17674:	2b00      	cmp	r3, #0
   17676:	d12b      	bne.n	176d0 <ChkPpdConfig+0x210>
			iRet=BOOSTER_3;
   17678:	2303      	movs	r3, #3
   1767a:	60fb      	str	r3, [r7, #12]
			break;
   1767c:	e027      	b.n	176ce <ChkPpdConfig+0x20e>
		case IPP350_PPAD:                                       // Pinpad graphic reader color Booster3
			CHECK (memcmp(&tcReference[8], "IPP3XX", 6)==0, lblKO);
   1767e:	f107 0360 	add.w	r3, r7, #96	; 0x60
   17682:	3308      	adds	r3, #8
   17684:	4618      	mov	r0, r3
   17686:	f645 31b0 	movw	r1, #23472	; 0x5bb0
   1768a:	f2c0 0102 	movt	r1, #2
   1768e:	2206      	movs	r2, #6
   17690:	f7f1 eb30 	blx	8cf4 <_init+0x194>
   17694:	4603      	mov	r3, r0
   17696:	2b00      	cmp	r3, #0
   17698:	d11a      	bne.n	176d0 <ChkPpdConfig+0x210>
			iRet=BOOSTER_3;
   1769a:	2303      	movs	r3, #3
   1769c:	60fb      	str	r3, [r7, #12]
			break;
   1769e:	e016      	b.n	176ce <ChkPpdConfig+0x20e>
		default:                                                // Pinpad not supported
			GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Pin Pad Unknown", GL_ICON_WARNING, GL_BUTTON_VALID, 5*1000);
   176a0:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   176a4:	f2c0 0302 	movt	r3, #2
   176a8:	681b      	ldr	r3, [r3, #0]
   176aa:	2201      	movs	r2, #1
   176ac:	9200      	str	r2, [sp, #0]
   176ae:	f241 3288 	movw	r2, #5000	; 0x1388
   176b2:	9201      	str	r2, [sp, #4]
   176b4:	4618      	mov	r0, r3
   176b6:	2100      	movs	r1, #0
   176b8:	f645 32b8 	movw	r2, #23480	; 0x5bb8
   176bc:	f2c0 0202 	movt	r2, #2
   176c0:	2303      	movs	r3, #3
   176c2:	f009 ffe1 	bl	21688 <GL_Dialog_Message>
			iRet=-1;
   176c6:	f04f 33ff 	mov.w	r3, #4294967295
   176ca:	60fb      	str	r3, [r7, #12]
			break;
   176cc:	bf00      	nop
		}
	}

	goto lblEnd;                                                // Right pinpad configuration (No pinpad or pinpad present)
   176ce:	e067      	b.n	177a0 <ChkPpdConfig+0x2e0>

	// Errors treatment
	// ****************
	lblKO:                                                          // Pinpad required (pinpad disconnected or missing)
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Pin Pad Required\nCheck Configuration", GL_ICON_ERROR, GL_BUTTON_NONE, 0);
   176d0:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   176d4:	f2c0 0302 	movt	r3, #2
   176d8:	681b      	ldr	r3, [r3, #0]
   176da:	2200      	movs	r2, #0
   176dc:	9200      	str	r2, [sp, #0]
   176de:	2200      	movs	r2, #0
   176e0:	9201      	str	r2, [sp, #4]
   176e2:	4618      	mov	r0, r3
   176e4:	2100      	movs	r1, #0
   176e6:	f645 32c8 	movw	r2, #23496	; 0x5bc8
   176ea:	f2c0 0202 	movt	r2, #2
   176ee:	2304      	movs	r3, #4
   176f0:	f009 ffca 	bl	21688 <GL_Dialog_Message>

	hDocument = GoalCreateDocument(gGoalGraphicLibInstance, GL_ENCODING_UTF8);    // Create document
   176f4:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   176f8:	f2c0 0302 	movt	r3, #2
   176fc:	681b      	ldr	r3, [r3, #0]
   176fe:	4618      	mov	r0, r3
   17700:	2100      	movs	r1, #0
   17702:	f7f7 fbe9 	bl	eed8 <GoalCreateDocument>
   17706:	4603      	mov	r3, r0
   17708:	60bb      	str	r3, [r7, #8]
	if (hDocument != NULL)
   1770a:	68bb      	ldr	r3, [r7, #8]
   1770c:	2b00      	cmp	r3, #0
   1770e:	d043      	beq.n	17798 <ChkPpdConfig+0x2d8>
	{
		p=0;
   17710:	2300      	movs	r3, #0
   17712:	71fb      	strb	r3, [r7, #7]
		xLine = xPrinter;
   17714:	f645 23e8 	movw	r3, #23272	; 0x5ae8
   17718:	f2c0 0302 	movt	r3, #2
   1771c:	f107 0110 	add.w	r1, r7, #16
   17720:	461a      	mov	r2, r3
   17722:	2350      	movs	r3, #80	; 0x50
   17724:	4608      	mov	r0, r1
   17726:	4611      	mov	r1, r2
   17728:	461a      	mov	r2, r3
   1772a:	f7f1 eaa6 	blx	8c78 <_init+0x118>
		xLine.eBackAlign = GL_ALIGN_LEFT;
   1772e:	2301      	movs	r3, #1
   17730:	617b      	str	r3, [r7, #20]
		xLine.xFont.eScale = GL_SCALE_XLARGE;
   17732:	f643 73f5 	movw	r3, #16373	; 0x3ff5
   17736:	65fb      	str	r3, [r7, #92]	; 0x5c
		xLine.xFont.eStyle = GL_FONT_STYLE_BOLD;                // Requirement
   17738:	2302      	movs	r3, #2
   1773a:	65bb      	str	r3, [r7, #88]	; 0x58
		GoalPrnLine(hDocument, p++, "Pinpad problem!!!", &xLine);
   1773c:	68b9      	ldr	r1, [r7, #8]
   1773e:	79fb      	ldrb	r3, [r7, #7]
   17740:	b29a      	uxth	r2, r3
   17742:	79fb      	ldrb	r3, [r7, #7]
   17744:	3301      	adds	r3, #1
   17746:	71fb      	strb	r3, [r7, #7]
   17748:	f107 0310 	add.w	r3, r7, #16
   1774c:	4608      	mov	r0, r1
   1774e:	4611      	mov	r1, r2
   17750:	f645 32f0 	movw	r2, #23536	; 0x5bf0
   17754:	f2c0 0202 	movt	r2, #2
   17758:	f7f7 fbfa 	bl	ef50 <GoalPrnLine>
		xLine.xFont.eScale = GL_SCALE_LARGE;
   1775c:	f643 73f4 	movw	r3, #16372	; 0x3ff4
   17760:	65fb      	str	r3, [r7, #92]	; 0x5c
		xLine.xFont.eStyle = GL_FONT_STYLE_NORMAL;
   17762:	2300      	movs	r3, #0
   17764:	65bb      	str	r3, [r7, #88]	; 0x58
		GoalPrnLine(hDocument, p++, "     ----------------------------------\n"
   17766:	68b9      	ldr	r1, [r7, #8]
   17768:	79fb      	ldrb	r3, [r7, #7]
   1776a:	b29a      	uxth	r2, r3
   1776c:	79fb      	ldrb	r3, [r7, #7]
   1776e:	3301      	adds	r3, #1
   17770:	71fb      	strb	r3, [r7, #7]
				"=> Check MANAGER config\n"
				"     -------------- OR --------------\n"
				"Pinpad required\n"
				"=> Check MANAGER config\n"
				"     ----------------------------------\n"
				"\n\n\n\n", &xLine);
   17772:	f107 0310 	add.w	r3, r7, #16
		xLine.xFont.eScale = GL_SCALE_XLARGE;
		xLine.xFont.eStyle = GL_FONT_STYLE_BOLD;                // Requirement
		GoalPrnLine(hDocument, p++, "Pinpad problem!!!", &xLine);
		xLine.xFont.eScale = GL_SCALE_LARGE;
		xLine.xFont.eStyle = GL_FONT_STYLE_NORMAL;
		GoalPrnLine(hDocument, p++, "     ----------------------------------\n"
   17776:	4608      	mov	r0, r1
   17778:	4611      	mov	r1, r2
   1777a:	f645 4204 	movw	r2, #23556	; 0x5c04
   1777e:	f2c0 0202 	movt	r2, #2
   17782:	f7f7 fbe5 	bl	ef50 <GoalPrnLine>
				"     -------------- OR --------------\n"
				"Pinpad required\n"
				"=> Check MANAGER config\n"
				"     ----------------------------------\n"
				"\n\n\n\n", &xLine);
		GoalPrnDocument(hDocument);                             // Print document
   17786:	68bb      	ldr	r3, [r7, #8]
   17788:	4618      	mov	r0, r3
   1778a:	f7f7 fdf3 	bl	f374 <GoalPrnDocument>

		GoalDestroyDocument(&hDocument);                        // Destroy document
   1778e:	f107 0308 	add.w	r3, r7, #8
   17792:	4618      	mov	r0, r3
   17794:	f7f7 fe1a 	bl	f3cc <GoalDestroyDocument>
	}
	iRet=-1;
   17798:	f04f 33ff 	mov.w	r3, #4294967295
   1779c:	60fb      	str	r3, [r7, #12]
	goto lblEnd;
   1779e:	e000      	b.n	177a2 <ChkPpdConfig+0x2e2>
			iRet=-1;
			break;
		}
	}

	goto lblEnd;                                                // Right pinpad configuration (No pinpad or pinpad present)
   177a0:	bf00      	nop
		GoalDestroyDocument(&hDocument);                        // Destroy document
	}
	iRet=-1;
	goto lblEnd;
	lblEnd:
	return iRet;
   177a2:	68fb      	ldr	r3, [r7, #12]
}
   177a4:	4618      	mov	r0, r3
   177a6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   177aa:	f2c0 0302 	movt	r3, #2
   177ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   177b0:	681b      	ldr	r3, [r3, #0]
   177b2:	429a      	cmp	r2, r3
   177b4:	d001      	beq.n	177ba <ChkPpdConfig+0x2fa>
   177b6:	f7f1 fbf5 	bl	8fa4 <__stack_chk_fail>
   177ba:	f107 0778 	add.w	r7, r7, #120	; 0x78
   177be:	46bd      	mov	sp, r7
   177c0:	bd80      	pop	{r7, pc}
   177c2:	bf00      	nop

000177c4 <GetPpdDisplay>:
//     0 : No pinpad connected
//    -1 : Processing error
//****************************************************************************

int GetPpdDisplay(void)
{
   177c4:	b580      	push	{r7, lr}
   177c6:	b084      	sub	sp, #16
   177c8:	af00      	add	r7, sp, #0
   177ca:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   177ce:	f2c0 0302 	movt	r3, #2
   177d2:	681b      	ldr	r3, [r3, #0]
   177d4:	60fb      	str	r3, [r7, #12]
	int iDisplay;
	int iRet;

	// Check if pinpad declared from Manager and connected to the terminal
	// *******************************************************************
	iRet = PSQ_Is_pinpad(); CHECK(iRet!=0, lblKO);
   177d6:	f008 fc85 	bl	200e4 <PSQ_Est_pinpad>
   177da:	60b8      	str	r0, [r7, #8]
   177dc:	68bb      	ldr	r3, [r7, #8]
   177de:	2b00      	cmp	r3, #0
   177e0:	d022      	beq.n	17828 <GetPpdDisplay+0x64>
	iRet = IsPPSConnected(); CHECK(iRet==RET_PP_OK, lblKO);
   177e2:	f008 fd25 	bl	20230 <IsPPSConnected>
   177e6:	60b8      	str	r0, [r7, #8]
   177e8:	68bb      	ldr	r3, [r7, #8]
   177ea:	2b00      	cmp	r3, #0
   177ec:	d11c      	bne.n	17828 <GetPpdDisplay+0x64>

	// Retrieve the type of display
	// ****************************
	iRet = PSQ_Pinpad_Value();
   177ee:	f008 fcaf 	bl	20150 <PSQ_donner_type_pinpad>
   177f2:	60b8      	str	r0, [r7, #8]
	switch (iRet)
   177f4:	68bb      	ldr	r3, [r7, #8]
   177f6:	2b0c      	cmp	r3, #12
   177f8:	d811      	bhi.n	1781e <GetPpdDisplay+0x5a>
   177fa:	2201      	movs	r2, #1
   177fc:	68bb      	ldr	r3, [r7, #8]
   177fe:	409a      	lsls	r2, r3
   17800:	f641 338e 	movw	r3, #7054	; 0x1b8e
   17804:	4013      	ands	r3, r2
   17806:	2b00      	cmp	r3, #0
   17808:	d106      	bne.n	17818 <GetPpdDisplay+0x54>
   1780a:	f002 0371 	and.w	r3, r2, #113	; 0x71
   1780e:	2b00      	cmp	r3, #0
   17810:	d005      	beq.n	1781e <GetPpdDisplay+0x5a>
	{
	case PP30_PPAD:          // Pinpad CHARACTERS no-reader Booster1
	case PP30S_PPAD:         // Pinpad CHARACTERS no-reader Booster2
	case IPP220_PPAD:        // Pinpad CHARACTERS no-reader Booster3
	case IPP250_PPAD:        // Pinpad CHARACTERS no-reader color Booster3
		iDisplay=1;          // Display = CHARACTERS
   17812:	2301      	movs	r3, #1
   17814:	607b      	str	r3, [r7, #4]
		break;
   17816:	e006      	b.n	17826 <GetPpdDisplay+0x62>
	case IPP280_PPAD:        // Pinpad GRAPHIC no-reader color Booster3
	case IPP320_PPAD:        // Pinpad GRAPHIC reader Booster3
	case IPP350_PPAD:        // Pinpad GRAPHIC reader color Booster3
	case IPP310_PPAD:        // Pinpad GRAPHIC reader Booster3 for TETRA
	case IPP315_PPAD:        // Pinpad GRAPHIC reader color Booster3 for TETRA
		iDisplay=2;          // Display = GRAPHIC
   17818:	2302      	movs	r3, #2
   1781a:	607b      	str	r3, [r7, #4]
		break;
   1781c:	e003      	b.n	17826 <GetPpdDisplay+0x62>
	default:
		iDisplay=-1;         // Pinpad unknown
   1781e:	f04f 33ff 	mov.w	r3, #4294967295
   17822:	607b      	str	r3, [r7, #4]
		break;
   17824:	bf00      	nop
	}

	goto lblEnd;
   17826:	e002      	b.n	1782e <GetPpdDisplay+0x6a>

	// Errors treatment
	// ****************
	lblKO:
	iDisplay=0;              // No pinpad connected
   17828:	2300      	movs	r3, #0
   1782a:	607b      	str	r3, [r7, #4]
	goto lblEnd;
   1782c:	bf00      	nop
	lblEnd:
	return iDisplay;
   1782e:	687b      	ldr	r3, [r7, #4]
}
   17830:	4618      	mov	r0, r3
   17832:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   17836:	f2c0 0302 	movt	r3, #2
   1783a:	68fa      	ldr	r2, [r7, #12]
   1783c:	681b      	ldr	r3, [r3, #0]
   1783e:	429a      	cmp	r2, r3
   17840:	d001      	beq.n	17846 <GetPpdDisplay+0x82>
   17842:	f7f1 fbaf 	bl	8fa4 <__stack_chk_fail>
   17846:	f107 0710 	add.w	r7, r7, #16
   1784a:	46bd      	mov	sp, r7
   1784c:	bd80      	pop	{r7, pc}
   1784e:	bf00      	nop

00017850 <IsPinOnPpd>:
//     0 : Pin entry on terminal
//    -1 : Processing error
//****************************************************************************

static int IsPinOnPpd(void)
{
   17850:	b580      	push	{r7, lr}
   17852:	b098      	sub	sp, #96	; 0x60
   17854:	af00      	add	r7, sp, #0
   17856:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1785a:	f2c0 0302 	movt	r3, #2
   1785e:	681b      	ldr	r3, [r3, #0]
   17860:	65fb      	str	r3, [r7, #92]	; 0x5c
	T_SEC_CONFIG txConfParts[C_NB_PARTS];
	int iRet, iNbParts;

	// Get the configuration of the security component
	// ***********************************************
	iRet = SEC_GetConfig(&iNbParts, txConfParts);  // Get number and parameters of secure parts
   17862:	1d3a      	adds	r2, r7, #4
   17864:	f107 030c 	add.w	r3, r7, #12
   17868:	4610      	mov	r0, r2
   1786a:	4619      	mov	r1, r3
   1786c:	f009 fd93 	bl	21396 <SEC_GetConfig>
   17870:	60b8      	str	r0, [r7, #8]
	CHECK(iRet==OK, lblKO);
   17872:	68bb      	ldr	r3, [r7, #8]
   17874:	2b00      	cmp	r3, #0
   17876:	d117      	bne.n	178a8 <IsPinOnPpd+0x58>

	// Analyze C_SEC_PINCODE secure part
	// *********************************
	iRet = GetPpdDisplay(); CHECK(iRet>=0, lblKO); // Pin entry on pinpad or terminal?
   17878:	f7ff ffa4 	bl	177c4 <GetPpdDisplay>
   1787c:	60b8      	str	r0, [r7, #8]
   1787e:	68bb      	ldr	r3, [r7, #8]
   17880:	2b00      	cmp	r3, #0
   17882:	db11      	blt.n	178a8 <IsPinOnPpd+0x58>
	if (iRet != 0)                                 // Pinpad connected
   17884:	68bb      	ldr	r3, [r7, #8]
   17886:	2b00      	cmp	r3, #0
   17888:	d012      	beq.n	178b0 <IsPinOnPpd+0x60>
		if (memcmp(txConfParts[C_SEC_PINCODE-1].ptszBoosterPeripheral, IAPP_USB_NAME, strlen(IAPP_USB_NAME)) != 0)
   1788a:	697b      	ldr	r3, [r7, #20]
   1788c:	4618      	mov	r0, r3
   1788e:	f645 5124 	movw	r1, #23844	; 0x5d24
   17892:	f2c0 0102 	movt	r1, #2
   17896:	2208      	movs	r2, #8
   17898:	f7f1 ea2c 	blx	8cf4 <_init+0x194>
   1789c:	4603      	mov	r3, r0
   1789e:	2b00      	cmp	r3, #0
   178a0:	d006      	beq.n	178b0 <IsPinOnPpd+0x60>
			iRet=0;                                // Pin entry redirected to terminal
   178a2:	2300      	movs	r3, #0
   178a4:	60bb      	str	r3, [r7, #8]

	goto lblEnd;
   178a6:	e003      	b.n	178b0 <IsPinOnPpd+0x60>

	// Errors treatment
	// ****************
	lblKO:
	iRet=-1;
   178a8:	f04f 33ff 	mov.w	r3, #4294967295
   178ac:	60bb      	str	r3, [r7, #8]
	goto lblEnd;
   178ae:	e000      	b.n	178b2 <IsPinOnPpd+0x62>
	iRet = GetPpdDisplay(); CHECK(iRet>=0, lblKO); // Pin entry on pinpad or terminal?
	if (iRet != 0)                                 // Pinpad connected
		if (memcmp(txConfParts[C_SEC_PINCODE-1].ptszBoosterPeripheral, IAPP_USB_NAME, strlen(IAPP_USB_NAME)) != 0)
			iRet=0;                                // Pin entry redirected to terminal

	goto lblEnd;
   178b0:	bf00      	nop
	// ****************
	lblKO:
	iRet=-1;
	goto lblEnd;
	lblEnd:
	return iRet;
   178b2:	68bb      	ldr	r3, [r7, #8]
}
   178b4:	4618      	mov	r0, r3
   178b6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   178ba:	f2c0 0302 	movt	r3, #2
   178be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   178c0:	681b      	ldr	r3, [r3, #0]
   178c2:	429a      	cmp	r2, r3
   178c4:	d001      	beq.n	178ca <IsPinOnPpd+0x7a>
   178c6:	f7f1 fb6d 	bl	8fa4 <__stack_chk_fail>
   178ca:	f107 0760 	add.w	r7, r7, #96	; 0x60
   178ce:	46bd      	mov	sp, r7
   178d0:	bd80      	pop	{r7, pc}
   178d2:	bf00      	nop

000178d4 <AreaId>:
//  This function has return value.
//    The AreaId value.
//****************************************************************************

static int AreaId (void)
{
   178d4:	b580      	push	{r7, lr}
   178d6:	b09a      	sub	sp, #104	; 0x68
   178d8:	af00      	add	r7, sp, #0
   178da:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   178de:	f2c0 0302 	movt	r3, #2
   178e2:	681b      	ldr	r3, [r3, #0]
   178e4:	667b      	str	r3, [r7, #100]	; 0x64
	T_SEC_CONFIG txConfParts[C_NB_PARTS];
	int iNbParts, iBoosterType, iAreaId, iRet;

	// Get the configuration of the security component
	// ***********************************************
	iRet = SEC_GetConfig(&iNbParts, txConfParts);  // Get number and parameters of secure parts
   178e6:	1d3a      	adds	r2, r7, #4
   178e8:	f107 0314 	add.w	r3, r7, #20
   178ec:	4610      	mov	r0, r2
   178ee:	4619      	mov	r1, r3
   178f0:	f009 fd51 	bl	21396 <SEC_GetConfig>
   178f4:	6138      	str	r0, [r7, #16]
	if (iRet != OK) return 0;                      // No booster => no area id
   178f6:	693b      	ldr	r3, [r7, #16]
   178f8:	2b00      	cmp	r3, #0
   178fa:	d001      	beq.n	17900 <AreaId+0x2c>
   178fc:	2300      	movs	r3, #0
   178fe:	e045      	b.n	1798c <AreaId+0xb8>

	// Analyze C_SEC_CIPHERING secure part
	// ***********************************
	switch (txConfParts[C_SEC_CIPHERING-1].cBoosterType)
   17900:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   17904:	2b01      	cmp	r3, #1
   17906:	d006      	beq.n	17916 <AreaId+0x42>
   17908:	2b04      	cmp	r3, #4
   1790a:	d013      	beq.n	17934 <AreaId+0x60>
   1790c:	2b00      	cmp	r3, #0
   1790e:	d114      	bne.n	1793a <AreaId+0x66>
	{
	case C_SEC_BL1:    iBoosterType = BOOSTER_1;     break;   // Booster 1 (1)
   17910:	2301      	movs	r3, #1
   17912:	60bb      	str	r3, [r7, #8]
   17914:	e015      	b.n	17942 <AreaId+0x6e>
	case C_SEC_BL2:                                           // Booster 2 or 3 (2 or 3)
		iBoosterType = ChkPpdConfig();    // Booster type from pinpad if plugged
   17916:	f7ff fdd3 	bl	174c0 <ChkPpdConfig>
   1791a:	60b8      	str	r0, [r7, #8]
		if (iBoosterType < 0)
   1791c:	68bb      	ldr	r3, [r7, #8]
   1791e:	2b00      	cmp	r3, #0
   17920:	da01      	bge.n	17926 <AreaId+0x52>
			return 0;                     // Processing error => No VarId
   17922:	2300      	movs	r3, #0
   17924:	e032      	b.n	1798c <AreaId+0xb8>
		if (iBoosterType == 0)            // No pinpad
   17926:	68bb      	ldr	r3, [r7, #8]
   17928:	2b00      	cmp	r3, #0
   1792a:	d109      	bne.n	17940 <AreaId+0x6c>
			iBoosterType = BoosterType(); // Booster type from terminal
   1792c:	f008 fde6 	bl	204fc <BoosterType>
   17930:	60b8      	str	r0, [r7, #8]
		break;
   17932:	e005      	b.n	17940 <AreaId+0x6c>
#ifdef __TELIUM3__
	case C_SEC_ISLERO: iBoosterType = BOOSTER_3+1;   break;   // Secure unit islero (4)
   17934:	2304      	movs	r3, #4
   17936:	60bb      	str	r3, [r7, #8]
   17938:	e003      	b.n	17942 <AreaId+0x6e>
#endif
	default:           iBoosterType = NO_BOOSTER;    break;   // Should not occur (0)
   1793a:	2300      	movs	r3, #0
   1793c:	60bb      	str	r3, [r7, #8]
   1793e:	e000      	b.n	17942 <AreaId+0x6e>
		iBoosterType = ChkPpdConfig();    // Booster type from pinpad if plugged
		if (iBoosterType < 0)
			return 0;                     // Processing error => No VarId
		if (iBoosterType == 0)            // No pinpad
			iBoosterType = BoosterType(); // Booster type from terminal
		break;
   17940:	bf00      	nop
		//             (2 first bytes from 0000 to 3FFF)
		// On Tetra    (ISLERO) ASID=0x800C SerialNumber=Unknown (Certificate)
		// Secret area identification from 00002130 to FFFF2F3F
		//             (2 first bytes from 0000 to FFFF)
		// =====================================================================
		switch (iBoosterType)
   17942:	68bb      	ldr	r3, [r7, #8]
   17944:	3b01      	subs	r3, #1
   17946:	2b03      	cmp	r3, #3
   17948:	d81c      	bhi.n	17984 <AreaId+0xb0>
   1794a:	a201      	add	r2, pc, #4	; (adr r2, 17950 <AreaId+0x7c>)
   1794c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17950:	00017961 	.word	0x00017961
   17954:	00017961 	.word	0x00017961
   17958:	0001796d 	.word	0x0001796d
   1795c:	00017979 	.word	0x00017979
		{
		case BOOSTER_1:
		case BOOSTER_2:
			// Could be VarId=0x00FA but NOT MANDATORY + 2&3 fixed + 1&0 user
			iAreaId = 0x00FA2130;
   17960:	f242 1330 	movw	r3, #8496	; 0x2130
   17964:	f2c0 03fa 	movt	r3, #250	; 0xfa
   17968:	60fb      	str	r3, [r7, #12]
			break;
   1796a:	e00e      	b.n	1798a <AreaId+0xb6>
		case BOOSTER_3:
			// Could be VarId=0x0000 but NOT MANDATORY + 2&3 fixed + 1&0 user
			iAreaId = 0x010D2130;
   1796c:	f242 1330 	movw	r3, #8496	; 0x2130
   17970:	f2c0 130d 	movt	r3, #269	; 0x10d
   17974:	60fb      	str	r3, [r7, #12]
			break;
   17976:	e008      	b.n	1798a <AreaId+0xb6>
		case BOOSTER_3+1:
		// Could be ASID=0x800C but NOT MANDATORY + 2&3 fixed + 1&0 user
		iAreaId = 0x015C2131;
   17978:	f242 1331 	movw	r3, #8497	; 0x2131
   1797c:	f2c0 135c 	movt	r3, #348	; 0x15c
   17980:	60fb      	str	r3, [r7, #12]
		break;
   17982:	e002      	b.n	1798a <AreaId+0xb6>
		default:
			iAreaId = 0;
   17984:	2300      	movs	r3, #0
   17986:	60fb      	str	r3, [r7, #12]
			break;
   17988:	bf00      	nop
			iAreaId = 0;
			break;
		}
	}

	return iAreaId;
   1798a:	68fb      	ldr	r3, [r7, #12]
}
   1798c:	4618      	mov	r0, r3
   1798e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   17992:	f2c0 0302 	movt	r3, #2
   17996:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   17998:	681b      	ldr	r3, [r3, #0]
   1799a:	429a      	cmp	r2, r3
   1799c:	d001      	beq.n	179a2 <AreaId+0xce>
   1799e:	f7f1 fb01 	bl	8fa4 <__stack_chk_fail>
   179a2:	f107 0768 	add.w	r7, r7, #104	; 0x68
   179a6:	46bd      	mov	sp, r7
   179a8:	bd80      	pop	{r7, pc}
   179aa:	bf00      	nop

000179ac <PinEntry>:
//    <0 : Pin entry failed
//****************************************************************************

static int PinEntry(const char *pcMsg1, const char *pcMsg2,
		const char *pcMsg1Idle, const char *pcMsg2Idle, byte ucTimeOut)
{
   179ac:	b580      	push	{r7, lr}
   179ae:	b09a      	sub	sp, #104	; 0x68
   179b0:	af02      	add	r7, sp, #8
   179b2:	6178      	str	r0, [r7, #20]
   179b4:	6139      	str	r1, [r7, #16]
   179b6:	60fa      	str	r2, [r7, #12]
   179b8:	60bb      	str	r3, [r7, #8]
   179ba:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
   179be:	71fb      	strb	r3, [r7, #7]
   179c0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   179c4:	f2c0 0302 	movt	r3, #2
   179c8:	681b      	ldr	r3, [r3, #0]
   179ca:	65fb      	str	r3, [r7, #92]	; 0x5c
	// Local variables
	// ***************
	T_GL_HWIDGET hScreen=NULL;
   179cc:	2300      	movs	r3, #0
   179ce:	61fb      	str	r3, [r7, #28]
	doubleword uiEvent=0, uiEveWait;
   179d0:	2300      	movs	r3, #0
   179d2:	62bb      	str	r3, [r7, #40]	; 0x28
	char tcPin[16+1];
	int iContinue=TRUE;
   179d4:	2301      	movs	r3, #1
   179d6:	627b      	str	r3, [r7, #36]	; 0x24
	bool bExitPin=FALSE;
   179d8:	2300      	movs	r3, #0
   179da:	76fb      	strb	r3, [r7, #27]
	int iPpd, iPinSize, iRet;
	T_SEC_ENTRYCONF xEntryCfg;

	// Prompt messages on terminal or PinPad
	// *************************************
	iPpd = IsPinOnPpd(); CHECK(iPpd>=0, lblKO);
   179dc:	f7ff ff38 	bl	17850 <IsPinOnPpd>
   179e0:	6378      	str	r0, [r7, #52]	; 0x34
   179e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   179e4:	2b00      	cmp	r3, #0
   179e6:	f2c0 8225 	blt.w	17e34 <PinEntry+0x488>
	switch (iPpd)
   179ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   179ec:	2b01      	cmp	r3, #1
   179ee:	d05f      	beq.n	17ab0 <PinEntry+0x104>
   179f0:	2b02      	cmp	r3, #2
   179f2:	d07e      	beq.n	17af2 <PinEntry+0x146>
   179f4:	2b00      	cmp	r3, #0
   179f6:	f040 80aa 	bne.w	17b4e <PinEntry+0x1a2>
	{
	case 0:                                                                                // *** Pin on terminal
		hScreen = GoalCreateScreen(gGoalGraphicLibInstance, txPin, NUMBER_OF_LINES(txPin), GL_ENCODING_UTF8);
   179fa:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   179fe:	f2c0 0302 	movt	r3, #2
   17a02:	681b      	ldr	r3, [r3, #0]
   17a04:	4618      	mov	r0, r3
   17a06:	f245 718c 	movw	r1, #22412	; 0x578c
   17a0a:	f2c0 0102 	movt	r1, #2
   17a0e:	2203      	movs	r2, #3
   17a10:	2300      	movs	r3, #0
   17a12:	f7f5 fb5d 	bl	d0d0 <GoalCreateScreen>
   17a16:	4603      	mov	r3, r0
   17a18:	61fb      	str	r3, [r7, #28]
		CHECK(hScreen!=NULL, lblKO);                                                       // Create screen and clear it
   17a1a:	69fb      	ldr	r3, [r7, #28]
   17a1c:	2b00      	cmp	r3, #0
   17a1e:	f000 8209 	beq.w	17e34 <PinEntry+0x488>
		iRet = GoalClrScreen(hScreen, GL_COLOR_TRANSPARENT, 0, false);
   17a22:	69fb      	ldr	r3, [r7, #28]
   17a24:	4618      	mov	r0, r3
   17a26:	2100      	movs	r1, #0
   17a28:	2200      	movs	r2, #0
   17a2a:	2300      	movs	r3, #0
   17a2c:	f7f5 fcee 	bl	d40c <GoalClrScreen>
   17a30:	6338      	str	r0, [r7, #48]	; 0x30
		CHECK(iRet>=0, lblKO);
   17a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17a34:	2b00      	cmp	r3, #0
   17a36:	f2c0 81fd 	blt.w	17e34 <PinEntry+0x488>

		iRet = GoalDspLine(hScreen, 0, (char*) (pcMsg1+8), &txPin[0], 0, false);           // Amount message on terminal
   17a3a:	69fa      	ldr	r2, [r7, #28]
   17a3c:	697b      	ldr	r3, [r7, #20]
   17a3e:	3308      	adds	r3, #8
   17a40:	2100      	movs	r1, #0
   17a42:	9100      	str	r1, [sp, #0]
   17a44:	2100      	movs	r1, #0
   17a46:	9101      	str	r1, [sp, #4]
   17a48:	4610      	mov	r0, r2
   17a4a:	2100      	movs	r1, #0
   17a4c:	461a      	mov	r2, r3
   17a4e:	f245 738c 	movw	r3, #22412	; 0x578c
   17a52:	f2c0 0302 	movt	r3, #2
   17a56:	f7f5 fdf3 	bl	d640 <GoalDspLine>
   17a5a:	6338      	str	r0, [r7, #48]	; 0x30
		CHECK(iRet>=0, lblKO);
   17a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17a5e:	2b00      	cmp	r3, #0
   17a60:	f2c0 81e8 	blt.w	17e34 <PinEntry+0x488>
		iRet = GoalDspLine(hScreen, 1, (char*)pcMsg2, &txPin[1], 0, false);                // Pin input on terminal
   17a64:	69fb      	ldr	r3, [r7, #28]
   17a66:	2200      	movs	r2, #0
   17a68:	9200      	str	r2, [sp, #0]
   17a6a:	2200      	movs	r2, #0
   17a6c:	9201      	str	r2, [sp, #4]
   17a6e:	4618      	mov	r0, r3
   17a70:	2101      	movs	r1, #1
   17a72:	693a      	ldr	r2, [r7, #16]
   17a74:	4baf      	ldr	r3, [pc, #700]	; (17d34 <PinEntry+0x388>)
   17a76:	f7f5 fde3 	bl	d640 <GoalDspLine>
   17a7a:	6338      	str	r0, [r7, #48]	; 0x30
		CHECK(iRet>=0, lblKO);
   17a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17a7e:	2b00      	cmp	r3, #0
   17a80:	f2c0 81d8 	blt.w	17e34 <PinEntry+0x488>
		iRet = GoalDspLine(hScreen, 2, "Enter your code\nfrom prying eyes", &txPin[2], 0, true);
   17a84:	69fb      	ldr	r3, [r7, #28]
   17a86:	2200      	movs	r2, #0
   17a88:	9200      	str	r2, [sp, #0]
   17a8a:	2201      	movs	r2, #1
   17a8c:	9201      	str	r2, [sp, #4]
   17a8e:	4618      	mov	r0, r3
   17a90:	2102      	movs	r1, #2
   17a92:	f645 5230 	movw	r2, #23856	; 0x5d30
   17a96:	f2c0 0202 	movt	r2, #2
   17a9a:	4ba7      	ldr	r3, [pc, #668]	; (17d38 <PinEntry+0x38c>)
   17a9c:	f7f5 fdd0 	bl	d640 <GoalDspLine>
   17aa0:	6338      	str	r0, [r7, #48]	; 0x30
		CHECK(iRet>=0, lblKO);                                                             // Warm message on terminal
   17aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17aa4:	2b00      	cmp	r3, #0
   17aa6:	f2c0 81c5 	blt.w	17e34 <PinEntry+0x488>
		uiEvent=0;                                                                         // Wait for timeout
   17aaa:	2300      	movs	r3, #0
   17aac:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
   17aae:	e04f      	b.n	17b50 <PinEntry+0x1a4>
	case 1:                                                                                // *** Pin on pinpad with characters display
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Please Enter Pin\nOn Pin Pad", GL_ICON_WARNING, GL_BUTTON_NONE, 0);
   17ab0:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   17ab4:	f2c0 0302 	movt	r3, #2
   17ab8:	681b      	ldr	r3, [r3, #0]
   17aba:	2200      	movs	r2, #0
   17abc:	9200      	str	r2, [sp, #0]
   17abe:	2200      	movs	r2, #0
   17ac0:	9201      	str	r2, [sp, #4]
   17ac2:	4618      	mov	r0, r3
   17ac4:	2100      	movs	r1, #0
   17ac6:	f645 5254 	movw	r2, #23892	; 0x5d54
   17aca:	f2c0 0202 	movt	r2, #2
   17ace:	2303      	movs	r3, #3
   17ad0:	f009 fdda 	bl	21688 <GL_Dialog_Message>
		PPS_firstline();
   17ad4:	f008 fc18 	bl	20308 <PPS_firstline>
		PPS_Display((char*) pcMsg1);                                                       // First message on pinpad
   17ad8:	6978      	ldr	r0, [r7, #20]
   17ada:	f008 fcaf 	bl	2043c <PPS_Display>
		PPS_newline();
   17ade:	f008 fc41 	bl	20364 <PPS_newline>
		PPS_Display((char*) pcMsg2);                                                       // Second message on pinpad
   17ae2:	6938      	ldr	r0, [r7, #16]
   17ae4:	f008 fcaa 	bl	2043c <PPS_Display>
		PPS_newline();                                                                     // Return to first line
   17ae8:	f008 fc3c 	bl	20364 <PPS_newline>
		uiEvent=KEYBOARD;                                                                  // Wait for EFT keyboard to cancel pin entry on pinpad
   17aec:	2301      	movs	r3, #1
   17aee:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
   17af0:	e02e      	b.n	17b50 <PinEntry+0x1a4>
	case 2:                                                                                // *** Pin on pinpad with graphical display
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Please Enter Pin\nOn Pin Pad", GL_ICON_WARNING, GL_BUTTON_NONE, 0);
   17af2:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   17af6:	f2c0 0302 	movt	r3, #2
   17afa:	681b      	ldr	r3, [r3, #0]
   17afc:	2200      	movs	r2, #0
   17afe:	9200      	str	r2, [sp, #0]
   17b00:	2200      	movs	r2, #0
   17b02:	9201      	str	r2, [sp, #4]
   17b04:	4618      	mov	r0, r3
   17b06:	2100      	movs	r1, #0
   17b08:	f645 5254 	movw	r2, #23892	; 0x5d54
   17b0c:	f2c0 0202 	movt	r2, #2
   17b10:	2303      	movs	r3, #3
   17b12:	f009 fdb9 	bl	21688 <GL_Dialog_Message>
		InitContext(PERIPH_PPR);                                                           // Switch to graphic display pinpad
   17b16:	2001      	movs	r0, #1
   17b18:	f008 fa1e 	bl	1ff58 <InitContexteGraphique>
		_DrawExtendedString(0, 22, (char*) pcMsg1, _OFF_, _MEDIUM_, _NORMALE_);            // First message on pinpad
   17b1c:	2301      	movs	r3, #1
   17b1e:	9300      	str	r3, [sp, #0]
   17b20:	2301      	movs	r3, #1
   17b22:	9301      	str	r3, [sp, #4]
   17b24:	2000      	movs	r0, #0
   17b26:	2116      	movs	r1, #22
   17b28:	697a      	ldr	r2, [r7, #20]
   17b2a:	2300      	movs	r3, #0
   17b2c:	f008 fa6c 	bl	20008 <_DrawExtendedString>
		_DrawExtendedString(0, 35, (char*) pcMsg2, _OFF_, _MEDIUM_, _NORMALE_);            // Second message on pinpad
   17b30:	2301      	movs	r3, #1
   17b32:	9300      	str	r3, [sp, #0]
   17b34:	2301      	movs	r3, #1
   17b36:	9301      	str	r3, [sp, #4]
   17b38:	2000      	movs	r0, #0
   17b3a:	2123      	movs	r1, #35	; 0x23
   17b3c:	693a      	ldr	r2, [r7, #16]
   17b3e:	2300      	movs	r3, #0
   17b40:	f008 fa62 	bl	20008 <_DrawExtendedString>
		PaintGraphics();
   17b44:	f008 fa32 	bl	1ffac <PaintGraphics>
		uiEvent=KEYBOARD;                                                                  // Wait for EFT keyboard to cancel pin entry on pinpad
   17b48:	2301      	movs	r3, #1
   17b4a:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
   17b4c:	e000      	b.n	17b50 <PinEntry+0x1a4>
	default:
		break;
   17b4e:	bf00      	nop
	}

	// Pin entry code initialization
	// *****************************
	xEntryCfg.ucEchoChar = ECHO_PIN;                                                       // '*' echo character
   17b50:	232a      	movs	r3, #42	; 0x2a
   17b52:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	xEntryCfg.ucMinDigits = 4;                                                             // Min pin entry 4 digits
   17b56:	2304      	movs	r3, #4
   17b58:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	xEntryCfg.ucMaxDigits = 4;                                                             // Max pin entry 4 digits
   17b5c:	2304      	movs	r3, #4
   17b5e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (ucTimeOut < 60)
   17b62:	79fb      	ldrb	r3, [r7, #7]
   17b64:	2b3b      	cmp	r3, #59	; 0x3b
   17b66:	d806      	bhi.n	17b76 <PinEntry+0x1ca>
		xEntryCfg.iFirstCharTimeOut = ucTimeOut*1000;                                      // Wait for first digit < 60s
   17b68:	79fb      	ldrb	r3, [r7, #7]
   17b6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17b6e:	fb02 f303 	mul.w	r3, r2, r3
   17b72:	643b      	str	r3, [r7, #64]	; 0x40
   17b74:	e002      	b.n	17b7c <PinEntry+0x1d0>
	else
		xEntryCfg.iFirstCharTimeOut = 60*1000;                                             // Wait for first digit 60s (Max supported)
   17b76:	f64e 2360 	movw	r3, #60000	; 0xea60
   17b7a:	643b      	str	r3, [r7, #64]	; 0x40
	xEntryCfg.iInterCharTimeOut = 10*1000;                                                 // Wait for next digits 10s
   17b7c:	f242 7310 	movw	r3, #10000	; 0x2710
   17b80:	647b      	str	r3, [r7, #68]	; 0x44

	// Secure part relative to the Pin entry function
	iRet = SEC_PinEntryInit (&xEntryCfg, C_SEC_CIPHERING); CHECK(iRet==OK, lblKO);         // C_SEC_CIPHERING secure part chosen to cipher Pin entry on terminal or pinpad
   17b82:	f107 0338 	add.w	r3, r7, #56	; 0x38
   17b86:	4618      	mov	r0, r3
   17b88:	2103      	movs	r1, #3
   17b8a:	f009 fc94 	bl	214b6 <SEC_PinEntryInit>
   17b8e:	6338      	str	r0, [r7, #48]	; 0x30
   17b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17b92:	2b00      	cmp	r3, #0
   17b94:	f040 814e 	bne.w	17e34 <PinEntry+0x488>

	// Pin entry code management
	// *************************
	iPinSize=0;
   17b98:	2300      	movs	r3, #0
   17b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	strcpy (tcPin, pcMsg2);
   17b9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
   17ba0:	4618      	mov	r0, r3
   17ba2:	6939      	ldr	r1, [r7, #16]
   17ba4:	f7f1 e83c 	blx	8c20 <_init+0xc0>

	while (!bExitPin)
   17ba8:	e13c      	b.n	17e24 <PinEntry+0x478>
	{
		uiEveWait=uiEvent; // Init ttestall (from SEC_PinEntry) with the right peripheral events
   17baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17bac:	623b      	str	r3, [r7, #32]
		iRet = SEC_PinEntry (&uiEveWait, &ucKey, &iContinue);
   17bae:	f107 0120 	add.w	r1, r7, #32
   17bb2:	f107 021a 	add.w	r2, r7, #26
   17bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
   17bba:	4608      	mov	r0, r1
   17bbc:	4611      	mov	r1, r2
   17bbe:	461a      	mov	r2, r3
   17bc0:	f009 fc67 	bl	21492 <SEC_PinEntry>
   17bc4:	6338      	str	r0, [r7, #48]	; 0x30

		if (iRet == OK)
   17bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17bc8:	2b00      	cmp	r3, #0
   17bca:	f040 8109 	bne.w	17de0 <PinEntry+0x434>
		{
			if (ucKey == ECHO_PIN)
   17bce:	7ebb      	ldrb	r3, [r7, #26]
   17bd0:	2b2a      	cmp	r3, #42	; 0x2a
   17bd2:	d152      	bne.n	17c7a <PinEntry+0x2ce>
			{
				// Enter pin in progress
				// =====================
				if (iPinSize < MAX_PIN_CODE_SIZE)
   17bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17bd6:	2b0b      	cmp	r3, #11
   17bd8:	f300 810f 	bgt.w	17dfa <PinEntry+0x44e>
				{
					tcPin[strlen(pcMsg2)+iPinSize] = ucKey;
   17bdc:	6938      	ldr	r0, [r7, #16]
   17bde:	f7f1 e852 	blx	8c84 <_init+0x124>
   17be2:	4602      	mov	r2, r0
   17be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17be6:	18d3      	adds	r3, r2, r3
   17be8:	7eba      	ldrb	r2, [r7, #26]
   17bea:	f107 0160 	add.w	r1, r7, #96	; 0x60
   17bee:	18cb      	adds	r3, r1, r3
   17bf0:	f803 2c18 	strb.w	r2, [r3, #-24]
					tcPin[strlen(pcMsg2)+iPinSize+1] = 0;
   17bf4:	6938      	ldr	r0, [r7, #16]
   17bf6:	f7f1 e846 	blx	8c84 <_init+0x124>
   17bfa:	4602      	mov	r2, r0
   17bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17bfe:	18d3      	adds	r3, r2, r3
   17c00:	3301      	adds	r3, #1
   17c02:	f107 0260 	add.w	r2, r7, #96	; 0x60
   17c06:	18d3      	adds	r3, r2, r3
   17c08:	2200      	movs	r2, #0
   17c0a:	f803 2c18 	strb.w	r2, [r3, #-24]
					switch (iPpd)
   17c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17c10:	2b01      	cmp	r3, #1
   17c12:	d016      	beq.n	17c42 <PinEntry+0x296>
   17c14:	2b02      	cmp	r3, #2
   17c16:	d01e      	beq.n	17c56 <PinEntry+0x2aa>
   17c18:	2b00      	cmp	r3, #0
   17c1a:	d129      	bne.n	17c70 <PinEntry+0x2c4>
					{
					case 0:                                                                // *** Pin on terminal
						iRet = GoalDspLine(hScreen, 1, (char*)tcPin, &txPin[1], 0, true);
   17c1c:	69fa      	ldr	r2, [r7, #28]
   17c1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
   17c22:	2100      	movs	r1, #0
   17c24:	9100      	str	r1, [sp, #0]
   17c26:	2101      	movs	r1, #1
   17c28:	9101      	str	r1, [sp, #4]
   17c2a:	4610      	mov	r0, r2
   17c2c:	2101      	movs	r1, #1
   17c2e:	461a      	mov	r2, r3
   17c30:	4b40      	ldr	r3, [pc, #256]	; (17d34 <PinEntry+0x388>)
   17c32:	f7f5 fd05 	bl	d640 <GoalDspLine>
   17c36:	6338      	str	r0, [r7, #48]	; 0x30
						CHECK(iRet>=0, lblKO);                                             // Display pin code entry
   17c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17c3a:	2b00      	cmp	r3, #0
   17c3c:	f2c0 80fa 	blt.w	17e34 <PinEntry+0x488>
						break;
   17c40:	e017      	b.n	17c72 <PinEntry+0x2c6>
					case 1:                                                                // *** Pin on pinpad with characters display
						PPS_newline(); PPS_Display(tcPin); PPS_newline(); 				   // Display pin code entry on second line (to avoid using PPS_clearline())
   17c42:	f008 fb8f 	bl	20364 <PPS_newline>
   17c46:	f107 0348 	add.w	r3, r7, #72	; 0x48
   17c4a:	4618      	mov	r0, r3
   17c4c:	f008 fbf6 	bl	2043c <PPS_Display>
   17c50:	f008 fb88 	bl	20364 <PPS_newline>
						break;
   17c54:	e00d      	b.n	17c72 <PinEntry+0x2c6>
					case 2:                                                                // *** Pin on pinpad with graphical display
						DrawExtendedString(0, 35, tcPin, _OFF_, _MEDIUM_, _NORMALE_);      // Display pin code entry
   17c56:	f107 0348 	add.w	r3, r7, #72	; 0x48
   17c5a:	2201      	movs	r2, #1
   17c5c:	9200      	str	r2, [sp, #0]
   17c5e:	2201      	movs	r2, #1
   17c60:	9201      	str	r2, [sp, #4]
   17c62:	2000      	movs	r0, #0
   17c64:	2123      	movs	r1, #35	; 0x23
   17c66:	461a      	mov	r2, r3
   17c68:	2300      	movs	r3, #0
   17c6a:	f008 f941 	bl	1fef0 <DrawExtendedString>
						break;
   17c6e:	e000      	b.n	17c72 <PinEntry+0x2c6>
					default:
						break;
   17c70:	bf00      	nop
					}
					iPinSize++;
   17c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17c74:	3301      	adds	r3, #1
   17c76:	62fb      	str	r3, [r7, #44]	; 0x2c
						default:
							break;
						}
					}
					break;
				default:             break;
   17c78:	e0bf      	b.n	17dfa <PinEntry+0x44e>
			}
			else
			{
				// Pin confirmation
				// ================
				switch (ucKey)
   17c7a:	7ebb      	ldrb	r3, [r7, #26]
   17c7c:	2b18      	cmp	r3, #24
   17c7e:	f200 80bc 	bhi.w	17dfa <PinEntry+0x44e>
   17c82:	a101      	add	r1, pc, #4	; (adr r1, 17c88 <PinEntry+0x2dc>)
   17c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   17c88:	00017ced 	.word	0x00017ced
   17c8c:	00017d23 	.word	0x00017d23
   17c90:	00017dfb 	.word	0x00017dfb
   17c94:	00017dfb 	.word	0x00017dfb
   17c98:	00017dfb 	.word	0x00017dfb
   17c9c:	00017dfb 	.word	0x00017dfb
   17ca0:	00017dfb 	.word	0x00017dfb
   17ca4:	00017dfb 	.word	0x00017dfb
   17ca8:	00017dfb 	.word	0x00017dfb
   17cac:	00017dfb 	.word	0x00017dfb
   17cb0:	00017dfb 	.word	0x00017dfb
   17cb4:	00017dfb 	.word	0x00017dfb
   17cb8:	00017dfb 	.word	0x00017dfb
   17cbc:	00017dfb 	.word	0x00017dfb
   17cc0:	00017dfb 	.word	0x00017dfb
   17cc4:	00017dfb 	.word	0x00017dfb
   17cc8:	00017dfb 	.word	0x00017dfb
   17ccc:	00017dfb 	.word	0x00017dfb
   17cd0:	00017dfb 	.word	0x00017dfb
   17cd4:	00017dfb 	.word	0x00017dfb
   17cd8:	00017dfb 	.word	0x00017dfb
   17cdc:	00017dfb 	.word	0x00017dfb
   17ce0:	00017d29 	.word	0x00017d29
   17ce4:	00017d2f 	.word	0x00017d2f
   17ce8:	00017d3d 	.word	0x00017d3d
				{
				case 0x00:                   // Response to stop pin entry by receiving an event
					if(uiEveWait & KEYBOARD) // Key event from terminal
   17cec:	6a3b      	ldr	r3, [r7, #32]
   17cee:	f003 0301 	and.w	r3, r3, #1
   17cf2:	2b00      	cmp	r3, #0
   17cf4:	d012      	beq.n	17d1c <PinEntry+0x370>
					{
						GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "EVENT RECEIVED\nKEY PRESSED", GL_ICON_INFORMATION, GL_BUTTON_NONE, 2*1000);
   17cf6:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   17cfa:	f2c0 0302 	movt	r3, #2
   17cfe:	681b      	ldr	r3, [r3, #0]
   17d00:	2200      	movs	r2, #0
   17d02:	9200      	str	r2, [sp, #0]
   17d04:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   17d08:	9201      	str	r2, [sp, #4]
   17d0a:	4618      	mov	r0, r3
   17d0c:	2100      	movs	r1, #0
   17d0e:	f645 5270 	movw	r2, #23920	; 0x5d70
   17d12:	f2c0 0202 	movt	r2, #2
   17d16:	2302      	movs	r3, #2
   17d18:	f009 fcb6 	bl	21688 <GL_Dialog_Message>
					}
					iRet=0;
   17d1c:	2300      	movs	r3, #0
   17d1e:	633b      	str	r3, [r7, #48]	; 0x30
					break;
   17d20:	e06e      	b.n	17e00 <PinEntry+0x454>
				case 0x01:   iRet=0; break;
   17d22:	2300      	movs	r3, #0
   17d24:	633b      	str	r3, [r7, #48]	; 0x30
   17d26:	e06b      	b.n	17e00 <PinEntry+0x454>
				case T_VAL:  iRet=1; break;  // Valid key from Pinpad or Terminal when enter pin => iContinue=FALSE if >= Min pin entry
   17d28:	2301      	movs	r3, #1
   17d2a:	633b      	str	r3, [r7, #48]	; 0x30
   17d2c:	e068      	b.n	17e00 <PinEntry+0x454>
				case T_ANN:  iRet=0; break;  // Cancel key from Pinpad or Terminal when enter pin => iContinue=FALSE
   17d2e:	2300      	movs	r3, #0
   17d30:	633b      	str	r3, [r7, #48]	; 0x30
   17d32:	e065      	b.n	17e00 <PinEntry+0x454>
   17d34:	00025838 	.word	0x00025838
   17d38:	000258e4 	.word	0x000258e4
				case T_CORR:                 // Correction from Pinpad or Terminal when enter pin => iContinue=TRUE
					if (iPinSize != 0)
   17d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17d3e:	2b00      	cmp	r3, #0
   17d40:	d05d      	beq.n	17dfe <PinEntry+0x452>
					{
						iPinSize--;
   17d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17d44:	3b01      	subs	r3, #1
   17d46:	62fb      	str	r3, [r7, #44]	; 0x2c
						tcPin[strlen(pcMsg2)+iPinSize] = ' ';
   17d48:	6938      	ldr	r0, [r7, #16]
   17d4a:	f7f0 ef9c 	blx	8c84 <_init+0x124>
   17d4e:	4602      	mov	r2, r0
   17d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17d52:	18d3      	adds	r3, r2, r3
   17d54:	f107 0260 	add.w	r2, r7, #96	; 0x60
   17d58:	18d3      	adds	r3, r2, r3
   17d5a:	2220      	movs	r2, #32
   17d5c:	f803 2c18 	strb.w	r2, [r3, #-24]
						tcPin[strlen(pcMsg2)+iPinSize+1] = 0;
   17d60:	6938      	ldr	r0, [r7, #16]
   17d62:	f7f0 ef90 	blx	8c84 <_init+0x124>
   17d66:	4602      	mov	r2, r0
   17d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17d6a:	18d3      	adds	r3, r2, r3
   17d6c:	3301      	adds	r3, #1
   17d6e:	f107 0160 	add.w	r1, r7, #96	; 0x60
   17d72:	18cb      	adds	r3, r1, r3
   17d74:	2200      	movs	r2, #0
   17d76:	f803 2c18 	strb.w	r2, [r3, #-24]
						switch (iPpd)
   17d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17d7c:	2b01      	cmp	r3, #1
   17d7e:	d015      	beq.n	17dac <PinEntry+0x400>
   17d80:	2b02      	cmp	r3, #2
   17d82:	d01d      	beq.n	17dc0 <PinEntry+0x414>
   17d84:	2b00      	cmp	r3, #0
   17d86:	d128      	bne.n	17dda <PinEntry+0x42e>
						{
						case 0:                                                            // *** Pin on terminal
							iRet = GoalDspLine(hScreen, 1, (char*)tcPin, &txPin[1], 0, true);
   17d88:	69fa      	ldr	r2, [r7, #28]
   17d8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
   17d8e:	2100      	movs	r1, #0
   17d90:	9100      	str	r1, [sp, #0]
   17d92:	2101      	movs	r1, #1
   17d94:	9101      	str	r1, [sp, #4]
   17d96:	4610      	mov	r0, r2
   17d98:	2101      	movs	r1, #1
   17d9a:	461a      	mov	r2, r3
   17d9c:	4b4d      	ldr	r3, [pc, #308]	; (17ed4 <PinEntry+0x528>)
   17d9e:	f7f5 fc4f 	bl	d640 <GoalDspLine>
   17da2:	6338      	str	r0, [r7, #48]	; 0x30
							CHECK(iRet>=0, lblKO);                                         // Pin entry code correction
   17da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17da6:	2b00      	cmp	r3, #0
   17da8:	db44      	blt.n	17e34 <PinEntry+0x488>
							break;
   17daa:	e017      	b.n	17ddc <PinEntry+0x430>
						case 1:                                                            // *** Pin on pinpad with characters display
							PPS_newline(); PPS_Display(tcPin); PPS_newline(); 			   // Pin entry code correction on second line (to avoid using PPS_clearline())
   17dac:	f008 fada 	bl	20364 <PPS_newline>
   17db0:	f107 0348 	add.w	r3, r7, #72	; 0x48
   17db4:	4618      	mov	r0, r3
   17db6:	f008 fb41 	bl	2043c <PPS_Display>
   17dba:	f008 fad3 	bl	20364 <PPS_newline>
							break;
   17dbe:	e00d      	b.n	17ddc <PinEntry+0x430>
						case 2:                                                            // *** Pin on pinpad with graphical display
							DrawExtendedString(0, 35, tcPin, _OFF_, _MEDIUM_, _NORMALE_);  // Pin entry code correction
   17dc0:	f107 0348 	add.w	r3, r7, #72	; 0x48
   17dc4:	2201      	movs	r2, #1
   17dc6:	9200      	str	r2, [sp, #0]
   17dc8:	2201      	movs	r2, #1
   17dca:	9201      	str	r2, [sp, #4]
   17dcc:	2000      	movs	r0, #0
   17dce:	2123      	movs	r1, #35	; 0x23
   17dd0:	461a      	mov	r2, r3
   17dd2:	2300      	movs	r3, #0
   17dd4:	f008 f88c 	bl	1fef0 <DrawExtendedString>
							break;
   17dd8:	e000      	b.n	17ddc <PinEntry+0x430>
						default:
							break;
   17dda:	bf00      	nop
						}
					}
					break;
   17ddc:	bf00      	nop
   17dde:	e00e      	b.n	17dfe <PinEntry+0x452>
				default:             break;
				}
			}
		}
		else if (iRet == ERR_TIMEOUT)                                                      // Pin entry on pinpad and canceled by terminal
   17de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17de2:	f513 6f81 	cmn.w	r3, #1032	; 0x408
   17de6:	d102      	bne.n	17dee <PinEntry+0x442>
			bExitPin=TRUE;
   17de8:	2301      	movs	r3, #1
   17dea:	76fb      	strb	r3, [r7, #27]
   17dec:	e008      	b.n	17e00 <PinEntry+0x454>
		else                                                                               // Pin entry on pinpad already in progress
		{
			iRet=-1;
   17dee:	f04f 33ff 	mov.w	r3, #4294967295
   17df2:	633b      	str	r3, [r7, #48]	; 0x30
			bExitPin=TRUE;
   17df4:	2301      	movs	r3, #1
   17df6:	76fb      	strb	r3, [r7, #27]
   17df8:	e002      	b.n	17e00 <PinEntry+0x454>
						default:
							break;
						}
					}
					break;
				default:             break;
   17dfa:	bf00      	nop
   17dfc:	e000      	b.n	17e00 <PinEntry+0x454>
							break;
						default:
							break;
						}
					}
					break;
   17dfe:	bf00      	nop
			bExitPin=TRUE;
		}

		// Pin exit process
		// ================
		if (iContinue  == FALSE)                                                           // The Pin entry is already stopped
   17e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17e02:	2b00      	cmp	r3, #0
   17e04:	d107      	bne.n	17e16 <PinEntry+0x46a>
		{
			ResetPeripherals(KEYBOARD | TSCREEN);                                          // Reset keyboard/touch FIFO for unexpected keys
   17e06:	2001      	movs	r0, #1
   17e08:	f6c0 0000 	movt	r0, #2048	; 0x800
   17e0c:	f7f2 fdc0 	bl	a990 <ResetPeripherals>
			bExitPin=TRUE;                                                                 // exit immediately
   17e10:	2301      	movs	r3, #1
   17e12:	76fb      	strb	r3, [r7, #27]
   17e14:	e006      	b.n	17e24 <PinEntry+0x478>
		}
		else if (bExitPin == TRUE)                                                         // The Pin entry is not stopped
   17e16:	7efb      	ldrb	r3, [r7, #27]
   17e18:	2b00      	cmp	r3, #0
   17e1a:	d003      	beq.n	17e24 <PinEntry+0x478>
		{
			iContinue=FALSE;                                                               // To stop the Pin entry
   17e1c:	2300      	movs	r3, #0
   17e1e:	627b      	str	r3, [r7, #36]	; 0x24
			bExitPin=FALSE;                                                                // loop one more time before exit
   17e20:	2300      	movs	r3, #0
   17e22:	76fb      	strb	r3, [r7, #27]
	// Pin entry code management
	// *************************
	iPinSize=0;
	strcpy (tcPin, pcMsg2);

	while (!bExitPin)
   17e24:	7efb      	ldrb	r3, [r7, #27]
   17e26:	f083 0301 	eor.w	r3, r3, #1
   17e2a:	b2db      	uxtb	r3, r3
   17e2c:	2b00      	cmp	r3, #0
   17e2e:	f47f aebc 	bne.w	17baa <PinEntry+0x1fe>
			iContinue=FALSE;                                                               // To stop the Pin entry
			bExitPin=FALSE;                                                                // loop one more time before exit
		}
	}

	goto lblEnd;
   17e32:	e003      	b.n	17e3c <PinEntry+0x490>

	// Errors treatment
	// ****************
	lblKO:
	iRet=-1;                                                                               // Pin entry failed
   17e34:	f04f 33ff 	mov.w	r3, #4294967295
   17e38:	633b      	str	r3, [r7, #48]	; 0x30
	goto lblEnd;
   17e3a:	bf00      	nop
	lblEnd:
	switch (iPpd)
   17e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17e3e:	2b01      	cmp	r3, #1
   17e40:	d010      	beq.n	17e64 <PinEntry+0x4b8>
   17e42:	2b02      	cmp	r3, #2
   17e44:	d019      	beq.n	17e7a <PinEntry+0x4ce>
   17e46:	2b00      	cmp	r3, #0
   17e48:	d131      	bne.n	17eae <PinEntry+0x502>
	{
	case 0:                                                                                // *** Pin on terminal
		Telium_Ttestall(0, 1);                                                             // To consume the cancel key from Pin entry
   17e4a:	2000      	movs	r0, #0
   17e4c:	2101      	movs	r1, #1
   17e4e:	f007 fff3 	bl	1fe38 <Telium_Ttestall>
		if (hScreen)
   17e52:	69fb      	ldr	r3, [r7, #28]
   17e54:	2b00      	cmp	r3, #0
   17e56:	d02b      	beq.n	17eb0 <PinEntry+0x504>
			GoalDestroyScreen(&hScreen);                                                   // Destroy screen
   17e58:	f107 031c 	add.w	r3, r7, #28
   17e5c:	4618      	mov	r0, r3
   17e5e:	f7f6 f887 	bl	df70 <GoalDestroyScreen>
		break;
   17e62:	e025      	b.n	17eb0 <PinEntry+0x504>
	case 1:                                                                                // *** Pin on pinpad with characters display
		PPS_firstline();
   17e64:	f008 fa50 	bl	20308 <PPS_firstline>
		PPS_Display((char*) pcMsg1Idle);                                                   // Idle message
   17e68:	68f8      	ldr	r0, [r7, #12]
   17e6a:	f008 fae7 	bl	2043c <PPS_Display>
		PPS_newline();
   17e6e:	f008 fa79 	bl	20364 <PPS_newline>
		PPS_Display((char*) pcMsg2Idle);                                                   // Second message on pinpad
   17e72:	68b8      	ldr	r0, [r7, #8]
   17e74:	f008 fae2 	bl	2043c <PPS_Display>
		break;
   17e78:	e01b      	b.n	17eb2 <PinEntry+0x506>
	case 2:                                                                                // *** Pin on pinpad with graphical display
		_DrawExtendedString(0, 22, (char*) pcMsg1Idle, _OFF_, _MEDIUM_, _NORMALE_);        // Idle message
   17e7a:	2301      	movs	r3, #1
   17e7c:	9300      	str	r3, [sp, #0]
   17e7e:	2301      	movs	r3, #1
   17e80:	9301      	str	r3, [sp, #4]
   17e82:	2000      	movs	r0, #0
   17e84:	2116      	movs	r1, #22
   17e86:	68fa      	ldr	r2, [r7, #12]
   17e88:	2300      	movs	r3, #0
   17e8a:	f008 f8bd 	bl	20008 <_DrawExtendedString>
		_DrawExtendedString(0, 35, (char*) pcMsg2Idle, _OFF_, _MEDIUM_, _NORMALE_);
   17e8e:	2301      	movs	r3, #1
   17e90:	9300      	str	r3, [sp, #0]
   17e92:	2301      	movs	r3, #1
   17e94:	9301      	str	r3, [sp, #4]
   17e96:	2000      	movs	r0, #0
   17e98:	2123      	movs	r1, #35	; 0x23
   17e9a:	68ba      	ldr	r2, [r7, #8]
   17e9c:	2300      	movs	r3, #0
   17e9e:	f008 f8b3 	bl	20008 <_DrawExtendedString>
		PaintGraphics();
   17ea2:	f008 f883 	bl	1ffac <PaintGraphics>
		InitContext(PERIPH_DISPLAY);                                                       // Switch to graphic display terminal
   17ea6:	2000      	movs	r0, #0
   17ea8:	f008 f856 	bl	1ff58 <InitContexteGraphique>
		break;
   17eac:	e001      	b.n	17eb2 <PinEntry+0x506>
	default:
		break;
   17eae:	e000      	b.n	17eb2 <PinEntry+0x506>
	{
	case 0:                                                                                // *** Pin on terminal
		Telium_Ttestall(0, 1);                                                             // To consume the cancel key from Pin entry
		if (hScreen)
			GoalDestroyScreen(&hScreen);                                                   // Destroy screen
		break;
   17eb0:	bf00      	nop
		break;
	default:
		break;
	}

	return iRet;
   17eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   17eb4:	4618      	mov	r0, r3
   17eb6:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   17eba:	f2c0 0302 	movt	r3, #2
   17ebe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   17ec0:	681b      	ldr	r3, [r3, #0]
   17ec2:	429a      	cmp	r2, r3
   17ec4:	d001      	beq.n	17eca <PinEntry+0x51e>
   17ec6:	f7f1 f86d 	bl	8fa4 <__stack_chk_fail>
   17eca:	f107 0760 	add.w	r7, r7, #96	; 0x60
   17ece:	46bd      	mov	sp, r7
   17ed0:	bd80      	pop	{r7, pc}
   17ed2:	bf00      	nop
   17ed4:	00025838 	.word	0x00025838

00017ed8 <SetConfig>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void SetConfig(void)
{
   17ed8:	b580      	push	{r7, lr}
   17eda:	b0a0      	sub	sp, #128	; 0x80
   17edc:	af04      	add	r7, sp, #16
   17ede:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   17ee2:	f2c0 0302 	movt	r3, #2
   17ee6:	681b      	ldr	r3, [r3, #0]
   17ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
	// Local variables
	// ***************
	T_SEC_CONFIG txConfParts[C_NB_PARTS];
	int i, iNbParts, iDefItem;
	char *pcTitle;
	int iPpdBooster=0, iTermBooster=0, iRet;
   17eea:	2300      	movs	r3, #0
   17eec:	613b      	str	r3, [r7, #16]
   17eee:	2300      	movs	r3, #0
   17ef0:	617b      	str	r3, [r7, #20]

	// Check Pinpad
	// ============
	iRet = DLLExist("SECURITY"); CHECK(iRet==TRUE, lblNoSecDll);              // Security DLL loaded?
   17ef2:	f645 508c 	movw	r0, #23948	; 0x5d8c
   17ef6:	f2c0 0002 	movt	r0, #2
   17efa:	f007 fcaf 	bl	1f85c <DLLExist>
   17efe:	61b8      	str	r0, [r7, #24]
   17f00:	69bb      	ldr	r3, [r7, #24]
   17f02:	2b01      	cmp	r3, #1
   17f04:	f040 8103 	bne.w	1810e <SetConfig+0x236>
	iRet = ChkPpdConfig(); CHECK(iRet>=0, lblEnd);                            // Pinpad problem? => check config from Manager
   17f08:	f7ff fada 	bl	174c0 <ChkPpdConfig>
   17f0c:	61b8      	str	r0, [r7, #24]
   17f0e:	69bb      	ldr	r3, [r7, #24]
   17f10:	2b00      	cmp	r3, #0
   17f12:	f2c0 8138 	blt.w	18186 <SetConfig+0x2ae>
	CHECK(iRet!=0, lblNoPPad);                                                // No pinpad connected?
   17f16:	69bb      	ldr	r3, [r7, #24]
   17f18:	2b00      	cmp	r3, #0
   17f1a:	f000 810c 	beq.w	18136 <SetConfig+0x25e>

	// Get the configuration parts on the security component
	// *****************************************************
	iRet = SEC_GetConfig(&iNbParts, txConfParts); CHECK(iRet==OK, lblKO);     // Get configuration parts by default
   17f1e:	463a      	mov	r2, r7
   17f20:	f107 031c 	add.w	r3, r7, #28
   17f24:	4610      	mov	r0, r2
   17f26:	4619      	mov	r1, r3
   17f28:	f009 fa35 	bl	21396 <SEC_GetConfig>
   17f2c:	61b8      	str	r0, [r7, #24]
   17f2e:	69bb      	ldr	r3, [r7, #24]
   17f30:	2b00      	cmp	r3, #0
   17f32:	f040 8114 	bne.w	1815e <SetConfig+0x286>
	for (i=0; i<iNbParts; i++)
   17f36:	2300      	movs	r3, #0
   17f38:	607b      	str	r3, [r7, #4]
   17f3a:	e025      	b.n	17f88 <SetConfig+0xb0>
	{
		if ( memcmp (txConfParts[i].ptszBoosterPeripheral, IAPP_USB_NAME, strlen(IAPP_USB_NAME)) == 0)
   17f3c:	687b      	ldr	r3, [r7, #4]
   17f3e:	011b      	lsls	r3, r3, #4
   17f40:	f107 0170 	add.w	r1, r7, #112	; 0x70
   17f44:	18cb      	adds	r3, r1, r3
   17f46:	3b4c      	subs	r3, #76	; 0x4c
   17f48:	681b      	ldr	r3, [r3, #0]
   17f4a:	4618      	mov	r0, r3
   17f4c:	f645 5124 	movw	r1, #23844	; 0x5d24
   17f50:	f2c0 0102 	movt	r1, #2
   17f54:	2208      	movs	r2, #8
   17f56:	f7f0 eece 	blx	8cf4 <_init+0x194>
   17f5a:	4603      	mov	r3, r0
   17f5c:	2b00      	cmp	r3, #0
   17f5e:	d108      	bne.n	17f72 <SetConfig+0x9a>
			iPpdBooster = txConfParts[i].cBoosterType;                        // Pinpad booster type 1/2
   17f60:	687b      	ldr	r3, [r7, #4]
   17f62:	011b      	lsls	r3, r3, #4
   17f64:	f107 0270 	add.w	r2, r7, #112	; 0x70
   17f68:	18d3      	adds	r3, r2, r3
   17f6a:	3b54      	subs	r3, #84	; 0x54
   17f6c:	791b      	ldrb	r3, [r3, #4]
   17f6e:	613b      	str	r3, [r7, #16]
   17f70:	e007      	b.n	17f82 <SetConfig+0xaa>
		else
			iTermBooster = txConfParts[i].cBoosterType;                       // Terminal booster type 1/2/3/Islero
   17f72:	687b      	ldr	r3, [r7, #4]
   17f74:	011b      	lsls	r3, r3, #4
   17f76:	f107 0170 	add.w	r1, r7, #112	; 0x70
   17f7a:	18cb      	adds	r3, r1, r3
   17f7c:	3b54      	subs	r3, #84	; 0x54
   17f7e:	791b      	ldrb	r3, [r3, #4]
   17f80:	617b      	str	r3, [r7, #20]
	CHECK(iRet!=0, lblNoPPad);                                                // No pinpad connected?

	// Get the configuration parts on the security component
	// *****************************************************
	iRet = SEC_GetConfig(&iNbParts, txConfParts); CHECK(iRet==OK, lblKO);     // Get configuration parts by default
	for (i=0; i<iNbParts; i++)
   17f82:	687b      	ldr	r3, [r7, #4]
   17f84:	3301      	adds	r3, #1
   17f86:	607b      	str	r3, [r7, #4]
   17f88:	683b      	ldr	r3, [r7, #0]
   17f8a:	687a      	ldr	r2, [r7, #4]
   17f8c:	429a      	cmp	r2, r3
   17f8e:	dbd5      	blt.n	17f3c <SetConfig+0x64>
			iTermBooster = txConfParts[i].cBoosterType;                       // Terminal booster type 1/2/3/Islero
	}

	// Set the configuration parts on the security component
	// *****************************************************
	for (i=0; i<iNbParts; i++)
   17f90:	2300      	movs	r3, #0
   17f92:	607b      	str	r3, [r7, #4]
   17f94:	e097      	b.n	180c6 <SetConfig+0x1ee>
	{

		iRet = ChkPpdConfig();
   17f96:	f7ff fa93 	bl	174c0 <ChkPpdConfig>
   17f9a:	61b8      	str	r0, [r7, #24]
		if (iRet > 0)                                                         // Pinpad declared in Manager and connected?
   17f9c:	69bb      	ldr	r3, [r7, #24]
   17f9e:	2b00      	cmp	r3, #0
   17fa0:	f340 808e 	ble.w	180c0 <SetConfig+0x1e8>
		{
			switch (txConfParts [i].SecureType)                               // Yes, Prompt for switching some secure parts
   17fa4:	687b      	ldr	r3, [r7, #4]
   17fa6:	011b      	lsls	r3, r3, #4
   17fa8:	f107 0270 	add.w	r2, r7, #112	; 0x70
   17fac:	18d3      	adds	r3, r2, r3
   17fae:	3b54      	subs	r3, #84	; 0x54
   17fb0:	681b      	ldr	r3, [r3, #0]
   17fb2:	2b02      	cmp	r3, #2
   17fb4:	d009      	beq.n	17fca <SetConfig+0xf2>
   17fb6:	2b03      	cmp	r3, #3
   17fb8:	d00d      	beq.n	17fd6 <SetConfig+0xfe>
   17fba:	2b01      	cmp	r3, #1
   17fbc:	d111      	bne.n	17fe2 <SetConfig+0x10a>
			{
			case C_SEC_PINCODE  : pcTitle = "PIN ENTRY ?";      break;        // Pin on terminal or pinpad?
   17fbe:	f645 5398 	movw	r3, #23960	; 0x5d98
   17fc2:	f2c0 0302 	movt	r3, #2
   17fc6:	60fb      	str	r3, [r7, #12]
   17fc8:	e00c      	b.n	17fe4 <SetConfig+0x10c>
			case C_SEC_CARD     : pcTitle = "CARD READER ?";    break;        // Card on terminal or pinpad?
   17fca:	f645 53a4 	movw	r3, #23972	; 0x5da4
   17fce:	f2c0 0302 	movt	r3, #2
   17fd2:	60fb      	str	r3, [r7, #12]
   17fd4:	e006      	b.n	17fe4 <SetConfig+0x10c>
			case C_SEC_CIPHERING: pcTitle = "DATA CIPHERING ?"; break;        // Ciphering on terminal or pinpad?
   17fd6:	f645 53b4 	movw	r3, #23988	; 0x5db4
   17fda:	f2c0 0302 	movt	r3, #2
   17fde:	60fb      	str	r3, [r7, #12]
   17fe0:	e000      	b.n	17fe4 <SetConfig+0x10c>
			default:              goto lblKO;
   17fe2:	e0bc      	b.n	1815e <SetConfig+0x286>
			}

			switch (txConfParts [i].SecureType)                               // Select the secure parts to switch
   17fe4:	687b      	ldr	r3, [r7, #4]
   17fe6:	011b      	lsls	r3, r3, #4
   17fe8:	f107 0170 	add.w	r1, r7, #112	; 0x70
   17fec:	18cb      	adds	r3, r1, r3
   17fee:	3b54      	subs	r3, #84	; 0x54
   17ff0:	681b      	ldr	r3, [r3, #0]
   17ff2:	3b01      	subs	r3, #1
   17ff4:	2b01      	cmp	r3, #1
   17ff6:	d862      	bhi.n	180be <SetConfig+0x1e6>
			case C_SEC_PINCODE :
			case C_SEC_CARD :
#ifndef __TELIUM3__
			case C_SEC_CIPHERING :                                            // No secret area on pinpad for TETRA, ciphering always on terminal
#endif
				if (memcmp (txConfParts[i].ptszBoosterPeripheral, IAPP_USB_NAME, strlen(IAPP_USB_NAME)) == 0)
   17ff8:	687b      	ldr	r3, [r7, #4]
   17ffa:	011b      	lsls	r3, r3, #4
   17ffc:	f107 0270 	add.w	r2, r7, #112	; 0x70
   18000:	18d3      	adds	r3, r2, r3
   18002:	3b4c      	subs	r3, #76	; 0x4c
   18004:	681b      	ldr	r3, [r3, #0]
   18006:	4618      	mov	r0, r3
   18008:	f645 5124 	movw	r1, #23844	; 0x5d24
   1800c:	f2c0 0102 	movt	r1, #2
   18010:	2208      	movs	r2, #8
   18012:	f7f0 ee70 	blx	8cf4 <_init+0x194>
   18016:	4603      	mov	r3, r0
   18018:	2b00      	cmp	r3, #0
   1801a:	d102      	bne.n	18022 <SetConfig+0x14a>
					iDefItem=1;
   1801c:	2301      	movs	r3, #1
   1801e:	60bb      	str	r3, [r7, #8]
   18020:	e001      	b.n	18026 <SetConfig+0x14e>
				else
					iDefItem=0;
   18022:	2300      	movs	r3, #0
   18024:	60bb      	str	r3, [r7, #8]
				iRet = GL_Dialog_Choice(gGoalGraphicLibInstance, (const char*) pcTitle, tzMenuChoice, iDefItem, GL_BUTTON_DEFAULT, GL_KEY_0, GL_TIME_MINUTE);
   18026:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   1802a:	f2c0 0302 	movt	r3, #2
   1802e:	681b      	ldr	r3, [r3, #0]
   18030:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18034:	9200      	str	r2, [sp, #0]
   18036:	2230      	movs	r2, #48	; 0x30
   18038:	9201      	str	r2, [sp, #4]
   1803a:	f64e 2260 	movw	r2, #60000	; 0xea60
   1803e:	9202      	str	r2, [sp, #8]
   18040:	4618      	mov	r0, r3
   18042:	68f9      	ldr	r1, [r7, #12]
   18044:	f24f 7260 	movw	r2, #63328	; 0xf760
   18048:	f2c0 0202 	movt	r2, #2
   1804c:	68bb      	ldr	r3, [r7, #8]
   1804e:	f009 faf7 	bl	21640 <GL_Dialog_Choice>
   18052:	4603      	mov	r3, r0
   18054:	61bb      	str	r3, [r7, #24]
				switch (iRet)
   18056:	69bb      	ldr	r3, [r7, #24]
   18058:	2b00      	cmp	r3, #0
   1805a:	d002      	beq.n	18062 <SetConfig+0x18a>
   1805c:	2b01      	cmp	r3, #1
   1805e:	d016      	beq.n	1808e <SetConfig+0x1b6>
   18060:	e02b      	b.n	180ba <SetConfig+0x1e2>
				{
				case 0:
					txConfParts[i].cBoosterType = (char) iTermBooster;        // Booster type 1/2/3
   18062:	697b      	ldr	r3, [r7, #20]
   18064:	b2da      	uxtb	r2, r3
   18066:	687b      	ldr	r3, [r7, #4]
   18068:	011b      	lsls	r3, r3, #4
   1806a:	f107 0170 	add.w	r1, r7, #112	; 0x70
   1806e:	18cb      	adds	r3, r1, r3
   18070:	3b54      	subs	r3, #84	; 0x54
   18072:	711a      	strb	r2, [r3, #4]
					txConfParts[i].ptszBoosterPeripheral = IAPP_DEF_NAME;     // DEF_NAME internal booster
   18074:	687b      	ldr	r3, [r7, #4]
   18076:	011b      	lsls	r3, r3, #4
   18078:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1807c:	18d3      	adds	r3, r2, r3
   1807e:	f1a3 024c 	sub.w	r2, r3, #76	; 0x4c
   18082:	f645 53c8 	movw	r3, #24008	; 0x5dc8
   18086:	f2c0 0302 	movt	r3, #2
   1808a:	6013      	str	r3, [r2, #0]
					break;
   1808c:	e016      	b.n	180bc <SetConfig+0x1e4>
				case 1:
					txConfParts[i].cBoosterType = (char) iPpdBooster;         // Booster type 1/2
   1808e:	693b      	ldr	r3, [r7, #16]
   18090:	b2da      	uxtb	r2, r3
   18092:	687b      	ldr	r3, [r7, #4]
   18094:	011b      	lsls	r3, r3, #4
   18096:	f107 0170 	add.w	r1, r7, #112	; 0x70
   1809a:	18cb      	adds	r3, r1, r3
   1809c:	3b54      	subs	r3, #84	; 0x54
   1809e:	711a      	strb	r2, [r3, #4]
					txConfParts[i].ptszBoosterPeripheral = IAPP_USB_NAME;     // USB_NAME external booster
   180a0:	687b      	ldr	r3, [r7, #4]
   180a2:	011b      	lsls	r3, r3, #4
   180a4:	f107 0270 	add.w	r2, r7, #112	; 0x70
   180a8:	18d3      	adds	r3, r2, r3
   180aa:	f1a3 024c 	sub.w	r2, r3, #76	; 0x4c
   180ae:	f645 5324 	movw	r3, #23844	; 0x5d24
   180b2:	f2c0 0302 	movt	r3, #2
   180b6:	6013      	str	r3, [r2, #0]
					break;
   180b8:	e000      	b.n	180bc <SetConfig+0x1e4>
				default:
					goto lblEnd;                                              // Exit on cancel/timeout
   180ba:	e064      	b.n	18186 <SetConfig+0x2ae>
				}
				break;
   180bc:	e000      	b.n	180c0 <SetConfig+0x1e8>
				default:
					break;
   180be:	bf00      	nop
			iTermBooster = txConfParts[i].cBoosterType;                       // Terminal booster type 1/2/3/Islero
	}

	// Set the configuration parts on the security component
	// *****************************************************
	for (i=0; i<iNbParts; i++)
   180c0:	687b      	ldr	r3, [r7, #4]
   180c2:	3301      	adds	r3, #1
   180c4:	607b      	str	r3, [r7, #4]
   180c6:	683b      	ldr	r3, [r7, #0]
   180c8:	687a      	ldr	r2, [r7, #4]
   180ca:	429a      	cmp	r2, r3
   180cc:	f6ff af63 	blt.w	17f96 <SetConfig+0xbe>
					break;
			}
		}
	}

	iRet = SEC_SetConfig (iNbParts, txConfParts); CHECK(iRet==OK, lblKO);   // Set configuration parts
   180d0:	683a      	ldr	r2, [r7, #0]
   180d2:	f107 031c 	add.w	r3, r7, #28
   180d6:	4610      	mov	r0, r2
   180d8:	4619      	mov	r1, r3
   180da:	f009 f9fe 	bl	214da <SEC_SetConfig>
   180de:	61b8      	str	r0, [r7, #24]
   180e0:	69bb      	ldr	r3, [r7, #24]
   180e2:	2b00      	cmp	r3, #0
   180e4:	d13b      	bne.n	1815e <SetConfig+0x286>
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Set Security\nConfiguration done", GL_ICON_INFORMATION, GL_BUTTON_VALID, 3*1000);
   180e6:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   180ea:	f2c0 0302 	movt	r3, #2
   180ee:	681b      	ldr	r3, [r3, #0]
   180f0:	2201      	movs	r2, #1
   180f2:	9200      	str	r2, [sp, #0]
   180f4:	f640 32b8 	movw	r2, #3000	; 0xbb8
   180f8:	9201      	str	r2, [sp, #4]
   180fa:	4618      	mov	r0, r3
   180fc:	2100      	movs	r1, #0
   180fe:	f645 52d0 	movw	r2, #24016	; 0x5dd0
   18102:	f2c0 0202 	movt	r2, #2
   18106:	2302      	movs	r3, #2
   18108:	f009 fabe 	bl	21688 <GL_Dialog_Message>

	goto lblEnd;
   1810c:	e03b      	b.n	18186 <SetConfig+0x2ae>

	// Errors treatment
	// ****************
	lblNoSecDll:                                                                  // Security DLL missing
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Missing Sec DLL", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   1810e:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   18112:	f2c0 0302 	movt	r3, #2
   18116:	681b      	ldr	r3, [r3, #0]
   18118:	2201      	movs	r2, #1
   1811a:	9200      	str	r2, [sp, #0]
   1811c:	f640 32b8 	movw	r2, #3000	; 0xbb8
   18120:	9201      	str	r2, [sp, #4]
   18122:	4618      	mov	r0, r3
   18124:	2100      	movs	r1, #0
   18126:	f645 52f0 	movw	r2, #24048	; 0x5df0
   1812a:	f2c0 0202 	movt	r2, #2
   1812e:	2303      	movs	r3, #3
   18130:	f009 faaa 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   18134:	e027      	b.n	18186 <SetConfig+0x2ae>
	lblNoPPad:
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "No PinPad Connected", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   18136:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   1813a:	f2c0 0302 	movt	r3, #2
   1813e:	681b      	ldr	r3, [r3, #0]
   18140:	2201      	movs	r2, #1
   18142:	9200      	str	r2, [sp, #0]
   18144:	f241 3288 	movw	r2, #5000	; 0x1388
   18148:	9201      	str	r2, [sp, #4]
   1814a:	4618      	mov	r0, r3
   1814c:	2100      	movs	r1, #0
   1814e:	f645 6200 	movw	r2, #24064	; 0x5e00
   18152:	f2c0 0202 	movt	r2, #2
   18156:	2304      	movs	r3, #4
   18158:	f009 fa96 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   1815c:	e013      	b.n	18186 <SetConfig+0x2ae>
	lblKO:                                                                        // Security DLL error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   1815e:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   18162:	f2c0 0302 	movt	r3, #2
   18166:	681b      	ldr	r3, [r3, #0]
   18168:	2201      	movs	r2, #1
   1816a:	9200      	str	r2, [sp, #0]
   1816c:	f241 3288 	movw	r2, #5000	; 0x1388
   18170:	9201      	str	r2, [sp, #4]
   18172:	4618      	mov	r0, r3
   18174:	2100      	movs	r1, #0
   18176:	f645 6214 	movw	r2, #24084	; 0x5e14
   1817a:	f2c0 0202 	movt	r2, #2
   1817e:	2304      	movs	r3, #4
   18180:	f009 fa82 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   18184:	bf00      	nop
	lblEnd:
	return;
}
   18186:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1818a:	f2c0 0302 	movt	r3, #2
   1818e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   18190:	681b      	ldr	r3, [r3, #0]
   18192:	429a      	cmp	r2, r3
   18194:	d001      	beq.n	1819a <SetConfig+0x2c2>
   18196:	f7f0 ff05 	bl	8fa4 <__stack_chk_fail>
   1819a:	f107 0770 	add.w	r7, r7, #112	; 0x70
   1819e:	46bd      	mov	sp, r7
   181a0:	bd80      	pop	{r7, pc}
   181a2:	bf00      	nop

000181a4 <GetConfig>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void GetConfig(void)
{
   181a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   181a6:	f6ad 6d0c 	subw	sp, sp, #3596	; 0xe0c
   181aa:	af04      	add	r7, sp, #16
   181ac:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   181b0:	f2c0 0302 	movt	r3, #2
   181b4:	681b      	ldr	r3, [r3, #0]
   181b6:	f8c7 3df4 	str.w	r3, [r7, #3572]	; 0xdf4
	// Local variables
	// ***************
	T_GL_HWIDGET hScreen=NULL;
   181ba:	f107 030c 	add.w	r3, r7, #12
   181be:	2200      	movs	r2, #0
   181c0:	601a      	str	r2, [r3, #0]
	T_GL_HWIDGET hDocument=NULL;
   181c2:	f107 0310 	add.w	r3, r7, #16
   181c6:	2200      	movs	r2, #0
   181c8:	601a      	str	r2, [r3, #0]
	char tcPrint[2048];
	bool bArea;
	byte p; // Printer line index
	int i, i1, iRet;
	T_SEC_DATAKEY_ID xEraseKey;
	unsigned short Location = 1;
   181ca:	f107 030a 	add.w	r3, r7, #10
   181ce:	2201      	movs	r2, #1
   181d0:	801a      	strh	r2, [r3, #0]
	byte tucChkSum[3];
	doubleword uiLen;

	// Check Pinpad
	// ============
	hScreen = GoalCreateScreen(gGoalGraphicLibInstance, txSec, NUMBER_OF_LINES(txSec), GL_ENCODING_UTF8);
   181d2:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   181d6:	f2c0 0302 	movt	r3, #2
   181da:	681b      	ldr	r3, [r3, #0]
   181dc:	4618      	mov	r0, r3
   181de:	f245 3184 	movw	r1, #21380	; 0x5384
   181e2:	f2c0 0102 	movt	r1, #2
   181e6:	2206      	movs	r2, #6
   181e8:	2300      	movs	r3, #0
   181ea:	f7f4 ff71 	bl	d0d0 <GoalCreateScreen>
   181ee:	4602      	mov	r2, r0
   181f0:	f107 030c 	add.w	r3, r7, #12
   181f4:	601a      	str	r2, [r3, #0]
	CHECK(hScreen!=NULL, lblKO);                                     // Create screen and clear it
   181f6:	f107 030c 	add.w	r3, r7, #12
   181fa:	681b      	ldr	r3, [r3, #0]
   181fc:	2b00      	cmp	r3, #0
   181fe:	f000 84b3 	beq.w	18b68 <GetConfig+0x9c4>
	iRet = GoalClrScreen(hScreen, GL_COLOR_TRANSPARENT, KEY_VALID, false);
   18202:	f107 030c 	add.w	r3, r7, #12
   18206:	681b      	ldr	r3, [r3, #0]
   18208:	f107 0430 	add.w	r4, r7, #48	; 0x30
   1820c:	4618      	mov	r0, r3
   1820e:	2100      	movs	r1, #0
   18210:	2201      	movs	r2, #1
   18212:	2300      	movs	r3, #0
   18214:	f7f5 f8fa 	bl	d40c <GoalClrScreen>
   18218:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
   1821a:	f107 0330 	add.w	r3, r7, #48	; 0x30
   1821e:	681b      	ldr	r3, [r3, #0]
   18220:	2b00      	cmp	r3, #0
   18222:	f2c0 84a1 	blt.w	18b68 <GetConfig+0x9c4>

	iRet = DLLExist("SECURITY"); CHECK(iRet==TRUE, lblNoSecDll);     // Security DLL loaded?
   18226:	f107 0430 	add.w	r4, r7, #48	; 0x30
   1822a:	f645 508c 	movw	r0, #23948	; 0x5d8c
   1822e:	f2c0 0002 	movt	r0, #2
   18232:	f007 fb13 	bl	1f85c <DLLExist>
   18236:	6020      	str	r0, [r4, #0]
   18238:	f107 0330 	add.w	r3, r7, #48	; 0x30
   1823c:	681b      	ldr	r3, [r3, #0]
   1823e:	2b01      	cmp	r3, #1
   18240:	f040 847e 	bne.w	18b40 <GetConfig+0x99c>
	iRet = ChkPpdConfig(); CHECK(iRet>=0, lblEnd);                   // Pinpad problem? => check config from Manager
   18244:	f107 0430 	add.w	r4, r7, #48	; 0x30
   18248:	f7ff f93a 	bl	174c0 <ChkPpdConfig>
   1824c:	6020      	str	r0, [r4, #0]
   1824e:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18252:	681b      	ldr	r3, [r3, #0]
   18254:	2b00      	cmp	r3, #0
   18256:	f2c0 849b 	blt.w	18b90 <GetConfig+0x9ec>

	// Get the configuration of the security component
	// ===============================================
	iRet = SEC_GetConfig(&iNbParts, txConfParts); CHECK(iRet==OK, lblKO);
   1825a:	f107 0430 	add.w	r4, r7, #48	; 0x30
   1825e:	f107 0214 	add.w	r2, r7, #20
   18262:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
   18266:	4610      	mov	r0, r2
   18268:	4619      	mov	r1, r3
   1826a:	f009 f894 	bl	21396 <SEC_GetConfig>
   1826e:	6020      	str	r0, [r4, #0]
   18270:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18274:	681b      	ldr	r3, [r3, #0]
   18276:	2b00      	cmp	r3, #0
   18278:	f040 8476 	bne.w	18b68 <GetConfig+0x9c4>
	sprintf(tcPrint, "Number of secure parts: %d\n", iNbParts);
   1827c:	f107 0314 	add.w	r3, r7, #20
   18280:	681b      	ldr	r3, [r3, #0]
   18282:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   18286:	4610      	mov	r0, r2
   18288:	f645 6128 	movw	r1, #24104	; 0x5e28
   1828c:	f2c0 0102 	movt	r1, #2
   18290:	461a      	mov	r2, r3
   18292:	f7f0 ed10 	blx	8cb4 <_init+0x154>
	strcat(tcPrint, "     ----------------------------------\n");
   18296:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   1829a:	4618      	mov	r0, r3
   1829c:	f7f0 ecf2 	blx	8c84 <_init+0x124>
   182a0:	4603      	mov	r3, r0
   182a2:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   182a6:	18d2      	adds	r2, r2, r3
   182a8:	f645 6344 	movw	r3, #24132	; 0x5e44
   182ac:	f2c0 0302 	movt	r3, #2
   182b0:	461c      	mov	r4, r3
   182b2:	4615      	mov	r5, r2
   182b4:	f104 0c20 	add.w	ip, r4, #32
   182b8:	462e      	mov	r6, r5
   182ba:	46a6      	mov	lr, r4
   182bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   182c0:	6030      	str	r0, [r6, #0]
   182c2:	6071      	str	r1, [r6, #4]
   182c4:	60b2      	str	r2, [r6, #8]
   182c6:	60f3      	str	r3, [r6, #12]
   182c8:	3410      	adds	r4, #16
   182ca:	3510      	adds	r5, #16
   182cc:	4564      	cmp	r4, ip
   182ce:	d1f3      	bne.n	182b8 <GetConfig+0x114>
   182d0:	462a      	mov	r2, r5
   182d2:	4623      	mov	r3, r4
   182d4:	cb03      	ldmia	r3!, {r0, r1}
   182d6:	6010      	str	r0, [r2, #0]
   182d8:	6051      	str	r1, [r2, #4]
   182da:	781b      	ldrb	r3, [r3, #0]
   182dc:	7213      	strb	r3, [r2, #8]
	for (i=0; i<iNbParts; i++)
   182de:	f107 0328 	add.w	r3, r7, #40	; 0x28
   182e2:	2200      	movs	r2, #0
   182e4:	601a      	str	r2, [r3, #0]
   182e6:	e159      	b.n	1859c <GetConfig+0x3f8>
	{
		switch (txConfParts[i].SecureType)
   182e8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
   182ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
   182f0:	681b      	ldr	r3, [r3, #0]
   182f2:	011b      	lsls	r3, r3, #4
   182f4:	18d3      	adds	r3, r2, r3
   182f6:	681b      	ldr	r3, [r3, #0]
   182f8:	2b02      	cmp	r3, #2
   182fa:	d022      	beq.n	18342 <GetConfig+0x19e>
   182fc:	2b03      	cmp	r3, #3
   182fe:	d049      	beq.n	18394 <GetConfig+0x1f0>
   18300:	2b01      	cmp	r3, #1
   18302:	d170      	bne.n	183e6 <GetConfig+0x242>
		{
		case C_SEC_PINCODE:   strcpy(tcDisplay, "PIN ENTRY on ");   strcat(tcPrint, "PIN ENTRY on ");   break;
   18304:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   18308:	f645 6370 	movw	r3, #24176	; 0x5e70
   1830c:	f2c0 0302 	movt	r3, #2
   18310:	4614      	mov	r4, r2
   18312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   18314:	c407      	stmia	r4!, {r0, r1, r2}
   18316:	8023      	strh	r3, [r4, #0]
   18318:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   1831c:	4618      	mov	r0, r3
   1831e:	f7f0 ecb2 	blx	8c84 <_init+0x124>
   18322:	4603      	mov	r3, r0
   18324:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   18328:	18d2      	adds	r2, r2, r3
   1832a:	f645 6370 	movw	r3, #24176	; 0x5e70
   1832e:	f2c0 0302 	movt	r3, #2
   18332:	4614      	mov	r4, r2
   18334:	cb07      	ldmia	r3!, {r0, r1, r2}
   18336:	6020      	str	r0, [r4, #0]
   18338:	6061      	str	r1, [r4, #4]
   1833a:	60a2      	str	r2, [r4, #8]
   1833c:	881b      	ldrh	r3, [r3, #0]
   1833e:	81a3      	strh	r3, [r4, #12]
   18340:	e052      	b.n	183e8 <GetConfig+0x244>
		case C_SEC_CARD:      strcat(tcDisplay, "CARD READER on "); strcat(tcPrint, "CARD READER on "); break;
   18342:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
   18346:	4618      	mov	r0, r3
   18348:	f7f0 ec9c 	blx	8c84 <_init+0x124>
   1834c:	4603      	mov	r3, r0
   1834e:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   18352:	18d2      	adds	r2, r2, r3
   18354:	f645 6380 	movw	r3, #24192	; 0x5e80
   18358:	f2c0 0302 	movt	r3, #2
   1835c:	4614      	mov	r4, r2
   1835e:	461d      	mov	r5, r3
   18360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   18362:	6020      	str	r0, [r4, #0]
   18364:	6061      	str	r1, [r4, #4]
   18366:	60a2      	str	r2, [r4, #8]
   18368:	60e3      	str	r3, [r4, #12]
   1836a:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   1836e:	4618      	mov	r0, r3
   18370:	f7f0 ec88 	blx	8c84 <_init+0x124>
   18374:	4603      	mov	r3, r0
   18376:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   1837a:	18d2      	adds	r2, r2, r3
   1837c:	f645 6380 	movw	r3, #24192	; 0x5e80
   18380:	f2c0 0302 	movt	r3, #2
   18384:	4614      	mov	r4, r2
   18386:	461d      	mov	r5, r3
   18388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1838a:	6020      	str	r0, [r4, #0]
   1838c:	6061      	str	r1, [r4, #4]
   1838e:	60a2      	str	r2, [r4, #8]
   18390:	60e3      	str	r3, [r4, #12]
   18392:	e029      	b.n	183e8 <GetConfig+0x244>
		case C_SEC_CIPHERING: strcat(tcDisplay, "CIPHERING on ");   strcat(tcPrint, "CIPHERING on ");   break;
   18394:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
   18398:	4618      	mov	r0, r3
   1839a:	f7f0 ec74 	blx	8c84 <_init+0x124>
   1839e:	4603      	mov	r3, r0
   183a0:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   183a4:	18d2      	adds	r2, r2, r3
   183a6:	f645 6390 	movw	r3, #24208	; 0x5e90
   183aa:	f2c0 0302 	movt	r3, #2
   183ae:	4614      	mov	r4, r2
   183b0:	cb07      	ldmia	r3!, {r0, r1, r2}
   183b2:	6020      	str	r0, [r4, #0]
   183b4:	6061      	str	r1, [r4, #4]
   183b6:	60a2      	str	r2, [r4, #8]
   183b8:	881b      	ldrh	r3, [r3, #0]
   183ba:	81a3      	strh	r3, [r4, #12]
   183bc:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   183c0:	4618      	mov	r0, r3
   183c2:	f7f0 ec60 	blx	8c84 <_init+0x124>
   183c6:	4603      	mov	r3, r0
   183c8:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   183cc:	18d2      	adds	r2, r2, r3
   183ce:	f645 6390 	movw	r3, #24208	; 0x5e90
   183d2:	f2c0 0302 	movt	r3, #2
   183d6:	4614      	mov	r4, r2
   183d8:	cb07      	ldmia	r3!, {r0, r1, r2}
   183da:	6020      	str	r0, [r4, #0]
   183dc:	6061      	str	r1, [r4, #4]
   183de:	60a2      	str	r2, [r4, #8]
   183e0:	881b      	ldrh	r3, [r3, #0]
   183e2:	81a3      	strh	r3, [r4, #12]
   183e4:	e000      	b.n	183e8 <GetConfig+0x244>
		default:              goto lblKO;
   183e6:	e3bf      	b.n	18b68 <GetConfig+0x9c4>
		}
		// Get device type Pinpad or Terminal
		if (memcmp (txConfParts[i].ptszBoosterPeripheral, IAPP_USB_NAME, strlen(IAPP_USB_NAME)) == 0)
   183e8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
   183ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
   183f0:	681b      	ldr	r3, [r3, #0]
   183f2:	011b      	lsls	r3, r3, #4
   183f4:	18d3      	adds	r3, r2, r3
   183f6:	3308      	adds	r3, #8
   183f8:	681b      	ldr	r3, [r3, #0]
   183fa:	4618      	mov	r0, r3
   183fc:	f645 5124 	movw	r1, #23844	; 0x5d24
   18400:	f2c0 0102 	movt	r1, #2
   18404:	2208      	movs	r2, #8
   18406:	f7f0 ec76 	blx	8cf4 <_init+0x194>
   1840a:	4603      	mov	r3, r0
   1840c:	2b00      	cmp	r3, #0
   1840e:	d120      	bne.n	18452 <GetConfig+0x2ae>
		{
			strcat(tcDisplay, "PINPAD\n"); strcat(tcPrint, "PINPAD\n");
   18410:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
   18414:	4618      	mov	r0, r3
   18416:	f7f0 ec36 	blx	8c84 <_init+0x124>
   1841a:	4603      	mov	r3, r0
   1841c:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   18420:	18d2      	adds	r2, r2, r3
   18422:	f645 63a0 	movw	r3, #24224	; 0x5ea0
   18426:	f2c0 0302 	movt	r3, #2
   1842a:	cb03      	ldmia	r3!, {r0, r1}
   1842c:	6010      	str	r0, [r2, #0]
   1842e:	6051      	str	r1, [r2, #4]
   18430:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   18434:	4618      	mov	r0, r3
   18436:	f7f0 ec26 	blx	8c84 <_init+0x124>
   1843a:	4603      	mov	r3, r0
   1843c:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   18440:	18d2      	adds	r2, r2, r3
   18442:	f645 63a0 	movw	r3, #24224	; 0x5ea0
   18446:	f2c0 0302 	movt	r3, #2
   1844a:	cb03      	ldmia	r3!, {r0, r1}
   1844c:	6010      	str	r0, [r2, #0]
   1844e:	6051      	str	r1, [r2, #4]
   18450:	e023      	b.n	1849a <GetConfig+0x2f6>
		}
		else
		{
			strcat(tcDisplay, "TERMINAL\n"); strcat(tcPrint, "TERMINAL\n");
   18452:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
   18456:	4618      	mov	r0, r3
   18458:	f7f0 ec14 	blx	8c84 <_init+0x124>
   1845c:	4603      	mov	r3, r0
   1845e:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   18462:	18d2      	adds	r2, r2, r3
   18464:	f645 63a8 	movw	r3, #24232	; 0x5ea8
   18468:	f2c0 0302 	movt	r3, #2
   1846c:	cb03      	ldmia	r3!, {r0, r1}
   1846e:	6010      	str	r0, [r2, #0]
   18470:	6051      	str	r1, [r2, #4]
   18472:	881b      	ldrh	r3, [r3, #0]
   18474:	8113      	strh	r3, [r2, #8]
   18476:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   1847a:	4618      	mov	r0, r3
   1847c:	f7f0 ec02 	blx	8c84 <_init+0x124>
   18480:	4603      	mov	r3, r0
   18482:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   18486:	18d2      	adds	r2, r2, r3
   18488:	f645 63a8 	movw	r3, #24232	; 0x5ea8
   1848c:	f2c0 0302 	movt	r3, #2
   18490:	cb03      	ldmia	r3!, {r0, r1}
   18492:	6010      	str	r0, [r2, #0]
   18494:	6051      	str	r1, [r2, #4]
   18496:	881b      	ldrh	r3, [r3, #0]
   18498:	8113      	strh	r3, [r2, #8]
		}

		if (txConfParts[i].SecureType == C_SEC_CIPHERING)
   1849a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
   1849e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   184a2:	681b      	ldr	r3, [r3, #0]
   184a4:	011b      	lsls	r3, r3, #4
   184a6:	18d3      	adds	r3, r2, r3
   184a8:	681b      	ldr	r3, [r3, #0]
   184aa:	2b03      	cmp	r3, #3
   184ac:	d160      	bne.n	18570 <GetConfig+0x3cc>
		{
			cBooster = txConfParts[i].cBoosterType;                  // Get booster type (B1, B2, B3, Islero)
   184ae:	f107 0308 	add.w	r3, r7, #8
   184b2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
   184b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
   184ba:	6812      	ldr	r2, [r2, #0]
   184bc:	0112      	lsls	r2, r2, #4
   184be:	188a      	adds	r2, r1, r2
   184c0:	7912      	ldrb	r2, [r2, #4]
   184c2:	701a      	strb	r2, [r3, #0]
			switch (cBooster)
   184c4:	f107 0308 	add.w	r3, r7, #8
   184c8:	781b      	ldrb	r3, [r3, #0]
   184ca:	2b00      	cmp	r3, #0
   184cc:	d002      	beq.n	184d4 <GetConfig+0x330>
   184ce:	2b01      	cmp	r3, #1
   184d0:	d017      	beq.n	18502 <GetConfig+0x35e>
   184d2:	e032      	b.n	1853a <GetConfig+0x396>
			{
			case C_SEC_BL1: strcat(tcPrint, "- Booster Type=1\n"); break;
   184d4:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   184d8:	4618      	mov	r0, r3
   184da:	f7f0 ebd4 	blx	8c84 <_init+0x124>
   184de:	4603      	mov	r3, r0
   184e0:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   184e4:	18d2      	adds	r2, r2, r3
   184e6:	f645 63b4 	movw	r3, #24244	; 0x5eb4
   184ea:	f2c0 0302 	movt	r3, #2
   184ee:	4615      	mov	r5, r2
   184f0:	461c      	mov	r4, r3
   184f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   184f4:	6028      	str	r0, [r5, #0]
   184f6:	6069      	str	r1, [r5, #4]
   184f8:	60aa      	str	r2, [r5, #8]
   184fa:	60eb      	str	r3, [r5, #12]
   184fc:	8823      	ldrh	r3, [r4, #0]
   184fe:	822b      	strh	r3, [r5, #16]
   18500:	e045      	b.n	1858e <GetConfig+0x3ea>
			case C_SEC_BL2: strcat(tcPrint, "- Booster Type=2 or 3\n"); break;
   18502:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   18506:	4618      	mov	r0, r3
   18508:	f7f0 ebbc 	blx	8c84 <_init+0x124>
   1850c:	4603      	mov	r3, r0
   1850e:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   18512:	18d2      	adds	r2, r2, r3
   18514:	f645 63c8 	movw	r3, #24264	; 0x5ec8
   18518:	f2c0 0302 	movt	r3, #2
   1851c:	4614      	mov	r4, r2
   1851e:	461d      	mov	r5, r3
   18520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   18522:	6020      	str	r0, [r4, #0]
   18524:	6061      	str	r1, [r4, #4]
   18526:	60a2      	str	r2, [r4, #8]
   18528:	60e3      	str	r3, [r4, #12]
   1852a:	6828      	ldr	r0, [r5, #0]
   1852c:	6120      	str	r0, [r4, #16]
   1852e:	88aa      	ldrh	r2, [r5, #4]
   18530:	79ab      	ldrb	r3, [r5, #6]
   18532:	82a2      	strh	r2, [r4, #20]
   18534:	75a3      	strb	r3, [r4, #22]
   18536:	bf00      	nop
   18538:	e029      	b.n	1858e <GetConfig+0x3ea>
			default:        strcat(tcPrint, "- Booster Type=Islero\n"); break;
   1853a:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   1853e:	4618      	mov	r0, r3
   18540:	f7f0 eba0 	blx	8c84 <_init+0x124>
   18544:	4603      	mov	r3, r0
   18546:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   1854a:	18d2      	adds	r2, r2, r3
   1854c:	f645 63e0 	movw	r3, #24288	; 0x5ee0
   18550:	f2c0 0302 	movt	r3, #2
   18554:	4614      	mov	r4, r2
   18556:	461d      	mov	r5, r3
   18558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1855a:	6020      	str	r0, [r4, #0]
   1855c:	6061      	str	r1, [r4, #4]
   1855e:	60a2      	str	r2, [r4, #8]
   18560:	60e3      	str	r3, [r4, #12]
   18562:	6828      	ldr	r0, [r5, #0]
   18564:	6120      	str	r0, [r4, #16]
   18566:	88aa      	ldrh	r2, [r5, #4]
   18568:	79ab      	ldrb	r3, [r5, #6]
   1856a:	82a2      	strh	r2, [r4, #20]
   1856c:	75a3      	strb	r3, [r4, #22]
   1856e:	e00e      	b.n	1858e <GetConfig+0x3ea>
			}
		}
		else
			strcat(tcDisplay, "\n");
   18570:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
   18574:	4618      	mov	r0, r3
   18576:	f7f0 eb86 	blx	8c84 <_init+0x124>
   1857a:	4603      	mov	r3, r0
   1857c:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   18580:	18d2      	adds	r2, r2, r3
   18582:	f645 63f8 	movw	r3, #24312	; 0x5ef8
   18586:	f2c0 0302 	movt	r3, #2
   1858a:	881b      	ldrh	r3, [r3, #0]
   1858c:	8013      	strh	r3, [r2, #0]
	// Get the configuration of the security component
	// ===============================================
	iRet = SEC_GetConfig(&iNbParts, txConfParts); CHECK(iRet==OK, lblKO);
	sprintf(tcPrint, "Number of secure parts: %d\n", iNbParts);
	strcat(tcPrint, "     ----------------------------------\n");
	for (i=0; i<iNbParts; i++)
   1858e:	f107 0328 	add.w	r3, r7, #40	; 0x28
   18592:	f107 0228 	add.w	r2, r7, #40	; 0x28
   18596:	6812      	ldr	r2, [r2, #0]
   18598:	3201      	adds	r2, #1
   1859a:	601a      	str	r2, [r3, #0]
   1859c:	f107 0314 	add.w	r3, r7, #20
   185a0:	681b      	ldr	r3, [r3, #0]
   185a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   185a6:	6812      	ldr	r2, [r2, #0]
   185a8:	429a      	cmp	r2, r3
   185aa:	f6ff ae9d 	blt.w	182e8 <GetConfig+0x144>
			}
		}
		else
			strcat(tcDisplay, "\n");
	}
	strcat(tcPrint, "     ----------------------------------\n");
   185ae:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   185b2:	4618      	mov	r0, r3
   185b4:	f7f0 eb66 	blx	8c84 <_init+0x124>
   185b8:	4603      	mov	r3, r0
   185ba:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   185be:	18d2      	adds	r2, r2, r3
   185c0:	f645 6344 	movw	r3, #24132	; 0x5e44
   185c4:	f2c0 0302 	movt	r3, #2
   185c8:	461c      	mov	r4, r3
   185ca:	4615      	mov	r5, r2
   185cc:	f104 0c20 	add.w	ip, r4, #32
   185d0:	462e      	mov	r6, r5
   185d2:	46a6      	mov	lr, r4
   185d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   185d8:	6030      	str	r0, [r6, #0]
   185da:	6071      	str	r1, [r6, #4]
   185dc:	60b2      	str	r2, [r6, #8]
   185de:	60f3      	str	r3, [r6, #12]
   185e0:	3410      	adds	r4, #16
   185e2:	3510      	adds	r5, #16
   185e4:	4564      	cmp	r4, ip
   185e6:	d1f3      	bne.n	185d0 <GetConfig+0x42c>
   185e8:	462a      	mov	r2, r5
   185ea:	4623      	mov	r3, r4
   185ec:	cb03      	ldmia	r3!, {r0, r1}
   185ee:	6010      	str	r0, [r2, #0]
   185f0:	6051      	str	r1, [r2, #4]
   185f2:	781b      	ldrb	r3, [r3, #0]
   185f4:	7213      	strb	r3, [r2, #8]

	// Get the list of Ids of loaded schemes and secret areas in a secure part
	// =======================================================================
	memset (tiList, 0, sizeof(tiList));
   185f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
   185fa:	4618      	mov	r0, r3
   185fc:	2100      	movs	r1, #0
   185fe:	2228      	movs	r2, #40	; 0x28
   18600:	f7f0 eadc 	blx	8bbc <_init+0x5c>
	iNbId=5;                                                     // Max of secret zone
   18604:	f107 0318 	add.w	r3, r7, #24
   18608:	2205      	movs	r2, #5
   1860a:	601a      	str	r2, [r3, #0]
	iRet = SEC_listSecureId (C_SEC_CIPHERING, &iNbId, tiList); CHECK(iRet==OK, lblKO);
   1860c:	f107 0430 	add.w	r4, r7, #48	; 0x30
   18610:	f107 0218 	add.w	r2, r7, #24
   18614:	f107 0390 	add.w	r3, r7, #144	; 0x90
   18618:	2003      	movs	r0, #3
   1861a:	4611      	mov	r1, r2
   1861c:	461a      	mov	r2, r3
   1861e:	f008 ff02 	bl	21426 <SEC_listSecureId>
   18622:	6020      	str	r0, [r4, #0]
   18624:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18628:	681b      	ldr	r3, [r3, #0]
   1862a:	2b00      	cmp	r3, #0
   1862c:	f040 829c 	bne.w	18b68 <GetConfig+0x9c4>
	if (iNbId==0)
   18630:	f107 0318 	add.w	r3, r7, #24
   18634:	681b      	ldr	r3, [r3, #0]
   18636:	2b00      	cmp	r3, #0
   18638:	d118      	bne.n	1866c <GetConfig+0x4c8>
		strcat(tcPrint, "Secret Area Id(s): 0\n");               // No secret area available
   1863a:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   1863e:	4618      	mov	r0, r3
   18640:	f7f0 eb20 	blx	8c84 <_init+0x124>
   18644:	4603      	mov	r3, r0
   18646:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   1864a:	18d2      	adds	r2, r2, r3
   1864c:	f645 63fc 	movw	r3, #24316	; 0x5efc
   18650:	f2c0 0302 	movt	r3, #2
   18654:	4615      	mov	r5, r2
   18656:	461c      	mov	r4, r3
   18658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1865a:	6028      	str	r0, [r5, #0]
   1865c:	6069      	str	r1, [r5, #4]
   1865e:	60aa      	str	r2, [r5, #8]
   18660:	60eb      	str	r3, [r5, #12]
   18662:	6820      	ldr	r0, [r4, #0]
   18664:	6128      	str	r0, [r5, #16]
   18666:	88a3      	ldrh	r3, [r4, #4]
   18668:	82ab      	strh	r3, [r5, #20]
   1866a:	e015      	b.n	18698 <GetConfig+0x4f4>
	else
		strcat(tcPrint, "Secret Area Id(s):\n");
   1866c:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   18670:	4618      	mov	r0, r3
   18672:	f7f0 eb08 	blx	8c84 <_init+0x124>
   18676:	4603      	mov	r3, r0
   18678:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   1867c:	18d2      	adds	r2, r2, r3
   1867e:	f645 7314 	movw	r3, #24340	; 0x5f14
   18682:	f2c0 0302 	movt	r3, #2
   18686:	4615      	mov	r5, r2
   18688:	461c      	mov	r4, r3
   1868a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1868c:	6028      	str	r0, [r5, #0]
   1868e:	6069      	str	r1, [r5, #4]
   18690:	60aa      	str	r2, [r5, #8]
   18692:	60eb      	str	r3, [r5, #12]
   18694:	6820      	ldr	r0, [r4, #0]
   18696:	6128      	str	r0, [r5, #16]
	bArea=FALSE;
   18698:	1dfb      	adds	r3, r7, #7
   1869a:	2200      	movs	r2, #0
   1869c:	701a      	strb	r2, [r3, #0]
	for (i1=0; i1<iNbId; i1++)                                   // Get list of secret areas
   1869e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   186a2:	2200      	movs	r2, #0
   186a4:	601a      	str	r2, [r3, #0]
   186a6:	e156      	b.n	18956 <GetConfig+0x7b2>
	{
		if (tiList[i1] == AreaId())
   186a8:	f107 0390 	add.w	r3, r7, #144	; 0x90
   186ac:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   186b0:	6812      	ldr	r2, [r2, #0]
   186b2:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
   186b6:	f7ff f90d 	bl	178d4 <AreaId>
   186ba:	4603      	mov	r3, r0
   186bc:	429c      	cmp	r4, r3
   186be:	f040 812b 	bne.w	18918 <GetConfig+0x774>
		{
			sprintf(&tcPrint[strlen(tcPrint)], "%08x  => Key Id(s):\n", tiList[i1]);
   186c2:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   186c6:	4618      	mov	r0, r3
   186c8:	f7f0 eadc 	blx	8c84 <_init+0x124>
   186cc:	4603      	mov	r3, r0
   186ce:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   186d2:	18d2      	adds	r2, r2, r3
   186d4:	f107 0390 	add.w	r3, r7, #144	; 0x90
   186d8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   186dc:	6809      	ldr	r1, [r1, #0]
   186de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   186e2:	4610      	mov	r0, r2
   186e4:	f645 7128 	movw	r1, #24360	; 0x5f28
   186e8:	f2c0 0102 	movt	r1, #2
   186ec:	461a      	mov	r2, r3
   186ee:	f7f0 eae2 	blx	8cb4 <_init+0x154>
			iRet = SEC_listTLVKeys (C_SEC_CIPHERING, AreaId(), sizeof(txKeyList),
   186f2:	f7ff f8ef 	bl	178d4 <AreaId>
   186f6:	4602      	mov	r2, r0
   186f8:	f107 0430 	add.w	r4, r7, #48	; 0x30
   186fc:	f107 031c 	add.w	r3, r7, #28
					&iNbKey, txKeyList);
   18700:	f507 7184 	add.w	r1, r7, #264	; 0x108
	for (i1=0; i1<iNbId; i1++)                                   // Get list of secret areas
	{
		if (tiList[i1] == AreaId())
		{
			sprintf(&tcPrint[strlen(tcPrint)], "%08x  => Key Id(s):\n", tiList[i1]);
			iRet = SEC_listTLVKeys (C_SEC_CIPHERING, AreaId(), sizeof(txKeyList),
   18704:	9100      	str	r1, [sp, #0]
   18706:	2003      	movs	r0, #3
   18708:	4611      	mov	r1, r2
   1870a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1870e:	f008 fe9c 	bl	2144a <SEC_listTLVKeys>
   18712:	6020      	str	r0, [r4, #0]
					&iNbKey, txKeyList);
			if (iRet == OK)
   18714:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18718:	681b      	ldr	r3, [r3, #0]
   1871a:	2b00      	cmp	r3, #0
   1871c:	d131      	bne.n	18782 <GetConfig+0x5de>
			{
				for (i2=0; i2<iNbKey; i2++)                      // Get list of keys from my secret area
   1871e:	f107 0324 	add.w	r3, r7, #36	; 0x24
   18722:	2200      	movs	r2, #0
   18724:	601a      	str	r2, [r3, #0]
   18726:	e023      	b.n	18770 <GetConfig+0x5cc>
					sprintf(&tcPrint[strlen(tcPrint)], "                            %08x\n", txKeyList[i2].uiTLVKeyId);
   18728:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   1872c:	4618      	mov	r0, r3
   1872e:	f7f0 eaaa 	blx	8c84 <_init+0x124>
   18732:	4603      	mov	r3, r0
   18734:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   18738:	18d1      	adds	r1, r2, r3
   1873a:	f507 7084 	add.w	r0, r7, #264	; 0x108
   1873e:	f107 0324 	add.w	r3, r7, #36	; 0x24
   18742:	681a      	ldr	r2, [r3, #0]
   18744:	4613      	mov	r3, r2
   18746:	009b      	lsls	r3, r3, #2
   18748:	189b      	adds	r3, r3, r2
   1874a:	009b      	lsls	r3, r3, #2
   1874c:	18c3      	adds	r3, r0, r3
   1874e:	3310      	adds	r3, #16
   18750:	681b      	ldr	r3, [r3, #0]
   18752:	4608      	mov	r0, r1
   18754:	f645 7140 	movw	r1, #24384	; 0x5f40
   18758:	f2c0 0102 	movt	r1, #2
   1875c:	461a      	mov	r2, r3
   1875e:	f7f0 eaaa 	blx	8cb4 <_init+0x154>
			sprintf(&tcPrint[strlen(tcPrint)], "%08x  => Key Id(s):\n", tiList[i1]);
			iRet = SEC_listTLVKeys (C_SEC_CIPHERING, AreaId(), sizeof(txKeyList),
					&iNbKey, txKeyList);
			if (iRet == OK)
			{
				for (i2=0; i2<iNbKey; i2++)                      // Get list of keys from my secret area
   18762:	f107 0324 	add.w	r3, r7, #36	; 0x24
   18766:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1876a:	6812      	ldr	r2, [r2, #0]
   1876c:	3201      	adds	r2, #1
   1876e:	601a      	str	r2, [r3, #0]
   18770:	f107 031c 	add.w	r3, r7, #28
   18774:	681b      	ldr	r3, [r3, #0]
   18776:	f107 0224 	add.w	r2, r7, #36	; 0x24
   1877a:	6812      	ldr	r2, [r2, #0]
   1877c:	429a      	cmp	r2, r3
   1877e:	dbd3      	blt.n	18728 <GetConfig+0x584>
   18780:	e021      	b.n	187c6 <GetConfig+0x622>
					sprintf(&tcPrint[strlen(tcPrint)], "                            %08x\n", txKeyList[i2].uiTLVKeyId);
			}
			else
				strcat(tcPrint, "                            Scheme missing\n");
   18782:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   18786:	4618      	mov	r0, r3
   18788:	f7f0 ea7c 	blx	8c84 <_init+0x124>
   1878c:	4603      	mov	r3, r0
   1878e:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   18792:	18d2      	adds	r2, r2, r3
   18794:	f645 7364 	movw	r3, #24420	; 0x5f64
   18798:	f2c0 0302 	movt	r3, #2
   1879c:	461c      	mov	r4, r3
   1879e:	4615      	mov	r5, r2
   187a0:	f104 0c20 	add.w	ip, r4, #32
   187a4:	462e      	mov	r6, r5
   187a6:	46a6      	mov	lr, r4
   187a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   187ac:	6030      	str	r0, [r6, #0]
   187ae:	6071      	str	r1, [r6, #4]
   187b0:	60b2      	str	r2, [r6, #8]
   187b2:	60f3      	str	r3, [r6, #12]
   187b4:	3410      	adds	r4, #16
   187b6:	3510      	adds	r5, #16
   187b8:	4564      	cmp	r4, ip
   187ba:	d1f3      	bne.n	187a4 <GetConfig+0x600>
   187bc:	4623      	mov	r3, r4
   187be:	cb07      	ldmia	r3!, {r0, r1, r2}
   187c0:	6028      	str	r0, [r5, #0]
   187c2:	6069      	str	r1, [r5, #4]
   187c4:	60aa      	str	r2, [r5, #8]

			sprintf(&tcDisplay[strlen(tcDisplay)], "Secret Area = %08x\n", tiList[i1]);
   187c6:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
   187ca:	4618      	mov	r0, r3
   187cc:	f7f0 ea5a 	blx	8c84 <_init+0x124>
   187d0:	4603      	mov	r3, r0
   187d2:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   187d6:	18d2      	adds	r2, r2, r3
   187d8:	f107 0390 	add.w	r3, r7, #144	; 0x90
   187dc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   187e0:	6809      	ldr	r1, [r1, #0]
   187e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   187e6:	4610      	mov	r0, r2
   187e8:	f645 7190 	movw	r1, #24464	; 0x5f90
   187ec:	f2c0 0102 	movt	r1, #2
   187f0:	461a      	mov	r2, r3
   187f2:	f7f0 ea60 	blx	8cb4 <_init+0x154>
			iRet = SEC_isSecretArea(C_SEC_CIPHERING, tiList[i1]);
   187f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
   187fa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   187fe:	6812      	ldr	r2, [r2, #0]
   18800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   18804:	f107 0430 	add.w	r4, r7, #48	; 0x30
   18808:	2003      	movs	r0, #3
   1880a:	4619      	mov	r1, r3
   1880c:	f008 fde7 	bl	213de <SEC_isSecretArea>
   18810:	6020      	str	r0, [r4, #0]
			if(iRet == OK){
   18812:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18816:	681b      	ldr	r3, [r3, #0]
   18818:	2b00      	cmp	r3, #0
   1881a:	d179      	bne.n	18910 <GetConfig+0x76c>

				xEraseKey.iSecretArea = AreaId();;
   1881c:	f7ff f85a 	bl	178d4 <AreaId>
   18820:	4602      	mov	r2, r0
   18822:	f107 0334 	add.w	r3, r7, #52	; 0x34
   18826:	601a      	str	r2, [r3, #0]
				xEraseKey.cAlgoType   = TLV_TYPE_KTDES;
   18828:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1882c:	2202      	movs	r2, #2
   1882e:	711a      	strb	r2, [r3, #4]
				xEraseKey.usNumber    = 0; //This is what we are looking for
   18830:	f107 0334 	add.w	r3, r7, #52	; 0x34
   18834:	2200      	movs	r2, #0
   18836:	80da      	strh	r2, [r3, #6]
				xEraseKey.uiBankId    = BANK_ROOT_ID;
   18838:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1883c:	f44f 733f 	mov.w	r3, #764	; 0x2fc
   18840:	f2c8 0300 	movt	r3, #32768	; 0x8000
   18844:	6093      	str	r3, [r2, #8]

				iRet = SEC_KeyVerify (C_SEC_CIPHERING, &xEraseKey, tucChkSum, &uiLen);                                // Length checksum
   18846:	f107 0430 	add.w	r4, r7, #48	; 0x30
   1884a:	f107 0134 	add.w	r1, r7, #52	; 0x34
   1884e:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
   18852:	f107 0320 	add.w	r3, r7, #32
   18856:	2003      	movs	r0, #3
   18858:	f008 fdd3 	bl	21402 <SEC_KeyVerify>
   1885c:	6020      	str	r0, [r4, #0]
				if (iRet != OK) {
   1885e:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18862:	681b      	ldr	r3, [r3, #0]
   18864:	2b00      	cmp	r3, #0
   18866:	d044      	beq.n	188f2 <GetConfig+0x74e>
					while(xEraseKey.usNumber < 768){
   18868:	e038      	b.n	188dc <GetConfig+0x738>
						xEraseKey.usNumber = Location;
   1886a:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1886e:	f107 020a 	add.w	r2, r7, #10
   18872:	8812      	ldrh	r2, [r2, #0]
   18874:	80da      	strh	r2, [r3, #6]
						iRet = SEC_KeyVerify (C_SEC_CIPHERING, &xEraseKey, tucChkSum, &uiLen);
   18876:	f107 0430 	add.w	r4, r7, #48	; 0x30
   1887a:	f107 0134 	add.w	r1, r7, #52	; 0x34
   1887e:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
   18882:	f107 0320 	add.w	r3, r7, #32
   18886:	2003      	movs	r0, #3
   18888:	f008 fdbb 	bl	21402 <SEC_KeyVerify>
   1888c:	6020      	str	r0, [r4, #0]
						if (iRet == OK) {
   1888e:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18892:	681b      	ldr	r3, [r3, #0]
   18894:	2b00      	cmp	r3, #0
   18896:	d11a      	bne.n	188ce <GetConfig+0x72a>
							iRet = Telium_Pprintf("   Key Loc %04d\n", xEraseKey.usNumber); CHECK(iRet>=0, lblKO);
   18898:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1889c:	88db      	ldrh	r3, [r3, #6]
   1889e:	f107 0430 	add.w	r4, r7, #48	; 0x30
   188a2:	f645 70a4 	movw	r0, #24484	; 0x5fa4
   188a6:	f2c0 0002 	movt	r0, #2
   188aa:	4619      	mov	r1, r3
   188ac:	f007 ff6e 	bl	2078c <Telium_Pprintf>
   188b0:	6020      	str	r0, [r4, #0]
   188b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
   188b6:	681b      	ldr	r3, [r3, #0]
   188b8:	2b00      	cmp	r3, #0
   188ba:	f2c0 8155 	blt.w	18b68 <GetConfig+0x9c4>
							Location+=4;		//To skip 4 elements used by this key loc.
   188be:	f107 030a 	add.w	r3, r7, #10
   188c2:	f107 020a 	add.w	r2, r7, #10
   188c6:	8812      	ldrh	r2, [r2, #0]
   188c8:	3204      	adds	r2, #4
   188ca:	801a      	strh	r2, [r3, #0]
							continue;
   188cc:	e006      	b.n	188dc <GetConfig+0x738>
						}
						Location++;
   188ce:	f107 030a 	add.w	r3, r7, #10
   188d2:	f107 020a 	add.w	r2, r7, #10
   188d6:	8812      	ldrh	r2, [r2, #0]
   188d8:	3201      	adds	r2, #1
   188da:	801a      	strh	r2, [r3, #0]
				xEraseKey.usNumber    = 0; //This is what we are looking for
				xEraseKey.uiBankId    = BANK_ROOT_ID;

				iRet = SEC_KeyVerify (C_SEC_CIPHERING, &xEraseKey, tucChkSum, &uiLen);                                // Length checksum
				if (iRet != OK) {
					while(xEraseKey.usNumber < 768){
   188dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
   188e0:	88da      	ldrh	r2, [r3, #6]
   188e2:	f240 23ff 	movw	r3, #767	; 0x2ff
   188e6:	429a      	cmp	r2, r3
   188e8:	d9bf      	bls.n	1886a <GetConfig+0x6c6>
							Location+=4;		//To skip 4 elements used by this key loc.
							continue;
						}
						Location++;
					}
					Location = 1;
   188ea:	f107 030a 	add.w	r3, r7, #10
   188ee:	2201      	movs	r2, #1
   188f0:	801a      	strh	r2, [r3, #0]
				}
				iRet = Telium_Pprintf("\n\n"); CHECK(iRet>=0, lblKO);
   188f2:	f107 0430 	add.w	r4, r7, #48	; 0x30
   188f6:	f645 70b8 	movw	r0, #24504	; 0x5fb8
   188fa:	f2c0 0002 	movt	r0, #2
   188fe:	f007 ff45 	bl	2078c <Telium_Pprintf>
   18902:	6020      	str	r0, [r4, #0]
   18904:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18908:	681b      	ldr	r3, [r3, #0]
   1890a:	2b00      	cmp	r3, #0
   1890c:	f2c0 812c 	blt.w	18b68 <GetConfig+0x9c4>
			}

			bArea=TRUE;
   18910:	1dfb      	adds	r3, r7, #7
   18912:	2201      	movs	r2, #1
   18914:	701a      	strb	r2, [r3, #0]
   18916:	e017      	b.n	18948 <GetConfig+0x7a4>
		}
		else
			sprintf(&tcPrint[strlen(tcPrint)], "%08x\n", tiList[i1]);
   18918:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   1891c:	4618      	mov	r0, r3
   1891e:	f7f0 e9b2 	blx	8c84 <_init+0x124>
   18922:	4603      	mov	r3, r0
   18924:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   18928:	18d2      	adds	r2, r2, r3
   1892a:	f107 0390 	add.w	r3, r7, #144	; 0x90
   1892e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   18932:	6809      	ldr	r1, [r1, #0]
   18934:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   18938:	4610      	mov	r0, r2
   1893a:	f645 71bc 	movw	r1, #24508	; 0x5fbc
   1893e:	f2c0 0102 	movt	r1, #2
   18942:	461a      	mov	r2, r3
   18944:	f7f0 e9b6 	blx	8cb4 <_init+0x154>
	if (iNbId==0)
		strcat(tcPrint, "Secret Area Id(s): 0\n");               // No secret area available
	else
		strcat(tcPrint, "Secret Area Id(s):\n");
	bArea=FALSE;
	for (i1=0; i1<iNbId; i1++)                                   // Get list of secret areas
   18948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1894c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   18950:	6812      	ldr	r2, [r2, #0]
   18952:	3201      	adds	r2, #1
   18954:	601a      	str	r2, [r3, #0]
   18956:	f107 0318 	add.w	r3, r7, #24
   1895a:	681b      	ldr	r3, [r3, #0]
   1895c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   18960:	6812      	ldr	r2, [r2, #0]
   18962:	429a      	cmp	r2, r3
   18964:	f6ff aea0 	blt.w	186a8 <GetConfig+0x504>
			bArea=TRUE;
		}
		else
			sprintf(&tcPrint[strlen(tcPrint)], "%08x\n", tiList[i1]);
	}
	if(!bArea)
   18968:	1dfb      	adds	r3, r7, #7
   1896a:	781b      	ldrb	r3, [r3, #0]
   1896c:	f083 0301 	eor.w	r3, r3, #1
   18970:	b2db      	uxtb	r3, r3
   18972:	2b00      	cmp	r3, #0
   18974:	d00e      	beq.n	18994 <GetConfig+0x7f0>
		strcat(tcDisplay, "\n");
   18976:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
   1897a:	4618      	mov	r0, r3
   1897c:	f7f0 e982 	blx	8c84 <_init+0x124>
   18980:	4603      	mov	r3, r0
   18982:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   18986:	18d2      	adds	r2, r2, r3
   18988:	f645 63f8 	movw	r3, #24312	; 0x5ef8
   1898c:	f2c0 0302 	movt	r3, #2
   18990:	881b      	ldrh	r3, [r3, #0]
   18992:	8013      	strh	r3, [r2, #0]

	strcat(tcPrint, "\n\n\n\n");
   18994:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
   18998:	4618      	mov	r0, r3
   1899a:	f7f0 e974 	blx	8c84 <_init+0x124>
   1899e:	4603      	mov	r3, r0
   189a0:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   189a4:	18d2      	adds	r2, r2, r3
   189a6:	f645 73c4 	movw	r3, #24516	; 0x5fc4
   189aa:	f2c0 0302 	movt	r3, #2
   189ae:	6818      	ldr	r0, [r3, #0]
   189b0:	6010      	str	r0, [r2, #0]
   189b2:	791b      	ldrb	r3, [r3, #4]
   189b4:	7113      	strb	r3, [r2, #4]

	// Display configuration
	// =====================
	iRet = GoalDspMultiLine(hScreen, 0, tcDisplay, strlen(tcDisplay), txSec, NUMBER_OF_LINES(txSec), 0, true);
   189b6:	f107 030c 	add.w	r3, r7, #12
   189ba:	681e      	ldr	r6, [r3, #0]
   189bc:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
   189c0:	4618      	mov	r0, r3
   189c2:	f7f0 e960 	blx	8c84 <_init+0x124>
   189c6:	4603      	mov	r3, r0
   189c8:	461d      	mov	r5, r3
   189ca:	f107 0430 	add.w	r4, r7, #48	; 0x30
   189ce:	f207 42f4 	addw	r2, r7, #1268	; 0x4f4
   189d2:	f245 3384 	movw	r3, #21380	; 0x5384
   189d6:	f2c0 0302 	movt	r3, #2
   189da:	9300      	str	r3, [sp, #0]
   189dc:	2306      	movs	r3, #6
   189de:	9301      	str	r3, [sp, #4]
   189e0:	2300      	movs	r3, #0
   189e2:	9302      	str	r3, [sp, #8]
   189e4:	2301      	movs	r3, #1
   189e6:	9303      	str	r3, [sp, #12]
   189e8:	4630      	mov	r0, r6
   189ea:	2100      	movs	r1, #0
   189ec:	462b      	mov	r3, r5
   189ee:	f7f4 fffb 	bl	d9e8 <GoalDspMultiLine>
   189f2:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);                                           // Show info security
   189f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
   189f8:	681b      	ldr	r3, [r3, #0]
   189fa:	2b00      	cmp	r3, #0
   189fc:	f2c0 80b4 	blt.w	18b68 <GetConfig+0x9c4>

	// Print configuration
	// ===================
	p=0;
   18a00:	f107 0309 	add.w	r3, r7, #9
   18a04:	2200      	movs	r2, #0
   18a06:	701a      	strb	r2, [r3, #0]
	hDocument = GoalCreateDocument(gGoalGraphicLibInstance, GL_ENCODING_UTF8);         // Create document
   18a08:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   18a0c:	f2c0 0302 	movt	r3, #2
   18a10:	681b      	ldr	r3, [r3, #0]
   18a12:	4618      	mov	r0, r3
   18a14:	2100      	movs	r1, #0
   18a16:	f7f6 fa5f 	bl	eed8 <GoalCreateDocument>
   18a1a:	4602      	mov	r2, r0
   18a1c:	f107 0310 	add.w	r3, r7, #16
   18a20:	601a      	str	r2, [r3, #0]
	CHECK(hDocument!=NULL, lblKO);
   18a22:	f107 0310 	add.w	r3, r7, #16
   18a26:	681b      	ldr	r3, [r3, #0]
   18a28:	2b00      	cmp	r3, #0
   18a2a:	f000 809d 	beq.w	18b68 <GetConfig+0x9c4>

	xLine = xPrinter;                                                // Build document (Security, config info)
   18a2e:	f107 0240 	add.w	r2, r7, #64	; 0x40
   18a32:	f645 23e8 	movw	r3, #23272	; 0x5ae8
   18a36:	f2c0 0302 	movt	r3, #2
   18a3a:	4611      	mov	r1, r2
   18a3c:	461a      	mov	r2, r3
   18a3e:	2350      	movs	r3, #80	; 0x50
   18a40:	4608      	mov	r0, r1
   18a42:	4611      	mov	r1, r2
   18a44:	461a      	mov	r2, r3
   18a46:	f7f0 e918 	blx	8c78 <_init+0x118>
	xLine.eTextAlign = GL_ALIGN_CENTER;
   18a4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
   18a4e:	2200      	movs	r2, #0
   18a50:	601a      	str	r2, [r3, #0]
	xLine.bReverse = TRUE;
   18a52:	f107 0340 	add.w	r3, r7, #64	; 0x40
   18a56:	2201      	movs	r2, #1
   18a58:	721a      	strb	r2, [r3, #8]
	xLine.xMargin.usBottom = PIXEL_BOTTOM;
   18a5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
   18a5e:	2228      	movs	r2, #40	; 0x28
   18a60:	641a      	str	r2, [r3, #64]	; 0x40
	xLine.xFont.eScale = GL_SCALE_XXLARGE;
   18a62:	f107 0340 	add.w	r3, r7, #64	; 0x40
   18a66:	f643 72f6 	movw	r2, #16374	; 0x3ff6
   18a6a:	64da      	str	r2, [r3, #76]	; 0x4c
	iRet = GoalPrnLine(hDocument, p++, "Security Config", &xLine);
   18a6c:	f107 0310 	add.w	r3, r7, #16
   18a70:	6819      	ldr	r1, [r3, #0]
   18a72:	f107 0309 	add.w	r3, r7, #9
   18a76:	781b      	ldrb	r3, [r3, #0]
   18a78:	b29a      	uxth	r2, r3
   18a7a:	f107 0309 	add.w	r3, r7, #9
   18a7e:	f107 0009 	add.w	r0, r7, #9
   18a82:	7800      	ldrb	r0, [r0, #0]
   18a84:	3001      	adds	r0, #1
   18a86:	7018      	strb	r0, [r3, #0]
   18a88:	f107 0430 	add.w	r4, r7, #48	; 0x30
   18a8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
   18a90:	4608      	mov	r0, r1
   18a92:	4611      	mov	r1, r2
   18a94:	f645 72cc 	movw	r2, #24524	; 0x5fcc
   18a98:	f2c0 0202 	movt	r2, #2
   18a9c:	f7f6 fa58 	bl	ef50 <GoalPrnLine>
   18aa0:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
   18aa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18aa6:	681b      	ldr	r3, [r3, #0]
   18aa8:	2b00      	cmp	r3, #0
   18aaa:	db5d      	blt.n	18b68 <GetConfig+0x9c4>

	xLine = xPrinter;
   18aac:	f107 0240 	add.w	r2, r7, #64	; 0x40
   18ab0:	f645 23e8 	movw	r3, #23272	; 0x5ae8
   18ab4:	f2c0 0302 	movt	r3, #2
   18ab8:	4611      	mov	r1, r2
   18aba:	461a      	mov	r2, r3
   18abc:	2350      	movs	r3, #80	; 0x50
   18abe:	4608      	mov	r0, r1
   18ac0:	4611      	mov	r1, r2
   18ac2:	461a      	mov	r2, r3
   18ac4:	f7f0 e8d8 	blx	8c78 <_init+0x118>
	iRet = GoalPrnLine(hDocument, p++, tcPrint, &xLine);
   18ac8:	f107 0310 	add.w	r3, r7, #16
   18acc:	6818      	ldr	r0, [r3, #0]
   18ace:	f107 0309 	add.w	r3, r7, #9
   18ad2:	781b      	ldrb	r3, [r3, #0]
   18ad4:	b299      	uxth	r1, r3
   18ad6:	f107 0309 	add.w	r3, r7, #9
   18ada:	f107 0209 	add.w	r2, r7, #9
   18ade:	7812      	ldrb	r2, [r2, #0]
   18ae0:	3201      	adds	r2, #1
   18ae2:	701a      	strb	r2, [r3, #0]
   18ae4:	f107 0430 	add.w	r4, r7, #48	; 0x30
   18ae8:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
   18aec:	f107 0340 	add.w	r3, r7, #64	; 0x40
   18af0:	f7f6 fa2e 	bl	ef50 <GoalPrnLine>
   18af4:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
   18af6:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18afa:	681b      	ldr	r3, [r3, #0]
   18afc:	2b00      	cmp	r3, #0
   18afe:	db33      	blt.n	18b68 <GetConfig+0x9c4>

	iRet = GoalPrnDocument(hDocument);                               // Print document
   18b00:	f107 0310 	add.w	r3, r7, #16
   18b04:	681b      	ldr	r3, [r3, #0]
   18b06:	f107 0430 	add.w	r4, r7, #48	; 0x30
   18b0a:	4618      	mov	r0, r3
   18b0c:	f7f6 fc32 	bl	f374 <GoalPrnDocument>
   18b10:	6020      	str	r0, [r4, #0]
	CHECK(iRet>=0, lblKO);
   18b12:	f107 0330 	add.w	r3, r7, #48	; 0x30
   18b16:	681b      	ldr	r3, [r3, #0]
   18b18:	2b00      	cmp	r3, #0
   18b1a:	db25      	blt.n	18b68 <GetConfig+0x9c4>

	GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 30*1000, true);                 // Wait for key pressed/touched (shortcut)
   18b1c:	f107 030c 	add.w	r3, r7, #12
   18b20:	681a      	ldr	r2, [r3, #0]
   18b22:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   18b26:	f2c0 0302 	movt	r3, #2
   18b2a:	681b      	ldr	r3, [r3, #0]
   18b2c:	2101      	movs	r1, #1
   18b2e:	9100      	str	r1, [sp, #0]
   18b30:	4610      	mov	r0, r2
   18b32:	4619      	mov	r1, r3
   18b34:	2201      	movs	r2, #1
   18b36:	f247 5330 	movw	r3, #30000	; 0x7530
   18b3a:	f7f5 f8b7 	bl	dcac <GoalGetKey>

	goto lblEnd;
   18b3e:	e027      	b.n	18b90 <GetConfig+0x9ec>

	// Errors treatment
	// ****************
	lblNoSecDll:                                                         // Security DLL missing
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Missing Sec DLL", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   18b40:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   18b44:	f2c0 0302 	movt	r3, #2
   18b48:	681b      	ldr	r3, [r3, #0]
   18b4a:	2201      	movs	r2, #1
   18b4c:	9200      	str	r2, [sp, #0]
   18b4e:	f640 32b8 	movw	r2, #3000	; 0xbb8
   18b52:	9201      	str	r2, [sp, #4]
   18b54:	4618      	mov	r0, r3
   18b56:	2100      	movs	r1, #0
   18b58:	f645 52f0 	movw	r2, #24048	; 0x5df0
   18b5c:	f2c0 0202 	movt	r2, #2
   18b60:	2303      	movs	r3, #3
   18b62:	f008 fd91 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   18b66:	e013      	b.n	18b90 <GetConfig+0x9ec>
	lblKO:                                                               // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   18b68:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   18b6c:	f2c0 0302 	movt	r3, #2
   18b70:	681b      	ldr	r3, [r3, #0]
   18b72:	2201      	movs	r2, #1
   18b74:	9200      	str	r2, [sp, #0]
   18b76:	f241 3288 	movw	r2, #5000	; 0x1388
   18b7a:	9201      	str	r2, [sp, #4]
   18b7c:	4618      	mov	r0, r3
   18b7e:	2100      	movs	r1, #0
   18b80:	f645 6214 	movw	r2, #24084	; 0x5e14
   18b84:	f2c0 0202 	movt	r2, #2
   18b88:	2304      	movs	r3, #4
   18b8a:	f008 fd7d 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   18b8e:	bf00      	nop
	lblEnd:
	if (hScreen)
   18b90:	f107 030c 	add.w	r3, r7, #12
   18b94:	681b      	ldr	r3, [r3, #0]
   18b96:	2b00      	cmp	r3, #0
   18b98:	d004      	beq.n	18ba4 <GetConfig+0xa00>
		GoalDestroyScreen(&hScreen);                                 // Destroy screen
   18b9a:	f107 030c 	add.w	r3, r7, #12
   18b9e:	4618      	mov	r0, r3
   18ba0:	f7f5 f9e6 	bl	df70 <GoalDestroyScreen>
	if (hDocument)
   18ba4:	f107 0310 	add.w	r3, r7, #16
   18ba8:	681b      	ldr	r3, [r3, #0]
   18baa:	2b00      	cmp	r3, #0
   18bac:	d004      	beq.n	18bb8 <GetConfig+0xa14>
		GoalDestroyDocument(&hDocument);                             // Destroy document
   18bae:	f107 0310 	add.w	r3, r7, #16
   18bb2:	4618      	mov	r0, r3
   18bb4:	f7f6 fc0a 	bl	f3cc <GoalDestroyDocument>
}
   18bb8:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   18bbc:	f2c0 0302 	movt	r3, #2
   18bc0:	f8d7 2df4 	ldr.w	r2, [r7, #3572]	; 0xdf4
   18bc4:	681b      	ldr	r3, [r3, #0]
   18bc6:	429a      	cmp	r2, r3
   18bc8:	d001      	beq.n	18bce <GetConfig+0xa2a>
   18bca:	f7f0 f9eb 	bl	8fa4 <__stack_chk_fail>
   18bce:	f507 77fe 	add.w	r7, r7, #508	; 0x1fc
   18bd2:	f507 6740 	add.w	r7, r7, #3072	; 0xc00
   18bd6:	46bd      	mov	sp, r7
   18bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18bda:	bf00      	nop

00018bdc <CreateSecret>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void CreateSecret(void)
{
   18bdc:	b590      	push	{r4, r7, lr}
   18bde:	b097      	sub	sp, #92	; 0x5c
   18be0:	af02      	add	r7, sp, #8
   18be2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   18be6:	f2c0 0302 	movt	r3, #2
   18bea:	681b      	ldr	r3, [r3, #0]
   18bec:	64fb      	str	r3, [r7, #76]	; 0x4c
	doubleword uiLen;
	int iRet;

	// Check Pinpad
	// ************
	iRet = DLLExist("SECURITY"); CHECK(iRet==TRUE, lblNoSecDll);  // Security DLL loaded?
   18bee:	f645 508c 	movw	r0, #23948	; 0x5d8c
   18bf2:	f2c0 0002 	movt	r0, #2
   18bf6:	f006 fe31 	bl	1f85c <DLLExist>
   18bfa:	6078      	str	r0, [r7, #4]
   18bfc:	687b      	ldr	r3, [r7, #4]
   18bfe:	2b01      	cmp	r3, #1
   18c00:	d140      	bne.n	18c84 <CreateSecret+0xa8>
	iRet = ChkPpdConfig(); CHECK(iRet>=0, lblEnd);                // Pinpad problem? => check config from Manager
   18c02:	f7fe fc5d 	bl	174c0 <ChkPpdConfig>
   18c06:	6078      	str	r0, [r7, #4]
   18c08:	687b      	ldr	r3, [r7, #4]
   18c0a:	2b00      	cmp	r3, #0
   18c0c:	db7e      	blt.n	18d0c <CreateSecret+0x130>

	xRootKey.iSecretArea = AreaId();                              // Secret area identification
   18c0e:	f7fe fe61 	bl	178d4 <AreaId>
   18c12:	4603      	mov	r3, r0
   18c14:	60bb      	str	r3, [r7, #8]
	xRootKey.cAlgoType   = TLV_TYPE_KTDES;                        // This ROOT key is a TDES Key
   18c16:	2302      	movs	r3, #2
   18c18:	733b      	strb	r3, [r7, #12]
	xRootKey.usNumber    = ROOT_KEY_LOC;                          // ROOT key location inside the secret area
   18c1a:	2320      	movs	r3, #32
   18c1c:	81fb      	strh	r3, [r7, #14]
	xRootKey.uiBankId    = BANK_ROOT_ID;                          // Bank id related to this ROOT key
   18c1e:	f44f 733f 	mov.w	r3, #764	; 0x2fc
   18c22:	f2c8 0300 	movt	r3, #32768	; 0x8000
   18c26:	613b      	str	r3, [r7, #16]

#endif

	// Root Key CheckSum
	// *****************
	iRet = SEC_KeyVerify (C_SEC_CIPHERING,                        // C_SEC_CIPHERING secure part chosen to check key in terminal or pinpad
   18c28:	f107 0108 	add.w	r1, r7, #8
			&xRootKey,                              // ROOT key parameters
			tucChkSum,                              // ROOT key checksum
   18c2c:	f107 0214 	add.w	r2, r7, #20
			&uiLen);                                // Length checksum
   18c30:	463b      	mov	r3, r7

#endif

	// Root Key CheckSum
	// *****************
	iRet = SEC_KeyVerify (C_SEC_CIPHERING,                        // C_SEC_CIPHERING secure part chosen to check key in terminal or pinpad
   18c32:	2003      	movs	r0, #3
   18c34:	f008 fbe5 	bl	21402 <SEC_KeyVerify>
   18c38:	6078      	str	r0, [r7, #4]
			&xRootKey,                              // ROOT key parameters
			tucChkSum,                              // ROOT key checksum
			&uiLen);                                // Length checksum
	CHECK(iRet==OK, lblSecKO);
   18c3a:	687b      	ldr	r3, [r7, #4]
   18c3c:	2b00      	cmp	r3, #0
   18c3e:	d135      	bne.n	18cac <CreateSecret+0xd0>

	sprintf(tcDisplay, "Create Area Done\nCheckSum: %02X%02X%02X", tucChkSum[0], tucChkSum[1], tucChkSum[2]);
   18c40:	7d3b      	ldrb	r3, [r7, #20]
   18c42:	461a      	mov	r2, r3
   18c44:	7d7b      	ldrb	r3, [r7, #21]
   18c46:	7db9      	ldrb	r1, [r7, #22]
   18c48:	4608      	mov	r0, r1
   18c4a:	f107 0118 	add.w	r1, r7, #24
   18c4e:	9000      	str	r0, [sp, #0]
   18c50:	4608      	mov	r0, r1
   18c52:	f645 71dc 	movw	r1, #24540	; 0x5fdc
   18c56:	f2c0 0102 	movt	r1, #2
   18c5a:	f7f0 e82c 	blx	8cb4 <_init+0x154>
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_INFORMATION, GL_BUTTON_VALID, 5*1000);
   18c5e:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   18c62:	f2c0 0302 	movt	r3, #2
   18c66:	681a      	ldr	r2, [r3, #0]
   18c68:	f107 0318 	add.w	r3, r7, #24
   18c6c:	2101      	movs	r1, #1
   18c6e:	9100      	str	r1, [sp, #0]
   18c70:	f241 3188 	movw	r1, #5000	; 0x1388
   18c74:	9101      	str	r1, [sp, #4]
   18c76:	4610      	mov	r0, r2
   18c78:	2100      	movs	r1, #0
   18c7a:	461a      	mov	r2, r3
   18c7c:	2302      	movs	r3, #2
   18c7e:	f008 fd03 	bl	21688 <GL_Dialog_Message>

	goto lblEnd;
   18c82:	e043      	b.n	18d0c <CreateSecret+0x130>

	// Errors treatment
	// ****************
	lblNoSecDll:                                                      // Security DLL missing
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Missing Sec DLL", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   18c84:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   18c88:	f2c0 0302 	movt	r3, #2
   18c8c:	681b      	ldr	r3, [r3, #0]
   18c8e:	2201      	movs	r2, #1
   18c90:	9200      	str	r2, [sp, #0]
   18c92:	f640 32b8 	movw	r2, #3000	; 0xbb8
   18c96:	9201      	str	r2, [sp, #4]
   18c98:	4618      	mov	r0, r3
   18c9a:	2100      	movs	r1, #0
   18c9c:	f645 52f0 	movw	r2, #24048	; 0x5df0
   18ca0:	f2c0 0202 	movt	r2, #2
   18ca4:	2303      	movs	r3, #3
   18ca6:	f008 fcef 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   18caa:	e02f      	b.n	18d0c <CreateSecret+0x130>
	lblSecKO:                                                         // Security DLL error
#ifdef __TELIUM3__
	if (iRet == STS_ERR_SYS_SCH_NOT_FOUND)
   18cac:	687a      	ldr	r2, [r7, #4]
   18cae:	f44f 6330 	mov.w	r3, #2816	; 0xb00
   18cb2:	f2c8 0300 	movt	r3, #32768	; 0x8000
   18cb6:	429a      	cmp	r2, r3
   18cb8:	d113      	bne.n	18ce2 <CreateSecret+0x106>
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "KeyInject Tool\nRequired", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   18cba:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   18cbe:	f2c0 0302 	movt	r3, #2
   18cc2:	681b      	ldr	r3, [r3, #0]
   18cc4:	2201      	movs	r2, #1
   18cc6:	9200      	str	r2, [sp, #0]
   18cc8:	f241 3288 	movw	r2, #5000	; 0x1388
   18ccc:	9201      	str	r2, [sp, #4]
   18cce:	4618      	mov	r0, r3
   18cd0:	2100      	movs	r1, #0
   18cd2:	f246 0204 	movw	r2, #24580	; 0x6004
   18cd6:	f2c0 0202 	movt	r2, #2
   18cda:	2304      	movs	r3, #4
   18cdc:	f008 fcd4 	bl	21688 <GL_Dialog_Message>
	else
#endif
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, SEC_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
	goto lblEnd;
   18ce0:	e013      	b.n	18d0a <CreateSecret+0x12e>
#ifdef __TELIUM3__
	if (iRet == STS_ERR_SYS_SCH_NOT_FOUND)
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "KeyInject Tool\nRequired", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
	else
#endif
		GL_Dialog_Message(gGoalGraphicLibInstance, NULL, SEC_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   18ce2:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   18ce6:	f2c0 0302 	movt	r3, #2
   18cea:	681c      	ldr	r4, [r3, #0]
   18cec:	6878      	ldr	r0, [r7, #4]
   18cee:	f7f7 ff13 	bl	10b18 <SEC_ErrorMsg>
   18cf2:	4603      	mov	r3, r0
   18cf4:	2201      	movs	r2, #1
   18cf6:	9200      	str	r2, [sp, #0]
   18cf8:	f241 3288 	movw	r2, #5000	; 0x1388
   18cfc:	9201      	str	r2, [sp, #4]
   18cfe:	4620      	mov	r0, r4
   18d00:	2100      	movs	r1, #0
   18d02:	461a      	mov	r2, r3
   18d04:	2304      	movs	r3, #4
   18d06:	f008 fcbf 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   18d0a:	bf00      	nop
	lblEnd:
	return;
}
   18d0c:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   18d10:	f2c0 0302 	movt	r3, #2
   18d14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   18d16:	681b      	ldr	r3, [r3, #0]
   18d18:	429a      	cmp	r2, r3
   18d1a:	d001      	beq.n	18d20 <CreateSecret+0x144>
   18d1c:	f7f0 f942 	bl	8fa4 <__stack_chk_fail>
   18d20:	f107 0754 	add.w	r7, r7, #84	; 0x54
   18d24:	46bd      	mov	sp, r7
   18d26:	bd90      	pop	{r4, r7, pc}

00018d28 <FreeSecret>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void FreeSecret(void)
{
   18d28:	b580      	push	{r7, lr}
   18d2a:	b088      	sub	sp, #32
   18d2c:	af02      	add	r7, sp, #8
   18d2e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   18d32:	f2c0 0302 	movt	r3, #2
   18d36:	681b      	ldr	r3, [r3, #0]
   18d38:	617b      	str	r3, [r7, #20]
	T_SEC_DATAKEY_ID xEraseKey;
	int iRet;

	// Check Pinpad
	// ************
	iRet = DLLExist("SECURITY"); CHECK(iRet==TRUE, lblNoSecDll); // Security DLL loaded?
   18d3a:	f645 508c 	movw	r0, #23948	; 0x5d8c
   18d3e:	f2c0 0002 	movt	r0, #2
   18d42:	f006 fd8b 	bl	1f85c <DLLExist>
   18d46:	6078      	str	r0, [r7, #4]
   18d48:	687b      	ldr	r3, [r7, #4]
   18d4a:	2b01      	cmp	r3, #1
   18d4c:	d119      	bne.n	18d82 <FreeSecret+0x5a>
	iRet = ChkPpdConfig(); CHECK(iRet>=0, lblEnd);               // Pinpad problem? => check config from Manager
   18d4e:	f7fe fbb7 	bl	174c0 <ChkPpdConfig>
   18d52:	6078      	str	r0, [r7, #4]
   18d54:	687b      	ldr	r3, [r7, #4]
   18d56:	2b00      	cmp	r3, #0
   18d58:	db27      	blt.n	18daa <FreeSecret+0x82>
	iRet = SEC_FreeSecret (C_SEC_CIPHERING,                      // C_SEC_CIPHERING secure part to erase secret area in terminal or pinpad
			&xEraseKey);                          // Secret area to erase
	CHECK(iRet==OK, lblSecKO);
#endif

	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Free Secret Area Done", GL_ICON_INFORMATION, GL_BUTTON_VALID, 3*1000);
   18d5a:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   18d5e:	f2c0 0302 	movt	r3, #2
   18d62:	681b      	ldr	r3, [r3, #0]
   18d64:	2201      	movs	r2, #1
   18d66:	9200      	str	r2, [sp, #0]
   18d68:	f640 32b8 	movw	r2, #3000	; 0xbb8
   18d6c:	9201      	str	r2, [sp, #4]
   18d6e:	4618      	mov	r0, r3
   18d70:	2100      	movs	r1, #0
   18d72:	f246 021c 	movw	r2, #24604	; 0x601c
   18d76:	f2c0 0202 	movt	r2, #2
   18d7a:	2302      	movs	r3, #2
   18d7c:	f008 fc84 	bl	21688 <GL_Dialog_Message>

	goto lblEnd;
   18d80:	e013      	b.n	18daa <FreeSecret+0x82>

	// Errors treatment
	// ****************
	lblNoSecDll:                                                     // Security DLL missing
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Missing Sec DLL", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   18d82:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   18d86:	f2c0 0302 	movt	r3, #2
   18d8a:	681b      	ldr	r3, [r3, #0]
   18d8c:	2201      	movs	r2, #1
   18d8e:	9200      	str	r2, [sp, #0]
   18d90:	f640 32b8 	movw	r2, #3000	; 0xbb8
   18d94:	9201      	str	r2, [sp, #4]
   18d96:	4618      	mov	r0, r3
   18d98:	2100      	movs	r1, #0
   18d9a:	f645 52f0 	movw	r2, #24048	; 0x5df0
   18d9e:	f2c0 0202 	movt	r2, #2
   18da2:	2303      	movs	r3, #3
   18da4:	f008 fc70 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   18da8:	bf00      	nop
	lblSecKO:                                                        // Security DLL error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, SEC_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
	goto lblEnd;
	lblEnd:
	return;
}
   18daa:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   18dae:	f2c0 0302 	movt	r3, #2
   18db2:	697a      	ldr	r2, [r7, #20]
   18db4:	681b      	ldr	r3, [r3, #0]
   18db6:	429a      	cmp	r2, r3
   18db8:	d001      	beq.n	18dbe <FreeSecret+0x96>
   18dba:	f7f0 f8f3 	bl	8fa4 <__stack_chk_fail>
   18dbe:	f107 0718 	add.w	r7, r7, #24
   18dc2:	46bd      	mov	sp, r7
   18dc4:	bd80      	pop	{r7, pc}
   18dc6:	bf00      	nop

00018dc8 <LoadIso9564Key>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void LoadIso9564Key(void)
{
   18dc8:	b590      	push	{r4, r7, lr}
   18dca:	b09b      	sub	sp, #108	; 0x6c
   18dcc:	af02      	add	r7, sp, #8
   18dce:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   18dd2:	f2c0 0302 	movt	r3, #2
   18dd6:	681b      	ldr	r3, [r3, #0]
   18dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
	doubleword uiLen;
	int iRet;

	// Check Pinpad
	// ============
	iRet = DLLExist("SECURITY"); CHECK(iRet==TRUE, lblNoSecDll); // Security DLL loaded?
   18dda:	f645 508c 	movw	r0, #23948	; 0x5d8c
   18dde:	f2c0 0002 	movt	r0, #2
   18de2:	f006 fd3b 	bl	1f85c <DLLExist>
   18de6:	60b8      	str	r0, [r7, #8]
   18de8:	68bb      	ldr	r3, [r7, #8]
   18dea:	2b01      	cmp	r3, #1
   18dec:	d161      	bne.n	18eb2 <LoadIso9564Key+0xea>
	iRet = ChkPpdConfig(); CHECK(iRet>=0, lblEnd);               // Pinpad problem? => check config from Manager
   18dee:	f7fe fb67 	bl	174c0 <ChkPpdConfig>
   18df2:	60b8      	str	r0, [r7, #8]
   18df4:	68bb      	ldr	r3, [r7, #8]
   18df6:	2b00      	cmp	r3, #0
   18df8:	f2c0 8084 	blt.w	18f04 <LoadIso9564Key+0x13c>

	// Load Pin Key using Root Key
	// ***************************
	xRootKey.iSecretArea = AreaId();                             // Secret area identification
   18dfc:	f7fe fd6a 	bl	178d4 <AreaId>
   18e00:	4603      	mov	r3, r0
   18e02:	60fb      	str	r3, [r7, #12]
	xRootKey.cAlgoType   = TLV_TYPE_KTDES;                       // This ROOT key is a TDES Key
   18e04:	2302      	movs	r3, #2
   18e06:	743b      	strb	r3, [r7, #16]
	xRootKey.usNumber    = ROOT_KEY_LOC;                         // ROOT key location inside the secret area
   18e08:	2320      	movs	r3, #32
   18e0a:	827b      	strh	r3, [r7, #18]
	xRootKey.uiBankId    = BANK_ROOT_ID;                         // Bank id related to this ROOT key
   18e0c:	f44f 733f 	mov.w	r3, #764	; 0x2fc
   18e10:	f2c8 0300 	movt	r3, #32768	; 0x8000
   18e14:	617b      	str	r3, [r7, #20]

	xPinKey.iSecretArea = AreaId();                              // Secret area identification
   18e16:	f7fe fd5d 	bl	178d4 <AreaId>
   18e1a:	4603      	mov	r3, r0
   18e1c:	61bb      	str	r3, [r7, #24]
	xPinKey.cAlgoType   = TLV_TYPE_KTDES;                        // This PIN key is a TDES Key
   18e1e:	2302      	movs	r3, #2
   18e20:	773b      	strb	r3, [r7, #28]
	xPinKey.usNumber    = ISO9564PIN_KEY_LOC;                    // PIN key location inside the secret area
   18e22:	2398      	movs	r3, #152	; 0x98
   18e24:	83fb      	strh	r3, [r7, #30]
	xPinKey.uiBankId    = BANK_ISO9564_ID;                       // Bank id related to this PIN key
   18e26:	f240 2302 	movw	r3, #514	; 0x202
   18e2a:	f2c8 0300 	movt	r3, #32768	; 0x8000
   18e2e:	623b      	str	r3, [r7, #32]

	iRet = SEC_LoadKey (C_SEC_CIPHERING,                         // C_SEC_CIPHERING secure part to load key in terminal or pinpad
   18e30:	f107 020c 	add.w	r2, r7, #12
   18e34:	f107 0318 	add.w	r3, r7, #24
   18e38:	2102      	movs	r1, #2
   18e3a:	9100      	str	r1, [sp, #0]
   18e3c:	2003      	movs	r0, #3
   18e3e:	4611      	mov	r1, r2
   18e40:	461a      	mov	r2, r3
   18e42:	f645 334c 	movw	r3, #23372	; 0x5b4c
   18e46:	f2c0 0302 	movt	r3, #2
   18e4a:	f008 fb10 	bl	2146e <SEC_LoadKey>
   18e4e:	60b8      	str	r0, [r7, #8]
			CIPHERING_PIN);                          // PIN key usage : to cipher PIN entry
	//CHECK(iRet==OK, lblSecKO);

	// Pin Key CheckSum
	// ****************
	iRet = SEC_KeyVerify (C_SEC_CIPHERING,                       // C_SEC_CIPHERING secure part to check key in terminal or pinpad
   18e50:	f107 0118 	add.w	r1, r7, #24
			&xPinKey,                              // PIN key parameters
			tucChkSum,                             // PIN key checksum
   18e54:	f107 0224 	add.w	r2, r7, #36	; 0x24
			&uiLen);                               // Length checksum
   18e58:	1d3b      	adds	r3, r7, #4
			CIPHERING_PIN);                          // PIN key usage : to cipher PIN entry
	//CHECK(iRet==OK, lblSecKO);

	// Pin Key CheckSum
	// ****************
	iRet = SEC_KeyVerify (C_SEC_CIPHERING,                       // C_SEC_CIPHERING secure part to check key in terminal or pinpad
   18e5a:	2003      	movs	r0, #3
   18e5c:	f008 fad1 	bl	21402 <SEC_KeyVerify>
   18e60:	60b8      	str	r0, [r7, #8]
			&xPinKey,                              // PIN key parameters
			tucChkSum,                             // PIN key checksum
			&uiLen);                               // Length checksum
	CHECK(iRet==OK, lblSecKO);
   18e62:	68bb      	ldr	r3, [r7, #8]
   18e64:	2b00      	cmp	r3, #0
   18e66:	d138      	bne.n	18eda <LoadIso9564Key+0x112>

	sprintf(tcDisplay, "Load Pin Key Done\nCheckSum: %02X%02X%02X", tucChkSum[0], tucChkSum[1], tucChkSum[2]);
   18e68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   18e6c:	461a      	mov	r2, r3
   18e6e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   18e72:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
   18e76:	4608      	mov	r0, r1
   18e78:	f107 0128 	add.w	r1, r7, #40	; 0x28
   18e7c:	9000      	str	r0, [sp, #0]
   18e7e:	4608      	mov	r0, r1
   18e80:	f246 0134 	movw	r1, #24628	; 0x6034
   18e84:	f2c0 0102 	movt	r1, #2
   18e88:	f7ef ef14 	blx	8cb4 <_init+0x154>
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_INFORMATION, GL_BUTTON_VALID, 5*1000);
   18e8c:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   18e90:	f2c0 0302 	movt	r3, #2
   18e94:	681a      	ldr	r2, [r3, #0]
   18e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
   18e9a:	2101      	movs	r1, #1
   18e9c:	9100      	str	r1, [sp, #0]
   18e9e:	f241 3188 	movw	r1, #5000	; 0x1388
   18ea2:	9101      	str	r1, [sp, #4]
   18ea4:	4610      	mov	r0, r2
   18ea6:	2100      	movs	r1, #0
   18ea8:	461a      	mov	r2, r3
   18eaa:	2302      	movs	r3, #2
   18eac:	f008 fbec 	bl	21688 <GL_Dialog_Message>

	goto lblEnd;
   18eb0:	e028      	b.n	18f04 <LoadIso9564Key+0x13c>

	// Errors treatment
	// ****************
	lblNoSecDll:                                                     // Security DLL missing
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Missing Sec DLL", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   18eb2:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   18eb6:	f2c0 0302 	movt	r3, #2
   18eba:	681b      	ldr	r3, [r3, #0]
   18ebc:	2201      	movs	r2, #1
   18ebe:	9200      	str	r2, [sp, #0]
   18ec0:	f640 32b8 	movw	r2, #3000	; 0xbb8
   18ec4:	9201      	str	r2, [sp, #4]
   18ec6:	4618      	mov	r0, r3
   18ec8:	2100      	movs	r1, #0
   18eca:	f645 52f0 	movw	r2, #24048	; 0x5df0
   18ece:	f2c0 0202 	movt	r2, #2
   18ed2:	2303      	movs	r3, #3
   18ed4:	f008 fbd8 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   18ed8:	e014      	b.n	18f04 <LoadIso9564Key+0x13c>
	lblSecKO:                                                        // Security DLL error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, SEC_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   18eda:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   18ede:	f2c0 0302 	movt	r3, #2
   18ee2:	681c      	ldr	r4, [r3, #0]
   18ee4:	68b8      	ldr	r0, [r7, #8]
   18ee6:	f7f7 fe17 	bl	10b18 <SEC_ErrorMsg>
   18eea:	4603      	mov	r3, r0
   18eec:	2201      	movs	r2, #1
   18eee:	9200      	str	r2, [sp, #0]
   18ef0:	f241 3288 	movw	r2, #5000	; 0x1388
   18ef4:	9201      	str	r2, [sp, #4]
   18ef6:	4620      	mov	r0, r4
   18ef8:	2100      	movs	r1, #0
   18efa:	461a      	mov	r2, r3
   18efc:	2304      	movs	r3, #4
   18efe:	f008 fbc3 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   18f02:	bf00      	nop
	lblEnd:
	return;
}
   18f04:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   18f08:	f2c0 0302 	movt	r3, #2
   18f0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   18f0e:	681b      	ldr	r3, [r3, #0]
   18f10:	429a      	cmp	r2, r3
   18f12:	d001      	beq.n	18f18 <LoadIso9564Key+0x150>
   18f14:	f7f0 f846 	bl	8fa4 <__stack_chk_fail>
   18f18:	f107 0764 	add.w	r7, r7, #100	; 0x64
   18f1c:	46bd      	mov	sp, r7
   18f1e:	bd90      	pop	{r4, r7, pc}

00018f20 <LoadMacKey>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void LoadMacKey(void)
{
   18f20:	b590      	push	{r4, r7, lr}
   18f22:	b09b      	sub	sp, #108	; 0x6c
   18f24:	af02      	add	r7, sp, #8
   18f26:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   18f2a:	f2c0 0302 	movt	r3, #2
   18f2e:	681b      	ldr	r3, [r3, #0]
   18f30:	65fb      	str	r3, [r7, #92]	; 0x5c
	doubleword uiLen;
	int iRet;

	// Check Pinpad
	// ************
	iRet = DLLExist("SECURITY"); CHECK(iRet==TRUE, lblNoSecDll); // Security DLL loaded?
   18f32:	f645 508c 	movw	r0, #23948	; 0x5d8c
   18f36:	f2c0 0002 	movt	r0, #2
   18f3a:	f006 fc8f 	bl	1f85c <DLLExist>
   18f3e:	60b8      	str	r0, [r7, #8]
   18f40:	68bb      	ldr	r3, [r7, #8]
   18f42:	2b01      	cmp	r3, #1
   18f44:	d164      	bne.n	19010 <LoadMacKey+0xf0>
	iRet = ChkPpdConfig(); CHECK(iRet>=0, lblEnd);               // Pinpad problem? => check config from Manager
   18f46:	f7fe fabb 	bl	174c0 <ChkPpdConfig>
   18f4a:	60b8      	str	r0, [r7, #8]
   18f4c:	68bb      	ldr	r3, [r7, #8]
   18f4e:	2b00      	cmp	r3, #0
   18f50:	f2c0 8087 	blt.w	19062 <LoadMacKey+0x142>

	// Load Mac Key using Root Key
	// ***************************
	xRootKey.iSecretArea = AreaId();                             // Secret area identification
   18f54:	f7fe fcbe 	bl	178d4 <AreaId>
   18f58:	4603      	mov	r3, r0
   18f5a:	60fb      	str	r3, [r7, #12]
	xRootKey.cAlgoType   = TLV_TYPE_KTDES;                       // This ROOT key is a TDES Key
   18f5c:	2302      	movs	r3, #2
   18f5e:	743b      	strb	r3, [r7, #16]
	xRootKey.usNumber    = ROOT_KEY_LOC;                         // ROOT key location inside the secret area
   18f60:	2320      	movs	r3, #32
   18f62:	827b      	strh	r3, [r7, #18]
	xRootKey.uiBankId    = BANK_ROOT_ID;                         // Bank id related to this ROOT key
   18f64:	f44f 733f 	mov.w	r3, #764	; 0x2fc
   18f68:	f2c8 0300 	movt	r3, #32768	; 0x8000
   18f6c:	617b      	str	r3, [r7, #20]

	xMacKey.iSecretArea = AreaId();                              // Secret area identification
   18f6e:	f7fe fcb1 	bl	178d4 <AreaId>
   18f72:	4603      	mov	r3, r0
   18f74:	61bb      	str	r3, [r7, #24]
	xMacKey.cAlgoType   = TLV_TYPE_KDES;                         // This MAC key is a DES Key
   18f76:	2301      	movs	r3, #1
   18f78:	773b      	strb	r3, [r7, #28]
	xMacKey.usNumber    = MAC_KEY_LOC;                           // MAC key location inside the secret area
   18f7a:	23dc      	movs	r3, #220	; 0xdc
   18f7c:	83fb      	strh	r3, [r7, #30]
	xMacKey.uiBankId    = BANK_MAC_ID;                           // Bank id related to this MAC key
   18f7e:	f44f 738b 	mov.w	r3, #278	; 0x116
   18f82:	f2c8 0300 	movt	r3, #32768	; 0x8000
   18f86:	623b      	str	r3, [r7, #32]

	iRet = SEC_LoadKey (C_SEC_CIPHERING,                         // C_SEC_CIPHERING secure part chosen to load key in terminal or pinpad
   18f88:	f107 020c 	add.w	r2, r7, #12
   18f8c:	f107 0318 	add.w	r3, r7, #24
   18f90:	2100      	movs	r1, #0
   18f92:	9100      	str	r1, [sp, #0]
   18f94:	2003      	movs	r0, #3
   18f96:	4611      	mov	r1, r2
   18f98:	461a      	mov	r2, r3
   18f9a:	f645 3360 	movw	r3, #23392	; 0x5b60
   18f9e:	f2c0 0302 	movt	r3, #2
   18fa2:	f008 fa64 	bl	2146e <SEC_LoadKey>
   18fa6:	60b8      	str	r0, [r7, #8]
			&xRootKey,                               // ROOT key parameters
			&xMacKey,                                // MAC key parameters
			(byte*)zMacKey,                          // The MAC key value
			CIPHERING_DATA);                         // MAC key usage : to cipher Data Message
	CHECK(iRet==OK, lblSecKO);
   18fa8:	68bb      	ldr	r3, [r7, #8]
   18faa:	2b00      	cmp	r3, #0
   18fac:	d144      	bne.n	19038 <LoadMacKey+0x118>

	// MAC Key CheckSum
	// ****************
	iRet = SEC_KeyVerify (C_SEC_CIPHERING,                       // C_SEC_CIPHERING secure part chosen to check key in terminal or pinpad
   18fae:	f107 0118 	add.w	r1, r7, #24
			&xMacKey,                              // MAC key parameters
			tucChkSum,                             // MAC key checksum
   18fb2:	f107 0224 	add.w	r2, r7, #36	; 0x24
			&uiLen);                               // Length checksum
   18fb6:	1d3b      	adds	r3, r7, #4
			CIPHERING_DATA);                         // MAC key usage : to cipher Data Message
	CHECK(iRet==OK, lblSecKO);

	// MAC Key CheckSum
	// ****************
	iRet = SEC_KeyVerify (C_SEC_CIPHERING,                       // C_SEC_CIPHERING secure part chosen to check key in terminal or pinpad
   18fb8:	2003      	movs	r0, #3
   18fba:	f008 fa22 	bl	21402 <SEC_KeyVerify>
   18fbe:	60b8      	str	r0, [r7, #8]
			&xMacKey,                              // MAC key parameters
			tucChkSum,                             // MAC key checksum
			&uiLen);                               // Length checksum
	CHECK(iRet==OK, lblSecKO);
   18fc0:	68bb      	ldr	r3, [r7, #8]
   18fc2:	2b00      	cmp	r3, #0
   18fc4:	d138      	bne.n	19038 <LoadMacKey+0x118>

	sprintf(tcDisplay, "Load Mac Key Done\nCheckSum: %02X%02X%02X", tucChkSum[0], tucChkSum[1], tucChkSum[2]);
   18fc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   18fca:	461a      	mov	r2, r3
   18fcc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   18fd0:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
   18fd4:	4608      	mov	r0, r1
   18fd6:	f107 0128 	add.w	r1, r7, #40	; 0x28
   18fda:	9000      	str	r0, [sp, #0]
   18fdc:	4608      	mov	r0, r1
   18fde:	f246 0160 	movw	r1, #24672	; 0x6060
   18fe2:	f2c0 0102 	movt	r1, #2
   18fe6:	f7ef ee66 	blx	8cb4 <_init+0x154>
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, tcDisplay, GL_ICON_INFORMATION, GL_BUTTON_VALID, 5*1000);
   18fea:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   18fee:	f2c0 0302 	movt	r3, #2
   18ff2:	681a      	ldr	r2, [r3, #0]
   18ff4:	f107 0328 	add.w	r3, r7, #40	; 0x28
   18ff8:	2101      	movs	r1, #1
   18ffa:	9100      	str	r1, [sp, #0]
   18ffc:	f241 3188 	movw	r1, #5000	; 0x1388
   19000:	9101      	str	r1, [sp, #4]
   19002:	4610      	mov	r0, r2
   19004:	2100      	movs	r1, #0
   19006:	461a      	mov	r2, r3
   19008:	2302      	movs	r3, #2
   1900a:	f008 fb3d 	bl	21688 <GL_Dialog_Message>

	goto lblEnd;
   1900e:	e028      	b.n	19062 <LoadMacKey+0x142>

	// Errors treatment
	// ****************
	lblNoSecDll:                                                     // Security DLL missing
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Missing Sec DLL", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   19010:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   19014:	f2c0 0302 	movt	r3, #2
   19018:	681b      	ldr	r3, [r3, #0]
   1901a:	2201      	movs	r2, #1
   1901c:	9200      	str	r2, [sp, #0]
   1901e:	f640 32b8 	movw	r2, #3000	; 0xbb8
   19022:	9201      	str	r2, [sp, #4]
   19024:	4618      	mov	r0, r3
   19026:	2100      	movs	r1, #0
   19028:	f645 52f0 	movw	r2, #24048	; 0x5df0
   1902c:	f2c0 0202 	movt	r2, #2
   19030:	2303      	movs	r3, #3
   19032:	f008 fb29 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   19036:	e014      	b.n	19062 <LoadMacKey+0x142>
	lblSecKO:                                                        // Security DLL error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, SEC_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   19038:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   1903c:	f2c0 0302 	movt	r3, #2
   19040:	681c      	ldr	r4, [r3, #0]
   19042:	68b8      	ldr	r0, [r7, #8]
   19044:	f7f7 fd68 	bl	10b18 <SEC_ErrorMsg>
   19048:	4603      	mov	r3, r0
   1904a:	2201      	movs	r2, #1
   1904c:	9200      	str	r2, [sp, #0]
   1904e:	f241 3288 	movw	r2, #5000	; 0x1388
   19052:	9201      	str	r2, [sp, #4]
   19054:	4620      	mov	r0, r4
   19056:	2100      	movs	r1, #0
   19058:	461a      	mov	r2, r3
   1905a:	2304      	movs	r3, #4
   1905c:	f008 fb14 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   19060:	bf00      	nop
	lblEnd:
	return;
}
   19062:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   19066:	f2c0 0302 	movt	r3, #2
   1906a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1906c:	681b      	ldr	r3, [r3, #0]
   1906e:	429a      	cmp	r2, r3
   19070:	d001      	beq.n	19076 <LoadMacKey+0x156>
   19072:	f7ef ff97 	bl	8fa4 <__stack_chk_fail>
   19076:	f107 0764 	add.w	r7, r7, #100	; 0x64
   1907a:	46bd      	mov	sp, r7
   1907c:	bd90      	pop	{r4, r7, pc}
   1907e:	bf00      	nop

00019080 <Iso9564PinCiphering>:
//    =0 : Done
//    !0 : Failed
//****************************************************************************

static int Iso9564PinCiphering(const byte *pucAcc, byte *pucBlk)
{
   19080:	b580      	push	{r7, lr}
   19082:	b08a      	sub	sp, #40	; 0x28
   19084:	af02      	add	r7, sp, #8
   19086:	6078      	str	r0, [r7, #4]
   19088:	6039      	str	r1, [r7, #0]
   1908a:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1908e:	f2c0 0302 	movt	r3, #2
   19092:	681b      	ldr	r3, [r3, #0]
   19094:	61fb      	str	r3, [r7, #28]
	T_SEC_DATAKEY_ID xKey;
	int iRet;

	// ISO9564 Pin ciphering
	// *********************
	xKey.iSecretArea = AreaId();                  // Secret area identification
   19096:	f7fe fc1d 	bl	178d4 <AreaId>
   1909a:	4603      	mov	r3, r0
   1909c:	613b      	str	r3, [r7, #16]
	xKey.cAlgoType = TLV_TYPE_KTDES;              // PIN key is a TDES Key
   1909e:	2302      	movs	r3, #2
   190a0:	753b      	strb	r3, [r7, #20]
	xKey.usNumber = ISO9564PIN_KEY_LOC;           // PIN key location inside the secret area
   190a2:	2398      	movs	r3, #152	; 0x98
   190a4:	82fb      	strh	r3, [r7, #22]
	xKey.uiBankId = BANK_ISO9564_ID;              // Bank id related to this PIN key
   190a6:	f240 2302 	movw	r3, #514	; 0x202
   190aa:	f2c8 0300 	movt	r3, #32768	; 0x8000
   190ae:	61bb      	str	r3, [r7, #24]

	iRet = SEC_Iso9564 (C_SEC_CIPHERING,          // C_SEC_CIPHERING secure part chosen to cipher PIN in terminal or pinpad
   190b0:	f107 0310 	add.w	r3, r7, #16
   190b4:	683a      	ldr	r2, [r7, #0]
   190b6:	9200      	str	r2, [sp, #0]
			&xKey,                    // PIN key parameters
			ISO9564_F0_TDES,          // Ciphering format
			(byte*)pucAcc,            // Account number (last 12 digits without Luhn)
			pucBlk,                   // Pinblock result
			&uiLengthOut);
   190b8:	f107 0208 	add.w	r2, r7, #8
	xKey.iSecretArea = AreaId();                  // Secret area identification
	xKey.cAlgoType = TLV_TYPE_KTDES;              // PIN key is a TDES Key
	xKey.usNumber = ISO9564PIN_KEY_LOC;           // PIN key location inside the secret area
	xKey.uiBankId = BANK_ISO9564_ID;              // Bank id related to this PIN key

	iRet = SEC_Iso9564 (C_SEC_CIPHERING,          // C_SEC_CIPHERING secure part chosen to cipher PIN in terminal or pinpad
   190bc:	9201      	str	r2, [sp, #4]
   190be:	2003      	movs	r0, #3
   190c0:	4619      	mov	r1, r3
   190c2:	2202      	movs	r2, #2
   190c4:	687b      	ldr	r3, [r7, #4]
   190c6:	f008 f978 	bl	213ba <SEC_Iso9564>
   190ca:	60f8      	str	r0, [r7, #12]
			ISO9564_F0_TDES,          // Ciphering format
			(byte*)pucAcc,            // Account number (last 12 digits without Luhn)
			pucBlk,                   // Pinblock result
			&uiLengthOut);

	return iRet;
   190cc:	68fb      	ldr	r3, [r7, #12]
}
   190ce:	4618      	mov	r0, r3
   190d0:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   190d4:	f2c0 0302 	movt	r3, #2
   190d8:	69fa      	ldr	r2, [r7, #28]
   190da:	681b      	ldr	r3, [r3, #0]
   190dc:	429a      	cmp	r2, r3
   190de:	d001      	beq.n	190e4 <Iso9564PinCiphering+0x64>
   190e0:	f7ef ff60 	bl	8fa4 <__stack_chk_fail>
   190e4:	f107 0720 	add.w	r7, r7, #32
   190e8:	46bd      	mov	sp, r7
   190ea:	bd80      	pop	{r7, pc}

000190ec <Iso9564PinEntry>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void Iso9564PinEntry(void)
{
   190ec:	b590      	push	{r4, r7, lr}
   190ee:	b0bf      	sub	sp, #252	; 0xfc
   190f0:	af02      	add	r7, sp, #8
   190f2:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   190f6:	f2c0 0302 	movt	r3, #2
   190fa:	681b      	ldr	r3, [r3, #0]
   190fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	// Local variables
	// ***************
	T_GL_HWIDGET hScreen=NULL;
   19100:	2300      	movs	r3, #0
   19102:	607b      	str	r3, [r7, #4]
	T_GL_HWIDGET hDocument=NULL;
   19104:	2300      	movs	r3, #0
   19106:	60bb      	str	r3, [r7, #8]
	byte p; // Printer line index
	int i, iRet;

	// Check Pinpad
	// ************
	iRet = DLLExist("SECURITY"); CHECK(iRet==TRUE, lblNoSecDll);       // Security DLL loaded?
   19108:	f645 508c 	movw	r0, #23948	; 0x5d8c
   1910c:	f2c0 0002 	movt	r0, #2
   19110:	f006 fba4 	bl	1f85c <DLLExist>
   19114:	6138      	str	r0, [r7, #16]
   19116:	693b      	ldr	r3, [r7, #16]
   19118:	2b01      	cmp	r3, #1
   1911a:	f040 819c 	bne.w	19456 <Iso9564PinEntry+0x36a>
	iRet = ChkPpdConfig(); CHECK(iRet>=0, lblEnd);                     // Pinpad problem? => check config from Manager
   1911e:	f7fe f9cf 	bl	174c0 <ChkPpdConfig>
   19122:	6138      	str	r0, [r7, #16]
   19124:	693b      	ldr	r3, [r7, #16]
   19126:	2b00      	cmp	r3, #0
   19128:	f2c0 81d2 	blt.w	194d0 <Iso9564PinEntry+0x3e4>

	// Enter PIN
	// *********
	pcMsg1 = "        1000 EUR";
   1912c:	f246 038c 	movw	r3, #24716	; 0x608c
   19130:	f2c0 0302 	movt	r3, #2
   19134:	617b      	str	r3, [r7, #20]
	pcMsg2 = "PIN: ";
   19136:	f246 03a0 	movw	r3, #24736	; 0x60a0
   1913a:	f2c0 0302 	movt	r3, #2
   1913e:	61bb      	str	r3, [r7, #24]
	pcMsg1Idle = "    WELCOME     ";
   19140:	f246 03a8 	movw	r3, #24744	; 0x60a8
   19144:	f2c0 0302 	movt	r3, #2
   19148:	61fb      	str	r3, [r7, #28]
	pcMsg2Idle = "                ";
   1914a:	f246 03bc 	movw	r3, #24764	; 0x60bc
   1914e:	f2c0 0302 	movt	r3, #2
   19152:	623b      	str	r3, [r7, #32]
	iRet = PinEntry (pcMsg1, pcMsg2, pcMsg1Idle, pcMsg2Idle, 60);      // Pin entry with timeout 90sec
   19154:	233c      	movs	r3, #60	; 0x3c
   19156:	9300      	str	r3, [sp, #0]
   19158:	6978      	ldr	r0, [r7, #20]
   1915a:	69b9      	ldr	r1, [r7, #24]
   1915c:	69fa      	ldr	r2, [r7, #28]
   1915e:	6a3b      	ldr	r3, [r7, #32]
   19160:	f7fe fc24 	bl	179ac <PinEntry>
   19164:	6138      	str	r0, [r7, #16]
	CHECK(iRet!=0, lblEnd); CHECK(iRet>=0, lblKO);
   19166:	693b      	ldr	r3, [r7, #16]
   19168:	2b00      	cmp	r3, #0
   1916a:	f000 81b1 	beq.w	194d0 <Iso9564PinEntry+0x3e4>
   1916e:	693b      	ldr	r3, [r7, #16]
   19170:	2b00      	cmp	r3, #0
   19172:	f2c0 8199 	blt.w	194a8 <Iso9564PinEntry+0x3bc>

	// PIN ciphering to get pinblock
	// *****************************
	memcpy(tucAcc, "\x00\x00\x78\x90\x12\x34\x56\x74", 8); // 12 last digit (without luhn) + left padding 0
   19176:	f246 03d0 	movw	r3, #24784	; 0x60d0
   1917a:	f2c0 0302 	movt	r3, #2
   1917e:	f107 0274 	add.w	r2, r7, #116	; 0x74
   19182:	e893 0003 	ldmia.w	r3, {r0, r1}
   19186:	e882 0003 	stmia.w	r2, {r0, r1}
	iRet = Iso9564PinCiphering(tucAcc, tucBlk); CHECK(iRet==OK, lblSecKO);
   1918a:	f107 0274 	add.w	r2, r7, #116	; 0x74
   1918e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
   19192:	4610      	mov	r0, r2
   19194:	4619      	mov	r1, r3
   19196:	f7ff ff73 	bl	19080 <Iso9564PinCiphering>
   1919a:	6138      	str	r0, [r7, #16]
   1919c:	693b      	ldr	r3, [r7, #16]
   1919e:	2b00      	cmp	r3, #0
   191a0:	f040 816d 	bne.w	1947e <Iso9564PinEntry+0x392>

	// Display pinblock
	// ****************
	hScreen = GoalCreateScreen(gGoalGraphicLibInstance, txResult, NUMBER_OF_LINES(txResult), GL_ENCODING_UTF8);
   191a4:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   191a8:	f2c0 0302 	movt	r3, #2
   191ac:	681b      	ldr	r3, [r3, #0]
   191ae:	4618      	mov	r0, r3
   191b0:	f645 1190 	movw	r1, #22928	; 0x5990
   191b4:	f2c0 0102 	movt	r1, #2
   191b8:	2202      	movs	r2, #2
   191ba:	2300      	movs	r3, #0
   191bc:	f7f3 ff88 	bl	d0d0 <GoalCreateScreen>
   191c0:	4603      	mov	r3, r0
   191c2:	607b      	str	r3, [r7, #4]
	CHECK(hScreen!=NULL, lblKO);                                       // Create new screen and clear it
   191c4:	687b      	ldr	r3, [r7, #4]
   191c6:	2b00      	cmp	r3, #0
   191c8:	f000 816e 	beq.w	194a8 <Iso9564PinEntry+0x3bc>
	iRet = GoalClrScreen(hScreen, GL_COLOR_TRANSPARENT, KEY_VALID, false);
   191cc:	687b      	ldr	r3, [r7, #4]
   191ce:	4618      	mov	r0, r3
   191d0:	2100      	movs	r1, #0
   191d2:	2201      	movs	r2, #1
   191d4:	2300      	movs	r3, #0
   191d6:	f7f4 f919 	bl	d40c <GoalClrScreen>
   191da:	6138      	str	r0, [r7, #16]
	CHECK(iRet>=0, lblKO);
   191dc:	693b      	ldr	r3, [r7, #16]
   191de:	2b00      	cmp	r3, #0
   191e0:	f2c0 8162 	blt.w	194a8 <Iso9564PinEntry+0x3bc>

	iRet = GoalDspLine(hScreen, 0, "Pin Block Result", &txResult[0], 0, false);
   191e4:	687b      	ldr	r3, [r7, #4]
   191e6:	2200      	movs	r2, #0
   191e8:	9200      	str	r2, [sp, #0]
   191ea:	2200      	movs	r2, #0
   191ec:	9201      	str	r2, [sp, #4]
   191ee:	4618      	mov	r0, r3
   191f0:	2100      	movs	r1, #0
   191f2:	f246 02dc 	movw	r2, #24796	; 0x60dc
   191f6:	f2c0 0202 	movt	r2, #2
   191fa:	f645 1390 	movw	r3, #22928	; 0x5990
   191fe:	f2c0 0302 	movt	r3, #2
   19202:	f7f4 fa1d 	bl	d640 <GoalDspLine>
   19206:	6138      	str	r0, [r7, #16]
	CHECK(iRet>=0, lblKO);
   19208:	693b      	ldr	r3, [r7, #16]
   1920a:	2b00      	cmp	r3, #0
   1920c:	f2c0 814c 	blt.w	194a8 <Iso9564PinEntry+0x3bc>
	memset(tcDisplay, 0, sizeof(tcDisplay));
   19210:	f107 0384 	add.w	r3, r7, #132	; 0x84
   19214:	4618      	mov	r0, r3
   19216:	2100      	movs	r1, #0
   19218:	2233      	movs	r2, #51	; 0x33
   1921a:	f7ef ecd0 	blx	8bbc <_init+0x5c>
	for (i=0; i<8; i++)
   1921e:	2300      	movs	r3, #0
   19220:	60fb      	str	r3, [r7, #12]
   19222:	e018      	b.n	19256 <Iso9564PinEntry+0x16a>
		sprintf(&tcDisplay[strlen(tcDisplay)], "%02X", tucBlk[i]);
   19224:	f107 0384 	add.w	r3, r7, #132	; 0x84
   19228:	4618      	mov	r0, r3
   1922a:	f7ef ed2c 	blx	8c84 <_init+0x124>
   1922e:	4603      	mov	r3, r0
   19230:	f107 0284 	add.w	r2, r7, #132	; 0x84
   19234:	18d2      	adds	r2, r2, r3
   19236:	f107 017c 	add.w	r1, r7, #124	; 0x7c
   1923a:	68fb      	ldr	r3, [r7, #12]
   1923c:	18cb      	adds	r3, r1, r3
   1923e:	781b      	ldrb	r3, [r3, #0]
   19240:	4610      	mov	r0, r2
   19242:	f246 01f0 	movw	r1, #24816	; 0x60f0
   19246:	f2c0 0102 	movt	r1, #2
   1924a:	461a      	mov	r2, r3
   1924c:	f7ef ed32 	blx	8cb4 <_init+0x154>
	CHECK(iRet>=0, lblKO);

	iRet = GoalDspLine(hScreen, 0, "Pin Block Result", &txResult[0], 0, false);
	CHECK(iRet>=0, lblKO);
	memset(tcDisplay, 0, sizeof(tcDisplay));
	for (i=0; i<8; i++)
   19250:	68fb      	ldr	r3, [r7, #12]
   19252:	3301      	adds	r3, #1
   19254:	60fb      	str	r3, [r7, #12]
   19256:	68fb      	ldr	r3, [r7, #12]
   19258:	2b07      	cmp	r3, #7
   1925a:	dde3      	ble.n	19224 <Iso9564PinEntry+0x138>
		sprintf(&tcDisplay[strlen(tcDisplay)], "%02X", tucBlk[i]);

	iRet = GoalDspLine(hScreen, 1, tcDisplay, &txResult[1], 0, true);  // Show pinblock
   1925c:	687a      	ldr	r2, [r7, #4]
   1925e:	f107 0384 	add.w	r3, r7, #132	; 0x84
   19262:	2100      	movs	r1, #0
   19264:	9100      	str	r1, [sp, #0]
   19266:	2101      	movs	r1, #1
   19268:	9101      	str	r1, [sp, #4]
   1926a:	4610      	mov	r0, r2
   1926c:	2101      	movs	r1, #1
   1926e:	461a      	mov	r2, r3
   19270:	4ba6      	ldr	r3, [pc, #664]	; (1950c <Iso9564PinEntry+0x420>)
   19272:	f7f4 f9e5 	bl	d640 <GoalDspLine>
   19276:	6138      	str	r0, [r7, #16]
	CHECK(iRet>=0, lblKO);
   19278:	693b      	ldr	r3, [r7, #16]
   1927a:	2b00      	cmp	r3, #0
   1927c:	f2c0 8114 	blt.w	194a8 <Iso9564PinEntry+0x3bc>

	// Print pinblock
	// **************
	p=0;
   19280:	2300      	movs	r3, #0
   19282:	70fb      	strb	r3, [r7, #3]
	hDocument = GoalCreateDocument(gGoalGraphicLibInstance, GL_ENCODING_UTF8);           // Create document
   19284:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   19288:	f2c0 0302 	movt	r3, #2
   1928c:	681b      	ldr	r3, [r3, #0]
   1928e:	4618      	mov	r0, r3
   19290:	2100      	movs	r1, #0
   19292:	f7f5 fe21 	bl	eed8 <GoalCreateDocument>
   19296:	4603      	mov	r3, r0
   19298:	60bb      	str	r3, [r7, #8]
	CHECK(hDocument!=NULL, lblKO);
   1929a:	68bb      	ldr	r3, [r7, #8]
   1929c:	2b00      	cmp	r3, #0
   1929e:	f000 8103 	beq.w	194a8 <Iso9564PinEntry+0x3bc>

	xLine = xPrinter;                                                  // Build document (Demo, account# info, Pin key, Pinblock)
   192a2:	f645 23e8 	movw	r3, #23272	; 0x5ae8
   192a6:	f2c0 0302 	movt	r3, #2
   192aa:	f107 0124 	add.w	r1, r7, #36	; 0x24
   192ae:	461a      	mov	r2, r3
   192b0:	2350      	movs	r3, #80	; 0x50
   192b2:	4608      	mov	r0, r1
   192b4:	4611      	mov	r1, r2
   192b6:	461a      	mov	r2, r3
   192b8:	f7ef ecde 	blx	8c78 <_init+0x118>
	xLine.eTextAlign = GL_ALIGN_CENTER;
   192bc:	2300      	movs	r3, #0
   192be:	627b      	str	r3, [r7, #36]	; 0x24
	xLine.bReverse = TRUE;
   192c0:	2301      	movs	r3, #1
   192c2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	xLine.xMargin.usBottom = PIXEL_BOTTOM;
   192c6:	2328      	movs	r3, #40	; 0x28
   192c8:	667b      	str	r3, [r7, #100]	; 0x64
	xLine.xFont.eScale = GL_SCALE_XXLARGE;
   192ca:	f643 73f6 	movw	r3, #16374	; 0x3ff6
   192ce:	673b      	str	r3, [r7, #112]	; 0x70
	iRet = GoalPrnLine(hDocument, p++, "Pin Entry Demo", &xLine);
   192d0:	68b9      	ldr	r1, [r7, #8]
   192d2:	78fb      	ldrb	r3, [r7, #3]
   192d4:	b29a      	uxth	r2, r3
   192d6:	78fb      	ldrb	r3, [r7, #3]
   192d8:	3301      	adds	r3, #1
   192da:	70fb      	strb	r3, [r7, #3]
   192dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
   192e0:	4608      	mov	r0, r1
   192e2:	4611      	mov	r1, r2
   192e4:	f246 02f8 	movw	r2, #24824	; 0x60f8
   192e8:	f2c0 0202 	movt	r2, #2
   192ec:	f7f5 fe30 	bl	ef50 <GoalPrnLine>
   192f0:	6138      	str	r0, [r7, #16]
	CHECK(iRet>=0, lblKO);
   192f2:	693b      	ldr	r3, [r7, #16]
   192f4:	2b00      	cmp	r3, #0
   192f6:	f2c0 80d7 	blt.w	194a8 <Iso9564PinEntry+0x3bc>

	xLine = xPrinter;
   192fa:	f645 23e8 	movw	r3, #23272	; 0x5ae8
   192fe:	f2c0 0302 	movt	r3, #2
   19302:	f107 0124 	add.w	r1, r7, #36	; 0x24
   19306:	461a      	mov	r2, r3
   19308:	2350      	movs	r3, #80	; 0x50
   1930a:	4608      	mov	r0, r1
   1930c:	4611      	mov	r1, r2
   1930e:	461a      	mov	r2, r3
   19310:	f7ef ecb2 	blx	8c78 <_init+0x118>
	iRet = GoalPrnLine(hDocument, p++, "Account Number:\n"             // Account number to print
   19314:	68b9      	ldr	r1, [r7, #8]
   19316:	78fb      	ldrb	r3, [r7, #3]
   19318:	b29a      	uxth	r2, r3
   1931a:	78fb      	ldrb	r3, [r7, #3]
   1931c:	3301      	adds	r3, #1
   1931e:	70fb      	strb	r3, [r7, #3]
			"1234567890123456744", &xLine);
   19320:	f107 0324 	add.w	r3, r7, #36	; 0x24
	xLine.xFont.eScale = GL_SCALE_XXLARGE;
	iRet = GoalPrnLine(hDocument, p++, "Pin Entry Demo", &xLine);
	CHECK(iRet>=0, lblKO);

	xLine = xPrinter;
	iRet = GoalPrnLine(hDocument, p++, "Account Number:\n"             // Account number to print
   19324:	4608      	mov	r0, r1
   19326:	4611      	mov	r1, r2
   19328:	f246 1208 	movw	r2, #24840	; 0x6108
   1932c:	f2c0 0202 	movt	r2, #2
   19330:	f7f5 fe0e 	bl	ef50 <GoalPrnLine>
   19334:	6138      	str	r0, [r7, #16]
			"1234567890123456744", &xLine);
	CHECK(iRet>=0, lblKO);
   19336:	693b      	ldr	r3, [r7, #16]
   19338:	2b00      	cmp	r3, #0
   1933a:	f2c0 80b5 	blt.w	194a8 <Iso9564PinEntry+0x3bc>
	iRet = GoalPrnLine(hDocument, p++,"Pin Key Checksum Value:\n"      // Pin KCV to print
   1933e:	68b9      	ldr	r1, [r7, #8]
   19340:	78fb      	ldrb	r3, [r7, #3]
   19342:	b29a      	uxth	r2, r3
   19344:	78fb      	ldrb	r3, [r7, #3]
   19346:	3301      	adds	r3, #1
   19348:	70fb      	strb	r3, [r7, #3]
			"F7 53 C2", &xLine);
   1934a:	f107 0324 	add.w	r3, r7, #36	; 0x24

	xLine = xPrinter;
	iRet = GoalPrnLine(hDocument, p++, "Account Number:\n"             // Account number to print
			"1234567890123456744", &xLine);
	CHECK(iRet>=0, lblKO);
	iRet = GoalPrnLine(hDocument, p++,"Pin Key Checksum Value:\n"      // Pin KCV to print
   1934e:	4608      	mov	r0, r1
   19350:	4611      	mov	r1, r2
   19352:	f246 122c 	movw	r2, #24876	; 0x612c
   19356:	f2c0 0202 	movt	r2, #2
   1935a:	f7f5 fdf9 	bl	ef50 <GoalPrnLine>
   1935e:	6138      	str	r0, [r7, #16]
			"F7 53 C2", &xLine);
	CHECK(iRet>=0, lblKO);
   19360:	693b      	ldr	r3, [r7, #16]
   19362:	2b00      	cmp	r3, #0
   19364:	f2c0 80a0 	blt.w	194a8 <Iso9564PinEntry+0x3bc>
	iRet = GoalPrnLine(hDocument, p++, "Pinblock:", &xLine);
   19368:	68b9      	ldr	r1, [r7, #8]
   1936a:	78fb      	ldrb	r3, [r7, #3]
   1936c:	b29a      	uxth	r2, r3
   1936e:	78fb      	ldrb	r3, [r7, #3]
   19370:	3301      	adds	r3, #1
   19372:	70fb      	strb	r3, [r7, #3]
   19374:	f107 0324 	add.w	r3, r7, #36	; 0x24
   19378:	4608      	mov	r0, r1
   1937a:	4611      	mov	r1, r2
   1937c:	f246 1250 	movw	r2, #24912	; 0x6150
   19380:	f2c0 0202 	movt	r2, #2
   19384:	f7f5 fde4 	bl	ef50 <GoalPrnLine>
   19388:	6138      	str	r0, [r7, #16]
	CHECK(iRet>=0, lblKO);
   1938a:	693b      	ldr	r3, [r7, #16]
   1938c:	2b00      	cmp	r3, #0
   1938e:	f2c0 808b 	blt.w	194a8 <Iso9564PinEntry+0x3bc>
	memset(tcPrint, 0, sizeof(tcPrint));
   19392:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
   19396:	4618      	mov	r0, r3
   19398:	2100      	movs	r1, #0
   1939a:	2233      	movs	r2, #51	; 0x33
   1939c:	f7ef ec0e 	blx	8bbc <_init+0x5c>
	for (i=0; i<8; i++)
   193a0:	2300      	movs	r3, #0
   193a2:	60fb      	str	r3, [r7, #12]
   193a4:	e018      	b.n	193d8 <Iso9564PinEntry+0x2ec>
		sprintf (&tcPrint[strlen(tcPrint)], "%02X ", tucBlk[i]);
   193a6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
   193aa:	4618      	mov	r0, r3
   193ac:	f7ef ec6a 	blx	8c84 <_init+0x124>
   193b0:	4603      	mov	r3, r0
   193b2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
   193b6:	18d2      	adds	r2, r2, r3
   193b8:	f107 017c 	add.w	r1, r7, #124	; 0x7c
   193bc:	68fb      	ldr	r3, [r7, #12]
   193be:	18cb      	adds	r3, r1, r3
   193c0:	781b      	ldrb	r3, [r3, #0]
   193c2:	4610      	mov	r0, r2
   193c4:	f246 115c 	movw	r1, #24924	; 0x615c
   193c8:	f2c0 0102 	movt	r1, #2
   193cc:	461a      	mov	r2, r3
   193ce:	f7ef ec72 	blx	8cb4 <_init+0x154>
			"F7 53 C2", &xLine);
	CHECK(iRet>=0, lblKO);
	iRet = GoalPrnLine(hDocument, p++, "Pinblock:", &xLine);
	CHECK(iRet>=0, lblKO);
	memset(tcPrint, 0, sizeof(tcPrint));
	for (i=0; i<8; i++)
   193d2:	68fb      	ldr	r3, [r7, #12]
   193d4:	3301      	adds	r3, #1
   193d6:	60fb      	str	r3, [r7, #12]
   193d8:	68fb      	ldr	r3, [r7, #12]
   193da:	2b07      	cmp	r3, #7
   193dc:	dde3      	ble.n	193a6 <Iso9564PinEntry+0x2ba>
		sprintf (&tcPrint[strlen(tcPrint)], "%02X ", tucBlk[i]);
	iRet = GoalPrnLine(hDocument, p++, tcPrint, &xLine);               // Pinblock to print
   193de:	68b8      	ldr	r0, [r7, #8]
   193e0:	78fb      	ldrb	r3, [r7, #3]
   193e2:	b299      	uxth	r1, r3
   193e4:	78fb      	ldrb	r3, [r7, #3]
   193e6:	3301      	adds	r3, #1
   193e8:	70fb      	strb	r3, [r7, #3]
   193ea:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
   193ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
   193f2:	f7f5 fdad 	bl	ef50 <GoalPrnLine>
   193f6:	6138      	str	r0, [r7, #16]
	CHECK(iRet>=0, lblKO);
   193f8:	693b      	ldr	r3, [r7, #16]
   193fa:	2b00      	cmp	r3, #0
   193fc:	db54      	blt.n	194a8 <Iso9564PinEntry+0x3bc>
	iRet = GoalPrnLine(hDocument, p++, "\n\n\n\n", &xLine);
   193fe:	68b9      	ldr	r1, [r7, #8]
   19400:	78fb      	ldrb	r3, [r7, #3]
   19402:	b29a      	uxth	r2, r3
   19404:	78fb      	ldrb	r3, [r7, #3]
   19406:	3301      	adds	r3, #1
   19408:	70fb      	strb	r3, [r7, #3]
   1940a:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1940e:	4608      	mov	r0, r1
   19410:	4611      	mov	r1, r2
   19412:	f645 72c4 	movw	r2, #24516	; 0x5fc4
   19416:	f2c0 0202 	movt	r2, #2
   1941a:	f7f5 fd99 	bl	ef50 <GoalPrnLine>
   1941e:	6138      	str	r0, [r7, #16]
	CHECK(iRet>=0, lblKO);
   19420:	693b      	ldr	r3, [r7, #16]
   19422:	2b00      	cmp	r3, #0
   19424:	db40      	blt.n	194a8 <Iso9564PinEntry+0x3bc>

	iRet = GoalPrnDocument(hDocument);                                 // Print document
   19426:	68bb      	ldr	r3, [r7, #8]
   19428:	4618      	mov	r0, r3
   1942a:	f7f5 ffa3 	bl	f374 <GoalPrnDocument>
   1942e:	6138      	str	r0, [r7, #16]
	CHECK(iRet>=0, lblKO);
   19430:	693b      	ldr	r3, [r7, #16]
   19432:	2b00      	cmp	r3, #0
   19434:	db38      	blt.n	194a8 <Iso9564PinEntry+0x3bc>

	GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 30*1000, true);                   // Wait for key pressed/touched (shortcut)
   19436:	687a      	ldr	r2, [r7, #4]
   19438:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   1943c:	f2c0 0302 	movt	r3, #2
   19440:	681b      	ldr	r3, [r3, #0]
   19442:	2101      	movs	r1, #1
   19444:	9100      	str	r1, [sp, #0]
   19446:	4610      	mov	r0, r2
   19448:	4619      	mov	r1, r3
   1944a:	2201      	movs	r2, #1
   1944c:	f247 5330 	movw	r3, #30000	; 0x7530
   19450:	f7f4 fc2c 	bl	dcac <GoalGetKey>

	goto lblEnd;
   19454:	e03c      	b.n	194d0 <Iso9564PinEntry+0x3e4>

	// Errors treatment
	// ****************
	lblNoSecDll:                                                           // Security DLL missing
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Missing Sec DLL", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   19456:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   1945a:	f2c0 0302 	movt	r3, #2
   1945e:	681b      	ldr	r3, [r3, #0]
   19460:	2201      	movs	r2, #1
   19462:	9200      	str	r2, [sp, #0]
   19464:	f640 32b8 	movw	r2, #3000	; 0xbb8
   19468:	9201      	str	r2, [sp, #4]
   1946a:	4618      	mov	r0, r3
   1946c:	2100      	movs	r1, #0
   1946e:	f645 52f0 	movw	r2, #24048	; 0x5df0
   19472:	f2c0 0202 	movt	r2, #2
   19476:	2303      	movs	r3, #3
   19478:	f008 f906 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   1947c:	e028      	b.n	194d0 <Iso9564PinEntry+0x3e4>
	lblSecKO:                                                              // Security DLL error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, SEC_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   1947e:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   19482:	f2c0 0302 	movt	r3, #2
   19486:	681c      	ldr	r4, [r3, #0]
   19488:	6938      	ldr	r0, [r7, #16]
   1948a:	f7f7 fb45 	bl	10b18 <SEC_ErrorMsg>
   1948e:	4603      	mov	r3, r0
   19490:	2201      	movs	r2, #1
   19492:	9200      	str	r2, [sp, #0]
   19494:	f241 3288 	movw	r2, #5000	; 0x1388
   19498:	9201      	str	r2, [sp, #4]
   1949a:	4620      	mov	r0, r4
   1949c:	2100      	movs	r1, #0
   1949e:	461a      	mov	r2, r3
   194a0:	2304      	movs	r3, #4
   194a2:	f008 f8f1 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   194a6:	e013      	b.n	194d0 <Iso9564PinEntry+0x3e4>
	lblKO:                                                                 // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   194a8:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   194ac:	f2c0 0302 	movt	r3, #2
   194b0:	681b      	ldr	r3, [r3, #0]
   194b2:	2201      	movs	r2, #1
   194b4:	9200      	str	r2, [sp, #0]
   194b6:	f241 3288 	movw	r2, #5000	; 0x1388
   194ba:	9201      	str	r2, [sp, #4]
   194bc:	4618      	mov	r0, r3
   194be:	2100      	movs	r1, #0
   194c0:	f645 6214 	movw	r2, #24084	; 0x5e14
   194c4:	f2c0 0202 	movt	r2, #2
   194c8:	2304      	movs	r3, #4
   194ca:	f008 f8dd 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   194ce:	bf00      	nop
	lblEnd:
	if (hScreen)
   194d0:	687b      	ldr	r3, [r7, #4]
   194d2:	2b00      	cmp	r3, #0
   194d4:	d003      	beq.n	194de <Iso9564PinEntry+0x3f2>
		GoalDestroyScreen(&hScreen);                                   // Destroy screen
   194d6:	1d3b      	adds	r3, r7, #4
   194d8:	4618      	mov	r0, r3
   194da:	f7f4 fd49 	bl	df70 <GoalDestroyScreen>

	if (hDocument)
   194de:	68bb      	ldr	r3, [r7, #8]
   194e0:	2b00      	cmp	r3, #0
   194e2:	d004      	beq.n	194ee <Iso9564PinEntry+0x402>
		GoalDestroyDocument(&hDocument);                               // Destroy document
   194e4:	f107 0308 	add.w	r3, r7, #8
   194e8:	4618      	mov	r0, r3
   194ea:	f7f5 ff6f 	bl	f3cc <GoalDestroyDocument>
}
   194ee:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   194f2:	f2c0 0302 	movt	r3, #2
   194f6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
   194fa:	681b      	ldr	r3, [r3, #0]
   194fc:	429a      	cmp	r2, r3
   194fe:	d001      	beq.n	19504 <Iso9564PinEntry+0x418>
   19500:	f7ef fd50 	bl	8fa4 <__stack_chk_fail>
   19504:	f107 07f4 	add.w	r7, r7, #244	; 0xf4
   19508:	46bd      	mov	sp, r7
   1950a:	bd90      	pop	{r4, r7, pc}
   1950c:	00025a3c 	.word	0x00025a3c

00019510 <MacCalculation>:
//  This function has no parameters.
//  This function has no return value.
//****************************************************************************

void MacCalculation(void)
{
   19510:	b5b0      	push	{r4, r5, r7, lr}
   19512:	b0c2      	sub	sp, #264	; 0x108
   19514:	af02      	add	r7, sp, #8
   19516:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1951a:	f2c0 0302 	movt	r3, #2
   1951e:	681b      	ldr	r3, [r3, #0]
   19520:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	// Local variables
	// ***************
	T_GL_HWIDGET hScreen=NULL;
   19524:	2300      	movs	r3, #0
   19526:	60bb      	str	r3, [r7, #8]
	T_GL_HWIDGET hDocument=NULL;
   19528:	2300      	movs	r3, #0
   1952a:	60fb      	str	r3, [r7, #12]
	ST_PRN_LINE xLine;
	char tcDisplay[50+1];
	char tcPrint[50+1];
	T_SEC_DATAKEY_ID xMacKey;
	const byte tucMsg[] = { 0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,
   1952c:	f246 2320 	movw	r3, #25120	; 0x6220
   19530:	f2c0 0302 	movt	r3, #2
   19534:	f107 047c 	add.w	r4, r7, #124	; 0x7c
   19538:	461d      	mov	r5, r3
   1953a:	6828      	ldr	r0, [r5, #0]
   1953c:	6869      	ldr	r1, [r5, #4]
   1953e:	68aa      	ldr	r2, [r5, #8]
   19540:	68eb      	ldr	r3, [r5, #12]
   19542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   19544:	6928      	ldr	r0, [r5, #16]
   19546:	6969      	ldr	r1, [r5, #20]
   19548:	c403      	stmia	r4!, {r0, r1}
			0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x33 };
	byte tucMac[8];
	byte p; // Printer line index
	int i, iRet;

	hScreen = GoalCreateScreen(gGoalGraphicLibInstance, txResult, NUMBER_OF_LINES(txResult), GL_ENCODING_UTF8);
   1954a:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   1954e:	f2c0 0302 	movt	r3, #2
   19552:	681b      	ldr	r3, [r3, #0]
   19554:	4618      	mov	r0, r3
   19556:	f645 1190 	movw	r1, #22928	; 0x5990
   1955a:	f2c0 0102 	movt	r1, #2
   1955e:	2202      	movs	r2, #2
   19560:	2300      	movs	r3, #0
   19562:	f7f3 fdb5 	bl	d0d0 <GoalCreateScreen>
   19566:	4603      	mov	r3, r0
   19568:	60bb      	str	r3, [r7, #8]
	CHECK(hScreen!=NULL, lblKO);                                      // Create new screen and clear it
   1956a:	68bb      	ldr	r3, [r7, #8]
   1956c:	2b00      	cmp	r3, #0
   1956e:	f000 81b5 	beq.w	198dc <MacCalculation+0x3cc>
	iRet = GoalClrScreen(hScreen, GL_COLOR_TRANSPARENT, KEY_VALID, false);
   19572:	68bb      	ldr	r3, [r7, #8]
   19574:	4618      	mov	r0, r3
   19576:	2100      	movs	r1, #0
   19578:	2201      	movs	r2, #1
   1957a:	2300      	movs	r3, #0
   1957c:	f7f3 ff46 	bl	d40c <GoalClrScreen>
   19580:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);
   19582:	697b      	ldr	r3, [r7, #20]
   19584:	2b00      	cmp	r3, #0
   19586:	f2c0 81a9 	blt.w	198dc <MacCalculation+0x3cc>

	// Check Pinpad
	// ************
	iRet = DLLExist("SECURITY"); CHECK(iRet==TRUE, lblNoSecDll);      // Security DLL loaded?
   1958a:	f645 508c 	movw	r0, #23948	; 0x5d8c
   1958e:	f2c0 0002 	movt	r0, #2
   19592:	f006 f963 	bl	1f85c <DLLExist>
   19596:	6178      	str	r0, [r7, #20]
   19598:	697b      	ldr	r3, [r7, #20]
   1959a:	2b01      	cmp	r3, #1
   1959c:	f040 8175 	bne.w	1988a <MacCalculation+0x37a>
	iRet = ChkPpdConfig(); CHECK(iRet>=0, lblEnd);                    // Pinpad problem? => check config from Manager
   195a0:	f7fd ff8e 	bl	174c0 <ChkPpdConfig>
   195a4:	6178      	str	r0, [r7, #20]
   195a6:	697b      	ldr	r3, [r7, #20]
   195a8:	2b00      	cmp	r3, #0
   195aa:	f2c0 81ab 	blt.w	19904 <MacCalculation+0x3f4>

	iRet = GoalDspLine(hScreen, 0, "M.A.C Compute", &txResult[0], 0, true);
   195ae:	68bb      	ldr	r3, [r7, #8]
   195b0:	2200      	movs	r2, #0
   195b2:	9200      	str	r2, [sp, #0]
   195b4:	2201      	movs	r2, #1
   195b6:	9201      	str	r2, [sp, #4]
   195b8:	4618      	mov	r0, r3
   195ba:	2100      	movs	r1, #0
   195bc:	f246 1264 	movw	r2, #24932	; 0x6164
   195c0:	f2c0 0202 	movt	r2, #2
   195c4:	f645 1390 	movw	r3, #22928	; 0x5990
   195c8:	f2c0 0302 	movt	r3, #2
   195cc:	f7f4 f838 	bl	d640 <GoalDspLine>
   195d0:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);                                            // Compute in progress
   195d2:	697b      	ldr	r3, [r7, #20]
   195d4:	2b00      	cmp	r3, #0
   195d6:	f2c0 8181 	blt.w	198dc <MacCalculation+0x3cc>

	// Mac calculation
	// ***************
	xMacKey.iSecretArea = AreaId();                                   // Secret area identification
   195da:	f7fe f97b 	bl	178d4 <AreaId>
   195de:	4603      	mov	r3, r0
   195e0:	61bb      	str	r3, [r7, #24]
	xMacKey.cAlgoType = TLV_TYPE_KDES;                                // MAC key is a DES Key
   195e2:	2301      	movs	r3, #1
   195e4:	773b      	strb	r3, [r7, #28]
	xMacKey.usNumber = MAC_KEY_LOC;                                   // MAC key location inside the secret area
   195e6:	23dc      	movs	r3, #220	; 0xdc
   195e8:	83fb      	strh	r3, [r7, #30]
	xMacKey.uiBankId = BANK_MAC_ID;                                   // Bank id related to this MAC key
   195ea:	f44f 738b 	mov.w	r3, #278	; 0x116
   195ee:	f2c8 0300 	movt	r3, #32768	; 0x8000
   195f2:	623b      	str	r3, [r7, #32]

	iRet = SEC_ComputeMAC (&xMacKey,                                  // MAC key parameters
   195f4:	f107 0218 	add.w	r2, r7, #24
			(byte*)tucMsg,                             // Message to compute
   195f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
			sizeof(tucMsg),
			NULL,
			tucMac);                                   // MAC result
   195fc:	f107 0174 	add.w	r1, r7, #116	; 0x74
	xMacKey.iSecretArea = AreaId();                                   // Secret area identification
	xMacKey.cAlgoType = TLV_TYPE_KDES;                                // MAC key is a DES Key
	xMacKey.usNumber = MAC_KEY_LOC;                                   // MAC key location inside the secret area
	xMacKey.uiBankId = BANK_MAC_ID;                                   // Bank id related to this MAC key

	iRet = SEC_ComputeMAC (&xMacKey,                                  // MAC key parameters
   19600:	9100      	str	r1, [sp, #0]
   19602:	4610      	mov	r0, r2
   19604:	4619      	mov	r1, r3
   19606:	2218      	movs	r2, #24
   19608:	2300      	movs	r3, #0
   1960a:	f007 feb2 	bl	21372 <SEC_ComputeMAC>
   1960e:	6178      	str	r0, [r7, #20]
			(byte*)tucMsg,                             // Message to compute
			sizeof(tucMsg),
			NULL,
			tucMac);                                   // MAC result
	CHECK(iRet==0, lblSecKO)
   19610:	697b      	ldr	r3, [r7, #20]
   19612:	2b00      	cmp	r3, #0
   19614:	f040 814d 	bne.w	198b2 <MacCalculation+0x3a2>

	// Display Mac
	// ***********
	iRet = GoalDspLine(hScreen, 0, "M.A.C Result", &txResult[0], 0, false);
   19618:	68bb      	ldr	r3, [r7, #8]
   1961a:	2200      	movs	r2, #0
   1961c:	9200      	str	r2, [sp, #0]
   1961e:	2200      	movs	r2, #0
   19620:	9201      	str	r2, [sp, #4]
   19622:	4618      	mov	r0, r3
   19624:	2100      	movs	r1, #0
   19626:	f246 1274 	movw	r2, #24948	; 0x6174
   1962a:	f2c0 0202 	movt	r2, #2
   1962e:	f645 1390 	movw	r3, #22928	; 0x5990
   19632:	f2c0 0302 	movt	r3, #2
   19636:	f7f4 f803 	bl	d640 <GoalDspLine>
   1963a:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);
   1963c:	697b      	ldr	r3, [r7, #20]
   1963e:	2b00      	cmp	r3, #0
   19640:	f2c0 814c 	blt.w	198dc <MacCalculation+0x3cc>

	memset(tcDisplay, 0, sizeof(tcDisplay));
   19644:	f107 0394 	add.w	r3, r7, #148	; 0x94
   19648:	4618      	mov	r0, r3
   1964a:	2100      	movs	r1, #0
   1964c:	2233      	movs	r2, #51	; 0x33
   1964e:	f7ef eab6 	blx	8bbc <_init+0x5c>
	for (i=0; i<8; i++)
   19652:	2300      	movs	r3, #0
   19654:	613b      	str	r3, [r7, #16]
   19656:	e018      	b.n	1968a <MacCalculation+0x17a>
		sprintf(&tcDisplay[strlen(tcDisplay)], "%02X", tucMac[i]);
   19658:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1965c:	4618      	mov	r0, r3
   1965e:	f7ef eb12 	blx	8c84 <_init+0x124>
   19662:	4603      	mov	r3, r0
   19664:	f107 0294 	add.w	r2, r7, #148	; 0x94
   19668:	18d2      	adds	r2, r2, r3
   1966a:	f107 0174 	add.w	r1, r7, #116	; 0x74
   1966e:	693b      	ldr	r3, [r7, #16]
   19670:	18cb      	adds	r3, r1, r3
   19672:	781b      	ldrb	r3, [r3, #0]
   19674:	4610      	mov	r0, r2
   19676:	f246 01f0 	movw	r1, #24816	; 0x60f0
   1967a:	f2c0 0102 	movt	r1, #2
   1967e:	461a      	mov	r2, r3
   19680:	f7ef eb18 	blx	8cb4 <_init+0x154>
	// ***********
	iRet = GoalDspLine(hScreen, 0, "M.A.C Result", &txResult[0], 0, false);
	CHECK(iRet>=0, lblKO);

	memset(tcDisplay, 0, sizeof(tcDisplay));
	for (i=0; i<8; i++)
   19684:	693b      	ldr	r3, [r7, #16]
   19686:	3301      	adds	r3, #1
   19688:	613b      	str	r3, [r7, #16]
   1968a:	693b      	ldr	r3, [r7, #16]
   1968c:	2b07      	cmp	r3, #7
   1968e:	dde3      	ble.n	19658 <MacCalculation+0x148>
		sprintf(&tcDisplay[strlen(tcDisplay)], "%02X", tucMac[i]);

	iRet = GoalDspLine(hScreen, 1, tcDisplay, &txResult[1], 0, true); // Show MAC
   19690:	68ba      	ldr	r2, [r7, #8]
   19692:	f107 0394 	add.w	r3, r7, #148	; 0x94
   19696:	2100      	movs	r1, #0
   19698:	9100      	str	r1, [sp, #0]
   1969a:	2101      	movs	r1, #1
   1969c:	9101      	str	r1, [sp, #4]
   1969e:	4610      	mov	r0, r2
   196a0:	2101      	movs	r1, #1
   196a2:	461a      	mov	r2, r3
   196a4:	4ba7      	ldr	r3, [pc, #668]	; (19944 <MacCalculation+0x434>)
   196a6:	f7f3 ffcb 	bl	d640 <GoalDspLine>
   196aa:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);
   196ac:	697b      	ldr	r3, [r7, #20]
   196ae:	2b00      	cmp	r3, #0
   196b0:	f2c0 8114 	blt.w	198dc <MacCalculation+0x3cc>

	// Print Mac
	// *********
	p=0;
   196b4:	2300      	movs	r3, #0
   196b6:	71fb      	strb	r3, [r7, #7]
	hDocument = GoalCreateDocument(gGoalGraphicLibInstance, GL_ENCODING_UTF8);          // Create document
   196b8:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   196bc:	f2c0 0302 	movt	r3, #2
   196c0:	681b      	ldr	r3, [r3, #0]
   196c2:	4618      	mov	r0, r3
   196c4:	2100      	movs	r1, #0
   196c6:	f7f5 fc07 	bl	eed8 <GoalCreateDocument>
   196ca:	4603      	mov	r3, r0
   196cc:	60fb      	str	r3, [r7, #12]
	CHECK(hDocument!=NULL, lblKO);
   196ce:	68fb      	ldr	r3, [r7, #12]
   196d0:	2b00      	cmp	r3, #0
   196d2:	f000 8103 	beq.w	198dc <MacCalculation+0x3cc>

	xLine = xPrinter;                                                 // Build document (Demo, data message, Mac key, Mac result)
   196d6:	f645 23e8 	movw	r3, #23272	; 0x5ae8
   196da:	f2c0 0302 	movt	r3, #2
   196de:	f107 0124 	add.w	r1, r7, #36	; 0x24
   196e2:	461a      	mov	r2, r3
   196e4:	2350      	movs	r3, #80	; 0x50
   196e6:	4608      	mov	r0, r1
   196e8:	4611      	mov	r1, r2
   196ea:	461a      	mov	r2, r3
   196ec:	f7ef eac4 	blx	8c78 <_init+0x118>
	xLine.eTextAlign = GL_ALIGN_CENTER;
   196f0:	2300      	movs	r3, #0
   196f2:	627b      	str	r3, [r7, #36]	; 0x24
	xLine.bReverse = TRUE;
   196f4:	2301      	movs	r3, #1
   196f6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	xLine.xMargin.usBottom = PIXEL_BOTTOM;
   196fa:	2328      	movs	r3, #40	; 0x28
   196fc:	667b      	str	r3, [r7, #100]	; 0x64
	xLine.xFont.eScale = GL_SCALE_XXLARGE;
   196fe:	f643 73f6 	movw	r3, #16374	; 0x3ff6
   19702:	673b      	str	r3, [r7, #112]	; 0x70
	iRet = GoalPrnLine(hDocument, p++, "MAC Demo", &xLine);
   19704:	68f9      	ldr	r1, [r7, #12]
   19706:	79fb      	ldrb	r3, [r7, #7]
   19708:	b29a      	uxth	r2, r3
   1970a:	79fb      	ldrb	r3, [r7, #7]
   1970c:	3301      	adds	r3, #1
   1970e:	71fb      	strb	r3, [r7, #7]
   19710:	f107 0324 	add.w	r3, r7, #36	; 0x24
   19714:	4608      	mov	r0, r1
   19716:	4611      	mov	r1, r2
   19718:	f246 1284 	movw	r2, #24964	; 0x6184
   1971c:	f2c0 0202 	movt	r2, #2
   19720:	f7f5 fc16 	bl	ef50 <GoalPrnLine>
   19724:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);
   19726:	697b      	ldr	r3, [r7, #20]
   19728:	2b00      	cmp	r3, #0
   1972a:	f2c0 80d7 	blt.w	198dc <MacCalculation+0x3cc>

	xLine = xPrinter;
   1972e:	f645 23e8 	movw	r3, #23272	; 0x5ae8
   19732:	f2c0 0302 	movt	r3, #2
   19736:	f107 0124 	add.w	r1, r7, #36	; 0x24
   1973a:	461a      	mov	r2, r3
   1973c:	2350      	movs	r3, #80	; 0x50
   1973e:	4608      	mov	r0, r1
   19740:	4611      	mov	r1, r2
   19742:	461a      	mov	r2, r3
   19744:	f7ef ea98 	blx	8c78 <_init+0x118>
	iRet = GoalPrnLine(hDocument, p++, "Data message:\n"              // Data message to print
   19748:	68f9      	ldr	r1, [r7, #12]
   1974a:	79fb      	ldrb	r3, [r7, #7]
   1974c:	b29a      	uxth	r2, r3
   1974e:	79fb      	ldrb	r3, [r7, #7]
   19750:	3301      	adds	r3, #1
   19752:	71fb      	strb	r3, [r7, #7]
			"11 11 11 11 11 11 11 11\n"
			"22 22 22 22 22 22 22 22\n"
			"33 33 33 33 33 33 33 33", &xLine);
   19754:	f107 0324 	add.w	r3, r7, #36	; 0x24
	xLine.xFont.eScale = GL_SCALE_XXLARGE;
	iRet = GoalPrnLine(hDocument, p++, "MAC Demo", &xLine);
	CHECK(iRet>=0, lblKO);

	xLine = xPrinter;
	iRet = GoalPrnLine(hDocument, p++, "Data message:\n"              // Data message to print
   19758:	4608      	mov	r0, r1
   1975a:	4611      	mov	r1, r2
   1975c:	f246 1290 	movw	r2, #24976	; 0x6190
   19760:	f2c0 0202 	movt	r2, #2
   19764:	f7f5 fbf4 	bl	ef50 <GoalPrnLine>
   19768:	6178      	str	r0, [r7, #20]
			"11 11 11 11 11 11 11 11\n"
			"22 22 22 22 22 22 22 22\n"
			"33 33 33 33 33 33 33 33", &xLine);
	CHECK(iRet>=0, lblKO);
   1976a:	697b      	ldr	r3, [r7, #20]
   1976c:	2b00      	cmp	r3, #0
   1976e:	f2c0 80b5 	blt.w	198dc <MacCalculation+0x3cc>
	iRet = GoalPrnLine(hDocument, p++, "MAC Key Checksum Value:\n"    // MAC KCV to print
   19772:	68f9      	ldr	r1, [r7, #12]
   19774:	79fb      	ldrb	r3, [r7, #7]
   19776:	b29a      	uxth	r2, r3
   19778:	79fb      	ldrb	r3, [r7, #7]
   1977a:	3301      	adds	r3, #1
   1977c:	71fb      	strb	r3, [r7, #7]
			"04 6C 4B", &xLine);
   1977e:	f107 0324 	add.w	r3, r7, #36	; 0x24
	iRet = GoalPrnLine(hDocument, p++, "Data message:\n"              // Data message to print
			"11 11 11 11 11 11 11 11\n"
			"22 22 22 22 22 22 22 22\n"
			"33 33 33 33 33 33 33 33", &xLine);
	CHECK(iRet>=0, lblKO);
	iRet = GoalPrnLine(hDocument, p++, "MAC Key Checksum Value:\n"    // MAC KCV to print
   19782:	4608      	mov	r0, r1
   19784:	4611      	mov	r1, r2
   19786:	f246 12e8 	movw	r2, #25064	; 0x61e8
   1978a:	f2c0 0202 	movt	r2, #2
   1978e:	f7f5 fbdf 	bl	ef50 <GoalPrnLine>
   19792:	6178      	str	r0, [r7, #20]
			"04 6C 4B", &xLine);
	CHECK(iRet>=0, lblKO);
   19794:	697b      	ldr	r3, [r7, #20]
   19796:	2b00      	cmp	r3, #0
   19798:	f2c0 80a0 	blt.w	198dc <MacCalculation+0x3cc>
	iRet = GoalPrnLine(hDocument, p++, "MAC calculation:", &xLine);
   1979c:	68f9      	ldr	r1, [r7, #12]
   1979e:	79fb      	ldrb	r3, [r7, #7]
   197a0:	b29a      	uxth	r2, r3
   197a2:	79fb      	ldrb	r3, [r7, #7]
   197a4:	3301      	adds	r3, #1
   197a6:	71fb      	strb	r3, [r7, #7]
   197a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
   197ac:	4608      	mov	r0, r1
   197ae:	4611      	mov	r1, r2
   197b0:	f246 220c 	movw	r2, #25100	; 0x620c
   197b4:	f2c0 0202 	movt	r2, #2
   197b8:	f7f5 fbca 	bl	ef50 <GoalPrnLine>
   197bc:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);
   197be:	697b      	ldr	r3, [r7, #20]
   197c0:	2b00      	cmp	r3, #0
   197c2:	f2c0 808b 	blt.w	198dc <MacCalculation+0x3cc>
	memset(tcPrint, 0, sizeof(tcPrint));
   197c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   197ca:	4618      	mov	r0, r3
   197cc:	2100      	movs	r1, #0
   197ce:	2233      	movs	r2, #51	; 0x33
   197d0:	f7ef e9f4 	blx	8bbc <_init+0x5c>
	for (i=0; i<8; i++)
   197d4:	2300      	movs	r3, #0
   197d6:	613b      	str	r3, [r7, #16]
   197d8:	e018      	b.n	1980c <MacCalculation+0x2fc>
		sprintf (&tcPrint[strlen(tcPrint)], "%02X ", tucMac[i]);
   197da:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   197de:	4618      	mov	r0, r3
   197e0:	f7ef ea50 	blx	8c84 <_init+0x124>
   197e4:	4603      	mov	r3, r0
   197e6:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   197ea:	18d2      	adds	r2, r2, r3
   197ec:	f107 0174 	add.w	r1, r7, #116	; 0x74
   197f0:	693b      	ldr	r3, [r7, #16]
   197f2:	18cb      	adds	r3, r1, r3
   197f4:	781b      	ldrb	r3, [r3, #0]
   197f6:	4610      	mov	r0, r2
   197f8:	f246 115c 	movw	r1, #24924	; 0x615c
   197fc:	f2c0 0102 	movt	r1, #2
   19800:	461a      	mov	r2, r3
   19802:	f7ef ea58 	blx	8cb4 <_init+0x154>
			"04 6C 4B", &xLine);
	CHECK(iRet>=0, lblKO);
	iRet = GoalPrnLine(hDocument, p++, "MAC calculation:", &xLine);
	CHECK(iRet>=0, lblKO);
	memset(tcPrint, 0, sizeof(tcPrint));
	for (i=0; i<8; i++)
   19806:	693b      	ldr	r3, [r7, #16]
   19808:	3301      	adds	r3, #1
   1980a:	613b      	str	r3, [r7, #16]
   1980c:	693b      	ldr	r3, [r7, #16]
   1980e:	2b07      	cmp	r3, #7
   19810:	dde3      	ble.n	197da <MacCalculation+0x2ca>
		sprintf (&tcPrint[strlen(tcPrint)], "%02X ", tucMac[i]);
	iRet = GoalPrnLine(hDocument, p++, tcPrint, &xLine);              // MAC calculation to print
   19812:	68f8      	ldr	r0, [r7, #12]
   19814:	79fb      	ldrb	r3, [r7, #7]
   19816:	b299      	uxth	r1, r3
   19818:	79fb      	ldrb	r3, [r7, #7]
   1981a:	3301      	adds	r3, #1
   1981c:	71fb      	strb	r3, [r7, #7]
   1981e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   19822:	f107 0324 	add.w	r3, r7, #36	; 0x24
   19826:	f7f5 fb93 	bl	ef50 <GoalPrnLine>
   1982a:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);
   1982c:	697b      	ldr	r3, [r7, #20]
   1982e:	2b00      	cmp	r3, #0
   19830:	db54      	blt.n	198dc <MacCalculation+0x3cc>
	iRet = GoalPrnLine(hDocument, p++, "\n\n\n\n", &xLine);
   19832:	68f9      	ldr	r1, [r7, #12]
   19834:	79fb      	ldrb	r3, [r7, #7]
   19836:	b29a      	uxth	r2, r3
   19838:	79fb      	ldrb	r3, [r7, #7]
   1983a:	3301      	adds	r3, #1
   1983c:	71fb      	strb	r3, [r7, #7]
   1983e:	f107 0324 	add.w	r3, r7, #36	; 0x24
   19842:	4608      	mov	r0, r1
   19844:	4611      	mov	r1, r2
   19846:	f645 72c4 	movw	r2, #24516	; 0x5fc4
   1984a:	f2c0 0202 	movt	r2, #2
   1984e:	f7f5 fb7f 	bl	ef50 <GoalPrnLine>
   19852:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);
   19854:	697b      	ldr	r3, [r7, #20]
   19856:	2b00      	cmp	r3, #0
   19858:	db40      	blt.n	198dc <MacCalculation+0x3cc>

	iRet = GoalPrnDocument(hDocument);                                // Print document
   1985a:	68fb      	ldr	r3, [r7, #12]
   1985c:	4618      	mov	r0, r3
   1985e:	f7f5 fd89 	bl	f374 <GoalPrnDocument>
   19862:	6178      	str	r0, [r7, #20]
	CHECK(iRet>=0, lblKO);
   19864:	697b      	ldr	r3, [r7, #20]
   19866:	2b00      	cmp	r3, #0
   19868:	db38      	blt.n	198dc <MacCalculation+0x3cc>

	GoalGetKey(hScreen, gGoalGraphicLibInstance, true, 30*1000, true);                  // Wait for key pressed/touched (shortcut)
   1986a:	68ba      	ldr	r2, [r7, #8]
   1986c:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   19870:	f2c0 0302 	movt	r3, #2
   19874:	681b      	ldr	r3, [r3, #0]
   19876:	2101      	movs	r1, #1
   19878:	9100      	str	r1, [sp, #0]
   1987a:	4610      	mov	r0, r2
   1987c:	4619      	mov	r1, r3
   1987e:	2201      	movs	r2, #1
   19880:	f247 5330 	movw	r3, #30000	; 0x7530
   19884:	f7f4 fa12 	bl	dcac <GoalGetKey>

	goto lblEnd;
   19888:	e03c      	b.n	19904 <MacCalculation+0x3f4>

	// Errors treatment
	// ****************
	lblNoSecDll:                                                          // Security DLL missing
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Missing Sec DLL", GL_ICON_WARNING, GL_BUTTON_VALID, 3*1000);
   1988a:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   1988e:	f2c0 0302 	movt	r3, #2
   19892:	681b      	ldr	r3, [r3, #0]
   19894:	2201      	movs	r2, #1
   19896:	9200      	str	r2, [sp, #0]
   19898:	f640 32b8 	movw	r2, #3000	; 0xbb8
   1989c:	9201      	str	r2, [sp, #4]
   1989e:	4618      	mov	r0, r3
   198a0:	2100      	movs	r1, #0
   198a2:	f645 52f0 	movw	r2, #24048	; 0x5df0
   198a6:	f2c0 0202 	movt	r2, #2
   198aa:	2303      	movs	r3, #3
   198ac:	f007 feec 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   198b0:	e028      	b.n	19904 <MacCalculation+0x3f4>
	lblSecKO:                                                             // Security DLL error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, SEC_ErrorMsg(iRet), GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   198b2:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   198b6:	f2c0 0302 	movt	r3, #2
   198ba:	681c      	ldr	r4, [r3, #0]
   198bc:	6978      	ldr	r0, [r7, #20]
   198be:	f7f7 f92b 	bl	10b18 <SEC_ErrorMsg>
   198c2:	4603      	mov	r3, r0
   198c4:	2201      	movs	r2, #1
   198c6:	9200      	str	r2, [sp, #0]
   198c8:	f241 3288 	movw	r2, #5000	; 0x1388
   198cc:	9201      	str	r2, [sp, #4]
   198ce:	4620      	mov	r0, r4
   198d0:	2100      	movs	r1, #0
   198d2:	461a      	mov	r2, r3
   198d4:	2304      	movs	r3, #4
   198d6:	f007 fed7 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   198da:	e013      	b.n	19904 <MacCalculation+0x3f4>
	lblKO:                                                                // None-classified low level error
	GL_Dialog_Message(gGoalGraphicLibInstance, NULL, "Processing Error", GL_ICON_ERROR, GL_BUTTON_VALID, 5*1000);
   198dc:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   198e0:	f2c0 0302 	movt	r3, #2
   198e4:	681b      	ldr	r3, [r3, #0]
   198e6:	2201      	movs	r2, #1
   198e8:	9200      	str	r2, [sp, #0]
   198ea:	f241 3288 	movw	r2, #5000	; 0x1388
   198ee:	9201      	str	r2, [sp, #4]
   198f0:	4618      	mov	r0, r3
   198f2:	2100      	movs	r1, #0
   198f4:	f645 6214 	movw	r2, #24084	; 0x5e14
   198f8:	f2c0 0202 	movt	r2, #2
   198fc:	2304      	movs	r3, #4
   198fe:	f007 fec3 	bl	21688 <GL_Dialog_Message>
	goto lblEnd;
   19902:	bf00      	nop
	lblEnd:
	if (hScreen)
   19904:	68bb      	ldr	r3, [r7, #8]
   19906:	2b00      	cmp	r3, #0
   19908:	d004      	beq.n	19914 <MacCalculation+0x404>
		GoalDestroyScreen(&hScreen);                                  // Destroy screen
   1990a:	f107 0308 	add.w	r3, r7, #8
   1990e:	4618      	mov	r0, r3
   19910:	f7f4 fb2e 	bl	df70 <GoalDestroyScreen>

	if (hDocument)
   19914:	68fb      	ldr	r3, [r7, #12]
   19916:	2b00      	cmp	r3, #0
   19918:	d004      	beq.n	19924 <MacCalculation+0x414>
		GoalDestroyDocument(&hDocument);                              // Destroy document
   1991a:	f107 030c 	add.w	r3, r7, #12
   1991e:	4618      	mov	r0, r3
   19920:	f7f5 fd54 	bl	f3cc <GoalDestroyDocument>
}
   19924:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   19928:	f2c0 0302 	movt	r3, #2
   1992c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
   19930:	681b      	ldr	r3, [r3, #0]
   19932:	429a      	cmp	r2, r3
   19934:	d001      	beq.n	1993a <MacCalculation+0x42a>
   19936:	f7ef fb35 	bl	8fa4 <__stack_chk_fail>
   1993a:	f507 7780 	add.w	r7, r7, #256	; 0x100
   1993e:	46bd      	mov	sp, r7
   19940:	bdb0      	pop	{r4, r5, r7, pc}
   19942:	bf00      	nop
   19944:	00025a3c 	.word	0x00025a3c

00019948 <LoadKeysAuto>:



void LoadKeysAuto(void){
   19948:	b580      	push	{r7, lr}
   1994a:	b082      	sub	sp, #8
   1994c:	af00      	add	r7, sp, #0
   1994e:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   19952:	f2c0 0302 	movt	r3, #2
   19956:	681b      	ldr	r3, [r3, #0]
   19958:	607b      	str	r3, [r7, #4]
	GetConfig();
   1995a:	f7fe fc23 	bl	181a4 <GetConfig>
	SetConfig();
   1995e:	f7fe fabb 	bl	17ed8 <SetConfig>
	FreeSecret();
   19962:	f7ff f9e1 	bl	18d28 <FreeSecret>
	CreateSecret();
   19966:	f7ff f939 	bl	18bdc <CreateSecret>
	LoadIso9564Key();
   1996a:	f7ff fa2d 	bl	18dc8 <LoadIso9564Key>
	LoadMacKey();
   1996e:	f7ff fad7 	bl	18f20 <LoadMacKey>

}
   19972:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   19976:	f2c0 0302 	movt	r3, #2
   1997a:	687a      	ldr	r2, [r7, #4]
   1997c:	681b      	ldr	r3, [r3, #0]
   1997e:	429a      	cmp	r2, r3
   19980:	d001      	beq.n	19986 <LoadKeysAuto+0x3e>
   19982:	f7ef fb0f 	bl	8fa4 <__stack_chk_fail>
   19986:	f107 0708 	add.w	r7, r7, #8
   1998a:	46bd      	mov	sp, r7
   1998c:	bd80      	pop	{r7, pc}
   1998e:	bf00      	nop

00019990 <amount>:


//! \brief Ask for an amount.
//! \param[out] amount Entered amount.
//! \return \a TRUE if the amount is entered, \a FALSE if not (cancelled ...).
int amount() {
   19990:	b5b0      	push	{r4, r5, r7, lr}
   19992:	b09a      	sub	sp, #104	; 0x68
   19994:	af06      	add	r7, sp, #24
   19996:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   1999a:	f2c0 0302 	movt	r3, #2
   1999e:	681b      	ldr	r3, [r3, #0]
   199a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	int result = 0,ret = 0;
   199a2:	2300      	movs	r3, #0
   199a4:	603b      	str	r3, [r7, #0]
   199a6:	2300      	movs	r3, #0
   199a8:	607b      	str	r3, [r7, #4]
	const char entryMask[] = "/d/d/d,/d/d/d,/d/d/D./D/D";
   199aa:	f246 2344 	movw	r3, #25156	; 0x6244
   199ae:	f2c0 0302 	movt	r3, #2
   199b2:	f107 040c 	add.w	r4, r7, #12
   199b6:	461d      	mov	r5, r3
   199b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   199ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   199bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   199c0:	c403      	stmia	r4!, {r0, r1}
   199c2:	8022      	strh	r2, [r4, #0]
	char currencyLabel[3 + 1] ;
	char amountString[32 + 1];

	memset(amountString, 0, sizeof(amountString));
   199c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
   199c8:	4618      	mov	r0, r3
   199ca:	2100      	movs	r1, #0
   199cc:	2221      	movs	r2, #33	; 0x21
   199ce:	f7ef e8f6 	blx	8bbc <_init+0x5c>

	strcat(currencyLabel, "KES");
   199d2:	f107 0308 	add.w	r3, r7, #8
   199d6:	4618      	mov	r0, r3
   199d8:	f7ef e954 	blx	8c84 <_init+0x124>
   199dc:	4603      	mov	r3, r0
   199de:	f107 0208 	add.w	r2, r7, #8
   199e2:	18d2      	adds	r2, r2, r3
   199e4:	f246 2338 	movw	r3, #25144	; 0x6238
   199e8:	f2c0 0302 	movt	r3, #2
   199ec:	6818      	ldr	r0, [r3, #0]
   199ee:	6010      	str	r0, [r2, #0]

	result = (GL_Dialog_Amount(gGoalGraphicLibInstance, NULL, "Amount:", entryMask, amountString, sizeof(amountString) - 1, currencyLabel, GL_ALIGN_RIGHT, 2 * GL_TIME_MINUTE) == GL_KEY_VALID);
   199f0:	f64f 63e8 	movw	r3, #65256	; 0xfee8
   199f4:	f2c0 0302 	movt	r3, #2
   199f8:	681a      	ldr	r2, [r3, #0]
   199fa:	f107 040c 	add.w	r4, r7, #12
   199fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
   19a02:	9300      	str	r3, [sp, #0]
   19a04:	2320      	movs	r3, #32
   19a06:	9301      	str	r3, [sp, #4]
   19a08:	f107 0308 	add.w	r3, r7, #8
   19a0c:	9302      	str	r3, [sp, #8]
   19a0e:	2302      	movs	r3, #2
   19a10:	9303      	str	r3, [sp, #12]
   19a12:	f24d 43c0 	movw	r3, #54464	; 0xd4c0
   19a16:	f2c0 0301 	movt	r3, #1
   19a1a:	9304      	str	r3, [sp, #16]
   19a1c:	4610      	mov	r0, r2
   19a1e:	2100      	movs	r1, #0
   19a20:	f246 223c 	movw	r2, #25148	; 0x623c
   19a24:	f2c0 0202 	movt	r2, #2
   19a28:	4623      	mov	r3, r4
   19a2a:	f007 fdf7 	bl	2161c <GL_Dialog_Amount>
   19a2e:	4602      	mov	r2, r0
   19a30:	f64f 0350 	movw	r3, #63568	; 0xf850
   19a34:	429a      	cmp	r2, r3
   19a36:	bf14      	ite	ne
   19a38:	2300      	movne	r3, #0
   19a3a:	2301      	moveq	r3, #1
   19a3c:	b2db      	uxtb	r3, r3
   19a3e:	603b      	str	r3, [r7, #0]
	if (result) {
   19a40:	683b      	ldr	r3, [r7, #0]
   19a42:	2b00      	cmp	r3, #0
   19a44:	d00d      	beq.n	19a62 <amount+0xd2>
		mapPut(traAmt, amountString, strlen(amountString));
   19a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
   19a4a:	4618      	mov	r0, r3
   19a4c:	f7ef e91a 	blx	8c84 <_init+0x124>
   19a50:	4603      	mov	r3, r0
   19a52:	b29b      	uxth	r3, r3
   19a54:	f107 0228 	add.w	r2, r7, #40	; 0x28
   19a58:	201b      	movs	r0, #27
   19a5a:	4611      	mov	r1, r2
   19a5c:	461a      	mov	r2, r3
   19a5e:	f7fc fdd5 	bl	1660c <mapPut>
	}

	lblKO:
	return 0;
   19a62:	2300      	movs	r3, #0


	return result;
}
   19a64:	4618      	mov	r0, r3
   19a66:	f64f 63e0 	movw	r3, #65248	; 0xfee0
   19a6a:	f2c0 0302 	movt	r3, #2
   19a6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   19a70:	681b      	ldr	r3, [r3, #0]
   19a72:	429a      	cmp	r2, r3
   19a74:	d001      	beq.n	19a7a <amount+0xea>
   19a76:	f7ef fa95 	bl	8fa4 <__stack_chk_fail>
   19a7a:	f107 0750 	add.w	r7, r7, #80	; 0x50
   19a7e:	46bd      	mov	sp, r7
   19a80:	bdb0      	pop	{r4, r5, r7, pc}
   19a82:	bf00      	nop

00019a84 <CreateOrMountDisk>:
   19a84:	b590      	push	{r4, r7, lr}
   19a86:	b091      	sub	sp, #68	; 0x44
   19a88:	af00      	add	r7, sp, #0
   19a8a:	60f8      	str	r0, [r7, #12]
   19a8c:	60b9      	str	r1, [r7, #8]
   19a8e:	607a      	str	r2, [r7, #4]
   19a90:	4c1d      	ldr	r4, [pc, #116]	; (19b08 <CreateOrMountDisk+0x84>)
   19a92:	447c      	add	r4, pc
   19a94:	4b1d      	ldr	r3, [pc, #116]	; (19b0c <CreateOrMountDisk+0x88>)
   19a96:	58e3      	ldr	r3, [r4, r3]
   19a98:	681b      	ldr	r3, [r3, #0]
   19a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   19a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   19aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   19aa2:	2301      	movs	r3, #1
   19aa4:	63bb      	str	r3, [r7, #56]	; 0x38
   19aa6:	f107 031c 	add.w	r3, r7, #28
   19aaa:	4618      	mov	r0, r3
   19aac:	68f9      	ldr	r1, [r7, #12]
   19aae:	f7ef e8b8 	blx	8c20 <_init+0xc0>
   19ab2:	2304      	movs	r3, #4
   19ab4:	633b      	str	r3, [r7, #48]	; 0x30
   19ab6:	687b      	ldr	r3, [r7, #4]
   19ab8:	637b      	str	r3, [r7, #52]	; 0x34
   19aba:	68bb      	ldr	r3, [r7, #8]
   19abc:	617b      	str	r3, [r7, #20]
   19abe:	f107 031c 	add.w	r3, r7, #28
   19ac2:	3310      	adds	r3, #16
   19ac4:	68f8      	ldr	r0, [r7, #12]
   19ac6:	4619      	mov	r1, r3
   19ac8:	f006 ff92 	bl	209f0 <FS_mount>
   19acc:	61b8      	str	r0, [r7, #24]
   19ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   19ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
   19ad4:	69bb      	ldr	r3, [r7, #24]
   19ad6:	2b02      	cmp	r3, #2
   19ad8:	d008      	beq.n	19aec <CreateOrMountDisk+0x68>
   19ada:	f107 021c 	add.w	r2, r7, #28
   19ade:	f107 0314 	add.w	r3, r7, #20
   19ae2:	4610      	mov	r0, r2
   19ae4:	4619      	mov	r1, r3
   19ae6:	f006 feff 	bl	208e8 <FS_dskcreate>
   19aea:	61b8      	str	r0, [r7, #24]
   19aec:	69bb      	ldr	r3, [r7, #24]
   19aee:	4618      	mov	r0, r3
   19af0:	4b06      	ldr	r3, [pc, #24]	; (19b0c <CreateOrMountDisk+0x88>)
   19af2:	58e3      	ldr	r3, [r4, r3]
   19af4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   19af6:	681b      	ldr	r3, [r3, #0]
   19af8:	429a      	cmp	r2, r3
   19afa:	d001      	beq.n	19b00 <CreateOrMountDisk+0x7c>
   19afc:	f7ef fa52 	bl	8fa4 <__stack_chk_fail>
   19b00:	f107 0744 	add.w	r7, r7, #68	; 0x44
   19b04:	46bd      	mov	sp, r7
   19b06:	bd90      	pop	{r4, r7, pc}
   19b08:	00015682 	.word	0x00015682
   19b0c:	000000ac 	.word	0x000000ac

00019b10 <SaveMangementFile>:
   19b10:	b590      	push	{r4, r7, lr}
   19b12:	b08d      	sub	sp, #52	; 0x34
   19b14:	af00      	add	r7, sp, #0
   19b16:	4c28      	ldr	r4, [pc, #160]	; (19bb8 <SaveMangementFile+0xa8>)
   19b18:	447c      	add	r4, pc
   19b1a:	4b28      	ldr	r3, [pc, #160]	; (19bbc <SaveMangementFile+0xac>)
   19b1c:	58e3      	ldr	r3, [r4, r3]
   19b1e:	681b      	ldr	r3, [r3, #0]
   19b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   19b22:	2300      	movs	r3, #0
   19b24:	603b      	str	r3, [r7, #0]
   19b26:	f107 0308 	add.w	r3, r7, #8
   19b2a:	4618      	mov	r0, r3
   19b2c:	4b24      	ldr	r3, [pc, #144]	; (19bc0 <SaveMangementFile+0xb0>)
   19b2e:	447b      	add	r3, pc
   19b30:	4619      	mov	r1, r3
   19b32:	4b24      	ldr	r3, [pc, #144]	; (19bc4 <SaveMangementFile+0xb4>)
   19b34:	447b      	add	r3, pc
   19b36:	461a      	mov	r2, r3
   19b38:	4b23      	ldr	r3, [pc, #140]	; (19bc8 <SaveMangementFile+0xb8>)
   19b3a:	447b      	add	r3, pc
   19b3c:	f7ef e8ba 	blx	8cb4 <_init+0x154>
   19b40:	f107 0308 	add.w	r3, r7, #8
   19b44:	4618      	mov	r0, r3
   19b46:	f006 fefb 	bl	20940 <FS_exist>
   19b4a:	6078      	str	r0, [r7, #4]
   19b4c:	687b      	ldr	r3, [r7, #4]
   19b4e:	2b02      	cmp	r3, #2
   19b50:	d105      	bne.n	19b5e <SaveMangementFile+0x4e>
   19b52:	f107 0308 	add.w	r3, r7, #8
   19b56:	4618      	mov	r0, r3
   19b58:	f007 f81e 	bl	20b98 <FS_unlink>
   19b5c:	6078      	str	r0, [r7, #4]
   19b5e:	f107 0308 	add.w	r3, r7, #8
   19b62:	4618      	mov	r0, r3
   19b64:	4b19      	ldr	r3, [pc, #100]	; (19bcc <SaveMangementFile+0xbc>)
   19b66:	447b      	add	r3, pc
   19b68:	4619      	mov	r1, r3
   19b6a:	f006 ff6b 	bl	20a44 <FS_open>
   19b6e:	6038      	str	r0, [r7, #0]
   19b70:	683b      	ldr	r3, [r7, #0]
   19b72:	2b00      	cmp	r3, #0
   19b74:	d101      	bne.n	19b7a <SaveMangementFile+0x6a>
   19b76:	2313      	movs	r3, #19
   19b78:	e010      	b.n	19b9c <SaveMangementFile+0x8c>
   19b7a:	4b15      	ldr	r3, [pc, #84]	; (19bd0 <SaveMangementFile+0xc0>)
   19b7c:	58e3      	ldr	r3, [r4, r3]
   19b7e:	4618      	mov	r0, r3
   19b80:	f241 1134 	movw	r1, #4404	; 0x1134
   19b84:	2201      	movs	r2, #1
   19b86:	683b      	ldr	r3, [r7, #0]
   19b88:	f007 f85e 	bl	20c48 <FS_write>
   19b8c:	6078      	str	r0, [r7, #4]
   19b8e:	6838      	ldr	r0, [r7, #0]
   19b90:	f006 fe7c 	bl	2088c <FS_close>
   19b94:	6078      	str	r0, [r7, #4]
   19b96:	2300      	movs	r3, #0
   19b98:	603b      	str	r3, [r7, #0]
   19b9a:	230a      	movs	r3, #10
   19b9c:	4618      	mov	r0, r3
   19b9e:	4b07      	ldr	r3, [pc, #28]	; (19bbc <SaveMangementFile+0xac>)
   19ba0:	58e3      	ldr	r3, [r4, r3]
   19ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   19ba4:	681b      	ldr	r3, [r3, #0]
   19ba6:	429a      	cmp	r2, r3
   19ba8:	d001      	beq.n	19bae <SaveMangementFile+0x9e>
   19baa:	f7ef f9fb 	bl	8fa4 <__stack_chk_fail>
   19bae:	f107 0734 	add.w	r7, r7, #52	; 0x34
   19bb2:	46bd      	mov	sp, r7
   19bb4:	bd90      	pop	{r4, r7, pc}
   19bb6:	bf00      	nop
   19bb8:	000155fc 	.word	0x000155fc
   19bbc:	000000ac 	.word	0x000000ac
   19bc0:	0000c746 	.word	0x0000c746
   19bc4:	000164a8 	.word	0x000164a8
   19bc8:	0000c742 	.word	0x0000c742
   19bcc:	0000c722 	.word	0x0000c722
   19bd0:	000000c0 	.word	0x000000c0

00019bd4 <ExtraireFileID>:
   19bd4:	b590      	push	{r4, r7, lr}
   19bd6:	b087      	sub	sp, #28
   19bd8:	af00      	add	r7, sp, #0
   19bda:	6078      	str	r0, [r7, #4]
   19bdc:	6039      	str	r1, [r7, #0]
   19bde:	4c25      	ldr	r4, [pc, #148]	; (19c74 <ExtraireFileID+0xa0>)
   19be0:	447c      	add	r4, pc
   19be2:	4b25      	ldr	r3, [pc, #148]	; (19c78 <ExtraireFileID+0xa4>)
   19be4:	58e3      	ldr	r3, [r4, r3]
   19be6:	681b      	ldr	r3, [r3, #0]
   19be8:	617b      	str	r3, [r7, #20]
   19bea:	2300      	movs	r3, #0
   19bec:	613b      	str	r3, [r7, #16]
   19bee:	2300      	movs	r3, #0
   19bf0:	73fb      	strb	r3, [r7, #15]
   19bf2:	e025      	b.n	19c40 <ExtraireFileID+0x6c>
   19bf4:	693b      	ldr	r3, [r7, #16]
   19bf6:	222c      	movs	r2, #44	; 0x2c
   19bf8:	fb02 f203 	mul.w	r2, r2, r3
   19bfc:	4b1f      	ldr	r3, [pc, #124]	; (19c7c <ExtraireFileID+0xa8>)
   19bfe:	58e3      	ldr	r3, [r4, r3]
   19c00:	18d3      	adds	r3, r2, r3
   19c02:	3304      	adds	r3, #4
   19c04:	4618      	mov	r0, r3
   19c06:	6879      	ldr	r1, [r7, #4]
   19c08:	f7ef e868 	blx	8cdc <_init+0x17c>
   19c0c:	4603      	mov	r3, r0
   19c0e:	2b00      	cmp	r3, #0
   19c10:	d113      	bne.n	19c3a <ExtraireFileID+0x66>
   19c12:	693b      	ldr	r3, [r7, #16]
   19c14:	222c      	movs	r2, #44	; 0x2c
   19c16:	fb02 f303 	mul.w	r3, r2, r3
   19c1a:	f103 0210 	add.w	r2, r3, #16
   19c1e:	4b17      	ldr	r3, [pc, #92]	; (19c7c <ExtraireFileID+0xa8>)
   19c20:	58e3      	ldr	r3, [r4, r3]
   19c22:	18d3      	adds	r3, r2, r3
   19c24:	3305      	adds	r3, #5
   19c26:	4618      	mov	r0, r3
   19c28:	6839      	ldr	r1, [r7, #0]
   19c2a:	f7ef e858 	blx	8cdc <_init+0x17c>
   19c2e:	4603      	mov	r3, r0
   19c30:	2b00      	cmp	r3, #0
   19c32:	d102      	bne.n	19c3a <ExtraireFileID+0x66>
   19c34:	2301      	movs	r3, #1
   19c36:	73fb      	strb	r3, [r7, #15]
   19c38:	e002      	b.n	19c40 <ExtraireFileID+0x6c>
   19c3a:	693b      	ldr	r3, [r7, #16]
   19c3c:	3301      	adds	r3, #1
   19c3e:	613b      	str	r3, [r7, #16]
   19c40:	7bfb      	ldrb	r3, [r7, #15]
   19c42:	2b00      	cmp	r3, #0
   19c44:	d102      	bne.n	19c4c <ExtraireFileID+0x78>
   19c46:	693b      	ldr	r3, [r7, #16]
   19c48:	2b63      	cmp	r3, #99	; 0x63
   19c4a:	ddd3      	ble.n	19bf4 <ExtraireFileID+0x20>
   19c4c:	7bfb      	ldrb	r3, [r7, #15]
   19c4e:	2b01      	cmp	r3, #1
   19c50:	d101      	bne.n	19c56 <ExtraireFileID+0x82>
   19c52:	693b      	ldr	r3, [r7, #16]
   19c54:	e001      	b.n	19c5a <ExtraireFileID+0x86>
   19c56:	f04f 33ff 	mov.w	r3, #4294967295
   19c5a:	4618      	mov	r0, r3
   19c5c:	4b06      	ldr	r3, [pc, #24]	; (19c78 <ExtraireFileID+0xa4>)
   19c5e:	58e3      	ldr	r3, [r4, r3]
   19c60:	697a      	ldr	r2, [r7, #20]
   19c62:	681b      	ldr	r3, [r3, #0]
   19c64:	429a      	cmp	r2, r3
   19c66:	d001      	beq.n	19c6c <ExtraireFileID+0x98>
   19c68:	f7ef f99c 	bl	8fa4 <__stack_chk_fail>
   19c6c:	f107 071c 	add.w	r7, r7, #28
   19c70:	46bd      	mov	sp, r7
   19c72:	bd90      	pop	{r4, r7, pc}
   19c74:	00015534 	.word	0x00015534
   19c78:	000000ac 	.word	0x000000ac
   19c7c:	000000c0 	.word	0x000000c0

00019c80 <DeleteFileFromTable>:
   19c80:	b590      	push	{r4, r7, lr}
   19c82:	b085      	sub	sp, #20
   19c84:	af00      	add	r7, sp, #0
   19c86:	6078      	str	r0, [r7, #4]
   19c88:	4c21      	ldr	r4, [pc, #132]	; (19d10 <DeleteFileFromTable+0x90>)
   19c8a:	447c      	add	r4, pc
   19c8c:	4b21      	ldr	r3, [pc, #132]	; (19d14 <DeleteFileFromTable+0x94>)
   19c8e:	58e3      	ldr	r3, [r4, r3]
   19c90:	681b      	ldr	r3, [r3, #0]
   19c92:	60fb      	str	r3, [r7, #12]
   19c94:	687b      	ldr	r3, [r7, #4]
   19c96:	60bb      	str	r3, [r7, #8]
   19c98:	e018      	b.n	19ccc <DeleteFileFromTable+0x4c>
   19c9a:	68bb      	ldr	r3, [r7, #8]
   19c9c:	222c      	movs	r2, #44	; 0x2c
   19c9e:	fb02 f203 	mul.w	r2, r2, r3
   19ca2:	4b1d      	ldr	r3, [pc, #116]	; (19d18 <DeleteFileFromTable+0x98>)
   19ca4:	58e3      	ldr	r3, [r4, r3]
   19ca6:	18d3      	adds	r3, r2, r3
   19ca8:	1d1a      	adds	r2, r3, #4
   19caa:	68bb      	ldr	r3, [r7, #8]
   19cac:	3301      	adds	r3, #1
   19cae:	212c      	movs	r1, #44	; 0x2c
   19cb0:	fb01 f103 	mul.w	r1, r1, r3
   19cb4:	4b18      	ldr	r3, [pc, #96]	; (19d18 <DeleteFileFromTable+0x98>)
   19cb6:	58e3      	ldr	r3, [r4, r3]
   19cb8:	18cb      	adds	r3, r1, r3
   19cba:	3304      	adds	r3, #4
   19cbc:	4610      	mov	r0, r2
   19cbe:	4619      	mov	r1, r3
   19cc0:	222c      	movs	r2, #44	; 0x2c
   19cc2:	f7ee efda 	blx	8c78 <_init+0x118>
   19cc6:	68bb      	ldr	r3, [r7, #8]
   19cc8:	3301      	adds	r3, #1
   19cca:	60bb      	str	r3, [r7, #8]
   19ccc:	4b12      	ldr	r3, [pc, #72]	; (19d18 <DeleteFileFromTable+0x98>)
   19cce:	58e3      	ldr	r3, [r4, r3]
   19cd0:	681b      	ldr	r3, [r3, #0]
   19cd2:	461a      	mov	r2, r3
   19cd4:	68bb      	ldr	r3, [r7, #8]
   19cd6:	429a      	cmp	r2, r3
   19cd8:	dcdf      	bgt.n	19c9a <DeleteFileFromTable+0x1a>
   19cda:	4b0f      	ldr	r3, [pc, #60]	; (19d18 <DeleteFileFromTable+0x98>)
   19cdc:	58e3      	ldr	r3, [r4, r3]
   19cde:	681b      	ldr	r3, [r3, #0]
   19ce0:	222c      	movs	r2, #44	; 0x2c
   19ce2:	fb02 f203 	mul.w	r2, r2, r3
   19ce6:	4b0c      	ldr	r3, [pc, #48]	; (19d18 <DeleteFileFromTable+0x98>)
   19ce8:	58e3      	ldr	r3, [r4, r3]
   19cea:	18d3      	adds	r3, r2, r3
   19cec:	3304      	adds	r3, #4
   19cee:	4618      	mov	r0, r3
   19cf0:	2100      	movs	r1, #0
   19cf2:	222c      	movs	r2, #44	; 0x2c
   19cf4:	f7ee ef62 	blx	8bbc <_init+0x5c>
   19cf8:	4b06      	ldr	r3, [pc, #24]	; (19d14 <DeleteFileFromTable+0x94>)
   19cfa:	58e3      	ldr	r3, [r4, r3]
   19cfc:	68fa      	ldr	r2, [r7, #12]
   19cfe:	681b      	ldr	r3, [r3, #0]
   19d00:	429a      	cmp	r2, r3
   19d02:	d001      	beq.n	19d08 <DeleteFileFromTable+0x88>
   19d04:	f7ef f94e 	bl	8fa4 <__stack_chk_fail>
   19d08:	f107 0714 	add.w	r7, r7, #20
   19d0c:	46bd      	mov	sp, r7
   19d0e:	bd90      	pop	{r4, r7, pc}
   19d10:	0001548a 	.word	0x0001548a
   19d14:	000000ac 	.word	0x000000ac
   19d18:	000000c0 	.word	0x000000c0

00019d1c <AddModifyRecordBegin>:
   19d1c:	b590      	push	{r4, r7, lr}
   19d1e:	b0a3      	sub	sp, #140	; 0x8c
   19d20:	af00      	add	r7, sp, #0
   19d22:	6178      	str	r0, [r7, #20]
   19d24:	6139      	str	r1, [r7, #16]
   19d26:	60fa      	str	r2, [r7, #12]
   19d28:	60bb      	str	r3, [r7, #8]
   19d2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   19d2e:	607b      	str	r3, [r7, #4]
   19d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   19d34:	603b      	str	r3, [r7, #0]
   19d36:	4cb9      	ldr	r4, [pc, #740]	; (1a01c <AddModifyRecordBegin+0x300>)
   19d38:	447c      	add	r4, pc
   19d3a:	4bb9      	ldr	r3, [pc, #740]	; (1a020 <AddModifyRecordBegin+0x304>)
   19d3c:	58e3      	ldr	r3, [r4, r3]
   19d3e:	681b      	ldr	r3, [r3, #0]
   19d40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   19d44:	2318      	movs	r3, #24
   19d46:	623b      	str	r3, [r7, #32]
   19d48:	2300      	movs	r3, #0
   19d4a:	633b      	str	r3, [r7, #48]	; 0x30
   19d4c:	2300      	movs	r3, #0
   19d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   19d50:	2300      	movs	r3, #0
   19d52:	62fb      	str	r3, [r7, #44]	; 0x2c
   19d54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   19d58:	4618      	mov	r0, r3
   19d5a:	4bb2      	ldr	r3, [pc, #712]	; (1a024 <AddModifyRecordBegin+0x308>)
   19d5c:	447b      	add	r3, pc
   19d5e:	4619      	mov	r1, r3
   19d60:	697a      	ldr	r2, [r7, #20]
   19d62:	693b      	ldr	r3, [r7, #16]
   19d64:	f7ee efa6 	blx	8cb4 <_init+0x154>
   19d68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   19d6c:	4618      	mov	r0, r3
   19d6e:	4bae      	ldr	r3, [pc, #696]	; (1a028 <AddModifyRecordBegin+0x30c>)
   19d70:	447b      	add	r3, pc
   19d72:	4619      	mov	r1, r3
   19d74:	f006 fe66 	bl	20a44 <FS_open>
   19d78:	62b8      	str	r0, [r7, #40]	; 0x28
   19d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19d7c:	2b00      	cmp	r3, #0
   19d7e:	d102      	bne.n	19d86 <AddModifyRecordBegin+0x6a>
   19d80:	2313      	movs	r3, #19
   19d82:	623b      	str	r3, [r7, #32]
   19d84:	e13a      	b.n	19ffc <AddModifyRecordBegin+0x2e0>
   19d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19d88:	f006 fe06 	bl	20998 <FS_length>
   19d8c:	6378      	str	r0, [r7, #52]	; 0x34
   19d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19d90:	4618      	mov	r0, r3
   19d92:	f006 ffe3 	bl	20d5c <PageAlloc>
   19d96:	6338      	str	r0, [r7, #48]	; 0x30
   19d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19d9a:	2b00      	cmp	r3, #0
   19d9c:	f000 8121 	beq.w	19fe2 <AddModifyRecordBegin+0x2c6>
   19da0:	f107 0360 	add.w	r3, r7, #96	; 0x60
   19da4:	4618      	mov	r0, r3
   19da6:	4ba1      	ldr	r3, [pc, #644]	; (1a02c <AddModifyRecordBegin+0x310>)
   19da8:	447b      	add	r3, pc
   19daa:	4619      	mov	r1, r3
   19dac:	697a      	ldr	r2, [r7, #20]
   19dae:	4ba0      	ldr	r3, [pc, #640]	; (1a030 <AddModifyRecordBegin+0x314>)
   19db0:	447b      	add	r3, pc
   19db2:	f7ee ef80 	blx	8cb4 <_init+0x154>
   19db6:	f107 0360 	add.w	r3, r7, #96	; 0x60
   19dba:	4618      	mov	r0, r3
   19dbc:	f006 fdc0 	bl	20940 <FS_exist>
   19dc0:	63b8      	str	r0, [r7, #56]	; 0x38
   19dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19dc4:	2b02      	cmp	r3, #2
   19dc6:	d105      	bne.n	19dd4 <AddModifyRecordBegin+0xb8>
   19dc8:	f107 0360 	add.w	r3, r7, #96	; 0x60
   19dcc:	4618      	mov	r0, r3
   19dce:	f006 fee3 	bl	20b98 <FS_unlink>
   19dd2:	63b8      	str	r0, [r7, #56]	; 0x38
   19dd4:	f107 0360 	add.w	r3, r7, #96	; 0x60
   19dd8:	4618      	mov	r0, r3
   19dda:	4b96      	ldr	r3, [pc, #600]	; (1a034 <AddModifyRecordBegin+0x318>)
   19ddc:	447b      	add	r3, pc
   19dde:	4619      	mov	r1, r3
   19de0:	f006 fe30 	bl	20a44 <FS_open>
   19de4:	62f8      	str	r0, [r7, #44]	; 0x2c
   19de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19de8:	2100      	movs	r1, #0
   19dea:	2200      	movs	r2, #0
   19dec:	f006 feaa 	bl	20b44 <FS_seek>
   19df0:	63b8      	str	r0, [r7, #56]	; 0x38
   19df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19df4:	2b02      	cmp	r3, #2
   19df6:	f040 80eb 	bne.w	19fd0 <AddModifyRecordBegin+0x2b4>
   19dfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
   19dfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
   19dfe:	2201      	movs	r2, #1
   19e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19e02:	f006 fe49 	bl	20a98 <FS_read>
   19e06:	6278      	str	r0, [r7, #36]	; 0x24
   19e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19e0a:	2b01      	cmp	r3, #1
   19e0c:	d007      	beq.n	19e1e <AddModifyRecordBegin+0x102>
   19e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19e10:	2b00      	cmp	r3, #0
   19e12:	f040 80dd 	bne.w	19fd0 <AddModifyRecordBegin+0x2b4>
   19e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19e18:	2b00      	cmp	r3, #0
   19e1a:	f040 80d9 	bne.w	19fd0 <AddModifyRecordBegin+0x2b4>
   19e1e:	4b86      	ldr	r3, [pc, #536]	; (1a038 <AddModifyRecordBegin+0x31c>)
   19e20:	58e3      	ldr	r3, [r4, r3]
   19e22:	461a      	mov	r2, r3
   19e24:	687b      	ldr	r3, [r7, #4]
   19e26:	212c      	movs	r1, #44	; 0x2c
   19e28:	fb01 f303 	mul.w	r3, r1, r3
   19e2c:	18d3      	adds	r3, r2, r3
   19e2e:	3328      	adds	r3, #40	; 0x28
   19e30:	681b      	ldr	r3, [r3, #0]
   19e32:	2b01      	cmp	r3, #1
   19e34:	d173      	bne.n	19f1e <AddModifyRecordBegin+0x202>
   19e36:	683b      	ldr	r3, [r7, #0]
   19e38:	2b01      	cmp	r3, #1
   19e3a:	d10a      	bne.n	19e52 <AddModifyRecordBegin+0x136>
   19e3c:	f107 0318 	add.w	r3, r7, #24
   19e40:	4618      	mov	r0, r3
   19e42:	6b39      	ldr	r1, [r7, #48]	; 0x30
   19e44:	2204      	movs	r2, #4
   19e46:	f7ee ef18 	blx	8c78 <_init+0x118>
   19e4a:	69bb      	ldr	r3, [r7, #24]
   19e4c:	3304      	adds	r3, #4
   19e4e:	61fb      	str	r3, [r7, #28]
   19e50:	e001      	b.n	19e56 <AddModifyRecordBegin+0x13a>
   19e52:	2300      	movs	r3, #0
   19e54:	61fb      	str	r3, [r7, #28]
   19e56:	68bb      	ldr	r3, [r7, #8]
   19e58:	2b00      	cmp	r3, #0
   19e5a:	f2c0 80b9 	blt.w	19fd0 <AddModifyRecordBegin+0x2b4>
   19e5e:	69fb      	ldr	r3, [r7, #28]
   19e60:	2b00      	cmp	r3, #0
   19e62:	f2c0 80b5 	blt.w	19fd0 <AddModifyRecordBegin+0x2b4>
   19e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   19e68:	69fb      	ldr	r3, [r7, #28]
   19e6a:	1ad3      	subs	r3, r2, r3
   19e6c:	2b00      	cmp	r3, #0
   19e6e:	f2c0 80af 	blt.w	19fd0 <AddModifyRecordBegin+0x2b4>
   19e72:	f107 0308 	add.w	r3, r7, #8
   19e76:	4618      	mov	r0, r3
   19e78:	2104      	movs	r1, #4
   19e7a:	2201      	movs	r2, #1
   19e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19e7e:	f006 fee3 	bl	20c48 <FS_write>
   19e82:	6278      	str	r0, [r7, #36]	; 0x24
   19e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19e86:	2b01      	cmp	r3, #1
   19e88:	d107      	bne.n	19e9a <AddModifyRecordBegin+0x17e>
   19e8a:	68bb      	ldr	r3, [r7, #8]
   19e8c:	68f8      	ldr	r0, [r7, #12]
   19e8e:	4619      	mov	r1, r3
   19e90:	2201      	movs	r2, #1
   19e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19e94:	f006 fed8 	bl	20c48 <FS_write>
   19e98:	6278      	str	r0, [r7, #36]	; 0x24
   19e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19e9c:	2b01      	cmp	r3, #1
   19e9e:	d005      	beq.n	19eac <AddModifyRecordBegin+0x190>
   19ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19ea2:	2b00      	cmp	r3, #0
   19ea4:	d10f      	bne.n	19ec6 <AddModifyRecordBegin+0x1aa>
   19ea6:	68bb      	ldr	r3, [r7, #8]
   19ea8:	2b00      	cmp	r3, #0
   19eaa:	d10c      	bne.n	19ec6 <AddModifyRecordBegin+0x1aa>
   19eac:	69fb      	ldr	r3, [r7, #28]
   19eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   19eb0:	18d2      	adds	r2, r2, r3
   19eb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
   19eb4:	69fb      	ldr	r3, [r7, #28]
   19eb6:	1acb      	subs	r3, r1, r3
   19eb8:	4610      	mov	r0, r2
   19eba:	4619      	mov	r1, r3
   19ebc:	2201      	movs	r2, #1
   19ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19ec0:	f006 fec2 	bl	20c48 <FS_write>
   19ec4:	6278      	str	r0, [r7, #36]	; 0x24
   19ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19ec8:	2b01      	cmp	r3, #1
   19eca:	d006      	beq.n	19eda <AddModifyRecordBegin+0x1be>
   19ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19ece:	2b00      	cmp	r3, #0
   19ed0:	d17e      	bne.n	19fd0 <AddModifyRecordBegin+0x2b4>
   19ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   19ed4:	69fb      	ldr	r3, [r7, #28]
   19ed6:	429a      	cmp	r2, r3
   19ed8:	d17a      	bne.n	19fd0 <AddModifyRecordBegin+0x2b4>
   19eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19edc:	f006 fcd6 	bl	2088c <FS_close>
   19ee0:	2300      	movs	r3, #0
   19ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   19ee4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   19ee8:	4618      	mov	r0, r3
   19eea:	f006 fe55 	bl	20b98 <FS_unlink>
   19eee:	63b8      	str	r0, [r7, #56]	; 0x38
   19ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19ef2:	2b02      	cmp	r3, #2
   19ef4:	d16c      	bne.n	19fd0 <AddModifyRecordBegin+0x2b4>
   19ef6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19ef8:	f006 fcc8 	bl	2088c <FS_close>
   19efc:	2300      	movs	r3, #0
   19efe:	62fb      	str	r3, [r7, #44]	; 0x2c
   19f00:	f107 0260 	add.w	r2, r7, #96	; 0x60
   19f04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   19f08:	4610      	mov	r0, r2
   19f0a:	4619      	mov	r1, r3
   19f0c:	f006 fdf0 	bl	20af0 <FS_rename>
   19f10:	63b8      	str	r0, [r7, #56]	; 0x38
   19f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19f14:	2b02      	cmp	r3, #2
   19f16:	d15b      	bne.n	19fd0 <AddModifyRecordBegin+0x2b4>
   19f18:	230a      	movs	r3, #10
   19f1a:	623b      	str	r3, [r7, #32]
   19f1c:	e058      	b.n	19fd0 <AddModifyRecordBegin+0x2b4>
   19f1e:	683b      	ldr	r3, [r7, #0]
   19f20:	2b01      	cmp	r3, #1
   19f22:	d102      	bne.n	19f2a <AddModifyRecordBegin+0x20e>
   19f24:	68bb      	ldr	r3, [r7, #8]
   19f26:	61fb      	str	r3, [r7, #28]
   19f28:	e001      	b.n	19f2e <AddModifyRecordBegin+0x212>
   19f2a:	2300      	movs	r3, #0
   19f2c:	61fb      	str	r3, [r7, #28]
   19f2e:	69fb      	ldr	r3, [r7, #28]
   19f30:	2b00      	cmp	r3, #0
   19f32:	db4d      	blt.n	19fd0 <AddModifyRecordBegin+0x2b4>
   19f34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   19f36:	69fb      	ldr	r3, [r7, #28]
   19f38:	1ad3      	subs	r3, r2, r3
   19f3a:	2b00      	cmp	r3, #0
   19f3c:	db48      	blt.n	19fd0 <AddModifyRecordBegin+0x2b4>
   19f3e:	68bb      	ldr	r3, [r7, #8]
   19f40:	68f8      	ldr	r0, [r7, #12]
   19f42:	4619      	mov	r1, r3
   19f44:	2201      	movs	r2, #1
   19f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19f48:	f006 fe7e 	bl	20c48 <FS_write>
   19f4c:	6278      	str	r0, [r7, #36]	; 0x24
   19f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19f50:	2b01      	cmp	r3, #1
   19f52:	d005      	beq.n	19f60 <AddModifyRecordBegin+0x244>
   19f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19f56:	2b00      	cmp	r3, #0
   19f58:	d10f      	bne.n	19f7a <AddModifyRecordBegin+0x25e>
   19f5a:	68bb      	ldr	r3, [r7, #8]
   19f5c:	2b00      	cmp	r3, #0
   19f5e:	d10c      	bne.n	19f7a <AddModifyRecordBegin+0x25e>
   19f60:	69fb      	ldr	r3, [r7, #28]
   19f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   19f64:	18d2      	adds	r2, r2, r3
   19f66:	6b79      	ldr	r1, [r7, #52]	; 0x34
   19f68:	69fb      	ldr	r3, [r7, #28]
   19f6a:	1acb      	subs	r3, r1, r3
   19f6c:	4610      	mov	r0, r2
   19f6e:	4619      	mov	r1, r3
   19f70:	2201      	movs	r2, #1
   19f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19f74:	f006 fe68 	bl	20c48 <FS_write>
   19f78:	6278      	str	r0, [r7, #36]	; 0x24
   19f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19f7c:	2b01      	cmp	r3, #1
   19f7e:	d006      	beq.n	19f8e <AddModifyRecordBegin+0x272>
   19f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19f82:	2b00      	cmp	r3, #0
   19f84:	d124      	bne.n	19fd0 <AddModifyRecordBegin+0x2b4>
   19f86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   19f88:	69fb      	ldr	r3, [r7, #28]
   19f8a:	429a      	cmp	r2, r3
   19f8c:	d120      	bne.n	19fd0 <AddModifyRecordBegin+0x2b4>
   19f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19f90:	f006 fc7c 	bl	2088c <FS_close>
   19f94:	2300      	movs	r3, #0
   19f96:	62bb      	str	r3, [r7, #40]	; 0x28
   19f98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   19f9c:	4618      	mov	r0, r3
   19f9e:	f006 fdfb 	bl	20b98 <FS_unlink>
   19fa2:	63b8      	str	r0, [r7, #56]	; 0x38
   19fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19fa6:	2b02      	cmp	r3, #2
   19fa8:	d112      	bne.n	19fd0 <AddModifyRecordBegin+0x2b4>
   19faa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19fac:	f006 fc6e 	bl	2088c <FS_close>
   19fb0:	2300      	movs	r3, #0
   19fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   19fb4:	f107 0260 	add.w	r2, r7, #96	; 0x60
   19fb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   19fbc:	4610      	mov	r0, r2
   19fbe:	4619      	mov	r1, r3
   19fc0:	f006 fd96 	bl	20af0 <FS_rename>
   19fc4:	63b8      	str	r0, [r7, #56]	; 0x38
   19fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   19fc8:	2b02      	cmp	r3, #2
   19fca:	d101      	bne.n	19fd0 <AddModifyRecordBegin+0x2b4>
   19fcc:	230a      	movs	r3, #10
   19fce:	623b      	str	r3, [r7, #32]
   19fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   19fd2:	2b00      	cmp	r3, #0
   19fd4:	d007      	beq.n	19fe6 <AddModifyRecordBegin+0x2ca>
   19fd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   19fd8:	f006 fc58 	bl	2088c <FS_close>
   19fdc:	2300      	movs	r3, #0
   19fde:	62fb      	str	r3, [r7, #44]	; 0x2c
   19fe0:	e001      	b.n	19fe6 <AddModifyRecordBegin+0x2ca>
   19fe2:	2318      	movs	r3, #24
   19fe4:	623b      	str	r3, [r7, #32]
   19fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19fe8:	2b00      	cmp	r3, #0
   19fea:	d004      	beq.n	19ff6 <AddModifyRecordBegin+0x2da>
   19fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19fee:	f006 fc4d 	bl	2088c <FS_close>
   19ff2:	2300      	movs	r3, #0
   19ff4:	62bb      	str	r3, [r7, #40]	; 0x28
   19ff6:	6b38      	ldr	r0, [r7, #48]	; 0x30
   19ff8:	f006 feda 	bl	20db0 <PageFree>
   19ffc:	6a3b      	ldr	r3, [r7, #32]
   19ffe:	4618      	mov	r0, r3
   1a000:	4b07      	ldr	r3, [pc, #28]	; (1a020 <AddModifyRecordBegin+0x304>)
   1a002:	58e3      	ldr	r3, [r4, r3]
   1a004:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   1a008:	681b      	ldr	r3, [r3, #0]
   1a00a:	429a      	cmp	r2, r3
   1a00c:	d001      	beq.n	1a012 <AddModifyRecordBegin+0x2f6>
   1a00e:	f7ee ffc9 	bl	8fa4 <__stack_chk_fail>
   1a012:	f107 078c 	add.w	r7, r7, #140	; 0x8c
   1a016:	46bd      	mov	sp, r7
   1a018:	bd90      	pop	{r4, r7, pc}
   1a01a:	bf00      	nop
   1a01c:	000153dc 	.word	0x000153dc
   1a020:	000000ac 	.word	0x000000ac
   1a024:	0000c518 	.word	0x0000c518
   1a028:	0000c51c 	.word	0x0000c51c
   1a02c:	0000c4cc 	.word	0x0000c4cc
   1a030:	0000c4e0 	.word	0x0000c4e0
   1a034:	0000c4ac 	.word	0x0000c4ac
   1a038:	000000c0 	.word	0x000000c0

0001a03c <AddModifyRecordBeginWithCkecksum>:
   1a03c:	b590      	push	{r4, r7, lr}
   1a03e:	b0bd      	sub	sp, #244	; 0xf4
   1a040:	af00      	add	r7, sp, #0
   1a042:	6178      	str	r0, [r7, #20]
   1a044:	6139      	str	r1, [r7, #16]
   1a046:	60fa      	str	r2, [r7, #12]
   1a048:	60bb      	str	r3, [r7, #8]
   1a04a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
   1a04e:	607b      	str	r3, [r7, #4]
   1a050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   1a054:	603b      	str	r3, [r7, #0]
   1a056:	4cf8      	ldr	r4, [pc, #992]	; (1a438 <AddModifyRecordBeginWithCkecksum+0x3fc>)
   1a058:	447c      	add	r4, pc
   1a05a:	4bf8      	ldr	r3, [pc, #992]	; (1a43c <AddModifyRecordBeginWithCkecksum+0x400>)
   1a05c:	58e3      	ldr	r3, [r4, r3]
   1a05e:	681b      	ldr	r3, [r3, #0]
   1a060:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
   1a064:	2318      	movs	r3, #24
   1a066:	623b      	str	r3, [r7, #32]
   1a068:	2300      	movs	r3, #0
   1a06a:	633b      	str	r3, [r7, #48]	; 0x30
   1a06c:	2300      	movs	r3, #0
   1a06e:	62bb      	str	r3, [r7, #40]	; 0x28
   1a070:	2300      	movs	r3, #0
   1a072:	62fb      	str	r3, [r7, #44]	; 0x2c
   1a074:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1a078:	4618      	mov	r0, r3
   1a07a:	4bf1      	ldr	r3, [pc, #964]	; (1a440 <AddModifyRecordBeginWithCkecksum+0x404>)
   1a07c:	447b      	add	r3, pc
   1a07e:	4619      	mov	r1, r3
   1a080:	697a      	ldr	r2, [r7, #20]
   1a082:	693b      	ldr	r3, [r7, #16]
   1a084:	f7ee ee16 	blx	8cb4 <_init+0x154>
   1a088:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1a08c:	4618      	mov	r0, r3
   1a08e:	4bed      	ldr	r3, [pc, #948]	; (1a444 <AddModifyRecordBeginWithCkecksum+0x408>)
   1a090:	447b      	add	r3, pc
   1a092:	4619      	mov	r1, r3
   1a094:	f006 fcd6 	bl	20a44 <FS_open>
   1a098:	62b8      	str	r0, [r7, #40]	; 0x28
   1a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a09c:	2b00      	cmp	r3, #0
   1a09e:	d102      	bne.n	1a0a6 <AddModifyRecordBeginWithCkecksum+0x6a>
   1a0a0:	2313      	movs	r3, #19
   1a0a2:	623b      	str	r3, [r7, #32]
   1a0a4:	e1b9      	b.n	1a41a <AddModifyRecordBeginWithCkecksum+0x3de>
   1a0a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1a0a8:	f006 fc76 	bl	20998 <FS_length>
   1a0ac:	6378      	str	r0, [r7, #52]	; 0x34
   1a0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a0b0:	4618      	mov	r0, r3
   1a0b2:	f006 fe53 	bl	20d5c <PageAlloc>
   1a0b6:	6338      	str	r0, [r7, #48]	; 0x30
   1a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a0ba:	2b00      	cmp	r3, #0
   1a0bc:	f000 81a0 	beq.w	1a400 <AddModifyRecordBeginWithCkecksum+0x3c4>
   1a0c0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   1a0c4:	4618      	mov	r0, r3
   1a0c6:	4be0      	ldr	r3, [pc, #896]	; (1a448 <AddModifyRecordBeginWithCkecksum+0x40c>)
   1a0c8:	447b      	add	r3, pc
   1a0ca:	4619      	mov	r1, r3
   1a0cc:	697a      	ldr	r2, [r7, #20]
   1a0ce:	4bdf      	ldr	r3, [pc, #892]	; (1a44c <AddModifyRecordBeginWithCkecksum+0x410>)
   1a0d0:	447b      	add	r3, pc
   1a0d2:	f7ee edf0 	blx	8cb4 <_init+0x154>
   1a0d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   1a0da:	4618      	mov	r0, r3
   1a0dc:	f006 fc30 	bl	20940 <FS_exist>
   1a0e0:	63b8      	str	r0, [r7, #56]	; 0x38
   1a0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a0e4:	2b02      	cmp	r3, #2
   1a0e6:	d104      	bne.n	1a0f2 <AddModifyRecordBeginWithCkecksum+0xb6>
   1a0e8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   1a0ec:	4618      	mov	r0, r3
   1a0ee:	f006 fd53 	bl	20b98 <FS_unlink>
   1a0f2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   1a0f6:	4618      	mov	r0, r3
   1a0f8:	4bd5      	ldr	r3, [pc, #852]	; (1a450 <AddModifyRecordBeginWithCkecksum+0x414>)
   1a0fa:	447b      	add	r3, pc
   1a0fc:	4619      	mov	r1, r3
   1a0fe:	f006 fca1 	bl	20a44 <FS_open>
   1a102:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1a106:	2100      	movs	r1, #0
   1a108:	2200      	movs	r2, #0
   1a10a:	f006 fd1b 	bl	20b44 <FS_seek>
   1a10e:	63b8      	str	r0, [r7, #56]	; 0x38
   1a110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a112:	2b02      	cmp	r3, #2
   1a114:	f040 816b 	bne.w	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a118:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1a11a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1a11c:	2201      	movs	r2, #1
   1a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a120:	f006 fcba 	bl	20a98 <FS_read>
   1a124:	6278      	str	r0, [r7, #36]	; 0x24
   1a126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a128:	2b01      	cmp	r3, #1
   1a12a:	d007      	beq.n	1a13c <AddModifyRecordBeginWithCkecksum+0x100>
   1a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a12e:	2b00      	cmp	r3, #0
   1a130:	f040 815d 	bne.w	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a136:	2b00      	cmp	r3, #0
   1a138:	f040 8159 	bne.w	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a13c:	4bc5      	ldr	r3, [pc, #788]	; (1a454 <AddModifyRecordBeginWithCkecksum+0x418>)
   1a13e:	58e3      	ldr	r3, [r4, r3]
   1a140:	461a      	mov	r2, r3
   1a142:	687b      	ldr	r3, [r7, #4]
   1a144:	212c      	movs	r1, #44	; 0x2c
   1a146:	fb01 f303 	mul.w	r3, r1, r3
   1a14a:	18d3      	adds	r3, r2, r3
   1a14c:	3328      	adds	r3, #40	; 0x28
   1a14e:	681b      	ldr	r3, [r3, #0]
   1a150:	2b01      	cmp	r3, #1
   1a152:	f040 80ba 	bne.w	1a2ca <AddModifyRecordBeginWithCkecksum+0x28e>
   1a156:	683b      	ldr	r3, [r7, #0]
   1a158:	2b01      	cmp	r3, #1
   1a15a:	d10a      	bne.n	1a172 <AddModifyRecordBeginWithCkecksum+0x136>
   1a15c:	f107 0318 	add.w	r3, r7, #24
   1a160:	4618      	mov	r0, r3
   1a162:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1a164:	2204      	movs	r2, #4
   1a166:	f7ee ed88 	blx	8c78 <_init+0x118>
   1a16a:	69bb      	ldr	r3, [r7, #24]
   1a16c:	3304      	adds	r3, #4
   1a16e:	61fb      	str	r3, [r7, #28]
   1a170:	e001      	b.n	1a176 <AddModifyRecordBeginWithCkecksum+0x13a>
   1a172:	2300      	movs	r3, #0
   1a174:	61fb      	str	r3, [r7, #28]
   1a176:	69fb      	ldr	r3, [r7, #28]
   1a178:	2b00      	cmp	r3, #0
   1a17a:	f2c0 8138 	blt.w	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a17e:	68bb      	ldr	r3, [r7, #8]
   1a180:	2b00      	cmp	r3, #0
   1a182:	f2c0 8134 	blt.w	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a188:	f1a3 0210 	sub.w	r2, r3, #16
   1a18c:	69fb      	ldr	r3, [r7, #28]
   1a18e:	1ad3      	subs	r3, r2, r3
   1a190:	2b00      	cmp	r3, #0
   1a192:	f2c0 812c 	blt.w	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a196:	f107 0308 	add.w	r3, r7, #8
   1a19a:	4618      	mov	r0, r3
   1a19c:	2104      	movs	r1, #4
   1a19e:	2201      	movs	r2, #1
   1a1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a1a2:	f006 fd51 	bl	20c48 <FS_write>
   1a1a6:	6278      	str	r0, [r7, #36]	; 0x24
   1a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a1aa:	2b01      	cmp	r3, #1
   1a1ac:	d107      	bne.n	1a1be <AddModifyRecordBeginWithCkecksum+0x182>
   1a1ae:	68bb      	ldr	r3, [r7, #8]
   1a1b0:	68f8      	ldr	r0, [r7, #12]
   1a1b2:	4619      	mov	r1, r3
   1a1b4:	2201      	movs	r2, #1
   1a1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a1b8:	f006 fd46 	bl	20c48 <FS_write>
   1a1bc:	6278      	str	r0, [r7, #36]	; 0x24
   1a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a1c0:	2b01      	cmp	r3, #1
   1a1c2:	d005      	beq.n	1a1d0 <AddModifyRecordBeginWithCkecksum+0x194>
   1a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a1c6:	2b00      	cmp	r3, #0
   1a1c8:	d111      	bne.n	1a1ee <AddModifyRecordBeginWithCkecksum+0x1b2>
   1a1ca:	68bb      	ldr	r3, [r7, #8]
   1a1cc:	2b00      	cmp	r3, #0
   1a1ce:	d10e      	bne.n	1a1ee <AddModifyRecordBeginWithCkecksum+0x1b2>
   1a1d0:	69fb      	ldr	r3, [r7, #28]
   1a1d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a1d4:	18d2      	adds	r2, r2, r3
   1a1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a1d8:	f1a3 0110 	sub.w	r1, r3, #16
   1a1dc:	69fb      	ldr	r3, [r7, #28]
   1a1de:	1acb      	subs	r3, r1, r3
   1a1e0:	4610      	mov	r0, r2
   1a1e2:	4619      	mov	r1, r3
   1a1e4:	2201      	movs	r2, #1
   1a1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a1e8:	f006 fd2e 	bl	20c48 <FS_write>
   1a1ec:	6278      	str	r0, [r7, #36]	; 0x24
   1a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a1f0:	2b01      	cmp	r3, #1
   1a1f2:	d00a      	beq.n	1a20a <AddModifyRecordBeginWithCkecksum+0x1ce>
   1a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a1f6:	2b00      	cmp	r3, #0
   1a1f8:	f040 80f9 	bne.w	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a1fe:	f1a3 0210 	sub.w	r2, r3, #16
   1a202:	69fb      	ldr	r3, [r7, #28]
   1a204:	429a      	cmp	r2, r3
   1a206:	f040 80f2 	bne.w	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a20a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1a20e:	4618      	mov	r0, r3
   1a210:	f004 ff8c 	bl	1f12c <md5_init>
   1a214:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1a218:	f107 0308 	add.w	r3, r7, #8
   1a21c:	4610      	mov	r0, r2
   1a21e:	4619      	mov	r1, r3
   1a220:	2204      	movs	r2, #4
   1a222:	f004 ffbd 	bl	1f1a0 <md5_append>
   1a226:	68bb      	ldr	r3, [r7, #8]
   1a228:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1a22c:	4610      	mov	r0, r2
   1a22e:	68f9      	ldr	r1, [r7, #12]
   1a230:	461a      	mov	r2, r3
   1a232:	f004 ffb5 	bl	1f1a0 <md5_append>
   1a236:	69fb      	ldr	r3, [r7, #28]
   1a238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a23a:	18d2      	adds	r2, r2, r3
   1a23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a23e:	f1a3 0110 	sub.w	r1, r3, #16
   1a242:	69fb      	ldr	r3, [r7, #28]
   1a244:	1acb      	subs	r3, r1, r3
   1a246:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   1a24a:	4608      	mov	r0, r1
   1a24c:	4611      	mov	r1, r2
   1a24e:	461a      	mov	r2, r3
   1a250:	f004 ffa6 	bl	1f1a0 <md5_append>
   1a254:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1a258:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1a25c:	4610      	mov	r0, r2
   1a25e:	4619      	mov	r1, r3
   1a260:	f005 f82a 	bl	1f2b8 <md5_finish>
   1a264:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1a268:	4618      	mov	r0, r3
   1a26a:	2110      	movs	r1, #16
   1a26c:	2201      	movs	r2, #1
   1a26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a270:	f006 fcea 	bl	20c48 <FS_write>
   1a274:	6278      	str	r0, [r7, #36]	; 0x24
   1a276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1a278:	f006 fb08 	bl	2088c <FS_close>
   1a27c:	63b8      	str	r0, [r7, #56]	; 0x38
   1a27e:	2300      	movs	r3, #0
   1a280:	62bb      	str	r3, [r7, #40]	; 0x28
   1a282:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1a286:	4618      	mov	r0, r3
   1a288:	f006 fc86 	bl	20b98 <FS_unlink>
   1a28c:	63b8      	str	r0, [r7, #56]	; 0x38
   1a28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a290:	2b02      	cmp	r3, #2
   1a292:	f040 80ac 	bne.w	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a296:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1a298:	f006 faf8 	bl	2088c <FS_close>
   1a29c:	63b8      	str	r0, [r7, #56]	; 0x38
   1a29e:	2300      	movs	r3, #0
   1a2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   1a2a2:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   1a2a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1a2aa:	4610      	mov	r0, r2
   1a2ac:	4619      	mov	r1, r3
   1a2ae:	f006 fc1f 	bl	20af0 <FS_rename>
   1a2b2:	63b8      	str	r0, [r7, #56]	; 0x38
   1a2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a2b6:	2b02      	cmp	r3, #2
   1a2b8:	f040 8099 	bne.w	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a2be:	2b01      	cmp	r3, #1
   1a2c0:	f040 8095 	bne.w	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a2c4:	230a      	movs	r3, #10
   1a2c6:	623b      	str	r3, [r7, #32]
   1a2c8:	e091      	b.n	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a2ca:	683b      	ldr	r3, [r7, #0]
   1a2cc:	2b01      	cmp	r3, #1
   1a2ce:	d102      	bne.n	1a2d6 <AddModifyRecordBeginWithCkecksum+0x29a>
   1a2d0:	68bb      	ldr	r3, [r7, #8]
   1a2d2:	61fb      	str	r3, [r7, #28]
   1a2d4:	e001      	b.n	1a2da <AddModifyRecordBeginWithCkecksum+0x29e>
   1a2d6:	2300      	movs	r3, #0
   1a2d8:	61fb      	str	r3, [r7, #28]
   1a2da:	69fb      	ldr	r3, [r7, #28]
   1a2dc:	2b00      	cmp	r3, #0
   1a2de:	f2c0 8086 	blt.w	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a2e4:	f1a3 0210 	sub.w	r2, r3, #16
   1a2e8:	69fb      	ldr	r3, [r7, #28]
   1a2ea:	1ad3      	subs	r3, r2, r3
   1a2ec:	2b00      	cmp	r3, #0
   1a2ee:	db7e      	blt.n	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a2f0:	68bb      	ldr	r3, [r7, #8]
   1a2f2:	68f8      	ldr	r0, [r7, #12]
   1a2f4:	4619      	mov	r1, r3
   1a2f6:	2201      	movs	r2, #1
   1a2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a2fa:	f006 fca5 	bl	20c48 <FS_write>
   1a2fe:	6278      	str	r0, [r7, #36]	; 0x24
   1a300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a302:	2b01      	cmp	r3, #1
   1a304:	d005      	beq.n	1a312 <AddModifyRecordBeginWithCkecksum+0x2d6>
   1a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a308:	2b00      	cmp	r3, #0
   1a30a:	d111      	bne.n	1a330 <AddModifyRecordBeginWithCkecksum+0x2f4>
   1a30c:	68bb      	ldr	r3, [r7, #8]
   1a30e:	2b00      	cmp	r3, #0
   1a310:	d10e      	bne.n	1a330 <AddModifyRecordBeginWithCkecksum+0x2f4>
   1a312:	69fb      	ldr	r3, [r7, #28]
   1a314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a316:	18d2      	adds	r2, r2, r3
   1a318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a31a:	f1a3 0110 	sub.w	r1, r3, #16
   1a31e:	69fb      	ldr	r3, [r7, #28]
   1a320:	1acb      	subs	r3, r1, r3
   1a322:	4610      	mov	r0, r2
   1a324:	4619      	mov	r1, r3
   1a326:	2201      	movs	r2, #1
   1a328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a32a:	f006 fc8d 	bl	20c48 <FS_write>
   1a32e:	6278      	str	r0, [r7, #36]	; 0x24
   1a330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a332:	2b01      	cmp	r3, #1
   1a334:	d008      	beq.n	1a348 <AddModifyRecordBeginWithCkecksum+0x30c>
   1a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a338:	2b00      	cmp	r3, #0
   1a33a:	d158      	bne.n	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a33e:	f1a3 0210 	sub.w	r2, r3, #16
   1a342:	69fb      	ldr	r3, [r7, #28]
   1a344:	429a      	cmp	r2, r3
   1a346:	d152      	bne.n	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a348:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1a34c:	4618      	mov	r0, r3
   1a34e:	f004 feed 	bl	1f12c <md5_init>
   1a352:	68bb      	ldr	r3, [r7, #8]
   1a354:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1a358:	4610      	mov	r0, r2
   1a35a:	68f9      	ldr	r1, [r7, #12]
   1a35c:	461a      	mov	r2, r3
   1a35e:	f004 ff1f 	bl	1f1a0 <md5_append>
   1a362:	69fb      	ldr	r3, [r7, #28]
   1a364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a366:	18d2      	adds	r2, r2, r3
   1a368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a36a:	f1a3 0110 	sub.w	r1, r3, #16
   1a36e:	69fb      	ldr	r3, [r7, #28]
   1a370:	1acb      	subs	r3, r1, r3
   1a372:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   1a376:	4608      	mov	r0, r1
   1a378:	4611      	mov	r1, r2
   1a37a:	461a      	mov	r2, r3
   1a37c:	f004 ff10 	bl	1f1a0 <md5_append>
   1a380:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1a384:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1a388:	4610      	mov	r0, r2
   1a38a:	4619      	mov	r1, r3
   1a38c:	f004 ff94 	bl	1f2b8 <md5_finish>
   1a390:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1a394:	4618      	mov	r0, r3
   1a396:	2110      	movs	r1, #16
   1a398:	2201      	movs	r2, #1
   1a39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a39c:	f006 fc54 	bl	20c48 <FS_write>
   1a3a0:	6278      	str	r0, [r7, #36]	; 0x24
   1a3a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1a3a4:	f006 fa72 	bl	2088c <FS_close>
   1a3a8:	63b8      	str	r0, [r7, #56]	; 0x38
   1a3aa:	2300      	movs	r3, #0
   1a3ac:	62bb      	str	r3, [r7, #40]	; 0x28
   1a3ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1a3b2:	4618      	mov	r0, r3
   1a3b4:	f006 fbf0 	bl	20b98 <FS_unlink>
   1a3b8:	63b8      	str	r0, [r7, #56]	; 0x38
   1a3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a3bc:	2b02      	cmp	r3, #2
   1a3be:	d116      	bne.n	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a3c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1a3c2:	f006 fa63 	bl	2088c <FS_close>
   1a3c6:	63b8      	str	r0, [r7, #56]	; 0x38
   1a3c8:	2300      	movs	r3, #0
   1a3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   1a3cc:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   1a3d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1a3d4:	4610      	mov	r0, r2
   1a3d6:	4619      	mov	r1, r3
   1a3d8:	f006 fb8a 	bl	20af0 <FS_rename>
   1a3dc:	63b8      	str	r0, [r7, #56]	; 0x38
   1a3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a3e0:	2b02      	cmp	r3, #2
   1a3e2:	d104      	bne.n	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a3e6:	2b01      	cmp	r3, #1
   1a3e8:	d101      	bne.n	1a3ee <AddModifyRecordBeginWithCkecksum+0x3b2>
   1a3ea:	230a      	movs	r3, #10
   1a3ec:	623b      	str	r3, [r7, #32]
   1a3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a3f0:	2b00      	cmp	r3, #0
   1a3f2:	d007      	beq.n	1a404 <AddModifyRecordBeginWithCkecksum+0x3c8>
   1a3f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1a3f6:	f006 fa49 	bl	2088c <FS_close>
   1a3fa:	2300      	movs	r3, #0
   1a3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   1a3fe:	e001      	b.n	1a404 <AddModifyRecordBeginWithCkecksum+0x3c8>
   1a400:	2318      	movs	r3, #24
   1a402:	623b      	str	r3, [r7, #32]
   1a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a406:	2b00      	cmp	r3, #0
   1a408:	d004      	beq.n	1a414 <AddModifyRecordBeginWithCkecksum+0x3d8>
   1a40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1a40c:	f006 fa3e 	bl	2088c <FS_close>
   1a410:	2300      	movs	r3, #0
   1a412:	62bb      	str	r3, [r7, #40]	; 0x28
   1a414:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1a416:	f006 fccb 	bl	20db0 <PageFree>
   1a41a:	6a3b      	ldr	r3, [r7, #32]
   1a41c:	4618      	mov	r0, r3
   1a41e:	4b07      	ldr	r3, [pc, #28]	; (1a43c <AddModifyRecordBeginWithCkecksum+0x400>)
   1a420:	58e3      	ldr	r3, [r4, r3]
   1a422:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
   1a426:	681b      	ldr	r3, [r3, #0]
   1a428:	429a      	cmp	r2, r3
   1a42a:	d001      	beq.n	1a430 <AddModifyRecordBeginWithCkecksum+0x3f4>
   1a42c:	f7ee fdba 	bl	8fa4 <__stack_chk_fail>
   1a430:	f107 07f4 	add.w	r7, r7, #244	; 0xf4
   1a434:	46bd      	mov	sp, r7
   1a436:	bd90      	pop	{r4, r7, pc}
   1a438:	000150bc 	.word	0x000150bc
   1a43c:	000000ac 	.word	0x000000ac
   1a440:	0000c1f8 	.word	0x0000c1f8
   1a444:	0000c1fc 	.word	0x0000c1fc
   1a448:	0000c1ac 	.word	0x0000c1ac
   1a44c:	0000c1c0 	.word	0x0000c1c0
   1a450:	0000c18e 	.word	0x0000c18e
   1a454:	000000c0 	.word	0x000000c0

0001a458 <AddModifyRecordMiddle>:
   1a458:	b590      	push	{r4, r7, lr}
   1a45a:	b0a7      	sub	sp, #156	; 0x9c
   1a45c:	af00      	add	r7, sp, #0
   1a45e:	61f8      	str	r0, [r7, #28]
   1a460:	61b9      	str	r1, [r7, #24]
   1a462:	617a      	str	r2, [r7, #20]
   1a464:	613b      	str	r3, [r7, #16]
   1a466:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   1a46a:	60fb      	str	r3, [r7, #12]
   1a46c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1a470:	60bb      	str	r3, [r7, #8]
   1a472:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1a476:	607b      	str	r3, [r7, #4]
   1a478:	4cf5      	ldr	r4, [pc, #980]	; (1a850 <AddModifyRecordMiddle+0x3f8>)
   1a47a:	447c      	add	r4, pc
   1a47c:	4bf5      	ldr	r3, [pc, #980]	; (1a854 <AddModifyRecordMiddle+0x3fc>)
   1a47e:	58e3      	ldr	r3, [r4, r3]
   1a480:	681b      	ldr	r3, [r3, #0]
   1a482:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   1a486:	2318      	movs	r3, #24
   1a488:	62bb      	str	r3, [r7, #40]	; 0x28
   1a48a:	2300      	movs	r3, #0
   1a48c:	643b      	str	r3, [r7, #64]	; 0x40
   1a48e:	2300      	movs	r3, #0
   1a490:	63bb      	str	r3, [r7, #56]	; 0x38
   1a492:	2300      	movs	r3, #0
   1a494:	63fb      	str	r3, [r7, #60]	; 0x3c
   1a496:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1a49a:	4618      	mov	r0, r3
   1a49c:	4bee      	ldr	r3, [pc, #952]	; (1a858 <AddModifyRecordMiddle+0x400>)
   1a49e:	447b      	add	r3, pc
   1a4a0:	4619      	mov	r1, r3
   1a4a2:	69fa      	ldr	r2, [r7, #28]
   1a4a4:	69bb      	ldr	r3, [r7, #24]
   1a4a6:	f7ee ec06 	blx	8cb4 <_init+0x154>
   1a4aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1a4ae:	4618      	mov	r0, r3
   1a4b0:	4bea      	ldr	r3, [pc, #936]	; (1a85c <AddModifyRecordMiddle+0x404>)
   1a4b2:	447b      	add	r3, pc
   1a4b4:	4619      	mov	r1, r3
   1a4b6:	f006 fac5 	bl	20a44 <FS_open>
   1a4ba:	63b8      	str	r0, [r7, #56]	; 0x38
   1a4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a4be:	2b00      	cmp	r3, #0
   1a4c0:	d102      	bne.n	1a4c8 <AddModifyRecordMiddle+0x70>
   1a4c2:	2313      	movs	r3, #19
   1a4c4:	62bb      	str	r3, [r7, #40]	; 0x28
   1a4c6:	e1b3      	b.n	1a830 <AddModifyRecordMiddle+0x3d8>
   1a4c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a4ca:	f006 fa65 	bl	20998 <FS_length>
   1a4ce:	6478      	str	r0, [r7, #68]	; 0x44
   1a4d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a4d2:	4618      	mov	r0, r3
   1a4d4:	f006 fc42 	bl	20d5c <PageAlloc>
   1a4d8:	6438      	str	r0, [r7, #64]	; 0x40
   1a4da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a4dc:	2b00      	cmp	r3, #0
   1a4de:	f000 819a 	beq.w	1a816 <AddModifyRecordMiddle+0x3be>
   1a4e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1a4e6:	4618      	mov	r0, r3
   1a4e8:	4bdd      	ldr	r3, [pc, #884]	; (1a860 <AddModifyRecordMiddle+0x408>)
   1a4ea:	447b      	add	r3, pc
   1a4ec:	4619      	mov	r1, r3
   1a4ee:	69fa      	ldr	r2, [r7, #28]
   1a4f0:	4bdc      	ldr	r3, [pc, #880]	; (1a864 <AddModifyRecordMiddle+0x40c>)
   1a4f2:	447b      	add	r3, pc
   1a4f4:	f7ee ebde 	blx	8cb4 <_init+0x154>
   1a4f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1a4fc:	4618      	mov	r0, r3
   1a4fe:	f006 fa1f 	bl	20940 <FS_exist>
   1a502:	64b8      	str	r0, [r7, #72]	; 0x48
   1a504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a506:	2b02      	cmp	r3, #2
   1a508:	d104      	bne.n	1a514 <AddModifyRecordMiddle+0xbc>
   1a50a:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1a50e:	4618      	mov	r0, r3
   1a510:	f006 fb42 	bl	20b98 <FS_unlink>
   1a514:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1a518:	4618      	mov	r0, r3
   1a51a:	4bd3      	ldr	r3, [pc, #844]	; (1a868 <AddModifyRecordMiddle+0x410>)
   1a51c:	447b      	add	r3, pc
   1a51e:	4619      	mov	r1, r3
   1a520:	f006 fa90 	bl	20a44 <FS_open>
   1a524:	63f8      	str	r0, [r7, #60]	; 0x3c
   1a526:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a528:	2100      	movs	r1, #0
   1a52a:	2200      	movs	r2, #0
   1a52c:	f006 fb0a 	bl	20b44 <FS_seek>
   1a530:	64b8      	str	r0, [r7, #72]	; 0x48
   1a532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a534:	2b02      	cmp	r3, #2
   1a536:	f040 8165 	bne.w	1a804 <AddModifyRecordMiddle+0x3ac>
   1a53a:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1a53c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1a53e:	2201      	movs	r2, #1
   1a540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a542:	f006 faa9 	bl	20a98 <FS_read>
   1a546:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a54a:	2b01      	cmp	r3, #1
   1a54c:	d007      	beq.n	1a55e <AddModifyRecordMiddle+0x106>
   1a54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a550:	2b00      	cmp	r3, #0
   1a552:	f040 8157 	bne.w	1a804 <AddModifyRecordMiddle+0x3ac>
   1a556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a558:	2b00      	cmp	r3, #0
   1a55a:	f040 8153 	bne.w	1a804 <AddModifyRecordMiddle+0x3ac>
   1a55e:	4bc3      	ldr	r3, [pc, #780]	; (1a86c <AddModifyRecordMiddle+0x414>)
   1a560:	58e3      	ldr	r3, [r4, r3]
   1a562:	461a      	mov	r2, r3
   1a564:	68bb      	ldr	r3, [r7, #8]
   1a566:	212c      	movs	r1, #44	; 0x2c
   1a568:	fb01 f303 	mul.w	r3, r1, r3
   1a56c:	18d3      	adds	r3, r2, r3
   1a56e:	3328      	adds	r3, #40	; 0x28
   1a570:	681b      	ldr	r3, [r3, #0]
   1a572:	2b01      	cmp	r3, #1
   1a574:	f040 80ca 	bne.w	1a70c <AddModifyRecordMiddle+0x2b4>
   1a578:	2300      	movs	r3, #0
   1a57a:	633b      	str	r3, [r7, #48]	; 0x30
   1a57c:	2300      	movs	r3, #0
   1a57e:	637b      	str	r3, [r7, #52]	; 0x34
   1a580:	e01d      	b.n	1a5be <AddModifyRecordMiddle+0x166>
   1a582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a586:	429a      	cmp	r2, r3
   1a588:	da13      	bge.n	1a5b2 <AddModifyRecordMiddle+0x15a>
   1a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a58c:	2b00      	cmp	r3, #0
   1a58e:	db10      	blt.n	1a5b2 <AddModifyRecordMiddle+0x15a>
   1a590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a594:	18d3      	adds	r3, r2, r3
   1a596:	f107 0220 	add.w	r2, r7, #32
   1a59a:	4610      	mov	r0, r2
   1a59c:	4619      	mov	r1, r3
   1a59e:	2204      	movs	r2, #4
   1a5a0:	f7ee eb6a 	blx	8c78 <_init+0x118>
   1a5a4:	6a3b      	ldr	r3, [r7, #32]
   1a5a6:	461a      	mov	r2, r3
   1a5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a5aa:	18d3      	adds	r3, r2, r3
   1a5ac:	3304      	adds	r3, #4
   1a5ae:	633b      	str	r3, [r7, #48]	; 0x30
   1a5b0:	e002      	b.n	1a5b8 <AddModifyRecordMiddle+0x160>
   1a5b2:	f04f 33ff 	mov.w	r3, #4294967295
   1a5b6:	633b      	str	r3, [r7, #48]	; 0x30
   1a5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a5ba:	3301      	adds	r3, #1
   1a5bc:	637b      	str	r3, [r7, #52]	; 0x34
   1a5be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a5c0:	68fb      	ldr	r3, [r7, #12]
   1a5c2:	429a      	cmp	r2, r3
   1a5c4:	da02      	bge.n	1a5cc <AddModifyRecordMiddle+0x174>
   1a5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a5c8:	2b00      	cmp	r3, #0
   1a5ca:	dada      	bge.n	1a582 <AddModifyRecordMiddle+0x12a>
   1a5cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a5ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a5d0:	429a      	cmp	r2, r3
   1a5d2:	f300 8098 	bgt.w	1a706 <AddModifyRecordMiddle+0x2ae>
   1a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a5d8:	2b00      	cmp	r3, #0
   1a5da:	f2c0 8094 	blt.w	1a706 <AddModifyRecordMiddle+0x2ae>
   1a5de:	687b      	ldr	r3, [r7, #4]
   1a5e0:	2b01      	cmp	r3, #1
   1a5e2:	d10d      	bne.n	1a600 <AddModifyRecordMiddle+0x1a8>
   1a5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a5e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a5e8:	18d3      	adds	r3, r2, r3
   1a5ea:	f107 0220 	add.w	r2, r7, #32
   1a5ee:	4610      	mov	r0, r2
   1a5f0:	4619      	mov	r1, r3
   1a5f2:	2204      	movs	r2, #4
   1a5f4:	f7ee eb40 	blx	8c78 <_init+0x118>
   1a5f8:	6a3b      	ldr	r3, [r7, #32]
   1a5fa:	3304      	adds	r3, #4
   1a5fc:	627b      	str	r3, [r7, #36]	; 0x24
   1a5fe:	e001      	b.n	1a604 <AddModifyRecordMiddle+0x1ac>
   1a600:	2300      	movs	r3, #0
   1a602:	627b      	str	r3, [r7, #36]	; 0x24
   1a604:	693b      	ldr	r3, [r7, #16]
   1a606:	2b00      	cmp	r3, #0
   1a608:	f2c0 80fb 	blt.w	1a802 <AddModifyRecordMiddle+0x3aa>
   1a60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a60e:	2b00      	cmp	r3, #0
   1a610:	f2c0 80f7 	blt.w	1a802 <AddModifyRecordMiddle+0x3aa>
   1a614:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a618:	1ad2      	subs	r2, r2, r3
   1a61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a61c:	1ad3      	subs	r3, r2, r3
   1a61e:	2b00      	cmp	r3, #0
   1a620:	f2c0 80ef 	blt.w	1a802 <AddModifyRecordMiddle+0x3aa>
   1a624:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1a626:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1a628:	2201      	movs	r2, #1
   1a62a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a62c:	f006 fb0c 	bl	20c48 <FS_write>
   1a630:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a634:	2b01      	cmp	r3, #1
   1a636:	d005      	beq.n	1a644 <AddModifyRecordMiddle+0x1ec>
   1a638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a63a:	2b00      	cmp	r3, #0
   1a63c:	d10b      	bne.n	1a656 <AddModifyRecordMiddle+0x1fe>
   1a63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a640:	2b00      	cmp	r3, #0
   1a642:	d108      	bne.n	1a656 <AddModifyRecordMiddle+0x1fe>
   1a644:	f107 0310 	add.w	r3, r7, #16
   1a648:	4618      	mov	r0, r3
   1a64a:	2104      	movs	r1, #4
   1a64c:	2201      	movs	r2, #1
   1a64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a650:	f006 fafa 	bl	20c48 <FS_write>
   1a654:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a658:	2b01      	cmp	r3, #1
   1a65a:	d107      	bne.n	1a66c <AddModifyRecordMiddle+0x214>
   1a65c:	693b      	ldr	r3, [r7, #16]
   1a65e:	6978      	ldr	r0, [r7, #20]
   1a660:	4619      	mov	r1, r3
   1a662:	2201      	movs	r2, #1
   1a664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a666:	f006 faef 	bl	20c48 <FS_write>
   1a66a:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a66e:	2b01      	cmp	r3, #1
   1a670:	d005      	beq.n	1a67e <AddModifyRecordMiddle+0x226>
   1a672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a674:	2b00      	cmp	r3, #0
   1a676:	d113      	bne.n	1a6a0 <AddModifyRecordMiddle+0x248>
   1a678:	693b      	ldr	r3, [r7, #16]
   1a67a:	2b00      	cmp	r3, #0
   1a67c:	d110      	bne.n	1a6a0 <AddModifyRecordMiddle+0x248>
   1a67e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a682:	18d3      	adds	r3, r2, r3
   1a684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a686:	18d2      	adds	r2, r2, r3
   1a688:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a68c:	1ac9      	subs	r1, r1, r3
   1a68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a690:	1acb      	subs	r3, r1, r3
   1a692:	4610      	mov	r0, r2
   1a694:	4619      	mov	r1, r3
   1a696:	2201      	movs	r2, #1
   1a698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a69a:	f006 fad5 	bl	20c48 <FS_write>
   1a69e:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a6a2:	2b01      	cmp	r3, #1
   1a6a4:	d00a      	beq.n	1a6bc <AddModifyRecordMiddle+0x264>
   1a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a6a8:	2b00      	cmp	r3, #0
   1a6aa:	f040 80aa 	bne.w	1a802 <AddModifyRecordMiddle+0x3aa>
   1a6ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1a6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a6b2:	1ad2      	subs	r2, r2, r3
   1a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a6b6:	429a      	cmp	r2, r3
   1a6b8:	f040 80a3 	bne.w	1a802 <AddModifyRecordMiddle+0x3aa>
   1a6bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a6be:	f006 f8e5 	bl	2088c <FS_close>
   1a6c2:	2300      	movs	r3, #0
   1a6c4:	63bb      	str	r3, [r7, #56]	; 0x38
   1a6c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1a6ca:	4618      	mov	r0, r3
   1a6cc:	f006 fa64 	bl	20b98 <FS_unlink>
   1a6d0:	64b8      	str	r0, [r7, #72]	; 0x48
   1a6d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a6d4:	2b02      	cmp	r3, #2
   1a6d6:	f040 8094 	bne.w	1a802 <AddModifyRecordMiddle+0x3aa>
   1a6da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1a6dc:	f006 f8d6 	bl	2088c <FS_close>
   1a6e0:	2300      	movs	r3, #0
   1a6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   1a6e4:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1a6e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1a6ec:	4610      	mov	r0, r2
   1a6ee:	4619      	mov	r1, r3
   1a6f0:	f006 f9fe 	bl	20af0 <FS_rename>
   1a6f4:	64b8      	str	r0, [r7, #72]	; 0x48
   1a6f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a6f8:	2b02      	cmp	r3, #2
   1a6fa:	f040 8082 	bne.w	1a802 <AddModifyRecordMiddle+0x3aa>
   1a6fe:	230a      	movs	r3, #10
   1a700:	62bb      	str	r3, [r7, #40]	; 0x28
   1a702:	bf00      	nop
   1a704:	e07d      	b.n	1a802 <AddModifyRecordMiddle+0x3aa>
   1a706:	2318      	movs	r3, #24
   1a708:	62bb      	str	r3, [r7, #40]	; 0x28
   1a70a:	e07b      	b.n	1a804 <AddModifyRecordMiddle+0x3ac>
   1a70c:	687b      	ldr	r3, [r7, #4]
   1a70e:	2b01      	cmp	r3, #1
   1a710:	d102      	bne.n	1a718 <AddModifyRecordMiddle+0x2c0>
   1a712:	693b      	ldr	r3, [r7, #16]
   1a714:	627b      	str	r3, [r7, #36]	; 0x24
   1a716:	e001      	b.n	1a71c <AddModifyRecordMiddle+0x2c4>
   1a718:	2300      	movs	r3, #0
   1a71a:	627b      	str	r3, [r7, #36]	; 0x24
   1a71c:	693a      	ldr	r2, [r7, #16]
   1a71e:	68fb      	ldr	r3, [r7, #12]
   1a720:	fb02 f303 	mul.w	r3, r2, r3
   1a724:	633b      	str	r3, [r7, #48]	; 0x30
   1a726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a72a:	429a      	cmp	r2, r3
   1a72c:	dc6a      	bgt.n	1a804 <AddModifyRecordMiddle+0x3ac>
   1a72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a730:	2b00      	cmp	r3, #0
   1a732:	db67      	blt.n	1a804 <AddModifyRecordMiddle+0x3ac>
   1a734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1a736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a738:	1ad2      	subs	r2, r2, r3
   1a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a73c:	1ad3      	subs	r3, r2, r3
   1a73e:	2b00      	cmp	r3, #0
   1a740:	db60      	blt.n	1a804 <AddModifyRecordMiddle+0x3ac>
   1a742:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1a744:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1a746:	2201      	movs	r2, #1
   1a748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a74a:	f006 fa7d 	bl	20c48 <FS_write>
   1a74e:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a752:	2b01      	cmp	r3, #1
   1a754:	d005      	beq.n	1a762 <AddModifyRecordMiddle+0x30a>
   1a756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a758:	2b00      	cmp	r3, #0
   1a75a:	d10a      	bne.n	1a772 <AddModifyRecordMiddle+0x31a>
   1a75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a75e:	2b00      	cmp	r3, #0
   1a760:	d107      	bne.n	1a772 <AddModifyRecordMiddle+0x31a>
   1a762:	693b      	ldr	r3, [r7, #16]
   1a764:	6978      	ldr	r0, [r7, #20]
   1a766:	4619      	mov	r1, r3
   1a768:	2201      	movs	r2, #1
   1a76a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a76c:	f006 fa6c 	bl	20c48 <FS_write>
   1a770:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a774:	2b01      	cmp	r3, #1
   1a776:	d005      	beq.n	1a784 <AddModifyRecordMiddle+0x32c>
   1a778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a77a:	2b00      	cmp	r3, #0
   1a77c:	d113      	bne.n	1a7a6 <AddModifyRecordMiddle+0x34e>
   1a77e:	693b      	ldr	r3, [r7, #16]
   1a780:	2b00      	cmp	r3, #0
   1a782:	d110      	bne.n	1a7a6 <AddModifyRecordMiddle+0x34e>
   1a784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a788:	18d3      	adds	r3, r2, r3
   1a78a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a78c:	18d2      	adds	r2, r2, r3
   1a78e:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1a790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a792:	1ac9      	subs	r1, r1, r3
   1a794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a796:	1acb      	subs	r3, r1, r3
   1a798:	4610      	mov	r0, r2
   1a79a:	4619      	mov	r1, r3
   1a79c:	2201      	movs	r2, #1
   1a79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a7a0:	f006 fa52 	bl	20c48 <FS_write>
   1a7a4:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a7a8:	2b01      	cmp	r3, #1
   1a7aa:	d008      	beq.n	1a7be <AddModifyRecordMiddle+0x366>
   1a7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a7ae:	2b00      	cmp	r3, #0
   1a7b0:	d128      	bne.n	1a804 <AddModifyRecordMiddle+0x3ac>
   1a7b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1a7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a7b6:	1ad2      	subs	r2, r2, r3
   1a7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a7ba:	429a      	cmp	r2, r3
   1a7bc:	d122      	bne.n	1a804 <AddModifyRecordMiddle+0x3ac>
   1a7be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a7c0:	f006 f864 	bl	2088c <FS_close>
   1a7c4:	2300      	movs	r3, #0
   1a7c6:	63bb      	str	r3, [r7, #56]	; 0x38
   1a7c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1a7cc:	4618      	mov	r0, r3
   1a7ce:	f006 f9e3 	bl	20b98 <FS_unlink>
   1a7d2:	64b8      	str	r0, [r7, #72]	; 0x48
   1a7d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a7d6:	2b02      	cmp	r3, #2
   1a7d8:	d114      	bne.n	1a804 <AddModifyRecordMiddle+0x3ac>
   1a7da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1a7dc:	f006 f856 	bl	2088c <FS_close>
   1a7e0:	2300      	movs	r3, #0
   1a7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   1a7e4:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1a7e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1a7ec:	4610      	mov	r0, r2
   1a7ee:	4619      	mov	r1, r3
   1a7f0:	f006 f97e 	bl	20af0 <FS_rename>
   1a7f4:	64b8      	str	r0, [r7, #72]	; 0x48
   1a7f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a7f8:	2b02      	cmp	r3, #2
   1a7fa:	d103      	bne.n	1a804 <AddModifyRecordMiddle+0x3ac>
   1a7fc:	230a      	movs	r3, #10
   1a7fe:	62bb      	str	r3, [r7, #40]	; 0x28
   1a800:	e000      	b.n	1a804 <AddModifyRecordMiddle+0x3ac>
   1a802:	bf00      	nop
   1a804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a806:	2b00      	cmp	r3, #0
   1a808:	d007      	beq.n	1a81a <AddModifyRecordMiddle+0x3c2>
   1a80a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1a80c:	f006 f83e 	bl	2088c <FS_close>
   1a810:	2300      	movs	r3, #0
   1a812:	63fb      	str	r3, [r7, #60]	; 0x3c
   1a814:	e001      	b.n	1a81a <AddModifyRecordMiddle+0x3c2>
   1a816:	2318      	movs	r3, #24
   1a818:	62bb      	str	r3, [r7, #40]	; 0x28
   1a81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a81c:	2b00      	cmp	r3, #0
   1a81e:	d004      	beq.n	1a82a <AddModifyRecordMiddle+0x3d2>
   1a820:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a822:	f006 f833 	bl	2088c <FS_close>
   1a826:	2300      	movs	r3, #0
   1a828:	63bb      	str	r3, [r7, #56]	; 0x38
   1a82a:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1a82c:	f006 fac0 	bl	20db0 <PageFree>
   1a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a832:	4618      	mov	r0, r3
   1a834:	4b07      	ldr	r3, [pc, #28]	; (1a854 <AddModifyRecordMiddle+0x3fc>)
   1a836:	58e3      	ldr	r3, [r4, r3]
   1a838:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   1a83c:	681b      	ldr	r3, [r3, #0]
   1a83e:	429a      	cmp	r2, r3
   1a840:	d001      	beq.n	1a846 <AddModifyRecordMiddle+0x3ee>
   1a842:	f7ee fbaf 	bl	8fa4 <__stack_chk_fail>
   1a846:	f107 079c 	add.w	r7, r7, #156	; 0x9c
   1a84a:	46bd      	mov	sp, r7
   1a84c:	bd90      	pop	{r4, r7, pc}
   1a84e:	bf00      	nop
   1a850:	00014c9a 	.word	0x00014c9a
   1a854:	000000ac 	.word	0x000000ac
   1a858:	0000bdd6 	.word	0x0000bdd6
   1a85c:	0000bdda 	.word	0x0000bdda
   1a860:	0000bd8a 	.word	0x0000bd8a
   1a864:	0000bd9e 	.word	0x0000bd9e
   1a868:	0000bd6c 	.word	0x0000bd6c
   1a86c:	000000c0 	.word	0x000000c0

0001a870 <AddModifyRecordMiddleWithCkecksum>:
   1a870:	b590      	push	{r4, r7, lr}
   1a872:	b0c1      	sub	sp, #260	; 0x104
   1a874:	af00      	add	r7, sp, #0
   1a876:	61f8      	str	r0, [r7, #28]
   1a878:	61b9      	str	r1, [r7, #24]
   1a87a:	617a      	str	r2, [r7, #20]
   1a87c:	613b      	str	r3, [r7, #16]
   1a87e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
   1a882:	60fb      	str	r3, [r7, #12]
   1a884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   1a888:	60bb      	str	r3, [r7, #8]
   1a88a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   1a88e:	607b      	str	r3, [r7, #4]
   1a890:	f8df 44ec 	ldr.w	r4, [pc, #1260]	; 1ad80 <AddModifyRecordMiddleWithCkecksum+0x510>
   1a894:	447c      	add	r4, pc
   1a896:	f8df 34ec 	ldr.w	r3, [pc, #1260]	; 1ad84 <AddModifyRecordMiddleWithCkecksum+0x514>
   1a89a:	58e3      	ldr	r3, [r4, r3]
   1a89c:	681b      	ldr	r3, [r3, #0]
   1a89e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   1a8a2:	2318      	movs	r3, #24
   1a8a4:	62bb      	str	r3, [r7, #40]	; 0x28
   1a8a6:	2300      	movs	r3, #0
   1a8a8:	643b      	str	r3, [r7, #64]	; 0x40
   1a8aa:	2300      	movs	r3, #0
   1a8ac:	63bb      	str	r3, [r7, #56]	; 0x38
   1a8ae:	2300      	movs	r3, #0
   1a8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   1a8b2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
   1a8b6:	4618      	mov	r0, r3
   1a8b8:	f8df 34cc 	ldr.w	r3, [pc, #1228]	; 1ad88 <AddModifyRecordMiddleWithCkecksum+0x518>
   1a8bc:	447b      	add	r3, pc
   1a8be:	4619      	mov	r1, r3
   1a8c0:	69fa      	ldr	r2, [r7, #28]
   1a8c2:	69bb      	ldr	r3, [r7, #24]
   1a8c4:	f7ee e9f6 	blx	8cb4 <_init+0x154>
   1a8c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
   1a8cc:	4618      	mov	r0, r3
   1a8ce:	f8df 34bc 	ldr.w	r3, [pc, #1212]	; 1ad8c <AddModifyRecordMiddleWithCkecksum+0x51c>
   1a8d2:	447b      	add	r3, pc
   1a8d4:	4619      	mov	r1, r3
   1a8d6:	f006 f8b5 	bl	20a44 <FS_open>
   1a8da:	63b8      	str	r0, [r7, #56]	; 0x38
   1a8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a8de:	2b00      	cmp	r3, #0
   1a8e0:	d102      	bne.n	1a8e8 <AddModifyRecordMiddleWithCkecksum+0x78>
   1a8e2:	2313      	movs	r3, #19
   1a8e4:	62bb      	str	r3, [r7, #40]	; 0x28
   1a8e6:	e23b      	b.n	1ad60 <AddModifyRecordMiddleWithCkecksum+0x4f0>
   1a8e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a8ea:	f006 f855 	bl	20998 <FS_length>
   1a8ee:	6478      	str	r0, [r7, #68]	; 0x44
   1a8f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a8f2:	4618      	mov	r0, r3
   1a8f4:	f006 fa32 	bl	20d5c <PageAlloc>
   1a8f8:	6438      	str	r0, [r7, #64]	; 0x40
   1a8fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a8fc:	2b00      	cmp	r3, #0
   1a8fe:	f000 8222 	beq.w	1ad46 <AddModifyRecordMiddleWithCkecksum+0x4d6>
   1a902:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
   1a906:	4618      	mov	r0, r3
   1a908:	f8df 3484 	ldr.w	r3, [pc, #1156]	; 1ad90 <AddModifyRecordMiddleWithCkecksum+0x520>
   1a90c:	447b      	add	r3, pc
   1a90e:	4619      	mov	r1, r3
   1a910:	69fa      	ldr	r2, [r7, #28]
   1a912:	f8df 3480 	ldr.w	r3, [pc, #1152]	; 1ad94 <AddModifyRecordMiddleWithCkecksum+0x524>
   1a916:	447b      	add	r3, pc
   1a918:	f7ee e9cc 	blx	8cb4 <_init+0x154>
   1a91c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
   1a920:	4618      	mov	r0, r3
   1a922:	f006 f80d 	bl	20940 <FS_exist>
   1a926:	64b8      	str	r0, [r7, #72]	; 0x48
   1a928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a92a:	2b02      	cmp	r3, #2
   1a92c:	d104      	bne.n	1a938 <AddModifyRecordMiddleWithCkecksum+0xc8>
   1a92e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
   1a932:	4618      	mov	r0, r3
   1a934:	f006 f930 	bl	20b98 <FS_unlink>
   1a938:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
   1a93c:	4618      	mov	r0, r3
   1a93e:	f8df 3458 	ldr.w	r3, [pc, #1112]	; 1ad98 <AddModifyRecordMiddleWithCkecksum+0x528>
   1a942:	447b      	add	r3, pc
   1a944:	4619      	mov	r1, r3
   1a946:	f006 f87d 	bl	20a44 <FS_open>
   1a94a:	63f8      	str	r0, [r7, #60]	; 0x3c
   1a94c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1a94e:	2100      	movs	r1, #0
   1a950:	2200      	movs	r2, #0
   1a952:	f006 f8f7 	bl	20b44 <FS_seek>
   1a956:	64b8      	str	r0, [r7, #72]	; 0x48
   1a958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1a95a:	2b02      	cmp	r3, #2
   1a95c:	f040 81ea 	bne.w	1ad34 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1a960:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1a962:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1a964:	2201      	movs	r2, #1
   1a966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a968:	f006 f896 	bl	20a98 <FS_read>
   1a96c:	62f8      	str	r0, [r7, #44]	; 0x2c
   1a96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a970:	2b01      	cmp	r3, #1
   1a972:	d007      	beq.n	1a984 <AddModifyRecordMiddleWithCkecksum+0x114>
   1a974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a976:	2b00      	cmp	r3, #0
   1a978:	f040 81dc 	bne.w	1ad34 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1a97c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a97e:	2b00      	cmp	r3, #0
   1a980:	f040 81d8 	bne.w	1ad34 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1a984:	f8df 3414 	ldr.w	r3, [pc, #1044]	; 1ad9c <AddModifyRecordMiddleWithCkecksum+0x52c>
   1a988:	58e3      	ldr	r3, [r4, r3]
   1a98a:	461a      	mov	r2, r3
   1a98c:	68bb      	ldr	r3, [r7, #8]
   1a98e:	212c      	movs	r1, #44	; 0x2c
   1a990:	fb01 f303 	mul.w	r3, r1, r3
   1a994:	18d3      	adds	r3, r2, r3
   1a996:	3328      	adds	r3, #40	; 0x28
   1a998:	681b      	ldr	r3, [r3, #0]
   1a99a:	2b01      	cmp	r3, #1
   1a99c:	f040 810c 	bne.w	1abb8 <AddModifyRecordMiddleWithCkecksum+0x348>
   1a9a0:	2300      	movs	r3, #0
   1a9a2:	633b      	str	r3, [r7, #48]	; 0x30
   1a9a4:	2300      	movs	r3, #0
   1a9a6:	637b      	str	r3, [r7, #52]	; 0x34
   1a9a8:	e01d      	b.n	1a9e6 <AddModifyRecordMiddleWithCkecksum+0x176>
   1a9aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a9ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a9ae:	429a      	cmp	r2, r3
   1a9b0:	da13      	bge.n	1a9da <AddModifyRecordMiddleWithCkecksum+0x16a>
   1a9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a9b4:	2b00      	cmp	r3, #0
   1a9b6:	db10      	blt.n	1a9da <AddModifyRecordMiddleWithCkecksum+0x16a>
   1a9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a9ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1a9bc:	18d3      	adds	r3, r2, r3
   1a9be:	f107 0220 	add.w	r2, r7, #32
   1a9c2:	4610      	mov	r0, r2
   1a9c4:	4619      	mov	r1, r3
   1a9c6:	2204      	movs	r2, #4
   1a9c8:	f7ee e956 	blx	8c78 <_init+0x118>
   1a9cc:	6a3b      	ldr	r3, [r7, #32]
   1a9ce:	461a      	mov	r2, r3
   1a9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a9d2:	18d3      	adds	r3, r2, r3
   1a9d4:	3304      	adds	r3, #4
   1a9d6:	633b      	str	r3, [r7, #48]	; 0x30
   1a9d8:	e002      	b.n	1a9e0 <AddModifyRecordMiddleWithCkecksum+0x170>
   1a9da:	f04f 33ff 	mov.w	r3, #4294967295
   1a9de:	633b      	str	r3, [r7, #48]	; 0x30
   1a9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a9e2:	3301      	adds	r3, #1
   1a9e4:	637b      	str	r3, [r7, #52]	; 0x34
   1a9e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1a9e8:	68fb      	ldr	r3, [r7, #12]
   1a9ea:	429a      	cmp	r2, r3
   1a9ec:	da02      	bge.n	1a9f4 <AddModifyRecordMiddleWithCkecksum+0x184>
   1a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a9f0:	2b00      	cmp	r3, #0
   1a9f2:	dada      	bge.n	1a9aa <AddModifyRecordMiddleWithCkecksum+0x13a>
   1a9f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1a9f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a9f8:	429a      	cmp	r2, r3
   1a9fa:	f300 80da 	bgt.w	1abb2 <AddModifyRecordMiddleWithCkecksum+0x342>
   1a9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1aa00:	2b00      	cmp	r3, #0
   1aa02:	f2c0 80d6 	blt.w	1abb2 <AddModifyRecordMiddleWithCkecksum+0x342>
   1aa06:	687b      	ldr	r3, [r7, #4]
   1aa08:	2b01      	cmp	r3, #1
   1aa0a:	d10d      	bne.n	1aa28 <AddModifyRecordMiddleWithCkecksum+0x1b8>
   1aa0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1aa0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1aa10:	18d3      	adds	r3, r2, r3
   1aa12:	f107 0220 	add.w	r2, r7, #32
   1aa16:	4610      	mov	r0, r2
   1aa18:	4619      	mov	r1, r3
   1aa1a:	2204      	movs	r2, #4
   1aa1c:	f7ee e92c 	blx	8c78 <_init+0x118>
   1aa20:	6a3b      	ldr	r3, [r7, #32]
   1aa22:	3304      	adds	r3, #4
   1aa24:	627b      	str	r3, [r7, #36]	; 0x24
   1aa26:	e001      	b.n	1aa2c <AddModifyRecordMiddleWithCkecksum+0x1bc>
   1aa28:	2300      	movs	r3, #0
   1aa2a:	627b      	str	r3, [r7, #36]	; 0x24
   1aa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aa2e:	2b00      	cmp	r3, #0
   1aa30:	f2c0 817f 	blt.w	1ad32 <AddModifyRecordMiddleWithCkecksum+0x4c2>
   1aa34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1aa38:	1ad3      	subs	r3, r2, r3
   1aa3a:	f1a3 0210 	sub.w	r2, r3, #16
   1aa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aa40:	1ad3      	subs	r3, r2, r3
   1aa42:	2b00      	cmp	r3, #0
   1aa44:	f2c0 8175 	blt.w	1ad32 <AddModifyRecordMiddleWithCkecksum+0x4c2>
   1aa48:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1aa4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1aa4c:	2201      	movs	r2, #1
   1aa4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1aa50:	f006 f8fa 	bl	20c48 <FS_write>
   1aa54:	62f8      	str	r0, [r7, #44]	; 0x2c
   1aa56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aa58:	2b01      	cmp	r3, #1
   1aa5a:	d005      	beq.n	1aa68 <AddModifyRecordMiddleWithCkecksum+0x1f8>
   1aa5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aa5e:	2b00      	cmp	r3, #0
   1aa60:	d10b      	bne.n	1aa7a <AddModifyRecordMiddleWithCkecksum+0x20a>
   1aa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1aa64:	2b00      	cmp	r3, #0
   1aa66:	d108      	bne.n	1aa7a <AddModifyRecordMiddleWithCkecksum+0x20a>
   1aa68:	f107 0310 	add.w	r3, r7, #16
   1aa6c:	4618      	mov	r0, r3
   1aa6e:	2104      	movs	r1, #4
   1aa70:	2201      	movs	r2, #1
   1aa72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1aa74:	f006 f8e8 	bl	20c48 <FS_write>
   1aa78:	62f8      	str	r0, [r7, #44]	; 0x2c
   1aa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aa7c:	2b01      	cmp	r3, #1
   1aa7e:	d107      	bne.n	1aa90 <AddModifyRecordMiddleWithCkecksum+0x220>
   1aa80:	693b      	ldr	r3, [r7, #16]
   1aa82:	6978      	ldr	r0, [r7, #20]
   1aa84:	4619      	mov	r1, r3
   1aa86:	2201      	movs	r2, #1
   1aa88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1aa8a:	f006 f8dd 	bl	20c48 <FS_write>
   1aa8e:	62f8      	str	r0, [r7, #44]	; 0x2c
   1aa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aa92:	2b01      	cmp	r3, #1
   1aa94:	d005      	beq.n	1aaa2 <AddModifyRecordMiddleWithCkecksum+0x232>
   1aa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aa98:	2b00      	cmp	r3, #0
   1aa9a:	d115      	bne.n	1aac8 <AddModifyRecordMiddleWithCkecksum+0x258>
   1aa9c:	693b      	ldr	r3, [r7, #16]
   1aa9e:	2b00      	cmp	r3, #0
   1aaa0:	d112      	bne.n	1aac8 <AddModifyRecordMiddleWithCkecksum+0x258>
   1aaa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aaa6:	18d3      	adds	r3, r2, r3
   1aaa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1aaaa:	18d2      	adds	r2, r2, r3
   1aaac:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1aab0:	1acb      	subs	r3, r1, r3
   1aab2:	f1a3 0110 	sub.w	r1, r3, #16
   1aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aab8:	1acb      	subs	r3, r1, r3
   1aaba:	4610      	mov	r0, r2
   1aabc:	4619      	mov	r1, r3
   1aabe:	2201      	movs	r2, #1
   1aac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1aac2:	f006 f8c1 	bl	20c48 <FS_write>
   1aac6:	62f8      	str	r0, [r7, #44]	; 0x2c
   1aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aaca:	2b01      	cmp	r3, #1
   1aacc:	d00c      	beq.n	1aae8 <AddModifyRecordMiddleWithCkecksum+0x278>
   1aace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aad0:	2b00      	cmp	r3, #0
   1aad2:	f040 812e 	bne.w	1ad32 <AddModifyRecordMiddleWithCkecksum+0x4c2>
   1aad6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1aad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1aada:	1ad3      	subs	r3, r2, r3
   1aadc:	f1a3 0210 	sub.w	r2, r3, #16
   1aae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aae2:	429a      	cmp	r2, r3
   1aae4:	f040 8125 	bne.w	1ad32 <AddModifyRecordMiddleWithCkecksum+0x4c2>
   1aae8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1aaec:	4618      	mov	r0, r3
   1aaee:	f004 fb1d 	bl	1f12c <md5_init>
   1aaf2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1aaf6:	4618      	mov	r0, r3
   1aaf8:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1aafa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1aafc:	f004 fb50 	bl	1f1a0 <md5_append>
   1ab00:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   1ab04:	f107 0310 	add.w	r3, r7, #16
   1ab08:	4610      	mov	r0, r2
   1ab0a:	4619      	mov	r1, r3
   1ab0c:	2204      	movs	r2, #4
   1ab0e:	f004 fb47 	bl	1f1a0 <md5_append>
   1ab12:	693b      	ldr	r3, [r7, #16]
   1ab14:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   1ab18:	4610      	mov	r0, r2
   1ab1a:	6979      	ldr	r1, [r7, #20]
   1ab1c:	461a      	mov	r2, r3
   1ab1e:	f004 fb3f 	bl	1f1a0 <md5_append>
   1ab22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ab26:	18d3      	adds	r3, r2, r3
   1ab28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1ab2a:	18d2      	adds	r2, r2, r3
   1ab2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1ab2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ab30:	1acb      	subs	r3, r1, r3
   1ab32:	f1a3 0110 	sub.w	r1, r3, #16
   1ab36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ab38:	1acb      	subs	r3, r1, r3
   1ab3a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
   1ab3e:	4608      	mov	r0, r1
   1ab40:	4611      	mov	r1, r2
   1ab42:	461a      	mov	r2, r3
   1ab44:	f004 fb2c 	bl	1f1a0 <md5_append>
   1ab48:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   1ab4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1ab50:	4610      	mov	r0, r2
   1ab52:	4619      	mov	r1, r3
   1ab54:	f004 fbb0 	bl	1f2b8 <md5_finish>
   1ab58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1ab5c:	4618      	mov	r0, r3
   1ab5e:	2110      	movs	r1, #16
   1ab60:	2201      	movs	r2, #1
   1ab62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ab64:	f006 f870 	bl	20c48 <FS_write>
   1ab68:	62f8      	str	r0, [r7, #44]	; 0x2c
   1ab6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1ab6c:	f005 fe8e 	bl	2088c <FS_close>
   1ab70:	2300      	movs	r3, #0
   1ab72:	63bb      	str	r3, [r7, #56]	; 0x38
   1ab74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
   1ab78:	4618      	mov	r0, r3
   1ab7a:	f006 f80d 	bl	20b98 <FS_unlink>
   1ab7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1ab80:	f005 fe84 	bl	2088c <FS_close>
   1ab84:	2300      	movs	r3, #0
   1ab86:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ab88:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
   1ab8c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
   1ab90:	4610      	mov	r0, r2
   1ab92:	4619      	mov	r1, r3
   1ab94:	f005 ffac 	bl	20af0 <FS_rename>
   1ab98:	64b8      	str	r0, [r7, #72]	; 0x48
   1ab9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1ab9c:	2b02      	cmp	r3, #2
   1ab9e:	f040 80c8 	bne.w	1ad32 <AddModifyRecordMiddleWithCkecksum+0x4c2>
   1aba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aba4:	2b01      	cmp	r3, #1
   1aba6:	f040 80c4 	bne.w	1ad32 <AddModifyRecordMiddleWithCkecksum+0x4c2>
   1abaa:	230a      	movs	r3, #10
   1abac:	62bb      	str	r3, [r7, #40]	; 0x28
   1abae:	bf00      	nop
   1abb0:	e0bf      	b.n	1ad32 <AddModifyRecordMiddleWithCkecksum+0x4c2>
   1abb2:	2318      	movs	r3, #24
   1abb4:	62bb      	str	r3, [r7, #40]	; 0x28
   1abb6:	e0bd      	b.n	1ad34 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1abb8:	687b      	ldr	r3, [r7, #4]
   1abba:	2b01      	cmp	r3, #1
   1abbc:	d102      	bne.n	1abc4 <AddModifyRecordMiddleWithCkecksum+0x354>
   1abbe:	693b      	ldr	r3, [r7, #16]
   1abc0:	627b      	str	r3, [r7, #36]	; 0x24
   1abc2:	e001      	b.n	1abc8 <AddModifyRecordMiddleWithCkecksum+0x358>
   1abc4:	2300      	movs	r3, #0
   1abc6:	627b      	str	r3, [r7, #36]	; 0x24
   1abc8:	693a      	ldr	r2, [r7, #16]
   1abca:	68fb      	ldr	r3, [r7, #12]
   1abcc:	fb02 f303 	mul.w	r3, r2, r3
   1abd0:	633b      	str	r3, [r7, #48]	; 0x30
   1abd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1abd4:	f1a3 0210 	sub.w	r2, r3, #16
   1abd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1abda:	429a      	cmp	r2, r3
   1abdc:	f2c0 80aa 	blt.w	1ad34 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1abe0:	693b      	ldr	r3, [r7, #16]
   1abe2:	2b00      	cmp	r3, #0
   1abe4:	f2c0 80a6 	blt.w	1ad34 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1abe8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1abea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1abec:	1ad3      	subs	r3, r2, r3
   1abee:	f1a3 0210 	sub.w	r2, r3, #16
   1abf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1abf4:	1ad3      	subs	r3, r2, r3
   1abf6:	2b00      	cmp	r3, #0
   1abf8:	f2c0 809c 	blt.w	1ad34 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1abfc:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1abfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1ac00:	2201      	movs	r2, #1
   1ac02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ac04:	f006 f820 	bl	20c48 <FS_write>
   1ac08:	62f8      	str	r0, [r7, #44]	; 0x2c
   1ac0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ac0c:	2b01      	cmp	r3, #1
   1ac0e:	d005      	beq.n	1ac1c <AddModifyRecordMiddleWithCkecksum+0x3ac>
   1ac10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ac12:	2b00      	cmp	r3, #0
   1ac14:	d10a      	bne.n	1ac2c <AddModifyRecordMiddleWithCkecksum+0x3bc>
   1ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ac18:	2b00      	cmp	r3, #0
   1ac1a:	d107      	bne.n	1ac2c <AddModifyRecordMiddleWithCkecksum+0x3bc>
   1ac1c:	693b      	ldr	r3, [r7, #16]
   1ac1e:	6978      	ldr	r0, [r7, #20]
   1ac20:	4619      	mov	r1, r3
   1ac22:	2201      	movs	r2, #1
   1ac24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ac26:	f006 f80f 	bl	20c48 <FS_write>
   1ac2a:	62f8      	str	r0, [r7, #44]	; 0x2c
   1ac2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ac2e:	2b01      	cmp	r3, #1
   1ac30:	d005      	beq.n	1ac3e <AddModifyRecordMiddleWithCkecksum+0x3ce>
   1ac32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ac34:	2b00      	cmp	r3, #0
   1ac36:	d115      	bne.n	1ac64 <AddModifyRecordMiddleWithCkecksum+0x3f4>
   1ac38:	693b      	ldr	r3, [r7, #16]
   1ac3a:	2b00      	cmp	r3, #0
   1ac3c:	d112      	bne.n	1ac64 <AddModifyRecordMiddleWithCkecksum+0x3f4>
   1ac3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ac40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ac42:	18d3      	adds	r3, r2, r3
   1ac44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1ac46:	18d2      	adds	r2, r2, r3
   1ac48:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ac4c:	1acb      	subs	r3, r1, r3
   1ac4e:	f1a3 0110 	sub.w	r1, r3, #16
   1ac52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ac54:	1acb      	subs	r3, r1, r3
   1ac56:	4610      	mov	r0, r2
   1ac58:	4619      	mov	r1, r3
   1ac5a:	2201      	movs	r2, #1
   1ac5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ac5e:	f005 fff3 	bl	20c48 <FS_write>
   1ac62:	62f8      	str	r0, [r7, #44]	; 0x2c
   1ac64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ac66:	2b01      	cmp	r3, #1
   1ac68:	d00a      	beq.n	1ac80 <AddModifyRecordMiddleWithCkecksum+0x410>
   1ac6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ac6c:	2b00      	cmp	r3, #0
   1ac6e:	d161      	bne.n	1ad34 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1ac70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1ac72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ac74:	1ad3      	subs	r3, r2, r3
   1ac76:	f1a3 0210 	sub.w	r2, r3, #16
   1ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ac7c:	429a      	cmp	r2, r3
   1ac7e:	d159      	bne.n	1ad34 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1ac80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1ac84:	4618      	mov	r0, r3
   1ac86:	f004 fa51 	bl	1f12c <md5_init>
   1ac8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1ac8e:	4618      	mov	r0, r3
   1ac90:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1ac92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1ac94:	f004 fa84 	bl	1f1a0 <md5_append>
   1ac98:	693b      	ldr	r3, [r7, #16]
   1ac9a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   1ac9e:	4610      	mov	r0, r2
   1aca0:	6979      	ldr	r1, [r7, #20]
   1aca2:	461a      	mov	r2, r3
   1aca4:	f004 fa7c 	bl	1f1a0 <md5_append>
   1aca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1acaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1acac:	18d3      	adds	r3, r2, r3
   1acae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1acb0:	18d2      	adds	r2, r2, r3
   1acb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1acb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1acb6:	1acb      	subs	r3, r1, r3
   1acb8:	f1a3 0110 	sub.w	r1, r3, #16
   1acbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1acbe:	1acb      	subs	r3, r1, r3
   1acc0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
   1acc4:	4608      	mov	r0, r1
   1acc6:	4611      	mov	r1, r2
   1acc8:	461a      	mov	r2, r3
   1acca:	f004 fa69 	bl	1f1a0 <md5_append>
   1acce:	f107 024c 	add.w	r2, r7, #76	; 0x4c
   1acd2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1acd6:	4610      	mov	r0, r2
   1acd8:	4619      	mov	r1, r3
   1acda:	f004 faed 	bl	1f2b8 <md5_finish>
   1acde:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1ace2:	4618      	mov	r0, r3
   1ace4:	2110      	movs	r1, #16
   1ace6:	2201      	movs	r2, #1
   1ace8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1acea:	f005 ffad 	bl	20c48 <FS_write>
   1acee:	62f8      	str	r0, [r7, #44]	; 0x2c
   1acf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1acf2:	f005 fdcb 	bl	2088c <FS_close>
   1acf6:	2300      	movs	r3, #0
   1acf8:	63bb      	str	r3, [r7, #56]	; 0x38
   1acfa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
   1acfe:	4618      	mov	r0, r3
   1ad00:	f005 ff4a 	bl	20b98 <FS_unlink>
   1ad04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1ad06:	f005 fdc1 	bl	2088c <FS_close>
   1ad0a:	2300      	movs	r3, #0
   1ad0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ad0e:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
   1ad12:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
   1ad16:	4610      	mov	r0, r2
   1ad18:	4619      	mov	r1, r3
   1ad1a:	f005 fee9 	bl	20af0 <FS_rename>
   1ad1e:	64b8      	str	r0, [r7, #72]	; 0x48
   1ad20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1ad22:	2b02      	cmp	r3, #2
   1ad24:	d106      	bne.n	1ad34 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1ad26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ad28:	2b01      	cmp	r3, #1
   1ad2a:	d103      	bne.n	1ad34 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1ad2c:	230a      	movs	r3, #10
   1ad2e:	62bb      	str	r3, [r7, #40]	; 0x28
   1ad30:	e000      	b.n	1ad34 <AddModifyRecordMiddleWithCkecksum+0x4c4>
   1ad32:	bf00      	nop
   1ad34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ad36:	2b00      	cmp	r3, #0
   1ad38:	d007      	beq.n	1ad4a <AddModifyRecordMiddleWithCkecksum+0x4da>
   1ad3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1ad3c:	f005 fda6 	bl	2088c <FS_close>
   1ad40:	2300      	movs	r3, #0
   1ad42:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ad44:	e001      	b.n	1ad4a <AddModifyRecordMiddleWithCkecksum+0x4da>
   1ad46:	2318      	movs	r3, #24
   1ad48:	62bb      	str	r3, [r7, #40]	; 0x28
   1ad4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ad4c:	2b00      	cmp	r3, #0
   1ad4e:	d004      	beq.n	1ad5a <AddModifyRecordMiddleWithCkecksum+0x4ea>
   1ad50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1ad52:	f005 fd9b 	bl	2088c <FS_close>
   1ad56:	2300      	movs	r3, #0
   1ad58:	63bb      	str	r3, [r7, #56]	; 0x38
   1ad5a:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1ad5c:	f006 f828 	bl	20db0 <PageFree>
   1ad60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ad62:	4618      	mov	r0, r3
   1ad64:	4b07      	ldr	r3, [pc, #28]	; (1ad84 <AddModifyRecordMiddleWithCkecksum+0x514>)
   1ad66:	58e3      	ldr	r3, [r4, r3]
   1ad68:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
   1ad6c:	681b      	ldr	r3, [r3, #0]
   1ad6e:	429a      	cmp	r2, r3
   1ad70:	d001      	beq.n	1ad76 <AddModifyRecordMiddleWithCkecksum+0x506>
   1ad72:	f7ee f917 	bl	8fa4 <__stack_chk_fail>
   1ad76:	f507 7782 	add.w	r7, r7, #260	; 0x104
   1ad7a:	46bd      	mov	sp, r7
   1ad7c:	bd90      	pop	{r4, r7, pc}
   1ad7e:	bf00      	nop
   1ad80:	00014880 	.word	0x00014880
   1ad84:	000000ac 	.word	0x000000ac
   1ad88:	0000b9b8 	.word	0x0000b9b8
   1ad8c:	0000b9ba 	.word	0x0000b9ba
   1ad90:	0000b968 	.word	0x0000b968
   1ad94:	0000b97a 	.word	0x0000b97a
   1ad98:	0000b946 	.word	0x0000b946
   1ad9c:	000000c0 	.word	0x000000c0

0001ada0 <AddModifyRecordEnd>:
   1ada0:	b590      	push	{r4, r7, lr}
   1ada2:	b0a5      	sub	sp, #148	; 0x94
   1ada4:	af00      	add	r7, sp, #0
   1ada6:	6178      	str	r0, [r7, #20]
   1ada8:	6139      	str	r1, [r7, #16]
   1adaa:	60fa      	str	r2, [r7, #12]
   1adac:	60bb      	str	r3, [r7, #8]
   1adae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   1adb2:	607b      	str	r3, [r7, #4]
   1adb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   1adb8:	603b      	str	r3, [r7, #0]
   1adba:	f8df 446c 	ldr.w	r4, [pc, #1132]	; 1b228 <AddModifyRecordEnd+0x488>
   1adbe:	447c      	add	r4, pc
   1adc0:	f8df 3468 	ldr.w	r3, [pc, #1128]	; 1b22c <AddModifyRecordEnd+0x48c>
   1adc4:	58e3      	ldr	r3, [r4, r3]
   1adc6:	681b      	ldr	r3, [r3, #0]
   1adc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   1adcc:	2300      	movs	r3, #0
   1adce:	61fb      	str	r3, [r7, #28]
   1add0:	2318      	movs	r3, #24
   1add2:	623b      	str	r3, [r7, #32]
   1add4:	2300      	movs	r3, #0
   1add6:	637b      	str	r3, [r7, #52]	; 0x34
   1add8:	2300      	movs	r3, #0
   1adda:	62fb      	str	r3, [r7, #44]	; 0x2c
   1addc:	2300      	movs	r3, #0
   1adde:	633b      	str	r3, [r7, #48]	; 0x30
   1ade0:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1ade4:	4618      	mov	r0, r3
   1ade6:	f8df 3448 	ldr.w	r3, [pc, #1096]	; 1b230 <AddModifyRecordEnd+0x490>
   1adea:	447b      	add	r3, pc
   1adec:	4619      	mov	r1, r3
   1adee:	697a      	ldr	r2, [r7, #20]
   1adf0:	693b      	ldr	r3, [r7, #16]
   1adf2:	f7ed ef60 	blx	8cb4 <_init+0x154>
   1adf6:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1adfa:	4618      	mov	r0, r3
   1adfc:	f8df 3434 	ldr.w	r3, [pc, #1076]	; 1b234 <AddModifyRecordEnd+0x494>
   1ae00:	447b      	add	r3, pc
   1ae02:	4619      	mov	r1, r3
   1ae04:	f005 fe1e 	bl	20a44 <FS_open>
   1ae08:	62f8      	str	r0, [r7, #44]	; 0x2c
   1ae0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ae0c:	2b00      	cmp	r3, #0
   1ae0e:	d102      	bne.n	1ae16 <AddModifyRecordEnd+0x76>
   1ae10:	2313      	movs	r3, #19
   1ae12:	623b      	str	r3, [r7, #32]
   1ae14:	e1f8      	b.n	1b208 <AddModifyRecordEnd+0x468>
   1ae16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1ae18:	f005 fdbe 	bl	20998 <FS_length>
   1ae1c:	63b8      	str	r0, [r7, #56]	; 0x38
   1ae1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1ae20:	2100      	movs	r1, #0
   1ae22:	2200      	movs	r2, #0
   1ae24:	f005 fe8e 	bl	20b44 <FS_seek>
   1ae28:	63f8      	str	r0, [r7, #60]	; 0x3c
   1ae2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ae2c:	2b02      	cmp	r3, #2
   1ae2e:	f040 81e3 	bne.w	1b1f8 <AddModifyRecordEnd+0x458>
   1ae32:	f8df 3404 	ldr.w	r3, [pc, #1028]	; 1b238 <AddModifyRecordEnd+0x498>
   1ae36:	58e3      	ldr	r3, [r4, r3]
   1ae38:	461a      	mov	r2, r3
   1ae3a:	687b      	ldr	r3, [r7, #4]
   1ae3c:	212c      	movs	r1, #44	; 0x2c
   1ae3e:	fb01 f303 	mul.w	r3, r1, r3
   1ae42:	18d3      	adds	r3, r2, r3
   1ae44:	3328      	adds	r3, #40	; 0x28
   1ae46:	681b      	ldr	r3, [r3, #0]
   1ae48:	2b01      	cmp	r3, #1
   1ae4a:	f040 8100 	bne.w	1b04e <AddModifyRecordEnd+0x2ae>
   1ae4e:	683b      	ldr	r3, [r7, #0]
   1ae50:	2b01      	cmp	r3, #1
   1ae52:	f040 80c6 	bne.w	1afe2 <AddModifyRecordEnd+0x242>
   1ae56:	2300      	movs	r3, #0
   1ae58:	62bb      	str	r3, [r7, #40]	; 0x28
   1ae5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ae5c:	4618      	mov	r0, r3
   1ae5e:	f005 ff7d 	bl	20d5c <PageAlloc>
   1ae62:	6378      	str	r0, [r7, #52]	; 0x34
   1ae64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ae66:	2b00      	cmp	r3, #0
   1ae68:	f000 80b7 	beq.w	1afda <AddModifyRecordEnd+0x23a>
   1ae6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1ae6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1ae70:	2201      	movs	r2, #1
   1ae72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ae74:	f005 fe10 	bl	20a98 <FS_read>
   1ae78:	6278      	str	r0, [r7, #36]	; 0x24
   1ae7a:	e00f      	b.n	1ae9c <AddModifyRecordEnd+0xfc>
   1ae7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ae7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1ae80:	18d3      	adds	r3, r2, r3
   1ae82:	f107 021c 	add.w	r2, r7, #28
   1ae86:	4610      	mov	r0, r2
   1ae88:	4619      	mov	r1, r3
   1ae8a:	2204      	movs	r2, #4
   1ae8c:	f7ed eef4 	blx	8c78 <_init+0x118>
   1ae90:	69fb      	ldr	r3, [r7, #28]
   1ae92:	461a      	mov	r2, r3
   1ae94:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ae96:	18d3      	adds	r3, r2, r3
   1ae98:	3304      	adds	r3, #4
   1ae9a:	62bb      	str	r3, [r7, #40]	; 0x28
   1ae9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ae9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1aea0:	429a      	cmp	r2, r3
   1aea2:	dbeb      	blt.n	1ae7c <AddModifyRecordEnd+0xdc>
   1aea4:	69fb      	ldr	r3, [r7, #28]
   1aea6:	3304      	adds	r3, #4
   1aea8:	643b      	str	r3, [r7, #64]	; 0x40
   1aeaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1aeac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1aeae:	1ad3      	subs	r3, r2, r3
   1aeb0:	2b00      	cmp	r3, #0
   1aeb2:	f2c0 8092 	blt.w	1afda <AddModifyRecordEnd+0x23a>
   1aeb6:	68bb      	ldr	r3, [r7, #8]
   1aeb8:	2b00      	cmp	r3, #0
   1aeba:	f2c0 808e 	blt.w	1afda <AddModifyRecordEnd+0x23a>
   1aebe:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1aec2:	4618      	mov	r0, r3
   1aec4:	4bdd      	ldr	r3, [pc, #884]	; (1b23c <AddModifyRecordEnd+0x49c>)
   1aec6:	447b      	add	r3, pc
   1aec8:	4619      	mov	r1, r3
   1aeca:	697a      	ldr	r2, [r7, #20]
   1aecc:	4bdc      	ldr	r3, [pc, #880]	; (1b240 <AddModifyRecordEnd+0x4a0>)
   1aece:	447b      	add	r3, pc
   1aed0:	f7ed eef0 	blx	8cb4 <_init+0x154>
   1aed4:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1aed8:	4618      	mov	r0, r3
   1aeda:	f005 fd31 	bl	20940 <FS_exist>
   1aede:	63f8      	str	r0, [r7, #60]	; 0x3c
   1aee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1aee2:	2b02      	cmp	r3, #2
   1aee4:	d104      	bne.n	1aef0 <AddModifyRecordEnd+0x150>
   1aee6:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1aeea:	4618      	mov	r0, r3
   1aeec:	f005 fe54 	bl	20b98 <FS_unlink>
   1aef0:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1aef4:	4618      	mov	r0, r3
   1aef6:	4bd3      	ldr	r3, [pc, #844]	; (1b244 <AddModifyRecordEnd+0x4a4>)
   1aef8:	447b      	add	r3, pc
   1aefa:	4619      	mov	r1, r3
   1aefc:	f005 fda2 	bl	20a44 <FS_open>
   1af00:	6338      	str	r0, [r7, #48]	; 0x30
   1af02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1af04:	2100      	movs	r1, #0
   1af06:	2200      	movs	r2, #0
   1af08:	f005 fe1c 	bl	20b44 <FS_seek>
   1af0c:	63f8      	str	r0, [r7, #60]	; 0x3c
   1af0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1af10:	2b02      	cmp	r3, #2
   1af12:	d15a      	bne.n	1afca <AddModifyRecordEnd+0x22a>
   1af14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1af16:	2b01      	cmp	r3, #1
   1af18:	d005      	beq.n	1af26 <AddModifyRecordEnd+0x186>
   1af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1af1c:	2b00      	cmp	r3, #0
   1af1e:	d154      	bne.n	1afca <AddModifyRecordEnd+0x22a>
   1af20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1af22:	2b00      	cmp	r3, #0
   1af24:	d151      	bne.n	1afca <AddModifyRecordEnd+0x22a>
   1af26:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1af28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1af2a:	1ad3      	subs	r3, r2, r3
   1af2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1af2e:	4619      	mov	r1, r3
   1af30:	2201      	movs	r2, #1
   1af32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1af34:	f005 fe88 	bl	20c48 <FS_write>
   1af38:	6278      	str	r0, [r7, #36]	; 0x24
   1af3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1af3c:	2b01      	cmp	r3, #1
   1af3e:	d006      	beq.n	1af4e <AddModifyRecordEnd+0x1ae>
   1af40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1af42:	2b00      	cmp	r3, #0
   1af44:	d10c      	bne.n	1af60 <AddModifyRecordEnd+0x1c0>
   1af46:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1af48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1af4a:	429a      	cmp	r2, r3
   1af4c:	d108      	bne.n	1af60 <AddModifyRecordEnd+0x1c0>
   1af4e:	f107 0308 	add.w	r3, r7, #8
   1af52:	4618      	mov	r0, r3
   1af54:	2104      	movs	r1, #4
   1af56:	2201      	movs	r2, #1
   1af58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1af5a:	f005 fe75 	bl	20c48 <FS_write>
   1af5e:	6278      	str	r0, [r7, #36]	; 0x24
   1af60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1af62:	2b01      	cmp	r3, #1
   1af64:	d107      	bne.n	1af76 <AddModifyRecordEnd+0x1d6>
   1af66:	68bb      	ldr	r3, [r7, #8]
   1af68:	68f8      	ldr	r0, [r7, #12]
   1af6a:	4619      	mov	r1, r3
   1af6c:	2201      	movs	r2, #1
   1af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1af70:	f005 fe6a 	bl	20c48 <FS_write>
   1af74:	6278      	str	r0, [r7, #36]	; 0x24
   1af76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1af78:	2b01      	cmp	r3, #1
   1af7a:	d005      	beq.n	1af88 <AddModifyRecordEnd+0x1e8>
   1af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1af7e:	2b00      	cmp	r3, #0
   1af80:	d123      	bne.n	1afca <AddModifyRecordEnd+0x22a>
   1af82:	68bb      	ldr	r3, [r7, #8]
   1af84:	2b00      	cmp	r3, #0
   1af86:	d120      	bne.n	1afca <AddModifyRecordEnd+0x22a>
   1af88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1af8a:	f005 fc7f 	bl	2088c <FS_close>
   1af8e:	2300      	movs	r3, #0
   1af90:	62fb      	str	r3, [r7, #44]	; 0x2c
   1af92:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1af96:	4618      	mov	r0, r3
   1af98:	f005 fdfe 	bl	20b98 <FS_unlink>
   1af9c:	63f8      	str	r0, [r7, #60]	; 0x3c
   1af9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1afa0:	2b02      	cmp	r3, #2
   1afa2:	d112      	bne.n	1afca <AddModifyRecordEnd+0x22a>
   1afa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1afa6:	f005 fc71 	bl	2088c <FS_close>
   1afaa:	2300      	movs	r3, #0
   1afac:	633b      	str	r3, [r7, #48]	; 0x30
   1afae:	f107 0268 	add.w	r2, r7, #104	; 0x68
   1afb2:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1afb6:	4610      	mov	r0, r2
   1afb8:	4619      	mov	r1, r3
   1afba:	f005 fd99 	bl	20af0 <FS_rename>
   1afbe:	63f8      	str	r0, [r7, #60]	; 0x3c
   1afc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1afc2:	2b02      	cmp	r3, #2
   1afc4:	d101      	bne.n	1afca <AddModifyRecordEnd+0x22a>
   1afc6:	230a      	movs	r3, #10
   1afc8:	623b      	str	r3, [r7, #32]
   1afca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1afcc:	2b00      	cmp	r3, #0
   1afce:	d004      	beq.n	1afda <AddModifyRecordEnd+0x23a>
   1afd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1afd2:	f005 fc5b 	bl	2088c <FS_close>
   1afd6:	2300      	movs	r3, #0
   1afd8:	633b      	str	r3, [r7, #48]	; 0x30
   1afda:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1afdc:	f005 fee8 	bl	20db0 <PageFree>
   1afe0:	e10a      	b.n	1b1f8 <AddModifyRecordEnd+0x458>
   1afe2:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1afe6:	4618      	mov	r0, r3
   1afe8:	4b97      	ldr	r3, [pc, #604]	; (1b248 <AddModifyRecordEnd+0x4a8>)
   1afea:	447b      	add	r3, pc
   1afec:	4619      	mov	r1, r3
   1afee:	f005 fd29 	bl	20a44 <FS_open>
   1aff2:	62f8      	str	r0, [r7, #44]	; 0x2c
   1aff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aff6:	2b00      	cmp	r3, #0
   1aff8:	d102      	bne.n	1b000 <AddModifyRecordEnd+0x260>
   1affa:	2313      	movs	r3, #19
   1affc:	623b      	str	r3, [r7, #32]
   1affe:	e0fb      	b.n	1b1f8 <AddModifyRecordEnd+0x458>
   1b000:	f107 0308 	add.w	r3, r7, #8
   1b004:	4618      	mov	r0, r3
   1b006:	2104      	movs	r1, #4
   1b008:	2201      	movs	r2, #1
   1b00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b00c:	f005 fe1c 	bl	20c48 <FS_write>
   1b010:	6278      	str	r0, [r7, #36]	; 0x24
   1b012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b014:	2b01      	cmp	r3, #1
   1b016:	d107      	bne.n	1b028 <AddModifyRecordEnd+0x288>
   1b018:	68bb      	ldr	r3, [r7, #8]
   1b01a:	68f8      	ldr	r0, [r7, #12]
   1b01c:	4619      	mov	r1, r3
   1b01e:	2201      	movs	r2, #1
   1b020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b022:	f005 fe11 	bl	20c48 <FS_write>
   1b026:	6278      	str	r0, [r7, #36]	; 0x24
   1b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b02a:	2b01      	cmp	r3, #1
   1b02c:	d007      	beq.n	1b03e <AddModifyRecordEnd+0x29e>
   1b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b030:	2b00      	cmp	r3, #0
   1b032:	f040 80e1 	bne.w	1b1f8 <AddModifyRecordEnd+0x458>
   1b036:	68bb      	ldr	r3, [r7, #8]
   1b038:	2b00      	cmp	r3, #0
   1b03a:	f040 80dd 	bne.w	1b1f8 <AddModifyRecordEnd+0x458>
   1b03e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1b040:	f005 fc24 	bl	2088c <FS_close>
   1b044:	2300      	movs	r3, #0
   1b046:	62fb      	str	r3, [r7, #44]	; 0x2c
   1b048:	230a      	movs	r3, #10
   1b04a:	623b      	str	r3, [r7, #32]
   1b04c:	e0d4      	b.n	1b1f8 <AddModifyRecordEnd+0x458>
   1b04e:	683b      	ldr	r3, [r7, #0]
   1b050:	2b01      	cmp	r3, #1
   1b052:	f040 80a5 	bne.w	1b1a0 <AddModifyRecordEnd+0x400>
   1b056:	68bb      	ldr	r3, [r7, #8]
   1b058:	643b      	str	r3, [r7, #64]	; 0x40
   1b05a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b05c:	2b00      	cmp	r3, #0
   1b05e:	f2c0 80cb 	blt.w	1b1f8 <AddModifyRecordEnd+0x458>
   1b062:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b066:	1ad3      	subs	r3, r2, r3
   1b068:	2b00      	cmp	r3, #0
   1b06a:	f2c0 80c5 	blt.w	1b1f8 <AddModifyRecordEnd+0x458>
   1b06e:	68bb      	ldr	r3, [r7, #8]
   1b070:	2b00      	cmp	r3, #0
   1b072:	f2c0 80c1 	blt.w	1b1f8 <AddModifyRecordEnd+0x458>
   1b076:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1b07a:	4618      	mov	r0, r3
   1b07c:	4b73      	ldr	r3, [pc, #460]	; (1b24c <AddModifyRecordEnd+0x4ac>)
   1b07e:	447b      	add	r3, pc
   1b080:	4619      	mov	r1, r3
   1b082:	697a      	ldr	r2, [r7, #20]
   1b084:	4b72      	ldr	r3, [pc, #456]	; (1b250 <AddModifyRecordEnd+0x4b0>)
   1b086:	447b      	add	r3, pc
   1b088:	f7ed ee14 	blx	8cb4 <_init+0x154>
   1b08c:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1b090:	4618      	mov	r0, r3
   1b092:	f005 fc55 	bl	20940 <FS_exist>
   1b096:	63f8      	str	r0, [r7, #60]	; 0x3c
   1b098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b09a:	2b02      	cmp	r3, #2
   1b09c:	d104      	bne.n	1b0a8 <AddModifyRecordEnd+0x308>
   1b09e:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1b0a2:	4618      	mov	r0, r3
   1b0a4:	f005 fd78 	bl	20b98 <FS_unlink>
   1b0a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1b0ac:	4618      	mov	r0, r3
   1b0ae:	4b69      	ldr	r3, [pc, #420]	; (1b254 <AddModifyRecordEnd+0x4b4>)
   1b0b0:	447b      	add	r3, pc
   1b0b2:	4619      	mov	r1, r3
   1b0b4:	f005 fcc6 	bl	20a44 <FS_open>
   1b0b8:	6338      	str	r0, [r7, #48]	; 0x30
   1b0ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1b0bc:	2100      	movs	r1, #0
   1b0be:	2200      	movs	r2, #0
   1b0c0:	f005 fd40 	bl	20b44 <FS_seek>
   1b0c4:	63f8      	str	r0, [r7, #60]	; 0x3c
   1b0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b0c8:	2b02      	cmp	r3, #2
   1b0ca:	d160      	bne.n	1b18e <AddModifyRecordEnd+0x3ee>
   1b0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b0ce:	4618      	mov	r0, r3
   1b0d0:	f005 fe44 	bl	20d5c <PageAlloc>
   1b0d4:	6378      	str	r0, [r7, #52]	; 0x34
   1b0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b0d8:	2b00      	cmp	r3, #0
   1b0da:	d055      	beq.n	1b188 <AddModifyRecordEnd+0x3e8>
   1b0dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1b0de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1b0e0:	2201      	movs	r2, #1
   1b0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b0e4:	f005 fcd8 	bl	20a98 <FS_read>
   1b0e8:	6278      	str	r0, [r7, #36]	; 0x24
   1b0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b0ec:	2b01      	cmp	r3, #1
   1b0ee:	d005      	beq.n	1b0fc <AddModifyRecordEnd+0x35c>
   1b0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b0f2:	2b00      	cmp	r3, #0
   1b0f4:	d148      	bne.n	1b188 <AddModifyRecordEnd+0x3e8>
   1b0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b0f8:	2b00      	cmp	r3, #0
   1b0fa:	d145      	bne.n	1b188 <AddModifyRecordEnd+0x3e8>
   1b0fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b0fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b100:	1ad3      	subs	r3, r2, r3
   1b102:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1b104:	4619      	mov	r1, r3
   1b106:	2201      	movs	r2, #1
   1b108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b10a:	f005 fd9d 	bl	20c48 <FS_write>
   1b10e:	6278      	str	r0, [r7, #36]	; 0x24
   1b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b112:	2b01      	cmp	r3, #1
   1b114:	d006      	beq.n	1b124 <AddModifyRecordEnd+0x384>
   1b116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b118:	2b00      	cmp	r3, #0
   1b11a:	d10b      	bne.n	1b134 <AddModifyRecordEnd+0x394>
   1b11c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b11e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b120:	429a      	cmp	r2, r3
   1b122:	d107      	bne.n	1b134 <AddModifyRecordEnd+0x394>
   1b124:	68bb      	ldr	r3, [r7, #8]
   1b126:	68f8      	ldr	r0, [r7, #12]
   1b128:	4619      	mov	r1, r3
   1b12a:	2201      	movs	r2, #1
   1b12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b12e:	f005 fd8b 	bl	20c48 <FS_write>
   1b132:	6278      	str	r0, [r7, #36]	; 0x24
   1b134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b136:	2b01      	cmp	r3, #1
   1b138:	d005      	beq.n	1b146 <AddModifyRecordEnd+0x3a6>
   1b13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b13c:	2b00      	cmp	r3, #0
   1b13e:	d123      	bne.n	1b188 <AddModifyRecordEnd+0x3e8>
   1b140:	68bb      	ldr	r3, [r7, #8]
   1b142:	2b00      	cmp	r3, #0
   1b144:	d120      	bne.n	1b188 <AddModifyRecordEnd+0x3e8>
   1b146:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1b148:	f005 fba0 	bl	2088c <FS_close>
   1b14c:	2300      	movs	r3, #0
   1b14e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1b150:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1b154:	4618      	mov	r0, r3
   1b156:	f005 fd1f 	bl	20b98 <FS_unlink>
   1b15a:	63f8      	str	r0, [r7, #60]	; 0x3c
   1b15c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b15e:	2b02      	cmp	r3, #2
   1b160:	d112      	bne.n	1b188 <AddModifyRecordEnd+0x3e8>
   1b162:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b164:	f005 fb92 	bl	2088c <FS_close>
   1b168:	2300      	movs	r3, #0
   1b16a:	633b      	str	r3, [r7, #48]	; 0x30
   1b16c:	f107 0268 	add.w	r2, r7, #104	; 0x68
   1b170:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1b174:	4610      	mov	r0, r2
   1b176:	4619      	mov	r1, r3
   1b178:	f005 fcba 	bl	20af0 <FS_rename>
   1b17c:	63f8      	str	r0, [r7, #60]	; 0x3c
   1b17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b180:	2b02      	cmp	r3, #2
   1b182:	d101      	bne.n	1b188 <AddModifyRecordEnd+0x3e8>
   1b184:	230a      	movs	r3, #10
   1b186:	623b      	str	r3, [r7, #32]
   1b188:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1b18a:	f005 fe11 	bl	20db0 <PageFree>
   1b18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b190:	2b00      	cmp	r3, #0
   1b192:	d031      	beq.n	1b1f8 <AddModifyRecordEnd+0x458>
   1b194:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b196:	f005 fb79 	bl	2088c <FS_close>
   1b19a:	2300      	movs	r3, #0
   1b19c:	633b      	str	r3, [r7, #48]	; 0x30
   1b19e:	e02b      	b.n	1b1f8 <AddModifyRecordEnd+0x458>
   1b1a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1b1a2:	f005 fb73 	bl	2088c <FS_close>
   1b1a6:	2300      	movs	r3, #0
   1b1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   1b1aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1b1ae:	4618      	mov	r0, r3
   1b1b0:	4b29      	ldr	r3, [pc, #164]	; (1b258 <AddModifyRecordEnd+0x4b8>)
   1b1b2:	447b      	add	r3, pc
   1b1b4:	4619      	mov	r1, r3
   1b1b6:	f005 fc45 	bl	20a44 <FS_open>
   1b1ba:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b1be:	2b00      	cmp	r3, #0
   1b1c0:	d102      	bne.n	1b1c8 <AddModifyRecordEnd+0x428>
   1b1c2:	2313      	movs	r3, #19
   1b1c4:	623b      	str	r3, [r7, #32]
   1b1c6:	e017      	b.n	1b1f8 <AddModifyRecordEnd+0x458>
   1b1c8:	68bb      	ldr	r3, [r7, #8]
   1b1ca:	68f8      	ldr	r0, [r7, #12]
   1b1cc:	4619      	mov	r1, r3
   1b1ce:	2201      	movs	r2, #1
   1b1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b1d2:	f005 fd39 	bl	20c48 <FS_write>
   1b1d6:	6278      	str	r0, [r7, #36]	; 0x24
   1b1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b1da:	2b01      	cmp	r3, #1
   1b1dc:	d005      	beq.n	1b1ea <AddModifyRecordEnd+0x44a>
   1b1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b1e0:	2b00      	cmp	r3, #0
   1b1e2:	d109      	bne.n	1b1f8 <AddModifyRecordEnd+0x458>
   1b1e4:	68bb      	ldr	r3, [r7, #8]
   1b1e6:	2b00      	cmp	r3, #0
   1b1e8:	d106      	bne.n	1b1f8 <AddModifyRecordEnd+0x458>
   1b1ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1b1ec:	f005 fb4e 	bl	2088c <FS_close>
   1b1f0:	2300      	movs	r3, #0
   1b1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   1b1f4:	230a      	movs	r3, #10
   1b1f6:	623b      	str	r3, [r7, #32]
   1b1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b1fa:	2b00      	cmp	r3, #0
   1b1fc:	d004      	beq.n	1b208 <AddModifyRecordEnd+0x468>
   1b1fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1b200:	f005 fb44 	bl	2088c <FS_close>
   1b204:	2300      	movs	r3, #0
   1b206:	62fb      	str	r3, [r7, #44]	; 0x2c
   1b208:	6a3b      	ldr	r3, [r7, #32]
   1b20a:	4618      	mov	r0, r3
   1b20c:	4b07      	ldr	r3, [pc, #28]	; (1b22c <AddModifyRecordEnd+0x48c>)
   1b20e:	58e3      	ldr	r3, [r4, r3]
   1b210:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1b214:	681b      	ldr	r3, [r3, #0]
   1b216:	429a      	cmp	r2, r3
   1b218:	d001      	beq.n	1b21e <AddModifyRecordEnd+0x47e>
   1b21a:	f7ed fec3 	bl	8fa4 <__stack_chk_fail>
   1b21e:	f107 0794 	add.w	r7, r7, #148	; 0x94
   1b222:	46bd      	mov	sp, r7
   1b224:	bd90      	pop	{r4, r7, pc}
   1b226:	bf00      	nop
   1b228:	00014356 	.word	0x00014356
   1b22c:	000000ac 	.word	0x000000ac
   1b230:	0000b48a 	.word	0x0000b48a
   1b234:	0000b48c 	.word	0x0000b48c
   1b238:	000000c0 	.word	0x000000c0
   1b23c:	0000b3ae 	.word	0x0000b3ae
   1b240:	0000b3c2 	.word	0x0000b3c2
   1b244:	0000b390 	.word	0x0000b390
   1b248:	0000b29e 	.word	0x0000b29e
   1b24c:	0000b1f6 	.word	0x0000b1f6
   1b250:	0000b20a 	.word	0x0000b20a
   1b254:	0000b1d8 	.word	0x0000b1d8
   1b258:	0000b0d6 	.word	0x0000b0d6

0001b25c <AddModifyRecordEndWithCkecksum>:
   1b25c:	b590      	push	{r4, r7, lr}
   1b25e:	b0bf      	sub	sp, #252	; 0xfc
   1b260:	af00      	add	r7, sp, #0
   1b262:	6178      	str	r0, [r7, #20]
   1b264:	6139      	str	r1, [r7, #16]
   1b266:	60fa      	str	r2, [r7, #12]
   1b268:	60bb      	str	r3, [r7, #8]
   1b26a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
   1b26e:	607b      	str	r3, [r7, #4]
   1b270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   1b274:	603b      	str	r3, [r7, #0]
   1b276:	4cf7      	ldr	r4, [pc, #988]	; (1b654 <AddModifyRecordEndWithCkecksum+0x3f8>)
   1b278:	447c      	add	r4, pc
   1b27a:	4bf7      	ldr	r3, [pc, #988]	; (1b658 <AddModifyRecordEndWithCkecksum+0x3fc>)
   1b27c:	58e3      	ldr	r3, [r4, r3]
   1b27e:	681b      	ldr	r3, [r3, #0]
   1b280:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   1b284:	2300      	movs	r3, #0
   1b286:	61fb      	str	r3, [r7, #28]
   1b288:	2318      	movs	r3, #24
   1b28a:	627b      	str	r3, [r7, #36]	; 0x24
   1b28c:	2300      	movs	r3, #0
   1b28e:	63bb      	str	r3, [r7, #56]	; 0x38
   1b290:	2300      	movs	r3, #0
   1b292:	633b      	str	r3, [r7, #48]	; 0x30
   1b294:	2300      	movs	r3, #0
   1b296:	637b      	str	r3, [r7, #52]	; 0x34
   1b298:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1b29c:	4618      	mov	r0, r3
   1b29e:	4bef      	ldr	r3, [pc, #956]	; (1b65c <AddModifyRecordEndWithCkecksum+0x400>)
   1b2a0:	447b      	add	r3, pc
   1b2a2:	4619      	mov	r1, r3
   1b2a4:	697a      	ldr	r2, [r7, #20]
   1b2a6:	693b      	ldr	r3, [r7, #16]
   1b2a8:	f7ed ed04 	blx	8cb4 <_init+0x154>
   1b2ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1b2b0:	4618      	mov	r0, r3
   1b2b2:	4beb      	ldr	r3, [pc, #940]	; (1b660 <AddModifyRecordEndWithCkecksum+0x404>)
   1b2b4:	447b      	add	r3, pc
   1b2b6:	4619      	mov	r1, r3
   1b2b8:	f005 fbc4 	bl	20a44 <FS_open>
   1b2bc:	6338      	str	r0, [r7, #48]	; 0x30
   1b2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b2c0:	2b00      	cmp	r3, #0
   1b2c2:	d102      	bne.n	1b2ca <AddModifyRecordEndWithCkecksum+0x6e>
   1b2c4:	2313      	movs	r3, #19
   1b2c6:	627b      	str	r3, [r7, #36]	; 0x24
   1b2c8:	e1b4      	b.n	1b634 <AddModifyRecordEndWithCkecksum+0x3d8>
   1b2ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b2cc:	f005 fb64 	bl	20998 <FS_length>
   1b2d0:	63f8      	str	r0, [r7, #60]	; 0x3c
   1b2d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b2d4:	4618      	mov	r0, r3
   1b2d6:	f005 fd41 	bl	20d5c <PageAlloc>
   1b2da:	63b8      	str	r0, [r7, #56]	; 0x38
   1b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b2de:	2b00      	cmp	r3, #0
   1b2e0:	f000 819b 	beq.w	1b61a <AddModifyRecordEndWithCkecksum+0x3be>
   1b2e4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   1b2e8:	4618      	mov	r0, r3
   1b2ea:	4bde      	ldr	r3, [pc, #888]	; (1b664 <AddModifyRecordEndWithCkecksum+0x408>)
   1b2ec:	447b      	add	r3, pc
   1b2ee:	4619      	mov	r1, r3
   1b2f0:	697a      	ldr	r2, [r7, #20]
   1b2f2:	4bdd      	ldr	r3, [pc, #884]	; (1b668 <AddModifyRecordEndWithCkecksum+0x40c>)
   1b2f4:	447b      	add	r3, pc
   1b2f6:	f7ed ecde 	blx	8cb4 <_init+0x154>
   1b2fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   1b2fe:	4618      	mov	r0, r3
   1b300:	f005 fb1e 	bl	20940 <FS_exist>
   1b304:	6438      	str	r0, [r7, #64]	; 0x40
   1b306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b308:	2b02      	cmp	r3, #2
   1b30a:	d104      	bne.n	1b316 <AddModifyRecordEndWithCkecksum+0xba>
   1b30c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   1b310:	4618      	mov	r0, r3
   1b312:	f005 fc41 	bl	20b98 <FS_unlink>
   1b316:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   1b31a:	4618      	mov	r0, r3
   1b31c:	4bd3      	ldr	r3, [pc, #844]	; (1b66c <AddModifyRecordEndWithCkecksum+0x410>)
   1b31e:	447b      	add	r3, pc
   1b320:	4619      	mov	r1, r3
   1b322:	f005 fb8f 	bl	20a44 <FS_open>
   1b326:	6378      	str	r0, [r7, #52]	; 0x34
   1b328:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b32a:	2100      	movs	r1, #0
   1b32c:	2200      	movs	r2, #0
   1b32e:	f005 fc09 	bl	20b44 <FS_seek>
   1b332:	6438      	str	r0, [r7, #64]	; 0x40
   1b334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b336:	2b02      	cmp	r3, #2
   1b338:	f040 8166 	bne.w	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b33c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1b33e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1b340:	2201      	movs	r2, #1
   1b342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b344:	f005 fba8 	bl	20a98 <FS_read>
   1b348:	62b8      	str	r0, [r7, #40]	; 0x28
   1b34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b34c:	2b01      	cmp	r3, #1
   1b34e:	d007      	beq.n	1b360 <AddModifyRecordEndWithCkecksum+0x104>
   1b350:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b352:	2b00      	cmp	r3, #0
   1b354:	f040 8158 	bne.w	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b35a:	2b00      	cmp	r3, #0
   1b35c:	f040 8154 	bne.w	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b360:	4bc3      	ldr	r3, [pc, #780]	; (1b670 <AddModifyRecordEndWithCkecksum+0x414>)
   1b362:	58e3      	ldr	r3, [r4, r3]
   1b364:	461a      	mov	r2, r3
   1b366:	687b      	ldr	r3, [r7, #4]
   1b368:	212c      	movs	r1, #44	; 0x2c
   1b36a:	fb01 f303 	mul.w	r3, r1, r3
   1b36e:	18d3      	adds	r3, r2, r3
   1b370:	3328      	adds	r3, #40	; 0x28
   1b372:	681b      	ldr	r3, [r3, #0]
   1b374:	2b01      	cmp	r3, #1
   1b376:	f040 80bf 	bne.w	1b4f8 <AddModifyRecordEndWithCkecksum+0x29c>
   1b37a:	2300      	movs	r3, #0
   1b37c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1b37e:	e00f      	b.n	1b3a0 <AddModifyRecordEndWithCkecksum+0x144>
   1b380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b382:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b384:	18d3      	adds	r3, r2, r3
   1b386:	f107 021c 	add.w	r2, r7, #28
   1b38a:	4610      	mov	r0, r2
   1b38c:	4619      	mov	r1, r3
   1b38e:	2204      	movs	r2, #4
   1b390:	f7ed ec72 	blx	8c78 <_init+0x118>
   1b394:	69fb      	ldr	r3, [r7, #28]
   1b396:	461a      	mov	r2, r3
   1b398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b39a:	18d3      	adds	r3, r2, r3
   1b39c:	3304      	adds	r3, #4
   1b39e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1b3a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b3a2:	f1a3 0210 	sub.w	r2, r3, #16
   1b3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b3a8:	429a      	cmp	r2, r3
   1b3aa:	dce9      	bgt.n	1b380 <AddModifyRecordEndWithCkecksum+0x124>
   1b3ac:	683b      	ldr	r3, [r7, #0]
   1b3ae:	2b01      	cmp	r3, #1
   1b3b0:	d103      	bne.n	1b3ba <AddModifyRecordEndWithCkecksum+0x15e>
   1b3b2:	69fb      	ldr	r3, [r7, #28]
   1b3b4:	3304      	adds	r3, #4
   1b3b6:	623b      	str	r3, [r7, #32]
   1b3b8:	e001      	b.n	1b3be <AddModifyRecordEndWithCkecksum+0x162>
   1b3ba:	2300      	movs	r3, #0
   1b3bc:	623b      	str	r3, [r7, #32]
   1b3be:	6a3b      	ldr	r3, [r7, #32]
   1b3c0:	2b00      	cmp	r3, #0
   1b3c2:	f2c0 8121 	blt.w	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b3c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b3c8:	f1a3 0210 	sub.w	r2, r3, #16
   1b3cc:	6a3b      	ldr	r3, [r7, #32]
   1b3ce:	1ad3      	subs	r3, r2, r3
   1b3d0:	2b00      	cmp	r3, #0
   1b3d2:	f2c0 8119 	blt.w	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b3d6:	68bb      	ldr	r3, [r7, #8]
   1b3d8:	2b00      	cmp	r3, #0
   1b3da:	f2c0 8115 	blt.w	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b3e0:	f1a3 0210 	sub.w	r2, r3, #16
   1b3e4:	6a3b      	ldr	r3, [r7, #32]
   1b3e6:	1ad3      	subs	r3, r2, r3
   1b3e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1b3ea:	4619      	mov	r1, r3
   1b3ec:	2201      	movs	r2, #1
   1b3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b3f0:	f005 fc2a 	bl	20c48 <FS_write>
   1b3f4:	62b8      	str	r0, [r7, #40]	; 0x28
   1b3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b3f8:	2b01      	cmp	r3, #1
   1b3fa:	d008      	beq.n	1b40e <AddModifyRecordEndWithCkecksum+0x1b2>
   1b3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b3fe:	2b00      	cmp	r3, #0
   1b400:	d10e      	bne.n	1b420 <AddModifyRecordEndWithCkecksum+0x1c4>
   1b402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b404:	f1a3 0210 	sub.w	r2, r3, #16
   1b408:	6a3b      	ldr	r3, [r7, #32]
   1b40a:	429a      	cmp	r2, r3
   1b40c:	d108      	bne.n	1b420 <AddModifyRecordEndWithCkecksum+0x1c4>
   1b40e:	f107 0308 	add.w	r3, r7, #8
   1b412:	4618      	mov	r0, r3
   1b414:	2104      	movs	r1, #4
   1b416:	2201      	movs	r2, #1
   1b418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b41a:	f005 fc15 	bl	20c48 <FS_write>
   1b41e:	62b8      	str	r0, [r7, #40]	; 0x28
   1b420:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b422:	2b01      	cmp	r3, #1
   1b424:	d107      	bne.n	1b436 <AddModifyRecordEndWithCkecksum+0x1da>
   1b426:	68bb      	ldr	r3, [r7, #8]
   1b428:	68f8      	ldr	r0, [r7, #12]
   1b42a:	4619      	mov	r1, r3
   1b42c:	2201      	movs	r2, #1
   1b42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b430:	f005 fc0a 	bl	20c48 <FS_write>
   1b434:	62b8      	str	r0, [r7, #40]	; 0x28
   1b436:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b438:	2b01      	cmp	r3, #1
   1b43a:	d007      	beq.n	1b44c <AddModifyRecordEndWithCkecksum+0x1f0>
   1b43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b43e:	2b00      	cmp	r3, #0
   1b440:	f040 80e2 	bne.w	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b444:	68bb      	ldr	r3, [r7, #8]
   1b446:	2b00      	cmp	r3, #0
   1b448:	f040 80de 	bne.w	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b44c:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1b450:	4618      	mov	r0, r3
   1b452:	f003 fe6b 	bl	1f12c <md5_init>
   1b456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b458:	f1a3 0210 	sub.w	r2, r3, #16
   1b45c:	6a3b      	ldr	r3, [r7, #32]
   1b45e:	1ad3      	subs	r3, r2, r3
   1b460:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1b464:	4610      	mov	r0, r2
   1b466:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1b468:	461a      	mov	r2, r3
   1b46a:	f003 fe99 	bl	1f1a0 <md5_append>
   1b46e:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1b472:	f107 0308 	add.w	r3, r7, #8
   1b476:	4610      	mov	r0, r2
   1b478:	4619      	mov	r1, r3
   1b47a:	2204      	movs	r2, #4
   1b47c:	f003 fe90 	bl	1f1a0 <md5_append>
   1b480:	68bb      	ldr	r3, [r7, #8]
   1b482:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1b486:	4610      	mov	r0, r2
   1b488:	68f9      	ldr	r1, [r7, #12]
   1b48a:	461a      	mov	r2, r3
   1b48c:	f003 fe88 	bl	1f1a0 <md5_append>
   1b490:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1b494:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1b498:	4610      	mov	r0, r2
   1b49a:	4619      	mov	r1, r3
   1b49c:	f003 ff0c 	bl	1f2b8 <md5_finish>
   1b4a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1b4a4:	4618      	mov	r0, r3
   1b4a6:	2110      	movs	r1, #16
   1b4a8:	2201      	movs	r2, #1
   1b4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b4ac:	f005 fbcc 	bl	20c48 <FS_write>
   1b4b0:	62b8      	str	r0, [r7, #40]	; 0x28
   1b4b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b4b4:	f005 f9ea 	bl	2088c <FS_close>
   1b4b8:	2300      	movs	r3, #0
   1b4ba:	633b      	str	r3, [r7, #48]	; 0x30
   1b4bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1b4c0:	4618      	mov	r0, r3
   1b4c2:	f005 fb69 	bl	20b98 <FS_unlink>
   1b4c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1b4c8:	f005 f9e0 	bl	2088c <FS_close>
   1b4cc:	2300      	movs	r3, #0
   1b4ce:	637b      	str	r3, [r7, #52]	; 0x34
   1b4d0:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
   1b4d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1b4d8:	4610      	mov	r0, r2
   1b4da:	4619      	mov	r1, r3
   1b4dc:	f005 fb08 	bl	20af0 <FS_rename>
   1b4e0:	6438      	str	r0, [r7, #64]	; 0x40
   1b4e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b4e4:	2b02      	cmp	r3, #2
   1b4e6:	f040 808f 	bne.w	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b4ec:	2b01      	cmp	r3, #1
   1b4ee:	f040 808b 	bne.w	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b4f2:	230a      	movs	r3, #10
   1b4f4:	627b      	str	r3, [r7, #36]	; 0x24
   1b4f6:	e087      	b.n	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b4f8:	683b      	ldr	r3, [r7, #0]
   1b4fa:	2b01      	cmp	r3, #1
   1b4fc:	d102      	bne.n	1b504 <AddModifyRecordEndWithCkecksum+0x2a8>
   1b4fe:	68bb      	ldr	r3, [r7, #8]
   1b500:	623b      	str	r3, [r7, #32]
   1b502:	e001      	b.n	1b508 <AddModifyRecordEndWithCkecksum+0x2ac>
   1b504:	2300      	movs	r3, #0
   1b506:	623b      	str	r3, [r7, #32]
   1b508:	6a3b      	ldr	r3, [r7, #32]
   1b50a:	2b00      	cmp	r3, #0
   1b50c:	db7c      	blt.n	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b510:	f1a3 0210 	sub.w	r2, r3, #16
   1b514:	6a3b      	ldr	r3, [r7, #32]
   1b516:	1ad3      	subs	r3, r2, r3
   1b518:	2b00      	cmp	r3, #0
   1b51a:	db75      	blt.n	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b51c:	68bb      	ldr	r3, [r7, #8]
   1b51e:	2b00      	cmp	r3, #0
   1b520:	db72      	blt.n	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b524:	f1a3 0210 	sub.w	r2, r3, #16
   1b528:	6a3b      	ldr	r3, [r7, #32]
   1b52a:	1ad3      	subs	r3, r2, r3
   1b52c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1b52e:	4619      	mov	r1, r3
   1b530:	2201      	movs	r2, #1
   1b532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b534:	f005 fb88 	bl	20c48 <FS_write>
   1b538:	62b8      	str	r0, [r7, #40]	; 0x28
   1b53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b53c:	2b01      	cmp	r3, #1
   1b53e:	d008      	beq.n	1b552 <AddModifyRecordEndWithCkecksum+0x2f6>
   1b540:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b542:	2b00      	cmp	r3, #0
   1b544:	d10d      	bne.n	1b562 <AddModifyRecordEndWithCkecksum+0x306>
   1b546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b548:	f1a3 0210 	sub.w	r2, r3, #16
   1b54c:	6a3b      	ldr	r3, [r7, #32]
   1b54e:	429a      	cmp	r2, r3
   1b550:	d107      	bne.n	1b562 <AddModifyRecordEndWithCkecksum+0x306>
   1b552:	68bb      	ldr	r3, [r7, #8]
   1b554:	68f8      	ldr	r0, [r7, #12]
   1b556:	4619      	mov	r1, r3
   1b558:	2201      	movs	r2, #1
   1b55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b55c:	f005 fb74 	bl	20c48 <FS_write>
   1b560:	62b8      	str	r0, [r7, #40]	; 0x28
   1b562:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b564:	2b01      	cmp	r3, #1
   1b566:	d005      	beq.n	1b574 <AddModifyRecordEndWithCkecksum+0x318>
   1b568:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b56a:	2b00      	cmp	r3, #0
   1b56c:	d14c      	bne.n	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b56e:	68bb      	ldr	r3, [r7, #8]
   1b570:	2b00      	cmp	r3, #0
   1b572:	d149      	bne.n	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b574:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1b578:	4618      	mov	r0, r3
   1b57a:	f003 fdd7 	bl	1f12c <md5_init>
   1b57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b580:	f1a3 0210 	sub.w	r2, r3, #16
   1b584:	6a3b      	ldr	r3, [r7, #32]
   1b586:	1ad3      	subs	r3, r2, r3
   1b588:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1b58c:	4610      	mov	r0, r2
   1b58e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1b590:	461a      	mov	r2, r3
   1b592:	f003 fe05 	bl	1f1a0 <md5_append>
   1b596:	68bb      	ldr	r3, [r7, #8]
   1b598:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1b59c:	4610      	mov	r0, r2
   1b59e:	68f9      	ldr	r1, [r7, #12]
   1b5a0:	461a      	mov	r2, r3
   1b5a2:	f003 fdfd 	bl	1f1a0 <md5_append>
   1b5a6:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1b5aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1b5ae:	4610      	mov	r0, r2
   1b5b0:	4619      	mov	r1, r3
   1b5b2:	f003 fe81 	bl	1f2b8 <md5_finish>
   1b5b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1b5ba:	4618      	mov	r0, r3
   1b5bc:	2110      	movs	r1, #16
   1b5be:	2201      	movs	r2, #1
   1b5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b5c2:	f005 fb41 	bl	20c48 <FS_write>
   1b5c6:	62b8      	str	r0, [r7, #40]	; 0x28
   1b5c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b5ca:	f005 f95f 	bl	2088c <FS_close>
   1b5ce:	2300      	movs	r3, #0
   1b5d0:	633b      	str	r3, [r7, #48]	; 0x30
   1b5d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1b5d6:	4618      	mov	r0, r3
   1b5d8:	f005 fade 	bl	20b98 <FS_unlink>
   1b5dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1b5de:	f005 f955 	bl	2088c <FS_close>
   1b5e2:	2300      	movs	r3, #0
   1b5e4:	637b      	str	r3, [r7, #52]	; 0x34
   1b5e6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
   1b5ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1b5ee:	4610      	mov	r0, r2
   1b5f0:	4619      	mov	r1, r3
   1b5f2:	f005 fa7d 	bl	20af0 <FS_rename>
   1b5f6:	6438      	str	r0, [r7, #64]	; 0x40
   1b5f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1b5fa:	2b02      	cmp	r3, #2
   1b5fc:	d104      	bne.n	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b600:	2b01      	cmp	r3, #1
   1b602:	d101      	bne.n	1b608 <AddModifyRecordEndWithCkecksum+0x3ac>
   1b604:	230a      	movs	r3, #10
   1b606:	627b      	str	r3, [r7, #36]	; 0x24
   1b608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b60a:	2b00      	cmp	r3, #0
   1b60c:	d007      	beq.n	1b61e <AddModifyRecordEndWithCkecksum+0x3c2>
   1b60e:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1b610:	f005 f93c 	bl	2088c <FS_close>
   1b614:	2300      	movs	r3, #0
   1b616:	637b      	str	r3, [r7, #52]	; 0x34
   1b618:	e001      	b.n	1b61e <AddModifyRecordEndWithCkecksum+0x3c2>
   1b61a:	2318      	movs	r3, #24
   1b61c:	627b      	str	r3, [r7, #36]	; 0x24
   1b61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b620:	2b00      	cmp	r3, #0
   1b622:	d004      	beq.n	1b62e <AddModifyRecordEndWithCkecksum+0x3d2>
   1b624:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1b626:	f005 f931 	bl	2088c <FS_close>
   1b62a:	2300      	movs	r3, #0
   1b62c:	633b      	str	r3, [r7, #48]	; 0x30
   1b62e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1b630:	f005 fbbe 	bl	20db0 <PageFree>
   1b634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b636:	4618      	mov	r0, r3
   1b638:	4b07      	ldr	r3, [pc, #28]	; (1b658 <AddModifyRecordEndWithCkecksum+0x3fc>)
   1b63a:	58e3      	ldr	r3, [r4, r3]
   1b63c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1b640:	681b      	ldr	r3, [r3, #0]
   1b642:	429a      	cmp	r2, r3
   1b644:	d001      	beq.n	1b64a <AddModifyRecordEndWithCkecksum+0x3ee>
   1b646:	f7ed fcad 	bl	8fa4 <__stack_chk_fail>
   1b64a:	f107 07fc 	add.w	r7, r7, #252	; 0xfc
   1b64e:	46bd      	mov	sp, r7
   1b650:	bd90      	pop	{r4, r7, pc}
   1b652:	bf00      	nop
   1b654:	00013e9c 	.word	0x00013e9c
   1b658:	000000ac 	.word	0x000000ac
   1b65c:	0000afd4 	.word	0x0000afd4
   1b660:	0000afd8 	.word	0x0000afd8
   1b664:	0000af88 	.word	0x0000af88
   1b668:	0000af9c 	.word	0x0000af9c
   1b66c:	0000af6a 	.word	0x0000af6a
   1b670:	000000c0 	.word	0x000000c0

0001b674 <DeleteRecordBegin>:
   1b674:	b590      	push	{r4, r7, lr}
   1b676:	b0a1      	sub	sp, #132	; 0x84
   1b678:	af00      	add	r7, sp, #0
   1b67a:	60f8      	str	r0, [r7, #12]
   1b67c:	60b9      	str	r1, [r7, #8]
   1b67e:	607a      	str	r2, [r7, #4]
   1b680:	603b      	str	r3, [r7, #0]
   1b682:	4c91      	ldr	r4, [pc, #580]	; (1b8c8 <DeleteRecordBegin+0x254>)
   1b684:	447c      	add	r4, pc
   1b686:	4b91      	ldr	r3, [pc, #580]	; (1b8cc <DeleteRecordBegin+0x258>)
   1b688:	58e3      	ldr	r3, [r4, r3]
   1b68a:	681b      	ldr	r3, [r3, #0]
   1b68c:	67fb      	str	r3, [r7, #124]	; 0x7c
   1b68e:	231a      	movs	r3, #26
   1b690:	61bb      	str	r3, [r7, #24]
   1b692:	2300      	movs	r3, #0
   1b694:	627b      	str	r3, [r7, #36]	; 0x24
   1b696:	2300      	movs	r3, #0
   1b698:	61fb      	str	r3, [r7, #28]
   1b69a:	2300      	movs	r3, #0
   1b69c:	623b      	str	r3, [r7, #32]
   1b69e:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1b6a2:	4618      	mov	r0, r3
   1b6a4:	4b8a      	ldr	r3, [pc, #552]	; (1b8d0 <DeleteRecordBegin+0x25c>)
   1b6a6:	447b      	add	r3, pc
   1b6a8:	4619      	mov	r1, r3
   1b6aa:	68fa      	ldr	r2, [r7, #12]
   1b6ac:	68bb      	ldr	r3, [r7, #8]
   1b6ae:	f7ed eb02 	blx	8cb4 <_init+0x154>
   1b6b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1b6b6:	4618      	mov	r0, r3
   1b6b8:	4b86      	ldr	r3, [pc, #536]	; (1b8d4 <DeleteRecordBegin+0x260>)
   1b6ba:	447b      	add	r3, pc
   1b6bc:	4619      	mov	r1, r3
   1b6be:	f005 f9c1 	bl	20a44 <FS_open>
   1b6c2:	61f8      	str	r0, [r7, #28]
   1b6c4:	69fb      	ldr	r3, [r7, #28]
   1b6c6:	2b00      	cmp	r3, #0
   1b6c8:	d102      	bne.n	1b6d0 <DeleteRecordBegin+0x5c>
   1b6ca:	2313      	movs	r3, #19
   1b6cc:	61bb      	str	r3, [r7, #24]
   1b6ce:	e0ec      	b.n	1b8aa <DeleteRecordBegin+0x236>
   1b6d0:	69f8      	ldr	r0, [r7, #28]
   1b6d2:	f005 f961 	bl	20998 <FS_length>
   1b6d6:	62b8      	str	r0, [r7, #40]	; 0x28
   1b6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b6da:	4618      	mov	r0, r3
   1b6dc:	f005 fb3e 	bl	20d5c <PageAlloc>
   1b6e0:	6278      	str	r0, [r7, #36]	; 0x24
   1b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b6e4:	2b00      	cmp	r3, #0
   1b6e6:	f000 80d3 	beq.w	1b890 <DeleteRecordBegin+0x21c>
   1b6ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
   1b6ee:	4618      	mov	r0, r3
   1b6f0:	4b79      	ldr	r3, [pc, #484]	; (1b8d8 <DeleteRecordBegin+0x264>)
   1b6f2:	447b      	add	r3, pc
   1b6f4:	4619      	mov	r1, r3
   1b6f6:	68fa      	ldr	r2, [r7, #12]
   1b6f8:	4b78      	ldr	r3, [pc, #480]	; (1b8dc <DeleteRecordBegin+0x268>)
   1b6fa:	447b      	add	r3, pc
   1b6fc:	f7ed eada 	blx	8cb4 <_init+0x154>
   1b700:	f107 0358 	add.w	r3, r7, #88	; 0x58
   1b704:	4618      	mov	r0, r3
   1b706:	f005 f91b 	bl	20940 <FS_exist>
   1b70a:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b70e:	2b02      	cmp	r3, #2
   1b710:	d104      	bne.n	1b71c <DeleteRecordBegin+0xa8>
   1b712:	f107 0358 	add.w	r3, r7, #88	; 0x58
   1b716:	4618      	mov	r0, r3
   1b718:	f005 fa3e 	bl	20b98 <FS_unlink>
   1b71c:	f107 0358 	add.w	r3, r7, #88	; 0x58
   1b720:	4618      	mov	r0, r3
   1b722:	4b6f      	ldr	r3, [pc, #444]	; (1b8e0 <DeleteRecordBegin+0x26c>)
   1b724:	447b      	add	r3, pc
   1b726:	4619      	mov	r1, r3
   1b728:	f005 f98c 	bl	20a44 <FS_open>
   1b72c:	6238      	str	r0, [r7, #32]
   1b72e:	69f8      	ldr	r0, [r7, #28]
   1b730:	2100      	movs	r1, #0
   1b732:	2200      	movs	r2, #0
   1b734:	f005 fa06 	bl	20b44 <FS_seek>
   1b738:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b73c:	2b02      	cmp	r3, #2
   1b73e:	f040 809e 	bne.w	1b87e <DeleteRecordBegin+0x20a>
   1b742:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1b744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1b746:	2201      	movs	r2, #1
   1b748:	69fb      	ldr	r3, [r7, #28]
   1b74a:	f005 f9a5 	bl	20a98 <FS_read>
   1b74e:	6338      	str	r0, [r7, #48]	; 0x30
   1b750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b752:	2b01      	cmp	r3, #1
   1b754:	d007      	beq.n	1b766 <DeleteRecordBegin+0xf2>
   1b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b758:	2b00      	cmp	r3, #0
   1b75a:	f040 8090 	bne.w	1b87e <DeleteRecordBegin+0x20a>
   1b75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b760:	2b00      	cmp	r3, #0
   1b762:	f040 808c 	bne.w	1b87e <DeleteRecordBegin+0x20a>
   1b766:	4b5f      	ldr	r3, [pc, #380]	; (1b8e4 <DeleteRecordBegin+0x270>)
   1b768:	58e3      	ldr	r3, [r4, r3]
   1b76a:	461a      	mov	r2, r3
   1b76c:	683b      	ldr	r3, [r7, #0]
   1b76e:	212c      	movs	r1, #44	; 0x2c
   1b770:	fb01 f303 	mul.w	r3, r1, r3
   1b774:	18d3      	adds	r3, r2, r3
   1b776:	3328      	adds	r3, #40	; 0x28
   1b778:	681b      	ldr	r3, [r3, #0]
   1b77a:	2b01      	cmp	r3, #1
   1b77c:	d142      	bne.n	1b804 <DeleteRecordBegin+0x190>
   1b77e:	f107 0314 	add.w	r3, r7, #20
   1b782:	4618      	mov	r0, r3
   1b784:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1b786:	2204      	movs	r2, #4
   1b788:	f7ed ea76 	blx	8c78 <_init+0x118>
   1b78c:	697b      	ldr	r3, [r7, #20]
   1b78e:	3304      	adds	r3, #4
   1b790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b792:	18d2      	adds	r2, r2, r3
   1b794:	697b      	ldr	r3, [r7, #20]
   1b796:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1b798:	1acb      	subs	r3, r1, r3
   1b79a:	3b04      	subs	r3, #4
   1b79c:	4610      	mov	r0, r2
   1b79e:	4619      	mov	r1, r3
   1b7a0:	2201      	movs	r2, #1
   1b7a2:	6a3b      	ldr	r3, [r7, #32]
   1b7a4:	f005 fa50 	bl	20c48 <FS_write>
   1b7a8:	6338      	str	r0, [r7, #48]	; 0x30
   1b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b7ac:	2b01      	cmp	r3, #1
   1b7ae:	d007      	beq.n	1b7c0 <DeleteRecordBegin+0x14c>
   1b7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b7b2:	2b00      	cmp	r3, #0
   1b7b4:	d163      	bne.n	1b87e <DeleteRecordBegin+0x20a>
   1b7b6:	697b      	ldr	r3, [r7, #20]
   1b7b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b7ba:	1ad3      	subs	r3, r2, r3
   1b7bc:	2b04      	cmp	r3, #4
   1b7be:	d15e      	bne.n	1b87e <DeleteRecordBegin+0x20a>
   1b7c0:	69f8      	ldr	r0, [r7, #28]
   1b7c2:	f005 f863 	bl	2088c <FS_close>
   1b7c6:	2300      	movs	r3, #0
   1b7c8:	61fb      	str	r3, [r7, #28]
   1b7ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1b7ce:	4618      	mov	r0, r3
   1b7d0:	f005 f9e2 	bl	20b98 <FS_unlink>
   1b7d4:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b7d8:	2b02      	cmp	r3, #2
   1b7da:	d150      	bne.n	1b87e <DeleteRecordBegin+0x20a>
   1b7dc:	6a38      	ldr	r0, [r7, #32]
   1b7de:	f005 f855 	bl	2088c <FS_close>
   1b7e2:	2300      	movs	r3, #0
   1b7e4:	623b      	str	r3, [r7, #32]
   1b7e6:	f107 0258 	add.w	r2, r7, #88	; 0x58
   1b7ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1b7ee:	4610      	mov	r0, r2
   1b7f0:	4619      	mov	r1, r3
   1b7f2:	f005 f97d 	bl	20af0 <FS_rename>
   1b7f6:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b7fa:	2b02      	cmp	r3, #2
   1b7fc:	d13f      	bne.n	1b87e <DeleteRecordBegin+0x20a>
   1b7fe:	230a      	movs	r3, #10
   1b800:	61bb      	str	r3, [r7, #24]
   1b802:	e03c      	b.n	1b87e <DeleteRecordBegin+0x20a>
   1b804:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b806:	687b      	ldr	r3, [r7, #4]
   1b808:	1ad3      	subs	r3, r2, r3
   1b80a:	2b00      	cmp	r3, #0
   1b80c:	db37      	blt.n	1b87e <DeleteRecordBegin+0x20a>
   1b80e:	687b      	ldr	r3, [r7, #4]
   1b810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b812:	18d2      	adds	r2, r2, r3
   1b814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1b816:	687b      	ldr	r3, [r7, #4]
   1b818:	1acb      	subs	r3, r1, r3
   1b81a:	4610      	mov	r0, r2
   1b81c:	4619      	mov	r1, r3
   1b81e:	2201      	movs	r2, #1
   1b820:	6a3b      	ldr	r3, [r7, #32]
   1b822:	f005 fa11 	bl	20c48 <FS_write>
   1b826:	6338      	str	r0, [r7, #48]	; 0x30
   1b828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b82a:	2b01      	cmp	r3, #1
   1b82c:	d006      	beq.n	1b83c <DeleteRecordBegin+0x1c8>
   1b82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b830:	2b00      	cmp	r3, #0
   1b832:	d124      	bne.n	1b87e <DeleteRecordBegin+0x20a>
   1b834:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b836:	687b      	ldr	r3, [r7, #4]
   1b838:	429a      	cmp	r2, r3
   1b83a:	d120      	bne.n	1b87e <DeleteRecordBegin+0x20a>
   1b83c:	69f8      	ldr	r0, [r7, #28]
   1b83e:	f005 f825 	bl	2088c <FS_close>
   1b842:	2300      	movs	r3, #0
   1b844:	61fb      	str	r3, [r7, #28]
   1b846:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1b84a:	4618      	mov	r0, r3
   1b84c:	f005 f9a4 	bl	20b98 <FS_unlink>
   1b850:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b854:	2b02      	cmp	r3, #2
   1b856:	d112      	bne.n	1b87e <DeleteRecordBegin+0x20a>
   1b858:	6a38      	ldr	r0, [r7, #32]
   1b85a:	f005 f817 	bl	2088c <FS_close>
   1b85e:	2300      	movs	r3, #0
   1b860:	623b      	str	r3, [r7, #32]
   1b862:	f107 0258 	add.w	r2, r7, #88	; 0x58
   1b866:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1b86a:	4610      	mov	r0, r2
   1b86c:	4619      	mov	r1, r3
   1b86e:	f005 f93f 	bl	20af0 <FS_rename>
   1b872:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b876:	2b02      	cmp	r3, #2
   1b878:	d101      	bne.n	1b87e <DeleteRecordBegin+0x20a>
   1b87a:	230a      	movs	r3, #10
   1b87c:	61bb      	str	r3, [r7, #24]
   1b87e:	6a3b      	ldr	r3, [r7, #32]
   1b880:	2b00      	cmp	r3, #0
   1b882:	d007      	beq.n	1b894 <DeleteRecordBegin+0x220>
   1b884:	6a38      	ldr	r0, [r7, #32]
   1b886:	f005 f801 	bl	2088c <FS_close>
   1b88a:	2300      	movs	r3, #0
   1b88c:	623b      	str	r3, [r7, #32]
   1b88e:	e001      	b.n	1b894 <DeleteRecordBegin+0x220>
   1b890:	231a      	movs	r3, #26
   1b892:	61bb      	str	r3, [r7, #24]
   1b894:	69fb      	ldr	r3, [r7, #28]
   1b896:	2b00      	cmp	r3, #0
   1b898:	d004      	beq.n	1b8a4 <DeleteRecordBegin+0x230>
   1b89a:	69f8      	ldr	r0, [r7, #28]
   1b89c:	f004 fff6 	bl	2088c <FS_close>
   1b8a0:	2300      	movs	r3, #0
   1b8a2:	61fb      	str	r3, [r7, #28]
   1b8a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1b8a6:	f005 fa83 	bl	20db0 <PageFree>
   1b8aa:	69bb      	ldr	r3, [r7, #24]
   1b8ac:	4618      	mov	r0, r3
   1b8ae:	4b07      	ldr	r3, [pc, #28]	; (1b8cc <DeleteRecordBegin+0x258>)
   1b8b0:	58e3      	ldr	r3, [r4, r3]
   1b8b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1b8b4:	681b      	ldr	r3, [r3, #0]
   1b8b6:	429a      	cmp	r2, r3
   1b8b8:	d001      	beq.n	1b8be <DeleteRecordBegin+0x24a>
   1b8ba:	f7ed fb73 	bl	8fa4 <__stack_chk_fail>
   1b8be:	f107 0784 	add.w	r7, r7, #132	; 0x84
   1b8c2:	46bd      	mov	sp, r7
   1b8c4:	bd90      	pop	{r4, r7, pc}
   1b8c6:	bf00      	nop
   1b8c8:	00013a90 	.word	0x00013a90
   1b8cc:	000000ac 	.word	0x000000ac
   1b8d0:	0000abce 	.word	0x0000abce
   1b8d4:	0000abd2 	.word	0x0000abd2
   1b8d8:	0000ab82 	.word	0x0000ab82
   1b8dc:	0000ab96 	.word	0x0000ab96
   1b8e0:	0000ab64 	.word	0x0000ab64
   1b8e4:	000000c0 	.word	0x000000c0

0001b8e8 <DeleteRecordBeginWithCkecksum>:
   1b8e8:	b590      	push	{r4, r7, lr}
   1b8ea:	b0bb      	sub	sp, #236	; 0xec
   1b8ec:	af00      	add	r7, sp, #0
   1b8ee:	60f8      	str	r0, [r7, #12]
   1b8f0:	60b9      	str	r1, [r7, #8]
   1b8f2:	607a      	str	r2, [r7, #4]
   1b8f4:	603b      	str	r3, [r7, #0]
   1b8f6:	4cc0      	ldr	r4, [pc, #768]	; (1bbf8 <DeleteRecordBeginWithCkecksum+0x310>)
   1b8f8:	447c      	add	r4, pc
   1b8fa:	4bc0      	ldr	r3, [pc, #768]	; (1bbfc <DeleteRecordBeginWithCkecksum+0x314>)
   1b8fc:	58e3      	ldr	r3, [r4, r3]
   1b8fe:	681b      	ldr	r3, [r3, #0]
   1b900:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   1b904:	231a      	movs	r3, #26
   1b906:	61bb      	str	r3, [r7, #24]
   1b908:	2300      	movs	r3, #0
   1b90a:	627b      	str	r3, [r7, #36]	; 0x24
   1b90c:	2300      	movs	r3, #0
   1b90e:	61fb      	str	r3, [r7, #28]
   1b910:	2300      	movs	r3, #0
   1b912:	623b      	str	r3, [r7, #32]
   1b914:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1b918:	4618      	mov	r0, r3
   1b91a:	4bb9      	ldr	r3, [pc, #740]	; (1bc00 <DeleteRecordBeginWithCkecksum+0x318>)
   1b91c:	447b      	add	r3, pc
   1b91e:	4619      	mov	r1, r3
   1b920:	68fa      	ldr	r2, [r7, #12]
   1b922:	68bb      	ldr	r3, [r7, #8]
   1b924:	f7ed e9c6 	blx	8cb4 <_init+0x154>
   1b928:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1b92c:	4618      	mov	r0, r3
   1b92e:	4bb5      	ldr	r3, [pc, #724]	; (1bc04 <DeleteRecordBeginWithCkecksum+0x31c>)
   1b930:	447b      	add	r3, pc
   1b932:	4619      	mov	r1, r3
   1b934:	f005 f886 	bl	20a44 <FS_open>
   1b938:	61f8      	str	r0, [r7, #28]
   1b93a:	69fb      	ldr	r3, [r7, #28]
   1b93c:	2b00      	cmp	r3, #0
   1b93e:	d102      	bne.n	1b946 <DeleteRecordBeginWithCkecksum+0x5e>
   1b940:	2313      	movs	r3, #19
   1b942:	61bb      	str	r3, [r7, #24]
   1b944:	e149      	b.n	1bbda <DeleteRecordBeginWithCkecksum+0x2f2>
   1b946:	69f8      	ldr	r0, [r7, #28]
   1b948:	f005 f826 	bl	20998 <FS_length>
   1b94c:	62b8      	str	r0, [r7, #40]	; 0x28
   1b94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b950:	4618      	mov	r0, r3
   1b952:	f005 fa03 	bl	20d5c <PageAlloc>
   1b956:	6278      	str	r0, [r7, #36]	; 0x24
   1b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b95a:	2b00      	cmp	r3, #0
   1b95c:	f000 8130 	beq.w	1bbc0 <DeleteRecordBeginWithCkecksum+0x2d8>
   1b960:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
   1b964:	4618      	mov	r0, r3
   1b966:	4ba8      	ldr	r3, [pc, #672]	; (1bc08 <DeleteRecordBeginWithCkecksum+0x320>)
   1b968:	447b      	add	r3, pc
   1b96a:	4619      	mov	r1, r3
   1b96c:	68fa      	ldr	r2, [r7, #12]
   1b96e:	4ba7      	ldr	r3, [pc, #668]	; (1bc0c <DeleteRecordBeginWithCkecksum+0x324>)
   1b970:	447b      	add	r3, pc
   1b972:	f7ed e9a0 	blx	8cb4 <_init+0x154>
   1b976:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
   1b97a:	4618      	mov	r0, r3
   1b97c:	f004 ffe0 	bl	20940 <FS_exist>
   1b980:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b984:	2b02      	cmp	r3, #2
   1b986:	d104      	bne.n	1b992 <DeleteRecordBeginWithCkecksum+0xaa>
   1b988:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
   1b98c:	4618      	mov	r0, r3
   1b98e:	f005 f903 	bl	20b98 <FS_unlink>
   1b992:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
   1b996:	4618      	mov	r0, r3
   1b998:	4b9d      	ldr	r3, [pc, #628]	; (1bc10 <DeleteRecordBeginWithCkecksum+0x328>)
   1b99a:	447b      	add	r3, pc
   1b99c:	4619      	mov	r1, r3
   1b99e:	f005 f851 	bl	20a44 <FS_open>
   1b9a2:	6238      	str	r0, [r7, #32]
   1b9a4:	69f8      	ldr	r0, [r7, #28]
   1b9a6:	2100      	movs	r1, #0
   1b9a8:	2200      	movs	r2, #0
   1b9aa:	f005 f8cb 	bl	20b44 <FS_seek>
   1b9ae:	62f8      	str	r0, [r7, #44]	; 0x2c
   1b9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b9b2:	2b02      	cmp	r3, #2
   1b9b4:	f040 80fb 	bne.w	1bbae <DeleteRecordBeginWithCkecksum+0x2c6>
   1b9b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1b9ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1b9bc:	2201      	movs	r2, #1
   1b9be:	69fb      	ldr	r3, [r7, #28]
   1b9c0:	f005 f86a 	bl	20a98 <FS_read>
   1b9c4:	6338      	str	r0, [r7, #48]	; 0x30
   1b9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b9c8:	2b01      	cmp	r3, #1
   1b9ca:	d007      	beq.n	1b9dc <DeleteRecordBeginWithCkecksum+0xf4>
   1b9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b9ce:	2b00      	cmp	r3, #0
   1b9d0:	f040 80ed 	bne.w	1bbae <DeleteRecordBeginWithCkecksum+0x2c6>
   1b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b9d6:	2b00      	cmp	r3, #0
   1b9d8:	f040 80e9 	bne.w	1bbae <DeleteRecordBeginWithCkecksum+0x2c6>
   1b9dc:	4b8d      	ldr	r3, [pc, #564]	; (1bc14 <DeleteRecordBeginWithCkecksum+0x32c>)
   1b9de:	58e3      	ldr	r3, [r4, r3]
   1b9e0:	461a      	mov	r2, r3
   1b9e2:	683b      	ldr	r3, [r7, #0]
   1b9e4:	212c      	movs	r1, #44	; 0x2c
   1b9e6:	fb01 f303 	mul.w	r3, r1, r3
   1b9ea:	18d3      	adds	r3, r2, r3
   1b9ec:	3328      	adds	r3, #40	; 0x28
   1b9ee:	681b      	ldr	r3, [r3, #0]
   1b9f0:	2b01      	cmp	r3, #1
   1b9f2:	d175      	bne.n	1bae0 <DeleteRecordBeginWithCkecksum+0x1f8>
   1b9f4:	f107 0314 	add.w	r3, r7, #20
   1b9f8:	4618      	mov	r0, r3
   1b9fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1b9fc:	2204      	movs	r2, #4
   1b9fe:	f7ed e93c 	blx	8c78 <_init+0x118>
   1ba02:	697b      	ldr	r3, [r7, #20]
   1ba04:	2b00      	cmp	r3, #0
   1ba06:	f2c0 80d2 	blt.w	1bbae <DeleteRecordBeginWithCkecksum+0x2c6>
   1ba0a:	697b      	ldr	r3, [r7, #20]
   1ba0c:	3304      	adds	r3, #4
   1ba0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1ba10:	18d2      	adds	r2, r2, r3
   1ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ba14:	f1a3 0110 	sub.w	r1, r3, #16
   1ba18:	697b      	ldr	r3, [r7, #20]
   1ba1a:	1acb      	subs	r3, r1, r3
   1ba1c:	3b04      	subs	r3, #4
   1ba1e:	4610      	mov	r0, r2
   1ba20:	4619      	mov	r1, r3
   1ba22:	2201      	movs	r2, #1
   1ba24:	6a3b      	ldr	r3, [r7, #32]
   1ba26:	f005 f90f 	bl	20c48 <FS_write>
   1ba2a:	6338      	str	r0, [r7, #48]	; 0x30
   1ba2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ba2e:	2b01      	cmp	r3, #1
   1ba30:	d00b      	beq.n	1ba4a <DeleteRecordBeginWithCkecksum+0x162>
   1ba32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ba34:	2b00      	cmp	r3, #0
   1ba36:	f040 80ba 	bne.w	1bbae <DeleteRecordBeginWithCkecksum+0x2c6>
   1ba3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ba3c:	f1a3 0210 	sub.w	r2, r3, #16
   1ba40:	697b      	ldr	r3, [r7, #20]
   1ba42:	1ad3      	subs	r3, r2, r3
   1ba44:	2b04      	cmp	r3, #4
   1ba46:	f040 80b2 	bne.w	1bbae <DeleteRecordBeginWithCkecksum+0x2c6>
   1ba4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1ba4e:	4618      	mov	r0, r3
   1ba50:	f003 fb6c 	bl	1f12c <md5_init>
   1ba54:	697b      	ldr	r3, [r7, #20]
   1ba56:	3304      	adds	r3, #4
   1ba58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1ba5a:	18d2      	adds	r2, r2, r3
   1ba5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ba5e:	f1a3 0110 	sub.w	r1, r3, #16
   1ba62:	697b      	ldr	r3, [r7, #20]
   1ba64:	1acb      	subs	r3, r1, r3
   1ba66:	3b04      	subs	r3, #4
   1ba68:	f107 0134 	add.w	r1, r7, #52	; 0x34
   1ba6c:	4608      	mov	r0, r1
   1ba6e:	4611      	mov	r1, r2
   1ba70:	461a      	mov	r2, r3
   1ba72:	f003 fb95 	bl	1f1a0 <md5_append>
   1ba76:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1ba7a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
   1ba7e:	4610      	mov	r0, r2
   1ba80:	4619      	mov	r1, r3
   1ba82:	f003 fc19 	bl	1f2b8 <md5_finish>
   1ba86:	f107 038c 	add.w	r3, r7, #140	; 0x8c
   1ba8a:	4618      	mov	r0, r3
   1ba8c:	2110      	movs	r1, #16
   1ba8e:	2201      	movs	r2, #1
   1ba90:	6a3b      	ldr	r3, [r7, #32]
   1ba92:	f005 f8d9 	bl	20c48 <FS_write>
   1ba96:	6338      	str	r0, [r7, #48]	; 0x30
   1ba98:	69f8      	ldr	r0, [r7, #28]
   1ba9a:	f004 fef7 	bl	2088c <FS_close>
   1ba9e:	62f8      	str	r0, [r7, #44]	; 0x2c
   1baa0:	2300      	movs	r3, #0
   1baa2:	61fb      	str	r3, [r7, #28]
   1baa4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1baa8:	4618      	mov	r0, r3
   1baaa:	f005 f875 	bl	20b98 <FS_unlink>
   1baae:	62f8      	str	r0, [r7, #44]	; 0x2c
   1bab0:	6a38      	ldr	r0, [r7, #32]
   1bab2:	f004 feeb 	bl	2088c <FS_close>
   1bab6:	62f8      	str	r0, [r7, #44]	; 0x2c
   1bab8:	2300      	movs	r3, #0
   1baba:	623b      	str	r3, [r7, #32]
   1babc:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
   1bac0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1bac4:	4610      	mov	r0, r2
   1bac6:	4619      	mov	r1, r3
   1bac8:	f005 f812 	bl	20af0 <FS_rename>
   1bacc:	62f8      	str	r0, [r7, #44]	; 0x2c
   1bace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bad0:	2b02      	cmp	r3, #2
   1bad2:	d16c      	bne.n	1bbae <DeleteRecordBeginWithCkecksum+0x2c6>
   1bad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bad6:	2b01      	cmp	r3, #1
   1bad8:	d169      	bne.n	1bbae <DeleteRecordBeginWithCkecksum+0x2c6>
   1bada:	230a      	movs	r3, #10
   1badc:	61bb      	str	r3, [r7, #24]
   1bade:	e066      	b.n	1bbae <DeleteRecordBeginWithCkecksum+0x2c6>
   1bae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bae2:	f1a3 0210 	sub.w	r2, r3, #16
   1bae6:	687b      	ldr	r3, [r7, #4]
   1bae8:	1ad3      	subs	r3, r2, r3
   1baea:	2b00      	cmp	r3, #0
   1baec:	db5f      	blt.n	1bbae <DeleteRecordBeginWithCkecksum+0x2c6>
   1baee:	687b      	ldr	r3, [r7, #4]
   1baf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1baf2:	18d2      	adds	r2, r2, r3
   1baf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1baf6:	f1a3 0110 	sub.w	r1, r3, #16
   1bafa:	687b      	ldr	r3, [r7, #4]
   1bafc:	1acb      	subs	r3, r1, r3
   1bafe:	4610      	mov	r0, r2
   1bb00:	4619      	mov	r1, r3
   1bb02:	2201      	movs	r2, #1
   1bb04:	6a3b      	ldr	r3, [r7, #32]
   1bb06:	f005 f89f 	bl	20c48 <FS_write>
   1bb0a:	6338      	str	r0, [r7, #48]	; 0x30
   1bb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bb0e:	2b01      	cmp	r3, #1
   1bb10:	d008      	beq.n	1bb24 <DeleteRecordBeginWithCkecksum+0x23c>
   1bb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bb14:	2b00      	cmp	r3, #0
   1bb16:	d14a      	bne.n	1bbae <DeleteRecordBeginWithCkecksum+0x2c6>
   1bb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb1a:	f1a3 0210 	sub.w	r2, r3, #16
   1bb1e:	687b      	ldr	r3, [r7, #4]
   1bb20:	429a      	cmp	r2, r3
   1bb22:	d144      	bne.n	1bbae <DeleteRecordBeginWithCkecksum+0x2c6>
   1bb24:	f107 0334 	add.w	r3, r7, #52	; 0x34
   1bb28:	4618      	mov	r0, r3
   1bb2a:	f003 faff 	bl	1f12c <md5_init>
   1bb2e:	687b      	ldr	r3, [r7, #4]
   1bb30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1bb32:	18d2      	adds	r2, r2, r3
   1bb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb36:	f1a3 0110 	sub.w	r1, r3, #16
   1bb3a:	687b      	ldr	r3, [r7, #4]
   1bb3c:	1acb      	subs	r3, r1, r3
   1bb3e:	f107 0134 	add.w	r1, r7, #52	; 0x34
   1bb42:	4608      	mov	r0, r1
   1bb44:	4611      	mov	r1, r2
   1bb46:	461a      	mov	r2, r3
   1bb48:	f003 fb2a 	bl	1f1a0 <md5_append>
   1bb4c:	f107 0234 	add.w	r2, r7, #52	; 0x34
   1bb50:	f107 038c 	add.w	r3, r7, #140	; 0x8c
   1bb54:	4610      	mov	r0, r2
   1bb56:	4619      	mov	r1, r3
   1bb58:	f003 fbae 	bl	1f2b8 <md5_finish>
   1bb5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
   1bb60:	4618      	mov	r0, r3
   1bb62:	2110      	movs	r1, #16
   1bb64:	2201      	movs	r2, #1
   1bb66:	6a3b      	ldr	r3, [r7, #32]
   1bb68:	f005 f86e 	bl	20c48 <FS_write>
   1bb6c:	6338      	str	r0, [r7, #48]	; 0x30
   1bb6e:	69f8      	ldr	r0, [r7, #28]
   1bb70:	f004 fe8c 	bl	2088c <FS_close>
   1bb74:	2300      	movs	r3, #0
   1bb76:	61fb      	str	r3, [r7, #28]
   1bb78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1bb7c:	4618      	mov	r0, r3
   1bb7e:	f005 f80b 	bl	20b98 <FS_unlink>
   1bb82:	6a38      	ldr	r0, [r7, #32]
   1bb84:	f004 fe82 	bl	2088c <FS_close>
   1bb88:	2300      	movs	r3, #0
   1bb8a:	623b      	str	r3, [r7, #32]
   1bb8c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
   1bb90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1bb94:	4610      	mov	r0, r2
   1bb96:	4619      	mov	r1, r3
   1bb98:	f004 ffaa 	bl	20af0 <FS_rename>
   1bb9c:	62f8      	str	r0, [r7, #44]	; 0x2c
   1bb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bba0:	2b02      	cmp	r3, #2
   1bba2:	d104      	bne.n	1bbae <DeleteRecordBeginWithCkecksum+0x2c6>
   1bba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bba6:	2b01      	cmp	r3, #1
   1bba8:	d101      	bne.n	1bbae <DeleteRecordBeginWithCkecksum+0x2c6>
   1bbaa:	230a      	movs	r3, #10
   1bbac:	61bb      	str	r3, [r7, #24]
   1bbae:	6a3b      	ldr	r3, [r7, #32]
   1bbb0:	2b00      	cmp	r3, #0
   1bbb2:	d007      	beq.n	1bbc4 <DeleteRecordBeginWithCkecksum+0x2dc>
   1bbb4:	6a38      	ldr	r0, [r7, #32]
   1bbb6:	f004 fe69 	bl	2088c <FS_close>
   1bbba:	2300      	movs	r3, #0
   1bbbc:	623b      	str	r3, [r7, #32]
   1bbbe:	e001      	b.n	1bbc4 <DeleteRecordBeginWithCkecksum+0x2dc>
   1bbc0:	231a      	movs	r3, #26
   1bbc2:	61bb      	str	r3, [r7, #24]
   1bbc4:	69fb      	ldr	r3, [r7, #28]
   1bbc6:	2b00      	cmp	r3, #0
   1bbc8:	d004      	beq.n	1bbd4 <DeleteRecordBeginWithCkecksum+0x2ec>
   1bbca:	69f8      	ldr	r0, [r7, #28]
   1bbcc:	f004 fe5e 	bl	2088c <FS_close>
   1bbd0:	2300      	movs	r3, #0
   1bbd2:	61fb      	str	r3, [r7, #28]
   1bbd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1bbd6:	f005 f8eb 	bl	20db0 <PageFree>
   1bbda:	69bb      	ldr	r3, [r7, #24]
   1bbdc:	4618      	mov	r0, r3
   1bbde:	4b07      	ldr	r3, [pc, #28]	; (1bbfc <DeleteRecordBeginWithCkecksum+0x314>)
   1bbe0:	58e3      	ldr	r3, [r4, r3]
   1bbe2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
   1bbe6:	681b      	ldr	r3, [r3, #0]
   1bbe8:	429a      	cmp	r2, r3
   1bbea:	d001      	beq.n	1bbf0 <DeleteRecordBeginWithCkecksum+0x308>
   1bbec:	f7ed f9da 	bl	8fa4 <__stack_chk_fail>
   1bbf0:	f107 07ec 	add.w	r7, r7, #236	; 0xec
   1bbf4:	46bd      	mov	sp, r7
   1bbf6:	bd90      	pop	{r4, r7, pc}
   1bbf8:	0001381c 	.word	0x0001381c
   1bbfc:	000000ac 	.word	0x000000ac
   1bc00:	0000a958 	.word	0x0000a958
   1bc04:	0000a95c 	.word	0x0000a95c
   1bc08:	0000a90c 	.word	0x0000a90c
   1bc0c:	0000a920 	.word	0x0000a920
   1bc10:	0000a8ee 	.word	0x0000a8ee
   1bc14:	000000c0 	.word	0x000000c0

0001bc18 <DeleteRecordMiddle>:
   1bc18:	b590      	push	{r4, r7, lr}
   1bc1a:	b0a5      	sub	sp, #148	; 0x94
   1bc1c:	af00      	add	r7, sp, #0
   1bc1e:	6178      	str	r0, [r7, #20]
   1bc20:	6139      	str	r1, [r7, #16]
   1bc22:	60fa      	str	r2, [r7, #12]
   1bc24:	60bb      	str	r3, [r7, #8]
   1bc26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   1bc2a:	607b      	str	r3, [r7, #4]
   1bc2c:	4cc2      	ldr	r4, [pc, #776]	; (1bf38 <DeleteRecordMiddle+0x320>)
   1bc2e:	447c      	add	r4, pc
   1bc30:	4bc2      	ldr	r3, [pc, #776]	; (1bf3c <DeleteRecordMiddle+0x324>)
   1bc32:	58e3      	ldr	r3, [r4, r3]
   1bc34:	681b      	ldr	r3, [r3, #0]
   1bc36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   1bc3a:	231a      	movs	r3, #26
   1bc3c:	623b      	str	r3, [r7, #32]
   1bc3e:	2300      	movs	r3, #0
   1bc40:	63bb      	str	r3, [r7, #56]	; 0x38
   1bc42:	2300      	movs	r3, #0
   1bc44:	633b      	str	r3, [r7, #48]	; 0x30
   1bc46:	2300      	movs	r3, #0
   1bc48:	637b      	str	r3, [r7, #52]	; 0x34
   1bc4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1bc4e:	4618      	mov	r0, r3
   1bc50:	4bbb      	ldr	r3, [pc, #748]	; (1bf40 <DeleteRecordMiddle+0x328>)
   1bc52:	447b      	add	r3, pc
   1bc54:	4619      	mov	r1, r3
   1bc56:	697a      	ldr	r2, [r7, #20]
   1bc58:	693b      	ldr	r3, [r7, #16]
   1bc5a:	f7ed e82c 	blx	8cb4 <_init+0x154>
   1bc5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1bc62:	4618      	mov	r0, r3
   1bc64:	4bb7      	ldr	r3, [pc, #732]	; (1bf44 <DeleteRecordMiddle+0x32c>)
   1bc66:	447b      	add	r3, pc
   1bc68:	4619      	mov	r1, r3
   1bc6a:	f004 feeb 	bl	20a44 <FS_open>
   1bc6e:	6338      	str	r0, [r7, #48]	; 0x30
   1bc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bc72:	2b00      	cmp	r3, #0
   1bc74:	d102      	bne.n	1bc7c <DeleteRecordMiddle+0x64>
   1bc76:	2313      	movs	r3, #19
   1bc78:	623b      	str	r3, [r7, #32]
   1bc7a:	e14d      	b.n	1bf18 <DeleteRecordMiddle+0x300>
   1bc7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1bc7e:	f004 fe8b 	bl	20998 <FS_length>
   1bc82:	63f8      	str	r0, [r7, #60]	; 0x3c
   1bc84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1bc86:	4618      	mov	r0, r3
   1bc88:	f005 f868 	bl	20d5c <PageAlloc>
   1bc8c:	63b8      	str	r0, [r7, #56]	; 0x38
   1bc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1bc90:	2b00      	cmp	r3, #0
   1bc92:	f000 8134 	beq.w	1befe <DeleteRecordMiddle+0x2e6>
   1bc96:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1bc9a:	4618      	mov	r0, r3
   1bc9c:	4baa      	ldr	r3, [pc, #680]	; (1bf48 <DeleteRecordMiddle+0x330>)
   1bc9e:	447b      	add	r3, pc
   1bca0:	4619      	mov	r1, r3
   1bca2:	697a      	ldr	r2, [r7, #20]
   1bca4:	4ba9      	ldr	r3, [pc, #676]	; (1bf4c <DeleteRecordMiddle+0x334>)
   1bca6:	447b      	add	r3, pc
   1bca8:	f7ed e804 	blx	8cb4 <_init+0x154>
   1bcac:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1bcb0:	4618      	mov	r0, r3
   1bcb2:	f004 fe45 	bl	20940 <FS_exist>
   1bcb6:	6438      	str	r0, [r7, #64]	; 0x40
   1bcb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bcba:	2b02      	cmp	r3, #2
   1bcbc:	d104      	bne.n	1bcc8 <DeleteRecordMiddle+0xb0>
   1bcbe:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1bcc2:	4618      	mov	r0, r3
   1bcc4:	f004 ff68 	bl	20b98 <FS_unlink>
   1bcc8:	f107 0368 	add.w	r3, r7, #104	; 0x68
   1bccc:	4618      	mov	r0, r3
   1bcce:	4ba0      	ldr	r3, [pc, #640]	; (1bf50 <DeleteRecordMiddle+0x338>)
   1bcd0:	447b      	add	r3, pc
   1bcd2:	4619      	mov	r1, r3
   1bcd4:	f004 feb6 	bl	20a44 <FS_open>
   1bcd8:	6378      	str	r0, [r7, #52]	; 0x34
   1bcda:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1bcdc:	2100      	movs	r1, #0
   1bcde:	2200      	movs	r2, #0
   1bce0:	f004 ff30 	bl	20b44 <FS_seek>
   1bce4:	6438      	str	r0, [r7, #64]	; 0x40
   1bce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bce8:	2b02      	cmp	r3, #2
   1bcea:	f040 80ff 	bne.w	1beec <DeleteRecordMiddle+0x2d4>
   1bcee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1bcf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1bcf2:	2201      	movs	r2, #1
   1bcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bcf6:	f004 fecf 	bl	20a98 <FS_read>
   1bcfa:	6278      	str	r0, [r7, #36]	; 0x24
   1bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bcfe:	2b01      	cmp	r3, #1
   1bd00:	d007      	beq.n	1bd12 <DeleteRecordMiddle+0xfa>
   1bd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bd04:	2b00      	cmp	r3, #0
   1bd06:	f040 80f1 	bne.w	1beec <DeleteRecordMiddle+0x2d4>
   1bd0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1bd0c:	2b00      	cmp	r3, #0
   1bd0e:	f040 80ed 	bne.w	1beec <DeleteRecordMiddle+0x2d4>
   1bd12:	4b90      	ldr	r3, [pc, #576]	; (1bf54 <DeleteRecordMiddle+0x33c>)
   1bd14:	58e3      	ldr	r3, [r4, r3]
   1bd16:	461a      	mov	r2, r3
   1bd18:	687b      	ldr	r3, [r7, #4]
   1bd1a:	212c      	movs	r1, #44	; 0x2c
   1bd1c:	fb01 f303 	mul.w	r3, r1, r3
   1bd20:	18d3      	adds	r3, r2, r3
   1bd22:	3328      	adds	r3, #40	; 0x28
   1bd24:	681b      	ldr	r3, [r3, #0]
   1bd26:	2b01      	cmp	r3, #1
   1bd28:	f040 8086 	bne.w	1be38 <DeleteRecordMiddle+0x220>
   1bd2c:	2300      	movs	r3, #0
   1bd2e:	62bb      	str	r3, [r7, #40]	; 0x28
   1bd30:	2300      	movs	r3, #0
   1bd32:	62fb      	str	r3, [r7, #44]	; 0x2c
   1bd34:	e01d      	b.n	1bd72 <DeleteRecordMiddle+0x15a>
   1bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bd38:	2b00      	cmp	r3, #0
   1bd3a:	db14      	blt.n	1bd66 <DeleteRecordMiddle+0x14e>
   1bd3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bd3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1bd40:	429a      	cmp	r2, r3
   1bd42:	da10      	bge.n	1bd66 <DeleteRecordMiddle+0x14e>
   1bd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bd46:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1bd48:	18d3      	adds	r3, r2, r3
   1bd4a:	f107 021c 	add.w	r2, r7, #28
   1bd4e:	4610      	mov	r0, r2
   1bd50:	4619      	mov	r1, r3
   1bd52:	2204      	movs	r2, #4
   1bd54:	f7ec ef90 	blx	8c78 <_init+0x118>
   1bd58:	69fb      	ldr	r3, [r7, #28]
   1bd5a:	461a      	mov	r2, r3
   1bd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bd5e:	18d3      	adds	r3, r2, r3
   1bd60:	3304      	adds	r3, #4
   1bd62:	62bb      	str	r3, [r7, #40]	; 0x28
   1bd64:	e002      	b.n	1bd6c <DeleteRecordMiddle+0x154>
   1bd66:	f04f 33ff 	mov.w	r3, #4294967295
   1bd6a:	62bb      	str	r3, [r7, #40]	; 0x28
   1bd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bd6e:	3301      	adds	r3, #1
   1bd70:	62fb      	str	r3, [r7, #44]	; 0x2c
   1bd72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1bd74:	68bb      	ldr	r3, [r7, #8]
   1bd76:	429a      	cmp	r2, r3
   1bd78:	da02      	bge.n	1bd80 <DeleteRecordMiddle+0x168>
   1bd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bd7c:	2b00      	cmp	r3, #0
   1bd7e:	dada      	bge.n	1bd36 <DeleteRecordMiddle+0x11e>
   1bd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bd82:	2b00      	cmp	r3, #0
   1bd84:	f2c0 80b2 	blt.w	1beec <DeleteRecordMiddle+0x2d4>
   1bd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bd8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1bd8c:	18d3      	adds	r3, r2, r3
   1bd8e:	f107 021c 	add.w	r2, r7, #28
   1bd92:	4610      	mov	r0, r2
   1bd94:	4619      	mov	r1, r3
   1bd96:	2204      	movs	r2, #4
   1bd98:	f7ec ef6e 	blx	8c78 <_init+0x118>
   1bd9c:	69fb      	ldr	r3, [r7, #28]
   1bd9e:	2b00      	cmp	r3, #0
   1bda0:	f340 80a4 	ble.w	1beec <DeleteRecordMiddle+0x2d4>
   1bda4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1bda6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1bda8:	2201      	movs	r2, #1
   1bdaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bdac:	f004 ff4c 	bl	20c48 <FS_write>
   1bdb0:	6278      	str	r0, [r7, #36]	; 0x24
   1bdb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bdb4:	69fb      	ldr	r3, [r7, #28]
   1bdb6:	18d3      	adds	r3, r2, r3
   1bdb8:	3304      	adds	r3, #4
   1bdba:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1bdbc:	18d2      	adds	r2, r2, r3
   1bdbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1bdc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bdc2:	1ac9      	subs	r1, r1, r3
   1bdc4:	69fb      	ldr	r3, [r7, #28]
   1bdc6:	1acb      	subs	r3, r1, r3
   1bdc8:	3b04      	subs	r3, #4
   1bdca:	4610      	mov	r0, r2
   1bdcc:	4619      	mov	r1, r3
   1bdce:	2201      	movs	r2, #1
   1bdd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bdd2:	f004 ff39 	bl	20c48 <FS_write>
   1bdd6:	6278      	str	r0, [r7, #36]	; 0x24
   1bdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bdda:	2b01      	cmp	r3, #1
   1bddc:	d00a      	beq.n	1bdf4 <DeleteRecordMiddle+0x1dc>
   1bdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bde0:	2b00      	cmp	r3, #0
   1bde2:	f040 8083 	bne.w	1beec <DeleteRecordMiddle+0x2d4>
   1bde6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1bde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bdea:	1ad2      	subs	r2, r2, r3
   1bdec:	69fb      	ldr	r3, [r7, #28]
   1bdee:	1ad3      	subs	r3, r2, r3
   1bdf0:	2b04      	cmp	r3, #4
   1bdf2:	d17b      	bne.n	1beec <DeleteRecordMiddle+0x2d4>
   1bdf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1bdf6:	f004 fd49 	bl	2088c <FS_close>
   1bdfa:	2300      	movs	r3, #0
   1bdfc:	633b      	str	r3, [r7, #48]	; 0x30
   1bdfe:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1be02:	4618      	mov	r0, r3
   1be04:	f004 fec8 	bl	20b98 <FS_unlink>
   1be08:	6438      	str	r0, [r7, #64]	; 0x40
   1be0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1be0c:	2b02      	cmp	r3, #2
   1be0e:	d16d      	bne.n	1beec <DeleteRecordMiddle+0x2d4>
   1be10:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1be12:	f004 fd3b 	bl	2088c <FS_close>
   1be16:	2300      	movs	r3, #0
   1be18:	637b      	str	r3, [r7, #52]	; 0x34
   1be1a:	f107 0268 	add.w	r2, r7, #104	; 0x68
   1be1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1be22:	4610      	mov	r0, r2
   1be24:	4619      	mov	r1, r3
   1be26:	f004 fe63 	bl	20af0 <FS_rename>
   1be2a:	6438      	str	r0, [r7, #64]	; 0x40
   1be2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1be2e:	2b02      	cmp	r3, #2
   1be30:	d15c      	bne.n	1beec <DeleteRecordMiddle+0x2d4>
   1be32:	230a      	movs	r3, #10
   1be34:	623b      	str	r3, [r7, #32]
   1be36:	e059      	b.n	1beec <DeleteRecordMiddle+0x2d4>
   1be38:	68bb      	ldr	r3, [r7, #8]
   1be3a:	68fa      	ldr	r2, [r7, #12]
   1be3c:	fb02 f303 	mul.w	r3, r2, r3
   1be40:	62bb      	str	r3, [r7, #40]	; 0x28
   1be42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1be44:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be46:	1ad2      	subs	r2, r2, r3
   1be48:	68fb      	ldr	r3, [r7, #12]
   1be4a:	1ad3      	subs	r3, r2, r3
   1be4c:	2b00      	cmp	r3, #0
   1be4e:	db4d      	blt.n	1beec <DeleteRecordMiddle+0x2d4>
   1be50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1be52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1be54:	2201      	movs	r2, #1
   1be56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1be58:	f004 fef6 	bl	20c48 <FS_write>
   1be5c:	6278      	str	r0, [r7, #36]	; 0x24
   1be5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1be60:	2b01      	cmp	r3, #1
   1be62:	d005      	beq.n	1be70 <DeleteRecordMiddle+0x258>
   1be64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1be66:	2b00      	cmp	r3, #0
   1be68:	d113      	bne.n	1be92 <DeleteRecordMiddle+0x27a>
   1be6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be6c:	2b00      	cmp	r3, #0
   1be6e:	d110      	bne.n	1be92 <DeleteRecordMiddle+0x27a>
   1be70:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1be72:	68fb      	ldr	r3, [r7, #12]
   1be74:	18d3      	adds	r3, r2, r3
   1be76:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1be78:	18d2      	adds	r2, r2, r3
   1be7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1be7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1be7e:	1ac9      	subs	r1, r1, r3
   1be80:	68fb      	ldr	r3, [r7, #12]
   1be82:	1acb      	subs	r3, r1, r3
   1be84:	4610      	mov	r0, r2
   1be86:	4619      	mov	r1, r3
   1be88:	2201      	movs	r2, #1
   1be8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1be8c:	f004 fedc 	bl	20c48 <FS_write>
   1be90:	6278      	str	r0, [r7, #36]	; 0x24
   1be92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1be94:	2b01      	cmp	r3, #1
   1be96:	d008      	beq.n	1beaa <DeleteRecordMiddle+0x292>
   1be98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1be9a:	2b00      	cmp	r3, #0
   1be9c:	d126      	bne.n	1beec <DeleteRecordMiddle+0x2d4>
   1be9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bea2:	1ad2      	subs	r2, r2, r3
   1bea4:	68fb      	ldr	r3, [r7, #12]
   1bea6:	429a      	cmp	r2, r3
   1bea8:	d120      	bne.n	1beec <DeleteRecordMiddle+0x2d4>
   1beaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1beac:	f004 fcee 	bl	2088c <FS_close>
   1beb0:	2300      	movs	r3, #0
   1beb2:	633b      	str	r3, [r7, #48]	; 0x30
   1beb4:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1beb8:	4618      	mov	r0, r3
   1beba:	f004 fe6d 	bl	20b98 <FS_unlink>
   1bebe:	6438      	str	r0, [r7, #64]	; 0x40
   1bec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bec2:	2b02      	cmp	r3, #2
   1bec4:	d112      	bne.n	1beec <DeleteRecordMiddle+0x2d4>
   1bec6:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1bec8:	f004 fce0 	bl	2088c <FS_close>
   1becc:	2300      	movs	r3, #0
   1bece:	637b      	str	r3, [r7, #52]	; 0x34
   1bed0:	f107 0268 	add.w	r2, r7, #104	; 0x68
   1bed4:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1bed8:	4610      	mov	r0, r2
   1beda:	4619      	mov	r1, r3
   1bedc:	f004 fe08 	bl	20af0 <FS_rename>
   1bee0:	6438      	str	r0, [r7, #64]	; 0x40
   1bee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bee4:	2b02      	cmp	r3, #2
   1bee6:	d101      	bne.n	1beec <DeleteRecordMiddle+0x2d4>
   1bee8:	230a      	movs	r3, #10
   1beea:	623b      	str	r3, [r7, #32]
   1beec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1beee:	2b00      	cmp	r3, #0
   1bef0:	d007      	beq.n	1bf02 <DeleteRecordMiddle+0x2ea>
   1bef2:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1bef4:	f004 fcca 	bl	2088c <FS_close>
   1bef8:	2300      	movs	r3, #0
   1befa:	637b      	str	r3, [r7, #52]	; 0x34
   1befc:	e001      	b.n	1bf02 <DeleteRecordMiddle+0x2ea>
   1befe:	231a      	movs	r3, #26
   1bf00:	623b      	str	r3, [r7, #32]
   1bf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bf04:	2b00      	cmp	r3, #0
   1bf06:	d004      	beq.n	1bf12 <DeleteRecordMiddle+0x2fa>
   1bf08:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1bf0a:	f004 fcbf 	bl	2088c <FS_close>
   1bf0e:	2300      	movs	r3, #0
   1bf10:	633b      	str	r3, [r7, #48]	; 0x30
   1bf12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1bf14:	f004 ff4c 	bl	20db0 <PageFree>
   1bf18:	6a3b      	ldr	r3, [r7, #32]
   1bf1a:	4618      	mov	r0, r3
   1bf1c:	4b07      	ldr	r3, [pc, #28]	; (1bf3c <DeleteRecordMiddle+0x324>)
   1bf1e:	58e3      	ldr	r3, [r4, r3]
   1bf20:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1bf24:	681b      	ldr	r3, [r3, #0]
   1bf26:	429a      	cmp	r2, r3
   1bf28:	d001      	beq.n	1bf2e <DeleteRecordMiddle+0x316>
   1bf2a:	f7ed f83b 	bl	8fa4 <__stack_chk_fail>
   1bf2e:	f107 0794 	add.w	r7, r7, #148	; 0x94
   1bf32:	46bd      	mov	sp, r7
   1bf34:	bd90      	pop	{r4, r7, pc}
   1bf36:	bf00      	nop
   1bf38:	000134e6 	.word	0x000134e6
   1bf3c:	000000ac 	.word	0x000000ac
   1bf40:	0000a622 	.word	0x0000a622
   1bf44:	0000a626 	.word	0x0000a626
   1bf48:	0000a5d6 	.word	0x0000a5d6
   1bf4c:	0000a5ea 	.word	0x0000a5ea
   1bf50:	0000a5b8 	.word	0x0000a5b8
   1bf54:	000000c0 	.word	0x000000c0

0001bf58 <DeleteRecordMiddleWithCkecksum>:
   1bf58:	b590      	push	{r4, r7, lr}
   1bf5a:	b0bf      	sub	sp, #252	; 0xfc
   1bf5c:	af00      	add	r7, sp, #0
   1bf5e:	6178      	str	r0, [r7, #20]
   1bf60:	6139      	str	r1, [r7, #16]
   1bf62:	60fa      	str	r2, [r7, #12]
   1bf64:	60bb      	str	r3, [r7, #8]
   1bf66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
   1bf6a:	607b      	str	r3, [r7, #4]
   1bf6c:	4cfd      	ldr	r4, [pc, #1012]	; (1c364 <DeleteRecordMiddleWithCkecksum+0x40c>)
   1bf6e:	447c      	add	r4, pc
   1bf70:	4bfd      	ldr	r3, [pc, #1012]	; (1c368 <DeleteRecordMiddleWithCkecksum+0x410>)
   1bf72:	58e3      	ldr	r3, [r4, r3]
   1bf74:	681b      	ldr	r3, [r3, #0]
   1bf76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   1bf7a:	231a      	movs	r3, #26
   1bf7c:	623b      	str	r3, [r7, #32]
   1bf7e:	2300      	movs	r3, #0
   1bf80:	63bb      	str	r3, [r7, #56]	; 0x38
   1bf82:	2300      	movs	r3, #0
   1bf84:	633b      	str	r3, [r7, #48]	; 0x30
   1bf86:	2300      	movs	r3, #0
   1bf88:	637b      	str	r3, [r7, #52]	; 0x34
   1bf8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1bf8e:	4618      	mov	r0, r3
   1bf90:	4bf6      	ldr	r3, [pc, #984]	; (1c36c <DeleteRecordMiddleWithCkecksum+0x414>)
   1bf92:	447b      	add	r3, pc
   1bf94:	4619      	mov	r1, r3
   1bf96:	697a      	ldr	r2, [r7, #20]
   1bf98:	693b      	ldr	r3, [r7, #16]
   1bf9a:	f7ec ee8c 	blx	8cb4 <_init+0x154>
   1bf9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1bfa2:	4618      	mov	r0, r3
   1bfa4:	4bf2      	ldr	r3, [pc, #968]	; (1c370 <DeleteRecordMiddleWithCkecksum+0x418>)
   1bfa6:	447b      	add	r3, pc
   1bfa8:	4619      	mov	r1, r3
   1bfaa:	f004 fd4b 	bl	20a44 <FS_open>
   1bfae:	6338      	str	r0, [r7, #48]	; 0x30
   1bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bfb2:	2b00      	cmp	r3, #0
   1bfb4:	d102      	bne.n	1bfbc <DeleteRecordMiddleWithCkecksum+0x64>
   1bfb6:	2313      	movs	r3, #19
   1bfb8:	623b      	str	r3, [r7, #32]
   1bfba:	e1c4      	b.n	1c346 <DeleteRecordMiddleWithCkecksum+0x3ee>
   1bfbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1bfbe:	f004 fceb 	bl	20998 <FS_length>
   1bfc2:	63f8      	str	r0, [r7, #60]	; 0x3c
   1bfc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1bfc6:	4618      	mov	r0, r3
   1bfc8:	f004 fec8 	bl	20d5c <PageAlloc>
   1bfcc:	63b8      	str	r0, [r7, #56]	; 0x38
   1bfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1bfd0:	2b00      	cmp	r3, #0
   1bfd2:	f000 81ab 	beq.w	1c32c <DeleteRecordMiddleWithCkecksum+0x3d4>
   1bfd6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   1bfda:	4618      	mov	r0, r3
   1bfdc:	4be5      	ldr	r3, [pc, #916]	; (1c374 <DeleteRecordMiddleWithCkecksum+0x41c>)
   1bfde:	447b      	add	r3, pc
   1bfe0:	4619      	mov	r1, r3
   1bfe2:	697a      	ldr	r2, [r7, #20]
   1bfe4:	4be4      	ldr	r3, [pc, #912]	; (1c378 <DeleteRecordMiddleWithCkecksum+0x420>)
   1bfe6:	447b      	add	r3, pc
   1bfe8:	f7ec ee64 	blx	8cb4 <_init+0x154>
   1bfec:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   1bff0:	4618      	mov	r0, r3
   1bff2:	f004 fca5 	bl	20940 <FS_exist>
   1bff6:	6438      	str	r0, [r7, #64]	; 0x40
   1bff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1bffa:	2b02      	cmp	r3, #2
   1bffc:	d104      	bne.n	1c008 <DeleteRecordMiddleWithCkecksum+0xb0>
   1bffe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   1c002:	4618      	mov	r0, r3
   1c004:	f004 fdc8 	bl	20b98 <FS_unlink>
   1c008:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   1c00c:	4618      	mov	r0, r3
   1c00e:	4bdb      	ldr	r3, [pc, #876]	; (1c37c <DeleteRecordMiddleWithCkecksum+0x424>)
   1c010:	447b      	add	r3, pc
   1c012:	4619      	mov	r1, r3
   1c014:	f004 fd16 	bl	20a44 <FS_open>
   1c018:	6378      	str	r0, [r7, #52]	; 0x34
   1c01a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1c01c:	2100      	movs	r1, #0
   1c01e:	2200      	movs	r2, #0
   1c020:	f004 fd90 	bl	20b44 <FS_seek>
   1c024:	6438      	str	r0, [r7, #64]	; 0x40
   1c026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c028:	2b02      	cmp	r3, #2
   1c02a:	f040 8176 	bne.w	1c31a <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c02e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1c030:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1c032:	2201      	movs	r2, #1
   1c034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c036:	f004 fd2f 	bl	20a98 <FS_read>
   1c03a:	6278      	str	r0, [r7, #36]	; 0x24
   1c03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c03e:	2b01      	cmp	r3, #1
   1c040:	d007      	beq.n	1c052 <DeleteRecordMiddleWithCkecksum+0xfa>
   1c042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c044:	2b00      	cmp	r3, #0
   1c046:	f040 8168 	bne.w	1c31a <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c04c:	2b00      	cmp	r3, #0
   1c04e:	f040 8164 	bne.w	1c31a <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c052:	4bcb      	ldr	r3, [pc, #812]	; (1c380 <DeleteRecordMiddleWithCkecksum+0x428>)
   1c054:	58e3      	ldr	r3, [r4, r3]
   1c056:	461a      	mov	r2, r3
   1c058:	687b      	ldr	r3, [r7, #4]
   1c05a:	212c      	movs	r1, #44	; 0x2c
   1c05c:	fb01 f303 	mul.w	r3, r1, r3
   1c060:	18d3      	adds	r3, r2, r3
   1c062:	3328      	adds	r3, #40	; 0x28
   1c064:	681b      	ldr	r3, [r3, #0]
   1c066:	2b01      	cmp	r3, #1
   1c068:	f040 80c7 	bne.w	1c1fa <DeleteRecordMiddleWithCkecksum+0x2a2>
   1c06c:	2300      	movs	r3, #0
   1c06e:	62bb      	str	r3, [r7, #40]	; 0x28
   1c070:	2300      	movs	r3, #0
   1c072:	62fb      	str	r3, [r7, #44]	; 0x2c
   1c074:	e01d      	b.n	1c0b2 <DeleteRecordMiddleWithCkecksum+0x15a>
   1c076:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c078:	2b00      	cmp	r3, #0
   1c07a:	db14      	blt.n	1c0a6 <DeleteRecordMiddleWithCkecksum+0x14e>
   1c07c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1c080:	429a      	cmp	r2, r3
   1c082:	da10      	bge.n	1c0a6 <DeleteRecordMiddleWithCkecksum+0x14e>
   1c084:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c086:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1c088:	18d3      	adds	r3, r2, r3
   1c08a:	f107 021c 	add.w	r2, r7, #28
   1c08e:	4610      	mov	r0, r2
   1c090:	4619      	mov	r1, r3
   1c092:	2204      	movs	r2, #4
   1c094:	f7ec edf0 	blx	8c78 <_init+0x118>
   1c098:	69fb      	ldr	r3, [r7, #28]
   1c09a:	461a      	mov	r2, r3
   1c09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c09e:	18d3      	adds	r3, r2, r3
   1c0a0:	3304      	adds	r3, #4
   1c0a2:	62bb      	str	r3, [r7, #40]	; 0x28
   1c0a4:	e002      	b.n	1c0ac <DeleteRecordMiddleWithCkecksum+0x154>
   1c0a6:	f04f 33ff 	mov.w	r3, #4294967295
   1c0aa:	62bb      	str	r3, [r7, #40]	; 0x28
   1c0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c0ae:	3301      	adds	r3, #1
   1c0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   1c0b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c0b4:	68bb      	ldr	r3, [r7, #8]
   1c0b6:	429a      	cmp	r2, r3
   1c0b8:	da02      	bge.n	1c0c0 <DeleteRecordMiddleWithCkecksum+0x168>
   1c0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c0bc:	2b00      	cmp	r3, #0
   1c0be:	dada      	bge.n	1c076 <DeleteRecordMiddleWithCkecksum+0x11e>
   1c0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c0c2:	2b00      	cmp	r3, #0
   1c0c4:	f2c0 8129 	blt.w	1c31a <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c0ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1c0cc:	18d3      	adds	r3, r2, r3
   1c0ce:	f107 021c 	add.w	r2, r7, #28
   1c0d2:	4610      	mov	r0, r2
   1c0d4:	4619      	mov	r1, r3
   1c0d6:	2204      	movs	r2, #4
   1c0d8:	f7ec edce 	blx	8c78 <_init+0x118>
   1c0dc:	69fb      	ldr	r3, [r7, #28]
   1c0de:	2b00      	cmp	r3, #0
   1c0e0:	f340 811b 	ble.w	1c31a <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c0e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1c0e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1c0e8:	2201      	movs	r2, #1
   1c0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c0ec:	f004 fdac 	bl	20c48 <FS_write>
   1c0f0:	6278      	str	r0, [r7, #36]	; 0x24
   1c0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c0f4:	2b01      	cmp	r3, #1
   1c0f6:	d005      	beq.n	1c104 <DeleteRecordMiddleWithCkecksum+0x1ac>
   1c0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c0fa:	2b00      	cmp	r3, #0
   1c0fc:	d117      	bne.n	1c12e <DeleteRecordMiddleWithCkecksum+0x1d6>
   1c0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c100:	2b00      	cmp	r3, #0
   1c102:	d114      	bne.n	1c12e <DeleteRecordMiddleWithCkecksum+0x1d6>
   1c104:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c106:	69fb      	ldr	r3, [r7, #28]
   1c108:	18d3      	adds	r3, r2, r3
   1c10a:	3304      	adds	r3, #4
   1c10c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1c10e:	18d2      	adds	r2, r2, r3
   1c110:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1c112:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c114:	1acb      	subs	r3, r1, r3
   1c116:	f1a3 0110 	sub.w	r1, r3, #16
   1c11a:	69fb      	ldr	r3, [r7, #28]
   1c11c:	1acb      	subs	r3, r1, r3
   1c11e:	3b04      	subs	r3, #4
   1c120:	4610      	mov	r0, r2
   1c122:	4619      	mov	r1, r3
   1c124:	2201      	movs	r2, #1
   1c126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c128:	f004 fd8e 	bl	20c48 <FS_write>
   1c12c:	6278      	str	r0, [r7, #36]	; 0x24
   1c12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c130:	2b01      	cmp	r3, #1
   1c132:	d00d      	beq.n	1c150 <DeleteRecordMiddleWithCkecksum+0x1f8>
   1c134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c136:	2b00      	cmp	r3, #0
   1c138:	f040 80ef 	bne.w	1c31a <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c13c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c140:	1ad3      	subs	r3, r2, r3
   1c142:	f1a3 0210 	sub.w	r2, r3, #16
   1c146:	69fb      	ldr	r3, [r7, #28]
   1c148:	1ad3      	subs	r3, r2, r3
   1c14a:	2b04      	cmp	r3, #4
   1c14c:	f040 80e5 	bne.w	1c31a <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c150:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1c154:	4618      	mov	r0, r3
   1c156:	f002 ffe9 	bl	1f12c <md5_init>
   1c15a:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1c15e:	4618      	mov	r0, r3
   1c160:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1c162:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c164:	f003 f81c 	bl	1f1a0 <md5_append>
   1c168:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c16a:	69fb      	ldr	r3, [r7, #28]
   1c16c:	18d3      	adds	r3, r2, r3
   1c16e:	3304      	adds	r3, #4
   1c170:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1c172:	18d2      	adds	r2, r2, r3
   1c174:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1c176:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c178:	1acb      	subs	r3, r1, r3
   1c17a:	f1a3 0110 	sub.w	r1, r3, #16
   1c17e:	69fb      	ldr	r3, [r7, #28]
   1c180:	1acb      	subs	r3, r1, r3
   1c182:	3b04      	subs	r3, #4
   1c184:	f107 0144 	add.w	r1, r7, #68	; 0x44
   1c188:	4608      	mov	r0, r1
   1c18a:	4611      	mov	r1, r2
   1c18c:	461a      	mov	r2, r3
   1c18e:	f003 f807 	bl	1f1a0 <md5_append>
   1c192:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1c196:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1c19a:	4610      	mov	r0, r2
   1c19c:	4619      	mov	r1, r3
   1c19e:	f003 f88b 	bl	1f2b8 <md5_finish>
   1c1a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1c1a6:	4618      	mov	r0, r3
   1c1a8:	2110      	movs	r1, #16
   1c1aa:	2201      	movs	r2, #1
   1c1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c1ae:	f004 fd4b 	bl	20c48 <FS_write>
   1c1b2:	6278      	str	r0, [r7, #36]	; 0x24
   1c1b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1c1b6:	f004 fb69 	bl	2088c <FS_close>
   1c1ba:	2300      	movs	r3, #0
   1c1bc:	633b      	str	r3, [r7, #48]	; 0x30
   1c1be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1c1c2:	4618      	mov	r0, r3
   1c1c4:	f004 fce8 	bl	20b98 <FS_unlink>
   1c1c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1c1ca:	f004 fb5f 	bl	2088c <FS_close>
   1c1ce:	2300      	movs	r3, #0
   1c1d0:	637b      	str	r3, [r7, #52]	; 0x34
   1c1d2:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
   1c1d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1c1da:	4610      	mov	r0, r2
   1c1dc:	4619      	mov	r1, r3
   1c1de:	f004 fc87 	bl	20af0 <FS_rename>
   1c1e2:	6438      	str	r0, [r7, #64]	; 0x40
   1c1e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c1e6:	2b02      	cmp	r3, #2
   1c1e8:	f040 8097 	bne.w	1c31a <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c1ee:	2b01      	cmp	r3, #1
   1c1f0:	f040 8093 	bne.w	1c31a <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c1f4:	230a      	movs	r3, #10
   1c1f6:	623b      	str	r3, [r7, #32]
   1c1f8:	e08f      	b.n	1c31a <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c1fa:	68bb      	ldr	r3, [r7, #8]
   1c1fc:	68fa      	ldr	r2, [r7, #12]
   1c1fe:	fb02 f303 	mul.w	r3, r2, r3
   1c202:	62bb      	str	r3, [r7, #40]	; 0x28
   1c204:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c206:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c208:	1ad2      	subs	r2, r2, r3
   1c20a:	68fb      	ldr	r3, [r7, #12]
   1c20c:	1ad3      	subs	r3, r2, r3
   1c20e:	3b10      	subs	r3, #16
   1c210:	2b00      	cmp	r3, #0
   1c212:	f2c0 8082 	blt.w	1c31a <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c216:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c218:	2b00      	cmp	r3, #0
   1c21a:	db7e      	blt.n	1c31a <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c21c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1c21e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1c220:	2201      	movs	r2, #1
   1c222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c224:	f004 fd10 	bl	20c48 <FS_write>
   1c228:	6278      	str	r0, [r7, #36]	; 0x24
   1c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c22c:	2b01      	cmp	r3, #1
   1c22e:	d005      	beq.n	1c23c <DeleteRecordMiddleWithCkecksum+0x2e4>
   1c230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c232:	2b00      	cmp	r3, #0
   1c234:	d114      	bne.n	1c260 <DeleteRecordMiddleWithCkecksum+0x308>
   1c236:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c238:	2b00      	cmp	r3, #0
   1c23a:	d111      	bne.n	1c260 <DeleteRecordMiddleWithCkecksum+0x308>
   1c23c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c23e:	68fb      	ldr	r3, [r7, #12]
   1c240:	18d3      	adds	r3, r2, r3
   1c242:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1c244:	18d2      	adds	r2, r2, r3
   1c246:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1c248:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c24a:	1ac9      	subs	r1, r1, r3
   1c24c:	68fb      	ldr	r3, [r7, #12]
   1c24e:	1acb      	subs	r3, r1, r3
   1c250:	3b10      	subs	r3, #16
   1c252:	4610      	mov	r0, r2
   1c254:	4619      	mov	r1, r3
   1c256:	2201      	movs	r2, #1
   1c258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c25a:	f004 fcf5 	bl	20c48 <FS_write>
   1c25e:	6278      	str	r0, [r7, #36]	; 0x24
   1c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c262:	2b01      	cmp	r3, #1
   1c264:	d009      	beq.n	1c27a <DeleteRecordMiddleWithCkecksum+0x322>
   1c266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c268:	2b00      	cmp	r3, #0
   1c26a:	d156      	bne.n	1c31a <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c26c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1c26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c270:	1ad2      	subs	r2, r2, r3
   1c272:	68fb      	ldr	r3, [r7, #12]
   1c274:	1ad3      	subs	r3, r2, r3
   1c276:	2b10      	cmp	r3, #16
   1c278:	d14f      	bne.n	1c31a <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c27a:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1c27e:	4618      	mov	r0, r3
   1c280:	f002 ff54 	bl	1f12c <md5_init>
   1c284:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1c288:	4618      	mov	r0, r3
   1c28a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1c28c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c28e:	f002 ff87 	bl	1f1a0 <md5_append>
   1c292:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c294:	68fb      	ldr	r3, [r7, #12]
   1c296:	18d3      	adds	r3, r2, r3
   1c298:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1c29a:	18d2      	adds	r2, r2, r3
   1c29c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c2a0:	1acb      	subs	r3, r1, r3
   1c2a2:	f1a3 0110 	sub.w	r1, r3, #16
   1c2a6:	68fb      	ldr	r3, [r7, #12]
   1c2a8:	1acb      	subs	r3, r1, r3
   1c2aa:	f107 0144 	add.w	r1, r7, #68	; 0x44
   1c2ae:	4608      	mov	r0, r1
   1c2b0:	4611      	mov	r1, r2
   1c2b2:	461a      	mov	r2, r3
   1c2b4:	f002 ff74 	bl	1f1a0 <md5_append>
   1c2b8:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1c2bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1c2c0:	4610      	mov	r0, r2
   1c2c2:	4619      	mov	r1, r3
   1c2c4:	f002 fff8 	bl	1f2b8 <md5_finish>
   1c2c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1c2cc:	4618      	mov	r0, r3
   1c2ce:	2110      	movs	r1, #16
   1c2d0:	2201      	movs	r2, #1
   1c2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c2d4:	f004 fcb8 	bl	20c48 <FS_write>
   1c2d8:	6278      	str	r0, [r7, #36]	; 0x24
   1c2da:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1c2dc:	f004 fad6 	bl	2088c <FS_close>
   1c2e0:	2300      	movs	r3, #0
   1c2e2:	633b      	str	r3, [r7, #48]	; 0x30
   1c2e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1c2e8:	4618      	mov	r0, r3
   1c2ea:	f004 fc55 	bl	20b98 <FS_unlink>
   1c2ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1c2f0:	f004 facc 	bl	2088c <FS_close>
   1c2f4:	2300      	movs	r3, #0
   1c2f6:	637b      	str	r3, [r7, #52]	; 0x34
   1c2f8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
   1c2fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
   1c300:	4610      	mov	r0, r2
   1c302:	4619      	mov	r1, r3
   1c304:	f004 fbf4 	bl	20af0 <FS_rename>
   1c308:	6438      	str	r0, [r7, #64]	; 0x40
   1c30a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1c30c:	2b02      	cmp	r3, #2
   1c30e:	d104      	bne.n	1c31a <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c312:	2b01      	cmp	r3, #1
   1c314:	d101      	bne.n	1c31a <DeleteRecordMiddleWithCkecksum+0x3c2>
   1c316:	230a      	movs	r3, #10
   1c318:	623b      	str	r3, [r7, #32]
   1c31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c31c:	2b00      	cmp	r3, #0
   1c31e:	d007      	beq.n	1c330 <DeleteRecordMiddleWithCkecksum+0x3d8>
   1c320:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1c322:	f004 fab3 	bl	2088c <FS_close>
   1c326:	2300      	movs	r3, #0
   1c328:	637b      	str	r3, [r7, #52]	; 0x34
   1c32a:	e001      	b.n	1c330 <DeleteRecordMiddleWithCkecksum+0x3d8>
   1c32c:	231a      	movs	r3, #26
   1c32e:	623b      	str	r3, [r7, #32]
   1c330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c332:	2b00      	cmp	r3, #0
   1c334:	d004      	beq.n	1c340 <DeleteRecordMiddleWithCkecksum+0x3e8>
   1c336:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1c338:	f004 faa8 	bl	2088c <FS_close>
   1c33c:	2300      	movs	r3, #0
   1c33e:	633b      	str	r3, [r7, #48]	; 0x30
   1c340:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1c342:	f004 fd35 	bl	20db0 <PageFree>
   1c346:	6a3b      	ldr	r3, [r7, #32]
   1c348:	4618      	mov	r0, r3
   1c34a:	4b07      	ldr	r3, [pc, #28]	; (1c368 <DeleteRecordMiddleWithCkecksum+0x410>)
   1c34c:	58e3      	ldr	r3, [r4, r3]
   1c34e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1c352:	681b      	ldr	r3, [r3, #0]
   1c354:	429a      	cmp	r2, r3
   1c356:	d001      	beq.n	1c35c <DeleteRecordMiddleWithCkecksum+0x404>
   1c358:	f7ec fe24 	bl	8fa4 <__stack_chk_fail>
   1c35c:	f107 07fc 	add.w	r7, r7, #252	; 0xfc
   1c360:	46bd      	mov	sp, r7
   1c362:	bd90      	pop	{r4, r7, pc}
   1c364:	000131a6 	.word	0x000131a6
   1c368:	000000ac 	.word	0x000000ac
   1c36c:	0000a2e2 	.word	0x0000a2e2
   1c370:	0000a2e6 	.word	0x0000a2e6
   1c374:	0000a296 	.word	0x0000a296
   1c378:	0000a2aa 	.word	0x0000a2aa
   1c37c:	0000a278 	.word	0x0000a278
   1c380:	000000c0 	.word	0x000000c0

0001c384 <DeleteRecordEnd>:
   1c384:	b590      	push	{r4, r7, lr}
   1c386:	b0a3      	sub	sp, #140	; 0x8c
   1c388:	af00      	add	r7, sp, #0
   1c38a:	60f8      	str	r0, [r7, #12]
   1c38c:	60b9      	str	r1, [r7, #8]
   1c38e:	607a      	str	r2, [r7, #4]
   1c390:	603b      	str	r3, [r7, #0]
   1c392:	4cc0      	ldr	r4, [pc, #768]	; (1c694 <DeleteRecordEnd+0x310>)
   1c394:	447c      	add	r4, pc
   1c396:	4bc0      	ldr	r3, [pc, #768]	; (1c698 <DeleteRecordEnd+0x314>)
   1c398:	58e3      	ldr	r3, [r4, r3]
   1c39a:	681b      	ldr	r3, [r3, #0]
   1c39c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   1c3a0:	231a      	movs	r3, #26
   1c3a2:	61bb      	str	r3, [r7, #24]
   1c3a4:	2300      	movs	r3, #0
   1c3a6:	62bb      	str	r3, [r7, #40]	; 0x28
   1c3a8:	2300      	movs	r3, #0
   1c3aa:	623b      	str	r3, [r7, #32]
   1c3ac:	2300      	movs	r3, #0
   1c3ae:	627b      	str	r3, [r7, #36]	; 0x24
   1c3b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1c3b4:	4618      	mov	r0, r3
   1c3b6:	4bb9      	ldr	r3, [pc, #740]	; (1c69c <DeleteRecordEnd+0x318>)
   1c3b8:	447b      	add	r3, pc
   1c3ba:	4619      	mov	r1, r3
   1c3bc:	68fa      	ldr	r2, [r7, #12]
   1c3be:	68bb      	ldr	r3, [r7, #8]
   1c3c0:	f7ec ec78 	blx	8cb4 <_init+0x154>
   1c3c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1c3c8:	4618      	mov	r0, r3
   1c3ca:	4bb5      	ldr	r3, [pc, #724]	; (1c6a0 <DeleteRecordEnd+0x31c>)
   1c3cc:	447b      	add	r3, pc
   1c3ce:	4619      	mov	r1, r3
   1c3d0:	f004 fb38 	bl	20a44 <FS_open>
   1c3d4:	6238      	str	r0, [r7, #32]
   1c3d6:	6a3b      	ldr	r3, [r7, #32]
   1c3d8:	2b00      	cmp	r3, #0
   1c3da:	d102      	bne.n	1c3e2 <DeleteRecordEnd+0x5e>
   1c3dc:	2313      	movs	r3, #19
   1c3de:	61bb      	str	r3, [r7, #24]
   1c3e0:	e148      	b.n	1c674 <DeleteRecordEnd+0x2f0>
   1c3e2:	6a38      	ldr	r0, [r7, #32]
   1c3e4:	f004 fad8 	bl	20998 <FS_length>
   1c3e8:	62f8      	str	r0, [r7, #44]	; 0x2c
   1c3ea:	6a38      	ldr	r0, [r7, #32]
   1c3ec:	2100      	movs	r1, #0
   1c3ee:	2200      	movs	r2, #0
   1c3f0:	f004 fba8 	bl	20b44 <FS_seek>
   1c3f4:	6338      	str	r0, [r7, #48]	; 0x30
   1c3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c3f8:	2b02      	cmp	r3, #2
   1c3fa:	f040 8133 	bne.w	1c664 <DeleteRecordEnd+0x2e0>
   1c3fe:	4ba9      	ldr	r3, [pc, #676]	; (1c6a4 <DeleteRecordEnd+0x320>)
   1c400:	58e3      	ldr	r3, [r4, r3]
   1c402:	461a      	mov	r2, r3
   1c404:	683b      	ldr	r3, [r7, #0]
   1c406:	212c      	movs	r1, #44	; 0x2c
   1c408:	fb01 f303 	mul.w	r3, r1, r3
   1c40c:	18d3      	adds	r3, r2, r3
   1c40e:	3328      	adds	r3, #40	; 0x28
   1c410:	681b      	ldr	r3, [r3, #0]
   1c412:	2b01      	cmp	r3, #1
   1c414:	f040 80a6 	bne.w	1c564 <DeleteRecordEnd+0x1e0>
   1c418:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1c41c:	4618      	mov	r0, r3
   1c41e:	4ba2      	ldr	r3, [pc, #648]	; (1c6a8 <DeleteRecordEnd+0x324>)
   1c420:	447b      	add	r3, pc
   1c422:	4619      	mov	r1, r3
   1c424:	68fa      	ldr	r2, [r7, #12]
   1c426:	4ba1      	ldr	r3, [pc, #644]	; (1c6ac <DeleteRecordEnd+0x328>)
   1c428:	447b      	add	r3, pc
   1c42a:	f7ec ec44 	blx	8cb4 <_init+0x154>
   1c42e:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1c432:	4618      	mov	r0, r3
   1c434:	f004 fa84 	bl	20940 <FS_exist>
   1c438:	6338      	str	r0, [r7, #48]	; 0x30
   1c43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c43c:	2b02      	cmp	r3, #2
   1c43e:	d104      	bne.n	1c44a <DeleteRecordEnd+0xc6>
   1c440:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1c444:	4618      	mov	r0, r3
   1c446:	f004 fba7 	bl	20b98 <FS_unlink>
   1c44a:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1c44e:	4618      	mov	r0, r3
   1c450:	4b97      	ldr	r3, [pc, #604]	; (1c6b0 <DeleteRecordEnd+0x32c>)
   1c452:	447b      	add	r3, pc
   1c454:	4619      	mov	r1, r3
   1c456:	f004 faf5 	bl	20a44 <FS_open>
   1c45a:	6278      	str	r0, [r7, #36]	; 0x24
   1c45c:	6a38      	ldr	r0, [r7, #32]
   1c45e:	2100      	movs	r1, #0
   1c460:	2200      	movs	r2, #0
   1c462:	f004 fb6f 	bl	20b44 <FS_seek>
   1c466:	6338      	str	r0, [r7, #48]	; 0x30
   1c468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c46a:	2b02      	cmp	r3, #2
   1c46c:	d170      	bne.n	1c550 <DeleteRecordEnd+0x1cc>
   1c46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c470:	4618      	mov	r0, r3
   1c472:	f004 fc73 	bl	20d5c <PageAlloc>
   1c476:	62b8      	str	r0, [r7, #40]	; 0x28
   1c478:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c47a:	2b00      	cmp	r3, #0
   1c47c:	d065      	beq.n	1c54a <DeleteRecordEnd+0x1c6>
   1c47e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c480:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1c482:	2201      	movs	r2, #1
   1c484:	6a3b      	ldr	r3, [r7, #32]
   1c486:	f004 fb07 	bl	20a98 <FS_read>
   1c48a:	6378      	str	r0, [r7, #52]	; 0x34
   1c48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c48e:	2b01      	cmp	r3, #1
   1c490:	d005      	beq.n	1c49e <DeleteRecordEnd+0x11a>
   1c492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c494:	2b00      	cmp	r3, #0
   1c496:	d158      	bne.n	1c54a <DeleteRecordEnd+0x1c6>
   1c498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c49a:	2b00      	cmp	r3, #0
   1c49c:	d155      	bne.n	1c54a <DeleteRecordEnd+0x1c6>
   1c49e:	2300      	movs	r3, #0
   1c4a0:	61fb      	str	r3, [r7, #28]
   1c4a2:	2300      	movs	r3, #0
   1c4a4:	617b      	str	r3, [r7, #20]
   1c4a6:	e00f      	b.n	1c4c8 <DeleteRecordEnd+0x144>
   1c4a8:	69fb      	ldr	r3, [r7, #28]
   1c4aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c4ac:	18d3      	adds	r3, r2, r3
   1c4ae:	f107 0214 	add.w	r2, r7, #20
   1c4b2:	4610      	mov	r0, r2
   1c4b4:	4619      	mov	r1, r3
   1c4b6:	2204      	movs	r2, #4
   1c4b8:	f7ec ebde 	blx	8c78 <_init+0x118>
   1c4bc:	697b      	ldr	r3, [r7, #20]
   1c4be:	461a      	mov	r2, r3
   1c4c0:	69fb      	ldr	r3, [r7, #28]
   1c4c2:	18d3      	adds	r3, r2, r3
   1c4c4:	3304      	adds	r3, #4
   1c4c6:	61fb      	str	r3, [r7, #28]
   1c4c8:	69fa      	ldr	r2, [r7, #28]
   1c4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c4cc:	429a      	cmp	r2, r3
   1c4ce:	dbeb      	blt.n	1c4a8 <DeleteRecordEnd+0x124>
   1c4d0:	697b      	ldr	r3, [r7, #20]
   1c4d2:	3304      	adds	r3, #4
   1c4d4:	63bb      	str	r3, [r7, #56]	; 0x38
   1c4d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c4da:	1ad3      	subs	r3, r2, r3
   1c4dc:	2b00      	cmp	r3, #0
   1c4de:	db34      	blt.n	1c54a <DeleteRecordEnd+0x1c6>
   1c4e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c4e4:	1ad3      	subs	r3, r2, r3
   1c4e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c4e8:	4619      	mov	r1, r3
   1c4ea:	2201      	movs	r2, #1
   1c4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c4ee:	f004 fbab 	bl	20c48 <FS_write>
   1c4f2:	6378      	str	r0, [r7, #52]	; 0x34
   1c4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c4f6:	2b01      	cmp	r3, #1
   1c4f8:	d006      	beq.n	1c508 <DeleteRecordEnd+0x184>
   1c4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c4fc:	2b00      	cmp	r3, #0
   1c4fe:	d124      	bne.n	1c54a <DeleteRecordEnd+0x1c6>
   1c500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c504:	429a      	cmp	r2, r3
   1c506:	d120      	bne.n	1c54a <DeleteRecordEnd+0x1c6>
   1c508:	6a38      	ldr	r0, [r7, #32]
   1c50a:	f004 f9bf 	bl	2088c <FS_close>
   1c50e:	2300      	movs	r3, #0
   1c510:	623b      	str	r3, [r7, #32]
   1c512:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1c516:	4618      	mov	r0, r3
   1c518:	f004 fb3e 	bl	20b98 <FS_unlink>
   1c51c:	6338      	str	r0, [r7, #48]	; 0x30
   1c51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c520:	2b02      	cmp	r3, #2
   1c522:	d112      	bne.n	1c54a <DeleteRecordEnd+0x1c6>
   1c524:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1c526:	f004 f9b1 	bl	2088c <FS_close>
   1c52a:	2300      	movs	r3, #0
   1c52c:	627b      	str	r3, [r7, #36]	; 0x24
   1c52e:	f107 0260 	add.w	r2, r7, #96	; 0x60
   1c532:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1c536:	4610      	mov	r0, r2
   1c538:	4619      	mov	r1, r3
   1c53a:	f004 fad9 	bl	20af0 <FS_rename>
   1c53e:	6338      	str	r0, [r7, #48]	; 0x30
   1c540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c542:	2b02      	cmp	r3, #2
   1c544:	d101      	bne.n	1c54a <DeleteRecordEnd+0x1c6>
   1c546:	230a      	movs	r3, #10
   1c548:	61bb      	str	r3, [r7, #24]
   1c54a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c54c:	f004 fc30 	bl	20db0 <PageFree>
   1c550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c552:	2b00      	cmp	r3, #0
   1c554:	f000 8086 	beq.w	1c664 <DeleteRecordEnd+0x2e0>
   1c558:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1c55a:	f004 f997 	bl	2088c <FS_close>
   1c55e:	2300      	movs	r3, #0
   1c560:	627b      	str	r3, [r7, #36]	; 0x24
   1c562:	e07f      	b.n	1c664 <DeleteRecordEnd+0x2e0>
   1c564:	687b      	ldr	r3, [r7, #4]
   1c566:	63bb      	str	r3, [r7, #56]	; 0x38
   1c568:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1c56c:	4618      	mov	r0, r3
   1c56e:	4b51      	ldr	r3, [pc, #324]	; (1c6b4 <DeleteRecordEnd+0x330>)
   1c570:	447b      	add	r3, pc
   1c572:	4619      	mov	r1, r3
   1c574:	68fa      	ldr	r2, [r7, #12]
   1c576:	4b50      	ldr	r3, [pc, #320]	; (1c6b8 <DeleteRecordEnd+0x334>)
   1c578:	447b      	add	r3, pc
   1c57a:	f7ec eb9c 	blx	8cb4 <_init+0x154>
   1c57e:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1c582:	4618      	mov	r0, r3
   1c584:	f004 f9dc 	bl	20940 <FS_exist>
   1c588:	6338      	str	r0, [r7, #48]	; 0x30
   1c58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c58c:	2b02      	cmp	r3, #2
   1c58e:	d104      	bne.n	1c59a <DeleteRecordEnd+0x216>
   1c590:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1c594:	4618      	mov	r0, r3
   1c596:	f004 faff 	bl	20b98 <FS_unlink>
   1c59a:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1c59e:	4618      	mov	r0, r3
   1c5a0:	4b46      	ldr	r3, [pc, #280]	; (1c6bc <DeleteRecordEnd+0x338>)
   1c5a2:	447b      	add	r3, pc
   1c5a4:	4619      	mov	r1, r3
   1c5a6:	f004 fa4d 	bl	20a44 <FS_open>
   1c5aa:	6278      	str	r0, [r7, #36]	; 0x24
   1c5ac:	6a38      	ldr	r0, [r7, #32]
   1c5ae:	2100      	movs	r1, #0
   1c5b0:	2200      	movs	r2, #0
   1c5b2:	f004 fac7 	bl	20b44 <FS_seek>
   1c5b6:	6338      	str	r0, [r7, #48]	; 0x30
   1c5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c5ba:	2b02      	cmp	r3, #2
   1c5bc:	d14a      	bne.n	1c654 <DeleteRecordEnd+0x2d0>
   1c5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c5c0:	4618      	mov	r0, r3
   1c5c2:	f004 fbcb 	bl	20d5c <PageAlloc>
   1c5c6:	62b8      	str	r0, [r7, #40]	; 0x28
   1c5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c5ca:	2b00      	cmp	r3, #0
   1c5cc:	d03f      	beq.n	1c64e <DeleteRecordEnd+0x2ca>
   1c5ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c5d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1c5d2:	2201      	movs	r2, #1
   1c5d4:	6a3b      	ldr	r3, [r7, #32]
   1c5d6:	f004 fa5f 	bl	20a98 <FS_read>
   1c5da:	6378      	str	r0, [r7, #52]	; 0x34
   1c5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c5de:	2b01      	cmp	r3, #1
   1c5e0:	d005      	beq.n	1c5ee <DeleteRecordEnd+0x26a>
   1c5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c5e4:	2b00      	cmp	r3, #0
   1c5e6:	d132      	bne.n	1c64e <DeleteRecordEnd+0x2ca>
   1c5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c5ea:	2b00      	cmp	r3, #0
   1c5ec:	d12f      	bne.n	1c64e <DeleteRecordEnd+0x2ca>
   1c5ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c5f2:	1ad3      	subs	r3, r2, r3
   1c5f4:	2b00      	cmp	r3, #0
   1c5f6:	db2a      	blt.n	1c64e <DeleteRecordEnd+0x2ca>
   1c5f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1c5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c5fc:	1ad3      	subs	r3, r2, r3
   1c5fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c600:	4619      	mov	r1, r3
   1c602:	2201      	movs	r2, #1
   1c604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c606:	f004 fb1f 	bl	20c48 <FS_write>
   1c60a:	6378      	str	r0, [r7, #52]	; 0x34
   1c60c:	6a38      	ldr	r0, [r7, #32]
   1c60e:	f004 f93d 	bl	2088c <FS_close>
   1c612:	2300      	movs	r3, #0
   1c614:	623b      	str	r3, [r7, #32]
   1c616:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1c61a:	4618      	mov	r0, r3
   1c61c:	f004 fabc 	bl	20b98 <FS_unlink>
   1c620:	6338      	str	r0, [r7, #48]	; 0x30
   1c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c624:	2b02      	cmp	r3, #2
   1c626:	d112      	bne.n	1c64e <DeleteRecordEnd+0x2ca>
   1c628:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1c62a:	f004 f92f 	bl	2088c <FS_close>
   1c62e:	2300      	movs	r3, #0
   1c630:	627b      	str	r3, [r7, #36]	; 0x24
   1c632:	f107 0260 	add.w	r2, r7, #96	; 0x60
   1c636:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1c63a:	4610      	mov	r0, r2
   1c63c:	4619      	mov	r1, r3
   1c63e:	f004 fa57 	bl	20af0 <FS_rename>
   1c642:	6338      	str	r0, [r7, #48]	; 0x30
   1c644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c646:	2b02      	cmp	r3, #2
   1c648:	d101      	bne.n	1c64e <DeleteRecordEnd+0x2ca>
   1c64a:	230a      	movs	r3, #10
   1c64c:	61bb      	str	r3, [r7, #24]
   1c64e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c650:	f004 fbae 	bl	20db0 <PageFree>
   1c654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c656:	2b00      	cmp	r3, #0
   1c658:	d004      	beq.n	1c664 <DeleteRecordEnd+0x2e0>
   1c65a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1c65c:	f004 f916 	bl	2088c <FS_close>
   1c660:	2300      	movs	r3, #0
   1c662:	627b      	str	r3, [r7, #36]	; 0x24
   1c664:	6a3b      	ldr	r3, [r7, #32]
   1c666:	2b00      	cmp	r3, #0
   1c668:	d004      	beq.n	1c674 <DeleteRecordEnd+0x2f0>
   1c66a:	6a38      	ldr	r0, [r7, #32]
   1c66c:	f004 f90e 	bl	2088c <FS_close>
   1c670:	2300      	movs	r3, #0
   1c672:	623b      	str	r3, [r7, #32]
   1c674:	69bb      	ldr	r3, [r7, #24]
   1c676:	4618      	mov	r0, r3
   1c678:	4b07      	ldr	r3, [pc, #28]	; (1c698 <DeleteRecordEnd+0x314>)
   1c67a:	58e3      	ldr	r3, [r4, r3]
   1c67c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   1c680:	681b      	ldr	r3, [r3, #0]
   1c682:	429a      	cmp	r2, r3
   1c684:	d001      	beq.n	1c68a <DeleteRecordEnd+0x306>
   1c686:	f7ec fc8d 	bl	8fa4 <__stack_chk_fail>
   1c68a:	f107 078c 	add.w	r7, r7, #140	; 0x8c
   1c68e:	46bd      	mov	sp, r7
   1c690:	bd90      	pop	{r4, r7, pc}
   1c692:	bf00      	nop
   1c694:	00012d80 	.word	0x00012d80
   1c698:	000000ac 	.word	0x000000ac
   1c69c:	00009ebc 	.word	0x00009ebc
   1c6a0:	00009ec0 	.word	0x00009ec0
   1c6a4:	000000c0 	.word	0x000000c0
   1c6a8:	00009e54 	.word	0x00009e54
   1c6ac:	00009e68 	.word	0x00009e68
   1c6b0:	00009e36 	.word	0x00009e36
   1c6b4:	00009d04 	.word	0x00009d04
   1c6b8:	00009d18 	.word	0x00009d18
   1c6bc:	00009ce6 	.word	0x00009ce6

0001c6c0 <DeleteRecordEndWithCkecksum>:
   1c6c0:	b590      	push	{r4, r7, lr}
   1c6c2:	b0bd      	sub	sp, #244	; 0xf4
   1c6c4:	af00      	add	r7, sp, #0
   1c6c6:	60f8      	str	r0, [r7, #12]
   1c6c8:	60b9      	str	r1, [r7, #8]
   1c6ca:	607a      	str	r2, [r7, #4]
   1c6cc:	603b      	str	r3, [r7, #0]
   1c6ce:	4cc7      	ldr	r4, [pc, #796]	; (1c9ec <DeleteRecordEndWithCkecksum+0x32c>)
   1c6d0:	447c      	add	r4, pc
   1c6d2:	4bc7      	ldr	r3, [pc, #796]	; (1c9f0 <DeleteRecordEndWithCkecksum+0x330>)
   1c6d4:	58e3      	ldr	r3, [r4, r3]
   1c6d6:	681b      	ldr	r3, [r3, #0]
   1c6d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
   1c6dc:	231a      	movs	r3, #26
   1c6de:	61bb      	str	r3, [r7, #24]
   1c6e0:	2300      	movs	r3, #0
   1c6e2:	62bb      	str	r3, [r7, #40]	; 0x28
   1c6e4:	2300      	movs	r3, #0
   1c6e6:	623b      	str	r3, [r7, #32]
   1c6e8:	2300      	movs	r3, #0
   1c6ea:	627b      	str	r3, [r7, #36]	; 0x24
   1c6ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1c6f0:	4618      	mov	r0, r3
   1c6f2:	4bc0      	ldr	r3, [pc, #768]	; (1c9f4 <DeleteRecordEndWithCkecksum+0x334>)
   1c6f4:	447b      	add	r3, pc
   1c6f6:	4619      	mov	r1, r3
   1c6f8:	68fa      	ldr	r2, [r7, #12]
   1c6fa:	68bb      	ldr	r3, [r7, #8]
   1c6fc:	f7ec eada 	blx	8cb4 <_init+0x154>
   1c700:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1c704:	4618      	mov	r0, r3
   1c706:	4bbc      	ldr	r3, [pc, #752]	; (1c9f8 <DeleteRecordEndWithCkecksum+0x338>)
   1c708:	447b      	add	r3, pc
   1c70a:	4619      	mov	r1, r3
   1c70c:	f004 f99a 	bl	20a44 <FS_open>
   1c710:	6238      	str	r0, [r7, #32]
   1c712:	6a3b      	ldr	r3, [r7, #32]
   1c714:	2b00      	cmp	r3, #0
   1c716:	d102      	bne.n	1c71e <DeleteRecordEndWithCkecksum+0x5e>
   1c718:	2313      	movs	r3, #19
   1c71a:	61bb      	str	r3, [r7, #24]
   1c71c:	e157      	b.n	1c9ce <DeleteRecordEndWithCkecksum+0x30e>
   1c71e:	6a38      	ldr	r0, [r7, #32]
   1c720:	f004 f93a 	bl	20998 <FS_length>
   1c724:	62f8      	str	r0, [r7, #44]	; 0x2c
   1c726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c728:	4618      	mov	r0, r3
   1c72a:	f004 fb17 	bl	20d5c <PageAlloc>
   1c72e:	62b8      	str	r0, [r7, #40]	; 0x28
   1c730:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c732:	2b00      	cmp	r3, #0
   1c734:	f000 813e 	beq.w	1c9b4 <DeleteRecordEndWithCkecksum+0x2f4>
   1c738:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   1c73c:	4618      	mov	r0, r3
   1c73e:	4baf      	ldr	r3, [pc, #700]	; (1c9fc <DeleteRecordEndWithCkecksum+0x33c>)
   1c740:	447b      	add	r3, pc
   1c742:	4619      	mov	r1, r3
   1c744:	68fa      	ldr	r2, [r7, #12]
   1c746:	4bae      	ldr	r3, [pc, #696]	; (1ca00 <DeleteRecordEndWithCkecksum+0x340>)
   1c748:	447b      	add	r3, pc
   1c74a:	f7ec eab4 	blx	8cb4 <_init+0x154>
   1c74e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   1c752:	4618      	mov	r0, r3
   1c754:	f004 f8f4 	bl	20940 <FS_exist>
   1c758:	6338      	str	r0, [r7, #48]	; 0x30
   1c75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c75c:	2b02      	cmp	r3, #2
   1c75e:	d104      	bne.n	1c76a <DeleteRecordEndWithCkecksum+0xaa>
   1c760:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   1c764:	4618      	mov	r0, r3
   1c766:	f004 fa17 	bl	20b98 <FS_unlink>
   1c76a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   1c76e:	4618      	mov	r0, r3
   1c770:	4ba4      	ldr	r3, [pc, #656]	; (1ca04 <DeleteRecordEndWithCkecksum+0x344>)
   1c772:	447b      	add	r3, pc
   1c774:	4619      	mov	r1, r3
   1c776:	f004 f965 	bl	20a44 <FS_open>
   1c77a:	6278      	str	r0, [r7, #36]	; 0x24
   1c77c:	6a38      	ldr	r0, [r7, #32]
   1c77e:	2100      	movs	r1, #0
   1c780:	2200      	movs	r2, #0
   1c782:	f004 f9df 	bl	20b44 <FS_seek>
   1c786:	6338      	str	r0, [r7, #48]	; 0x30
   1c788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c78a:	2b02      	cmp	r3, #2
   1c78c:	f040 8109 	bne.w	1c9a2 <DeleteRecordEndWithCkecksum+0x2e2>
   1c790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1c794:	2201      	movs	r2, #1
   1c796:	6a3b      	ldr	r3, [r7, #32]
   1c798:	f004 f97e 	bl	20a98 <FS_read>
   1c79c:	6378      	str	r0, [r7, #52]	; 0x34
   1c79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c7a0:	2b01      	cmp	r3, #1
   1c7a2:	d007      	beq.n	1c7b4 <DeleteRecordEndWithCkecksum+0xf4>
   1c7a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c7a6:	2b00      	cmp	r3, #0
   1c7a8:	f040 80fb 	bne.w	1c9a2 <DeleteRecordEndWithCkecksum+0x2e2>
   1c7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c7ae:	2b00      	cmp	r3, #0
   1c7b0:	f040 80f7 	bne.w	1c9a2 <DeleteRecordEndWithCkecksum+0x2e2>
   1c7b4:	4b94      	ldr	r3, [pc, #592]	; (1ca08 <DeleteRecordEndWithCkecksum+0x348>)
   1c7b6:	58e3      	ldr	r3, [r4, r3]
   1c7b8:	461a      	mov	r2, r3
   1c7ba:	683b      	ldr	r3, [r7, #0]
   1c7bc:	212c      	movs	r1, #44	; 0x2c
   1c7be:	fb01 f303 	mul.w	r3, r1, r3
   1c7c2:	18d3      	adds	r3, r2, r3
   1c7c4:	3328      	adds	r3, #40	; 0x28
   1c7c6:	681b      	ldr	r3, [r3, #0]
   1c7c8:	2b01      	cmp	r3, #1
   1c7ca:	f040 8087 	bne.w	1c8dc <DeleteRecordEndWithCkecksum+0x21c>
   1c7ce:	2300      	movs	r3, #0
   1c7d0:	61fb      	str	r3, [r7, #28]
   1c7d2:	2300      	movs	r3, #0
   1c7d4:	617b      	str	r3, [r7, #20]
   1c7d6:	e00f      	b.n	1c7f8 <DeleteRecordEndWithCkecksum+0x138>
   1c7d8:	69fb      	ldr	r3, [r7, #28]
   1c7da:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c7dc:	18d3      	adds	r3, r2, r3
   1c7de:	f107 0214 	add.w	r2, r7, #20
   1c7e2:	4610      	mov	r0, r2
   1c7e4:	4619      	mov	r1, r3
   1c7e6:	2204      	movs	r2, #4
   1c7e8:	f7ec ea46 	blx	8c78 <_init+0x118>
   1c7ec:	697b      	ldr	r3, [r7, #20]
   1c7ee:	461a      	mov	r2, r3
   1c7f0:	69fb      	ldr	r3, [r7, #28]
   1c7f2:	18d3      	adds	r3, r2, r3
   1c7f4:	3304      	adds	r3, #4
   1c7f6:	61fb      	str	r3, [r7, #28]
   1c7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c7fa:	f1a3 0210 	sub.w	r2, r3, #16
   1c7fe:	69fb      	ldr	r3, [r7, #28]
   1c800:	429a      	cmp	r2, r3
   1c802:	dce9      	bgt.n	1c7d8 <DeleteRecordEndWithCkecksum+0x118>
   1c804:	697b      	ldr	r3, [r7, #20]
   1c806:	3304      	adds	r3, #4
   1c808:	63bb      	str	r3, [r7, #56]	; 0x38
   1c80a:	697b      	ldr	r3, [r7, #20]
   1c80c:	2b00      	cmp	r3, #0
   1c80e:	f2c0 80c8 	blt.w	1c9a2 <DeleteRecordEndWithCkecksum+0x2e2>
   1c812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c814:	f1a3 0210 	sub.w	r2, r3, #16
   1c818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c81a:	1ad3      	subs	r3, r2, r3
   1c81c:	2b00      	cmp	r3, #0
   1c81e:	f2c0 80c0 	blt.w	1c9a2 <DeleteRecordEndWithCkecksum+0x2e2>
   1c822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c824:	f1a3 0210 	sub.w	r2, r3, #16
   1c828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c82a:	1ad3      	subs	r3, r2, r3
   1c82c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c82e:	4619      	mov	r1, r3
   1c830:	2201      	movs	r2, #1
   1c832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c834:	f004 fa08 	bl	20c48 <FS_write>
   1c838:	6378      	str	r0, [r7, #52]	; 0x34
   1c83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c83c:	2b01      	cmp	r3, #1
   1c83e:	d00a      	beq.n	1c856 <DeleteRecordEndWithCkecksum+0x196>
   1c840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c842:	2b00      	cmp	r3, #0
   1c844:	f040 80ad 	bne.w	1c9a2 <DeleteRecordEndWithCkecksum+0x2e2>
   1c848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c84a:	f1a3 0210 	sub.w	r2, r3, #16
   1c84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c850:	429a      	cmp	r2, r3
   1c852:	f040 80a6 	bne.w	1c9a2 <DeleteRecordEndWithCkecksum+0x2e2>
   1c856:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1c85a:	4618      	mov	r0, r3
   1c85c:	f002 fc66 	bl	1f12c <md5_init>
   1c860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c862:	f1a3 0210 	sub.w	r2, r3, #16
   1c866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c868:	1ad3      	subs	r3, r2, r3
   1c86a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1c86e:	4610      	mov	r0, r2
   1c870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1c872:	461a      	mov	r2, r3
   1c874:	f002 fc94 	bl	1f1a0 <md5_append>
   1c878:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1c87c:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1c880:	4610      	mov	r0, r2
   1c882:	4619      	mov	r1, r3
   1c884:	f002 fd18 	bl	1f2b8 <md5_finish>
   1c888:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1c88c:	4618      	mov	r0, r3
   1c88e:	2110      	movs	r1, #16
   1c890:	2201      	movs	r2, #1
   1c892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c894:	f004 f9d8 	bl	20c48 <FS_write>
   1c898:	6378      	str	r0, [r7, #52]	; 0x34
   1c89a:	6a38      	ldr	r0, [r7, #32]
   1c89c:	f003 fff6 	bl	2088c <FS_close>
   1c8a0:	2300      	movs	r3, #0
   1c8a2:	623b      	str	r3, [r7, #32]
   1c8a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1c8a8:	4618      	mov	r0, r3
   1c8aa:	f004 f975 	bl	20b98 <FS_unlink>
   1c8ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1c8b0:	f003 ffec 	bl	2088c <FS_close>
   1c8b4:	2300      	movs	r3, #0
   1c8b6:	627b      	str	r3, [r7, #36]	; 0x24
   1c8b8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   1c8bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1c8c0:	4610      	mov	r0, r2
   1c8c2:	4619      	mov	r1, r3
   1c8c4:	f004 f914 	bl	20af0 <FS_rename>
   1c8c8:	6338      	str	r0, [r7, #48]	; 0x30
   1c8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c8cc:	2b02      	cmp	r3, #2
   1c8ce:	d168      	bne.n	1c9a2 <DeleteRecordEndWithCkecksum+0x2e2>
   1c8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c8d2:	2b01      	cmp	r3, #1
   1c8d4:	d165      	bne.n	1c9a2 <DeleteRecordEndWithCkecksum+0x2e2>
   1c8d6:	230a      	movs	r3, #10
   1c8d8:	61bb      	str	r3, [r7, #24]
   1c8da:	e062      	b.n	1c9a2 <DeleteRecordEndWithCkecksum+0x2e2>
   1c8dc:	687b      	ldr	r3, [r7, #4]
   1c8de:	63bb      	str	r3, [r7, #56]	; 0x38
   1c8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c8e2:	f1a3 0210 	sub.w	r2, r3, #16
   1c8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c8e8:	1ad3      	subs	r3, r2, r3
   1c8ea:	2b00      	cmp	r3, #0
   1c8ec:	db59      	blt.n	1c9a2 <DeleteRecordEndWithCkecksum+0x2e2>
   1c8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c8f0:	f1a3 0210 	sub.w	r2, r3, #16
   1c8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c8f6:	1ad3      	subs	r3, r2, r3
   1c8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c8fa:	4619      	mov	r1, r3
   1c8fc:	2201      	movs	r2, #1
   1c8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c900:	f004 f9a2 	bl	20c48 <FS_write>
   1c904:	6378      	str	r0, [r7, #52]	; 0x34
   1c906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c908:	2b01      	cmp	r3, #1
   1c90a:	d008      	beq.n	1c91e <DeleteRecordEndWithCkecksum+0x25e>
   1c90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c90e:	2b00      	cmp	r3, #0
   1c910:	d147      	bne.n	1c9a2 <DeleteRecordEndWithCkecksum+0x2e2>
   1c912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c914:	f1a3 0210 	sub.w	r2, r3, #16
   1c918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c91a:	429a      	cmp	r2, r3
   1c91c:	d141      	bne.n	1c9a2 <DeleteRecordEndWithCkecksum+0x2e2>
   1c91e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1c922:	4618      	mov	r0, r3
   1c924:	f002 fc02 	bl	1f12c <md5_init>
   1c928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c92a:	f1a3 0210 	sub.w	r2, r3, #16
   1c92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1c930:	1ad3      	subs	r3, r2, r3
   1c932:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1c936:	4610      	mov	r0, r2
   1c938:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1c93a:	461a      	mov	r2, r3
   1c93c:	f002 fc30 	bl	1f1a0 <md5_append>
   1c940:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1c944:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1c948:	4610      	mov	r0, r2
   1c94a:	4619      	mov	r1, r3
   1c94c:	f002 fcb4 	bl	1f2b8 <md5_finish>
   1c950:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1c954:	4618      	mov	r0, r3
   1c956:	2110      	movs	r1, #16
   1c958:	2201      	movs	r2, #1
   1c95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c95c:	f004 f974 	bl	20c48 <FS_write>
   1c960:	6378      	str	r0, [r7, #52]	; 0x34
   1c962:	6a38      	ldr	r0, [r7, #32]
   1c964:	f003 ff92 	bl	2088c <FS_close>
   1c968:	2300      	movs	r3, #0
   1c96a:	623b      	str	r3, [r7, #32]
   1c96c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1c970:	4618      	mov	r0, r3
   1c972:	f004 f911 	bl	20b98 <FS_unlink>
   1c976:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1c978:	f003 ff88 	bl	2088c <FS_close>
   1c97c:	2300      	movs	r3, #0
   1c97e:	627b      	str	r3, [r7, #36]	; 0x24
   1c980:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   1c984:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
   1c988:	4610      	mov	r0, r2
   1c98a:	4619      	mov	r1, r3
   1c98c:	f004 f8b0 	bl	20af0 <FS_rename>
   1c990:	6338      	str	r0, [r7, #48]	; 0x30
   1c992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c994:	2b02      	cmp	r3, #2
   1c996:	d104      	bne.n	1c9a2 <DeleteRecordEndWithCkecksum+0x2e2>
   1c998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c99a:	2b01      	cmp	r3, #1
   1c99c:	d101      	bne.n	1c9a2 <DeleteRecordEndWithCkecksum+0x2e2>
   1c99e:	230a      	movs	r3, #10
   1c9a0:	61bb      	str	r3, [r7, #24]
   1c9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c9a4:	2b00      	cmp	r3, #0
   1c9a6:	d007      	beq.n	1c9b8 <DeleteRecordEndWithCkecksum+0x2f8>
   1c9a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1c9aa:	f003 ff6f 	bl	2088c <FS_close>
   1c9ae:	2300      	movs	r3, #0
   1c9b0:	627b      	str	r3, [r7, #36]	; 0x24
   1c9b2:	e001      	b.n	1c9b8 <DeleteRecordEndWithCkecksum+0x2f8>
   1c9b4:	231a      	movs	r3, #26
   1c9b6:	61bb      	str	r3, [r7, #24]
   1c9b8:	6a3b      	ldr	r3, [r7, #32]
   1c9ba:	2b00      	cmp	r3, #0
   1c9bc:	d004      	beq.n	1c9c8 <DeleteRecordEndWithCkecksum+0x308>
   1c9be:	6a38      	ldr	r0, [r7, #32]
   1c9c0:	f003 ff64 	bl	2088c <FS_close>
   1c9c4:	2300      	movs	r3, #0
   1c9c6:	623b      	str	r3, [r7, #32]
   1c9c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c9ca:	f004 f9f1 	bl	20db0 <PageFree>
   1c9ce:	69bb      	ldr	r3, [r7, #24]
   1c9d0:	4618      	mov	r0, r3
   1c9d2:	4b07      	ldr	r3, [pc, #28]	; (1c9f0 <DeleteRecordEndWithCkecksum+0x330>)
   1c9d4:	58e3      	ldr	r3, [r4, r3]
   1c9d6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
   1c9da:	681b      	ldr	r3, [r3, #0]
   1c9dc:	429a      	cmp	r2, r3
   1c9de:	d001      	beq.n	1c9e4 <DeleteRecordEndWithCkecksum+0x324>
   1c9e0:	f7ec fae0 	bl	8fa4 <__stack_chk_fail>
   1c9e4:	f107 07f4 	add.w	r7, r7, #244	; 0xf4
   1c9e8:	46bd      	mov	sp, r7
   1c9ea:	bd90      	pop	{r4, r7, pc}
   1c9ec:	00012a44 	.word	0x00012a44
   1c9f0:	000000ac 	.word	0x000000ac
   1c9f4:	00009b80 	.word	0x00009b80
   1c9f8:	00009b84 	.word	0x00009b84
   1c9fc:	00009b34 	.word	0x00009b34
   1ca00:	00009b48 	.word	0x00009b48
   1ca04:	00009b16 	.word	0x00009b16
   1ca08:	000000c0 	.word	0x000000c0

0001ca0c <IsFileEmpty>:
   1ca0c:	b580      	push	{r7, lr}
   1ca0e:	b084      	sub	sp, #16
   1ca10:	af00      	add	r7, sp, #0
   1ca12:	6078      	str	r0, [r7, #4]
   1ca14:	6039      	str	r1, [r7, #0]
   1ca16:	4b11      	ldr	r3, [pc, #68]	; (1ca5c <IsFileEmpty+0x50>)
   1ca18:	447b      	add	r3, pc
   1ca1a:	4a11      	ldr	r2, [pc, #68]	; (1ca60 <IsFileEmpty+0x54>)
   1ca1c:	589a      	ldr	r2, [r3, r2]
   1ca1e:	6812      	ldr	r2, [r2, #0]
   1ca20:	60fa      	str	r2, [r7, #12]
   1ca22:	683a      	ldr	r2, [r7, #0]
   1ca24:	2a00      	cmp	r2, #0
   1ca26:	d102      	bne.n	1ca2e <IsFileEmpty+0x22>
   1ca28:	687a      	ldr	r2, [r7, #4]
   1ca2a:	2a00      	cmp	r2, #0
   1ca2c:	dc05      	bgt.n	1ca3a <IsFileEmpty+0x2e>
   1ca2e:	683a      	ldr	r2, [r7, #0]
   1ca30:	2a01      	cmp	r2, #1
   1ca32:	d104      	bne.n	1ca3e <IsFileEmpty+0x32>
   1ca34:	687a      	ldr	r2, [r7, #4]
   1ca36:	2a10      	cmp	r2, #16
   1ca38:	dd01      	ble.n	1ca3e <IsFileEmpty+0x32>
   1ca3a:	2200      	movs	r2, #0
   1ca3c:	e000      	b.n	1ca40 <IsFileEmpty+0x34>
   1ca3e:	2201      	movs	r2, #1
   1ca40:	4610      	mov	r0, r2
   1ca42:	4a07      	ldr	r2, [pc, #28]	; (1ca60 <IsFileEmpty+0x54>)
   1ca44:	589b      	ldr	r3, [r3, r2]
   1ca46:	68fa      	ldr	r2, [r7, #12]
   1ca48:	681b      	ldr	r3, [r3, #0]
   1ca4a:	429a      	cmp	r2, r3
   1ca4c:	d001      	beq.n	1ca52 <IsFileEmpty+0x46>
   1ca4e:	f7ec faa9 	bl	8fa4 <__stack_chk_fail>
   1ca52:	f107 0710 	add.w	r7, r7, #16
   1ca56:	46bd      	mov	sp, r7
   1ca58:	bd80      	pop	{r7, pc}
   1ca5a:	bf00      	nop
   1ca5c:	000126fc 	.word	0x000126fc
   1ca60:	000000ac 	.word	0x000000ac

0001ca64 <FMG_Init>:
   1ca64:	b590      	push	{r4, r7, lr}
   1ca66:	b09f      	sub	sp, #124	; 0x7c
   1ca68:	af00      	add	r7, sp, #0
   1ca6a:	4c71      	ldr	r4, [pc, #452]	; (1cc30 <FMG_Init+0x1cc>)
   1ca6c:	447c      	add	r4, pc
   1ca6e:	4b71      	ldr	r3, [pc, #452]	; (1cc34 <FMG_Init+0x1d0>)
   1ca70:	58e3      	ldr	r3, [r4, r3]
   1ca72:	681b      	ldr	r3, [r3, #0]
   1ca74:	677b      	str	r3, [r7, #116]	; 0x74
   1ca76:	2300      	movs	r3, #0
   1ca78:	60bb      	str	r3, [r7, #8]
   1ca7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1ca7e:	4618      	mov	r0, r3
   1ca80:	2100      	movs	r1, #0
   1ca82:	2223      	movs	r2, #35	; 0x23
   1ca84:	f7ec e89a 	blx	8bbc <_init+0x5c>
   1ca88:	4b6b      	ldr	r3, [pc, #428]	; (1cc38 <FMG_Init+0x1d4>)
   1ca8a:	447b      	add	r3, pc
   1ca8c:	4618      	mov	r0, r3
   1ca8e:	2100      	movs	r1, #0
   1ca90:	2211      	movs	r2, #17
   1ca92:	f7ec e894 	blx	8bbc <_init+0x5c>
   1ca96:	f003 fecd 	bl	20834 <ApplicationGetCurrent>
   1ca9a:	4603      	mov	r3, r0
   1ca9c:	461a      	mov	r2, r3
   1ca9e:	f107 0318 	add.w	r3, r7, #24
   1caa2:	2001      	movs	r0, #1
   1caa4:	4611      	mov	r1, r2
   1caa6:	461a      	mov	r2, r3
   1caa8:	f004 f92c 	bl	20d04 <ObjectGetInfo>
   1caac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
   1cab0:	4a62      	ldr	r2, [pc, #392]	; (1cc3c <FMG_Init+0x1d8>)
   1cab2:	447a      	add	r2, pc
   1cab4:	4610      	mov	r0, r2
   1cab6:	4a62      	ldr	r2, [pc, #392]	; (1cc40 <FMG_Init+0x1dc>)
   1cab8:	447a      	add	r2, pc
   1caba:	4611      	mov	r1, r2
   1cabc:	4a61      	ldr	r2, [pc, #388]	; (1cc44 <FMG_Init+0x1e0>)
   1cabe:	447a      	add	r2, pc
   1cac0:	f7ec e8f8 	blx	8cb4 <_init+0x154>
   1cac4:	4b60      	ldr	r3, [pc, #384]	; (1cc48 <FMG_Init+0x1e4>)
   1cac6:	447b      	add	r3, pc
   1cac8:	4618      	mov	r0, r3
   1caca:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
   1cace:	221e      	movs	r2, #30
   1cad0:	f7fc ffd8 	bl	19a84 <CreateOrMountDisk>
   1cad4:	60f8      	str	r0, [r7, #12]
   1cad6:	68fb      	ldr	r3, [r7, #12]
   1cad8:	2b02      	cmp	r3, #2
   1cada:	d003      	beq.n	1cae4 <FMG_Init+0x80>
   1cadc:	68fb      	ldr	r3, [r7, #12]
   1cade:	2b06      	cmp	r3, #6
   1cae0:	f040 8093 	bne.w	1cc0a <FMG_Init+0x1a6>
   1cae4:	231f      	movs	r3, #31
   1cae6:	603b      	str	r3, [r7, #0]
   1cae8:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1caec:	4618      	mov	r0, r3
   1caee:	4b57      	ldr	r3, [pc, #348]	; (1cc4c <FMG_Init+0x1e8>)
   1caf0:	447b      	add	r3, pc
   1caf2:	4619      	mov	r1, r3
   1caf4:	4b56      	ldr	r3, [pc, #344]	; (1cc50 <FMG_Init+0x1ec>)
   1caf6:	447b      	add	r3, pc
   1caf8:	461a      	mov	r2, r3
   1cafa:	4b56      	ldr	r3, [pc, #344]	; (1cc54 <FMG_Init+0x1f0>)
   1cafc:	447b      	add	r3, pc
   1cafe:	f7ec e8da 	blx	8cb4 <_init+0x154>
   1cb02:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1cb06:	4618      	mov	r0, r3
   1cb08:	f003 ff1a 	bl	20940 <FS_exist>
   1cb0c:	60f8      	str	r0, [r7, #12]
   1cb0e:	68fb      	ldr	r3, [r7, #12]
   1cb10:	2b02      	cmp	r3, #2
   1cb12:	d169      	bne.n	1cbe8 <FMG_Init+0x184>
   1cb14:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1cb18:	4618      	mov	r0, r3
   1cb1a:	4b4f      	ldr	r3, [pc, #316]	; (1cc58 <FMG_Init+0x1f4>)
   1cb1c:	447b      	add	r3, pc
   1cb1e:	4619      	mov	r1, r3
   1cb20:	f003 ff90 	bl	20a44 <FS_open>
   1cb24:	60b8      	str	r0, [r7, #8]
   1cb26:	68bb      	ldr	r3, [r7, #8]
   1cb28:	2b00      	cmp	r3, #0
   1cb2a:	d071      	beq.n	1cc10 <FMG_Init+0x1ac>
   1cb2c:	68b8      	ldr	r0, [r7, #8]
   1cb2e:	2100      	movs	r1, #0
   1cb30:	2200      	movs	r2, #0
   1cb32:	f004 f807 	bl	20b44 <FS_seek>
   1cb36:	4b49      	ldr	r3, [pc, #292]	; (1cc5c <FMG_Init+0x1f8>)
   1cb38:	58e3      	ldr	r3, [r4, r3]
   1cb3a:	4618      	mov	r0, r3
   1cb3c:	f241 1134 	movw	r1, #4404	; 0x1134
   1cb40:	2201      	movs	r2, #1
   1cb42:	68bb      	ldr	r3, [r7, #8]
   1cb44:	f003 ffa8 	bl	20a98 <FS_read>
   1cb48:	6138      	str	r0, [r7, #16]
   1cb4a:	693b      	ldr	r3, [r7, #16]
   1cb4c:	2b01      	cmp	r3, #1
   1cb4e:	d101      	bne.n	1cb54 <FMG_Init+0xf0>
   1cb50:	231e      	movs	r3, #30
   1cb52:	603b      	str	r3, [r7, #0]
   1cb54:	68b8      	ldr	r0, [r7, #8]
   1cb56:	f003 fe99 	bl	2088c <FS_close>
   1cb5a:	2300      	movs	r3, #0
   1cb5c:	60bb      	str	r3, [r7, #8]
   1cb5e:	4b3f      	ldr	r3, [pc, #252]	; (1cc5c <FMG_Init+0x1f8>)
   1cb60:	58e3      	ldr	r3, [r4, r3]
   1cb62:	681b      	ldr	r3, [r3, #0]
   1cb64:	617b      	str	r3, [r7, #20]
   1cb66:	2300      	movs	r3, #0
   1cb68:	607b      	str	r3, [r7, #4]
   1cb6a:	e038      	b.n	1cbde <FMG_Init+0x17a>
   1cb6c:	687b      	ldr	r3, [r7, #4]
   1cb6e:	222c      	movs	r2, #44	; 0x2c
   1cb70:	fb02 f203 	mul.w	r2, r2, r3
   1cb74:	4b39      	ldr	r3, [pc, #228]	; (1cc5c <FMG_Init+0x1f8>)
   1cb76:	58e3      	ldr	r3, [r4, r3]
   1cb78:	18d3      	adds	r3, r2, r3
   1cb7a:	1d1a      	adds	r2, r3, #4
   1cb7c:	687b      	ldr	r3, [r7, #4]
   1cb7e:	212c      	movs	r1, #44	; 0x2c
   1cb80:	fb01 f303 	mul.w	r3, r1, r3
   1cb84:	f103 0110 	add.w	r1, r3, #16
   1cb88:	4b34      	ldr	r3, [pc, #208]	; (1cc5c <FMG_Init+0x1f8>)
   1cb8a:	58e3      	ldr	r3, [r4, r3]
   1cb8c:	18cb      	adds	r3, r1, r3
   1cb8e:	3305      	adds	r3, #5
   1cb90:	f107 0150 	add.w	r1, r7, #80	; 0x50
   1cb94:	4608      	mov	r0, r1
   1cb96:	4932      	ldr	r1, [pc, #200]	; (1cc60 <FMG_Init+0x1fc>)
   1cb98:	4479      	add	r1, pc
   1cb9a:	f7ec e88c 	blx	8cb4 <_init+0x154>
   1cb9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1cba2:	4618      	mov	r0, r3
   1cba4:	4b2f      	ldr	r3, [pc, #188]	; (1cc64 <FMG_Init+0x200>)
   1cba6:	447b      	add	r3, pc
   1cba8:	4619      	mov	r1, r3
   1cbaa:	f003 ff4b 	bl	20a44 <FS_open>
   1cbae:	60b8      	str	r0, [r7, #8]
   1cbb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1cbb4:	4618      	mov	r0, r3
   1cbb6:	f003 fec3 	bl	20940 <FS_exist>
   1cbba:	60f8      	str	r0, [r7, #12]
   1cbbc:	68bb      	ldr	r3, [r7, #8]
   1cbbe:	2b00      	cmp	r3, #0
   1cbc0:	d105      	bne.n	1cbce <FMG_Init+0x16a>
   1cbc2:	4b29      	ldr	r3, [pc, #164]	; (1cc68 <FMG_Init+0x204>)
   1cbc4:	447b      	add	r3, pc
   1cbc6:	4618      	mov	r0, r3
   1cbc8:	f004 fa9a 	bl	21100 <upload_diagnostic_txt>
   1cbcc:	e004      	b.n	1cbd8 <FMG_Init+0x174>
   1cbce:	68b8      	ldr	r0, [r7, #8]
   1cbd0:	f003 fe5c 	bl	2088c <FS_close>
   1cbd4:	2300      	movs	r3, #0
   1cbd6:	60bb      	str	r3, [r7, #8]
   1cbd8:	687b      	ldr	r3, [r7, #4]
   1cbda:	3301      	adds	r3, #1
   1cbdc:	607b      	str	r3, [r7, #4]
   1cbde:	687a      	ldr	r2, [r7, #4]
   1cbe0:	697b      	ldr	r3, [r7, #20]
   1cbe2:	429a      	cmp	r2, r3
   1cbe4:	dbc2      	blt.n	1cb6c <FMG_Init+0x108>
   1cbe6:	e00f      	b.n	1cc08 <FMG_Init+0x1a4>
   1cbe8:	4b1c      	ldr	r3, [pc, #112]	; (1cc5c <FMG_Init+0x1f8>)
   1cbea:	58e3      	ldr	r3, [r4, r3]
   1cbec:	2200      	movs	r2, #0
   1cbee:	601a      	str	r2, [r3, #0]
   1cbf0:	4b1a      	ldr	r3, [pc, #104]	; (1cc5c <FMG_Init+0x1f8>)
   1cbf2:	58e3      	ldr	r3, [r4, r3]
   1cbf4:	1d18      	adds	r0, r3, #4
   1cbf6:	2100      	movs	r1, #0
   1cbf8:	f241 1230 	movw	r2, #4400	; 0x1130
   1cbfc:	f7eb efde 	blx	8bbc <_init+0x5c>
   1cc00:	f7fc ff86 	bl	19b10 <SaveMangementFile>
   1cc04:	6038      	str	r0, [r7, #0]
   1cc06:	e003      	b.n	1cc10 <FMG_Init+0x1ac>
   1cc08:	e002      	b.n	1cc10 <FMG_Init+0x1ac>
   1cc0a:	231f      	movs	r3, #31
   1cc0c:	603b      	str	r3, [r7, #0]
   1cc0e:	e000      	b.n	1cc12 <FMG_Init+0x1ae>
   1cc10:	bf00      	nop
   1cc12:	683b      	ldr	r3, [r7, #0]
   1cc14:	4618      	mov	r0, r3
   1cc16:	4b07      	ldr	r3, [pc, #28]	; (1cc34 <FMG_Init+0x1d0>)
   1cc18:	58e3      	ldr	r3, [r4, r3]
   1cc1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1cc1c:	681b      	ldr	r3, [r3, #0]
   1cc1e:	429a      	cmp	r2, r3
   1cc20:	d001      	beq.n	1cc26 <FMG_Init+0x1c2>
   1cc22:	f7ec f9bf 	bl	8fa4 <__stack_chk_fail>
   1cc26:	f107 077c 	add.w	r7, r7, #124	; 0x7c
   1cc2a:	46bd      	mov	sp, r7
   1cc2c:	bd90      	pop	{r4, r7, pc}
   1cc2e:	bf00      	nop
   1cc30:	000126a8 	.word	0x000126a8
   1cc34:	000000ac 	.word	0x000000ac
   1cc38:	00013552 	.word	0x00013552
   1cc3c:	0001352a 	.word	0x0001352a
   1cc40:	000097dc 	.word	0x000097dc
   1cc44:	000097de 	.word	0x000097de
   1cc48:	00013516 	.word	0x00013516
   1cc4c:	00009784 	.word	0x00009784
   1cc50:	000134e6 	.word	0x000134e6
   1cc54:	00009780 	.word	0x00009780
   1cc58:	00009770 	.word	0x00009770
   1cc5c:	000000c0 	.word	0x000000c0
   1cc60:	000096dc 	.word	0x000096dc
   1cc64:	000096e2 	.word	0x000096e2
   1cc68:	000096dc 	.word	0x000096dc

0001cc6c <FMG_GetFileDescription>:
   1cc6c:	b590      	push	{r4, r7, lr}
   1cc6e:	b085      	sub	sp, #20
   1cc70:	af00      	add	r7, sp, #0
   1cc72:	6078      	str	r0, [r7, #4]
   1cc74:	4c10      	ldr	r4, [pc, #64]	; (1ccb8 <FMG_GetFileDescription+0x4c>)
   1cc76:	447c      	add	r4, pc
   1cc78:	4b10      	ldr	r3, [pc, #64]	; (1ccbc <FMG_GetFileDescription+0x50>)
   1cc7a:	58e3      	ldr	r3, [r4, r3]
   1cc7c:	681b      	ldr	r3, [r3, #0]
   1cc7e:	60fb      	str	r3, [r7, #12]
   1cc80:	687b      	ldr	r3, [r7, #4]
   1cc82:	2b00      	cmp	r3, #0
   1cc84:	d009      	beq.n	1cc9a <FMG_GetFileDescription+0x2e>
   1cc86:	6878      	ldr	r0, [r7, #4]
   1cc88:	4b0d      	ldr	r3, [pc, #52]	; (1ccc0 <FMG_GetFileDescription+0x54>)
   1cc8a:	58e3      	ldr	r3, [r4, r3]
   1cc8c:	4619      	mov	r1, r3
   1cc8e:	f241 1234 	movw	r2, #4404	; 0x1134
   1cc92:	f7eb eff2 	blx	8c78 <_init+0x118>
   1cc96:	2301      	movs	r3, #1
   1cc98:	e000      	b.n	1cc9c <FMG_GetFileDescription+0x30>
   1cc9a:	2300      	movs	r3, #0
   1cc9c:	4618      	mov	r0, r3
   1cc9e:	4b07      	ldr	r3, [pc, #28]	; (1ccbc <FMG_GetFileDescription+0x50>)
   1cca0:	58e3      	ldr	r3, [r4, r3]
   1cca2:	68fa      	ldr	r2, [r7, #12]
   1cca4:	681b      	ldr	r3, [r3, #0]
   1cca6:	429a      	cmp	r2, r3
   1cca8:	d001      	beq.n	1ccae <FMG_GetFileDescription+0x42>
   1ccaa:	f7ec f97b 	bl	8fa4 <__stack_chk_fail>
   1ccae:	f107 0714 	add.w	r7, r7, #20
   1ccb2:	46bd      	mov	sp, r7
   1ccb4:	bd90      	pop	{r4, r7, pc}
   1ccb6:	bf00      	nop
   1ccb8:	0001249e 	.word	0x0001249e
   1ccbc:	000000ac 	.word	0x000000ac
   1ccc0:	000000c0 	.word	0x000000c0

0001ccc4 <FMG_CreateFile>:
   1ccc4:	b590      	push	{r4, r7, lr}
   1ccc6:	b0ab      	sub	sp, #172	; 0xac
   1ccc8:	af00      	add	r7, sp, #0
   1ccca:	60f8      	str	r0, [r7, #12]
   1cccc:	60b9      	str	r1, [r7, #8]
   1ccce:	607a      	str	r2, [r7, #4]
   1ccd0:	603b      	str	r3, [r7, #0]
   1ccd2:	4c66      	ldr	r4, [pc, #408]	; (1ce6c <FMG_CreateFile+0x1a8>)
   1ccd4:	447c      	add	r4, pc
   1ccd6:	4b66      	ldr	r3, [pc, #408]	; (1ce70 <FMG_CreateFile+0x1ac>)
   1ccd8:	58e3      	ldr	r3, [r4, r3]
   1ccda:	681b      	ldr	r3, [r3, #0]
   1ccdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   1cce0:	2300      	movs	r3, #0
   1cce2:	613b      	str	r3, [r7, #16]
   1cce4:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1cce8:	4618      	mov	r0, r3
   1ccea:	2100      	movs	r1, #0
   1ccec:	2210      	movs	r2, #16
   1ccee:	f7eb ef66 	blx	8bbc <_init+0x5c>
   1ccf2:	4b60      	ldr	r3, [pc, #384]	; (1ce74 <FMG_CreateFile+0x1b0>)
   1ccf4:	58e3      	ldr	r3, [r4, r3]
   1ccf6:	681b      	ldr	r3, [r3, #0]
   1ccf8:	2b64      	cmp	r3, #100	; 0x64
   1ccfa:	d901      	bls.n	1cd00 <FMG_CreateFile+0x3c>
   1ccfc:	2316      	movs	r3, #22
   1ccfe:	e0a6      	b.n	1ce4e <FMG_CreateFile+0x18a>
   1cd00:	687b      	ldr	r3, [r7, #4]
   1cd02:	2b00      	cmp	r3, #0
   1cd04:	d004      	beq.n	1cd10 <FMG_CreateFile+0x4c>
   1cd06:	687b      	ldr	r3, [r7, #4]
   1cd08:	2b01      	cmp	r3, #1
   1cd0a:	d001      	beq.n	1cd10 <FMG_CreateFile+0x4c>
   1cd0c:	230d      	movs	r3, #13
   1cd0e:	e09e      	b.n	1ce4e <FMG_CreateFile+0x18a>
   1cd10:	683b      	ldr	r3, [r7, #0]
   1cd12:	2b00      	cmp	r3, #0
   1cd14:	d004      	beq.n	1cd20 <FMG_CreateFile+0x5c>
   1cd16:	683b      	ldr	r3, [r7, #0]
   1cd18:	2b01      	cmp	r3, #1
   1cd1a:	d001      	beq.n	1cd20 <FMG_CreateFile+0x5c>
   1cd1c:	230e      	movs	r3, #14
   1cd1e:	e096      	b.n	1ce4e <FMG_CreateFile+0x18a>
   1cd20:	f107 0380 	add.w	r3, r7, #128	; 0x80
   1cd24:	4618      	mov	r0, r3
   1cd26:	4b54      	ldr	r3, [pc, #336]	; (1ce78 <FMG_CreateFile+0x1b4>)
   1cd28:	447b      	add	r3, pc
   1cd2a:	4619      	mov	r1, r3
   1cd2c:	68fa      	ldr	r2, [r7, #12]
   1cd2e:	68bb      	ldr	r3, [r7, #8]
   1cd30:	f7eb efc0 	blx	8cb4 <_init+0x154>
   1cd34:	f107 0380 	add.w	r3, r7, #128	; 0x80
   1cd38:	4618      	mov	r0, r3
   1cd3a:	f003 fe01 	bl	20940 <FS_exist>
   1cd3e:	6178      	str	r0, [r7, #20]
   1cd40:	697b      	ldr	r3, [r7, #20]
   1cd42:	2b02      	cmp	r3, #2
   1cd44:	d101      	bne.n	1cd4a <FMG_CreateFile+0x86>
   1cd46:	230c      	movs	r3, #12
   1cd48:	e081      	b.n	1ce4e <FMG_CreateFile+0x18a>
   1cd4a:	f107 0380 	add.w	r3, r7, #128	; 0x80
   1cd4e:	4618      	mov	r0, r3
   1cd50:	4b4a      	ldr	r3, [pc, #296]	; (1ce7c <FMG_CreateFile+0x1b8>)
   1cd52:	447b      	add	r3, pc
   1cd54:	4619      	mov	r1, r3
   1cd56:	f003 fe75 	bl	20a44 <FS_open>
   1cd5a:	6138      	str	r0, [r7, #16]
   1cd5c:	693b      	ldr	r3, [r7, #16]
   1cd5e:	2b00      	cmp	r3, #0
   1cd60:	d101      	bne.n	1cd66 <FMG_CreateFile+0xa2>
   1cd62:	2314      	movs	r3, #20
   1cd64:	e073      	b.n	1ce4e <FMG_CreateFile+0x18a>
   1cd66:	683b      	ldr	r3, [r7, #0]
   1cd68:	2b01      	cmp	r3, #1
   1cd6a:	d11d      	bne.n	1cda8 <FMG_CreateFile+0xe4>
   1cd6c:	f107 0318 	add.w	r3, r7, #24
   1cd70:	4618      	mov	r0, r3
   1cd72:	f002 f9db 	bl	1f12c <md5_init>
   1cd76:	f107 0318 	add.w	r3, r7, #24
   1cd7a:	4618      	mov	r0, r3
   1cd7c:	4b40      	ldr	r3, [pc, #256]	; (1ce80 <FMG_CreateFile+0x1bc>)
   1cd7e:	447b      	add	r3, pc
   1cd80:	4619      	mov	r1, r3
   1cd82:	2200      	movs	r2, #0
   1cd84:	f002 fa0c 	bl	1f1a0 <md5_append>
   1cd88:	f107 0218 	add.w	r2, r7, #24
   1cd8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1cd90:	4610      	mov	r0, r2
   1cd92:	4619      	mov	r1, r3
   1cd94:	f002 fa90 	bl	1f2b8 <md5_finish>
   1cd98:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1cd9c:	4618      	mov	r0, r3
   1cd9e:	2110      	movs	r1, #16
   1cda0:	2201      	movs	r2, #1
   1cda2:	693b      	ldr	r3, [r7, #16]
   1cda4:	f003 ff50 	bl	20c48 <FS_write>
   1cda8:	6938      	ldr	r0, [r7, #16]
   1cdaa:	f003 fd6f 	bl	2088c <FS_close>
   1cdae:	2300      	movs	r3, #0
   1cdb0:	613b      	str	r3, [r7, #16]
   1cdb2:	4b30      	ldr	r3, [pc, #192]	; (1ce74 <FMG_CreateFile+0x1b0>)
   1cdb4:	58e3      	ldr	r3, [r4, r3]
   1cdb6:	681b      	ldr	r3, [r3, #0]
   1cdb8:	4a2e      	ldr	r2, [pc, #184]	; (1ce74 <FMG_CreateFile+0x1b0>)
   1cdba:	58a2      	ldr	r2, [r4, r2]
   1cdbc:	212c      	movs	r1, #44	; 0x2c
   1cdbe:	fb01 f303 	mul.w	r3, r1, r3
   1cdc2:	18d3      	adds	r3, r2, r3
   1cdc4:	3328      	adds	r3, #40	; 0x28
   1cdc6:	687a      	ldr	r2, [r7, #4]
   1cdc8:	601a      	str	r2, [r3, #0]
   1cdca:	4b2a      	ldr	r3, [pc, #168]	; (1ce74 <FMG_CreateFile+0x1b0>)
   1cdcc:	58e3      	ldr	r3, [r4, r3]
   1cdce:	681b      	ldr	r3, [r3, #0]
   1cdd0:	4a28      	ldr	r2, [pc, #160]	; (1ce74 <FMG_CreateFile+0x1b0>)
   1cdd2:	58a2      	ldr	r2, [r4, r2]
   1cdd4:	212c      	movs	r1, #44	; 0x2c
   1cdd6:	fb01 f303 	mul.w	r3, r1, r3
   1cdda:	18d3      	adds	r3, r2, r3
   1cddc:	332c      	adds	r3, #44	; 0x2c
   1cdde:	683a      	ldr	r2, [r7, #0]
   1cde0:	601a      	str	r2, [r3, #0]
   1cde2:	4b24      	ldr	r3, [pc, #144]	; (1ce74 <FMG_CreateFile+0x1b0>)
   1cde4:	58e3      	ldr	r3, [r4, r3]
   1cde6:	681b      	ldr	r3, [r3, #0]
   1cde8:	222c      	movs	r2, #44	; 0x2c
   1cdea:	fb02 f303 	mul.w	r3, r2, r3
   1cdee:	f103 0210 	add.w	r2, r3, #16
   1cdf2:	4b20      	ldr	r3, [pc, #128]	; (1ce74 <FMG_CreateFile+0x1b0>)
   1cdf4:	58e3      	ldr	r3, [r4, r3]
   1cdf6:	18d3      	adds	r3, r2, r3
   1cdf8:	3305      	adds	r3, #5
   1cdfa:	4618      	mov	r0, r3
   1cdfc:	68b9      	ldr	r1, [r7, #8]
   1cdfe:	f7eb ef10 	blx	8c20 <_init+0xc0>
   1ce02:	4b1c      	ldr	r3, [pc, #112]	; (1ce74 <FMG_CreateFile+0x1b0>)
   1ce04:	58e3      	ldr	r3, [r4, r3]
   1ce06:	681b      	ldr	r3, [r3, #0]
   1ce08:	222c      	movs	r2, #44	; 0x2c
   1ce0a:	fb02 f203 	mul.w	r2, r2, r3
   1ce0e:	4b19      	ldr	r3, [pc, #100]	; (1ce74 <FMG_CreateFile+0x1b0>)
   1ce10:	58e3      	ldr	r3, [r4, r3]
   1ce12:	18d3      	adds	r3, r2, r3
   1ce14:	3304      	adds	r3, #4
   1ce16:	4618      	mov	r0, r3
   1ce18:	68f9      	ldr	r1, [r7, #12]
   1ce1a:	f7eb ef02 	blx	8c20 <_init+0xc0>
   1ce1e:	4b15      	ldr	r3, [pc, #84]	; (1ce74 <FMG_CreateFile+0x1b0>)
   1ce20:	58e3      	ldr	r3, [r4, r3]
   1ce22:	681b      	ldr	r3, [r3, #0]
   1ce24:	1c5a      	adds	r2, r3, #1
   1ce26:	4b13      	ldr	r3, [pc, #76]	; (1ce74 <FMG_CreateFile+0x1b0>)
   1ce28:	58e3      	ldr	r3, [r4, r3]
   1ce2a:	601a      	str	r2, [r3, #0]
   1ce2c:	4b15      	ldr	r3, [pc, #84]	; (1ce84 <FMG_CreateFile+0x1c0>)
   1ce2e:	447b      	add	r3, pc
   1ce30:	4618      	mov	r0, r3
   1ce32:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
   1ce36:	221e      	movs	r2, #30
   1ce38:	f7fc fe24 	bl	19a84 <CreateOrMountDisk>
   1ce3c:	6178      	str	r0, [r7, #20]
   1ce3e:	f7fc fe67 	bl	19b10 <SaveMangementFile>
   1ce42:	4603      	mov	r3, r0
   1ce44:	2b0a      	cmp	r3, #10
   1ce46:	d001      	beq.n	1ce4c <FMG_CreateFile+0x188>
   1ce48:	2317      	movs	r3, #23
   1ce4a:	e000      	b.n	1ce4e <FMG_CreateFile+0x18a>
   1ce4c:	230a      	movs	r3, #10
   1ce4e:	4618      	mov	r0, r3
   1ce50:	4b07      	ldr	r3, [pc, #28]	; (1ce70 <FMG_CreateFile+0x1ac>)
   1ce52:	58e3      	ldr	r3, [r4, r3]
   1ce54:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1ce58:	681b      	ldr	r3, [r3, #0]
   1ce5a:	429a      	cmp	r2, r3
   1ce5c:	d001      	beq.n	1ce62 <FMG_CreateFile+0x19e>
   1ce5e:	f7ec f8a1 	bl	8fa4 <__stack_chk_fail>
   1ce62:	f107 07ac 	add.w	r7, r7, #172	; 0xac
   1ce66:	46bd      	mov	sp, r7
   1ce68:	bd90      	pop	{r4, r7, pc}
   1ce6a:	bf00      	nop
   1ce6c:	00012440 	.word	0x00012440
   1ce70:	000000ac 	.word	0x000000ac
   1ce74:	000000c0 	.word	0x000000c0
   1ce78:	0000954c 	.word	0x0000954c
   1ce7c:	00009536 	.word	0x00009536
   1ce80:	00009546 	.word	0x00009546
   1ce84:	000131ae 	.word	0x000131ae

0001ce88 <FMG_DeleteFile>:
   1ce88:	b590      	push	{r4, r7, lr}
   1ce8a:	b091      	sub	sp, #68	; 0x44
   1ce8c:	af00      	add	r7, sp, #0
   1ce8e:	6078      	str	r0, [r7, #4]
   1ce90:	6039      	str	r1, [r7, #0]
   1ce92:	4c30      	ldr	r4, [pc, #192]	; (1cf54 <FMG_DeleteFile+0xcc>)
   1ce94:	447c      	add	r4, pc
   1ce96:	4b30      	ldr	r3, [pc, #192]	; (1cf58 <FMG_DeleteFile+0xd0>)
   1ce98:	58e3      	ldr	r3, [r4, r3]
   1ce9a:	681b      	ldr	r3, [r3, #0]
   1ce9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1ce9e:	4b2f      	ldr	r3, [pc, #188]	; (1cf5c <FMG_DeleteFile+0xd4>)
   1cea0:	58e3      	ldr	r3, [r4, r3]
   1cea2:	681b      	ldr	r3, [r3, #0]
   1cea4:	2b00      	cmp	r3, #0
   1cea6:	d101      	bne.n	1ceac <FMG_DeleteFile+0x24>
   1cea8:	2316      	movs	r3, #22
   1ceaa:	e045      	b.n	1cf38 <FMG_DeleteFile+0xb0>
   1ceac:	6878      	ldr	r0, [r7, #4]
   1ceae:	6839      	ldr	r1, [r7, #0]
   1ceb0:	f7fc fe90 	bl	19bd4 <ExtraireFileID>
   1ceb4:	60f8      	str	r0, [r7, #12]
   1ceb6:	68fb      	ldr	r3, [r7, #12]
   1ceb8:	2b00      	cmp	r3, #0
   1ceba:	da01      	bge.n	1cec0 <FMG_DeleteFile+0x38>
   1cebc:	230b      	movs	r3, #11
   1cebe:	e03b      	b.n	1cf38 <FMG_DeleteFile+0xb0>
   1cec0:	f107 0318 	add.w	r3, r7, #24
   1cec4:	4618      	mov	r0, r3
   1cec6:	4b26      	ldr	r3, [pc, #152]	; (1cf60 <FMG_DeleteFile+0xd8>)
   1cec8:	447b      	add	r3, pc
   1ceca:	4619      	mov	r1, r3
   1cecc:	687a      	ldr	r2, [r7, #4]
   1cece:	683b      	ldr	r3, [r7, #0]
   1ced0:	f7eb eef0 	blx	8cb4 <_init+0x154>
   1ced4:	f107 0318 	add.w	r3, r7, #24
   1ced8:	4618      	mov	r0, r3
   1ceda:	f003 fd31 	bl	20940 <FS_exist>
   1cede:	6138      	str	r0, [r7, #16]
   1cee0:	f107 0318 	add.w	r3, r7, #24
   1cee4:	4618      	mov	r0, r3
   1cee6:	f003 fe57 	bl	20b98 <FS_unlink>
   1ceea:	6178      	str	r0, [r7, #20]
   1ceec:	697b      	ldr	r3, [r7, #20]
   1ceee:	2b02      	cmp	r3, #2
   1cef0:	d005      	beq.n	1cefe <FMG_DeleteFile+0x76>
   1cef2:	697b      	ldr	r3, [r7, #20]
   1cef4:	2b00      	cmp	r3, #0
   1cef6:	d11e      	bne.n	1cf36 <FMG_DeleteFile+0xae>
   1cef8:	693b      	ldr	r3, [r7, #16]
   1cefa:	2b00      	cmp	r3, #0
   1cefc:	d11b      	bne.n	1cf36 <FMG_DeleteFile+0xae>
   1cefe:	68f8      	ldr	r0, [r7, #12]
   1cf00:	f7fc febe 	bl	19c80 <DeleteFileFromTable>
   1cf04:	4b15      	ldr	r3, [pc, #84]	; (1cf5c <FMG_DeleteFile+0xd4>)
   1cf06:	58e3      	ldr	r3, [r4, r3]
   1cf08:	681b      	ldr	r3, [r3, #0]
   1cf0a:	1e5a      	subs	r2, r3, #1
   1cf0c:	4b13      	ldr	r3, [pc, #76]	; (1cf5c <FMG_DeleteFile+0xd4>)
   1cf0e:	58e3      	ldr	r3, [r4, r3]
   1cf10:	601a      	str	r2, [r3, #0]
   1cf12:	4b14      	ldr	r3, [pc, #80]	; (1cf64 <FMG_DeleteFile+0xdc>)
   1cf14:	447b      	add	r3, pc
   1cf16:	4618      	mov	r0, r3
   1cf18:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
   1cf1c:	221e      	movs	r2, #30
   1cf1e:	f7fc fdb1 	bl	19a84 <CreateOrMountDisk>
   1cf22:	6178      	str	r0, [r7, #20]
   1cf24:	f7fc fdf4 	bl	19b10 <SaveMangementFile>
   1cf28:	4603      	mov	r3, r0
   1cf2a:	2b0a      	cmp	r3, #10
   1cf2c:	d001      	beq.n	1cf32 <FMG_DeleteFile+0xaa>
   1cf2e:	2317      	movs	r3, #23
   1cf30:	e002      	b.n	1cf38 <FMG_DeleteFile+0xb0>
   1cf32:	230a      	movs	r3, #10
   1cf34:	e000      	b.n	1cf38 <FMG_DeleteFile+0xb0>
   1cf36:	2315      	movs	r3, #21
   1cf38:	4618      	mov	r0, r3
   1cf3a:	4b07      	ldr	r3, [pc, #28]	; (1cf58 <FMG_DeleteFile+0xd0>)
   1cf3c:	58e3      	ldr	r3, [r4, r3]
   1cf3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1cf40:	681b      	ldr	r3, [r3, #0]
   1cf42:	429a      	cmp	r2, r3
   1cf44:	d001      	beq.n	1cf4a <FMG_DeleteFile+0xc2>
   1cf46:	f7ec f82d 	bl	8fa4 <__stack_chk_fail>
   1cf4a:	f107 0744 	add.w	r7, r7, #68	; 0x44
   1cf4e:	46bd      	mov	sp, r7
   1cf50:	bd90      	pop	{r4, r7, pc}
   1cf52:	bf00      	nop
   1cf54:	00012280 	.word	0x00012280
   1cf58:	000000ac 	.word	0x000000ac
   1cf5c:	000000c0 	.word	0x000000c0
   1cf60:	000093ac 	.word	0x000093ac
   1cf64:	000130c8 	.word	0x000130c8

0001cf68 <FMG_CreateFileType>:
   1cf68:	b590      	push	{r4, r7, lr}
   1cf6a:	b0ab      	sub	sp, #172	; 0xac
   1cf6c:	af00      	add	r7, sp, #0
   1cf6e:	60f8      	str	r0, [r7, #12]
   1cf70:	60b9      	str	r1, [r7, #8]
   1cf72:	607a      	str	r2, [r7, #4]
   1cf74:	4c7a      	ldr	r4, [pc, #488]	; (1d160 <FMG_CreateFileType+0x1f8>)
   1cf76:	447c      	add	r4, pc
   1cf78:	4b7a      	ldr	r3, [pc, #488]	; (1d164 <FMG_CreateFileType+0x1fc>)
   1cf7a:	58e3      	ldr	r3, [r4, r3]
   1cf7c:	681b      	ldr	r3, [r3, #0]
   1cf7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   1cf82:	2300      	movs	r3, #0
   1cf84:	613b      	str	r3, [r7, #16]
   1cf86:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1cf8a:	4618      	mov	r0, r3
   1cf8c:	2100      	movs	r1, #0
   1cf8e:	2210      	movs	r2, #16
   1cf90:	f7eb ee14 	blx	8bbc <_init+0x5c>
   1cf94:	68fb      	ldr	r3, [r7, #12]
   1cf96:	2b00      	cmp	r3, #0
   1cf98:	d007      	beq.n	1cfaa <FMG_CreateFileType+0x42>
   1cf9a:	68fb      	ldr	r3, [r7, #12]
   1cf9c:	2b01      	cmp	r3, #1
   1cf9e:	d004      	beq.n	1cfaa <FMG_CreateFileType+0x42>
   1cfa0:	68fb      	ldr	r3, [r7, #12]
   1cfa2:	2b02      	cmp	r3, #2
   1cfa4:	d001      	beq.n	1cfaa <FMG_CreateFileType+0x42>
   1cfa6:	230f      	movs	r3, #15
   1cfa8:	e0cb      	b.n	1d142 <FMG_CreateFileType+0x1da>
   1cfaa:	4b6f      	ldr	r3, [pc, #444]	; (1d168 <FMG_CreateFileType+0x200>)
   1cfac:	58e3      	ldr	r3, [r4, r3]
   1cfae:	681b      	ldr	r3, [r3, #0]
   1cfb0:	2b64      	cmp	r3, #100	; 0x64
   1cfb2:	d901      	bls.n	1cfb8 <FMG_CreateFileType+0x50>
   1cfb4:	2316      	movs	r3, #22
   1cfb6:	e0c4      	b.n	1d142 <FMG_CreateFileType+0x1da>
   1cfb8:	68bb      	ldr	r3, [r7, #8]
   1cfba:	2b00      	cmp	r3, #0
   1cfbc:	d004      	beq.n	1cfc8 <FMG_CreateFileType+0x60>
   1cfbe:	68bb      	ldr	r3, [r7, #8]
   1cfc0:	2b01      	cmp	r3, #1
   1cfc2:	d001      	beq.n	1cfc8 <FMG_CreateFileType+0x60>
   1cfc4:	230d      	movs	r3, #13
   1cfc6:	e0bc      	b.n	1d142 <FMG_CreateFileType+0x1da>
   1cfc8:	687b      	ldr	r3, [r7, #4]
   1cfca:	2b00      	cmp	r3, #0
   1cfcc:	d004      	beq.n	1cfd8 <FMG_CreateFileType+0x70>
   1cfce:	687b      	ldr	r3, [r7, #4]
   1cfd0:	2b01      	cmp	r3, #1
   1cfd2:	d001      	beq.n	1cfd8 <FMG_CreateFileType+0x70>
   1cfd4:	230e      	movs	r3, #14
   1cfd6:	e0b4      	b.n	1d142 <FMG_CreateFileType+0x1da>
   1cfd8:	4b64      	ldr	r3, [pc, #400]	; (1d16c <FMG_CreateFileType+0x204>)
   1cfda:	447b      	add	r3, pc
   1cfdc:	4618      	mov	r0, r3
   1cfde:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
   1cfe2:	221e      	movs	r2, #30
   1cfe4:	f7fc fd4e 	bl	19a84 <CreateOrMountDisk>
   1cfe8:	6178      	str	r0, [r7, #20]
   1cfea:	697b      	ldr	r3, [r7, #20]
   1cfec:	2b02      	cmp	r3, #2
   1cfee:	d003      	beq.n	1cff8 <FMG_CreateFileType+0x90>
   1cff0:	697b      	ldr	r3, [r7, #20]
   1cff2:	2b06      	cmp	r3, #6
   1cff4:	f040 80a4 	bne.w	1d140 <FMG_CreateFileType+0x1d8>
   1cff8:	4b5d      	ldr	r3, [pc, #372]	; (1d170 <FMG_CreateFileType+0x208>)
   1cffa:	58e3      	ldr	r3, [r4, r3]
   1cffc:	68fa      	ldr	r2, [r7, #12]
   1cffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d002:	f107 0280 	add.w	r2, r7, #128	; 0x80
   1d006:	4610      	mov	r0, r2
   1d008:	4a5a      	ldr	r2, [pc, #360]	; (1d174 <FMG_CreateFileType+0x20c>)
   1d00a:	447a      	add	r2, pc
   1d00c:	4611      	mov	r1, r2
   1d00e:	4a5a      	ldr	r2, [pc, #360]	; (1d178 <FMG_CreateFileType+0x210>)
   1d010:	447a      	add	r2, pc
   1d012:	f7eb ee50 	blx	8cb4 <_init+0x154>
   1d016:	f107 0380 	add.w	r3, r7, #128	; 0x80
   1d01a:	4618      	mov	r0, r3
   1d01c:	f003 fc90 	bl	20940 <FS_exist>
   1d020:	6178      	str	r0, [r7, #20]
   1d022:	697b      	ldr	r3, [r7, #20]
   1d024:	2b02      	cmp	r3, #2
   1d026:	d101      	bne.n	1d02c <FMG_CreateFileType+0xc4>
   1d028:	230c      	movs	r3, #12
   1d02a:	e08a      	b.n	1d142 <FMG_CreateFileType+0x1da>
   1d02c:	f107 0380 	add.w	r3, r7, #128	; 0x80
   1d030:	4618      	mov	r0, r3
   1d032:	4b52      	ldr	r3, [pc, #328]	; (1d17c <FMG_CreateFileType+0x214>)
   1d034:	447b      	add	r3, pc
   1d036:	4619      	mov	r1, r3
   1d038:	f003 fd04 	bl	20a44 <FS_open>
   1d03c:	6138      	str	r0, [r7, #16]
   1d03e:	693b      	ldr	r3, [r7, #16]
   1d040:	2b00      	cmp	r3, #0
   1d042:	d101      	bne.n	1d048 <FMG_CreateFileType+0xe0>
   1d044:	2314      	movs	r3, #20
   1d046:	e07c      	b.n	1d142 <FMG_CreateFileType+0x1da>
   1d048:	687b      	ldr	r3, [r7, #4]
   1d04a:	2b01      	cmp	r3, #1
   1d04c:	d11d      	bne.n	1d08a <FMG_CreateFileType+0x122>
   1d04e:	f107 0318 	add.w	r3, r7, #24
   1d052:	4618      	mov	r0, r3
   1d054:	f002 f86a 	bl	1f12c <md5_init>
   1d058:	f107 0318 	add.w	r3, r7, #24
   1d05c:	4618      	mov	r0, r3
   1d05e:	4b48      	ldr	r3, [pc, #288]	; (1d180 <FMG_CreateFileType+0x218>)
   1d060:	447b      	add	r3, pc
   1d062:	4619      	mov	r1, r3
   1d064:	2200      	movs	r2, #0
   1d066:	f002 f89b 	bl	1f1a0 <md5_append>
   1d06a:	f107 0218 	add.w	r2, r7, #24
   1d06e:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1d072:	4610      	mov	r0, r2
   1d074:	4619      	mov	r1, r3
   1d076:	f002 f91f 	bl	1f2b8 <md5_finish>
   1d07a:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1d07e:	4618      	mov	r0, r3
   1d080:	2110      	movs	r1, #16
   1d082:	2201      	movs	r2, #1
   1d084:	693b      	ldr	r3, [r7, #16]
   1d086:	f003 fddf 	bl	20c48 <FS_write>
   1d08a:	6938      	ldr	r0, [r7, #16]
   1d08c:	f003 fbfe 	bl	2088c <FS_close>
   1d090:	2300      	movs	r3, #0
   1d092:	613b      	str	r3, [r7, #16]
   1d094:	4b34      	ldr	r3, [pc, #208]	; (1d168 <FMG_CreateFileType+0x200>)
   1d096:	58e3      	ldr	r3, [r4, r3]
   1d098:	681b      	ldr	r3, [r3, #0]
   1d09a:	4a33      	ldr	r2, [pc, #204]	; (1d168 <FMG_CreateFileType+0x200>)
   1d09c:	58a2      	ldr	r2, [r4, r2]
   1d09e:	212c      	movs	r1, #44	; 0x2c
   1d0a0:	fb01 f303 	mul.w	r3, r1, r3
   1d0a4:	18d3      	adds	r3, r2, r3
   1d0a6:	3328      	adds	r3, #40	; 0x28
   1d0a8:	68ba      	ldr	r2, [r7, #8]
   1d0aa:	601a      	str	r2, [r3, #0]
   1d0ac:	4b2e      	ldr	r3, [pc, #184]	; (1d168 <FMG_CreateFileType+0x200>)
   1d0ae:	58e3      	ldr	r3, [r4, r3]
   1d0b0:	681b      	ldr	r3, [r3, #0]
   1d0b2:	4a2d      	ldr	r2, [pc, #180]	; (1d168 <FMG_CreateFileType+0x200>)
   1d0b4:	58a2      	ldr	r2, [r4, r2]
   1d0b6:	212c      	movs	r1, #44	; 0x2c
   1d0b8:	fb01 f303 	mul.w	r3, r1, r3
   1d0bc:	18d3      	adds	r3, r2, r3
   1d0be:	332c      	adds	r3, #44	; 0x2c
   1d0c0:	687a      	ldr	r2, [r7, #4]
   1d0c2:	601a      	str	r2, [r3, #0]
   1d0c4:	4b28      	ldr	r3, [pc, #160]	; (1d168 <FMG_CreateFileType+0x200>)
   1d0c6:	58e3      	ldr	r3, [r4, r3]
   1d0c8:	681b      	ldr	r3, [r3, #0]
   1d0ca:	222c      	movs	r2, #44	; 0x2c
   1d0cc:	fb02 f303 	mul.w	r3, r2, r3
   1d0d0:	f103 0210 	add.w	r2, r3, #16
   1d0d4:	4b24      	ldr	r3, [pc, #144]	; (1d168 <FMG_CreateFileType+0x200>)
   1d0d6:	58e3      	ldr	r3, [r4, r3]
   1d0d8:	18d3      	adds	r3, r2, r3
   1d0da:	1d5a      	adds	r2, r3, #5
   1d0dc:	4b24      	ldr	r3, [pc, #144]	; (1d170 <FMG_CreateFileType+0x208>)
   1d0de:	58e3      	ldr	r3, [r4, r3]
   1d0e0:	68f9      	ldr	r1, [r7, #12]
   1d0e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1d0e6:	4610      	mov	r0, r2
   1d0e8:	4619      	mov	r1, r3
   1d0ea:	f7eb ed9a 	blx	8c20 <_init+0xc0>
   1d0ee:	4b1e      	ldr	r3, [pc, #120]	; (1d168 <FMG_CreateFileType+0x200>)
   1d0f0:	58e3      	ldr	r3, [r4, r3]
   1d0f2:	681b      	ldr	r3, [r3, #0]
   1d0f4:	222c      	movs	r2, #44	; 0x2c
   1d0f6:	fb02 f203 	mul.w	r2, r2, r3
   1d0fa:	4b1b      	ldr	r3, [pc, #108]	; (1d168 <FMG_CreateFileType+0x200>)
   1d0fc:	58e3      	ldr	r3, [r4, r3]
   1d0fe:	18d3      	adds	r3, r2, r3
   1d100:	3304      	adds	r3, #4
   1d102:	4618      	mov	r0, r3
   1d104:	4b1f      	ldr	r3, [pc, #124]	; (1d184 <FMG_CreateFileType+0x21c>)
   1d106:	447b      	add	r3, pc
   1d108:	4619      	mov	r1, r3
   1d10a:	f7eb ed8a 	blx	8c20 <_init+0xc0>
   1d10e:	4b16      	ldr	r3, [pc, #88]	; (1d168 <FMG_CreateFileType+0x200>)
   1d110:	58e3      	ldr	r3, [r4, r3]
   1d112:	681b      	ldr	r3, [r3, #0]
   1d114:	1c5a      	adds	r2, r3, #1
   1d116:	4b14      	ldr	r3, [pc, #80]	; (1d168 <FMG_CreateFileType+0x200>)
   1d118:	58e3      	ldr	r3, [r4, r3]
   1d11a:	601a      	str	r2, [r3, #0]
   1d11c:	4b1a      	ldr	r3, [pc, #104]	; (1d188 <FMG_CreateFileType+0x220>)
   1d11e:	447b      	add	r3, pc
   1d120:	4618      	mov	r0, r3
   1d122:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
   1d126:	221e      	movs	r2, #30
   1d128:	f7fc fcac 	bl	19a84 <CreateOrMountDisk>
   1d12c:	6178      	str	r0, [r7, #20]
   1d12e:	f7fc fcef 	bl	19b10 <SaveMangementFile>
   1d132:	4603      	mov	r3, r0
   1d134:	2b0a      	cmp	r3, #10
   1d136:	d001      	beq.n	1d13c <FMG_CreateFileType+0x1d4>
   1d138:	2317      	movs	r3, #23
   1d13a:	e002      	b.n	1d142 <FMG_CreateFileType+0x1da>
   1d13c:	230a      	movs	r3, #10
   1d13e:	e000      	b.n	1d142 <FMG_CreateFileType+0x1da>
   1d140:	2312      	movs	r3, #18
   1d142:	4618      	mov	r0, r3
   1d144:	4b07      	ldr	r3, [pc, #28]	; (1d164 <FMG_CreateFileType+0x1fc>)
   1d146:	58e3      	ldr	r3, [r4, r3]
   1d148:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   1d14c:	681b      	ldr	r3, [r3, #0]
   1d14e:	429a      	cmp	r2, r3
   1d150:	d001      	beq.n	1d156 <FMG_CreateFileType+0x1ee>
   1d152:	f7eb ff27 	bl	8fa4 <__stack_chk_fail>
   1d156:	f107 07ac 	add.w	r7, r7, #172	; 0xac
   1d15a:	46bd      	mov	sp, r7
   1d15c:	bd90      	pop	{r4, r7, pc}
   1d15e:	bf00      	nop
   1d160:	0001219e 	.word	0x0001219e
   1d164:	000000ac 	.word	0x000000ac
   1d168:	000000c0 	.word	0x000000c0
   1d16c:	00013002 	.word	0x00013002
   1d170:	000000a8 	.word	0x000000a8
   1d174:	0000926a 	.word	0x0000926a
   1d178:	00012fcc 	.word	0x00012fcc
   1d17c:	00009254 	.word	0x00009254
   1d180:	00009264 	.word	0x00009264
   1d184:	00012ed6 	.word	0x00012ed6
   1d188:	00012ebe 	.word	0x00012ebe

0001d18c <FMG_DeleteFileType>:
   1d18c:	b590      	push	{r4, r7, lr}
   1d18e:	b08f      	sub	sp, #60	; 0x3c
   1d190:	af00      	add	r7, sp, #0
   1d192:	6078      	str	r0, [r7, #4]
   1d194:	4c39      	ldr	r4, [pc, #228]	; (1d27c <FMG_DeleteFileType+0xf0>)
   1d196:	447c      	add	r4, pc
   1d198:	4b39      	ldr	r3, [pc, #228]	; (1d280 <FMG_DeleteFileType+0xf4>)
   1d19a:	58e3      	ldr	r3, [r4, r3]
   1d19c:	681b      	ldr	r3, [r3, #0]
   1d19e:	637b      	str	r3, [r7, #52]	; 0x34
   1d1a0:	4b38      	ldr	r3, [pc, #224]	; (1d284 <FMG_DeleteFileType+0xf8>)
   1d1a2:	58e3      	ldr	r3, [r4, r3]
   1d1a4:	681b      	ldr	r3, [r3, #0]
   1d1a6:	2b00      	cmp	r3, #0
   1d1a8:	d101      	bne.n	1d1ae <FMG_DeleteFileType+0x22>
   1d1aa:	2316      	movs	r3, #22
   1d1ac:	e058      	b.n	1d260 <FMG_DeleteFileType+0xd4>
   1d1ae:	687b      	ldr	r3, [r7, #4]
   1d1b0:	2b00      	cmp	r3, #0
   1d1b2:	d007      	beq.n	1d1c4 <FMG_DeleteFileType+0x38>
   1d1b4:	687b      	ldr	r3, [r7, #4]
   1d1b6:	2b01      	cmp	r3, #1
   1d1b8:	d004      	beq.n	1d1c4 <FMG_DeleteFileType+0x38>
   1d1ba:	687b      	ldr	r3, [r7, #4]
   1d1bc:	2b02      	cmp	r3, #2
   1d1be:	d001      	beq.n	1d1c4 <FMG_DeleteFileType+0x38>
   1d1c0:	230f      	movs	r3, #15
   1d1c2:	e04d      	b.n	1d260 <FMG_DeleteFileType+0xd4>
   1d1c4:	4b30      	ldr	r3, [pc, #192]	; (1d288 <FMG_DeleteFileType+0xfc>)
   1d1c6:	58e3      	ldr	r3, [r4, r3]
   1d1c8:	687a      	ldr	r2, [r7, #4]
   1d1ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d1ce:	4a2f      	ldr	r2, [pc, #188]	; (1d28c <FMG_DeleteFileType+0x100>)
   1d1d0:	447a      	add	r2, pc
   1d1d2:	4610      	mov	r0, r2
   1d1d4:	4619      	mov	r1, r3
   1d1d6:	f7fc fcfd 	bl	19bd4 <ExtraireFileID>
   1d1da:	60b8      	str	r0, [r7, #8]
   1d1dc:	68bb      	ldr	r3, [r7, #8]
   1d1de:	2b00      	cmp	r3, #0
   1d1e0:	da01      	bge.n	1d1e6 <FMG_DeleteFileType+0x5a>
   1d1e2:	230b      	movs	r3, #11
   1d1e4:	e03c      	b.n	1d260 <FMG_DeleteFileType+0xd4>
   1d1e6:	4b2a      	ldr	r3, [pc, #168]	; (1d290 <FMG_DeleteFileType+0x104>)
   1d1e8:	447b      	add	r3, pc
   1d1ea:	4618      	mov	r0, r3
   1d1ec:	f44f 31c8 	mov.w	r1, #102400	; 0x19000
   1d1f0:	221e      	movs	r2, #30
   1d1f2:	f7fc fc47 	bl	19a84 <CreateOrMountDisk>
   1d1f6:	60f8      	str	r0, [r7, #12]
   1d1f8:	68fb      	ldr	r3, [r7, #12]
   1d1fa:	2b02      	cmp	r3, #2
   1d1fc:	d002      	beq.n	1d204 <FMG_DeleteFileType+0x78>
   1d1fe:	68fb      	ldr	r3, [r7, #12]
   1d200:	2b06      	cmp	r3, #6
   1d202:	d12c      	bne.n	1d25e <FMG_DeleteFileType+0xd2>
   1d204:	4b20      	ldr	r3, [pc, #128]	; (1d288 <FMG_DeleteFileType+0xfc>)
   1d206:	58e3      	ldr	r3, [r4, r3]
   1d208:	687a      	ldr	r2, [r7, #4]
   1d20a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d20e:	f107 0210 	add.w	r2, r7, #16
   1d212:	4610      	mov	r0, r2
   1d214:	4a1f      	ldr	r2, [pc, #124]	; (1d294 <FMG_DeleteFileType+0x108>)
   1d216:	447a      	add	r2, pc
   1d218:	4611      	mov	r1, r2
   1d21a:	4a1f      	ldr	r2, [pc, #124]	; (1d298 <FMG_DeleteFileType+0x10c>)
   1d21c:	447a      	add	r2, pc
   1d21e:	f7eb ed4a 	blx	8cb4 <_init+0x154>
   1d222:	f107 0310 	add.w	r3, r7, #16
   1d226:	4618      	mov	r0, r3
   1d228:	f003 fcb6 	bl	20b98 <FS_unlink>
   1d22c:	60f8      	str	r0, [r7, #12]
   1d22e:	68fb      	ldr	r3, [r7, #12]
   1d230:	2b02      	cmp	r3, #2
   1d232:	d112      	bne.n	1d25a <FMG_DeleteFileType+0xce>
   1d234:	68b8      	ldr	r0, [r7, #8]
   1d236:	f7fc fd23 	bl	19c80 <DeleteFileFromTable>
   1d23a:	4b12      	ldr	r3, [pc, #72]	; (1d284 <FMG_DeleteFileType+0xf8>)
   1d23c:	58e3      	ldr	r3, [r4, r3]
   1d23e:	681b      	ldr	r3, [r3, #0]
   1d240:	1e5a      	subs	r2, r3, #1
   1d242:	4b10      	ldr	r3, [pc, #64]	; (1d284 <FMG_DeleteFileType+0xf8>)
   1d244:	58e3      	ldr	r3, [r4, r3]
   1d246:	601a      	str	r2, [r3, #0]
   1d248:	f7fc fc62 	bl	19b10 <SaveMangementFile>
   1d24c:	4603      	mov	r3, r0
   1d24e:	2b0a      	cmp	r3, #10
   1d250:	d001      	beq.n	1d256 <FMG_DeleteFileType+0xca>
   1d252:	2317      	movs	r3, #23
   1d254:	e004      	b.n	1d260 <FMG_DeleteFileType+0xd4>
   1d256:	230a      	movs	r3, #10
   1d258:	e002      	b.n	1d260 <FMG_DeleteFileType+0xd4>
   1d25a:	2315      	movs	r3, #21
   1d25c:	e000      	b.n	1d260 <FMG_DeleteFileType+0xd4>
   1d25e:	2312      	movs	r3, #18
   1d260:	4618      	mov	r0, r3
   1d262:	4b07      	ldr	r3, [pc, #28]	; (1d280 <FMG_DeleteFileType+0xf4>)
   1d264:	58e3      	ldr	r3, [r4, r3]
   1d266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1d268:	681b      	ldr	r3, [r3, #0]
   1d26a:	429a      	cmp	r2, r3
   1d26c:	d001      	beq.n	1d272 <FMG_DeleteFileType+0xe6>
   1d26e:	f7eb fe99 	bl	8fa4 <__stack_chk_fail>
   1d272:	f107 073c 	add.w	r7, r7, #60	; 0x3c
   1d276:	46bd      	mov	sp, r7
   1d278:	bd90      	pop	{r4, r7, pc}
   1d27a:	bf00      	nop
   1d27c:	00011f7e 	.word	0x00011f7e
   1d280:	000000ac 	.word	0x000000ac
   1d284:	000000c0 	.word	0x000000c0
   1d288:	000000a8 	.word	0x000000a8
   1d28c:	00012e0c 	.word	0x00012e0c
   1d290:	00012df4 	.word	0x00012df4
   1d294:	0000905e 	.word	0x0000905e
   1d298:	00012dc0 	.word	0x00012dc0

0001d29c <FMG_CheckFileCoherence>:
   1d29c:	b5b0      	push	{r4, r5, r7, lr}
   1d29e:	f5ad 6d98 	sub.w	sp, sp, #1216	; 0x4c0
   1d2a2:	af00      	add	r7, sp, #0
   1d2a4:	1d3b      	adds	r3, r7, #4
   1d2a6:	6018      	str	r0, [r3, #0]
   1d2a8:	463b      	mov	r3, r7
   1d2aa:	6019      	str	r1, [r3, #0]
   1d2ac:	4c88      	ldr	r4, [pc, #544]	; (1d4d0 <FMG_CheckFileCoherence+0x234>)
   1d2ae:	447c      	add	r4, pc
   1d2b0:	4b88      	ldr	r3, [pc, #544]	; (1d4d4 <FMG_CheckFileCoherence+0x238>)
   1d2b2:	58e3      	ldr	r3, [r4, r3]
   1d2b4:	681b      	ldr	r3, [r3, #0]
   1d2b6:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
   1d2ba:	f107 0314 	add.w	r3, r7, #20
   1d2be:	2200      	movs	r2, #0
   1d2c0:	601a      	str	r2, [r3, #0]
   1d2c2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
   1d2c6:	4618      	mov	r0, r3
   1d2c8:	2100      	movs	r1, #0
   1d2ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1d2ce:	f7eb ec76 	blx	8bbc <_init+0x5c>
   1d2d2:	f107 0388 	add.w	r3, r7, #136	; 0x88
   1d2d6:	4618      	mov	r0, r3
   1d2d8:	2100      	movs	r1, #0
   1d2da:	2210      	movs	r2, #16
   1d2dc:	f7eb ec6e 	blx	8bbc <_init+0x5c>
   1d2e0:	f107 0198 	add.w	r1, r7, #152	; 0x98
   1d2e4:	1d3a      	adds	r2, r7, #4
   1d2e6:	463b      	mov	r3, r7
   1d2e8:	4608      	mov	r0, r1
   1d2ea:	497b      	ldr	r1, [pc, #492]	; (1d4d8 <FMG_CheckFileCoherence+0x23c>)
   1d2ec:	4479      	add	r1, pc
   1d2ee:	6812      	ldr	r2, [r2, #0]
   1d2f0:	681b      	ldr	r3, [r3, #0]
   1d2f2:	f7eb ece0 	blx	8cb4 <_init+0x154>
   1d2f6:	f107 0514 	add.w	r5, r7, #20
   1d2fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
   1d2fe:	4618      	mov	r0, r3
   1d300:	4b76      	ldr	r3, [pc, #472]	; (1d4dc <FMG_CheckFileCoherence+0x240>)
   1d302:	447b      	add	r3, pc
   1d304:	4619      	mov	r1, r3
   1d306:	f003 fb9d 	bl	20a44 <FS_open>
   1d30a:	6028      	str	r0, [r5, #0]
   1d30c:	f107 0314 	add.w	r3, r7, #20
   1d310:	681b      	ldr	r3, [r3, #0]
   1d312:	2b00      	cmp	r3, #0
   1d314:	d101      	bne.n	1d31a <FMG_CheckFileCoherence+0x7e>
   1d316:	2313      	movs	r3, #19
   1d318:	e0cb      	b.n	1d4b2 <FMG_CheckFileCoherence+0x216>
   1d31a:	f107 0518 	add.w	r5, r7, #24
   1d31e:	f107 0314 	add.w	r3, r7, #20
   1d322:	6818      	ldr	r0, [r3, #0]
   1d324:	f003 fb38 	bl	20998 <FS_length>
   1d328:	6028      	str	r0, [r5, #0]
   1d32a:	f107 0318 	add.w	r3, r7, #24
   1d32e:	681b      	ldr	r3, [r3, #0]
   1d330:	f1b3 3fff 	cmp.w	r3, #4294967295
   1d334:	d101      	bne.n	1d33a <FMG_CheckFileCoherence+0x9e>
   1d336:	231c      	movs	r3, #28
   1d338:	e0bb      	b.n	1d4b2 <FMG_CheckFileCoherence+0x216>
   1d33a:	f107 0320 	add.w	r3, r7, #32
   1d33e:	4618      	mov	r0, r3
   1d340:	f001 fef4 	bl	1f12c <md5_init>
   1d344:	f107 030c 	add.w	r3, r7, #12
   1d348:	2200      	movs	r2, #0
   1d34a:	601a      	str	r2, [r3, #0]
   1d34c:	f107 0310 	add.w	r3, r7, #16
   1d350:	2200      	movs	r2, #0
   1d352:	601a      	str	r2, [r3, #0]
   1d354:	e072      	b.n	1d43c <FMG_CheckFileCoherence+0x1a0>
   1d356:	f107 030c 	add.w	r3, r7, #12
   1d35a:	f107 010c 	add.w	r1, r7, #12
   1d35e:	f107 021c 	add.w	r2, r7, #28
   1d362:	6809      	ldr	r1, [r1, #0]
   1d364:	6812      	ldr	r2, [r2, #0]
   1d366:	188a      	adds	r2, r1, r2
   1d368:	601a      	str	r2, [r3, #0]
   1d36a:	f107 0318 	add.w	r3, r7, #24
   1d36e:	681b      	ldr	r3, [r3, #0]
   1d370:	f1a3 0210 	sub.w	r2, r3, #16
   1d374:	f107 030c 	add.w	r3, r7, #12
   1d378:	681b      	ldr	r3, [r3, #0]
   1d37a:	429a      	cmp	r2, r3
   1d37c:	da4d      	bge.n	1d41a <FMG_CheckFileCoherence+0x17e>
   1d37e:	f107 031c 	add.w	r3, r7, #28
   1d382:	681b      	ldr	r3, [r3, #0]
   1d384:	3b10      	subs	r3, #16
   1d386:	2b00      	cmp	r3, #0
   1d388:	db30      	blt.n	1d3ec <FMG_CheckFileCoherence+0x150>
   1d38a:	f107 0318 	add.w	r3, r7, #24
   1d38e:	681b      	ldr	r3, [r3, #0]
   1d390:	f1c3 0110 	rsb	r1, r3, #16
   1d394:	f107 0310 	add.w	r3, r7, #16
   1d398:	f107 020c 	add.w	r2, r7, #12
   1d39c:	6812      	ldr	r2, [r2, #0]
   1d39e:	188a      	adds	r2, r1, r2
   1d3a0:	601a      	str	r2, [r3, #0]
   1d3a2:	f107 021c 	add.w	r2, r7, #28
   1d3a6:	f107 0310 	add.w	r3, r7, #16
   1d3aa:	6812      	ldr	r2, [r2, #0]
   1d3ac:	681b      	ldr	r3, [r3, #0]
   1d3ae:	1ad3      	subs	r3, r2, r3
   1d3b0:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
   1d3b4:	18d2      	adds	r2, r2, r3
   1d3b6:	f107 0310 	add.w	r3, r7, #16
   1d3ba:	681b      	ldr	r3, [r3, #0]
   1d3bc:	f107 0188 	add.w	r1, r7, #136	; 0x88
   1d3c0:	4608      	mov	r0, r1
   1d3c2:	4611      	mov	r1, r2
   1d3c4:	461a      	mov	r2, r3
   1d3c6:	f7eb ec58 	blx	8c78 <_init+0x118>
   1d3ca:	f107 021c 	add.w	r2, r7, #28
   1d3ce:	f107 0310 	add.w	r3, r7, #16
   1d3d2:	6812      	ldr	r2, [r2, #0]
   1d3d4:	681b      	ldr	r3, [r3, #0]
   1d3d6:	1ad3      	subs	r3, r2, r3
   1d3d8:	f107 0120 	add.w	r1, r7, #32
   1d3dc:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
   1d3e0:	4608      	mov	r0, r1
   1d3e2:	4611      	mov	r1, r2
   1d3e4:	461a      	mov	r2, r3
   1d3e6:	f001 fedb 	bl	1f1a0 <md5_append>
   1d3ea:	e027      	b.n	1d43c <FMG_CheckFileCoherence+0x1a0>
   1d3ec:	f107 0288 	add.w	r2, r7, #136	; 0x88
   1d3f0:	f107 0310 	add.w	r3, r7, #16
   1d3f4:	681b      	ldr	r3, [r3, #0]
   1d3f6:	18d1      	adds	r1, r2, r3
   1d3f8:	f107 031c 	add.w	r3, r7, #28
   1d3fc:	681b      	ldr	r3, [r3, #0]
   1d3fe:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
   1d402:	4608      	mov	r0, r1
   1d404:	4611      	mov	r1, r2
   1d406:	461a      	mov	r2, r3
   1d408:	f7eb ec36 	blx	8c78 <_init+0x118>
   1d40c:	f107 0310 	add.w	r3, r7, #16
   1d410:	f107 0210 	add.w	r2, r7, #16
   1d414:	6812      	ldr	r2, [r2, #0]
   1d416:	601a      	str	r2, [r3, #0]
   1d418:	e010      	b.n	1d43c <FMG_CheckFileCoherence+0x1a0>
   1d41a:	f107 0120 	add.w	r1, r7, #32
   1d41e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
   1d422:	f107 031c 	add.w	r3, r7, #28
   1d426:	4608      	mov	r0, r1
   1d428:	4611      	mov	r1, r2
   1d42a:	681a      	ldr	r2, [r3, #0]
   1d42c:	f001 feb8 	bl	1f1a0 <md5_append>
   1d430:	f107 0310 	add.w	r3, r7, #16
   1d434:	f107 0210 	add.w	r2, r7, #16
   1d438:	6812      	ldr	r2, [r2, #0]
   1d43a:	601a      	str	r2, [r3, #0]
   1d43c:	f107 051c 	add.w	r5, r7, #28
   1d440:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
   1d444:	f107 0314 	add.w	r3, r7, #20
   1d448:	4610      	mov	r0, r2
   1d44a:	2101      	movs	r1, #1
   1d44c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1d450:	681b      	ldr	r3, [r3, #0]
   1d452:	f003 fb21 	bl	20a98 <FS_read>
   1d456:	6028      	str	r0, [r5, #0]
   1d458:	f107 031c 	add.w	r3, r7, #28
   1d45c:	681b      	ldr	r3, [r3, #0]
   1d45e:	2b00      	cmp	r3, #0
   1d460:	f47f af79 	bne.w	1d356 <FMG_CheckFileCoherence+0xba>
   1d464:	f107 030c 	add.w	r3, r7, #12
   1d468:	681b      	ldr	r3, [r3, #0]
   1d46a:	2b00      	cmp	r3, #0
   1d46c:	d101      	bne.n	1d472 <FMG_CheckFileCoherence+0x1d6>
   1d46e:	231b      	movs	r3, #27
   1d470:	e01f      	b.n	1d4b2 <FMG_CheckFileCoherence+0x216>
   1d472:	f107 0220 	add.w	r2, r7, #32
   1d476:	f107 0378 	add.w	r3, r7, #120	; 0x78
   1d47a:	4610      	mov	r0, r2
   1d47c:	4619      	mov	r1, r3
   1d47e:	f001 ff1b 	bl	1f2b8 <md5_finish>
   1d482:	f107 0314 	add.w	r3, r7, #20
   1d486:	6818      	ldr	r0, [r3, #0]
   1d488:	f003 fa00 	bl	2088c <FS_close>
   1d48c:	f107 0314 	add.w	r3, r7, #20
   1d490:	2200      	movs	r2, #0
   1d492:	601a      	str	r2, [r3, #0]
   1d494:	f107 0278 	add.w	r2, r7, #120	; 0x78
   1d498:	f107 0388 	add.w	r3, r7, #136	; 0x88
   1d49c:	4610      	mov	r0, r2
   1d49e:	4619      	mov	r1, r3
   1d4a0:	2210      	movs	r2, #16
   1d4a2:	f7eb ec28 	blx	8cf4 <_init+0x194>
   1d4a6:	4603      	mov	r3, r0
   1d4a8:	2b00      	cmp	r3, #0
   1d4aa:	d101      	bne.n	1d4b0 <FMG_CheckFileCoherence+0x214>
   1d4ac:	230a      	movs	r3, #10
   1d4ae:	e000      	b.n	1d4b2 <FMG_CheckFileCoherence+0x216>
   1d4b0:	231c      	movs	r3, #28
   1d4b2:	4618      	mov	r0, r3
   1d4b4:	4b07      	ldr	r3, [pc, #28]	; (1d4d4 <FMG_CheckFileCoherence+0x238>)
   1d4b6:	58e3      	ldr	r3, [r4, r3]
   1d4b8:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	; 0x4bc
   1d4bc:	681b      	ldr	r3, [r3, #0]
   1d4be:	429a      	cmp	r2, r3
   1d4c0:	d001      	beq.n	1d4c6 <FMG_CheckFileCoherence+0x22a>
   1d4c2:	f7eb fd6f 	bl	8fa4 <__stack_chk_fail>
   1d4c6:	f507 6798 	add.w	r7, r7, #1216	; 0x4c0
   1d4ca:	46bd      	mov	sp, r7
   1d4cc:	bdb0      	pop	{r4, r5, r7, pc}
   1d4ce:	bf00      	nop
   1d4d0:	00011e66 	.word	0x00011e66
   1d4d4:	000000ac 	.word	0x000000ac
   1d4d8:	00008f88 	.word	0x00008f88
   1d4dc:	00008f8a 	.word	0x00008f8a

0001d4e0 <FMG_CheckRecordCoherence>:
   1d4e0:	b590      	push	{r4, r7, lr}
   1d4e2:	b0a1      	sub	sp, #132	; 0x84
   1d4e4:	af00      	add	r7, sp, #0
   1d4e6:	60f8      	str	r0, [r7, #12]
   1d4e8:	60b9      	str	r1, [r7, #8]
   1d4ea:	607a      	str	r2, [r7, #4]
   1d4ec:	4c19      	ldr	r4, [pc, #100]	; (1d554 <FMG_CheckRecordCoherence+0x74>)
   1d4ee:	447c      	add	r4, pc
   1d4f0:	4b19      	ldr	r3, [pc, #100]	; (1d558 <FMG_CheckRecordCoherence+0x78>)
   1d4f2:	58e3      	ldr	r3, [r4, r3]
   1d4f4:	681b      	ldr	r3, [r3, #0]
   1d4f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   1d4f8:	f107 0314 	add.w	r3, r7, #20
   1d4fc:	4618      	mov	r0, r3
   1d4fe:	f001 fe15 	bl	1f12c <md5_init>
   1d502:	f107 0314 	add.w	r3, r7, #20
   1d506:	4618      	mov	r0, r3
   1d508:	68f9      	ldr	r1, [r7, #12]
   1d50a:	68ba      	ldr	r2, [r7, #8]
   1d50c:	f001 fe48 	bl	1f1a0 <md5_append>
   1d510:	f107 0214 	add.w	r2, r7, #20
   1d514:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   1d518:	4610      	mov	r0, r2
   1d51a:	4619      	mov	r1, r3
   1d51c:	f001 fecc 	bl	1f2b8 <md5_finish>
   1d520:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   1d524:	6878      	ldr	r0, [r7, #4]
   1d526:	4619      	mov	r1, r3
   1d528:	2210      	movs	r2, #16
   1d52a:	f7eb ebe4 	blx	8cf4 <_init+0x194>
   1d52e:	4603      	mov	r3, r0
   1d530:	2b00      	cmp	r3, #0
   1d532:	d101      	bne.n	1d538 <FMG_CheckRecordCoherence+0x58>
   1d534:	230a      	movs	r3, #10
   1d536:	e000      	b.n	1d53a <FMG_CheckRecordCoherence+0x5a>
   1d538:	231d      	movs	r3, #29
   1d53a:	4618      	mov	r0, r3
   1d53c:	4b06      	ldr	r3, [pc, #24]	; (1d558 <FMG_CheckRecordCoherence+0x78>)
   1d53e:	58e3      	ldr	r3, [r4, r3]
   1d540:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1d542:	681b      	ldr	r3, [r3, #0]
   1d544:	429a      	cmp	r2, r3
   1d546:	d001      	beq.n	1d54c <FMG_CheckRecordCoherence+0x6c>
   1d548:	f7eb fd2c 	bl	8fa4 <__stack_chk_fail>
   1d54c:	f107 0784 	add.w	r7, r7, #132	; 0x84
   1d550:	46bd      	mov	sp, r7
   1d552:	bd90      	pop	{r4, r7, pc}
   1d554:	00011c26 	.word	0x00011c26
   1d558:	000000ac 	.word	0x000000ac

0001d55c <FMG_CalculMD5>:
   1d55c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d55e:	b0a1      	sub	sp, #132	; 0x84
   1d560:	af00      	add	r7, sp, #0
   1d562:	60f8      	str	r0, [r7, #12]
   1d564:	60b9      	str	r1, [r7, #8]
   1d566:	607a      	str	r2, [r7, #4]
   1d568:	4e17      	ldr	r6, [pc, #92]	; (1d5c8 <FMG_CalculMD5+0x6c>)
   1d56a:	447e      	add	r6, pc
   1d56c:	4b17      	ldr	r3, [pc, #92]	; (1d5cc <FMG_CalculMD5+0x70>)
   1d56e:	58f3      	ldr	r3, [r6, r3]
   1d570:	681b      	ldr	r3, [r3, #0]
   1d572:	67fb      	str	r3, [r7, #124]	; 0x7c
   1d574:	f107 0314 	add.w	r3, r7, #20
   1d578:	4618      	mov	r0, r3
   1d57a:	f001 fdd7 	bl	1f12c <md5_init>
   1d57e:	f107 0314 	add.w	r3, r7, #20
   1d582:	4618      	mov	r0, r3
   1d584:	68f9      	ldr	r1, [r7, #12]
   1d586:	68ba      	ldr	r2, [r7, #8]
   1d588:	f001 fe0a 	bl	1f1a0 <md5_append>
   1d58c:	f107 0214 	add.w	r2, r7, #20
   1d590:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   1d594:	4610      	mov	r0, r2
   1d596:	4619      	mov	r1, r3
   1d598:	f001 fe8e 	bl	1f2b8 <md5_finish>
   1d59c:	687b      	ldr	r3, [r7, #4]
   1d59e:	461c      	mov	r4, r3
   1d5a0:	f107 056c 	add.w	r5, r7, #108	; 0x6c
   1d5a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d5a6:	6020      	str	r0, [r4, #0]
   1d5a8:	6061      	str	r1, [r4, #4]
   1d5aa:	60a2      	str	r2, [r4, #8]
   1d5ac:	60e3      	str	r3, [r4, #12]
   1d5ae:	4b07      	ldr	r3, [pc, #28]	; (1d5cc <FMG_CalculMD5+0x70>)
   1d5b0:	58f3      	ldr	r3, [r6, r3]
   1d5b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1d5b4:	681b      	ldr	r3, [r3, #0]
   1d5b6:	429a      	cmp	r2, r3
   1d5b8:	d001      	beq.n	1d5be <FMG_CalculMD5+0x62>
   1d5ba:	f7eb fcf3 	bl	8fa4 <__stack_chk_fail>
   1d5be:	f107 0784 	add.w	r7, r7, #132	; 0x84
   1d5c2:	46bd      	mov	sp, r7
   1d5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d5c6:	bf00      	nop
   1d5c8:	00011baa 	.word	0x00011baa
   1d5cc:	000000ac 	.word	0x000000ac

0001d5d0 <FMG_AddRecord>:
   1d5d0:	b590      	push	{r4, r7, lr}
   1d5d2:	b0a3      	sub	sp, #140	; 0x8c
   1d5d4:	af04      	add	r7, sp, #16
   1d5d6:	6178      	str	r0, [r7, #20]
   1d5d8:	6139      	str	r1, [r7, #16]
   1d5da:	60fa      	str	r2, [r7, #12]
   1d5dc:	60bb      	str	r3, [r7, #8]
   1d5de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   1d5e2:	607b      	str	r3, [r7, #4]
   1d5e4:	4cb9      	ldr	r4, [pc, #740]	; (1d8cc <FMG_AddRecord+0x2fc>)
   1d5e6:	447c      	add	r4, pc
   1d5e8:	4bb9      	ldr	r3, [pc, #740]	; (1d8d0 <FMG_AddRecord+0x300>)
   1d5ea:	58e3      	ldr	r3, [r4, r3]
   1d5ec:	681b      	ldr	r3, [r3, #0]
   1d5ee:	677b      	str	r3, [r7, #116]	; 0x74
   1d5f0:	2318      	movs	r3, #24
   1d5f2:	61bb      	str	r3, [r7, #24]
   1d5f4:	2300      	movs	r3, #0
   1d5f6:	61fb      	str	r3, [r7, #28]
   1d5f8:	697b      	ldr	r3, [r7, #20]
   1d5fa:	681b      	ldr	r3, [r3, #0]
   1d5fc:	2b00      	cmp	r3, #0
   1d5fe:	d110      	bne.n	1d622 <FMG_AddRecord+0x52>
   1d600:	697b      	ldr	r3, [r7, #20]
   1d602:	3304      	adds	r3, #4
   1d604:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d608:	4610      	mov	r0, r2
   1d60a:	4619      	mov	r1, r3
   1d60c:	f7eb eb08 	blx	8c20 <_init+0xc0>
   1d610:	697b      	ldr	r3, [r7, #20]
   1d612:	3315      	adds	r3, #21
   1d614:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1d618:	4610      	mov	r0, r2
   1d61a:	4619      	mov	r1, r3
   1d61c:	f7eb eb00 	blx	8c20 <_init+0xc0>
   1d620:	e028      	b.n	1d674 <FMG_AddRecord+0xa4>
   1d622:	697b      	ldr	r3, [r7, #20]
   1d624:	681b      	ldr	r3, [r3, #0]
   1d626:	2b01      	cmp	r3, #1
   1d628:	d122      	bne.n	1d670 <FMG_AddRecord+0xa0>
   1d62a:	697b      	ldr	r3, [r7, #20]
   1d62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d62e:	2b00      	cmp	r3, #0
   1d630:	d009      	beq.n	1d646 <FMG_AddRecord+0x76>
   1d632:	697b      	ldr	r3, [r7, #20]
   1d634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d636:	2b01      	cmp	r3, #1
   1d638:	d005      	beq.n	1d646 <FMG_AddRecord+0x76>
   1d63a:	697b      	ldr	r3, [r7, #20]
   1d63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d63e:	2b02      	cmp	r3, #2
   1d640:	d001      	beq.n	1d646 <FMG_AddRecord+0x76>
   1d642:	230f      	movs	r3, #15
   1d644:	e135      	b.n	1d8b2 <FMG_AddRecord+0x2e2>
   1d646:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1d64a:	4618      	mov	r0, r3
   1d64c:	4ba1      	ldr	r3, [pc, #644]	; (1d8d4 <FMG_AddRecord+0x304>)
   1d64e:	447b      	add	r3, pc
   1d650:	4619      	mov	r1, r3
   1d652:	f7eb eae6 	blx	8c20 <_init+0xc0>
   1d656:	697b      	ldr	r3, [r7, #20]
   1d658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1d65a:	4b9f      	ldr	r3, [pc, #636]	; (1d8d8 <FMG_AddRecord+0x308>)
   1d65c:	58e3      	ldr	r3, [r4, r3]
   1d65e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d662:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1d666:	4610      	mov	r0, r2
   1d668:	4619      	mov	r1, r3
   1d66a:	f7eb eada 	blx	8c20 <_init+0xc0>
   1d66e:	e001      	b.n	1d674 <FMG_AddRecord+0xa4>
   1d670:	2311      	movs	r3, #17
   1d672:	e11e      	b.n	1d8b2 <FMG_AddRecord+0x2e2>
   1d674:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d678:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d67c:	4610      	mov	r0, r2
   1d67e:	4619      	mov	r1, r3
   1d680:	f7fc faa8 	bl	19bd4 <ExtraireFileID>
   1d684:	6238      	str	r0, [r7, #32]
   1d686:	6a3b      	ldr	r3, [r7, #32]
   1d688:	2b00      	cmp	r3, #0
   1d68a:	db33      	blt.n	1d6f4 <FMG_AddRecord+0x124>
   1d68c:	4b93      	ldr	r3, [pc, #588]	; (1d8dc <FMG_AddRecord+0x30c>)
   1d68e:	58e3      	ldr	r3, [r4, r3]
   1d690:	461a      	mov	r2, r3
   1d692:	6a3b      	ldr	r3, [r7, #32]
   1d694:	212c      	movs	r1, #44	; 0x2c
   1d696:	fb01 f303 	mul.w	r3, r1, r3
   1d69a:	18d3      	adds	r3, r2, r3
   1d69c:	3328      	adds	r3, #40	; 0x28
   1d69e:	681b      	ldr	r3, [r3, #0]
   1d6a0:	2b00      	cmp	r3, #0
   1d6a2:	d00d      	beq.n	1d6c0 <FMG_AddRecord+0xf0>
   1d6a4:	4b8d      	ldr	r3, [pc, #564]	; (1d8dc <FMG_AddRecord+0x30c>)
   1d6a6:	58e3      	ldr	r3, [r4, r3]
   1d6a8:	461a      	mov	r2, r3
   1d6aa:	6a3b      	ldr	r3, [r7, #32]
   1d6ac:	212c      	movs	r1, #44	; 0x2c
   1d6ae:	fb01 f303 	mul.w	r3, r1, r3
   1d6b2:	18d3      	adds	r3, r2, r3
   1d6b4:	3328      	adds	r3, #40	; 0x28
   1d6b6:	681b      	ldr	r3, [r3, #0]
   1d6b8:	2b01      	cmp	r3, #1
   1d6ba:	d001      	beq.n	1d6c0 <FMG_AddRecord+0xf0>
   1d6bc:	230d      	movs	r3, #13
   1d6be:	e0f8      	b.n	1d8b2 <FMG_AddRecord+0x2e2>
   1d6c0:	4b86      	ldr	r3, [pc, #536]	; (1d8dc <FMG_AddRecord+0x30c>)
   1d6c2:	58e3      	ldr	r3, [r4, r3]
   1d6c4:	461a      	mov	r2, r3
   1d6c6:	6a3b      	ldr	r3, [r7, #32]
   1d6c8:	212c      	movs	r1, #44	; 0x2c
   1d6ca:	fb01 f303 	mul.w	r3, r1, r3
   1d6ce:	18d3      	adds	r3, r2, r3
   1d6d0:	332c      	adds	r3, #44	; 0x2c
   1d6d2:	681b      	ldr	r3, [r3, #0]
   1d6d4:	2b00      	cmp	r3, #0
   1d6d6:	d00f      	beq.n	1d6f8 <FMG_AddRecord+0x128>
   1d6d8:	4b80      	ldr	r3, [pc, #512]	; (1d8dc <FMG_AddRecord+0x30c>)
   1d6da:	58e3      	ldr	r3, [r4, r3]
   1d6dc:	461a      	mov	r2, r3
   1d6de:	6a3b      	ldr	r3, [r7, #32]
   1d6e0:	212c      	movs	r1, #44	; 0x2c
   1d6e2:	fb01 f303 	mul.w	r3, r1, r3
   1d6e6:	18d3      	adds	r3, r2, r3
   1d6e8:	332c      	adds	r3, #44	; 0x2c
   1d6ea:	681b      	ldr	r3, [r3, #0]
   1d6ec:	2b01      	cmp	r3, #1
   1d6ee:	d003      	beq.n	1d6f8 <FMG_AddRecord+0x128>
   1d6f0:	230e      	movs	r3, #14
   1d6f2:	e0de      	b.n	1d8b2 <FMG_AddRecord+0x2e2>
   1d6f4:	230b      	movs	r3, #11
   1d6f6:	e0dc      	b.n	1d8b2 <FMG_AddRecord+0x2e2>
   1d6f8:	f107 0150 	add.w	r1, r7, #80	; 0x50
   1d6fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d700:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d704:	4608      	mov	r0, r1
   1d706:	4976      	ldr	r1, [pc, #472]	; (1d8e0 <FMG_AddRecord+0x310>)
   1d708:	4479      	add	r1, pc
   1d70a:	f7eb ead4 	blx	8cb4 <_init+0x154>
   1d70e:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1d712:	4618      	mov	r0, r3
   1d714:	f003 f914 	bl	20940 <FS_exist>
   1d718:	6278      	str	r0, [r7, #36]	; 0x24
   1d71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d71c:	2b02      	cmp	r3, #2
   1d71e:	d001      	beq.n	1d724 <FMG_AddRecord+0x154>
   1d720:	230b      	movs	r3, #11
   1d722:	e0c6      	b.n	1d8b2 <FMG_AddRecord+0x2e2>
   1d724:	4b6d      	ldr	r3, [pc, #436]	; (1d8dc <FMG_AddRecord+0x30c>)
   1d726:	58e3      	ldr	r3, [r4, r3]
   1d728:	461a      	mov	r2, r3
   1d72a:	6a3b      	ldr	r3, [r7, #32]
   1d72c:	212c      	movs	r1, #44	; 0x2c
   1d72e:	fb01 f303 	mul.w	r3, r1, r3
   1d732:	18d3      	adds	r3, r2, r3
   1d734:	332c      	adds	r3, #44	; 0x2c
   1d736:	681b      	ldr	r3, [r3, #0]
   1d738:	2b01      	cmp	r3, #1
   1d73a:	d10c      	bne.n	1d756 <FMG_AddRecord+0x186>
   1d73c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d740:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d744:	4610      	mov	r0, r2
   1d746:	4619      	mov	r1, r3
   1d748:	f7ff fda8 	bl	1d29c <FMG_CheckFileCoherence>
   1d74c:	4603      	mov	r3, r0
   1d74e:	2b0a      	cmp	r3, #10
   1d750:	d001      	beq.n	1d756 <FMG_AddRecord+0x186>
   1d752:	231c      	movs	r3, #28
   1d754:	e0ad      	b.n	1d8b2 <FMG_AddRecord+0x2e2>
   1d756:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1d75a:	4618      	mov	r0, r3
   1d75c:	4b61      	ldr	r3, [pc, #388]	; (1d8e4 <FMG_AddRecord+0x314>)
   1d75e:	447b      	add	r3, pc
   1d760:	4619      	mov	r1, r3
   1d762:	f003 f96f 	bl	20a44 <FS_open>
   1d766:	61f8      	str	r0, [r7, #28]
   1d768:	69fb      	ldr	r3, [r7, #28]
   1d76a:	2b00      	cmp	r3, #0
   1d76c:	d102      	bne.n	1d774 <FMG_AddRecord+0x1a4>
   1d76e:	2313      	movs	r3, #19
   1d770:	61bb      	str	r3, [r7, #24]
   1d772:	e09d      	b.n	1d8b0 <FMG_AddRecord+0x2e0>
   1d774:	69f8      	ldr	r0, [r7, #28]
   1d776:	f003 f889 	bl	2088c <FS_close>
   1d77a:	2300      	movs	r3, #0
   1d77c:	61fb      	str	r3, [r7, #28]
   1d77e:	68bb      	ldr	r3, [r7, #8]
   1d780:	2b01      	cmp	r3, #1
   1d782:	d032      	beq.n	1d7ea <FMG_AddRecord+0x21a>
   1d784:	2b01      	cmp	r3, #1
   1d786:	d302      	bcc.n	1d78e <FMG_AddRecord+0x1be>
   1d788:	2b02      	cmp	r3, #2
   1d78a:	d060      	beq.n	1d84e <FMG_AddRecord+0x27e>
   1d78c:	e08d      	b.n	1d8aa <FMG_AddRecord+0x2da>
   1d78e:	4b53      	ldr	r3, [pc, #332]	; (1d8dc <FMG_AddRecord+0x30c>)
   1d790:	58e3      	ldr	r3, [r4, r3]
   1d792:	461a      	mov	r2, r3
   1d794:	6a3b      	ldr	r3, [r7, #32]
   1d796:	212c      	movs	r1, #44	; 0x2c
   1d798:	fb01 f303 	mul.w	r3, r1, r3
   1d79c:	18d3      	adds	r3, r2, r3
   1d79e:	332c      	adds	r3, #44	; 0x2c
   1d7a0:	681b      	ldr	r3, [r3, #0]
   1d7a2:	2b01      	cmp	r3, #1
   1d7a4:	d110      	bne.n	1d7c8 <FMG_AddRecord+0x1f8>
   1d7a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d7aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d7ae:	6a39      	ldr	r1, [r7, #32]
   1d7b0:	9100      	str	r1, [sp, #0]
   1d7b2:	2102      	movs	r1, #2
   1d7b4:	9101      	str	r1, [sp, #4]
   1d7b6:	4610      	mov	r0, r2
   1d7b8:	4619      	mov	r1, r3
   1d7ba:	693a      	ldr	r2, [r7, #16]
   1d7bc:	68fb      	ldr	r3, [r7, #12]
   1d7be:	f7fc fc3d 	bl	1a03c <AddModifyRecordBeginWithCkecksum>
   1d7c2:	4603      	mov	r3, r0
   1d7c4:	61bb      	str	r3, [r7, #24]
   1d7c6:	e073      	b.n	1d8b0 <FMG_AddRecord+0x2e0>
   1d7c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d7cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d7d0:	6a39      	ldr	r1, [r7, #32]
   1d7d2:	9100      	str	r1, [sp, #0]
   1d7d4:	2102      	movs	r1, #2
   1d7d6:	9101      	str	r1, [sp, #4]
   1d7d8:	4610      	mov	r0, r2
   1d7da:	4619      	mov	r1, r3
   1d7dc:	693a      	ldr	r2, [r7, #16]
   1d7de:	68fb      	ldr	r3, [r7, #12]
   1d7e0:	f7fc fa9c 	bl	19d1c <AddModifyRecordBegin>
   1d7e4:	4603      	mov	r3, r0
   1d7e6:	61bb      	str	r3, [r7, #24]
   1d7e8:	e062      	b.n	1d8b0 <FMG_AddRecord+0x2e0>
   1d7ea:	4b3c      	ldr	r3, [pc, #240]	; (1d8dc <FMG_AddRecord+0x30c>)
   1d7ec:	58e3      	ldr	r3, [r4, r3]
   1d7ee:	461a      	mov	r2, r3
   1d7f0:	6a3b      	ldr	r3, [r7, #32]
   1d7f2:	212c      	movs	r1, #44	; 0x2c
   1d7f4:	fb01 f303 	mul.w	r3, r1, r3
   1d7f8:	18d3      	adds	r3, r2, r3
   1d7fa:	332c      	adds	r3, #44	; 0x2c
   1d7fc:	681b      	ldr	r3, [r3, #0]
   1d7fe:	2b01      	cmp	r3, #1
   1d800:	d112      	bne.n	1d828 <FMG_AddRecord+0x258>
   1d802:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d806:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d80a:	6879      	ldr	r1, [r7, #4]
   1d80c:	9100      	str	r1, [sp, #0]
   1d80e:	6a39      	ldr	r1, [r7, #32]
   1d810:	9101      	str	r1, [sp, #4]
   1d812:	2102      	movs	r1, #2
   1d814:	9102      	str	r1, [sp, #8]
   1d816:	4610      	mov	r0, r2
   1d818:	4619      	mov	r1, r3
   1d81a:	693a      	ldr	r2, [r7, #16]
   1d81c:	68fb      	ldr	r3, [r7, #12]
   1d81e:	f7fd f827 	bl	1a870 <AddModifyRecordMiddleWithCkecksum>
   1d822:	4603      	mov	r3, r0
   1d824:	61bb      	str	r3, [r7, #24]
   1d826:	e043      	b.n	1d8b0 <FMG_AddRecord+0x2e0>
   1d828:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d82c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d830:	6879      	ldr	r1, [r7, #4]
   1d832:	9100      	str	r1, [sp, #0]
   1d834:	6a39      	ldr	r1, [r7, #32]
   1d836:	9101      	str	r1, [sp, #4]
   1d838:	2102      	movs	r1, #2
   1d83a:	9102      	str	r1, [sp, #8]
   1d83c:	4610      	mov	r0, r2
   1d83e:	4619      	mov	r1, r3
   1d840:	693a      	ldr	r2, [r7, #16]
   1d842:	68fb      	ldr	r3, [r7, #12]
   1d844:	f7fc fe08 	bl	1a458 <AddModifyRecordMiddle>
   1d848:	4603      	mov	r3, r0
   1d84a:	61bb      	str	r3, [r7, #24]
   1d84c:	e030      	b.n	1d8b0 <FMG_AddRecord+0x2e0>
   1d84e:	4b23      	ldr	r3, [pc, #140]	; (1d8dc <FMG_AddRecord+0x30c>)
   1d850:	58e3      	ldr	r3, [r4, r3]
   1d852:	461a      	mov	r2, r3
   1d854:	6a3b      	ldr	r3, [r7, #32]
   1d856:	212c      	movs	r1, #44	; 0x2c
   1d858:	fb01 f303 	mul.w	r3, r1, r3
   1d85c:	18d3      	adds	r3, r2, r3
   1d85e:	332c      	adds	r3, #44	; 0x2c
   1d860:	681b      	ldr	r3, [r3, #0]
   1d862:	2b01      	cmp	r3, #1
   1d864:	d110      	bne.n	1d888 <FMG_AddRecord+0x2b8>
   1d866:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d86a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d86e:	6a39      	ldr	r1, [r7, #32]
   1d870:	9100      	str	r1, [sp, #0]
   1d872:	2102      	movs	r1, #2
   1d874:	9101      	str	r1, [sp, #4]
   1d876:	4610      	mov	r0, r2
   1d878:	4619      	mov	r1, r3
   1d87a:	693a      	ldr	r2, [r7, #16]
   1d87c:	68fb      	ldr	r3, [r7, #12]
   1d87e:	f7fd fced 	bl	1b25c <AddModifyRecordEndWithCkecksum>
   1d882:	4603      	mov	r3, r0
   1d884:	61bb      	str	r3, [r7, #24]
   1d886:	e013      	b.n	1d8b0 <FMG_AddRecord+0x2e0>
   1d888:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d88c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1d890:	6a39      	ldr	r1, [r7, #32]
   1d892:	9100      	str	r1, [sp, #0]
   1d894:	2102      	movs	r1, #2
   1d896:	9101      	str	r1, [sp, #4]
   1d898:	4610      	mov	r0, r2
   1d89a:	4619      	mov	r1, r3
   1d89c:	693a      	ldr	r2, [r7, #16]
   1d89e:	68fb      	ldr	r3, [r7, #12]
   1d8a0:	f7fd fa7e 	bl	1ada0 <AddModifyRecordEnd>
   1d8a4:	4603      	mov	r3, r0
   1d8a6:	61bb      	str	r3, [r7, #24]
   1d8a8:	e002      	b.n	1d8b0 <FMG_AddRecord+0x2e0>
   1d8aa:	2310      	movs	r3, #16
   1d8ac:	61bb      	str	r3, [r7, #24]
   1d8ae:	bf00      	nop
   1d8b0:	69bb      	ldr	r3, [r7, #24]
   1d8b2:	4618      	mov	r0, r3
   1d8b4:	4b06      	ldr	r3, [pc, #24]	; (1d8d0 <FMG_AddRecord+0x300>)
   1d8b6:	58e3      	ldr	r3, [r4, r3]
   1d8b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1d8ba:	681b      	ldr	r3, [r3, #0]
   1d8bc:	429a      	cmp	r2, r3
   1d8be:	d001      	beq.n	1d8c4 <FMG_AddRecord+0x2f4>
   1d8c0:	f7eb fb70 	bl	8fa4 <__stack_chk_fail>
   1d8c4:	f107 077c 	add.w	r7, r7, #124	; 0x7c
   1d8c8:	46bd      	mov	sp, r7
   1d8ca:	bd90      	pop	{r4, r7, pc}
   1d8cc:	00011b2e 	.word	0x00011b2e
   1d8d0:	000000ac 	.word	0x000000ac
   1d8d4:	0001298e 	.word	0x0001298e
   1d8d8:	000000a8 	.word	0x000000a8
   1d8dc:	000000c0 	.word	0x000000c0
   1d8e0:	00008b6c 	.word	0x00008b6c
   1d8e4:	00008b2a 	.word	0x00008b2a

0001d8e8 <FMG_ModifyRecord>:
   1d8e8:	b590      	push	{r4, r7, lr}
   1d8ea:	b0a5      	sub	sp, #148	; 0x94
   1d8ec:	af04      	add	r7, sp, #16
   1d8ee:	6178      	str	r0, [r7, #20]
   1d8f0:	6139      	str	r1, [r7, #16]
   1d8f2:	60fa      	str	r2, [r7, #12]
   1d8f4:	60bb      	str	r3, [r7, #8]
   1d8f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1d8fa:	607b      	str	r3, [r7, #4]
   1d8fc:	4cc6      	ldr	r4, [pc, #792]	; (1dc18 <FMG_ModifyRecord+0x330>)
   1d8fe:	447c      	add	r4, pc
   1d900:	4bc6      	ldr	r3, [pc, #792]	; (1dc1c <FMG_ModifyRecord+0x334>)
   1d902:	58e3      	ldr	r3, [r4, r3]
   1d904:	681b      	ldr	r3, [r3, #0]
   1d906:	67fb      	str	r3, [r7, #124]	; 0x7c
   1d908:	2318      	movs	r3, #24
   1d90a:	61fb      	str	r3, [r7, #28]
   1d90c:	2300      	movs	r3, #0
   1d90e:	623b      	str	r3, [r7, #32]
   1d910:	2300      	movs	r3, #0
   1d912:	627b      	str	r3, [r7, #36]	; 0x24
   1d914:	697b      	ldr	r3, [r7, #20]
   1d916:	681b      	ldr	r3, [r3, #0]
   1d918:	2b00      	cmp	r3, #0
   1d91a:	d110      	bne.n	1d93e <FMG_ModifyRecord+0x56>
   1d91c:	697b      	ldr	r3, [r7, #20]
   1d91e:	3304      	adds	r3, #4
   1d920:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d924:	4610      	mov	r0, r2
   1d926:	4619      	mov	r1, r3
   1d928:	f7eb e97a 	blx	8c20 <_init+0xc0>
   1d92c:	697b      	ldr	r3, [r7, #20]
   1d92e:	3315      	adds	r3, #21
   1d930:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1d934:	4610      	mov	r0, r2
   1d936:	4619      	mov	r1, r3
   1d938:	f7eb e972 	blx	8c20 <_init+0xc0>
   1d93c:	e028      	b.n	1d990 <FMG_ModifyRecord+0xa8>
   1d93e:	697b      	ldr	r3, [r7, #20]
   1d940:	681b      	ldr	r3, [r3, #0]
   1d942:	2b01      	cmp	r3, #1
   1d944:	d122      	bne.n	1d98c <FMG_ModifyRecord+0xa4>
   1d946:	697b      	ldr	r3, [r7, #20]
   1d948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d94a:	2b00      	cmp	r3, #0
   1d94c:	d009      	beq.n	1d962 <FMG_ModifyRecord+0x7a>
   1d94e:	697b      	ldr	r3, [r7, #20]
   1d950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d952:	2b01      	cmp	r3, #1
   1d954:	d005      	beq.n	1d962 <FMG_ModifyRecord+0x7a>
   1d956:	697b      	ldr	r3, [r7, #20]
   1d958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d95a:	2b02      	cmp	r3, #2
   1d95c:	d001      	beq.n	1d962 <FMG_ModifyRecord+0x7a>
   1d95e:	230f      	movs	r3, #15
   1d960:	e14c      	b.n	1dbfc <FMG_ModifyRecord+0x314>
   1d962:	f107 0330 	add.w	r3, r7, #48	; 0x30
   1d966:	4618      	mov	r0, r3
   1d968:	4bad      	ldr	r3, [pc, #692]	; (1dc20 <FMG_ModifyRecord+0x338>)
   1d96a:	447b      	add	r3, pc
   1d96c:	4619      	mov	r1, r3
   1d96e:	f7eb e958 	blx	8c20 <_init+0xc0>
   1d972:	697b      	ldr	r3, [r7, #20]
   1d974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1d976:	4bab      	ldr	r3, [pc, #684]	; (1dc24 <FMG_ModifyRecord+0x33c>)
   1d978:	58e3      	ldr	r3, [r4, r3]
   1d97a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d97e:	f107 0244 	add.w	r2, r7, #68	; 0x44
   1d982:	4610      	mov	r0, r2
   1d984:	4619      	mov	r1, r3
   1d986:	f7eb e94c 	blx	8c20 <_init+0xc0>
   1d98a:	e001      	b.n	1d990 <FMG_ModifyRecord+0xa8>
   1d98c:	2311      	movs	r3, #17
   1d98e:	e135      	b.n	1dbfc <FMG_ModifyRecord+0x314>
   1d990:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d994:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1d998:	4610      	mov	r0, r2
   1d99a:	4619      	mov	r1, r3
   1d99c:	f7fc f91a 	bl	19bd4 <ExtraireFileID>
   1d9a0:	62b8      	str	r0, [r7, #40]	; 0x28
   1d9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d9a4:	2b00      	cmp	r3, #0
   1d9a6:	db33      	blt.n	1da10 <FMG_ModifyRecord+0x128>
   1d9a8:	4b9f      	ldr	r3, [pc, #636]	; (1dc28 <FMG_ModifyRecord+0x340>)
   1d9aa:	58e3      	ldr	r3, [r4, r3]
   1d9ac:	461a      	mov	r2, r3
   1d9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d9b0:	212c      	movs	r1, #44	; 0x2c
   1d9b2:	fb01 f303 	mul.w	r3, r1, r3
   1d9b6:	18d3      	adds	r3, r2, r3
   1d9b8:	3328      	adds	r3, #40	; 0x28
   1d9ba:	681b      	ldr	r3, [r3, #0]
   1d9bc:	2b00      	cmp	r3, #0
   1d9be:	d00d      	beq.n	1d9dc <FMG_ModifyRecord+0xf4>
   1d9c0:	4b99      	ldr	r3, [pc, #612]	; (1dc28 <FMG_ModifyRecord+0x340>)
   1d9c2:	58e3      	ldr	r3, [r4, r3]
   1d9c4:	461a      	mov	r2, r3
   1d9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d9c8:	212c      	movs	r1, #44	; 0x2c
   1d9ca:	fb01 f303 	mul.w	r3, r1, r3
   1d9ce:	18d3      	adds	r3, r2, r3
   1d9d0:	3328      	adds	r3, #40	; 0x28
   1d9d2:	681b      	ldr	r3, [r3, #0]
   1d9d4:	2b01      	cmp	r3, #1
   1d9d6:	d001      	beq.n	1d9dc <FMG_ModifyRecord+0xf4>
   1d9d8:	230d      	movs	r3, #13
   1d9da:	e10f      	b.n	1dbfc <FMG_ModifyRecord+0x314>
   1d9dc:	4b92      	ldr	r3, [pc, #584]	; (1dc28 <FMG_ModifyRecord+0x340>)
   1d9de:	58e3      	ldr	r3, [r4, r3]
   1d9e0:	461a      	mov	r2, r3
   1d9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d9e4:	212c      	movs	r1, #44	; 0x2c
   1d9e6:	fb01 f303 	mul.w	r3, r1, r3
   1d9ea:	18d3      	adds	r3, r2, r3
   1d9ec:	332c      	adds	r3, #44	; 0x2c
   1d9ee:	681b      	ldr	r3, [r3, #0]
   1d9f0:	2b00      	cmp	r3, #0
   1d9f2:	d00f      	beq.n	1da14 <FMG_ModifyRecord+0x12c>
   1d9f4:	4b8c      	ldr	r3, [pc, #560]	; (1dc28 <FMG_ModifyRecord+0x340>)
   1d9f6:	58e3      	ldr	r3, [r4, r3]
   1d9f8:	461a      	mov	r2, r3
   1d9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d9fc:	212c      	movs	r1, #44	; 0x2c
   1d9fe:	fb01 f303 	mul.w	r3, r1, r3
   1da02:	18d3      	adds	r3, r2, r3
   1da04:	332c      	adds	r3, #44	; 0x2c
   1da06:	681b      	ldr	r3, [r3, #0]
   1da08:	2b01      	cmp	r3, #1
   1da0a:	d003      	beq.n	1da14 <FMG_ModifyRecord+0x12c>
   1da0c:	230e      	movs	r3, #14
   1da0e:	e0f5      	b.n	1dbfc <FMG_ModifyRecord+0x314>
   1da10:	230b      	movs	r3, #11
   1da12:	e0f3      	b.n	1dbfc <FMG_ModifyRecord+0x314>
   1da14:	f107 0158 	add.w	r1, r7, #88	; 0x58
   1da18:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1da1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1da20:	4608      	mov	r0, r1
   1da22:	4982      	ldr	r1, [pc, #520]	; (1dc2c <FMG_ModifyRecord+0x344>)
   1da24:	4479      	add	r1, pc
   1da26:	f7eb e946 	blx	8cb4 <_init+0x154>
   1da2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
   1da2e:	4618      	mov	r0, r3
   1da30:	f002 ff86 	bl	20940 <FS_exist>
   1da34:	62f8      	str	r0, [r7, #44]	; 0x2c
   1da36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1da38:	2b02      	cmp	r3, #2
   1da3a:	d001      	beq.n	1da40 <FMG_ModifyRecord+0x158>
   1da3c:	230b      	movs	r3, #11
   1da3e:	e0dd      	b.n	1dbfc <FMG_ModifyRecord+0x314>
   1da40:	4b79      	ldr	r3, [pc, #484]	; (1dc28 <FMG_ModifyRecord+0x340>)
   1da42:	58e3      	ldr	r3, [r4, r3]
   1da44:	461a      	mov	r2, r3
   1da46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1da48:	212c      	movs	r1, #44	; 0x2c
   1da4a:	fb01 f303 	mul.w	r3, r1, r3
   1da4e:	18d3      	adds	r3, r2, r3
   1da50:	332c      	adds	r3, #44	; 0x2c
   1da52:	681b      	ldr	r3, [r3, #0]
   1da54:	2b01      	cmp	r3, #1
   1da56:	d10c      	bne.n	1da72 <FMG_ModifyRecord+0x18a>
   1da58:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1da5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1da60:	4610      	mov	r0, r2
   1da62:	4619      	mov	r1, r3
   1da64:	f7ff fc1a 	bl	1d29c <FMG_CheckFileCoherence>
   1da68:	4603      	mov	r3, r0
   1da6a:	2b0a      	cmp	r3, #10
   1da6c:	d001      	beq.n	1da72 <FMG_ModifyRecord+0x18a>
   1da6e:	231c      	movs	r3, #28
   1da70:	e0c4      	b.n	1dbfc <FMG_ModifyRecord+0x314>
   1da72:	f107 0358 	add.w	r3, r7, #88	; 0x58
   1da76:	4618      	mov	r0, r3
   1da78:	4b6d      	ldr	r3, [pc, #436]	; (1dc30 <FMG_ModifyRecord+0x348>)
   1da7a:	447b      	add	r3, pc
   1da7c:	4619      	mov	r1, r3
   1da7e:	f002 ffe1 	bl	20a44 <FS_open>
   1da82:	6278      	str	r0, [r7, #36]	; 0x24
   1da84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1da86:	2b00      	cmp	r3, #0
   1da88:	d102      	bne.n	1da90 <FMG_ModifyRecord+0x1a8>
   1da8a:	2313      	movs	r3, #19
   1da8c:	61fb      	str	r3, [r7, #28]
   1da8e:	e0b4      	b.n	1dbfa <FMG_ModifyRecord+0x312>
   1da90:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1da92:	f002 ff81 	bl	20998 <FS_length>
   1da96:	6238      	str	r0, [r7, #32]
   1da98:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1da9a:	f002 fef7 	bl	2088c <FS_close>
   1da9e:	2300      	movs	r3, #0
   1daa0:	627b      	str	r3, [r7, #36]	; 0x24
   1daa2:	4b61      	ldr	r3, [pc, #388]	; (1dc28 <FMG_ModifyRecord+0x340>)
   1daa4:	58e3      	ldr	r3, [r4, r3]
   1daa6:	461a      	mov	r2, r3
   1daa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1daaa:	212c      	movs	r1, #44	; 0x2c
   1daac:	fb01 f303 	mul.w	r3, r1, r3
   1dab0:	18d3      	adds	r3, r2, r3
   1dab2:	332c      	adds	r3, #44	; 0x2c
   1dab4:	681b      	ldr	r3, [r3, #0]
   1dab6:	6a38      	ldr	r0, [r7, #32]
   1dab8:	4619      	mov	r1, r3
   1daba:	f7fe ffa7 	bl	1ca0c <IsFileEmpty>
   1dabe:	4603      	mov	r3, r0
   1dac0:	2b00      	cmp	r3, #0
   1dac2:	d001      	beq.n	1dac8 <FMG_ModifyRecord+0x1e0>
   1dac4:	2318      	movs	r3, #24
   1dac6:	e099      	b.n	1dbfc <FMG_ModifyRecord+0x314>
   1dac8:	68bb      	ldr	r3, [r7, #8]
   1daca:	2b01      	cmp	r3, #1
   1dacc:	d032      	beq.n	1db34 <FMG_ModifyRecord+0x24c>
   1dace:	2b01      	cmp	r3, #1
   1dad0:	d302      	bcc.n	1dad8 <FMG_ModifyRecord+0x1f0>
   1dad2:	2b02      	cmp	r3, #2
   1dad4:	d060      	beq.n	1db98 <FMG_ModifyRecord+0x2b0>
   1dad6:	e08d      	b.n	1dbf4 <FMG_ModifyRecord+0x30c>
   1dad8:	4b53      	ldr	r3, [pc, #332]	; (1dc28 <FMG_ModifyRecord+0x340>)
   1dada:	58e3      	ldr	r3, [r4, r3]
   1dadc:	461a      	mov	r2, r3
   1dade:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1dae0:	212c      	movs	r1, #44	; 0x2c
   1dae2:	fb01 f303 	mul.w	r3, r1, r3
   1dae6:	18d3      	adds	r3, r2, r3
   1dae8:	332c      	adds	r3, #44	; 0x2c
   1daea:	681b      	ldr	r3, [r3, #0]
   1daec:	2b01      	cmp	r3, #1
   1daee:	d110      	bne.n	1db12 <FMG_ModifyRecord+0x22a>
   1daf0:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1daf4:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1daf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1dafa:	9100      	str	r1, [sp, #0]
   1dafc:	2101      	movs	r1, #1
   1dafe:	9101      	str	r1, [sp, #4]
   1db00:	4610      	mov	r0, r2
   1db02:	4619      	mov	r1, r3
   1db04:	693a      	ldr	r2, [r7, #16]
   1db06:	68fb      	ldr	r3, [r7, #12]
   1db08:	f7fc fa98 	bl	1a03c <AddModifyRecordBeginWithCkecksum>
   1db0c:	4603      	mov	r3, r0
   1db0e:	61fb      	str	r3, [r7, #28]
   1db10:	e073      	b.n	1dbfa <FMG_ModifyRecord+0x312>
   1db12:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1db16:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1db1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1db1c:	9100      	str	r1, [sp, #0]
   1db1e:	2101      	movs	r1, #1
   1db20:	9101      	str	r1, [sp, #4]
   1db22:	4610      	mov	r0, r2
   1db24:	4619      	mov	r1, r3
   1db26:	693a      	ldr	r2, [r7, #16]
   1db28:	68fb      	ldr	r3, [r7, #12]
   1db2a:	f7fc f8f7 	bl	19d1c <AddModifyRecordBegin>
   1db2e:	4603      	mov	r3, r0
   1db30:	61fb      	str	r3, [r7, #28]
   1db32:	e062      	b.n	1dbfa <FMG_ModifyRecord+0x312>
   1db34:	4b3c      	ldr	r3, [pc, #240]	; (1dc28 <FMG_ModifyRecord+0x340>)
   1db36:	58e3      	ldr	r3, [r4, r3]
   1db38:	461a      	mov	r2, r3
   1db3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1db3c:	212c      	movs	r1, #44	; 0x2c
   1db3e:	fb01 f303 	mul.w	r3, r1, r3
   1db42:	18d3      	adds	r3, r2, r3
   1db44:	332c      	adds	r3, #44	; 0x2c
   1db46:	681b      	ldr	r3, [r3, #0]
   1db48:	2b01      	cmp	r3, #1
   1db4a:	d112      	bne.n	1db72 <FMG_ModifyRecord+0x28a>
   1db4c:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1db50:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1db54:	6879      	ldr	r1, [r7, #4]
   1db56:	9100      	str	r1, [sp, #0]
   1db58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1db5a:	9101      	str	r1, [sp, #4]
   1db5c:	2101      	movs	r1, #1
   1db5e:	9102      	str	r1, [sp, #8]
   1db60:	4610      	mov	r0, r2
   1db62:	4619      	mov	r1, r3
   1db64:	693a      	ldr	r2, [r7, #16]
   1db66:	68fb      	ldr	r3, [r7, #12]
   1db68:	f7fc fe82 	bl	1a870 <AddModifyRecordMiddleWithCkecksum>
   1db6c:	4603      	mov	r3, r0
   1db6e:	61fb      	str	r3, [r7, #28]
   1db70:	e043      	b.n	1dbfa <FMG_ModifyRecord+0x312>
   1db72:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1db76:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1db7a:	6879      	ldr	r1, [r7, #4]
   1db7c:	9100      	str	r1, [sp, #0]
   1db7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1db80:	9101      	str	r1, [sp, #4]
   1db82:	2101      	movs	r1, #1
   1db84:	9102      	str	r1, [sp, #8]
   1db86:	4610      	mov	r0, r2
   1db88:	4619      	mov	r1, r3
   1db8a:	693a      	ldr	r2, [r7, #16]
   1db8c:	68fb      	ldr	r3, [r7, #12]
   1db8e:	f7fc fc63 	bl	1a458 <AddModifyRecordMiddle>
   1db92:	4603      	mov	r3, r0
   1db94:	61fb      	str	r3, [r7, #28]
   1db96:	e030      	b.n	1dbfa <FMG_ModifyRecord+0x312>
   1db98:	4b23      	ldr	r3, [pc, #140]	; (1dc28 <FMG_ModifyRecord+0x340>)
   1db9a:	58e3      	ldr	r3, [r4, r3]
   1db9c:	461a      	mov	r2, r3
   1db9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1dba0:	212c      	movs	r1, #44	; 0x2c
   1dba2:	fb01 f303 	mul.w	r3, r1, r3
   1dba6:	18d3      	adds	r3, r2, r3
   1dba8:	332c      	adds	r3, #44	; 0x2c
   1dbaa:	681b      	ldr	r3, [r3, #0]
   1dbac:	2b01      	cmp	r3, #1
   1dbae:	d110      	bne.n	1dbd2 <FMG_ModifyRecord+0x2ea>
   1dbb0:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1dbb4:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1dbb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1dbba:	9100      	str	r1, [sp, #0]
   1dbbc:	2101      	movs	r1, #1
   1dbbe:	9101      	str	r1, [sp, #4]
   1dbc0:	4610      	mov	r0, r2
   1dbc2:	4619      	mov	r1, r3
   1dbc4:	693a      	ldr	r2, [r7, #16]
   1dbc6:	68fb      	ldr	r3, [r7, #12]
   1dbc8:	f7fd fb48 	bl	1b25c <AddModifyRecordEndWithCkecksum>
   1dbcc:	4603      	mov	r3, r0
   1dbce:	61fb      	str	r3, [r7, #28]
   1dbd0:	e013      	b.n	1dbfa <FMG_ModifyRecord+0x312>
   1dbd2:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1dbd6:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1dbda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1dbdc:	9100      	str	r1, [sp, #0]
   1dbde:	2101      	movs	r1, #1
   1dbe0:	9101      	str	r1, [sp, #4]
   1dbe2:	4610      	mov	r0, r2
   1dbe4:	4619      	mov	r1, r3
   1dbe6:	693a      	ldr	r2, [r7, #16]
   1dbe8:	68fb      	ldr	r3, [r7, #12]
   1dbea:	f7fd f8d9 	bl	1ada0 <AddModifyRecordEnd>
   1dbee:	4603      	mov	r3, r0
   1dbf0:	61fb      	str	r3, [r7, #28]
   1dbf2:	e002      	b.n	1dbfa <FMG_ModifyRecord+0x312>
   1dbf4:	2310      	movs	r3, #16
   1dbf6:	61fb      	str	r3, [r7, #28]
   1dbf8:	bf00      	nop
   1dbfa:	69fb      	ldr	r3, [r7, #28]
   1dbfc:	4618      	mov	r0, r3
   1dbfe:	4b07      	ldr	r3, [pc, #28]	; (1dc1c <FMG_ModifyRecord+0x334>)
   1dc00:	58e3      	ldr	r3, [r4, r3]
   1dc02:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1dc04:	681b      	ldr	r3, [r3, #0]
   1dc06:	429a      	cmp	r2, r3
   1dc08:	d001      	beq.n	1dc0e <FMG_ModifyRecord+0x326>
   1dc0a:	f7eb f9cb 	bl	8fa4 <__stack_chk_fail>
   1dc0e:	f107 0784 	add.w	r7, r7, #132	; 0x84
   1dc12:	46bd      	mov	sp, r7
   1dc14:	bd90      	pop	{r4, r7, pc}
   1dc16:	bf00      	nop
   1dc18:	00011816 	.word	0x00011816
   1dc1c:	000000ac 	.word	0x000000ac
   1dc20:	00012672 	.word	0x00012672
   1dc24:	000000a8 	.word	0x000000a8
   1dc28:	000000c0 	.word	0x000000c0
   1dc2c:	00008850 	.word	0x00008850
   1dc30:	0000880e 	.word	0x0000880e

0001dc34 <FMG_ReadRecord>:
   1dc34:	b590      	push	{r4, r7, lr}
   1dc36:	b0a9      	sub	sp, #164	; 0xa4
   1dc38:	af00      	add	r7, sp, #0
   1dc3a:	6178      	str	r0, [r7, #20]
   1dc3c:	6139      	str	r1, [r7, #16]
   1dc3e:	60fa      	str	r2, [r7, #12]
   1dc40:	60bb      	str	r3, [r7, #8]
   1dc42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1dc46:	607b      	str	r3, [r7, #4]
   1dc48:	f8df 4450 	ldr.w	r4, [pc, #1104]	; 1e09c <FMG_ReadRecord+0x468>
   1dc4c:	447c      	add	r4, pc
   1dc4e:	f8df 3450 	ldr.w	r3, [pc, #1104]	; 1e0a0 <FMG_ReadRecord+0x46c>
   1dc52:	58e3      	ldr	r3, [r4, r3]
   1dc54:	681b      	ldr	r3, [r3, #0]
   1dc56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   1dc5a:	2300      	movs	r3, #0
   1dc5c:	61fb      	str	r3, [r7, #28]
   1dc5e:	2319      	movs	r3, #25
   1dc60:	62bb      	str	r3, [r7, #40]	; 0x28
   1dc62:	2300      	movs	r3, #0
   1dc64:	633b      	str	r3, [r7, #48]	; 0x30
   1dc66:	2300      	movs	r3, #0
   1dc68:	63bb      	str	r3, [r7, #56]	; 0x38
   1dc6a:	2300      	movs	r3, #0
   1dc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1dc6e:	697b      	ldr	r3, [r7, #20]
   1dc70:	681b      	ldr	r3, [r3, #0]
   1dc72:	2b00      	cmp	r3, #0
   1dc74:	d110      	bne.n	1dc98 <FMG_ReadRecord+0x64>
   1dc76:	697b      	ldr	r3, [r7, #20]
   1dc78:	3304      	adds	r3, #4
   1dc7a:	f107 0250 	add.w	r2, r7, #80	; 0x50
   1dc7e:	4610      	mov	r0, r2
   1dc80:	4619      	mov	r1, r3
   1dc82:	f7ea efce 	blx	8c20 <_init+0xc0>
   1dc86:	697b      	ldr	r3, [r7, #20]
   1dc88:	3315      	adds	r3, #21
   1dc8a:	f107 0264 	add.w	r2, r7, #100	; 0x64
   1dc8e:	4610      	mov	r0, r2
   1dc90:	4619      	mov	r1, r3
   1dc92:	f7ea efc6 	blx	8c20 <_init+0xc0>
   1dc96:	e028      	b.n	1dcea <FMG_ReadRecord+0xb6>
   1dc98:	697b      	ldr	r3, [r7, #20]
   1dc9a:	681b      	ldr	r3, [r3, #0]
   1dc9c:	2b01      	cmp	r3, #1
   1dc9e:	d122      	bne.n	1dce6 <FMG_ReadRecord+0xb2>
   1dca0:	697b      	ldr	r3, [r7, #20]
   1dca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dca4:	2b00      	cmp	r3, #0
   1dca6:	d009      	beq.n	1dcbc <FMG_ReadRecord+0x88>
   1dca8:	697b      	ldr	r3, [r7, #20]
   1dcaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dcac:	2b01      	cmp	r3, #1
   1dcae:	d005      	beq.n	1dcbc <FMG_ReadRecord+0x88>
   1dcb0:	697b      	ldr	r3, [r7, #20]
   1dcb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dcb4:	2b02      	cmp	r3, #2
   1dcb6:	d001      	beq.n	1dcbc <FMG_ReadRecord+0x88>
   1dcb8:	230f      	movs	r3, #15
   1dcba:	e1e1      	b.n	1e080 <FMG_ReadRecord+0x44c>
   1dcbc:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1dcc0:	4618      	mov	r0, r3
   1dcc2:	4bf8      	ldr	r3, [pc, #992]	; (1e0a4 <FMG_ReadRecord+0x470>)
   1dcc4:	447b      	add	r3, pc
   1dcc6:	4619      	mov	r1, r3
   1dcc8:	f7ea efaa 	blx	8c20 <_init+0xc0>
   1dccc:	697b      	ldr	r3, [r7, #20]
   1dcce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1dcd0:	4bf5      	ldr	r3, [pc, #980]	; (1e0a8 <FMG_ReadRecord+0x474>)
   1dcd2:	58e3      	ldr	r3, [r4, r3]
   1dcd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1dcd8:	f107 0264 	add.w	r2, r7, #100	; 0x64
   1dcdc:	4610      	mov	r0, r2
   1dcde:	4619      	mov	r1, r3
   1dce0:	f7ea ef9e 	blx	8c20 <_init+0xc0>
   1dce4:	e001      	b.n	1dcea <FMG_ReadRecord+0xb6>
   1dce6:	2311      	movs	r3, #17
   1dce8:	e1ca      	b.n	1e080 <FMG_ReadRecord+0x44c>
   1dcea:	f107 0250 	add.w	r2, r7, #80	; 0x50
   1dcee:	f107 0364 	add.w	r3, r7, #100	; 0x64
   1dcf2:	4610      	mov	r0, r2
   1dcf4:	4619      	mov	r1, r3
   1dcf6:	f7fb ff6d 	bl	19bd4 <ExtraireFileID>
   1dcfa:	6438      	str	r0, [r7, #64]	; 0x40
   1dcfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dcfe:	2b00      	cmp	r3, #0
   1dd00:	db33      	blt.n	1dd6a <FMG_ReadRecord+0x136>
   1dd02:	4bea      	ldr	r3, [pc, #936]	; (1e0ac <FMG_ReadRecord+0x478>)
   1dd04:	58e3      	ldr	r3, [r4, r3]
   1dd06:	461a      	mov	r2, r3
   1dd08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dd0a:	212c      	movs	r1, #44	; 0x2c
   1dd0c:	fb01 f303 	mul.w	r3, r1, r3
   1dd10:	18d3      	adds	r3, r2, r3
   1dd12:	3328      	adds	r3, #40	; 0x28
   1dd14:	681b      	ldr	r3, [r3, #0]
   1dd16:	2b00      	cmp	r3, #0
   1dd18:	d00d      	beq.n	1dd36 <FMG_ReadRecord+0x102>
   1dd1a:	4be4      	ldr	r3, [pc, #912]	; (1e0ac <FMG_ReadRecord+0x478>)
   1dd1c:	58e3      	ldr	r3, [r4, r3]
   1dd1e:	461a      	mov	r2, r3
   1dd20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dd22:	212c      	movs	r1, #44	; 0x2c
   1dd24:	fb01 f303 	mul.w	r3, r1, r3
   1dd28:	18d3      	adds	r3, r2, r3
   1dd2a:	3328      	adds	r3, #40	; 0x28
   1dd2c:	681b      	ldr	r3, [r3, #0]
   1dd2e:	2b01      	cmp	r3, #1
   1dd30:	d001      	beq.n	1dd36 <FMG_ReadRecord+0x102>
   1dd32:	230d      	movs	r3, #13
   1dd34:	e1a4      	b.n	1e080 <FMG_ReadRecord+0x44c>
   1dd36:	4bdd      	ldr	r3, [pc, #884]	; (1e0ac <FMG_ReadRecord+0x478>)
   1dd38:	58e3      	ldr	r3, [r4, r3]
   1dd3a:	461a      	mov	r2, r3
   1dd3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dd3e:	212c      	movs	r1, #44	; 0x2c
   1dd40:	fb01 f303 	mul.w	r3, r1, r3
   1dd44:	18d3      	adds	r3, r2, r3
   1dd46:	332c      	adds	r3, #44	; 0x2c
   1dd48:	681b      	ldr	r3, [r3, #0]
   1dd4a:	2b00      	cmp	r3, #0
   1dd4c:	d00f      	beq.n	1dd6e <FMG_ReadRecord+0x13a>
   1dd4e:	4bd7      	ldr	r3, [pc, #860]	; (1e0ac <FMG_ReadRecord+0x478>)
   1dd50:	58e3      	ldr	r3, [r4, r3]
   1dd52:	461a      	mov	r2, r3
   1dd54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dd56:	212c      	movs	r1, #44	; 0x2c
   1dd58:	fb01 f303 	mul.w	r3, r1, r3
   1dd5c:	18d3      	adds	r3, r2, r3
   1dd5e:	332c      	adds	r3, #44	; 0x2c
   1dd60:	681b      	ldr	r3, [r3, #0]
   1dd62:	2b01      	cmp	r3, #1
   1dd64:	d003      	beq.n	1dd6e <FMG_ReadRecord+0x13a>
   1dd66:	230e      	movs	r3, #14
   1dd68:	e18a      	b.n	1e080 <FMG_ReadRecord+0x44c>
   1dd6a:	230b      	movs	r3, #11
   1dd6c:	e188      	b.n	1e080 <FMG_ReadRecord+0x44c>
   1dd6e:	68bb      	ldr	r3, [r7, #8]
   1dd70:	2b00      	cmp	r3, #0
   1dd72:	d007      	beq.n	1dd84 <FMG_ReadRecord+0x150>
   1dd74:	68bb      	ldr	r3, [r7, #8]
   1dd76:	2b01      	cmp	r3, #1
   1dd78:	d004      	beq.n	1dd84 <FMG_ReadRecord+0x150>
   1dd7a:	68bb      	ldr	r3, [r7, #8]
   1dd7c:	2b02      	cmp	r3, #2
   1dd7e:	d001      	beq.n	1dd84 <FMG_ReadRecord+0x150>
   1dd80:	2310      	movs	r3, #16
   1dd82:	e17d      	b.n	1e080 <FMG_ReadRecord+0x44c>
   1dd84:	f107 0178 	add.w	r1, r7, #120	; 0x78
   1dd88:	f107 0250 	add.w	r2, r7, #80	; 0x50
   1dd8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
   1dd90:	4608      	mov	r0, r1
   1dd92:	49c7      	ldr	r1, [pc, #796]	; (1e0b0 <FMG_ReadRecord+0x47c>)
   1dd94:	4479      	add	r1, pc
   1dd96:	f7ea ef8e 	blx	8cb4 <_init+0x154>
   1dd9a:	f107 0378 	add.w	r3, r7, #120	; 0x78
   1dd9e:	4618      	mov	r0, r3
   1dda0:	f002 fdce 	bl	20940 <FS_exist>
   1dda4:	6478      	str	r0, [r7, #68]	; 0x44
   1dda6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dda8:	2b02      	cmp	r3, #2
   1ddaa:	d001      	beq.n	1ddb0 <FMG_ReadRecord+0x17c>
   1ddac:	230b      	movs	r3, #11
   1ddae:	e167      	b.n	1e080 <FMG_ReadRecord+0x44c>
   1ddb0:	4bbe      	ldr	r3, [pc, #760]	; (1e0ac <FMG_ReadRecord+0x478>)
   1ddb2:	58e3      	ldr	r3, [r4, r3]
   1ddb4:	461a      	mov	r2, r3
   1ddb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ddb8:	212c      	movs	r1, #44	; 0x2c
   1ddba:	fb01 f303 	mul.w	r3, r1, r3
   1ddbe:	18d3      	adds	r3, r2, r3
   1ddc0:	332c      	adds	r3, #44	; 0x2c
   1ddc2:	681b      	ldr	r3, [r3, #0]
   1ddc4:	2b01      	cmp	r3, #1
   1ddc6:	d10c      	bne.n	1dde2 <FMG_ReadRecord+0x1ae>
   1ddc8:	f107 0250 	add.w	r2, r7, #80	; 0x50
   1ddcc:	f107 0364 	add.w	r3, r7, #100	; 0x64
   1ddd0:	4610      	mov	r0, r2
   1ddd2:	4619      	mov	r1, r3
   1ddd4:	f7ff fa62 	bl	1d29c <FMG_CheckFileCoherence>
   1ddd8:	4603      	mov	r3, r0
   1ddda:	2b0a      	cmp	r3, #10
   1dddc:	d001      	beq.n	1dde2 <FMG_ReadRecord+0x1ae>
   1ddde:	231c      	movs	r3, #28
   1dde0:	e14e      	b.n	1e080 <FMG_ReadRecord+0x44c>
   1dde2:	f107 0378 	add.w	r3, r7, #120	; 0x78
   1dde6:	4618      	mov	r0, r3
   1dde8:	4bb2      	ldr	r3, [pc, #712]	; (1e0b4 <FMG_ReadRecord+0x480>)
   1ddea:	447b      	add	r3, pc
   1ddec:	4619      	mov	r1, r3
   1ddee:	f002 fe29 	bl	20a44 <FS_open>
   1ddf2:	63f8      	str	r0, [r7, #60]	; 0x3c
   1ddf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ddf6:	2b00      	cmp	r3, #0
   1ddf8:	d102      	bne.n	1de00 <FMG_ReadRecord+0x1cc>
   1ddfa:	2313      	movs	r3, #19
   1ddfc:	62bb      	str	r3, [r7, #40]	; 0x28
   1ddfe:	e13e      	b.n	1e07e <FMG_ReadRecord+0x44a>
   1de00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1de02:	f002 fdc9 	bl	20998 <FS_length>
   1de06:	64b8      	str	r0, [r7, #72]	; 0x48
   1de08:	4ba8      	ldr	r3, [pc, #672]	; (1e0ac <FMG_ReadRecord+0x478>)
   1de0a:	58e3      	ldr	r3, [r4, r3]
   1de0c:	461a      	mov	r2, r3
   1de0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1de10:	212c      	movs	r1, #44	; 0x2c
   1de12:	fb01 f303 	mul.w	r3, r1, r3
   1de16:	18d3      	adds	r3, r2, r3
   1de18:	332c      	adds	r3, #44	; 0x2c
   1de1a:	681b      	ldr	r3, [r3, #0]
   1de1c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1de1e:	4619      	mov	r1, r3
   1de20:	f7fe fdf4 	bl	1ca0c <IsFileEmpty>
   1de24:	4603      	mov	r3, r0
   1de26:	2b00      	cmp	r3, #0
   1de28:	d006      	beq.n	1de38 <FMG_ReadRecord+0x204>
   1de2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1de2c:	f002 fd2e 	bl	2088c <FS_close>
   1de30:	2300      	movs	r3, #0
   1de32:	63fb      	str	r3, [r7, #60]	; 0x3c
   1de34:	2319      	movs	r3, #25
   1de36:	e123      	b.n	1e080 <FMG_ReadRecord+0x44c>
   1de38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1de3a:	4618      	mov	r0, r3
   1de3c:	f002 ff8e 	bl	20d5c <PageAlloc>
   1de40:	63b8      	str	r0, [r7, #56]	; 0x38
   1de42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1de44:	2b00      	cmp	r3, #0
   1de46:	f000 8112 	beq.w	1e06e <FMG_ReadRecord+0x43a>
   1de4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1de4c:	2100      	movs	r1, #0
   1de4e:	2200      	movs	r2, #0
   1de50:	f002 fe78 	bl	20b44 <FS_seek>
   1de54:	6478      	str	r0, [r7, #68]	; 0x44
   1de56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1de58:	2b02      	cmp	r3, #2
   1de5a:	f040 8108 	bne.w	1e06e <FMG_ReadRecord+0x43a>
   1de5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1de60:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1de62:	2201      	movs	r2, #1
   1de64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1de66:	f002 fe17 	bl	20a98 <FS_read>
   1de6a:	64f8      	str	r0, [r7, #76]	; 0x4c
   1de6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1de6e:	2b01      	cmp	r3, #1
   1de70:	f040 80fd 	bne.w	1e06e <FMG_ReadRecord+0x43a>
   1de74:	4b8d      	ldr	r3, [pc, #564]	; (1e0ac <FMG_ReadRecord+0x478>)
   1de76:	58e3      	ldr	r3, [r4, r3]
   1de78:	461a      	mov	r2, r3
   1de7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1de7c:	212c      	movs	r1, #44	; 0x2c
   1de7e:	fb01 f303 	mul.w	r3, r1, r3
   1de82:	18d3      	adds	r3, r2, r3
   1de84:	3328      	adds	r3, #40	; 0x28
   1de86:	681b      	ldr	r3, [r3, #0]
   1de88:	2b01      	cmp	r3, #1
   1de8a:	f040 80b6 	bne.w	1dffa <FMG_ReadRecord+0x3c6>
   1de8e:	4b87      	ldr	r3, [pc, #540]	; (1e0ac <FMG_ReadRecord+0x478>)
   1de90:	58e3      	ldr	r3, [r4, r3]
   1de92:	461a      	mov	r2, r3
   1de94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1de96:	212c      	movs	r1, #44	; 0x2c
   1de98:	fb01 f303 	mul.w	r3, r1, r3
   1de9c:	18d3      	adds	r3, r2, r3
   1de9e:	332c      	adds	r3, #44	; 0x2c
   1dea0:	681b      	ldr	r3, [r3, #0]
   1dea2:	2b01      	cmp	r3, #1
   1dea4:	d103      	bne.n	1deae <FMG_ReadRecord+0x27a>
   1dea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1dea8:	3b10      	subs	r3, #16
   1deaa:	623b      	str	r3, [r7, #32]
   1deac:	e001      	b.n	1deb2 <FMG_ReadRecord+0x27e>
   1deae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1deb0:	623b      	str	r3, [r7, #32]
   1deb2:	68bb      	ldr	r3, [r7, #8]
   1deb4:	2b02      	cmp	r3, #2
   1deb6:	d12f      	bne.n	1df18 <FMG_ReadRecord+0x2e4>
   1deb8:	2300      	movs	r3, #0
   1deba:	62fb      	str	r3, [r7, #44]	; 0x2c
   1debc:	2300      	movs	r3, #0
   1debe:	633b      	str	r3, [r7, #48]	; 0x30
   1dec0:	e012      	b.n	1dee8 <FMG_ReadRecord+0x2b4>
   1dec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1dec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1dec6:	18d3      	adds	r3, r2, r3
   1dec8:	f107 021c 	add.w	r2, r7, #28
   1decc:	4610      	mov	r0, r2
   1dece:	4619      	mov	r1, r3
   1ded0:	2204      	movs	r2, #4
   1ded2:	f7ea eed2 	blx	8c78 <_init+0x118>
   1ded6:	69fb      	ldr	r3, [r7, #28]
   1ded8:	461a      	mov	r2, r3
   1deda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1dedc:	18d3      	adds	r3, r2, r3
   1dede:	3304      	adds	r3, #4
   1dee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   1dee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1dee4:	3301      	adds	r3, #1
   1dee6:	633b      	str	r3, [r7, #48]	; 0x30
   1dee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1deea:	2b00      	cmp	r3, #0
   1deec:	db03      	blt.n	1def6 <FMG_ReadRecord+0x2c2>
   1deee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1def0:	6a3b      	ldr	r3, [r7, #32]
   1def2:	429a      	cmp	r2, r3
   1def4:	dbe5      	blt.n	1dec2 <FMG_ReadRecord+0x28e>
   1def6:	69fa      	ldr	r2, [r7, #28]
   1def8:	68fb      	ldr	r3, [r7, #12]
   1defa:	601a      	str	r2, [r3, #0]
   1defc:	69fb      	ldr	r3, [r7, #28]
   1defe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1df00:	1ad3      	subs	r3, r2, r3
   1df02:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1df04:	18d2      	adds	r2, r2, r3
   1df06:	69fb      	ldr	r3, [r7, #28]
   1df08:	6938      	ldr	r0, [r7, #16]
   1df0a:	4611      	mov	r1, r2
   1df0c:	461a      	mov	r2, r3
   1df0e:	f7ea eeb4 	blx	8c78 <_init+0x118>
   1df12:	230a      	movs	r3, #10
   1df14:	62bb      	str	r3, [r7, #40]	; 0x28
   1df16:	e0aa      	b.n	1e06e <FMG_ReadRecord+0x43a>
   1df18:	68bb      	ldr	r3, [r7, #8]
   1df1a:	2b00      	cmp	r3, #0
   1df1c:	d11e      	bne.n	1df5c <FMG_ReadRecord+0x328>
   1df1e:	2300      	movs	r3, #0
   1df20:	633b      	str	r3, [r7, #48]	; 0x30
   1df22:	6a3b      	ldr	r3, [r7, #32]
   1df24:	2b04      	cmp	r3, #4
   1df26:	f240 80a2 	bls.w	1e06e <FMG_ReadRecord+0x43a>
   1df2a:	68f8      	ldr	r0, [r7, #12]
   1df2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1df2e:	2204      	movs	r2, #4
   1df30:	f7ea eea2 	blx	8c78 <_init+0x118>
   1df34:	68fb      	ldr	r3, [r7, #12]
   1df36:	681b      	ldr	r3, [r3, #0]
   1df38:	3304      	adds	r3, #4
   1df3a:	461a      	mov	r2, r3
   1df3c:	6a3b      	ldr	r3, [r7, #32]
   1df3e:	429a      	cmp	r2, r3
   1df40:	f300 8095 	bgt.w	1e06e <FMG_ReadRecord+0x43a>
   1df44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1df46:	1d1a      	adds	r2, r3, #4
   1df48:	68fb      	ldr	r3, [r7, #12]
   1df4a:	681b      	ldr	r3, [r3, #0]
   1df4c:	6938      	ldr	r0, [r7, #16]
   1df4e:	4611      	mov	r1, r2
   1df50:	461a      	mov	r2, r3
   1df52:	f7ea ee92 	blx	8c78 <_init+0x118>
   1df56:	230a      	movs	r3, #10
   1df58:	62bb      	str	r3, [r7, #40]	; 0x28
   1df5a:	e088      	b.n	1e06e <FMG_ReadRecord+0x43a>
   1df5c:	68bb      	ldr	r3, [r7, #8]
   1df5e:	2b01      	cmp	r3, #1
   1df60:	f040 8085 	bne.w	1e06e <FMG_ReadRecord+0x43a>
   1df64:	687b      	ldr	r3, [r7, #4]
   1df66:	633b      	str	r3, [r7, #48]	; 0x30
   1df68:	2300      	movs	r3, #0
   1df6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1df6c:	2300      	movs	r3, #0
   1df6e:	637b      	str	r3, [r7, #52]	; 0x34
   1df70:	e01f      	b.n	1dfb2 <FMG_ReadRecord+0x37e>
   1df72:	2300      	movs	r3, #0
   1df74:	61fb      	str	r3, [r7, #28]
   1df76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1df78:	2b00      	cmp	r3, #0
   1df7a:	db14      	blt.n	1dfa6 <FMG_ReadRecord+0x372>
   1df7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1df7e:	6a3b      	ldr	r3, [r7, #32]
   1df80:	429a      	cmp	r2, r3
   1df82:	da10      	bge.n	1dfa6 <FMG_ReadRecord+0x372>
   1df84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1df86:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1df88:	18d3      	adds	r3, r2, r3
   1df8a:	f107 021c 	add.w	r2, r7, #28
   1df8e:	4610      	mov	r0, r2
   1df90:	4619      	mov	r1, r3
   1df92:	2204      	movs	r2, #4
   1df94:	f7ea ee70 	blx	8c78 <_init+0x118>
   1df98:	69fb      	ldr	r3, [r7, #28]
   1df9a:	461a      	mov	r2, r3
   1df9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1df9e:	18d3      	adds	r3, r2, r3
   1dfa0:	3304      	adds	r3, #4
   1dfa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   1dfa4:	e002      	b.n	1dfac <FMG_ReadRecord+0x378>
   1dfa6:	f04f 33ff 	mov.w	r3, #4294967295
   1dfaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   1dfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1dfae:	3301      	adds	r3, #1
   1dfb0:	637b      	str	r3, [r7, #52]	; 0x34
   1dfb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1dfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1dfb6:	429a      	cmp	r2, r3
   1dfb8:	da02      	bge.n	1dfc0 <FMG_ReadRecord+0x38c>
   1dfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1dfbc:	2b00      	cmp	r3, #0
   1dfbe:	dad8      	bge.n	1df72 <FMG_ReadRecord+0x33e>
   1dfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1dfc2:	2b00      	cmp	r3, #0
   1dfc4:	db53      	blt.n	1e06e <FMG_ReadRecord+0x43a>
   1dfc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1dfc8:	6a3b      	ldr	r3, [r7, #32]
   1dfca:	429a      	cmp	r2, r3
   1dfcc:	da4f      	bge.n	1e06e <FMG_ReadRecord+0x43a>
   1dfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1dfd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1dfd2:	18d3      	adds	r3, r2, r3
   1dfd4:	68f8      	ldr	r0, [r7, #12]
   1dfd6:	4619      	mov	r1, r3
   1dfd8:	2204      	movs	r2, #4
   1dfda:	f7ea ee4e 	blx	8c78 <_init+0x118>
   1dfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1dfe0:	3304      	adds	r3, #4
   1dfe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1dfe4:	18d2      	adds	r2, r2, r3
   1dfe6:	68fb      	ldr	r3, [r7, #12]
   1dfe8:	681b      	ldr	r3, [r3, #0]
   1dfea:	6938      	ldr	r0, [r7, #16]
   1dfec:	4611      	mov	r1, r2
   1dfee:	461a      	mov	r2, r3
   1dff0:	f7ea ee42 	blx	8c78 <_init+0x118>
   1dff4:	230a      	movs	r3, #10
   1dff6:	62bb      	str	r3, [r7, #40]	; 0x28
   1dff8:	e039      	b.n	1e06e <FMG_ReadRecord+0x43a>
   1dffa:	4b2c      	ldr	r3, [pc, #176]	; (1e0ac <FMG_ReadRecord+0x478>)
   1dffc:	58e3      	ldr	r3, [r4, r3]
   1dffe:	461a      	mov	r2, r3
   1e000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1e002:	212c      	movs	r1, #44	; 0x2c
   1e004:	fb01 f303 	mul.w	r3, r1, r3
   1e008:	18d3      	adds	r3, r2, r3
   1e00a:	332c      	adds	r3, #44	; 0x2c
   1e00c:	681b      	ldr	r3, [r3, #0]
   1e00e:	2b01      	cmp	r3, #1
   1e010:	d103      	bne.n	1e01a <FMG_ReadRecord+0x3e6>
   1e012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e014:	3b10      	subs	r3, #16
   1e016:	623b      	str	r3, [r7, #32]
   1e018:	e001      	b.n	1e01e <FMG_ReadRecord+0x3ea>
   1e01a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1e01c:	623b      	str	r3, [r7, #32]
   1e01e:	68bb      	ldr	r3, [r7, #8]
   1e020:	2b02      	cmp	r3, #2
   1e022:	d105      	bne.n	1e030 <FMG_ReadRecord+0x3fc>
   1e024:	68fb      	ldr	r3, [r7, #12]
   1e026:	681b      	ldr	r3, [r3, #0]
   1e028:	6a3a      	ldr	r2, [r7, #32]
   1e02a:	1ad3      	subs	r3, r2, r3
   1e02c:	627b      	str	r3, [r7, #36]	; 0x24
   1e02e:	e00b      	b.n	1e048 <FMG_ReadRecord+0x414>
   1e030:	68bb      	ldr	r3, [r7, #8]
   1e032:	2b00      	cmp	r3, #0
   1e034:	d102      	bne.n	1e03c <FMG_ReadRecord+0x408>
   1e036:	2300      	movs	r3, #0
   1e038:	627b      	str	r3, [r7, #36]	; 0x24
   1e03a:	e005      	b.n	1e048 <FMG_ReadRecord+0x414>
   1e03c:	68fb      	ldr	r3, [r7, #12]
   1e03e:	681b      	ldr	r3, [r3, #0]
   1e040:	687a      	ldr	r2, [r7, #4]
   1e042:	fb02 f303 	mul.w	r3, r2, r3
   1e046:	627b      	str	r3, [r7, #36]	; 0x24
   1e048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e04a:	2b00      	cmp	r3, #0
   1e04c:	db0f      	blt.n	1e06e <FMG_ReadRecord+0x43a>
   1e04e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e050:	6a3b      	ldr	r3, [r7, #32]
   1e052:	429a      	cmp	r2, r3
   1e054:	da0b      	bge.n	1e06e <FMG_ReadRecord+0x43a>
   1e056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e058:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e05a:	18d2      	adds	r2, r2, r3
   1e05c:	68fb      	ldr	r3, [r7, #12]
   1e05e:	681b      	ldr	r3, [r3, #0]
   1e060:	6938      	ldr	r0, [r7, #16]
   1e062:	4611      	mov	r1, r2
   1e064:	461a      	mov	r2, r3
   1e066:	f7ea ee08 	blx	8c78 <_init+0x118>
   1e06a:	230a      	movs	r3, #10
   1e06c:	62bb      	str	r3, [r7, #40]	; 0x28
   1e06e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1e070:	f002 fc0c 	bl	2088c <FS_close>
   1e074:	2300      	movs	r3, #0
   1e076:	63fb      	str	r3, [r7, #60]	; 0x3c
   1e078:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1e07a:	f002 fe99 	bl	20db0 <PageFree>
   1e07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e080:	4618      	mov	r0, r3
   1e082:	4b07      	ldr	r3, [pc, #28]	; (1e0a0 <FMG_ReadRecord+0x46c>)
   1e084:	58e3      	ldr	r3, [r4, r3]
   1e086:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   1e08a:	681b      	ldr	r3, [r3, #0]
   1e08c:	429a      	cmp	r2, r3
   1e08e:	d001      	beq.n	1e094 <FMG_ReadRecord+0x460>
   1e090:	f7ea ff88 	bl	8fa4 <__stack_chk_fail>
   1e094:	f107 07a4 	add.w	r7, r7, #164	; 0xa4
   1e098:	46bd      	mov	sp, r7
   1e09a:	bd90      	pop	{r4, r7, pc}
   1e09c:	000114c8 	.word	0x000114c8
   1e0a0:	000000ac 	.word	0x000000ac
   1e0a4:	00012318 	.word	0x00012318
   1e0a8:	000000a8 	.word	0x000000a8
   1e0ac:	000000c0 	.word	0x000000c0
   1e0b0:	000084e0 	.word	0x000084e0
   1e0b4:	000084a2 	.word	0x000084a2

0001e0b8 <FMG_DeleteRecord>:
   1e0b8:	b590      	push	{r4, r7, lr}
   1e0ba:	b0a1      	sub	sp, #132	; 0x84
   1e0bc:	af02      	add	r7, sp, #8
   1e0be:	60f8      	str	r0, [r7, #12]
   1e0c0:	60b9      	str	r1, [r7, #8]
   1e0c2:	607a      	str	r2, [r7, #4]
   1e0c4:	603b      	str	r3, [r7, #0]
   1e0c6:	4cba      	ldr	r4, [pc, #744]	; (1e3b0 <FMG_DeleteRecord+0x2f8>)
   1e0c8:	447c      	add	r4, pc
   1e0ca:	4bba      	ldr	r3, [pc, #744]	; (1e3b4 <FMG_DeleteRecord+0x2fc>)
   1e0cc:	58e3      	ldr	r3, [r4, r3]
   1e0ce:	681b      	ldr	r3, [r3, #0]
   1e0d0:	677b      	str	r3, [r7, #116]	; 0x74
   1e0d2:	231a      	movs	r3, #26
   1e0d4:	617b      	str	r3, [r7, #20]
   1e0d6:	2300      	movs	r3, #0
   1e0d8:	61bb      	str	r3, [r7, #24]
   1e0da:	2300      	movs	r3, #0
   1e0dc:	61fb      	str	r3, [r7, #28]
   1e0de:	68fb      	ldr	r3, [r7, #12]
   1e0e0:	681b      	ldr	r3, [r3, #0]
   1e0e2:	2b00      	cmp	r3, #0
   1e0e4:	d110      	bne.n	1e108 <FMG_DeleteRecord+0x50>
   1e0e6:	68fb      	ldr	r3, [r7, #12]
   1e0e8:	3304      	adds	r3, #4
   1e0ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e0ee:	4610      	mov	r0, r2
   1e0f0:	4619      	mov	r1, r3
   1e0f2:	f7ea ed96 	blx	8c20 <_init+0xc0>
   1e0f6:	68fb      	ldr	r3, [r7, #12]
   1e0f8:	3315      	adds	r3, #21
   1e0fa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1e0fe:	4610      	mov	r0, r2
   1e100:	4619      	mov	r1, r3
   1e102:	f7ea ed8e 	blx	8c20 <_init+0xc0>
   1e106:	e028      	b.n	1e15a <FMG_DeleteRecord+0xa2>
   1e108:	68fb      	ldr	r3, [r7, #12]
   1e10a:	681b      	ldr	r3, [r3, #0]
   1e10c:	2b01      	cmp	r3, #1
   1e10e:	d122      	bne.n	1e156 <FMG_DeleteRecord+0x9e>
   1e110:	68fb      	ldr	r3, [r7, #12]
   1e112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e114:	2b00      	cmp	r3, #0
   1e116:	d009      	beq.n	1e12c <FMG_DeleteRecord+0x74>
   1e118:	68fb      	ldr	r3, [r7, #12]
   1e11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e11c:	2b01      	cmp	r3, #1
   1e11e:	d005      	beq.n	1e12c <FMG_DeleteRecord+0x74>
   1e120:	68fb      	ldr	r3, [r7, #12]
   1e122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1e124:	2b02      	cmp	r3, #2
   1e126:	d001      	beq.n	1e12c <FMG_DeleteRecord+0x74>
   1e128:	230f      	movs	r3, #15
   1e12a:	e134      	b.n	1e396 <FMG_DeleteRecord+0x2de>
   1e12c:	f107 0328 	add.w	r3, r7, #40	; 0x28
   1e130:	4618      	mov	r0, r3
   1e132:	4ba1      	ldr	r3, [pc, #644]	; (1e3b8 <FMG_DeleteRecord+0x300>)
   1e134:	447b      	add	r3, pc
   1e136:	4619      	mov	r1, r3
   1e138:	f7ea ed72 	blx	8c20 <_init+0xc0>
   1e13c:	68fb      	ldr	r3, [r7, #12]
   1e13e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1e140:	4b9e      	ldr	r3, [pc, #632]	; (1e3bc <FMG_DeleteRecord+0x304>)
   1e142:	58e3      	ldr	r3, [r4, r3]
   1e144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1e148:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   1e14c:	4610      	mov	r0, r2
   1e14e:	4619      	mov	r1, r3
   1e150:	f7ea ed66 	blx	8c20 <_init+0xc0>
   1e154:	e001      	b.n	1e15a <FMG_DeleteRecord+0xa2>
   1e156:	2311      	movs	r3, #17
   1e158:	e11d      	b.n	1e396 <FMG_DeleteRecord+0x2de>
   1e15a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e15e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e162:	4610      	mov	r0, r2
   1e164:	4619      	mov	r1, r3
   1e166:	f7fb fd35 	bl	19bd4 <ExtraireFileID>
   1e16a:	6238      	str	r0, [r7, #32]
   1e16c:	6a3b      	ldr	r3, [r7, #32]
   1e16e:	2b00      	cmp	r3, #0
   1e170:	db33      	blt.n	1e1da <FMG_DeleteRecord+0x122>
   1e172:	4b93      	ldr	r3, [pc, #588]	; (1e3c0 <FMG_DeleteRecord+0x308>)
   1e174:	58e3      	ldr	r3, [r4, r3]
   1e176:	461a      	mov	r2, r3
   1e178:	6a3b      	ldr	r3, [r7, #32]
   1e17a:	212c      	movs	r1, #44	; 0x2c
   1e17c:	fb01 f303 	mul.w	r3, r1, r3
   1e180:	18d3      	adds	r3, r2, r3
   1e182:	3328      	adds	r3, #40	; 0x28
   1e184:	681b      	ldr	r3, [r3, #0]
   1e186:	2b00      	cmp	r3, #0
   1e188:	d00d      	beq.n	1e1a6 <FMG_DeleteRecord+0xee>
   1e18a:	4b8d      	ldr	r3, [pc, #564]	; (1e3c0 <FMG_DeleteRecord+0x308>)
   1e18c:	58e3      	ldr	r3, [r4, r3]
   1e18e:	461a      	mov	r2, r3
   1e190:	6a3b      	ldr	r3, [r7, #32]
   1e192:	212c      	movs	r1, #44	; 0x2c
   1e194:	fb01 f303 	mul.w	r3, r1, r3
   1e198:	18d3      	adds	r3, r2, r3
   1e19a:	3328      	adds	r3, #40	; 0x28
   1e19c:	681b      	ldr	r3, [r3, #0]
   1e19e:	2b01      	cmp	r3, #1
   1e1a0:	d001      	beq.n	1e1a6 <FMG_DeleteRecord+0xee>
   1e1a2:	230d      	movs	r3, #13
   1e1a4:	e0f7      	b.n	1e396 <FMG_DeleteRecord+0x2de>
   1e1a6:	4b86      	ldr	r3, [pc, #536]	; (1e3c0 <FMG_DeleteRecord+0x308>)
   1e1a8:	58e3      	ldr	r3, [r4, r3]
   1e1aa:	461a      	mov	r2, r3
   1e1ac:	6a3b      	ldr	r3, [r7, #32]
   1e1ae:	212c      	movs	r1, #44	; 0x2c
   1e1b0:	fb01 f303 	mul.w	r3, r1, r3
   1e1b4:	18d3      	adds	r3, r2, r3
   1e1b6:	332c      	adds	r3, #44	; 0x2c
   1e1b8:	681b      	ldr	r3, [r3, #0]
   1e1ba:	2b00      	cmp	r3, #0
   1e1bc:	d00f      	beq.n	1e1de <FMG_DeleteRecord+0x126>
   1e1be:	4b80      	ldr	r3, [pc, #512]	; (1e3c0 <FMG_DeleteRecord+0x308>)
   1e1c0:	58e3      	ldr	r3, [r4, r3]
   1e1c2:	461a      	mov	r2, r3
   1e1c4:	6a3b      	ldr	r3, [r7, #32]
   1e1c6:	212c      	movs	r1, #44	; 0x2c
   1e1c8:	fb01 f303 	mul.w	r3, r1, r3
   1e1cc:	18d3      	adds	r3, r2, r3
   1e1ce:	332c      	adds	r3, #44	; 0x2c
   1e1d0:	681b      	ldr	r3, [r3, #0]
   1e1d2:	2b01      	cmp	r3, #1
   1e1d4:	d003      	beq.n	1e1de <FMG_DeleteRecord+0x126>
   1e1d6:	230e      	movs	r3, #14
   1e1d8:	e0dd      	b.n	1e396 <FMG_DeleteRecord+0x2de>
   1e1da:	230b      	movs	r3, #11
   1e1dc:	e0db      	b.n	1e396 <FMG_DeleteRecord+0x2de>
   1e1de:	f107 0150 	add.w	r1, r7, #80	; 0x50
   1e1e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e1e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e1ea:	4608      	mov	r0, r1
   1e1ec:	4975      	ldr	r1, [pc, #468]	; (1e3c4 <FMG_DeleteRecord+0x30c>)
   1e1ee:	4479      	add	r1, pc
   1e1f0:	f7ea ed60 	blx	8cb4 <_init+0x154>
   1e1f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1e1f8:	4618      	mov	r0, r3
   1e1fa:	f002 fba1 	bl	20940 <FS_exist>
   1e1fe:	6278      	str	r0, [r7, #36]	; 0x24
   1e200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e202:	2b02      	cmp	r3, #2
   1e204:	d001      	beq.n	1e20a <FMG_DeleteRecord+0x152>
   1e206:	230b      	movs	r3, #11
   1e208:	e0c5      	b.n	1e396 <FMG_DeleteRecord+0x2de>
   1e20a:	4b6d      	ldr	r3, [pc, #436]	; (1e3c0 <FMG_DeleteRecord+0x308>)
   1e20c:	58e3      	ldr	r3, [r4, r3]
   1e20e:	461a      	mov	r2, r3
   1e210:	6a3b      	ldr	r3, [r7, #32]
   1e212:	212c      	movs	r1, #44	; 0x2c
   1e214:	fb01 f303 	mul.w	r3, r1, r3
   1e218:	18d3      	adds	r3, r2, r3
   1e21a:	332c      	adds	r3, #44	; 0x2c
   1e21c:	681b      	ldr	r3, [r3, #0]
   1e21e:	2b01      	cmp	r3, #1
   1e220:	d10c      	bne.n	1e23c <FMG_DeleteRecord+0x184>
   1e222:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e226:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e22a:	4610      	mov	r0, r2
   1e22c:	4619      	mov	r1, r3
   1e22e:	f7ff f835 	bl	1d29c <FMG_CheckFileCoherence>
   1e232:	4603      	mov	r3, r0
   1e234:	2b0a      	cmp	r3, #10
   1e236:	d001      	beq.n	1e23c <FMG_DeleteRecord+0x184>
   1e238:	231c      	movs	r3, #28
   1e23a:	e0ac      	b.n	1e396 <FMG_DeleteRecord+0x2de>
   1e23c:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1e240:	4618      	mov	r0, r3
   1e242:	4b61      	ldr	r3, [pc, #388]	; (1e3c8 <FMG_DeleteRecord+0x310>)
   1e244:	447b      	add	r3, pc
   1e246:	4619      	mov	r1, r3
   1e248:	f002 fbfc 	bl	20a44 <FS_open>
   1e24c:	61f8      	str	r0, [r7, #28]
   1e24e:	69fb      	ldr	r3, [r7, #28]
   1e250:	2b00      	cmp	r3, #0
   1e252:	d102      	bne.n	1e25a <FMG_DeleteRecord+0x1a2>
   1e254:	2313      	movs	r3, #19
   1e256:	617b      	str	r3, [r7, #20]
   1e258:	e09c      	b.n	1e394 <FMG_DeleteRecord+0x2dc>
   1e25a:	69f8      	ldr	r0, [r7, #28]
   1e25c:	f002 fb9c 	bl	20998 <FS_length>
   1e260:	61b8      	str	r0, [r7, #24]
   1e262:	69f8      	ldr	r0, [r7, #28]
   1e264:	f002 fb12 	bl	2088c <FS_close>
   1e268:	2300      	movs	r3, #0
   1e26a:	61fb      	str	r3, [r7, #28]
   1e26c:	4b54      	ldr	r3, [pc, #336]	; (1e3c0 <FMG_DeleteRecord+0x308>)
   1e26e:	58e3      	ldr	r3, [r4, r3]
   1e270:	461a      	mov	r2, r3
   1e272:	6a3b      	ldr	r3, [r7, #32]
   1e274:	212c      	movs	r1, #44	; 0x2c
   1e276:	fb01 f303 	mul.w	r3, r1, r3
   1e27a:	18d3      	adds	r3, r2, r3
   1e27c:	332c      	adds	r3, #44	; 0x2c
   1e27e:	681b      	ldr	r3, [r3, #0]
   1e280:	69b8      	ldr	r0, [r7, #24]
   1e282:	4619      	mov	r1, r3
   1e284:	f7fe fbc2 	bl	1ca0c <IsFileEmpty>
   1e288:	4603      	mov	r3, r0
   1e28a:	2b00      	cmp	r3, #0
   1e28c:	d001      	beq.n	1e292 <FMG_DeleteRecord+0x1da>
   1e28e:	231a      	movs	r3, #26
   1e290:	e081      	b.n	1e396 <FMG_DeleteRecord+0x2de>
   1e292:	68bb      	ldr	r3, [r7, #8]
   1e294:	2b01      	cmp	r3, #1
   1e296:	d02a      	beq.n	1e2ee <FMG_DeleteRecord+0x236>
   1e298:	2b01      	cmp	r3, #1
   1e29a:	d302      	bcc.n	1e2a2 <FMG_DeleteRecord+0x1ea>
   1e29c:	2b02      	cmp	r3, #2
   1e29e:	d050      	beq.n	1e342 <FMG_DeleteRecord+0x28a>
   1e2a0:	e075      	b.n	1e38e <FMG_DeleteRecord+0x2d6>
   1e2a2:	4b47      	ldr	r3, [pc, #284]	; (1e3c0 <FMG_DeleteRecord+0x308>)
   1e2a4:	58e3      	ldr	r3, [r4, r3]
   1e2a6:	461a      	mov	r2, r3
   1e2a8:	6a3b      	ldr	r3, [r7, #32]
   1e2aa:	212c      	movs	r1, #44	; 0x2c
   1e2ac:	fb01 f303 	mul.w	r3, r1, r3
   1e2b0:	18d3      	adds	r3, r2, r3
   1e2b2:	332c      	adds	r3, #44	; 0x2c
   1e2b4:	681b      	ldr	r3, [r3, #0]
   1e2b6:	2b01      	cmp	r3, #1
   1e2b8:	d10c      	bne.n	1e2d4 <FMG_DeleteRecord+0x21c>
   1e2ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e2be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e2c2:	4610      	mov	r0, r2
   1e2c4:	4619      	mov	r1, r3
   1e2c6:	687a      	ldr	r2, [r7, #4]
   1e2c8:	6a3b      	ldr	r3, [r7, #32]
   1e2ca:	f7fd fb0d 	bl	1b8e8 <DeleteRecordBeginWithCkecksum>
   1e2ce:	4603      	mov	r3, r0
   1e2d0:	617b      	str	r3, [r7, #20]
   1e2d2:	e05f      	b.n	1e394 <FMG_DeleteRecord+0x2dc>
   1e2d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e2d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e2dc:	4610      	mov	r0, r2
   1e2de:	4619      	mov	r1, r3
   1e2e0:	687a      	ldr	r2, [r7, #4]
   1e2e2:	6a3b      	ldr	r3, [r7, #32]
   1e2e4:	f7fd f9c6 	bl	1b674 <DeleteRecordBegin>
   1e2e8:	4603      	mov	r3, r0
   1e2ea:	617b      	str	r3, [r7, #20]
   1e2ec:	e052      	b.n	1e394 <FMG_DeleteRecord+0x2dc>
   1e2ee:	4b34      	ldr	r3, [pc, #208]	; (1e3c0 <FMG_DeleteRecord+0x308>)
   1e2f0:	58e3      	ldr	r3, [r4, r3]
   1e2f2:	461a      	mov	r2, r3
   1e2f4:	6a3b      	ldr	r3, [r7, #32]
   1e2f6:	212c      	movs	r1, #44	; 0x2c
   1e2f8:	fb01 f303 	mul.w	r3, r1, r3
   1e2fc:	18d3      	adds	r3, r2, r3
   1e2fe:	332c      	adds	r3, #44	; 0x2c
   1e300:	681b      	ldr	r3, [r3, #0]
   1e302:	2b01      	cmp	r3, #1
   1e304:	d10e      	bne.n	1e324 <FMG_DeleteRecord+0x26c>
   1e306:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e30a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e30e:	6a39      	ldr	r1, [r7, #32]
   1e310:	9100      	str	r1, [sp, #0]
   1e312:	4610      	mov	r0, r2
   1e314:	4619      	mov	r1, r3
   1e316:	687a      	ldr	r2, [r7, #4]
   1e318:	683b      	ldr	r3, [r7, #0]
   1e31a:	f7fd fe1d 	bl	1bf58 <DeleteRecordMiddleWithCkecksum>
   1e31e:	4603      	mov	r3, r0
   1e320:	617b      	str	r3, [r7, #20]
   1e322:	e037      	b.n	1e394 <FMG_DeleteRecord+0x2dc>
   1e324:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e328:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e32c:	6a39      	ldr	r1, [r7, #32]
   1e32e:	9100      	str	r1, [sp, #0]
   1e330:	4610      	mov	r0, r2
   1e332:	4619      	mov	r1, r3
   1e334:	687a      	ldr	r2, [r7, #4]
   1e336:	683b      	ldr	r3, [r7, #0]
   1e338:	f7fd fc6e 	bl	1bc18 <DeleteRecordMiddle>
   1e33c:	4603      	mov	r3, r0
   1e33e:	617b      	str	r3, [r7, #20]
   1e340:	e028      	b.n	1e394 <FMG_DeleteRecord+0x2dc>
   1e342:	4b1f      	ldr	r3, [pc, #124]	; (1e3c0 <FMG_DeleteRecord+0x308>)
   1e344:	58e3      	ldr	r3, [r4, r3]
   1e346:	461a      	mov	r2, r3
   1e348:	6a3b      	ldr	r3, [r7, #32]
   1e34a:	212c      	movs	r1, #44	; 0x2c
   1e34c:	fb01 f303 	mul.w	r3, r1, r3
   1e350:	18d3      	adds	r3, r2, r3
   1e352:	332c      	adds	r3, #44	; 0x2c
   1e354:	681b      	ldr	r3, [r3, #0]
   1e356:	2b01      	cmp	r3, #1
   1e358:	d10c      	bne.n	1e374 <FMG_DeleteRecord+0x2bc>
   1e35a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e35e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e362:	4610      	mov	r0, r2
   1e364:	4619      	mov	r1, r3
   1e366:	687a      	ldr	r2, [r7, #4]
   1e368:	6a3b      	ldr	r3, [r7, #32]
   1e36a:	f7fe f9a9 	bl	1c6c0 <DeleteRecordEndWithCkecksum>
   1e36e:	4603      	mov	r3, r0
   1e370:	617b      	str	r3, [r7, #20]
   1e372:	e00f      	b.n	1e394 <FMG_DeleteRecord+0x2dc>
   1e374:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e378:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1e37c:	4610      	mov	r0, r2
   1e37e:	4619      	mov	r1, r3
   1e380:	687a      	ldr	r2, [r7, #4]
   1e382:	6a3b      	ldr	r3, [r7, #32]
   1e384:	f7fd fffe 	bl	1c384 <DeleteRecordEnd>
   1e388:	4603      	mov	r3, r0
   1e38a:	617b      	str	r3, [r7, #20]
   1e38c:	e002      	b.n	1e394 <FMG_DeleteRecord+0x2dc>
   1e38e:	2310      	movs	r3, #16
   1e390:	617b      	str	r3, [r7, #20]
   1e392:	bf00      	nop
   1e394:	697b      	ldr	r3, [r7, #20]
   1e396:	4618      	mov	r0, r3
   1e398:	4b06      	ldr	r3, [pc, #24]	; (1e3b4 <FMG_DeleteRecord+0x2fc>)
   1e39a:	58e3      	ldr	r3, [r4, r3]
   1e39c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1e39e:	681b      	ldr	r3, [r3, #0]
   1e3a0:	429a      	cmp	r2, r3
   1e3a2:	d001      	beq.n	1e3a8 <FMG_DeleteRecord+0x2f0>
   1e3a4:	f7ea fdfe 	bl	8fa4 <__stack_chk_fail>
   1e3a8:	f107 077c 	add.w	r7, r7, #124	; 0x7c
   1e3ac:	46bd      	mov	sp, r7
   1e3ae:	bd90      	pop	{r4, r7, pc}
   1e3b0:	0001104c 	.word	0x0001104c
   1e3b4:	000000ac 	.word	0x000000ac
   1e3b8:	00011ea8 	.word	0x00011ea8
   1e3bc:	000000a8 	.word	0x000000a8
   1e3c0:	000000c0 	.word	0x000000c0
   1e3c4:	00008086 	.word	0x00008086
   1e3c8:	00008044 	.word	0x00008044

0001e3cc <md5_process>:
   1e3cc:	b590      	push	{r4, r7, lr}
   1e3ce:	b09d      	sub	sp, #116	; 0x74
   1e3d0:	af00      	add	r7, sp, #0
   1e3d2:	6078      	str	r0, [r7, #4]
   1e3d4:	6039      	str	r1, [r7, #0]
   1e3d6:	4c19      	ldr	r4, [pc, #100]	; (1e43c <md5_process+0x70>)
   1e3d8:	447c      	add	r4, pc
   1e3da:	4b19      	ldr	r3, [pc, #100]	; (1e440 <md5_process+0x74>)
   1e3dc:	58e3      	ldr	r3, [r4, r3]
   1e3de:	681b      	ldr	r3, [r3, #0]
   1e3e0:	66fb      	str	r3, [r7, #108]	; 0x6c
   1e3e2:	687b      	ldr	r3, [r7, #4]
   1e3e4:	689b      	ldr	r3, [r3, #8]
   1e3e6:	61bb      	str	r3, [r7, #24]
   1e3e8:	687b      	ldr	r3, [r7, #4]
   1e3ea:	68db      	ldr	r3, [r3, #12]
   1e3ec:	61fb      	str	r3, [r7, #28]
   1e3ee:	687b      	ldr	r3, [r7, #4]
   1e3f0:	691b      	ldr	r3, [r3, #16]
   1e3f2:	623b      	str	r3, [r7, #32]
   1e3f4:	687b      	ldr	r3, [r7, #4]
   1e3f6:	695b      	ldr	r3, [r3, #20]
   1e3f8:	627b      	str	r3, [r7, #36]	; 0x24
   1e3fa:	4b12      	ldr	r3, [pc, #72]	; (1e444 <md5_process+0x78>)
   1e3fc:	447b      	add	r3, pc
   1e3fe:	781b      	ldrb	r3, [r3, #0]
   1e400:	2b00      	cmp	r3, #0
   1e402:	d012      	beq.n	1e42a <md5_process+0x5e>
   1e404:	683b      	ldr	r3, [r7, #0]
   1e406:	f003 0303 	and.w	r3, r3, #3
   1e40a:	2b00      	cmp	r3, #0
   1e40c:	d102      	bne.n	1e414 <md5_process+0x48>
   1e40e:	683b      	ldr	r3, [r7, #0]
   1e410:	60fb      	str	r3, [r7, #12]
   1e412:	e03c      	b.n	1e48e <md5_process+0xc2>
   1e414:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1e418:	4618      	mov	r0, r3
   1e41a:	6839      	ldr	r1, [r7, #0]
   1e41c:	2240      	movs	r2, #64	; 0x40
   1e41e:	f7ea ec2c 	blx	8c78 <_init+0x118>
   1e422:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1e426:	60fb      	str	r3, [r7, #12]
   1e428:	e031      	b.n	1e48e <md5_process+0xc2>
   1e42a:	683b      	ldr	r3, [r7, #0]
   1e42c:	613b      	str	r3, [r7, #16]
   1e42e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1e432:	60fb      	str	r3, [r7, #12]
   1e434:	2300      	movs	r3, #0
   1e436:	617b      	str	r3, [r7, #20]
   1e438:	e026      	b.n	1e488 <md5_process+0xbc>
   1e43a:	bf00      	nop
   1e43c:	00010d3c 	.word	0x00010d3c
   1e440:	000000ac 	.word	0x000000ac
   1e444:	00007f0c 	.word	0x00007f0c
   1e448:	693b      	ldr	r3, [r7, #16]
   1e44a:	781b      	ldrb	r3, [r3, #0]
   1e44c:	461a      	mov	r2, r3
   1e44e:	693b      	ldr	r3, [r7, #16]
   1e450:	3301      	adds	r3, #1
   1e452:	781b      	ldrb	r3, [r3, #0]
   1e454:	021b      	lsls	r3, r3, #8
   1e456:	18d2      	adds	r2, r2, r3
   1e458:	693b      	ldr	r3, [r7, #16]
   1e45a:	3302      	adds	r3, #2
   1e45c:	781b      	ldrb	r3, [r3, #0]
   1e45e:	041b      	lsls	r3, r3, #16
   1e460:	18d2      	adds	r2, r2, r3
   1e462:	693b      	ldr	r3, [r7, #16]
   1e464:	3303      	adds	r3, #3
   1e466:	781b      	ldrb	r3, [r3, #0]
   1e468:	061b      	lsls	r3, r3, #24
   1e46a:	18d3      	adds	r3, r2, r3
   1e46c:	461a      	mov	r2, r3
   1e46e:	697b      	ldr	r3, [r7, #20]
   1e470:	009b      	lsls	r3, r3, #2
   1e472:	f107 0170 	add.w	r1, r7, #112	; 0x70
   1e476:	18cb      	adds	r3, r1, r3
   1e478:	f843 2c44 	str.w	r2, [r3, #-68]
   1e47c:	697b      	ldr	r3, [r7, #20]
   1e47e:	3301      	adds	r3, #1
   1e480:	617b      	str	r3, [r7, #20]
   1e482:	693b      	ldr	r3, [r7, #16]
   1e484:	3304      	adds	r3, #4
   1e486:	613b      	str	r3, [r7, #16]
   1e488:	697b      	ldr	r3, [r7, #20]
   1e48a:	2b0f      	cmp	r3, #15
   1e48c:	dddc      	ble.n	1e448 <md5_process+0x7c>
   1e48e:	69fa      	ldr	r2, [r7, #28]
   1e490:	6a3b      	ldr	r3, [r7, #32]
   1e492:	401a      	ands	r2, r3
   1e494:	69fb      	ldr	r3, [r7, #28]
   1e496:	43d9      	mvns	r1, r3
   1e498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e49a:	400b      	ands	r3, r1
   1e49c:	431a      	orrs	r2, r3
   1e49e:	69bb      	ldr	r3, [r7, #24]
   1e4a0:	18d2      	adds	r2, r2, r3
   1e4a2:	68fb      	ldr	r3, [r7, #12]
   1e4a4:	681b      	ldr	r3, [r3, #0]
   1e4a6:	18d2      	adds	r2, r2, r3
   1e4a8:	f24a 4378 	movw	r3, #42104	; 0xa478
   1e4ac:	f2cd 736a 	movt	r3, #55146	; 0xd76a
   1e4b0:	18d3      	adds	r3, r2, r3
   1e4b2:	62bb      	str	r3, [r7, #40]	; 0x28
   1e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e4b6:	ea4f 6273 	mov.w	r2, r3, ror #25
   1e4ba:	69fb      	ldr	r3, [r7, #28]
   1e4bc:	18d3      	adds	r3, r2, r3
   1e4be:	61bb      	str	r3, [r7, #24]
   1e4c0:	69ba      	ldr	r2, [r7, #24]
   1e4c2:	69fb      	ldr	r3, [r7, #28]
   1e4c4:	401a      	ands	r2, r3
   1e4c6:	69bb      	ldr	r3, [r7, #24]
   1e4c8:	43d9      	mvns	r1, r3
   1e4ca:	6a3b      	ldr	r3, [r7, #32]
   1e4cc:	400b      	ands	r3, r1
   1e4ce:	431a      	orrs	r2, r3
   1e4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e4d2:	18d2      	adds	r2, r2, r3
   1e4d4:	68fb      	ldr	r3, [r7, #12]
   1e4d6:	3304      	adds	r3, #4
   1e4d8:	681b      	ldr	r3, [r3, #0]
   1e4da:	18d2      	adds	r2, r2, r3
   1e4dc:	f24b 7356 	movw	r3, #46934	; 0xb756
   1e4e0:	f6ce 03c7 	movt	r3, #59591	; 0xe8c7
   1e4e4:	18d3      	adds	r3, r2, r3
   1e4e6:	62bb      	str	r3, [r7, #40]	; 0x28
   1e4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e4ea:	ea4f 5233 	mov.w	r2, r3, ror #20
   1e4ee:	69bb      	ldr	r3, [r7, #24]
   1e4f0:	18d3      	adds	r3, r2, r3
   1e4f2:	627b      	str	r3, [r7, #36]	; 0x24
   1e4f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e4f6:	69bb      	ldr	r3, [r7, #24]
   1e4f8:	401a      	ands	r2, r3
   1e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e4fc:	43d9      	mvns	r1, r3
   1e4fe:	69fb      	ldr	r3, [r7, #28]
   1e500:	400b      	ands	r3, r1
   1e502:	431a      	orrs	r2, r3
   1e504:	6a3b      	ldr	r3, [r7, #32]
   1e506:	18d2      	adds	r2, r2, r3
   1e508:	68fb      	ldr	r3, [r7, #12]
   1e50a:	3308      	adds	r3, #8
   1e50c:	681b      	ldr	r3, [r3, #0]
   1e50e:	18d2      	adds	r2, r2, r3
   1e510:	f247 03db 	movw	r3, #28891	; 0x70db
   1e514:	f2c2 4320 	movt	r3, #9248	; 0x2420
   1e518:	18d3      	adds	r3, r2, r3
   1e51a:	62bb      	str	r3, [r7, #40]	; 0x28
   1e51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e51e:	ea4f 32f3 	mov.w	r2, r3, ror #15
   1e522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e524:	18d3      	adds	r3, r2, r3
   1e526:	623b      	str	r3, [r7, #32]
   1e528:	6a3a      	ldr	r2, [r7, #32]
   1e52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e52c:	401a      	ands	r2, r3
   1e52e:	6a3b      	ldr	r3, [r7, #32]
   1e530:	43d9      	mvns	r1, r3
   1e532:	69bb      	ldr	r3, [r7, #24]
   1e534:	400b      	ands	r3, r1
   1e536:	431a      	orrs	r2, r3
   1e538:	69fb      	ldr	r3, [r7, #28]
   1e53a:	18d2      	adds	r2, r2, r3
   1e53c:	68fb      	ldr	r3, [r7, #12]
   1e53e:	330c      	adds	r3, #12
   1e540:	681b      	ldr	r3, [r3, #0]
   1e542:	18d2      	adds	r2, r2, r3
   1e544:	f64c 63ee 	movw	r3, #52974	; 0xceee
   1e548:	f2cc 13bd 	movt	r3, #49597	; 0xc1bd
   1e54c:	18d3      	adds	r3, r2, r3
   1e54e:	62bb      	str	r3, [r7, #40]	; 0x28
   1e550:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e552:	ea4f 22b3 	mov.w	r2, r3, ror #10
   1e556:	6a3b      	ldr	r3, [r7, #32]
   1e558:	18d3      	adds	r3, r2, r3
   1e55a:	61fb      	str	r3, [r7, #28]
   1e55c:	69fa      	ldr	r2, [r7, #28]
   1e55e:	6a3b      	ldr	r3, [r7, #32]
   1e560:	401a      	ands	r2, r3
   1e562:	69fb      	ldr	r3, [r7, #28]
   1e564:	43d9      	mvns	r1, r3
   1e566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e568:	400b      	ands	r3, r1
   1e56a:	431a      	orrs	r2, r3
   1e56c:	69bb      	ldr	r3, [r7, #24]
   1e56e:	18d2      	adds	r2, r2, r3
   1e570:	68fb      	ldr	r3, [r7, #12]
   1e572:	3310      	adds	r3, #16
   1e574:	681b      	ldr	r3, [r3, #0]
   1e576:	18d2      	adds	r2, r2, r3
   1e578:	f640 73af 	movw	r3, #4015	; 0xfaf
   1e57c:	f2cf 537c 	movt	r3, #62844	; 0xf57c
   1e580:	18d3      	adds	r3, r2, r3
   1e582:	62bb      	str	r3, [r7, #40]	; 0x28
   1e584:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e586:	ea4f 6273 	mov.w	r2, r3, ror #25
   1e58a:	69fb      	ldr	r3, [r7, #28]
   1e58c:	18d3      	adds	r3, r2, r3
   1e58e:	61bb      	str	r3, [r7, #24]
   1e590:	69ba      	ldr	r2, [r7, #24]
   1e592:	69fb      	ldr	r3, [r7, #28]
   1e594:	401a      	ands	r2, r3
   1e596:	69bb      	ldr	r3, [r7, #24]
   1e598:	43d9      	mvns	r1, r3
   1e59a:	6a3b      	ldr	r3, [r7, #32]
   1e59c:	400b      	ands	r3, r1
   1e59e:	431a      	orrs	r2, r3
   1e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e5a2:	18d2      	adds	r2, r2, r3
   1e5a4:	68fb      	ldr	r3, [r7, #12]
   1e5a6:	3314      	adds	r3, #20
   1e5a8:	681b      	ldr	r3, [r3, #0]
   1e5aa:	18d2      	adds	r2, r2, r3
   1e5ac:	f24c 632a 	movw	r3, #50730	; 0xc62a
   1e5b0:	f2c4 7387 	movt	r3, #18311	; 0x4787
   1e5b4:	18d3      	adds	r3, r2, r3
   1e5b6:	62bb      	str	r3, [r7, #40]	; 0x28
   1e5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e5ba:	ea4f 5233 	mov.w	r2, r3, ror #20
   1e5be:	69bb      	ldr	r3, [r7, #24]
   1e5c0:	18d3      	adds	r3, r2, r3
   1e5c2:	627b      	str	r3, [r7, #36]	; 0x24
   1e5c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e5c6:	69bb      	ldr	r3, [r7, #24]
   1e5c8:	401a      	ands	r2, r3
   1e5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e5cc:	43d9      	mvns	r1, r3
   1e5ce:	69fb      	ldr	r3, [r7, #28]
   1e5d0:	400b      	ands	r3, r1
   1e5d2:	431a      	orrs	r2, r3
   1e5d4:	6a3b      	ldr	r3, [r7, #32]
   1e5d6:	18d2      	adds	r2, r2, r3
   1e5d8:	68fb      	ldr	r3, [r7, #12]
   1e5da:	3318      	adds	r3, #24
   1e5dc:	681b      	ldr	r3, [r3, #0]
   1e5de:	18d2      	adds	r2, r2, r3
   1e5e0:	f244 6313 	movw	r3, #17939	; 0x4613
   1e5e4:	f6ca 0330 	movt	r3, #43056	; 0xa830
   1e5e8:	18d3      	adds	r3, r2, r3
   1e5ea:	62bb      	str	r3, [r7, #40]	; 0x28
   1e5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e5ee:	ea4f 32f3 	mov.w	r2, r3, ror #15
   1e5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e5f4:	18d3      	adds	r3, r2, r3
   1e5f6:	623b      	str	r3, [r7, #32]
   1e5f8:	6a3a      	ldr	r2, [r7, #32]
   1e5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e5fc:	401a      	ands	r2, r3
   1e5fe:	6a3b      	ldr	r3, [r7, #32]
   1e600:	43d9      	mvns	r1, r3
   1e602:	69bb      	ldr	r3, [r7, #24]
   1e604:	400b      	ands	r3, r1
   1e606:	431a      	orrs	r2, r3
   1e608:	69fb      	ldr	r3, [r7, #28]
   1e60a:	18d2      	adds	r2, r2, r3
   1e60c:	68fb      	ldr	r3, [r7, #12]
   1e60e:	331c      	adds	r3, #28
   1e610:	681b      	ldr	r3, [r3, #0]
   1e612:	18d2      	adds	r2, r2, r3
   1e614:	f249 5301 	movw	r3, #38145	; 0x9501
   1e618:	f6cf 5346 	movt	r3, #64838	; 0xfd46
   1e61c:	18d3      	adds	r3, r2, r3
   1e61e:	62bb      	str	r3, [r7, #40]	; 0x28
   1e620:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e622:	ea4f 22b3 	mov.w	r2, r3, ror #10
   1e626:	6a3b      	ldr	r3, [r7, #32]
   1e628:	18d3      	adds	r3, r2, r3
   1e62a:	61fb      	str	r3, [r7, #28]
   1e62c:	69fa      	ldr	r2, [r7, #28]
   1e62e:	6a3b      	ldr	r3, [r7, #32]
   1e630:	401a      	ands	r2, r3
   1e632:	69fb      	ldr	r3, [r7, #28]
   1e634:	43d9      	mvns	r1, r3
   1e636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e638:	400b      	ands	r3, r1
   1e63a:	431a      	orrs	r2, r3
   1e63c:	69bb      	ldr	r3, [r7, #24]
   1e63e:	18d2      	adds	r2, r2, r3
   1e640:	68fb      	ldr	r3, [r7, #12]
   1e642:	3320      	adds	r3, #32
   1e644:	681b      	ldr	r3, [r3, #0]
   1e646:	18d2      	adds	r2, r2, r3
   1e648:	f649 03d8 	movw	r3, #39128	; 0x98d8
   1e64c:	f6c6 1380 	movt	r3, #27008	; 0x6980
   1e650:	18d3      	adds	r3, r2, r3
   1e652:	62bb      	str	r3, [r7, #40]	; 0x28
   1e654:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e656:	ea4f 6273 	mov.w	r2, r3, ror #25
   1e65a:	69fb      	ldr	r3, [r7, #28]
   1e65c:	18d3      	adds	r3, r2, r3
   1e65e:	61bb      	str	r3, [r7, #24]
   1e660:	69ba      	ldr	r2, [r7, #24]
   1e662:	69fb      	ldr	r3, [r7, #28]
   1e664:	401a      	ands	r2, r3
   1e666:	69bb      	ldr	r3, [r7, #24]
   1e668:	43d9      	mvns	r1, r3
   1e66a:	6a3b      	ldr	r3, [r7, #32]
   1e66c:	400b      	ands	r3, r1
   1e66e:	431a      	orrs	r2, r3
   1e670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e672:	18d2      	adds	r2, r2, r3
   1e674:	68fb      	ldr	r3, [r7, #12]
   1e676:	3324      	adds	r3, #36	; 0x24
   1e678:	681b      	ldr	r3, [r3, #0]
   1e67a:	18d2      	adds	r2, r2, r3
   1e67c:	f24f 73af 	movw	r3, #63407	; 0xf7af
   1e680:	f6c8 3344 	movt	r3, #35652	; 0x8b44
   1e684:	18d3      	adds	r3, r2, r3
   1e686:	62bb      	str	r3, [r7, #40]	; 0x28
   1e688:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e68a:	ea4f 5233 	mov.w	r2, r3, ror #20
   1e68e:	69bb      	ldr	r3, [r7, #24]
   1e690:	18d3      	adds	r3, r2, r3
   1e692:	627b      	str	r3, [r7, #36]	; 0x24
   1e694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e696:	69bb      	ldr	r3, [r7, #24]
   1e698:	401a      	ands	r2, r3
   1e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e69c:	43d9      	mvns	r1, r3
   1e69e:	69fb      	ldr	r3, [r7, #28]
   1e6a0:	400b      	ands	r3, r1
   1e6a2:	431a      	orrs	r2, r3
   1e6a4:	6a3b      	ldr	r3, [r7, #32]
   1e6a6:	18d2      	adds	r2, r2, r3
   1e6a8:	68fb      	ldr	r3, [r7, #12]
   1e6aa:	3328      	adds	r3, #40	; 0x28
   1e6ac:	681b      	ldr	r3, [r3, #0]
   1e6ae:	18d3      	adds	r3, r2, r3
   1e6b0:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
   1e6b4:	3b4f      	subs	r3, #79	; 0x4f
   1e6b6:	62bb      	str	r3, [r7, #40]	; 0x28
   1e6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e6ba:	ea4f 32f3 	mov.w	r2, r3, ror #15
   1e6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e6c0:	18d3      	adds	r3, r2, r3
   1e6c2:	623b      	str	r3, [r7, #32]
   1e6c4:	6a3a      	ldr	r2, [r7, #32]
   1e6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e6c8:	401a      	ands	r2, r3
   1e6ca:	6a3b      	ldr	r3, [r7, #32]
   1e6cc:	43d9      	mvns	r1, r3
   1e6ce:	69bb      	ldr	r3, [r7, #24]
   1e6d0:	400b      	ands	r3, r1
   1e6d2:	431a      	orrs	r2, r3
   1e6d4:	69fb      	ldr	r3, [r7, #28]
   1e6d6:	18d2      	adds	r2, r2, r3
   1e6d8:	68fb      	ldr	r3, [r7, #12]
   1e6da:	332c      	adds	r3, #44	; 0x2c
   1e6dc:	681b      	ldr	r3, [r3, #0]
   1e6de:	18d2      	adds	r2, r2, r3
   1e6e0:	f24d 73be 	movw	r3, #55230	; 0xd7be
   1e6e4:	f6c8 135c 	movt	r3, #35164	; 0x895c
   1e6e8:	18d3      	adds	r3, r2, r3
   1e6ea:	62bb      	str	r3, [r7, #40]	; 0x28
   1e6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e6ee:	ea4f 22b3 	mov.w	r2, r3, ror #10
   1e6f2:	6a3b      	ldr	r3, [r7, #32]
   1e6f4:	18d3      	adds	r3, r2, r3
   1e6f6:	61fb      	str	r3, [r7, #28]
   1e6f8:	69fa      	ldr	r2, [r7, #28]
   1e6fa:	6a3b      	ldr	r3, [r7, #32]
   1e6fc:	401a      	ands	r2, r3
   1e6fe:	69fb      	ldr	r3, [r7, #28]
   1e700:	43d9      	mvns	r1, r3
   1e702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e704:	400b      	ands	r3, r1
   1e706:	431a      	orrs	r2, r3
   1e708:	69bb      	ldr	r3, [r7, #24]
   1e70a:	18d2      	adds	r2, r2, r3
   1e70c:	68fb      	ldr	r3, [r7, #12]
   1e70e:	3330      	adds	r3, #48	; 0x30
   1e710:	681b      	ldr	r3, [r3, #0]
   1e712:	18d2      	adds	r2, r2, r3
   1e714:	f241 1322 	movw	r3, #4386	; 0x1122
   1e718:	f6c6 3390 	movt	r3, #27536	; 0x6b90
   1e71c:	18d3      	adds	r3, r2, r3
   1e71e:	62bb      	str	r3, [r7, #40]	; 0x28
   1e720:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e722:	ea4f 6273 	mov.w	r2, r3, ror #25
   1e726:	69fb      	ldr	r3, [r7, #28]
   1e728:	18d3      	adds	r3, r2, r3
   1e72a:	61bb      	str	r3, [r7, #24]
   1e72c:	69ba      	ldr	r2, [r7, #24]
   1e72e:	69fb      	ldr	r3, [r7, #28]
   1e730:	401a      	ands	r2, r3
   1e732:	69bb      	ldr	r3, [r7, #24]
   1e734:	43d9      	mvns	r1, r3
   1e736:	6a3b      	ldr	r3, [r7, #32]
   1e738:	400b      	ands	r3, r1
   1e73a:	431a      	orrs	r2, r3
   1e73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e73e:	18d2      	adds	r2, r2, r3
   1e740:	68fb      	ldr	r3, [r7, #12]
   1e742:	3334      	adds	r3, #52	; 0x34
   1e744:	681b      	ldr	r3, [r3, #0]
   1e746:	18d2      	adds	r2, r2, r3
   1e748:	f247 1393 	movw	r3, #29075	; 0x7193
   1e74c:	f6cf 5398 	movt	r3, #64920	; 0xfd98
   1e750:	18d3      	adds	r3, r2, r3
   1e752:	62bb      	str	r3, [r7, #40]	; 0x28
   1e754:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e756:	ea4f 5233 	mov.w	r2, r3, ror #20
   1e75a:	69bb      	ldr	r3, [r7, #24]
   1e75c:	18d3      	adds	r3, r2, r3
   1e75e:	627b      	str	r3, [r7, #36]	; 0x24
   1e760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e762:	69bb      	ldr	r3, [r7, #24]
   1e764:	401a      	ands	r2, r3
   1e766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e768:	43d9      	mvns	r1, r3
   1e76a:	69fb      	ldr	r3, [r7, #28]
   1e76c:	400b      	ands	r3, r1
   1e76e:	431a      	orrs	r2, r3
   1e770:	6a3b      	ldr	r3, [r7, #32]
   1e772:	18d2      	adds	r2, r2, r3
   1e774:	68fb      	ldr	r3, [r7, #12]
   1e776:	3338      	adds	r3, #56	; 0x38
   1e778:	681b      	ldr	r3, [r3, #0]
   1e77a:	18d2      	adds	r2, r2, r3
   1e77c:	f244 338e 	movw	r3, #17294	; 0x438e
   1e780:	f2ca 6379 	movt	r3, #42617	; 0xa679
   1e784:	18d3      	adds	r3, r2, r3
   1e786:	62bb      	str	r3, [r7, #40]	; 0x28
   1e788:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e78a:	ea4f 32f3 	mov.w	r2, r3, ror #15
   1e78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e790:	18d3      	adds	r3, r2, r3
   1e792:	623b      	str	r3, [r7, #32]
   1e794:	6a3a      	ldr	r2, [r7, #32]
   1e796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e798:	401a      	ands	r2, r3
   1e79a:	6a3b      	ldr	r3, [r7, #32]
   1e79c:	43d9      	mvns	r1, r3
   1e79e:	69bb      	ldr	r3, [r7, #24]
   1e7a0:	400b      	ands	r3, r1
   1e7a2:	431a      	orrs	r2, r3
   1e7a4:	69fb      	ldr	r3, [r7, #28]
   1e7a6:	18d2      	adds	r2, r2, r3
   1e7a8:	68fb      	ldr	r3, [r7, #12]
   1e7aa:	333c      	adds	r3, #60	; 0x3c
   1e7ac:	681b      	ldr	r3, [r3, #0]
   1e7ae:	18d2      	adds	r2, r2, r3
   1e7b0:	f640 0321 	movw	r3, #2081	; 0x821
   1e7b4:	f6c4 13b4 	movt	r3, #18868	; 0x49b4
   1e7b8:	18d3      	adds	r3, r2, r3
   1e7ba:	62bb      	str	r3, [r7, #40]	; 0x28
   1e7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e7be:	ea4f 22b3 	mov.w	r2, r3, ror #10
   1e7c2:	6a3b      	ldr	r3, [r7, #32]
   1e7c4:	18d3      	adds	r3, r2, r3
   1e7c6:	61fb      	str	r3, [r7, #28]
   1e7c8:	69fa      	ldr	r2, [r7, #28]
   1e7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e7cc:	401a      	ands	r2, r3
   1e7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e7d0:	43d9      	mvns	r1, r3
   1e7d2:	6a3b      	ldr	r3, [r7, #32]
   1e7d4:	400b      	ands	r3, r1
   1e7d6:	431a      	orrs	r2, r3
   1e7d8:	69bb      	ldr	r3, [r7, #24]
   1e7da:	18d2      	adds	r2, r2, r3
   1e7dc:	68fb      	ldr	r3, [r7, #12]
   1e7de:	3304      	adds	r3, #4
   1e7e0:	681b      	ldr	r3, [r3, #0]
   1e7e2:	18d2      	adds	r2, r2, r3
   1e7e4:	f242 5362 	movw	r3, #9570	; 0x2562
   1e7e8:	f2cf 631e 	movt	r3, #63006	; 0xf61e
   1e7ec:	18d3      	adds	r3, r2, r3
   1e7ee:	62bb      	str	r3, [r7, #40]	; 0x28
   1e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e7f2:	ea4f 62f3 	mov.w	r2, r3, ror #27
   1e7f6:	69fb      	ldr	r3, [r7, #28]
   1e7f8:	18d3      	adds	r3, r2, r3
   1e7fa:	61bb      	str	r3, [r7, #24]
   1e7fc:	69ba      	ldr	r2, [r7, #24]
   1e7fe:	6a3b      	ldr	r3, [r7, #32]
   1e800:	401a      	ands	r2, r3
   1e802:	6a3b      	ldr	r3, [r7, #32]
   1e804:	43d9      	mvns	r1, r3
   1e806:	69fb      	ldr	r3, [r7, #28]
   1e808:	400b      	ands	r3, r1
   1e80a:	431a      	orrs	r2, r3
   1e80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e80e:	18d2      	adds	r2, r2, r3
   1e810:	68fb      	ldr	r3, [r7, #12]
   1e812:	3318      	adds	r3, #24
   1e814:	681b      	ldr	r3, [r3, #0]
   1e816:	18d2      	adds	r2, r2, r3
   1e818:	f24b 3340 	movw	r3, #45888	; 0xb340
   1e81c:	f2cc 0340 	movt	r3, #49216	; 0xc040
   1e820:	18d3      	adds	r3, r2, r3
   1e822:	62bb      	str	r3, [r7, #40]	; 0x28
   1e824:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e826:	ea4f 52f3 	mov.w	r2, r3, ror #23
   1e82a:	69bb      	ldr	r3, [r7, #24]
   1e82c:	18d3      	adds	r3, r2, r3
   1e82e:	627b      	str	r3, [r7, #36]	; 0x24
   1e830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e832:	69fb      	ldr	r3, [r7, #28]
   1e834:	401a      	ands	r2, r3
   1e836:	69fb      	ldr	r3, [r7, #28]
   1e838:	43d9      	mvns	r1, r3
   1e83a:	69bb      	ldr	r3, [r7, #24]
   1e83c:	400b      	ands	r3, r1
   1e83e:	431a      	orrs	r2, r3
   1e840:	6a3b      	ldr	r3, [r7, #32]
   1e842:	18d2      	adds	r2, r2, r3
   1e844:	68fb      	ldr	r3, [r7, #12]
   1e846:	332c      	adds	r3, #44	; 0x2c
   1e848:	681b      	ldr	r3, [r3, #0]
   1e84a:	18d2      	adds	r2, r2, r3
   1e84c:	f645 2351 	movw	r3, #23121	; 0x5a51
   1e850:	f2c2 635e 	movt	r3, #9822	; 0x265e
   1e854:	18d3      	adds	r3, r2, r3
   1e856:	62bb      	str	r3, [r7, #40]	; 0x28
   1e858:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e85a:	ea4f 42b3 	mov.w	r2, r3, ror #18
   1e85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e860:	18d3      	adds	r3, r2, r3
   1e862:	623b      	str	r3, [r7, #32]
   1e864:	6a3a      	ldr	r2, [r7, #32]
   1e866:	69bb      	ldr	r3, [r7, #24]
   1e868:	401a      	ands	r2, r3
   1e86a:	69bb      	ldr	r3, [r7, #24]
   1e86c:	43d9      	mvns	r1, r3
   1e86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e870:	400b      	ands	r3, r1
   1e872:	431a      	orrs	r2, r3
   1e874:	69fb      	ldr	r3, [r7, #28]
   1e876:	18d2      	adds	r2, r2, r3
   1e878:	68fb      	ldr	r3, [r7, #12]
   1e87a:	681b      	ldr	r3, [r3, #0]
   1e87c:	18d2      	adds	r2, r2, r3
   1e87e:	f24c 73aa 	movw	r3, #51114	; 0xc7aa
   1e882:	f6ce 13b6 	movt	r3, #59830	; 0xe9b6
   1e886:	18d3      	adds	r3, r2, r3
   1e888:	62bb      	str	r3, [r7, #40]	; 0x28
   1e88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e88c:	ea4f 3233 	mov.w	r2, r3, ror #12
   1e890:	6a3b      	ldr	r3, [r7, #32]
   1e892:	18d3      	adds	r3, r2, r3
   1e894:	61fb      	str	r3, [r7, #28]
   1e896:	69fa      	ldr	r2, [r7, #28]
   1e898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e89a:	401a      	ands	r2, r3
   1e89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e89e:	43d9      	mvns	r1, r3
   1e8a0:	6a3b      	ldr	r3, [r7, #32]
   1e8a2:	400b      	ands	r3, r1
   1e8a4:	431a      	orrs	r2, r3
   1e8a6:	69bb      	ldr	r3, [r7, #24]
   1e8a8:	18d2      	adds	r2, r2, r3
   1e8aa:	68fb      	ldr	r3, [r7, #12]
   1e8ac:	3314      	adds	r3, #20
   1e8ae:	681b      	ldr	r3, [r3, #0]
   1e8b0:	18d2      	adds	r2, r2, r3
   1e8b2:	f241 035d 	movw	r3, #4189	; 0x105d
   1e8b6:	f2cd 632f 	movt	r3, #54831	; 0xd62f
   1e8ba:	18d3      	adds	r3, r2, r3
   1e8bc:	62bb      	str	r3, [r7, #40]	; 0x28
   1e8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e8c0:	ea4f 62f3 	mov.w	r2, r3, ror #27
   1e8c4:	69fb      	ldr	r3, [r7, #28]
   1e8c6:	18d3      	adds	r3, r2, r3
   1e8c8:	61bb      	str	r3, [r7, #24]
   1e8ca:	69ba      	ldr	r2, [r7, #24]
   1e8cc:	6a3b      	ldr	r3, [r7, #32]
   1e8ce:	401a      	ands	r2, r3
   1e8d0:	6a3b      	ldr	r3, [r7, #32]
   1e8d2:	43d9      	mvns	r1, r3
   1e8d4:	69fb      	ldr	r3, [r7, #28]
   1e8d6:	400b      	ands	r3, r1
   1e8d8:	431a      	orrs	r2, r3
   1e8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e8dc:	18d2      	adds	r2, r2, r3
   1e8de:	68fb      	ldr	r3, [r7, #12]
   1e8e0:	3328      	adds	r3, #40	; 0x28
   1e8e2:	681b      	ldr	r3, [r3, #0]
   1e8e4:	18d2      	adds	r2, r2, r3
   1e8e6:	f241 4353 	movw	r3, #5203	; 0x1453
   1e8ea:	f2c0 2344 	movt	r3, #580	; 0x244
   1e8ee:	18d3      	adds	r3, r2, r3
   1e8f0:	62bb      	str	r3, [r7, #40]	; 0x28
   1e8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e8f4:	ea4f 52f3 	mov.w	r2, r3, ror #23
   1e8f8:	69bb      	ldr	r3, [r7, #24]
   1e8fa:	18d3      	adds	r3, r2, r3
   1e8fc:	627b      	str	r3, [r7, #36]	; 0x24
   1e8fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e900:	69fb      	ldr	r3, [r7, #28]
   1e902:	401a      	ands	r2, r3
   1e904:	69fb      	ldr	r3, [r7, #28]
   1e906:	43d9      	mvns	r1, r3
   1e908:	69bb      	ldr	r3, [r7, #24]
   1e90a:	400b      	ands	r3, r1
   1e90c:	431a      	orrs	r2, r3
   1e90e:	6a3b      	ldr	r3, [r7, #32]
   1e910:	18d2      	adds	r2, r2, r3
   1e912:	68fb      	ldr	r3, [r7, #12]
   1e914:	333c      	adds	r3, #60	; 0x3c
   1e916:	681b      	ldr	r3, [r3, #0]
   1e918:	18d2      	adds	r2, r2, r3
   1e91a:	f24e 6381 	movw	r3, #59009	; 0xe681
   1e91e:	f6cd 03a1 	movt	r3, #55457	; 0xd8a1
   1e922:	18d3      	adds	r3, r2, r3
   1e924:	62bb      	str	r3, [r7, #40]	; 0x28
   1e926:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e928:	ea4f 42b3 	mov.w	r2, r3, ror #18
   1e92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e92e:	18d3      	adds	r3, r2, r3
   1e930:	623b      	str	r3, [r7, #32]
   1e932:	6a3a      	ldr	r2, [r7, #32]
   1e934:	69bb      	ldr	r3, [r7, #24]
   1e936:	401a      	ands	r2, r3
   1e938:	69bb      	ldr	r3, [r7, #24]
   1e93a:	43d9      	mvns	r1, r3
   1e93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e93e:	400b      	ands	r3, r1
   1e940:	431a      	orrs	r2, r3
   1e942:	69fb      	ldr	r3, [r7, #28]
   1e944:	18d2      	adds	r2, r2, r3
   1e946:	68fb      	ldr	r3, [r7, #12]
   1e948:	3310      	adds	r3, #16
   1e94a:	681b      	ldr	r3, [r3, #0]
   1e94c:	18d2      	adds	r2, r2, r3
   1e94e:	f64f 33c8 	movw	r3, #64456	; 0xfbc8
   1e952:	f2ce 73d3 	movt	r3, #59347	; 0xe7d3
   1e956:	18d3      	adds	r3, r2, r3
   1e958:	62bb      	str	r3, [r7, #40]	; 0x28
   1e95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e95c:	ea4f 3233 	mov.w	r2, r3, ror #12
   1e960:	6a3b      	ldr	r3, [r7, #32]
   1e962:	18d3      	adds	r3, r2, r3
   1e964:	61fb      	str	r3, [r7, #28]
   1e966:	69fa      	ldr	r2, [r7, #28]
   1e968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e96a:	401a      	ands	r2, r3
   1e96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e96e:	43d9      	mvns	r1, r3
   1e970:	6a3b      	ldr	r3, [r7, #32]
   1e972:	400b      	ands	r3, r1
   1e974:	431a      	orrs	r2, r3
   1e976:	69bb      	ldr	r3, [r7, #24]
   1e978:	18d2      	adds	r2, r2, r3
   1e97a:	68fb      	ldr	r3, [r7, #12]
   1e97c:	3324      	adds	r3, #36	; 0x24
   1e97e:	681b      	ldr	r3, [r3, #0]
   1e980:	18d2      	adds	r2, r2, r3
   1e982:	f64c 53e6 	movw	r3, #52710	; 0xcde6
   1e986:	f2c2 13e1 	movt	r3, #8673	; 0x21e1
   1e98a:	18d3      	adds	r3, r2, r3
   1e98c:	62bb      	str	r3, [r7, #40]	; 0x28
   1e98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e990:	ea4f 62f3 	mov.w	r2, r3, ror #27
   1e994:	69fb      	ldr	r3, [r7, #28]
   1e996:	18d3      	adds	r3, r2, r3
   1e998:	61bb      	str	r3, [r7, #24]
   1e99a:	69ba      	ldr	r2, [r7, #24]
   1e99c:	6a3b      	ldr	r3, [r7, #32]
   1e99e:	401a      	ands	r2, r3
   1e9a0:	6a3b      	ldr	r3, [r7, #32]
   1e9a2:	43d9      	mvns	r1, r3
   1e9a4:	69fb      	ldr	r3, [r7, #28]
   1e9a6:	400b      	ands	r3, r1
   1e9a8:	431a      	orrs	r2, r3
   1e9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e9ac:	18d2      	adds	r2, r2, r3
   1e9ae:	68fb      	ldr	r3, [r7, #12]
   1e9b0:	3338      	adds	r3, #56	; 0x38
   1e9b2:	681b      	ldr	r3, [r3, #0]
   1e9b4:	18d2      	adds	r2, r2, r3
   1e9b6:	f240 73d6 	movw	r3, #2006	; 0x7d6
   1e9ba:	f2cc 3337 	movt	r3, #49975	; 0xc337
   1e9be:	18d3      	adds	r3, r2, r3
   1e9c0:	62bb      	str	r3, [r7, #40]	; 0x28
   1e9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e9c4:	ea4f 52f3 	mov.w	r2, r3, ror #23
   1e9c8:	69bb      	ldr	r3, [r7, #24]
   1e9ca:	18d3      	adds	r3, r2, r3
   1e9cc:	627b      	str	r3, [r7, #36]	; 0x24
   1e9ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1e9d0:	69fb      	ldr	r3, [r7, #28]
   1e9d2:	401a      	ands	r2, r3
   1e9d4:	69fb      	ldr	r3, [r7, #28]
   1e9d6:	43d9      	mvns	r1, r3
   1e9d8:	69bb      	ldr	r3, [r7, #24]
   1e9da:	400b      	ands	r3, r1
   1e9dc:	431a      	orrs	r2, r3
   1e9de:	6a3b      	ldr	r3, [r7, #32]
   1e9e0:	18d2      	adds	r2, r2, r3
   1e9e2:	68fb      	ldr	r3, [r7, #12]
   1e9e4:	330c      	adds	r3, #12
   1e9e6:	681b      	ldr	r3, [r3, #0]
   1e9e8:	18d2      	adds	r2, r2, r3
   1e9ea:	f640 5387 	movw	r3, #3463	; 0xd87
   1e9ee:	f2cf 43d5 	movt	r3, #62677	; 0xf4d5
   1e9f2:	18d3      	adds	r3, r2, r3
   1e9f4:	62bb      	str	r3, [r7, #40]	; 0x28
   1e9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e9f8:	ea4f 42b3 	mov.w	r2, r3, ror #18
   1e9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e9fe:	18d3      	adds	r3, r2, r3
   1ea00:	623b      	str	r3, [r7, #32]
   1ea02:	6a3a      	ldr	r2, [r7, #32]
   1ea04:	69bb      	ldr	r3, [r7, #24]
   1ea06:	401a      	ands	r2, r3
   1ea08:	69bb      	ldr	r3, [r7, #24]
   1ea0a:	43d9      	mvns	r1, r3
   1ea0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ea0e:	400b      	ands	r3, r1
   1ea10:	431a      	orrs	r2, r3
   1ea12:	69fb      	ldr	r3, [r7, #28]
   1ea14:	18d2      	adds	r2, r2, r3
   1ea16:	68fb      	ldr	r3, [r7, #12]
   1ea18:	3320      	adds	r3, #32
   1ea1a:	681b      	ldr	r3, [r3, #0]
   1ea1c:	18d2      	adds	r2, r2, r3
   1ea1e:	f241 43ed 	movw	r3, #5357	; 0x14ed
   1ea22:	f2c4 535a 	movt	r3, #17754	; 0x455a
   1ea26:	18d3      	adds	r3, r2, r3
   1ea28:	62bb      	str	r3, [r7, #40]	; 0x28
   1ea2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ea2c:	ea4f 3233 	mov.w	r2, r3, ror #12
   1ea30:	6a3b      	ldr	r3, [r7, #32]
   1ea32:	18d3      	adds	r3, r2, r3
   1ea34:	61fb      	str	r3, [r7, #28]
   1ea36:	69fa      	ldr	r2, [r7, #28]
   1ea38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ea3a:	401a      	ands	r2, r3
   1ea3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ea3e:	43d9      	mvns	r1, r3
   1ea40:	6a3b      	ldr	r3, [r7, #32]
   1ea42:	400b      	ands	r3, r1
   1ea44:	431a      	orrs	r2, r3
   1ea46:	69bb      	ldr	r3, [r7, #24]
   1ea48:	18d2      	adds	r2, r2, r3
   1ea4a:	68fb      	ldr	r3, [r7, #12]
   1ea4c:	3334      	adds	r3, #52	; 0x34
   1ea4e:	681b      	ldr	r3, [r3, #0]
   1ea50:	18d2      	adds	r2, r2, r3
   1ea52:	f64e 1305 	movw	r3, #59653	; 0xe905
   1ea56:	f6ca 13e3 	movt	r3, #43491	; 0xa9e3
   1ea5a:	18d3      	adds	r3, r2, r3
   1ea5c:	62bb      	str	r3, [r7, #40]	; 0x28
   1ea5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ea60:	ea4f 62f3 	mov.w	r2, r3, ror #27
   1ea64:	69fb      	ldr	r3, [r7, #28]
   1ea66:	18d3      	adds	r3, r2, r3
   1ea68:	61bb      	str	r3, [r7, #24]
   1ea6a:	69ba      	ldr	r2, [r7, #24]
   1ea6c:	6a3b      	ldr	r3, [r7, #32]
   1ea6e:	401a      	ands	r2, r3
   1ea70:	6a3b      	ldr	r3, [r7, #32]
   1ea72:	43d9      	mvns	r1, r3
   1ea74:	69fb      	ldr	r3, [r7, #28]
   1ea76:	400b      	ands	r3, r1
   1ea78:	431a      	orrs	r2, r3
   1ea7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ea7c:	18d2      	adds	r2, r2, r3
   1ea7e:	68fb      	ldr	r3, [r7, #12]
   1ea80:	3308      	adds	r3, #8
   1ea82:	681b      	ldr	r3, [r3, #0]
   1ea84:	18d2      	adds	r2, r2, r3
   1ea86:	f24a 33f8 	movw	r3, #41976	; 0xa3f8
   1ea8a:	f6cf 43ef 	movt	r3, #64751	; 0xfcef
   1ea8e:	18d3      	adds	r3, r2, r3
   1ea90:	62bb      	str	r3, [r7, #40]	; 0x28
   1ea92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ea94:	ea4f 52f3 	mov.w	r2, r3, ror #23
   1ea98:	69bb      	ldr	r3, [r7, #24]
   1ea9a:	18d3      	adds	r3, r2, r3
   1ea9c:	627b      	str	r3, [r7, #36]	; 0x24
   1ea9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1eaa0:	69fb      	ldr	r3, [r7, #28]
   1eaa2:	401a      	ands	r2, r3
   1eaa4:	69fb      	ldr	r3, [r7, #28]
   1eaa6:	43d9      	mvns	r1, r3
   1eaa8:	69bb      	ldr	r3, [r7, #24]
   1eaaa:	400b      	ands	r3, r1
   1eaac:	431a      	orrs	r2, r3
   1eaae:	6a3b      	ldr	r3, [r7, #32]
   1eab0:	18d2      	adds	r2, r2, r3
   1eab2:	68fb      	ldr	r3, [r7, #12]
   1eab4:	331c      	adds	r3, #28
   1eab6:	681b      	ldr	r3, [r3, #0]
   1eab8:	18d2      	adds	r2, r2, r3
   1eaba:	f240 23d9 	movw	r3, #729	; 0x2d9
   1eabe:	f2c6 736f 	movt	r3, #26479	; 0x676f
   1eac2:	18d3      	adds	r3, r2, r3
   1eac4:	62bb      	str	r3, [r7, #40]	; 0x28
   1eac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eac8:	ea4f 42b3 	mov.w	r2, r3, ror #18
   1eacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eace:	18d3      	adds	r3, r2, r3
   1ead0:	623b      	str	r3, [r7, #32]
   1ead2:	6a3a      	ldr	r2, [r7, #32]
   1ead4:	69bb      	ldr	r3, [r7, #24]
   1ead6:	401a      	ands	r2, r3
   1ead8:	69bb      	ldr	r3, [r7, #24]
   1eada:	43d9      	mvns	r1, r3
   1eadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eade:	400b      	ands	r3, r1
   1eae0:	431a      	orrs	r2, r3
   1eae2:	69fb      	ldr	r3, [r7, #28]
   1eae4:	18d2      	adds	r2, r2, r3
   1eae6:	68fb      	ldr	r3, [r7, #12]
   1eae8:	3330      	adds	r3, #48	; 0x30
   1eaea:	681b      	ldr	r3, [r3, #0]
   1eaec:	18d2      	adds	r2, r2, r3
   1eaee:	f644 438a 	movw	r3, #19594	; 0x4c8a
   1eaf2:	f6c8 532a 	movt	r3, #36138	; 0x8d2a
   1eaf6:	18d3      	adds	r3, r2, r3
   1eaf8:	62bb      	str	r3, [r7, #40]	; 0x28
   1eafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eafc:	ea4f 3233 	mov.w	r2, r3, ror #12
   1eb00:	6a3b      	ldr	r3, [r7, #32]
   1eb02:	18d3      	adds	r3, r2, r3
   1eb04:	61fb      	str	r3, [r7, #28]
   1eb06:	69fa      	ldr	r2, [r7, #28]
   1eb08:	6a3b      	ldr	r3, [r7, #32]
   1eb0a:	405a      	eors	r2, r3
   1eb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb0e:	405a      	eors	r2, r3
   1eb10:	69bb      	ldr	r3, [r7, #24]
   1eb12:	18d2      	adds	r2, r2, r3
   1eb14:	68fb      	ldr	r3, [r7, #12]
   1eb16:	3314      	adds	r3, #20
   1eb18:	681b      	ldr	r3, [r3, #0]
   1eb1a:	18d3      	adds	r3, r2, r3
   1eb1c:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
   1eb20:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
   1eb24:	62bb      	str	r3, [r7, #40]	; 0x28
   1eb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eb28:	ea4f 7233 	mov.w	r2, r3, ror #28
   1eb2c:	69fb      	ldr	r3, [r7, #28]
   1eb2e:	18d3      	adds	r3, r2, r3
   1eb30:	61bb      	str	r3, [r7, #24]
   1eb32:	69ba      	ldr	r2, [r7, #24]
   1eb34:	69fb      	ldr	r3, [r7, #28]
   1eb36:	405a      	eors	r2, r3
   1eb38:	6a3b      	ldr	r3, [r7, #32]
   1eb3a:	405a      	eors	r2, r3
   1eb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb3e:	18d2      	adds	r2, r2, r3
   1eb40:	68fb      	ldr	r3, [r7, #12]
   1eb42:	3320      	adds	r3, #32
   1eb44:	681b      	ldr	r3, [r3, #0]
   1eb46:	18d2      	adds	r2, r2, r3
   1eb48:	f24f 6381 	movw	r3, #63105	; 0xf681
   1eb4c:	f2c8 7371 	movt	r3, #34673	; 0x8771
   1eb50:	18d3      	adds	r3, r2, r3
   1eb52:	62bb      	str	r3, [r7, #40]	; 0x28
   1eb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eb56:	ea4f 5273 	mov.w	r2, r3, ror #21
   1eb5a:	69bb      	ldr	r3, [r7, #24]
   1eb5c:	18d3      	adds	r3, r2, r3
   1eb5e:	627b      	str	r3, [r7, #36]	; 0x24
   1eb60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1eb62:	69bb      	ldr	r3, [r7, #24]
   1eb64:	405a      	eors	r2, r3
   1eb66:	69fb      	ldr	r3, [r7, #28]
   1eb68:	405a      	eors	r2, r3
   1eb6a:	6a3b      	ldr	r3, [r7, #32]
   1eb6c:	18d2      	adds	r2, r2, r3
   1eb6e:	68fb      	ldr	r3, [r7, #12]
   1eb70:	332c      	adds	r3, #44	; 0x2c
   1eb72:	681b      	ldr	r3, [r3, #0]
   1eb74:	18d2      	adds	r2, r2, r3
   1eb76:	f246 1322 	movw	r3, #24866	; 0x6122
   1eb7a:	f6c6 539d 	movt	r3, #28061	; 0x6d9d
   1eb7e:	18d3      	adds	r3, r2, r3
   1eb80:	62bb      	str	r3, [r7, #40]	; 0x28
   1eb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eb84:	ea4f 4233 	mov.w	r2, r3, ror #16
   1eb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb8a:	18d3      	adds	r3, r2, r3
   1eb8c:	623b      	str	r3, [r7, #32]
   1eb8e:	6a3a      	ldr	r2, [r7, #32]
   1eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eb92:	405a      	eors	r2, r3
   1eb94:	69bb      	ldr	r3, [r7, #24]
   1eb96:	405a      	eors	r2, r3
   1eb98:	69fb      	ldr	r3, [r7, #28]
   1eb9a:	18d2      	adds	r2, r2, r3
   1eb9c:	68fb      	ldr	r3, [r7, #12]
   1eb9e:	3338      	adds	r3, #56	; 0x38
   1eba0:	681b      	ldr	r3, [r3, #0]
   1eba2:	18d2      	adds	r2, r2, r3
   1eba4:	f643 030c 	movw	r3, #14348	; 0x380c
   1eba8:	f6cf 53e5 	movt	r3, #64997	; 0xfde5
   1ebac:	18d3      	adds	r3, r2, r3
   1ebae:	62bb      	str	r3, [r7, #40]	; 0x28
   1ebb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ebb2:	ea4f 2273 	mov.w	r2, r3, ror #9
   1ebb6:	6a3b      	ldr	r3, [r7, #32]
   1ebb8:	18d3      	adds	r3, r2, r3
   1ebba:	61fb      	str	r3, [r7, #28]
   1ebbc:	69fa      	ldr	r2, [r7, #28]
   1ebbe:	6a3b      	ldr	r3, [r7, #32]
   1ebc0:	405a      	eors	r2, r3
   1ebc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ebc4:	405a      	eors	r2, r3
   1ebc6:	69bb      	ldr	r3, [r7, #24]
   1ebc8:	18d2      	adds	r2, r2, r3
   1ebca:	68fb      	ldr	r3, [r7, #12]
   1ebcc:	3304      	adds	r3, #4
   1ebce:	681b      	ldr	r3, [r3, #0]
   1ebd0:	18d2      	adds	r2, r2, r3
   1ebd2:	f64e 2344 	movw	r3, #59972	; 0xea44
   1ebd6:	f2ca 43be 	movt	r3, #42174	; 0xa4be
   1ebda:	18d3      	adds	r3, r2, r3
   1ebdc:	62bb      	str	r3, [r7, #40]	; 0x28
   1ebde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ebe0:	ea4f 7233 	mov.w	r2, r3, ror #28
   1ebe4:	69fb      	ldr	r3, [r7, #28]
   1ebe6:	18d3      	adds	r3, r2, r3
   1ebe8:	61bb      	str	r3, [r7, #24]
   1ebea:	69ba      	ldr	r2, [r7, #24]
   1ebec:	69fb      	ldr	r3, [r7, #28]
   1ebee:	405a      	eors	r2, r3
   1ebf0:	6a3b      	ldr	r3, [r7, #32]
   1ebf2:	405a      	eors	r2, r3
   1ebf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ebf6:	18d2      	adds	r2, r2, r3
   1ebf8:	68fb      	ldr	r3, [r7, #12]
   1ebfa:	3310      	adds	r3, #16
   1ebfc:	681b      	ldr	r3, [r3, #0]
   1ebfe:	18d2      	adds	r2, r2, r3
   1ec00:	f64c 73a9 	movw	r3, #53161	; 0xcfa9
   1ec04:	f6c4 33de 	movt	r3, #19422	; 0x4bde
   1ec08:	18d3      	adds	r3, r2, r3
   1ec0a:	62bb      	str	r3, [r7, #40]	; 0x28
   1ec0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ec0e:	ea4f 5273 	mov.w	r2, r3, ror #21
   1ec12:	69bb      	ldr	r3, [r7, #24]
   1ec14:	18d3      	adds	r3, r2, r3
   1ec16:	627b      	str	r3, [r7, #36]	; 0x24
   1ec18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1ec1a:	69bb      	ldr	r3, [r7, #24]
   1ec1c:	405a      	eors	r2, r3
   1ec1e:	69fb      	ldr	r3, [r7, #28]
   1ec20:	405a      	eors	r2, r3
   1ec22:	6a3b      	ldr	r3, [r7, #32]
   1ec24:	18d2      	adds	r2, r2, r3
   1ec26:	68fb      	ldr	r3, [r7, #12]
   1ec28:	331c      	adds	r3, #28
   1ec2a:	681b      	ldr	r3, [r3, #0]
   1ec2c:	18d2      	adds	r2, r2, r3
   1ec2e:	f644 3360 	movw	r3, #19296	; 0x4b60
   1ec32:	f2cf 63bb 	movt	r3, #63163	; 0xf6bb
   1ec36:	18d3      	adds	r3, r2, r3
   1ec38:	62bb      	str	r3, [r7, #40]	; 0x28
   1ec3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ec3c:	ea4f 4233 	mov.w	r2, r3, ror #16
   1ec40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ec42:	18d3      	adds	r3, r2, r3
   1ec44:	623b      	str	r3, [r7, #32]
   1ec46:	6a3a      	ldr	r2, [r7, #32]
   1ec48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ec4a:	405a      	eors	r2, r3
   1ec4c:	69bb      	ldr	r3, [r7, #24]
   1ec4e:	405a      	eors	r2, r3
   1ec50:	69fb      	ldr	r3, [r7, #28]
   1ec52:	18d2      	adds	r2, r2, r3
   1ec54:	68fb      	ldr	r3, [r7, #12]
   1ec56:	3328      	adds	r3, #40	; 0x28
   1ec58:	681b      	ldr	r3, [r3, #0]
   1ec5a:	18d2      	adds	r2, r2, r3
   1ec5c:	f64b 4370 	movw	r3, #48240	; 0xbc70
   1ec60:	f6cb 63bf 	movt	r3, #48831	; 0xbebf
   1ec64:	18d3      	adds	r3, r2, r3
   1ec66:	62bb      	str	r3, [r7, #40]	; 0x28
   1ec68:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ec6a:	ea4f 2273 	mov.w	r2, r3, ror #9
   1ec6e:	6a3b      	ldr	r3, [r7, #32]
   1ec70:	18d3      	adds	r3, r2, r3
   1ec72:	61fb      	str	r3, [r7, #28]
   1ec74:	69fa      	ldr	r2, [r7, #28]
   1ec76:	6a3b      	ldr	r3, [r7, #32]
   1ec78:	405a      	eors	r2, r3
   1ec7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ec7c:	405a      	eors	r2, r3
   1ec7e:	69bb      	ldr	r3, [r7, #24]
   1ec80:	18d2      	adds	r2, r2, r3
   1ec82:	68fb      	ldr	r3, [r7, #12]
   1ec84:	3334      	adds	r3, #52	; 0x34
   1ec86:	681b      	ldr	r3, [r3, #0]
   1ec88:	18d2      	adds	r2, r2, r3
   1ec8a:	f647 63c6 	movw	r3, #32454	; 0x7ec6
   1ec8e:	f6c2 039b 	movt	r3, #10395	; 0x289b
   1ec92:	18d3      	adds	r3, r2, r3
   1ec94:	62bb      	str	r3, [r7, #40]	; 0x28
   1ec96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ec98:	ea4f 7233 	mov.w	r2, r3, ror #28
   1ec9c:	69fb      	ldr	r3, [r7, #28]
   1ec9e:	18d3      	adds	r3, r2, r3
   1eca0:	61bb      	str	r3, [r7, #24]
   1eca2:	69ba      	ldr	r2, [r7, #24]
   1eca4:	69fb      	ldr	r3, [r7, #28]
   1eca6:	405a      	eors	r2, r3
   1eca8:	6a3b      	ldr	r3, [r7, #32]
   1ecaa:	405a      	eors	r2, r3
   1ecac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ecae:	18d2      	adds	r2, r2, r3
   1ecb0:	68fb      	ldr	r3, [r7, #12]
   1ecb2:	681b      	ldr	r3, [r3, #0]
   1ecb4:	18d2      	adds	r2, r2, r3
   1ecb6:	f242 73fa 	movw	r3, #10234	; 0x27fa
   1ecba:	f6ce 23a1 	movt	r3, #60065	; 0xeaa1
   1ecbe:	18d3      	adds	r3, r2, r3
   1ecc0:	62bb      	str	r3, [r7, #40]	; 0x28
   1ecc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ecc4:	ea4f 5273 	mov.w	r2, r3, ror #21
   1ecc8:	69bb      	ldr	r3, [r7, #24]
   1ecca:	18d3      	adds	r3, r2, r3
   1eccc:	627b      	str	r3, [r7, #36]	; 0x24
   1ecce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1ecd0:	69bb      	ldr	r3, [r7, #24]
   1ecd2:	405a      	eors	r2, r3
   1ecd4:	69fb      	ldr	r3, [r7, #28]
   1ecd6:	405a      	eors	r2, r3
   1ecd8:	6a3b      	ldr	r3, [r7, #32]
   1ecda:	18d2      	adds	r2, r2, r3
   1ecdc:	68fb      	ldr	r3, [r7, #12]
   1ecde:	330c      	adds	r3, #12
   1ece0:	681b      	ldr	r3, [r3, #0]
   1ece2:	18d2      	adds	r2, r2, r3
   1ece4:	f243 0385 	movw	r3, #12421	; 0x3085
   1ece8:	f2cd 43ef 	movt	r3, #54511	; 0xd4ef
   1ecec:	18d3      	adds	r3, r2, r3
   1ecee:	62bb      	str	r3, [r7, #40]	; 0x28
   1ecf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ecf2:	ea4f 4233 	mov.w	r2, r3, ror #16
   1ecf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ecf8:	18d3      	adds	r3, r2, r3
   1ecfa:	623b      	str	r3, [r7, #32]
   1ecfc:	6a3a      	ldr	r2, [r7, #32]
   1ecfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ed00:	405a      	eors	r2, r3
   1ed02:	69bb      	ldr	r3, [r7, #24]
   1ed04:	405a      	eors	r2, r3
   1ed06:	69fb      	ldr	r3, [r7, #28]
   1ed08:	18d2      	adds	r2, r2, r3
   1ed0a:	68fb      	ldr	r3, [r7, #12]
   1ed0c:	3318      	adds	r3, #24
   1ed0e:	681b      	ldr	r3, [r3, #0]
   1ed10:	18d2      	adds	r2, r2, r3
   1ed12:	f641 5305 	movw	r3, #7429	; 0x1d05
   1ed16:	f2c0 4388 	movt	r3, #1160	; 0x488
   1ed1a:	18d3      	adds	r3, r2, r3
   1ed1c:	62bb      	str	r3, [r7, #40]	; 0x28
   1ed1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed20:	ea4f 2273 	mov.w	r2, r3, ror #9
   1ed24:	6a3b      	ldr	r3, [r7, #32]
   1ed26:	18d3      	adds	r3, r2, r3
   1ed28:	61fb      	str	r3, [r7, #28]
   1ed2a:	69fa      	ldr	r2, [r7, #28]
   1ed2c:	6a3b      	ldr	r3, [r7, #32]
   1ed2e:	405a      	eors	r2, r3
   1ed30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ed32:	405a      	eors	r2, r3
   1ed34:	69bb      	ldr	r3, [r7, #24]
   1ed36:	18d2      	adds	r2, r2, r3
   1ed38:	68fb      	ldr	r3, [r7, #12]
   1ed3a:	3324      	adds	r3, #36	; 0x24
   1ed3c:	681b      	ldr	r3, [r3, #0]
   1ed3e:	18d2      	adds	r2, r2, r3
   1ed40:	f24d 0339 	movw	r3, #53305	; 0xd039
   1ed44:	f6cd 13d4 	movt	r3, #55764	; 0xd9d4
   1ed48:	18d3      	adds	r3, r2, r3
   1ed4a:	62bb      	str	r3, [r7, #40]	; 0x28
   1ed4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed4e:	ea4f 7233 	mov.w	r2, r3, ror #28
   1ed52:	69fb      	ldr	r3, [r7, #28]
   1ed54:	18d3      	adds	r3, r2, r3
   1ed56:	61bb      	str	r3, [r7, #24]
   1ed58:	69ba      	ldr	r2, [r7, #24]
   1ed5a:	69fb      	ldr	r3, [r7, #28]
   1ed5c:	405a      	eors	r2, r3
   1ed5e:	6a3b      	ldr	r3, [r7, #32]
   1ed60:	405a      	eors	r2, r3
   1ed62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ed64:	18d2      	adds	r2, r2, r3
   1ed66:	68fb      	ldr	r3, [r7, #12]
   1ed68:	3330      	adds	r3, #48	; 0x30
   1ed6a:	681b      	ldr	r3, [r3, #0]
   1ed6c:	18d2      	adds	r2, r2, r3
   1ed6e:	f649 13e5 	movw	r3, #39397	; 0x99e5
   1ed72:	f2ce 63db 	movt	r3, #59099	; 0xe6db
   1ed76:	18d3      	adds	r3, r2, r3
   1ed78:	62bb      	str	r3, [r7, #40]	; 0x28
   1ed7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed7c:	ea4f 5273 	mov.w	r2, r3, ror #21
   1ed80:	69bb      	ldr	r3, [r7, #24]
   1ed82:	18d3      	adds	r3, r2, r3
   1ed84:	627b      	str	r3, [r7, #36]	; 0x24
   1ed86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1ed88:	69bb      	ldr	r3, [r7, #24]
   1ed8a:	405a      	eors	r2, r3
   1ed8c:	69fb      	ldr	r3, [r7, #28]
   1ed8e:	405a      	eors	r2, r3
   1ed90:	6a3b      	ldr	r3, [r7, #32]
   1ed92:	18d2      	adds	r2, r2, r3
   1ed94:	68fb      	ldr	r3, [r7, #12]
   1ed96:	333c      	adds	r3, #60	; 0x3c
   1ed98:	681b      	ldr	r3, [r3, #0]
   1ed9a:	18d2      	adds	r2, r2, r3
   1ed9c:	f647 43f8 	movw	r3, #31992	; 0x7cf8
   1eda0:	f6c1 73a2 	movt	r3, #8098	; 0x1fa2
   1eda4:	18d3      	adds	r3, r2, r3
   1eda6:	62bb      	str	r3, [r7, #40]	; 0x28
   1eda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1edaa:	ea4f 4233 	mov.w	r2, r3, ror #16
   1edae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1edb0:	18d3      	adds	r3, r2, r3
   1edb2:	623b      	str	r3, [r7, #32]
   1edb4:	6a3a      	ldr	r2, [r7, #32]
   1edb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1edb8:	405a      	eors	r2, r3
   1edba:	69bb      	ldr	r3, [r7, #24]
   1edbc:	405a      	eors	r2, r3
   1edbe:	69fb      	ldr	r3, [r7, #28]
   1edc0:	18d2      	adds	r2, r2, r3
   1edc2:	68fb      	ldr	r3, [r7, #12]
   1edc4:	3308      	adds	r3, #8
   1edc6:	681b      	ldr	r3, [r3, #0]
   1edc8:	18d2      	adds	r2, r2, r3
   1edca:	f245 6365 	movw	r3, #22117	; 0x5665
   1edce:	f2cc 43ac 	movt	r3, #50348	; 0xc4ac
   1edd2:	18d3      	adds	r3, r2, r3
   1edd4:	62bb      	str	r3, [r7, #40]	; 0x28
   1edd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1edd8:	ea4f 2273 	mov.w	r2, r3, ror #9
   1eddc:	6a3b      	ldr	r3, [r7, #32]
   1edde:	18d3      	adds	r3, r2, r3
   1ede0:	61fb      	str	r3, [r7, #28]
   1ede2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ede4:	43da      	mvns	r2, r3
   1ede6:	69fb      	ldr	r3, [r7, #28]
   1ede8:	431a      	orrs	r2, r3
   1edea:	6a3b      	ldr	r3, [r7, #32]
   1edec:	405a      	eors	r2, r3
   1edee:	69bb      	ldr	r3, [r7, #24]
   1edf0:	18d2      	adds	r2, r2, r3
   1edf2:	68fb      	ldr	r3, [r7, #12]
   1edf4:	681b      	ldr	r3, [r3, #0]
   1edf6:	18d2      	adds	r2, r2, r3
   1edf8:	f242 2344 	movw	r3, #8772	; 0x2244
   1edfc:	f2cf 4329 	movt	r3, #62505	; 0xf429
   1ee00:	18d3      	adds	r3, r2, r3
   1ee02:	62bb      	str	r3, [r7, #40]	; 0x28
   1ee04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ee06:	ea4f 62b3 	mov.w	r2, r3, ror #26
   1ee0a:	69fb      	ldr	r3, [r7, #28]
   1ee0c:	18d3      	adds	r3, r2, r3
   1ee0e:	61bb      	str	r3, [r7, #24]
   1ee10:	6a3b      	ldr	r3, [r7, #32]
   1ee12:	43da      	mvns	r2, r3
   1ee14:	69bb      	ldr	r3, [r7, #24]
   1ee16:	431a      	orrs	r2, r3
   1ee18:	69fb      	ldr	r3, [r7, #28]
   1ee1a:	405a      	eors	r2, r3
   1ee1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ee1e:	18d2      	adds	r2, r2, r3
   1ee20:	68fb      	ldr	r3, [r7, #12]
   1ee22:	331c      	adds	r3, #28
   1ee24:	681b      	ldr	r3, [r3, #0]
   1ee26:	18d2      	adds	r2, r2, r3
   1ee28:	f64f 7397 	movw	r3, #65431	; 0xff97
   1ee2c:	f2c4 332a 	movt	r3, #17194	; 0x432a
   1ee30:	18d3      	adds	r3, r2, r3
   1ee32:	62bb      	str	r3, [r7, #40]	; 0x28
   1ee34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ee36:	ea4f 52b3 	mov.w	r2, r3, ror #22
   1ee3a:	69bb      	ldr	r3, [r7, #24]
   1ee3c:	18d3      	adds	r3, r2, r3
   1ee3e:	627b      	str	r3, [r7, #36]	; 0x24
   1ee40:	69fb      	ldr	r3, [r7, #28]
   1ee42:	43da      	mvns	r2, r3
   1ee44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ee46:	431a      	orrs	r2, r3
   1ee48:	69bb      	ldr	r3, [r7, #24]
   1ee4a:	405a      	eors	r2, r3
   1ee4c:	6a3b      	ldr	r3, [r7, #32]
   1ee4e:	18d2      	adds	r2, r2, r3
   1ee50:	68fb      	ldr	r3, [r7, #12]
   1ee52:	3338      	adds	r3, #56	; 0x38
   1ee54:	681b      	ldr	r3, [r3, #0]
   1ee56:	18d2      	adds	r2, r2, r3
   1ee58:	f242 33a7 	movw	r3, #9127	; 0x23a7
   1ee5c:	f6ca 3394 	movt	r3, #43924	; 0xab94
   1ee60:	18d3      	adds	r3, r2, r3
   1ee62:	62bb      	str	r3, [r7, #40]	; 0x28
   1ee64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ee66:	ea4f 4273 	mov.w	r2, r3, ror #17
   1ee6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ee6c:	18d3      	adds	r3, r2, r3
   1ee6e:	623b      	str	r3, [r7, #32]
   1ee70:	69bb      	ldr	r3, [r7, #24]
   1ee72:	43da      	mvns	r2, r3
   1ee74:	6a3b      	ldr	r3, [r7, #32]
   1ee76:	431a      	orrs	r2, r3
   1ee78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ee7a:	405a      	eors	r2, r3
   1ee7c:	69fb      	ldr	r3, [r7, #28]
   1ee7e:	18d2      	adds	r2, r2, r3
   1ee80:	68fb      	ldr	r3, [r7, #12]
   1ee82:	3314      	adds	r3, #20
   1ee84:	681b      	ldr	r3, [r3, #0]
   1ee86:	18d2      	adds	r2, r2, r3
   1ee88:	f24a 0339 	movw	r3, #41017	; 0xa039
   1ee8c:	f6cf 4393 	movt	r3, #64659	; 0xfc93
   1ee90:	18d3      	adds	r3, r2, r3
   1ee92:	62bb      	str	r3, [r7, #40]	; 0x28
   1ee94:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ee96:	ea4f 22f3 	mov.w	r2, r3, ror #11
   1ee9a:	6a3b      	ldr	r3, [r7, #32]
   1ee9c:	18d3      	adds	r3, r2, r3
   1ee9e:	61fb      	str	r3, [r7, #28]
   1eea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eea2:	43da      	mvns	r2, r3
   1eea4:	69fb      	ldr	r3, [r7, #28]
   1eea6:	431a      	orrs	r2, r3
   1eea8:	6a3b      	ldr	r3, [r7, #32]
   1eeaa:	405a      	eors	r2, r3
   1eeac:	69bb      	ldr	r3, [r7, #24]
   1eeae:	18d2      	adds	r2, r2, r3
   1eeb0:	68fb      	ldr	r3, [r7, #12]
   1eeb2:	3330      	adds	r3, #48	; 0x30
   1eeb4:	681b      	ldr	r3, [r3, #0]
   1eeb6:	18d2      	adds	r2, r2, r3
   1eeb8:	f645 13c3 	movw	r3, #22979	; 0x59c3
   1eebc:	f2c6 535b 	movt	r3, #25947	; 0x655b
   1eec0:	18d3      	adds	r3, r2, r3
   1eec2:	62bb      	str	r3, [r7, #40]	; 0x28
   1eec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eec6:	ea4f 62b3 	mov.w	r2, r3, ror #26
   1eeca:	69fb      	ldr	r3, [r7, #28]
   1eecc:	18d3      	adds	r3, r2, r3
   1eece:	61bb      	str	r3, [r7, #24]
   1eed0:	6a3b      	ldr	r3, [r7, #32]
   1eed2:	43da      	mvns	r2, r3
   1eed4:	69bb      	ldr	r3, [r7, #24]
   1eed6:	431a      	orrs	r2, r3
   1eed8:	69fb      	ldr	r3, [r7, #28]
   1eeda:	405a      	eors	r2, r3
   1eedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eede:	18d2      	adds	r2, r2, r3
   1eee0:	68fb      	ldr	r3, [r7, #12]
   1eee2:	330c      	adds	r3, #12
   1eee4:	681b      	ldr	r3, [r3, #0]
   1eee6:	18d2      	adds	r2, r2, r3
   1eee8:	f64c 4392 	movw	r3, #52370	; 0xcc92
   1eeec:	f6c8 730c 	movt	r3, #36620	; 0x8f0c
   1eef0:	18d3      	adds	r3, r2, r3
   1eef2:	62bb      	str	r3, [r7, #40]	; 0x28
   1eef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eef6:	ea4f 52b3 	mov.w	r2, r3, ror #22
   1eefa:	69bb      	ldr	r3, [r7, #24]
   1eefc:	18d3      	adds	r3, r2, r3
   1eefe:	627b      	str	r3, [r7, #36]	; 0x24
   1ef00:	69fb      	ldr	r3, [r7, #28]
   1ef02:	43da      	mvns	r2, r3
   1ef04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ef06:	431a      	orrs	r2, r3
   1ef08:	69bb      	ldr	r3, [r7, #24]
   1ef0a:	405a      	eors	r2, r3
   1ef0c:	6a3b      	ldr	r3, [r7, #32]
   1ef0e:	18d2      	adds	r2, r2, r3
   1ef10:	68fb      	ldr	r3, [r7, #12]
   1ef12:	3328      	adds	r3, #40	; 0x28
   1ef14:	681b      	ldr	r3, [r3, #0]
   1ef16:	18d3      	adds	r3, r2, r3
   1ef18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1ef1c:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
   1ef20:	62bb      	str	r3, [r7, #40]	; 0x28
   1ef22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ef24:	ea4f 4273 	mov.w	r2, r3, ror #17
   1ef28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ef2a:	18d3      	adds	r3, r2, r3
   1ef2c:	623b      	str	r3, [r7, #32]
   1ef2e:	69bb      	ldr	r3, [r7, #24]
   1ef30:	43da      	mvns	r2, r3
   1ef32:	6a3b      	ldr	r3, [r7, #32]
   1ef34:	431a      	orrs	r2, r3
   1ef36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ef38:	405a      	eors	r2, r3
   1ef3a:	69fb      	ldr	r3, [r7, #28]
   1ef3c:	18d2      	adds	r2, r2, r3
   1ef3e:	68fb      	ldr	r3, [r7, #12]
   1ef40:	3304      	adds	r3, #4
   1ef42:	681b      	ldr	r3, [r3, #0]
   1ef44:	18d2      	adds	r2, r2, r3
   1ef46:	f645 53d1 	movw	r3, #24017	; 0x5dd1
   1ef4a:	f2c8 5384 	movt	r3, #34180	; 0x8584
   1ef4e:	18d3      	adds	r3, r2, r3
   1ef50:	62bb      	str	r3, [r7, #40]	; 0x28
   1ef52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ef54:	ea4f 22f3 	mov.w	r2, r3, ror #11
   1ef58:	6a3b      	ldr	r3, [r7, #32]
   1ef5a:	18d3      	adds	r3, r2, r3
   1ef5c:	61fb      	str	r3, [r7, #28]
   1ef5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ef60:	43da      	mvns	r2, r3
   1ef62:	69fb      	ldr	r3, [r7, #28]
   1ef64:	431a      	orrs	r2, r3
   1ef66:	6a3b      	ldr	r3, [r7, #32]
   1ef68:	405a      	eors	r2, r3
   1ef6a:	69bb      	ldr	r3, [r7, #24]
   1ef6c:	18d2      	adds	r2, r2, r3
   1ef6e:	68fb      	ldr	r3, [r7, #12]
   1ef70:	3320      	adds	r3, #32
   1ef72:	681b      	ldr	r3, [r3, #0]
   1ef74:	18d2      	adds	r2, r2, r3
   1ef76:	f647 634f 	movw	r3, #32335	; 0x7e4f
   1ef7a:	f6c6 73a8 	movt	r3, #28584	; 0x6fa8
   1ef7e:	18d3      	adds	r3, r2, r3
   1ef80:	62bb      	str	r3, [r7, #40]	; 0x28
   1ef82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ef84:	ea4f 62b3 	mov.w	r2, r3, ror #26
   1ef88:	69fb      	ldr	r3, [r7, #28]
   1ef8a:	18d3      	adds	r3, r2, r3
   1ef8c:	61bb      	str	r3, [r7, #24]
   1ef8e:	6a3b      	ldr	r3, [r7, #32]
   1ef90:	43da      	mvns	r2, r3
   1ef92:	69bb      	ldr	r3, [r7, #24]
   1ef94:	431a      	orrs	r2, r3
   1ef96:	69fb      	ldr	r3, [r7, #28]
   1ef98:	405a      	eors	r2, r3
   1ef9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ef9c:	18d2      	adds	r2, r2, r3
   1ef9e:	68fb      	ldr	r3, [r7, #12]
   1efa0:	333c      	adds	r3, #60	; 0x3c
   1efa2:	681b      	ldr	r3, [r3, #0]
   1efa4:	18d2      	adds	r2, r2, r3
   1efa6:	f24e 63e0 	movw	r3, #59104	; 0xe6e0
   1efaa:	f6cf 632c 	movt	r3, #65068	; 0xfe2c
   1efae:	18d3      	adds	r3, r2, r3
   1efb0:	62bb      	str	r3, [r7, #40]	; 0x28
   1efb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1efb4:	ea4f 52b3 	mov.w	r2, r3, ror #22
   1efb8:	69bb      	ldr	r3, [r7, #24]
   1efba:	18d3      	adds	r3, r2, r3
   1efbc:	627b      	str	r3, [r7, #36]	; 0x24
   1efbe:	69fb      	ldr	r3, [r7, #28]
   1efc0:	43da      	mvns	r2, r3
   1efc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1efc4:	431a      	orrs	r2, r3
   1efc6:	69bb      	ldr	r3, [r7, #24]
   1efc8:	405a      	eors	r2, r3
   1efca:	6a3b      	ldr	r3, [r7, #32]
   1efcc:	18d2      	adds	r2, r2, r3
   1efce:	68fb      	ldr	r3, [r7, #12]
   1efd0:	3318      	adds	r3, #24
   1efd2:	681b      	ldr	r3, [r3, #0]
   1efd4:	18d2      	adds	r2, r2, r3
   1efd6:	f244 3314 	movw	r3, #17172	; 0x4314
   1efda:	f2ca 3301 	movt	r3, #41729	; 0xa301
   1efde:	18d3      	adds	r3, r2, r3
   1efe0:	62bb      	str	r3, [r7, #40]	; 0x28
   1efe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1efe4:	ea4f 4273 	mov.w	r2, r3, ror #17
   1efe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1efea:	18d3      	adds	r3, r2, r3
   1efec:	623b      	str	r3, [r7, #32]
   1efee:	69bb      	ldr	r3, [r7, #24]
   1eff0:	43da      	mvns	r2, r3
   1eff2:	6a3b      	ldr	r3, [r7, #32]
   1eff4:	431a      	orrs	r2, r3
   1eff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1eff8:	405a      	eors	r2, r3
   1effa:	69fb      	ldr	r3, [r7, #28]
   1effc:	18d2      	adds	r2, r2, r3
   1effe:	68fb      	ldr	r3, [r7, #12]
   1f000:	3334      	adds	r3, #52	; 0x34
   1f002:	681b      	ldr	r3, [r3, #0]
   1f004:	18d2      	adds	r2, r2, r3
   1f006:	f241 13a1 	movw	r3, #4513	; 0x11a1
   1f00a:	f6c4 6308 	movt	r3, #19976	; 0x4e08
   1f00e:	18d3      	adds	r3, r2, r3
   1f010:	62bb      	str	r3, [r7, #40]	; 0x28
   1f012:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f014:	ea4f 22f3 	mov.w	r2, r3, ror #11
   1f018:	6a3b      	ldr	r3, [r7, #32]
   1f01a:	18d3      	adds	r3, r2, r3
   1f01c:	61fb      	str	r3, [r7, #28]
   1f01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f020:	43da      	mvns	r2, r3
   1f022:	69fb      	ldr	r3, [r7, #28]
   1f024:	431a      	orrs	r2, r3
   1f026:	6a3b      	ldr	r3, [r7, #32]
   1f028:	405a      	eors	r2, r3
   1f02a:	69bb      	ldr	r3, [r7, #24]
   1f02c:	18d2      	adds	r2, r2, r3
   1f02e:	68fb      	ldr	r3, [r7, #12]
   1f030:	3310      	adds	r3, #16
   1f032:	681b      	ldr	r3, [r3, #0]
   1f034:	18d2      	adds	r2, r2, r3
   1f036:	f647 6382 	movw	r3, #32386	; 0x7e82
   1f03a:	f2cf 7353 	movt	r3, #63315	; 0xf753
   1f03e:	18d3      	adds	r3, r2, r3
   1f040:	62bb      	str	r3, [r7, #40]	; 0x28
   1f042:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f044:	ea4f 62b3 	mov.w	r2, r3, ror #26
   1f048:	69fb      	ldr	r3, [r7, #28]
   1f04a:	18d3      	adds	r3, r2, r3
   1f04c:	61bb      	str	r3, [r7, #24]
   1f04e:	6a3b      	ldr	r3, [r7, #32]
   1f050:	43da      	mvns	r2, r3
   1f052:	69bb      	ldr	r3, [r7, #24]
   1f054:	431a      	orrs	r2, r3
   1f056:	69fb      	ldr	r3, [r7, #28]
   1f058:	405a      	eors	r2, r3
   1f05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f05c:	18d2      	adds	r2, r2, r3
   1f05e:	68fb      	ldr	r3, [r7, #12]
   1f060:	332c      	adds	r3, #44	; 0x2c
   1f062:	681b      	ldr	r3, [r3, #0]
   1f064:	18d2      	adds	r2, r2, r3
   1f066:	f24f 2335 	movw	r3, #62005	; 0xf235
   1f06a:	f6cb 533a 	movt	r3, #48442	; 0xbd3a
   1f06e:	18d3      	adds	r3, r2, r3
   1f070:	62bb      	str	r3, [r7, #40]	; 0x28
   1f072:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f074:	ea4f 52b3 	mov.w	r2, r3, ror #22
   1f078:	69bb      	ldr	r3, [r7, #24]
   1f07a:	18d3      	adds	r3, r2, r3
   1f07c:	627b      	str	r3, [r7, #36]	; 0x24
   1f07e:	69fb      	ldr	r3, [r7, #28]
   1f080:	43da      	mvns	r2, r3
   1f082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f084:	431a      	orrs	r2, r3
   1f086:	69bb      	ldr	r3, [r7, #24]
   1f088:	405a      	eors	r2, r3
   1f08a:	6a3b      	ldr	r3, [r7, #32]
   1f08c:	18d2      	adds	r2, r2, r3
   1f08e:	68fb      	ldr	r3, [r7, #12]
   1f090:	3308      	adds	r3, #8
   1f092:	681b      	ldr	r3, [r3, #0]
   1f094:	18d2      	adds	r2, r2, r3
   1f096:	f24d 23bb 	movw	r3, #53947	; 0xd2bb
   1f09a:	f6c2 23d7 	movt	r3, #10967	; 0x2ad7
   1f09e:	18d3      	adds	r3, r2, r3
   1f0a0:	62bb      	str	r3, [r7, #40]	; 0x28
   1f0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f0a4:	ea4f 4273 	mov.w	r2, r3, ror #17
   1f0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f0aa:	18d3      	adds	r3, r2, r3
   1f0ac:	623b      	str	r3, [r7, #32]
   1f0ae:	69bb      	ldr	r3, [r7, #24]
   1f0b0:	43da      	mvns	r2, r3
   1f0b2:	6a3b      	ldr	r3, [r7, #32]
   1f0b4:	431a      	orrs	r2, r3
   1f0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f0b8:	405a      	eors	r2, r3
   1f0ba:	69fb      	ldr	r3, [r7, #28]
   1f0bc:	18d2      	adds	r2, r2, r3
   1f0be:	68fb      	ldr	r3, [r7, #12]
   1f0c0:	3324      	adds	r3, #36	; 0x24
   1f0c2:	681b      	ldr	r3, [r3, #0]
   1f0c4:	18d2      	adds	r2, r2, r3
   1f0c6:	f24d 3391 	movw	r3, #54161	; 0xd391
   1f0ca:	f6ce 3386 	movt	r3, #60294	; 0xeb86
   1f0ce:	18d3      	adds	r3, r2, r3
   1f0d0:	62bb      	str	r3, [r7, #40]	; 0x28
   1f0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1f0d4:	ea4f 22f3 	mov.w	r2, r3, ror #11
   1f0d8:	6a3b      	ldr	r3, [r7, #32]
   1f0da:	18d3      	adds	r3, r2, r3
   1f0dc:	61fb      	str	r3, [r7, #28]
   1f0de:	687b      	ldr	r3, [r7, #4]
   1f0e0:	689a      	ldr	r2, [r3, #8]
   1f0e2:	69bb      	ldr	r3, [r7, #24]
   1f0e4:	18d2      	adds	r2, r2, r3
   1f0e6:	687b      	ldr	r3, [r7, #4]
   1f0e8:	609a      	str	r2, [r3, #8]
   1f0ea:	687b      	ldr	r3, [r7, #4]
   1f0ec:	68da      	ldr	r2, [r3, #12]
   1f0ee:	69fb      	ldr	r3, [r7, #28]
   1f0f0:	18d2      	adds	r2, r2, r3
   1f0f2:	687b      	ldr	r3, [r7, #4]
   1f0f4:	60da      	str	r2, [r3, #12]
   1f0f6:	687b      	ldr	r3, [r7, #4]
   1f0f8:	691a      	ldr	r2, [r3, #16]
   1f0fa:	6a3b      	ldr	r3, [r7, #32]
   1f0fc:	18d2      	adds	r2, r2, r3
   1f0fe:	687b      	ldr	r3, [r7, #4]
   1f100:	611a      	str	r2, [r3, #16]
   1f102:	687b      	ldr	r3, [r7, #4]
   1f104:	695a      	ldr	r2, [r3, #20]
   1f106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f108:	18d2      	adds	r2, r2, r3
   1f10a:	687b      	ldr	r3, [r7, #4]
   1f10c:	615a      	str	r2, [r3, #20]
   1f10e:	4b06      	ldr	r3, [pc, #24]	; (1f128 <md5_process+0xd5c>)
   1f110:	58e3      	ldr	r3, [r4, r3]
   1f112:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1f114:	681b      	ldr	r3, [r3, #0]
   1f116:	429a      	cmp	r2, r3
   1f118:	d001      	beq.n	1f11e <md5_process+0xd52>
   1f11a:	f7e9 ff43 	bl	8fa4 <__stack_chk_fail>
   1f11e:	f107 0774 	add.w	r7, r7, #116	; 0x74
   1f122:	46bd      	mov	sp, r7
   1f124:	bd90      	pop	{r4, r7, pc}
   1f126:	bf00      	nop
   1f128:	000000ac 	.word	0x000000ac

0001f12c <md5_init>:
   1f12c:	b580      	push	{r7, lr}
   1f12e:	b084      	sub	sp, #16
   1f130:	af00      	add	r7, sp, #0
   1f132:	6078      	str	r0, [r7, #4]
   1f134:	4a18      	ldr	r2, [pc, #96]	; (1f198 <md5_init+0x6c>)
   1f136:	447a      	add	r2, pc
   1f138:	4b18      	ldr	r3, [pc, #96]	; (1f19c <md5_init+0x70>)
   1f13a:	58d3      	ldr	r3, [r2, r3]
   1f13c:	681b      	ldr	r3, [r3, #0]
   1f13e:	60fb      	str	r3, [r7, #12]
   1f140:	687b      	ldr	r3, [r7, #4]
   1f142:	2100      	movs	r1, #0
   1f144:	6059      	str	r1, [r3, #4]
   1f146:	687b      	ldr	r3, [r7, #4]
   1f148:	6859      	ldr	r1, [r3, #4]
   1f14a:	687b      	ldr	r3, [r7, #4]
   1f14c:	6019      	str	r1, [r3, #0]
   1f14e:	6879      	ldr	r1, [r7, #4]
   1f150:	f242 3301 	movw	r3, #8961	; 0x2301
   1f154:	f2c6 7345 	movt	r3, #26437	; 0x6745
   1f158:	608b      	str	r3, [r1, #8]
   1f15a:	6879      	ldr	r1, [r7, #4]
   1f15c:	f64a 3389 	movw	r3, #43913	; 0xab89
   1f160:	f6ce 73cd 	movt	r3, #61389	; 0xefcd
   1f164:	60cb      	str	r3, [r1, #12]
   1f166:	6879      	ldr	r1, [r7, #4]
   1f168:	f64d 43fe 	movw	r3, #56574	; 0xdcfe
   1f16c:	f6c9 03ba 	movt	r3, #39098	; 0x98ba
   1f170:	610b      	str	r3, [r1, #16]
   1f172:	6879      	ldr	r1, [r7, #4]
   1f174:	f245 4376 	movw	r3, #21622	; 0x5476
   1f178:	f2c1 0332 	movt	r3, #4146	; 0x1032
   1f17c:	614b      	str	r3, [r1, #20]
   1f17e:	4b07      	ldr	r3, [pc, #28]	; (1f19c <md5_init+0x70>)
   1f180:	58d3      	ldr	r3, [r2, r3]
   1f182:	68fa      	ldr	r2, [r7, #12]
   1f184:	681b      	ldr	r3, [r3, #0]
   1f186:	429a      	cmp	r2, r3
   1f188:	d001      	beq.n	1f18e <md5_init+0x62>
   1f18a:	f7e9 ff0b 	bl	8fa4 <__stack_chk_fail>
   1f18e:	f107 0710 	add.w	r7, r7, #16
   1f192:	46bd      	mov	sp, r7
   1f194:	bd80      	pop	{r7, pc}
   1f196:	bf00      	nop
   1f198:	0000ffde 	.word	0x0000ffde
   1f19c:	000000ac 	.word	0x000000ac

0001f1a0 <md5_append>:
   1f1a0:	b590      	push	{r4, r7, lr}
   1f1a2:	b08b      	sub	sp, #44	; 0x2c
   1f1a4:	af00      	add	r7, sp, #0
   1f1a6:	60f8      	str	r0, [r7, #12]
   1f1a8:	60b9      	str	r1, [r7, #8]
   1f1aa:	607a      	str	r2, [r7, #4]
   1f1ac:	4c40      	ldr	r4, [pc, #256]	; (1f2b0 <md5_append+0x110>)
   1f1ae:	447c      	add	r4, pc
   1f1b0:	4b40      	ldr	r3, [pc, #256]	; (1f2b4 <md5_append+0x114>)
   1f1b2:	58e3      	ldr	r3, [r4, r3]
   1f1b4:	681b      	ldr	r3, [r3, #0]
   1f1b6:	627b      	str	r3, [r7, #36]	; 0x24
   1f1b8:	68bb      	ldr	r3, [r7, #8]
   1f1ba:	613b      	str	r3, [r7, #16]
   1f1bc:	687b      	ldr	r3, [r7, #4]
   1f1be:	617b      	str	r3, [r7, #20]
   1f1c0:	68fb      	ldr	r3, [r7, #12]
   1f1c2:	681b      	ldr	r3, [r3, #0]
   1f1c4:	08db      	lsrs	r3, r3, #3
   1f1c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1f1ca:	61bb      	str	r3, [r7, #24]
   1f1cc:	687b      	ldr	r3, [r7, #4]
   1f1ce:	00db      	lsls	r3, r3, #3
   1f1d0:	61fb      	str	r3, [r7, #28]
   1f1d2:	687b      	ldr	r3, [r7, #4]
   1f1d4:	2b00      	cmp	r3, #0
   1f1d6:	dd5c      	ble.n	1f292 <md5_append+0xf2>
   1f1d8:	68fb      	ldr	r3, [r7, #12]
   1f1da:	685a      	ldr	r2, [r3, #4]
   1f1dc:	687b      	ldr	r3, [r7, #4]
   1f1de:	175b      	asrs	r3, r3, #29
   1f1e0:	18d2      	adds	r2, r2, r3
   1f1e2:	68fb      	ldr	r3, [r7, #12]
   1f1e4:	605a      	str	r2, [r3, #4]
   1f1e6:	68fb      	ldr	r3, [r7, #12]
   1f1e8:	681a      	ldr	r2, [r3, #0]
   1f1ea:	69fb      	ldr	r3, [r7, #28]
   1f1ec:	18d2      	adds	r2, r2, r3
   1f1ee:	68fb      	ldr	r3, [r7, #12]
   1f1f0:	601a      	str	r2, [r3, #0]
   1f1f2:	68fb      	ldr	r3, [r7, #12]
   1f1f4:	681a      	ldr	r2, [r3, #0]
   1f1f6:	69fb      	ldr	r3, [r7, #28]
   1f1f8:	429a      	cmp	r2, r3
   1f1fa:	d204      	bcs.n	1f206 <md5_append+0x66>
   1f1fc:	68fb      	ldr	r3, [r7, #12]
   1f1fe:	685b      	ldr	r3, [r3, #4]
   1f200:	1c5a      	adds	r2, r3, #1
   1f202:	68fb      	ldr	r3, [r7, #12]
   1f204:	605a      	str	r2, [r3, #4]
   1f206:	69bb      	ldr	r3, [r7, #24]
   1f208:	2b00      	cmp	r3, #0
   1f20a:	d032      	beq.n	1f272 <md5_append+0xd2>
   1f20c:	69ba      	ldr	r2, [r7, #24]
   1f20e:	687b      	ldr	r3, [r7, #4]
   1f210:	18d3      	adds	r3, r2, r3
   1f212:	2b40      	cmp	r3, #64	; 0x40
   1f214:	dd03      	ble.n	1f21e <md5_append+0x7e>
   1f216:	69bb      	ldr	r3, [r7, #24]
   1f218:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   1f21c:	e000      	b.n	1f220 <md5_append+0x80>
   1f21e:	687b      	ldr	r3, [r7, #4]
   1f220:	623b      	str	r3, [r7, #32]
   1f222:	69bb      	ldr	r3, [r7, #24]
   1f224:	3318      	adds	r3, #24
   1f226:	68fa      	ldr	r2, [r7, #12]
   1f228:	18d2      	adds	r2, r2, r3
   1f22a:	6a3b      	ldr	r3, [r7, #32]
   1f22c:	4610      	mov	r0, r2
   1f22e:	6939      	ldr	r1, [r7, #16]
   1f230:	461a      	mov	r2, r3
   1f232:	f7e9 ed22 	blx	8c78 <_init+0x118>
   1f236:	69ba      	ldr	r2, [r7, #24]
   1f238:	6a3b      	ldr	r3, [r7, #32]
   1f23a:	18d3      	adds	r3, r2, r3
   1f23c:	2b3f      	cmp	r3, #63	; 0x3f
   1f23e:	dd2a      	ble.n	1f296 <md5_append+0xf6>
   1f240:	6a3b      	ldr	r3, [r7, #32]
   1f242:	693a      	ldr	r2, [r7, #16]
   1f244:	18d3      	adds	r3, r2, r3
   1f246:	613b      	str	r3, [r7, #16]
   1f248:	697a      	ldr	r2, [r7, #20]
   1f24a:	6a3b      	ldr	r3, [r7, #32]
   1f24c:	1ad3      	subs	r3, r2, r3
   1f24e:	617b      	str	r3, [r7, #20]
   1f250:	68fb      	ldr	r3, [r7, #12]
   1f252:	3318      	adds	r3, #24
   1f254:	68f8      	ldr	r0, [r7, #12]
   1f256:	4619      	mov	r1, r3
   1f258:	f7ff f8b8 	bl	1e3cc <md5_process>
   1f25c:	e009      	b.n	1f272 <md5_append+0xd2>
   1f25e:	68f8      	ldr	r0, [r7, #12]
   1f260:	6939      	ldr	r1, [r7, #16]
   1f262:	f7ff f8b3 	bl	1e3cc <md5_process>
   1f266:	693b      	ldr	r3, [r7, #16]
   1f268:	3340      	adds	r3, #64	; 0x40
   1f26a:	613b      	str	r3, [r7, #16]
   1f26c:	697b      	ldr	r3, [r7, #20]
   1f26e:	3b40      	subs	r3, #64	; 0x40
   1f270:	617b      	str	r3, [r7, #20]
   1f272:	697b      	ldr	r3, [r7, #20]
   1f274:	2b3f      	cmp	r3, #63	; 0x3f
   1f276:	dcf2      	bgt.n	1f25e <md5_append+0xbe>
   1f278:	697b      	ldr	r3, [r7, #20]
   1f27a:	2b00      	cmp	r3, #0
   1f27c:	d00c      	beq.n	1f298 <md5_append+0xf8>
   1f27e:	68fb      	ldr	r3, [r7, #12]
   1f280:	f103 0218 	add.w	r2, r3, #24
   1f284:	697b      	ldr	r3, [r7, #20]
   1f286:	4610      	mov	r0, r2
   1f288:	6939      	ldr	r1, [r7, #16]
   1f28a:	461a      	mov	r2, r3
   1f28c:	f7e9 ecf4 	blx	8c78 <_init+0x118>
   1f290:	e002      	b.n	1f298 <md5_append+0xf8>
   1f292:	bf00      	nop
   1f294:	e000      	b.n	1f298 <md5_append+0xf8>
   1f296:	bf00      	nop
   1f298:	4b06      	ldr	r3, [pc, #24]	; (1f2b4 <md5_append+0x114>)
   1f29a:	58e3      	ldr	r3, [r4, r3]
   1f29c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f29e:	681b      	ldr	r3, [r3, #0]
   1f2a0:	429a      	cmp	r2, r3
   1f2a2:	d001      	beq.n	1f2a8 <md5_append+0x108>
   1f2a4:	f7e9 fe7e 	bl	8fa4 <__stack_chk_fail>
   1f2a8:	f107 072c 	add.w	r7, r7, #44	; 0x2c
   1f2ac:	46bd      	mov	sp, r7
   1f2ae:	bd90      	pop	{r4, r7, pc}
   1f2b0:	0000ff66 	.word	0x0000ff66
   1f2b4:	000000ac 	.word	0x000000ac

0001f2b8 <md5_finish>:
   1f2b8:	b590      	push	{r4, r7, lr}
   1f2ba:	b087      	sub	sp, #28
   1f2bc:	af00      	add	r7, sp, #0
   1f2be:	6078      	str	r0, [r7, #4]
   1f2c0:	6039      	str	r1, [r7, #0]
   1f2c2:	4c2e      	ldr	r4, [pc, #184]	; (1f37c <md5_finish+0xc4>)
   1f2c4:	447c      	add	r4, pc
   1f2c6:	4b2e      	ldr	r3, [pc, #184]	; (1f380 <md5_finish+0xc8>)
   1f2c8:	58e3      	ldr	r3, [r4, r3]
   1f2ca:	681b      	ldr	r3, [r3, #0]
   1f2cc:	617b      	str	r3, [r7, #20]
   1f2ce:	2300      	movs	r3, #0
   1f2d0:	60bb      	str	r3, [r7, #8]
   1f2d2:	e013      	b.n	1f2fc <md5_finish+0x44>
   1f2d4:	68bb      	ldr	r3, [r7, #8]
   1f2d6:	109a      	asrs	r2, r3, #2
   1f2d8:	687b      	ldr	r3, [r7, #4]
   1f2da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1f2de:	68bb      	ldr	r3, [r7, #8]
   1f2e0:	f003 0303 	and.w	r3, r3, #3
   1f2e4:	00db      	lsls	r3, r3, #3
   1f2e6:	fa22 f303 	lsr.w	r3, r2, r3
   1f2ea:	b2da      	uxtb	r2, r3
   1f2ec:	f107 010c 	add.w	r1, r7, #12
   1f2f0:	68bb      	ldr	r3, [r7, #8]
   1f2f2:	18cb      	adds	r3, r1, r3
   1f2f4:	701a      	strb	r2, [r3, #0]
   1f2f6:	68bb      	ldr	r3, [r7, #8]
   1f2f8:	3301      	adds	r3, #1
   1f2fa:	60bb      	str	r3, [r7, #8]
   1f2fc:	68bb      	ldr	r3, [r7, #8]
   1f2fe:	2b07      	cmp	r3, #7
   1f300:	dde8      	ble.n	1f2d4 <md5_finish+0x1c>
   1f302:	687b      	ldr	r3, [r7, #4]
   1f304:	681b      	ldr	r3, [r3, #0]
   1f306:	08db      	lsrs	r3, r3, #3
   1f308:	f1c3 0337 	rsb	r3, r3, #55	; 0x37
   1f30c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1f310:	3301      	adds	r3, #1
   1f312:	6878      	ldr	r0, [r7, #4]
   1f314:	4a1b      	ldr	r2, [pc, #108]	; (1f384 <md5_finish+0xcc>)
   1f316:	447a      	add	r2, pc
   1f318:	4611      	mov	r1, r2
   1f31a:	461a      	mov	r2, r3
   1f31c:	f7ff ff40 	bl	1f1a0 <md5_append>
   1f320:	f107 030c 	add.w	r3, r7, #12
   1f324:	6878      	ldr	r0, [r7, #4]
   1f326:	4619      	mov	r1, r3
   1f328:	2208      	movs	r2, #8
   1f32a:	f7ff ff39 	bl	1f1a0 <md5_append>
   1f32e:	2300      	movs	r3, #0
   1f330:	60bb      	str	r3, [r7, #8]
   1f332:	e013      	b.n	1f35c <md5_finish+0xa4>
   1f334:	68bb      	ldr	r3, [r7, #8]
   1f336:	683a      	ldr	r2, [r7, #0]
   1f338:	18d3      	adds	r3, r2, r3
   1f33a:	68ba      	ldr	r2, [r7, #8]
   1f33c:	1091      	asrs	r1, r2, #2
   1f33e:	687a      	ldr	r2, [r7, #4]
   1f340:	3102      	adds	r1, #2
   1f342:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1f346:	68ba      	ldr	r2, [r7, #8]
   1f348:	f002 0203 	and.w	r2, r2, #3
   1f34c:	00d2      	lsls	r2, r2, #3
   1f34e:	fa21 f202 	lsr.w	r2, r1, r2
   1f352:	b2d2      	uxtb	r2, r2
   1f354:	701a      	strb	r2, [r3, #0]
   1f356:	68bb      	ldr	r3, [r7, #8]
   1f358:	3301      	adds	r3, #1
   1f35a:	60bb      	str	r3, [r7, #8]
   1f35c:	68bb      	ldr	r3, [r7, #8]
   1f35e:	2b0f      	cmp	r3, #15
   1f360:	dde8      	ble.n	1f334 <md5_finish+0x7c>
   1f362:	4b07      	ldr	r3, [pc, #28]	; (1f380 <md5_finish+0xc8>)
   1f364:	58e3      	ldr	r3, [r4, r3]
   1f366:	697a      	ldr	r2, [r7, #20]
   1f368:	681b      	ldr	r3, [r3, #0]
   1f36a:	429a      	cmp	r2, r3
   1f36c:	d001      	beq.n	1f372 <md5_finish+0xba>
   1f36e:	f7e9 fe19 	bl	8fa4 <__stack_chk_fail>
   1f372:	f107 071c 	add.w	r7, r7, #28
   1f376:	46bd      	mov	sp, r7
   1f378:	bd90      	pop	{r4, r7, pc}
   1f37a:	bf00      	nop
   1f37c:	0000fe50 	.word	0x0000fe50
   1f380:	000000ac 	.word	0x000000ac
   1f384:	00006fb2 	.word	0x00006fb2

0001f388 <gprs_GetInformation_Init>:
   1f388:	b40f      	push	{r0, r1, r2, r3}
   1f38a:	4805      	ldr	r0, [pc, #20]	; (1f3a0 <gprs_GetInformation+0xe>)
   1f38c:	4905      	ldr	r1, [pc, #20]	; (1f3a4 <gprs_GetInformation+0x12>)
   1f38e:	4a06      	ldr	r2, [pc, #24]	; (1f3a8 <gprs_GetInformation+0x16>)
   1f390:	4710      	bx	r2

0001f392 <gprs_GetInformation>:
   1f392:	b401      	push	{r0}
   1f394:	4803      	ldr	r0, [pc, #12]	; (1f3a4 <gprs_GetInformation+0x12>)
   1f396:	6800      	ldr	r0, [r0, #0]
   1f398:	4684      	mov	ip, r0
   1f39a:	bc01      	pop	{r0}
   1f39c:	4760      	bx	ip
   1f39e:	0000      	.short	0x0000
   1f3a0:	000027fb 	.word	0x000027fb
   1f3a4:	0002f780 	.word	0x0002f780
   1f3a8:	0001f3f5 	.word	0x0001f3f5

0001f3ac <gprs_SetPinModeFree_Init>:
   1f3ac:	b40f      	push	{r0, r1, r2, r3}
   1f3ae:	4805      	ldr	r0, [pc, #20]	; (1f3c4 <gprs_SetPinModeFree+0xe>)
   1f3b0:	4905      	ldr	r1, [pc, #20]	; (1f3c8 <gprs_SetPinModeFree+0x12>)
   1f3b2:	4a06      	ldr	r2, [pc, #24]	; (1f3cc <gprs_SetPinModeFree+0x16>)
   1f3b4:	4710      	bx	r2

0001f3b6 <gprs_SetPinModeFree>:
   1f3b6:	b401      	push	{r0}
   1f3b8:	4803      	ldr	r0, [pc, #12]	; (1f3c8 <gprs_SetPinModeFree+0x12>)
   1f3ba:	6800      	ldr	r0, [r0, #0]
   1f3bc:	4684      	mov	ip, r0
   1f3be:	bc01      	pop	{r0}
   1f3c0:	4760      	bx	ip
   1f3c2:	0000      	.short	0x0000
   1f3c4:	000027f9 	.word	0x000027f9
   1f3c8:	0002f790 	.word	0x0002f790
   1f3cc:	0001f3f5 	.word	0x0001f3f5

0001f3d0 <gprs_SubmitPuk_Init>:
   1f3d0:	b40f      	push	{r0, r1, r2, r3}
   1f3d2:	4805      	ldr	r0, [pc, #20]	; (1f3e8 <gprs_SubmitPuk+0xe>)
   1f3d4:	4905      	ldr	r1, [pc, #20]	; (1f3ec <gprs_SubmitPuk+0x12>)
   1f3d6:	4a06      	ldr	r2, [pc, #24]	; (1f3f0 <gprs_SubmitPuk+0x16>)
   1f3d8:	4710      	bx	r2

0001f3da <gprs_SubmitPuk>:
   1f3da:	b401      	push	{r0}
   1f3dc:	4803      	ldr	r0, [pc, #12]	; (1f3ec <gprs_SubmitPuk+0x12>)
   1f3de:	6800      	ldr	r0, [r0, #0]
   1f3e0:	4684      	mov	ip, r0
   1f3e2:	bc01      	pop	{r0}
   1f3e4:	4760      	bx	ip
   1f3e6:	0000      	.short	0x0000
   1f3e8:	000027fa 	.word	0x000027fa
   1f3ec:	0002f7a0 	.word	0x0002f7a0
   1f3f0:	0001f3f5 	.word	0x0001f3f5

0001f3f4 <LIBGPRS_InitFuncAndBranch>:
   1f3f4:	b500      	push	{lr}
   1f3f6:	f000 f835 	bl	1f464 <LIBGPRS_GetProcAddress>
   1f3fa:	bc04      	pop	{r2}
   1f3fc:	4696      	mov	lr, r2
   1f3fe:	4684      	mov	ip, r0
   1f400:	bc0f      	pop	{r0, r1, r2, r3}
   1f402:	4760      	bx	ip

0001f404 <LIBGPRS_GetProcAddressWithoutExit>:
   1f404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f406:	4c13      	ldr	r4, [pc, #76]	; (1f454 <LIBGPRS_GetProcAddressWithoutExit+0x50>)
   1f408:	4607      	mov	r7, r0
   1f40a:	447c      	add	r4, pc
   1f40c:	460d      	mov	r5, r1
   1f40e:	6823      	ldr	r3, [r4, #0]
   1f410:	b923      	cbnz	r3, 1f41c <LIBGPRS_GetProcAddressWithoutExit+0x18>
   1f412:	4811      	ldr	r0, [pc, #68]	; (1f458 <LIBGPRS_GetProcAddressWithoutExit+0x54>)
   1f414:	4478      	add	r0, pc
   1f416:	f002 fe82 	bl	2211e <OSL_Dll_Open>
   1f41a:	6020      	str	r0, [r4, #0]
   1f41c:	4e0f      	ldr	r6, [pc, #60]	; (1f45c <LIBGPRS_GetProcAddressWithoutExit+0x58>)
   1f41e:	447e      	add	r6, pc
   1f420:	6834      	ldr	r4, [r6, #0]
   1f422:	b95c      	cbnz	r4, 1f43c <LIBGPRS_GetProcAddressWithoutExit+0x38>
   1f424:	4b0e      	ldr	r3, [pc, #56]	; (1f460 <LIBGPRS_GetProcAddressWithoutExit+0x5c>)
   1f426:	2003      	movs	r0, #3
   1f428:	447b      	add	r3, pc
   1f42a:	9400      	str	r4, [sp, #0]
   1f42c:	9301      	str	r3, [sp, #4]
   1f42e:	4621      	mov	r1, r4
   1f430:	4622      	mov	r2, r4
   1f432:	4623      	mov	r3, r4
   1f434:	f7e9 ec06 	blx	8c44 <_init+0xe4>
   1f438:	4620      	mov	r0, r4
   1f43a:	e005      	b.n	1f448 <LIBGPRS_GetProcAddressWithoutExit+0x44>
   1f43c:	4620      	mov	r0, r4
   1f43e:	4639      	mov	r1, r7
   1f440:	f002 fe4d 	bl	220de <OSL_Dll_GetSymbolByName>
   1f444:	2301      	movs	r3, #1
   1f446:	6073      	str	r3, [r6, #4]
   1f448:	b115      	cbz	r5, 1f450 <LIBGPRS_GetProcAddressWithoutExit+0x4c>
   1f44a:	682b      	ldr	r3, [r5, #0]
   1f44c:	b103      	cbz	r3, 1f450 <LIBGPRS_GetProcAddressWithoutExit+0x4c>
   1f44e:	6028      	str	r0, [r5, #0]
   1f450:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1f452:	bf00      	nop
   1f454:	00010be6 	.word	0x00010be6
   1f458:	00006ef8 	.word	0x00006ef8
   1f45c:	00010bd2 	.word	0x00010bd2
   1f460:	00006eec 	.word	0x00006eec

0001f464 <LIBGPRS_GetProcAddress>:
   1f464:	b513      	push	{r0, r1, r4, lr}
   1f466:	f7ff ffcd 	bl	1f404 <LIBGPRS_GetProcAddressWithoutExit>
   1f46a:	4604      	mov	r4, r0
   1f46c:	b948      	cbnz	r0, 1f482 <LIBGPRS_GetProcAddress+0x1e>
   1f46e:	4b06      	ldr	r3, [pc, #24]	; (1f488 <LIBGPRS_GetProcAddress+0x24>)
   1f470:	9000      	str	r0, [sp, #0]
   1f472:	447b      	add	r3, pc
   1f474:	2003      	movs	r0, #3
   1f476:	9301      	str	r3, [sp, #4]
   1f478:	4621      	mov	r1, r4
   1f47a:	4622      	mov	r2, r4
   1f47c:	4623      	mov	r3, r4
   1f47e:	f7e9 ebe2 	blx	8c44 <_init+0xe4>
   1f482:	4620      	mov	r0, r4
   1f484:	bd1c      	pop	{r2, r3, r4, pc}
   1f486:	bf00      	nop
   1f488:	00006eb9 	.word	0x00006eb9

0001f48c <LIBGPRS_IsPresent>:
   1f48c:	4802      	ldr	r0, [pc, #8]	; (1f498 <LIBGPRS_IsPresent+0xc>)
   1f48e:	b508      	push	{r3, lr}
   1f490:	4478      	add	r0, pc
   1f492:	f002 fe34 	bl	220fe <OSL_Dll_IsPresent>
   1f496:	bd08      	pop	{r3, pc}
   1f498:	00006e7c 	.word	0x00006e7c

0001f49c <LL_ClearReceiveBuffer_Init>:
   1f49c:	b40f      	push	{r0, r1, r2, r3}
   1f49e:	4805      	ldr	r0, [pc, #20]	; (1f4b4 <LL_ClearReceiveBuffer+0xe>)
   1f4a0:	4905      	ldr	r1, [pc, #20]	; (1f4b8 <LL_ClearReceiveBuffer+0x12>)
   1f4a2:	4a06      	ldr	r2, [pc, #24]	; (1f4bc <LL_ClearReceiveBuffer+0x16>)
   1f4a4:	4710      	bx	r2

0001f4a6 <LL_ClearReceiveBuffer>:
   1f4a6:	b401      	push	{r0}
   1f4a8:	4803      	ldr	r0, [pc, #12]	; (1f4b8 <LL_ClearReceiveBuffer+0x12>)
   1f4aa:	6800      	ldr	r0, [r0, #0]
   1f4ac:	4684      	mov	ip, r0
   1f4ae:	bc01      	pop	{r0}
   1f4b0:	4760      	bx	ip
   1f4b2:	0000      	.short	0x0000
   1f4b4:	00002717 	.word	0x00002717
   1f4b8:	0002f7b0 	.word	0x0002f7b0
   1f4bc:	0001f64d 	.word	0x0001f64d

0001f4c0 <LL_ClearSendBuffer_Init>:
   1f4c0:	b40f      	push	{r0, r1, r2, r3}
   1f4c2:	4805      	ldr	r0, [pc, #20]	; (1f4d8 <LL_ClearSendBuffer+0xe>)
   1f4c4:	4905      	ldr	r1, [pc, #20]	; (1f4dc <LL_ClearSendBuffer+0x12>)
   1f4c6:	4a06      	ldr	r2, [pc, #24]	; (1f4e0 <LL_ClearSendBuffer+0x16>)
   1f4c8:	4710      	bx	r2

0001f4ca <LL_ClearSendBuffer>:
   1f4ca:	b401      	push	{r0}
   1f4cc:	4803      	ldr	r0, [pc, #12]	; (1f4dc <LL_ClearSendBuffer+0x12>)
   1f4ce:	6800      	ldr	r0, [r0, #0]
   1f4d0:	4684      	mov	ip, r0
   1f4d2:	bc01      	pop	{r0}
   1f4d4:	4760      	bx	ip
   1f4d6:	0000      	.short	0x0000
   1f4d8:	00002716 	.word	0x00002716
   1f4dc:	0002f7c0 	.word	0x0002f7c0
   1f4e0:	0001f64d 	.word	0x0001f64d

0001f4e4 <LL_Configure_Init>:
   1f4e4:	b40f      	push	{r0, r1, r2, r3}
   1f4e6:	4805      	ldr	r0, [pc, #20]	; (1f4fc <LL_Configure+0xe>)
   1f4e8:	4905      	ldr	r1, [pc, #20]	; (1f500 <LL_Configure+0x12>)
   1f4ea:	4a06      	ldr	r2, [pc, #24]	; (1f504 <LL_Configure+0x16>)
   1f4ec:	4710      	bx	r2

0001f4ee <LL_Configure>:
   1f4ee:	b401      	push	{r0}
   1f4f0:	4803      	ldr	r0, [pc, #12]	; (1f500 <LL_Configure+0x12>)
   1f4f2:	6800      	ldr	r0, [r0, #0]
   1f4f4:	4684      	mov	ip, r0
   1f4f6:	bc01      	pop	{r0}
   1f4f8:	4760      	bx	ip
   1f4fa:	0000      	.short	0x0000
   1f4fc:	00002711 	.word	0x00002711
   1f500:	0002f7d0 	.word	0x0002f7d0
   1f504:	0001f64d 	.word	0x0001f64d

0001f508 <LL_Connect_Init>:
   1f508:	b40f      	push	{r0, r1, r2, r3}
   1f50a:	4805      	ldr	r0, [pc, #20]	; (1f520 <LL_Connect+0xe>)
   1f50c:	4905      	ldr	r1, [pc, #20]	; (1f524 <LL_Connect+0x12>)
   1f50e:	4a06      	ldr	r2, [pc, #24]	; (1f528 <LL_Connect+0x16>)
   1f510:	4710      	bx	r2

0001f512 <LL_Connect>:
   1f512:	b401      	push	{r0}
   1f514:	4803      	ldr	r0, [pc, #12]	; (1f524 <LL_Connect+0x12>)
   1f516:	6800      	ldr	r0, [r0, #0]
   1f518:	4684      	mov	ip, r0
   1f51a:	bc01      	pop	{r0}
   1f51c:	4760      	bx	ip
   1f51e:	0000      	.short	0x0000
   1f520:	00002712 	.word	0x00002712
   1f524:	0002f7e0 	.word	0x0002f7e0
   1f528:	0001f64d 	.word	0x0001f64d

0001f52c <LL_Disconnect_Init>:
   1f52c:	b40f      	push	{r0, r1, r2, r3}
   1f52e:	4805      	ldr	r0, [pc, #20]	; (1f544 <LL_Disconnect+0xe>)
   1f530:	4905      	ldr	r1, [pc, #20]	; (1f548 <LL_Disconnect+0x12>)
   1f532:	4a06      	ldr	r2, [pc, #24]	; (1f54c <LL_Disconnect+0x16>)
   1f534:	4710      	bx	r2

0001f536 <LL_Disconnect>:
   1f536:	b401      	push	{r0}
   1f538:	4803      	ldr	r0, [pc, #12]	; (1f548 <LL_Disconnect+0x12>)
   1f53a:	6800      	ldr	r0, [r0, #0]
   1f53c:	4684      	mov	ip, r0
   1f53e:	bc01      	pop	{r0}
   1f540:	4760      	bx	ip
   1f542:	0000      	.short	0x0000
   1f544:	00002713 	.word	0x00002713
   1f548:	0002f7f0 	.word	0x0002f7f0
   1f54c:	0001f64d 	.word	0x0001f64d

0001f550 <LL_GetLastError_Init>:
   1f550:	b40f      	push	{r0, r1, r2, r3}
   1f552:	4805      	ldr	r0, [pc, #20]	; (1f568 <LL_GetLastError+0xe>)
   1f554:	4905      	ldr	r1, [pc, #20]	; (1f56c <LL_GetLastError+0x12>)
   1f556:	4a06      	ldr	r2, [pc, #24]	; (1f570 <LL_GetLastError+0x16>)
   1f558:	4710      	bx	r2

0001f55a <LL_GetLastError>:
   1f55a:	b401      	push	{r0}
   1f55c:	4803      	ldr	r0, [pc, #12]	; (1f56c <LL_GetLastError+0x12>)
   1f55e:	6800      	ldr	r0, [r0, #0]
   1f560:	4684      	mov	ip, r0
   1f562:	bc01      	pop	{r0}
   1f564:	4760      	bx	ip
   1f566:	0000      	.short	0x0000
   1f568:	00002718 	.word	0x00002718
   1f56c:	0002f800 	.word	0x0002f800
   1f570:	0001f64d 	.word	0x0001f64d

0001f574 <LL_GPRS_Connect_Init>:
   1f574:	b40f      	push	{r0, r1, r2, r3}
   1f576:	4805      	ldr	r0, [pc, #20]	; (1f58c <LL_GPRS_Connect+0xe>)
   1f578:	4905      	ldr	r1, [pc, #20]	; (1f590 <LL_GPRS_Connect+0x12>)
   1f57a:	4a06      	ldr	r2, [pc, #24]	; (1f594 <LL_GPRS_Connect+0x16>)
   1f57c:	4710      	bx	r2

0001f57e <LL_GPRS_Connect>:
   1f57e:	b401      	push	{r0}
   1f580:	4803      	ldr	r0, [pc, #12]	; (1f590 <LL_GPRS_Connect+0x12>)
   1f582:	6800      	ldr	r0, [r0, #0]
   1f584:	4684      	mov	ip, r0
   1f586:	bc01      	pop	{r0}
   1f588:	4760      	bx	ip
   1f58a:	0000      	.short	0x0000
   1f58c:	00002721 	.word	0x00002721
   1f590:	0002f810 	.word	0x0002f810
   1f594:	0001f64d 	.word	0x0001f64d

0001f598 <LL_GPRS_Start_Init>:
   1f598:	b40f      	push	{r0, r1, r2, r3}
   1f59a:	4805      	ldr	r0, [pc, #20]	; (1f5b0 <LL_GPRS_Start+0xe>)
   1f59c:	4905      	ldr	r1, [pc, #20]	; (1f5b4 <LL_GPRS_Start+0x12>)
   1f59e:	4a06      	ldr	r2, [pc, #24]	; (1f5b8 <LL_GPRS_Start+0x16>)
   1f5a0:	4710      	bx	r2

0001f5a2 <LL_GPRS_Start>:
   1f5a2:	b401      	push	{r0}
   1f5a4:	4803      	ldr	r0, [pc, #12]	; (1f5b4 <LL_GPRS_Start+0x12>)
   1f5a6:	6800      	ldr	r0, [r0, #0]
   1f5a8:	4684      	mov	ip, r0
   1f5aa:	bc01      	pop	{r0}
   1f5ac:	4760      	bx	ip
   1f5ae:	0000      	.short	0x0000
   1f5b0:	0000271f 	.word	0x0000271f
   1f5b4:	0002f820 	.word	0x0002f820
   1f5b8:	0001f64d 	.word	0x0001f64d

0001f5bc <LL_GSM_Start_Init>:
   1f5bc:	b40f      	push	{r0, r1, r2, r3}
   1f5be:	4805      	ldr	r0, [pc, #20]	; (1f5d4 <LL_GSM_Start+0xe>)
   1f5c0:	4905      	ldr	r1, [pc, #20]	; (1f5d8 <LL_GSM_Start+0x12>)
   1f5c2:	4a06      	ldr	r2, [pc, #24]	; (1f5dc <LL_GSM_Start+0x16>)
   1f5c4:	4710      	bx	r2

0001f5c6 <LL_GSM_Start>:
   1f5c6:	b401      	push	{r0}
   1f5c8:	4803      	ldr	r0, [pc, #12]	; (1f5d8 <LL_GSM_Start+0x12>)
   1f5ca:	6800      	ldr	r0, [r0, #0]
   1f5cc:	4684      	mov	ip, r0
   1f5ce:	bc01      	pop	{r0}
   1f5d0:	4760      	bx	ip
   1f5d2:	0000      	.short	0x0000
   1f5d4:	0000271d 	.word	0x0000271d
   1f5d8:	0002f830 	.word	0x0002f830
   1f5dc:	0001f64d 	.word	0x0001f64d

0001f5e0 <LL_Network_GetStatus_Init>:
   1f5e0:	b40f      	push	{r0, r1, r2, r3}
   1f5e2:	4805      	ldr	r0, [pc, #20]	; (1f5f8 <LL_Network_GetStatus+0xe>)
   1f5e4:	4905      	ldr	r1, [pc, #20]	; (1f5fc <LL_Network_GetStatus+0x12>)
   1f5e6:	4a06      	ldr	r2, [pc, #24]	; (1f600 <LL_Network_GetStatus+0x16>)
   1f5e8:	4710      	bx	r2

0001f5ea <LL_Network_GetStatus>:
   1f5ea:	b401      	push	{r0}
   1f5ec:	4803      	ldr	r0, [pc, #12]	; (1f5fc <LL_Network_GetStatus+0x12>)
   1f5ee:	6800      	ldr	r0, [r0, #0]
   1f5f0:	4684      	mov	ip, r0
   1f5f2:	bc01      	pop	{r0}
   1f5f4:	4760      	bx	ip
   1f5f6:	0000      	.short	0x0000
   1f5f8:	0000271c 	.word	0x0000271c
   1f5fc:	0002f840 	.word	0x0002f840
   1f600:	0001f64d 	.word	0x0001f64d

0001f604 <LL_Receive_Init>:
   1f604:	b40f      	push	{r0, r1, r2, r3}
   1f606:	4805      	ldr	r0, [pc, #20]	; (1f61c <LL_Receive+0xe>)
   1f608:	4905      	ldr	r1, [pc, #20]	; (1f620 <LL_Receive+0x12>)
   1f60a:	4a06      	ldr	r2, [pc, #24]	; (1f624 <LL_Receive+0x16>)
   1f60c:	4710      	bx	r2

0001f60e <LL_Receive>:
   1f60e:	b401      	push	{r0}
   1f610:	4803      	ldr	r0, [pc, #12]	; (1f620 <LL_Receive+0x12>)
   1f612:	6800      	ldr	r0, [r0, #0]
   1f614:	4684      	mov	ip, r0
   1f616:	bc01      	pop	{r0}
   1f618:	4760      	bx	ip
   1f61a:	0000      	.short	0x0000
   1f61c:	00002715 	.word	0x00002715
   1f620:	0002f850 	.word	0x0002f850
   1f624:	0001f64d 	.word	0x0001f64d

0001f628 <LL_Send_Init>:
   1f628:	b40f      	push	{r0, r1, r2, r3}
   1f62a:	4805      	ldr	r0, [pc, #20]	; (1f640 <LL_Send+0xe>)
   1f62c:	4905      	ldr	r1, [pc, #20]	; (1f644 <LL_Send+0x12>)
   1f62e:	4a06      	ldr	r2, [pc, #24]	; (1f648 <LL_Send+0x16>)
   1f630:	4710      	bx	r2

0001f632 <LL_Send>:
   1f632:	b401      	push	{r0}
   1f634:	4803      	ldr	r0, [pc, #12]	; (1f644 <LL_Send+0x12>)
   1f636:	6800      	ldr	r0, [r0, #0]
   1f638:	4684      	mov	ip, r0
   1f63a:	bc01      	pop	{r0}
   1f63c:	4760      	bx	ip
   1f63e:	0000      	.short	0x0000
   1f640:	00002714 	.word	0x00002714
   1f644:	0002f860 	.word	0x0002f860
   1f648:	0001f64d 	.word	0x0001f64d

0001f64c <LINKLAYER_InitFuncAndBranch>:
   1f64c:	b500      	push	{lr}
   1f64e:	f000 f835 	bl	1f6bc <LINKLAYER_GetProcAddress>
   1f652:	bc04      	pop	{r2}
   1f654:	4696      	mov	lr, r2
   1f656:	4684      	mov	ip, r0
   1f658:	bc0f      	pop	{r0, r1, r2, r3}
   1f65a:	4760      	bx	ip

0001f65c <LINKLAYER_GetProcAddressWithoutExit>:
   1f65c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f65e:	4c13      	ldr	r4, [pc, #76]	; (1f6ac <LINKLAYER_GetProcAddressWithoutExit+0x50>)
   1f660:	4607      	mov	r7, r0
   1f662:	447c      	add	r4, pc
   1f664:	460d      	mov	r5, r1
   1f666:	6823      	ldr	r3, [r4, #0]
   1f668:	b923      	cbnz	r3, 1f674 <LINKLAYER_GetProcAddressWithoutExit+0x18>
   1f66a:	4811      	ldr	r0, [pc, #68]	; (1f6b0 <LINKLAYER_GetProcAddressWithoutExit+0x54>)
   1f66c:	4478      	add	r0, pc
   1f66e:	f002 fd56 	bl	2211e <OSL_Dll_Open>
   1f672:	6020      	str	r0, [r4, #0]
   1f674:	4e0f      	ldr	r6, [pc, #60]	; (1f6b4 <LINKLAYER_GetProcAddressWithoutExit+0x58>)
   1f676:	447e      	add	r6, pc
   1f678:	6834      	ldr	r4, [r6, #0]
   1f67a:	b95c      	cbnz	r4, 1f694 <LINKLAYER_GetProcAddressWithoutExit+0x38>
   1f67c:	4b0e      	ldr	r3, [pc, #56]	; (1f6b8 <LINKLAYER_GetProcAddressWithoutExit+0x5c>)
   1f67e:	2003      	movs	r0, #3
   1f680:	447b      	add	r3, pc
   1f682:	9400      	str	r4, [sp, #0]
   1f684:	9301      	str	r3, [sp, #4]
   1f686:	4621      	mov	r1, r4
   1f688:	4622      	mov	r2, r4
   1f68a:	4623      	mov	r3, r4
   1f68c:	f7e9 eada 	blx	8c44 <_init+0xe4>
   1f690:	4620      	mov	r0, r4
   1f692:	e005      	b.n	1f6a0 <LINKLAYER_GetProcAddressWithoutExit+0x44>
   1f694:	4620      	mov	r0, r4
   1f696:	4639      	mov	r1, r7
   1f698:	f002 fd21 	bl	220de <OSL_Dll_GetSymbolByName>
   1f69c:	2301      	movs	r3, #1
   1f69e:	6073      	str	r3, [r6, #4]
   1f6a0:	b115      	cbz	r5, 1f6a8 <LINKLAYER_GetProcAddressWithoutExit+0x4c>
   1f6a2:	682b      	ldr	r3, [r5, #0]
   1f6a4:	b103      	cbz	r3, 1f6a8 <LINKLAYER_GetProcAddressWithoutExit+0x4c>
   1f6a6:	6028      	str	r0, [r5, #0]
   1f6a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1f6aa:	bf00      	nop
   1f6ac:	00010996 	.word	0x00010996
   1f6b0:	00006ce0 	.word	0x00006ce0
   1f6b4:	00010982 	.word	0x00010982
   1f6b8:	00006cd6 	.word	0x00006cd6

0001f6bc <LINKLAYER_GetProcAddress>:
   1f6bc:	b513      	push	{r0, r1, r4, lr}
   1f6be:	f7ff ffcd 	bl	1f65c <LINKLAYER_GetProcAddressWithoutExit>
   1f6c2:	4604      	mov	r4, r0
   1f6c4:	b948      	cbnz	r0, 1f6da <LINKLAYER_GetProcAddress+0x1e>
   1f6c6:	4b06      	ldr	r3, [pc, #24]	; (1f6e0 <LINKLAYER_GetProcAddress+0x24>)
   1f6c8:	9000      	str	r0, [sp, #0]
   1f6ca:	447b      	add	r3, pc
   1f6cc:	2003      	movs	r0, #3
   1f6ce:	9301      	str	r3, [sp, #4]
   1f6d0:	4621      	mov	r1, r4
   1f6d2:	4622      	mov	r2, r4
   1f6d4:	4623      	mov	r3, r4
   1f6d6:	f7e9 eab6 	blx	8c44 <_init+0xe4>
   1f6da:	4620      	mov	r0, r4
   1f6dc:	bd1c      	pop	{r2, r3, r4, pc}
   1f6de:	bf00      	nop
   1f6e0:	00006ca5 	.word	0x00006ca5

0001f6e4 <LINKLAYER_IsPresent>:
   1f6e4:	4802      	ldr	r0, [pc, #8]	; (1f6f0 <LINKLAYER_IsPresent+0xc>)
   1f6e6:	b508      	push	{r3, lr}
   1f6e8:	4478      	add	r0, pc
   1f6ea:	f002 fd08 	bl	220fe <OSL_Dll_IsPresent>
   1f6ee:	bd08      	pop	{r3, pc}
   1f6f0:	00006c64 	.word	0x00006c64

0001f6f4 <TlvTree_AddChild_Init>:
   1f6f4:	b40f      	push	{r0, r1, r2, r3}
   1f6f6:	4805      	ldr	r0, [pc, #20]	; (1f70c <TlvTree_AddChild+0xe>)
   1f6f8:	4905      	ldr	r1, [pc, #20]	; (1f710 <TlvTree_AddChild+0x12>)
   1f6fa:	4a06      	ldr	r2, [pc, #24]	; (1f714 <TlvTree_AddChild+0x16>)
   1f6fc:	4710      	bx	r2

0001f6fe <TlvTree_AddChild>:
   1f6fe:	b401      	push	{r0}
   1f700:	4803      	ldr	r0, [pc, #12]	; (1f710 <TlvTree_AddChild+0x12>)
   1f702:	6800      	ldr	r0, [r0, #0]
   1f704:	4684      	mov	ip, r0
   1f706:	bc01      	pop	{r0}
   1f708:	4760      	bx	ip
   1f70a:	0000      	.short	0x0000
   1f70c:	00002711 	.word	0x00002711
   1f710:	0002f870 	.word	0x0002f870
   1f714:	0001f7a9 	.word	0x0001f7a9

0001f718 <TlvTree_AddChildInteger_Init>:
   1f718:	b40f      	push	{r0, r1, r2, r3}
   1f71a:	4805      	ldr	r0, [pc, #20]	; (1f730 <TlvTree_AddChildInteger+0xe>)
   1f71c:	4905      	ldr	r1, [pc, #20]	; (1f734 <TlvTree_AddChildInteger+0x12>)
   1f71e:	4a06      	ldr	r2, [pc, #24]	; (1f738 <TlvTree_AddChildInteger+0x16>)
   1f720:	4710      	bx	r2

0001f722 <TlvTree_AddChildInteger>:
   1f722:	b401      	push	{r0}
   1f724:	4803      	ldr	r0, [pc, #12]	; (1f734 <TlvTree_AddChildInteger+0x12>)
   1f726:	6800      	ldr	r0, [r0, #0]
   1f728:	4684      	mov	ip, r0
   1f72a:	bc01      	pop	{r0}
   1f72c:	4760      	bx	ip
   1f72e:	0000      	.short	0x0000
   1f730:	00002712 	.word	0x00002712
   1f734:	0002f880 	.word	0x0002f880
   1f738:	0001f7a9 	.word	0x0001f7a9

0001f73c <TlvTree_AddChildString_Init>:
   1f73c:	b40f      	push	{r0, r1, r2, r3}
   1f73e:	4805      	ldr	r0, [pc, #20]	; (1f754 <TlvTree_AddChildString+0xe>)
   1f740:	4905      	ldr	r1, [pc, #20]	; (1f758 <TlvTree_AddChildString+0x12>)
   1f742:	4a06      	ldr	r2, [pc, #24]	; (1f75c <TlvTree_AddChildString+0x16>)
   1f744:	4710      	bx	r2

0001f746 <TlvTree_AddChildString>:
   1f746:	b401      	push	{r0}
   1f748:	4803      	ldr	r0, [pc, #12]	; (1f758 <TlvTree_AddChildString+0x12>)
   1f74a:	6800      	ldr	r0, [r0, #0]
   1f74c:	4684      	mov	ip, r0
   1f74e:	bc01      	pop	{r0}
   1f750:	4760      	bx	ip
   1f752:	0000      	.short	0x0000
   1f754:	00002713 	.word	0x00002713
   1f758:	0002f890 	.word	0x0002f890
   1f75c:	0001f7a9 	.word	0x0001f7a9

0001f760 <TlvTree_New_Init>:
   1f760:	b40f      	push	{r0, r1, r2, r3}
   1f762:	4805      	ldr	r0, [pc, #20]	; (1f778 <TlvTree_New+0xe>)
   1f764:	4905      	ldr	r1, [pc, #20]	; (1f77c <TlvTree_New+0x12>)
   1f766:	4a06      	ldr	r2, [pc, #24]	; (1f780 <TlvTree_New+0x16>)
   1f768:	4710      	bx	r2

0001f76a <TlvTree_New>:
   1f76a:	b401      	push	{r0}
   1f76c:	4803      	ldr	r0, [pc, #12]	; (1f77c <TlvTree_New+0x12>)
   1f76e:	6800      	ldr	r0, [r0, #0]
   1f770:	4684      	mov	ip, r0
   1f772:	bc01      	pop	{r0}
   1f774:	4760      	bx	ip
   1f776:	0000      	.short	0x0000
   1f778:	00002710 	.word	0x00002710
   1f77c:	0002f8a0 	.word	0x0002f8a0
   1f780:	0001f7a9 	.word	0x0001f7a9

0001f784 <TlvTree_Release_Init>:
   1f784:	b40f      	push	{r0, r1, r2, r3}
   1f786:	4805      	ldr	r0, [pc, #20]	; (1f79c <TlvTree_Release+0xe>)
   1f788:	4905      	ldr	r1, [pc, #20]	; (1f7a0 <TlvTree_Release+0x12>)
   1f78a:	4a06      	ldr	r2, [pc, #24]	; (1f7a4 <TlvTree_Release+0x16>)
   1f78c:	4710      	bx	r2

0001f78e <TlvTree_Release>:
   1f78e:	b401      	push	{r0}
   1f790:	4803      	ldr	r0, [pc, #12]	; (1f7a0 <TlvTree_Release+0x12>)
   1f792:	6800      	ldr	r0, [r0, #0]
   1f794:	4684      	mov	ip, r0
   1f796:	bc01      	pop	{r0}
   1f798:	4760      	bx	ip
   1f79a:	0000      	.short	0x0000
   1f79c:	00002715 	.word	0x00002715
   1f7a0:	0002f8b0 	.word	0x0002f8b0
   1f7a4:	0001f7a9 	.word	0x0001f7a9

0001f7a8 <TLV_TREE_DLL_InitFuncAndBranch>:
   1f7a8:	b500      	push	{lr}
   1f7aa:	f000 f835 	bl	1f818 <TLV_TREE_DLL_GetProcAddress>
   1f7ae:	bc04      	pop	{r2}
   1f7b0:	4696      	mov	lr, r2
   1f7b2:	4684      	mov	ip, r0
   1f7b4:	bc0f      	pop	{r0, r1, r2, r3}
   1f7b6:	4760      	bx	ip

0001f7b8 <TLV_TREE_DLL_GetProcAddressWithoutExit>:
   1f7b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f7ba:	4c13      	ldr	r4, [pc, #76]	; (1f808 <TLV_TREE_DLL_GetProcAddressWithoutExit+0x50>)
   1f7bc:	4607      	mov	r7, r0
   1f7be:	447c      	add	r4, pc
   1f7c0:	460d      	mov	r5, r1
   1f7c2:	6823      	ldr	r3, [r4, #0]
   1f7c4:	b923      	cbnz	r3, 1f7d0 <TLV_TREE_DLL_GetProcAddressWithoutExit+0x18>
   1f7c6:	4811      	ldr	r0, [pc, #68]	; (1f80c <TLV_TREE_DLL_GetProcAddressWithoutExit+0x54>)
   1f7c8:	4478      	add	r0, pc
   1f7ca:	f002 fca8 	bl	2211e <OSL_Dll_Open>
   1f7ce:	6020      	str	r0, [r4, #0]
   1f7d0:	4e0f      	ldr	r6, [pc, #60]	; (1f810 <TLV_TREE_DLL_GetProcAddressWithoutExit+0x58>)
   1f7d2:	447e      	add	r6, pc
   1f7d4:	6834      	ldr	r4, [r6, #0]
   1f7d6:	b95c      	cbnz	r4, 1f7f0 <TLV_TREE_DLL_GetProcAddressWithoutExit+0x38>
   1f7d8:	4b0e      	ldr	r3, [pc, #56]	; (1f814 <TLV_TREE_DLL_GetProcAddressWithoutExit+0x5c>)
   1f7da:	2003      	movs	r0, #3
   1f7dc:	447b      	add	r3, pc
   1f7de:	9400      	str	r4, [sp, #0]
   1f7e0:	9301      	str	r3, [sp, #4]
   1f7e2:	4621      	mov	r1, r4
   1f7e4:	4622      	mov	r2, r4
   1f7e6:	4623      	mov	r3, r4
   1f7e8:	f7e9 ea2c 	blx	8c44 <_init+0xe4>
   1f7ec:	4620      	mov	r0, r4
   1f7ee:	e005      	b.n	1f7fc <TLV_TREE_DLL_GetProcAddressWithoutExit+0x44>
   1f7f0:	4620      	mov	r0, r4
   1f7f2:	4639      	mov	r1, r7
   1f7f4:	f002 fc73 	bl	220de <OSL_Dll_GetSymbolByName>
   1f7f8:	2301      	movs	r3, #1
   1f7fa:	6073      	str	r3, [r6, #4]
   1f7fc:	b115      	cbz	r5, 1f804 <TLV_TREE_DLL_GetProcAddressWithoutExit+0x4c>
   1f7fe:	682b      	ldr	r3, [r5, #0]
   1f800:	b103      	cbz	r3, 1f804 <TLV_TREE_DLL_GetProcAddressWithoutExit+0x4c>
   1f802:	6028      	str	r0, [r5, #0]
   1f804:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1f806:	bf00      	nop
   1f808:	00010842 	.word	0x00010842
   1f80c:	00006bca 	.word	0x00006bca
   1f810:	0001082e 	.word	0x0001082e
   1f814:	00006bc4 	.word	0x00006bc4

0001f818 <TLV_TREE_DLL_GetProcAddress>:
   1f818:	b513      	push	{r0, r1, r4, lr}
   1f81a:	f7ff ffcd 	bl	1f7b8 <TLV_TREE_DLL_GetProcAddressWithoutExit>
   1f81e:	4604      	mov	r4, r0
   1f820:	b948      	cbnz	r0, 1f836 <TLV_TREE_DLL_GetProcAddress+0x1e>
   1f822:	4b06      	ldr	r3, [pc, #24]	; (1f83c <TLV_TREE_DLL_GetProcAddress+0x24>)
   1f824:	9000      	str	r0, [sp, #0]
   1f826:	447b      	add	r3, pc
   1f828:	2003      	movs	r0, #3
   1f82a:	9301      	str	r3, [sp, #4]
   1f82c:	4621      	mov	r1, r4
   1f82e:	4622      	mov	r2, r4
   1f830:	4623      	mov	r3, r4
   1f832:	f7e9 ea08 	blx	8c44 <_init+0xe4>
   1f836:	4620      	mov	r0, r4
   1f838:	bd1c      	pop	{r2, r3, r4, pc}
   1f83a:	bf00      	nop
   1f83c:	00006b97 	.word	0x00006b97

0001f840 <TLV_TREE_DLL_IsPresent>:
   1f840:	4802      	ldr	r0, [pc, #8]	; (1f84c <TLV_TREE_DLL_IsPresent+0xc>)
   1f842:	b508      	push	{r3, lr}
   1f844:	4478      	add	r0, pc
   1f846:	f002 fc5a 	bl	220fe <OSL_Dll_IsPresent>
   1f84a:	bd08      	pop	{r3, pc}
   1f84c:	00006b4e 	.word	0x00006b4e

0001f850 <function_name>:
   1f850:	454c4c44 	.word	0x454c4c44
   1f854:	74736978 	.word	0x74736978
   1f858:	00          	.byte	0x00
   1f859:	00          	.byte	0x00
   1f85a:	bf00      	nop

0001f85c <DLLExist>:
   1f85c:	b408      	push	{r3}
   1f85e:	4b11      	ldr	r3, [pc, #68]	; (1f8a4 <.direct_call+0x8>)
   1f860:	681b      	ldr	r3, [r3, #0]
   1f862:	2b00      	cmp	r3, #0
   1f864:	d11a      	bne.n	1f89c <.direct_call>
   1f866:	b507      	push	{r0, r1, r2, lr}
   1f868:	f000 f890 	bl	1f98c <extenslib_open>
   1f86c:	2800      	cmp	r0, #0
   1f86e:	d00b      	beq.n	1f888 <.bad_return>
   1f870:	4684      	mov	ip, r0
   1f872:	480d      	ldr	r0, [pc, #52]	; (1f8a8 <.direct_call+0xc>)
   1f874:	f000 f811 	bl	1f89a <.call_function>
   1f878:	2800      	cmp	r0, #0
   1f87a:	d002      	beq.n	1f882 <.exit_return>
   1f87c:	4909      	ldr	r1, [pc, #36]	; (1f8a4 <.direct_call+0x8>)
   1f87e:	6008      	str	r0, [r1, #0]
   1f880:	e007      	b.n	1f892 <.already_initialized>

0001f882 <.exit_return>:
   1f882:	480a      	ldr	r0, [pc, #40]	; (1f8ac <.direct_call+0x10>)
   1f884:	f001 fc08 	bl	21098 <Telium_Exit>

0001f888 <.bad_return>:
   1f888:	bc0f      	pop	{r0, r1, r2, r3}
   1f88a:	2000      	movs	r0, #0
   1f88c:	469e      	mov	lr, r3
   1f88e:	bc08      	pop	{r3}
   1f890:	4770      	bx	lr

0001f892 <.already_initialized>:
   1f892:	4684      	mov	ip, r0
   1f894:	bc0f      	pop	{r0, r1, r2, r3}
   1f896:	469e      	mov	lr, r3
   1f898:	bc08      	pop	{r3}

0001f89a <.call_function>:
   1f89a:	4760      	bx	ip

0001f89c <.direct_call>:
   1f89c:	469c      	mov	ip, r3
   1f89e:	bc08      	pop	{r3}
   1f8a0:	4760      	bx	ip
   1f8a2:	0000      	.short	0x0000
   1f8a4:	0002f8c0 	.word	0x0002f8c0
   1f8a8:	0001f850 	.word	0x0001f850
   1f8ac:	00000a66 	.word	0x00000a66

0001f8b0 <function_name>:
   1f8b0:	6f745f64 	.word	0x6f745f64
   1f8b4:	676e6f6c 	.word	0x676e6f6c
   1f8b8:	00          	.byte	0x00
   1f8b9:	00          	.byte	0x00
   1f8ba:	bf00      	nop

0001f8bc <d_tolong>:
   1f8bc:	b408      	push	{r3}
   1f8be:	4b11      	ldr	r3, [pc, #68]	; (1f904 <.direct_call+0x8>)
   1f8c0:	681b      	ldr	r3, [r3, #0]
   1f8c2:	2b00      	cmp	r3, #0
   1f8c4:	d11a      	bne.n	1f8fc <.direct_call>
   1f8c6:	b507      	push	{r0, r1, r2, lr}
   1f8c8:	f000 f860 	bl	1f98c <extenslib_open>
   1f8cc:	2800      	cmp	r0, #0
   1f8ce:	d00b      	beq.n	1f8e8 <.bad_return>
   1f8d0:	4684      	mov	ip, r0
   1f8d2:	480d      	ldr	r0, [pc, #52]	; (1f908 <.direct_call+0xc>)
   1f8d4:	f000 f811 	bl	1f8fa <.call_function>
   1f8d8:	2800      	cmp	r0, #0
   1f8da:	d002      	beq.n	1f8e2 <.exit_return>
   1f8dc:	4909      	ldr	r1, [pc, #36]	; (1f904 <.direct_call+0x8>)
   1f8de:	6008      	str	r0, [r1, #0]
   1f8e0:	e007      	b.n	1f8f2 <.already_initialized>

0001f8e2 <.exit_return>:
   1f8e2:	480a      	ldr	r0, [pc, #40]	; (1f90c <.direct_call+0x10>)
   1f8e4:	f001 fbd8 	bl	21098 <Telium_Exit>

0001f8e8 <.bad_return>:
   1f8e8:	bc0f      	pop	{r0, r1, r2, r3}
   1f8ea:	2000      	movs	r0, #0
   1f8ec:	469e      	mov	lr, r3
   1f8ee:	bc08      	pop	{r3}
   1f8f0:	4770      	bx	lr

0001f8f2 <.already_initialized>:
   1f8f2:	4684      	mov	ip, r0
   1f8f4:	bc0f      	pop	{r0, r1, r2, r3}
   1f8f6:	469e      	mov	lr, r3
   1f8f8:	bc08      	pop	{r3}

0001f8fa <.call_function>:
   1f8fa:	4760      	bx	ip

0001f8fc <.direct_call>:
   1f8fc:	469c      	mov	ip, r3
   1f8fe:	bc08      	pop	{r3}
   1f900:	4760      	bx	ip
   1f902:	0000      	.short	0x0000
   1f904:	0002f8c4 	.word	0x0002f8c4
   1f908:	0001f8b0 	.word	0x0001f8b0
   1f90c:	00000a34 	.word	0x00000a34

0001f910 <function_name>:
   1f910:	63647473 	.word	0x63647473
   1f914:	00306d61 	.word	0x00306d61

0001f918 <stdcam0>:
   1f918:	b408      	push	{r3}
   1f91a:	4b11      	ldr	r3, [pc, #68]	; (1f960 <.direct_call+0x8>)
   1f91c:	681b      	ldr	r3, [r3, #0]
   1f91e:	2b00      	cmp	r3, #0
   1f920:	d11a      	bne.n	1f958 <.direct_call>
   1f922:	b507      	push	{r0, r1, r2, lr}
   1f924:	f000 f832 	bl	1f98c <extenslib_open>
   1f928:	2800      	cmp	r0, #0
   1f92a:	d00b      	beq.n	1f944 <.bad_return>
   1f92c:	4684      	mov	ip, r0
   1f92e:	480d      	ldr	r0, [pc, #52]	; (1f964 <.direct_call+0xc>)
   1f930:	f000 f811 	bl	1f956 <.call_function>
   1f934:	2800      	cmp	r0, #0
   1f936:	d002      	beq.n	1f93e <.exit_return>
   1f938:	4909      	ldr	r1, [pc, #36]	; (1f960 <.direct_call+0x8>)
   1f93a:	6008      	str	r0, [r1, #0]
   1f93c:	e007      	b.n	1f94e <.already_initialized>

0001f93e <.exit_return>:
   1f93e:	480a      	ldr	r0, [pc, #40]	; (1f968 <.direct_call+0x10>)
   1f940:	f001 fbaa 	bl	21098 <Telium_Exit>

0001f944 <.bad_return>:
   1f944:	bc0f      	pop	{r0, r1, r2, r3}
   1f946:	2000      	movs	r0, #0
   1f948:	469e      	mov	lr, r3
   1f94a:	bc08      	pop	{r3}
   1f94c:	4770      	bx	lr

0001f94e <.already_initialized>:
   1f94e:	4684      	mov	ip, r0
   1f950:	bc0f      	pop	{r0, r1, r2, r3}
   1f952:	469e      	mov	lr, r3
   1f954:	bc08      	pop	{r3}

0001f956 <.call_function>:
   1f956:	4760      	bx	ip

0001f958 <.direct_call>:
   1f958:	469c      	mov	ip, r3
   1f95a:	bc08      	pop	{r3}
   1f95c:	4760      	bx	ip
   1f95e:	0000      	.short	0x0000
   1f960:	0002f8c8 	.word	0x0002f8c8
   1f964:	0001f910 	.word	0x0001f910
   1f968:	00000a38 	.word	0x00000a38

0001f96c <GetProcAddressExtens>:
   1f96c:	4b05      	ldr	r3, [pc, #20]	; (1f984 <GetProcAddressExtens+0x18>)
   1f96e:	4a06      	ldr	r2, [pc, #24]	; (1f988 <GetProcAddressExtens+0x1c>)
   1f970:	447b      	add	r3, pc
   1f972:	4601      	mov	r1, r0
   1f974:	589b      	ldr	r3, [r3, r2]
   1f976:	6818      	ldr	r0, [r3, #0]
   1f978:	b110      	cbz	r0, 1f980 <GetProcAddressExtens+0x14>
   1f97a:	b109      	cbz	r1, 1f980 <GetProcAddressExtens+0x14>
   1f97c:	f002 bbaf 	b.w	220de <OSL_Dll_GetSymbolByName>
   1f980:	2000      	movs	r0, #0
   1f982:	4770      	bx	lr
   1f984:	0000f7a4 	.word	0x0000f7a4
   1f988:	000000e0 	.word	0x000000e0

0001f98c <extenslib_open>:
   1f98c:	b538      	push	{r3, r4, r5, lr}
   1f98e:	4c0b      	ldr	r4, [pc, #44]	; (1f9bc <extenslib_open+0x30>)
   1f990:	4b0b      	ldr	r3, [pc, #44]	; (1f9c0 <extenslib_open+0x34>)
   1f992:	447c      	add	r4, pc
   1f994:	58e5      	ldr	r5, [r4, r3]
   1f996:	682b      	ldr	r3, [r5, #0]
   1f998:	b96b      	cbnz	r3, 1f9b6 <extenslib_open+0x2a>
   1f99a:	2001      	movs	r0, #1
   1f99c:	f002 fbcf 	bl	2213e <OSL_Dll_OpenByAppliType>
   1f9a0:	4b08      	ldr	r3, [pc, #32]	; (1f9c4 <extenslib_open+0x38>)
   1f9a2:	58e3      	ldr	r3, [r4, r3]
   1f9a4:	6018      	str	r0, [r3, #0]
   1f9a6:	b130      	cbz	r0, 1f9b6 <extenslib_open+0x2a>
   1f9a8:	4b07      	ldr	r3, [pc, #28]	; (1f9c8 <extenslib_open+0x3c>)
   1f9aa:	4808      	ldr	r0, [pc, #32]	; (1f9cc <extenslib_open+0x40>)
   1f9ac:	58e3      	ldr	r3, [r4, r3]
   1f9ae:	4478      	add	r0, pc
   1f9b0:	602b      	str	r3, [r5, #0]
   1f9b2:	f7ff ffdb 	bl	1f96c <GetProcAddressExtens>
   1f9b6:	6828      	ldr	r0, [r5, #0]
   1f9b8:	bd38      	pop	{r3, r4, r5, pc}
   1f9ba:	bf00      	nop
   1f9bc:	0000f782 	.word	0x0000f782
   1f9c0:	000000d4 	.word	0x000000d4
   1f9c4:	000000e0 	.word	0x000000e0
   1f9c8:	000000b4 	.word	0x000000b4
   1f9cc:	00006a36 	.word	0x00006a36

0001f9d0 <extenslib_close>:
   1f9d0:	4b03      	ldr	r3, [pc, #12]	; (1f9e0 <extenslib_close+0x10>)
   1f9d2:	4a04      	ldr	r2, [pc, #16]	; (1f9e4 <extenslib_close+0x14>)
   1f9d4:	447b      	add	r3, pc
   1f9d6:	589b      	ldr	r3, [r3, r2]
   1f9d8:	6818      	ldr	r0, [r3, #0]
   1f9da:	f002 bb70 	b.w	220be <OSL_Dll_Close>
   1f9de:	bf00      	nop
   1f9e0:	0000f740 	.word	0x0000f740
   1f9e4:	000000e0 	.word	0x000000e0

0001f9e8 <function_name>:
   1f9e8:	696c6554 	.word	0x696c6554
   1f9ec:	465f6d75 	.word	0x465f6d75
   1f9f0:	736f6c63 	.word	0x736f6c63
   1f9f4:	0065      	.short	0x0065
   1f9f6:	bf00      	nop

0001f9f8 <Telium_Fclose>:
   1f9f8:	b408      	push	{r3}
   1f9fa:	4b11      	ldr	r3, [pc, #68]	; (1fa40 <.direct_call+0x8>)
   1f9fc:	681b      	ldr	r3, [r3, #0]
   1f9fe:	2b00      	cmp	r3, #0
   1fa00:	d11a      	bne.n	1fa38 <.direct_call>
   1fa02:	b507      	push	{r0, r1, r2, lr}
   1fa04:	f7ff ffc2 	bl	1f98c <extenslib_open>
   1fa08:	2800      	cmp	r0, #0
   1fa0a:	d00b      	beq.n	1fa24 <.bad_return>
   1fa0c:	4684      	mov	ip, r0
   1fa0e:	480d      	ldr	r0, [pc, #52]	; (1fa44 <.direct_call+0xc>)
   1fa10:	f000 f811 	bl	1fa36 <.call_function>
   1fa14:	2800      	cmp	r0, #0
   1fa16:	d002      	beq.n	1fa1e <.exit_return>
   1fa18:	4909      	ldr	r1, [pc, #36]	; (1fa40 <.direct_call+0x8>)
   1fa1a:	6008      	str	r0, [r1, #0]
   1fa1c:	e007      	b.n	1fa2e <.already_initialized>

0001fa1e <.exit_return>:
   1fa1e:	480a      	ldr	r0, [pc, #40]	; (1fa48 <.direct_call+0x10>)
   1fa20:	f001 fb3a 	bl	21098 <Telium_Exit>

0001fa24 <.bad_return>:
   1fa24:	bc0f      	pop	{r0, r1, r2, r3}
   1fa26:	2000      	movs	r0, #0
   1fa28:	469e      	mov	lr, r3
   1fa2a:	bc08      	pop	{r3}
   1fa2c:	4770      	bx	lr

0001fa2e <.already_initialized>:
   1fa2e:	4684      	mov	ip, r0
   1fa30:	bc0f      	pop	{r0, r1, r2, r3}
   1fa32:	469e      	mov	lr, r3
   1fa34:	bc08      	pop	{r3}

0001fa36 <.call_function>:
   1fa36:	4760      	bx	ip

0001fa38 <.direct_call>:
   1fa38:	469c      	mov	ip, r3
   1fa3a:	bc08      	pop	{r3}
   1fa3c:	4760      	bx	ip
   1fa3e:	0000      	.short	0x0000
   1fa40:	0002f8cc 	.word	0x0002f8cc
   1fa44:	0001f9e8 	.word	0x0001f9e8
   1fa48:	00000b2e 	.word	0x00000b2e

0001fa4c <function_name>:
   1fa4c:	696c6554 	.word	0x696c6554
   1fa50:	465f6d75 	.word	0x465f6d75
   1fa54:	6e65706f 	.word	0x6e65706f
   1fa58:	00          	.byte	0x00
   1fa59:	00          	.byte	0x00
   1fa5a:	bf00      	nop

0001fa5c <Telium_Fopen>:
   1fa5c:	b408      	push	{r3}
   1fa5e:	4b11      	ldr	r3, [pc, #68]	; (1faa4 <.direct_call+0x8>)
   1fa60:	681b      	ldr	r3, [r3, #0]
   1fa62:	2b00      	cmp	r3, #0
   1fa64:	d11a      	bne.n	1fa9c <.direct_call>
   1fa66:	b507      	push	{r0, r1, r2, lr}
   1fa68:	f7ff ff90 	bl	1f98c <extenslib_open>
   1fa6c:	2800      	cmp	r0, #0
   1fa6e:	d00b      	beq.n	1fa88 <.bad_return>
   1fa70:	4684      	mov	ip, r0
   1fa72:	480d      	ldr	r0, [pc, #52]	; (1faa8 <.direct_call+0xc>)
   1fa74:	f000 f811 	bl	1fa9a <.call_function>
   1fa78:	2800      	cmp	r0, #0
   1fa7a:	d002      	beq.n	1fa82 <.exit_return>
   1fa7c:	4909      	ldr	r1, [pc, #36]	; (1faa4 <.direct_call+0x8>)
   1fa7e:	6008      	str	r0, [r1, #0]
   1fa80:	e007      	b.n	1fa92 <.already_initialized>

0001fa82 <.exit_return>:
   1fa82:	480a      	ldr	r0, [pc, #40]	; (1faac <.direct_call+0x10>)
   1fa84:	f001 fb08 	bl	21098 <Telium_Exit>

0001fa88 <.bad_return>:
   1fa88:	bc0f      	pop	{r0, r1, r2, r3}
   1fa8a:	2000      	movs	r0, #0
   1fa8c:	469e      	mov	lr, r3
   1fa8e:	bc08      	pop	{r3}
   1fa90:	4770      	bx	lr

0001fa92 <.already_initialized>:
   1fa92:	4684      	mov	ip, r0
   1fa94:	bc0f      	pop	{r0, r1, r2, r3}
   1fa96:	469e      	mov	lr, r3
   1fa98:	bc08      	pop	{r3}

0001fa9a <.call_function>:
   1fa9a:	4760      	bx	ip

0001fa9c <.direct_call>:
   1fa9c:	469c      	mov	ip, r3
   1fa9e:	bc08      	pop	{r3}
   1faa0:	4760      	bx	ip
   1faa2:	0000      	.short	0x0000
   1faa4:	0002f8d0 	.word	0x0002f8d0
   1faa8:	0001fa4c 	.word	0x0001fa4c
   1faac:	00000b2d 	.word	0x00000b2d

0001fab0 <function_name>:
   1fab0:	696c6554 	.word	0x696c6554
   1fab4:	475f6d75 	.word	0x475f6d75
   1fab8:	00637465 	.word	0x00637465

0001fabc <Telium_Getc>:
   1fabc:	b408      	push	{r3}
   1fabe:	4b11      	ldr	r3, [pc, #68]	; (1fb04 <.direct_call+0x8>)
   1fac0:	681b      	ldr	r3, [r3, #0]
   1fac2:	2b00      	cmp	r3, #0
   1fac4:	d11a      	bne.n	1fafc <.direct_call>
   1fac6:	b507      	push	{r0, r1, r2, lr}
   1fac8:	f7ff ff60 	bl	1f98c <extenslib_open>
   1facc:	2800      	cmp	r0, #0
   1face:	d00b      	beq.n	1fae8 <.bad_return>
   1fad0:	4684      	mov	ip, r0
   1fad2:	480d      	ldr	r0, [pc, #52]	; (1fb08 <.direct_call+0xc>)
   1fad4:	f000 f811 	bl	1fafa <.call_function>
   1fad8:	2800      	cmp	r0, #0
   1fada:	d002      	beq.n	1fae2 <.exit_return>
   1fadc:	4909      	ldr	r1, [pc, #36]	; (1fb04 <.direct_call+0x8>)
   1fade:	6008      	str	r0, [r1, #0]
   1fae0:	e007      	b.n	1faf2 <.already_initialized>

0001fae2 <.exit_return>:
   1fae2:	480a      	ldr	r0, [pc, #40]	; (1fb0c <.direct_call+0x10>)
   1fae4:	f001 fad8 	bl	21098 <Telium_Exit>

0001fae8 <.bad_return>:
   1fae8:	bc0f      	pop	{r0, r1, r2, r3}
   1faea:	2000      	movs	r0, #0
   1faec:	469e      	mov	lr, r3
   1faee:	bc08      	pop	{r3}
   1faf0:	4770      	bx	lr

0001faf2 <.already_initialized>:
   1faf2:	4684      	mov	ip, r0
   1faf4:	bc0f      	pop	{r0, r1, r2, r3}
   1faf6:	469e      	mov	lr, r3
   1faf8:	bc08      	pop	{r3}

0001fafa <.call_function>:
   1fafa:	4760      	bx	ip

0001fafc <.direct_call>:
   1fafc:	469c      	mov	ip, r3
   1fafe:	bc08      	pop	{r3}
   1fb00:	4760      	bx	ip
   1fb02:	0000      	.short	0x0000
   1fb04:	0002f8d4 	.word	0x0002f8d4
   1fb08:	0001fab0 	.word	0x0001fab0
   1fb0c:	00000b2b 	.word	0x00000b2b

0001fb10 <function_name>:
   1fb10:	696c6554 	.word	0x696c6554
   1fb14:	495f6d75 	.word	0x495f6d75
   1fb18:	73695f73 	.word	0x73695f73
   1fb1c:	316f      	.short	0x316f
	...

0001fb20 <Telium_Is_iso1>:
   1fb20:	b408      	push	{r3}
   1fb22:	4b11      	ldr	r3, [pc, #68]	; (1fb68 <.direct_call+0x8>)
   1fb24:	681b      	ldr	r3, [r3, #0]
   1fb26:	2b00      	cmp	r3, #0
   1fb28:	d11a      	bne.n	1fb60 <.direct_call>
   1fb2a:	b507      	push	{r0, r1, r2, lr}
   1fb2c:	f7ff ff2e 	bl	1f98c <extenslib_open>
   1fb30:	2800      	cmp	r0, #0
   1fb32:	d00b      	beq.n	1fb4c <.bad_return>
   1fb34:	4684      	mov	ip, r0
   1fb36:	480d      	ldr	r0, [pc, #52]	; (1fb6c <.direct_call+0xc>)
   1fb38:	f000 f811 	bl	1fb5e <.call_function>
   1fb3c:	2800      	cmp	r0, #0
   1fb3e:	d002      	beq.n	1fb46 <.exit_return>
   1fb40:	4909      	ldr	r1, [pc, #36]	; (1fb68 <.direct_call+0x8>)
   1fb42:	6008      	str	r0, [r1, #0]
   1fb44:	e007      	b.n	1fb56 <.already_initialized>

0001fb46 <.exit_return>:
   1fb46:	480a      	ldr	r0, [pc, #40]	; (1fb70 <.direct_call+0x10>)
   1fb48:	f001 faa6 	bl	21098 <Telium_Exit>

0001fb4c <.bad_return>:
   1fb4c:	bc0f      	pop	{r0, r1, r2, r3}
   1fb4e:	2000      	movs	r0, #0
   1fb50:	469e      	mov	lr, r3
   1fb52:	bc08      	pop	{r3}
   1fb54:	4770      	bx	lr

0001fb56 <.already_initialized>:
   1fb56:	4684      	mov	ip, r0
   1fb58:	bc0f      	pop	{r0, r1, r2, r3}
   1fb5a:	469e      	mov	lr, r3
   1fb5c:	bc08      	pop	{r3}

0001fb5e <.call_function>:
   1fb5e:	4760      	bx	ip

0001fb60 <.direct_call>:
   1fb60:	469c      	mov	ip, r3
   1fb62:	bc08      	pop	{r3}
   1fb64:	4760      	bx	ip
   1fb66:	0000      	.short	0x0000
   1fb68:	0002f8d8 	.word	0x0002f8d8
   1fb6c:	0001fb10 	.word	0x0001fb10
   1fb70:	00000b51 	.word	0x00000b51

0001fb74 <function_name>:
   1fb74:	696c6554 	.word	0x696c6554
   1fb78:	495f6d75 	.word	0x495f6d75
   1fb7c:	73695f73 	.word	0x73695f73
   1fb80:	326f      	.short	0x326f
	...

0001fb84 <Telium_Is_iso2>:
   1fb84:	b408      	push	{r3}
   1fb86:	4b11      	ldr	r3, [pc, #68]	; (1fbcc <.direct_call+0x8>)
   1fb88:	681b      	ldr	r3, [r3, #0]
   1fb8a:	2b00      	cmp	r3, #0
   1fb8c:	d11a      	bne.n	1fbc4 <.direct_call>
   1fb8e:	b507      	push	{r0, r1, r2, lr}
   1fb90:	f7ff fefc 	bl	1f98c <extenslib_open>
   1fb94:	2800      	cmp	r0, #0
   1fb96:	d00b      	beq.n	1fbb0 <.bad_return>
   1fb98:	4684      	mov	ip, r0
   1fb9a:	480d      	ldr	r0, [pc, #52]	; (1fbd0 <.direct_call+0xc>)
   1fb9c:	f000 f811 	bl	1fbc2 <.call_function>
   1fba0:	2800      	cmp	r0, #0
   1fba2:	d002      	beq.n	1fbaa <.exit_return>
   1fba4:	4909      	ldr	r1, [pc, #36]	; (1fbcc <.direct_call+0x8>)
   1fba6:	6008      	str	r0, [r1, #0]
   1fba8:	e007      	b.n	1fbba <.already_initialized>

0001fbaa <.exit_return>:
   1fbaa:	480a      	ldr	r0, [pc, #40]	; (1fbd4 <.direct_call+0x10>)
   1fbac:	f001 fa74 	bl	21098 <Telium_Exit>

0001fbb0 <.bad_return>:
   1fbb0:	bc0f      	pop	{r0, r1, r2, r3}
   1fbb2:	2000      	movs	r0, #0
   1fbb4:	469e      	mov	lr, r3
   1fbb6:	bc08      	pop	{r3}
   1fbb8:	4770      	bx	lr

0001fbba <.already_initialized>:
   1fbba:	4684      	mov	ip, r0
   1fbbc:	bc0f      	pop	{r0, r1, r2, r3}
   1fbbe:	469e      	mov	lr, r3
   1fbc0:	bc08      	pop	{r3}

0001fbc2 <.call_function>:
   1fbc2:	4760      	bx	ip

0001fbc4 <.direct_call>:
   1fbc4:	469c      	mov	ip, r3
   1fbc6:	bc08      	pop	{r3}
   1fbc8:	4760      	bx	ip
   1fbca:	0000      	.short	0x0000
   1fbcc:	0002f8dc 	.word	0x0002f8dc
   1fbd0:	0001fb74 	.word	0x0001fb74
   1fbd4:	00000b52 	.word	0x00000b52

0001fbd8 <function_name>:
   1fbd8:	696c6554 	.word	0x696c6554
   1fbdc:	495f6d75 	.word	0x495f6d75
   1fbe0:	73695f73 	.word	0x73695f73
   1fbe4:	336f      	.short	0x336f
	...

0001fbe8 <Telium_Is_iso3>:
   1fbe8:	b408      	push	{r3}
   1fbea:	4b11      	ldr	r3, [pc, #68]	; (1fc30 <.direct_call+0x8>)
   1fbec:	681b      	ldr	r3, [r3, #0]
   1fbee:	2b00      	cmp	r3, #0
   1fbf0:	d11a      	bne.n	1fc28 <.direct_call>
   1fbf2:	b507      	push	{r0, r1, r2, lr}
   1fbf4:	f7ff feca 	bl	1f98c <extenslib_open>
   1fbf8:	2800      	cmp	r0, #0
   1fbfa:	d00b      	beq.n	1fc14 <.bad_return>
   1fbfc:	4684      	mov	ip, r0
   1fbfe:	480d      	ldr	r0, [pc, #52]	; (1fc34 <.direct_call+0xc>)
   1fc00:	f000 f811 	bl	1fc26 <.call_function>
   1fc04:	2800      	cmp	r0, #0
   1fc06:	d002      	beq.n	1fc0e <.exit_return>
   1fc08:	4909      	ldr	r1, [pc, #36]	; (1fc30 <.direct_call+0x8>)
   1fc0a:	6008      	str	r0, [r1, #0]
   1fc0c:	e007      	b.n	1fc1e <.already_initialized>

0001fc0e <.exit_return>:
   1fc0e:	480a      	ldr	r0, [pc, #40]	; (1fc38 <.direct_call+0x10>)
   1fc10:	f001 fa42 	bl	21098 <Telium_Exit>

0001fc14 <.bad_return>:
   1fc14:	bc0f      	pop	{r0, r1, r2, r3}
   1fc16:	2000      	movs	r0, #0
   1fc18:	469e      	mov	lr, r3
   1fc1a:	bc08      	pop	{r3}
   1fc1c:	4770      	bx	lr

0001fc1e <.already_initialized>:
   1fc1e:	4684      	mov	ip, r0
   1fc20:	bc0f      	pop	{r0, r1, r2, r3}
   1fc22:	469e      	mov	lr, r3
   1fc24:	bc08      	pop	{r3}

0001fc26 <.call_function>:
   1fc26:	4760      	bx	ip

0001fc28 <.direct_call>:
   1fc28:	469c      	mov	ip, r3
   1fc2a:	bc08      	pop	{r3}
   1fc2c:	4760      	bx	ip
   1fc2e:	0000      	.short	0x0000
   1fc30:	0002f8e0 	.word	0x0002f8e0
   1fc34:	0001fbd8 	.word	0x0001fbd8
   1fc38:	00000b53 	.word	0x00000b53

0001fc3c <function_name>:
   1fc3c:	696c6554 	.word	0x696c6554
   1fc40:	525f6d75 	.word	0x525f6d75
   1fc44:	74657365 	.word	0x74657365
   1fc48:	6675625f 	.word	0x6675625f
   1fc4c:	00          	.byte	0x00
   1fc4d:	00          	.byte	0x00
   1fc4e:	bf00      	nop

0001fc50 <Telium_Reset_buf>:
   1fc50:	b408      	push	{r3}
   1fc52:	4b0f      	ldr	r3, [pc, #60]	; (1fc90 <.direct_call+0x6>)
   1fc54:	681b      	ldr	r3, [r3, #0]
   1fc56:	2b00      	cmp	r3, #0
   1fc58:	d117      	bne.n	1fc8a <.direct_call>
   1fc5a:	b507      	push	{r0, r1, r2, lr}
   1fc5c:	f7ff fe96 	bl	1f98c <extenslib_open>
   1fc60:	2800      	cmp	r0, #0
   1fc62:	d008      	beq.n	1fc76 <.bad_return>
   1fc64:	4684      	mov	ip, r0
   1fc66:	480b      	ldr	r0, [pc, #44]	; (1fc94 <.direct_call+0xa>)
   1fc68:	f000 f80e 	bl	1fc88 <.call_function>
   1fc6c:	2800      	cmp	r0, #0
   1fc6e:	d002      	beq.n	1fc76 <.bad_return>
   1fc70:	4907      	ldr	r1, [pc, #28]	; (1fc90 <.direct_call+0x6>)
   1fc72:	6008      	str	r0, [r1, #0]
   1fc74:	e004      	b.n	1fc80 <.already_initialized>

0001fc76 <.bad_return>:
   1fc76:	bc0f      	pop	{r0, r1, r2, r3}
   1fc78:	4807      	ldr	r0, [pc, #28]	; (1fc98 <.direct_call+0xe>)
   1fc7a:	469e      	mov	lr, r3
   1fc7c:	bc08      	pop	{r3}
   1fc7e:	4770      	bx	lr

0001fc80 <.already_initialized>:
   1fc80:	4684      	mov	ip, r0
   1fc82:	bc0f      	pop	{r0, r1, r2, r3}
   1fc84:	469e      	mov	lr, r3
   1fc86:	bc08      	pop	{r3}

0001fc88 <.call_function>:
   1fc88:	4760      	bx	ip

0001fc8a <.direct_call>:
   1fc8a:	469c      	mov	ip, r3
   1fc8c:	bc08      	pop	{r3}
   1fc8e:	4760      	bx	ip
   1fc90:	0002f8e4 	.word	0x0002f8e4
   1fc94:	0001fc3c 	.word	0x0001fc3c
   1fc98:	ffffffff 	.word	0xffffffff

0001fc9c <function_name>:
   1fc9c:	696c6554 	.word	0x696c6554
   1fca0:	535f6d75 	.word	0x535f6d75
   1fca4:	75746174 	.word	0x75746174
   1fca8:	0073      	.short	0x0073
   1fcaa:	bf00      	nop

0001fcac <Telium_Status>:
   1fcac:	b408      	push	{r3}
   1fcae:	4b10      	ldr	r3, [pc, #64]	; (1fcf0 <.direct_call+0x6>)
   1fcb0:	681b      	ldr	r3, [r3, #0]
   1fcb2:	2b00      	cmp	r3, #0
   1fcb4:	d119      	bne.n	1fcea <.direct_call>
   1fcb6:	b507      	push	{r0, r1, r2, lr}
   1fcb8:	f7ff fe68 	bl	1f98c <extenslib_open>
   1fcbc:	2800      	cmp	r0, #0
   1fcbe:	d00b      	beq.n	1fcd8 <.bad_return>
   1fcc0:	4684      	mov	ip, r0
   1fcc2:	480c      	ldr	r0, [pc, #48]	; (1fcf4 <.direct_call+0xa>)
   1fcc4:	f000 f810 	bl	1fce8 <.call_function>
   1fcc8:	2800      	cmp	r0, #0
   1fcca:	d002      	beq.n	1fcd2 <.exit_return>
   1fccc:	4908      	ldr	r1, [pc, #32]	; (1fcf0 <.direct_call+0x6>)
   1fcce:	6008      	str	r0, [r1, #0]
   1fcd0:	e006      	b.n	1fce0 <.already_initialized>

0001fcd2 <.exit_return>:
   1fcd2:	4809      	ldr	r0, [pc, #36]	; (1fcf8 <.direct_call+0xe>)
   1fcd4:	f001 f9e0 	bl	21098 <Telium_Exit>

0001fcd8 <.bad_return>:
   1fcd8:	bc0f      	pop	{r0, r1, r2, r3}
   1fcda:	469e      	mov	lr, r3
   1fcdc:	bc08      	pop	{r3}
   1fcde:	4770      	bx	lr

0001fce0 <.already_initialized>:
   1fce0:	4684      	mov	ip, r0
   1fce2:	bc0f      	pop	{r0, r1, r2, r3}
   1fce4:	469e      	mov	lr, r3
   1fce6:	bc08      	pop	{r3}

0001fce8 <.call_function>:
   1fce8:	4760      	bx	ip

0001fcea <.direct_call>:
   1fcea:	469c      	mov	ip, r3
   1fcec:	bc08      	pop	{r3}
   1fcee:	4760      	bx	ip
   1fcf0:	0002f8e8 	.word	0x0002f8e8
   1fcf4:	0001fc9c 	.word	0x0001fc9c
   1fcf8:	00000b3c 	.word	0x00000b3c

0001fcfc <function_name>:
   1fcfc:	696c6554 	.word	0x696c6554
   1fd00:	535f6d75 	.word	0x535f6d75
   1fd04:	6e696474 	.word	0x6e696474
   1fd08:	00          	.byte	0x00
   1fd09:	00          	.byte	0x00
   1fd0a:	bf00      	nop

0001fd0c <Telium_Stdin>:
   1fd0c:	b408      	push	{r3}
   1fd0e:	4b11      	ldr	r3, [pc, #68]	; (1fd54 <.direct_call+0x8>)
   1fd10:	681b      	ldr	r3, [r3, #0]
   1fd12:	2b00      	cmp	r3, #0
   1fd14:	d11a      	bne.n	1fd4c <.direct_call>
   1fd16:	b507      	push	{r0, r1, r2, lr}
   1fd18:	f7ff fe38 	bl	1f98c <extenslib_open>
   1fd1c:	2800      	cmp	r0, #0
   1fd1e:	d00b      	beq.n	1fd38 <.bad_return>
   1fd20:	4684      	mov	ip, r0
   1fd22:	480d      	ldr	r0, [pc, #52]	; (1fd58 <.direct_call+0xc>)
   1fd24:	f000 f811 	bl	1fd4a <.call_function>
   1fd28:	2800      	cmp	r0, #0
   1fd2a:	d002      	beq.n	1fd32 <.exit_return>
   1fd2c:	4909      	ldr	r1, [pc, #36]	; (1fd54 <.direct_call+0x8>)
   1fd2e:	6008      	str	r0, [r1, #0]
   1fd30:	e007      	b.n	1fd42 <.already_initialized>

0001fd32 <.exit_return>:
   1fd32:	480a      	ldr	r0, [pc, #40]	; (1fd5c <.direct_call+0x10>)
   1fd34:	f001 f9b0 	bl	21098 <Telium_Exit>

0001fd38 <.bad_return>:
   1fd38:	bc0f      	pop	{r0, r1, r2, r3}
   1fd3a:	2000      	movs	r0, #0
   1fd3c:	469e      	mov	lr, r3
   1fd3e:	bc08      	pop	{r3}
   1fd40:	4770      	bx	lr

0001fd42 <.already_initialized>:
   1fd42:	4684      	mov	ip, r0
   1fd44:	bc0f      	pop	{r0, r1, r2, r3}
   1fd46:	469e      	mov	lr, r3
   1fd48:	bc08      	pop	{r3}

0001fd4a <.call_function>:
   1fd4a:	4760      	bx	ip

0001fd4c <.direct_call>:
   1fd4c:	469c      	mov	ip, r3
   1fd4e:	bc08      	pop	{r3}
   1fd50:	4760      	bx	ip
   1fd52:	0000      	.short	0x0000
   1fd54:	0002f8ec 	.word	0x0002f8ec
   1fd58:	0001fcfc 	.word	0x0001fcfc
   1fd5c:	00000b38 	.word	0x00000b38

0001fd60 <function_name>:
   1fd60:	696c6554 	.word	0x696c6554
   1fd64:	535f6d75 	.word	0x535f6d75
   1fd68:	756f6474 	.word	0x756f6474
   1fd6c:	0074      	.short	0x0074
   1fd6e:	bf00      	nop

0001fd70 <Telium_Stdout>:
   1fd70:	b408      	push	{r3}
   1fd72:	4b11      	ldr	r3, [pc, #68]	; (1fdb8 <.direct_call+0x8>)
   1fd74:	681b      	ldr	r3, [r3, #0]
   1fd76:	2b00      	cmp	r3, #0
   1fd78:	d11a      	bne.n	1fdb0 <.direct_call>
   1fd7a:	b507      	push	{r0, r1, r2, lr}
   1fd7c:	f7ff fe06 	bl	1f98c <extenslib_open>
   1fd80:	2800      	cmp	r0, #0
   1fd82:	d00b      	beq.n	1fd9c <.bad_return>
   1fd84:	4684      	mov	ip, r0
   1fd86:	480d      	ldr	r0, [pc, #52]	; (1fdbc <.direct_call+0xc>)
   1fd88:	f000 f811 	bl	1fdae <.call_function>
   1fd8c:	2800      	cmp	r0, #0
   1fd8e:	d002      	beq.n	1fd96 <.exit_return>
   1fd90:	4909      	ldr	r1, [pc, #36]	; (1fdb8 <.direct_call+0x8>)
   1fd92:	6008      	str	r0, [r1, #0]
   1fd94:	e007      	b.n	1fda6 <.already_initialized>

0001fd96 <.exit_return>:
   1fd96:	480a      	ldr	r0, [pc, #40]	; (1fdc0 <.direct_call+0x10>)
   1fd98:	f001 f97e 	bl	21098 <Telium_Exit>

0001fd9c <.bad_return>:
   1fd9c:	bc0f      	pop	{r0, r1, r2, r3}
   1fd9e:	2000      	movs	r0, #0
   1fda0:	469e      	mov	lr, r3
   1fda2:	bc08      	pop	{r3}
   1fda4:	4770      	bx	lr

0001fda6 <.already_initialized>:
   1fda6:	4684      	mov	ip, r0
   1fda8:	bc0f      	pop	{r0, r1, r2, r3}
   1fdaa:	469e      	mov	lr, r3
   1fdac:	bc08      	pop	{r3}

0001fdae <.call_function>:
   1fdae:	4760      	bx	ip

0001fdb0 <.direct_call>:
   1fdb0:	469c      	mov	ip, r3
   1fdb2:	bc08      	pop	{r3}
   1fdb4:	4760      	bx	ip
   1fdb6:	0000      	.short	0x0000
   1fdb8:	0002f8f0 	.word	0x0002f8f0
   1fdbc:	0001fd60 	.word	0x0001fd60
   1fdc0:	00000b37 	.word	0x00000b37

0001fdc4 <function_name>:
   1fdc4:	696c6554 	.word	0x696c6554
   1fdc8:	535f6d75 	.word	0x535f6d75
   1fdcc:	65706474 	.word	0x65706474
   1fdd0:	00666972 	.word	0x00666972

0001fdd4 <Telium_Stdperif>:
   1fdd4:	b408      	push	{r3}
   1fdd6:	4b11      	ldr	r3, [pc, #68]	; (1fe1c <.direct_call+0x8>)
   1fdd8:	681b      	ldr	r3, [r3, #0]
   1fdda:	2b00      	cmp	r3, #0
   1fddc:	d11a      	bne.n	1fe14 <.direct_call>
   1fdde:	b507      	push	{r0, r1, r2, lr}
   1fde0:	f7ff fdd4 	bl	1f98c <extenslib_open>
   1fde4:	2800      	cmp	r0, #0
   1fde6:	d00b      	beq.n	1fe00 <.bad_return>
   1fde8:	4684      	mov	ip, r0
   1fdea:	480d      	ldr	r0, [pc, #52]	; (1fe20 <.direct_call+0xc>)
   1fdec:	f000 f811 	bl	1fe12 <.call_function>
   1fdf0:	2800      	cmp	r0, #0
   1fdf2:	d002      	beq.n	1fdfa <.exit_return>
   1fdf4:	4909      	ldr	r1, [pc, #36]	; (1fe1c <.direct_call+0x8>)
   1fdf6:	6008      	str	r0, [r1, #0]
   1fdf8:	e007      	b.n	1fe0a <.already_initialized>

0001fdfa <.exit_return>:
   1fdfa:	480a      	ldr	r0, [pc, #40]	; (1fe24 <.direct_call+0x10>)
   1fdfc:	f001 f94c 	bl	21098 <Telium_Exit>

0001fe00 <.bad_return>:
   1fe00:	bc0f      	pop	{r0, r1, r2, r3}
   1fe02:	2000      	movs	r0, #0
   1fe04:	469e      	mov	lr, r3
   1fe06:	bc08      	pop	{r3}
   1fe08:	4770      	bx	lr

0001fe0a <.already_initialized>:
   1fe0a:	4684      	mov	ip, r0
   1fe0c:	bc0f      	pop	{r0, r1, r2, r3}
   1fe0e:	469e      	mov	lr, r3
   1fe10:	bc08      	pop	{r3}

0001fe12 <.call_function>:
   1fe12:	4760      	bx	ip

0001fe14 <.direct_call>:
   1fe14:	469c      	mov	ip, r3
   1fe16:	bc08      	pop	{r3}
   1fe18:	4760      	bx	ip
   1fe1a:	0000      	.short	0x0000
   1fe1c:	0002f8f4 	.word	0x0002f8f4
   1fe20:	0001fdc4 	.word	0x0001fdc4
   1fe24:	00000b36 	.word	0x00000b36

0001fe28 <function_name>:
   1fe28:	696c6554 	.word	0x696c6554
   1fe2c:	545f6d75 	.word	0x545f6d75
   1fe30:	74736574 	.word	0x74736574
   1fe34:	006c6c61 	.word	0x006c6c61

0001fe38 <Telium_Ttestall>:
   1fe38:	b408      	push	{r3}
   1fe3a:	4b11      	ldr	r3, [pc, #68]	; (1fe80 <.direct_call+0x8>)
   1fe3c:	681b      	ldr	r3, [r3, #0]
   1fe3e:	2b00      	cmp	r3, #0
   1fe40:	d11a      	bne.n	1fe78 <.direct_call>
   1fe42:	b507      	push	{r0, r1, r2, lr}
   1fe44:	f7ff fda2 	bl	1f98c <extenslib_open>
   1fe48:	2800      	cmp	r0, #0
   1fe4a:	d00b      	beq.n	1fe64 <.bad_return>
   1fe4c:	4684      	mov	ip, r0
   1fe4e:	480d      	ldr	r0, [pc, #52]	; (1fe84 <.direct_call+0xc>)
   1fe50:	f000 f811 	bl	1fe76 <.call_function>
   1fe54:	2800      	cmp	r0, #0
   1fe56:	d002      	beq.n	1fe5e <.exit_return>
   1fe58:	4909      	ldr	r1, [pc, #36]	; (1fe80 <.direct_call+0x8>)
   1fe5a:	6008      	str	r0, [r1, #0]
   1fe5c:	e007      	b.n	1fe6e <.already_initialized>

0001fe5e <.exit_return>:
   1fe5e:	480a      	ldr	r0, [pc, #40]	; (1fe88 <.direct_call+0x10>)
   1fe60:	f001 f91a 	bl	21098 <Telium_Exit>

0001fe64 <.bad_return>:
   1fe64:	bc0f      	pop	{r0, r1, r2, r3}
   1fe66:	2000      	movs	r0, #0
   1fe68:	469e      	mov	lr, r3
   1fe6a:	bc08      	pop	{r3}
   1fe6c:	4770      	bx	lr

0001fe6e <.already_initialized>:
   1fe6e:	4684      	mov	ip, r0
   1fe70:	bc0f      	pop	{r0, r1, r2, r3}
   1fe72:	469e      	mov	lr, r3
   1fe74:	bc08      	pop	{r3}

0001fe76 <.call_function>:
   1fe76:	4760      	bx	ip

0001fe78 <.direct_call>:
   1fe78:	469c      	mov	ip, r3
   1fe7a:	bc08      	pop	{r3}
   1fe7c:	4760      	bx	ip
   1fe7e:	0000      	.short	0x0000
   1fe80:	0002f8f8 	.word	0x0002f8f8
   1fe84:	0001fe28 	.word	0x0001fe28
   1fe88:	00000b3e 	.word	0x00000b3e

0001fe8c <function_name>:
   1fe8c:	7a7a7562 	.word	0x7a7a7562
   1fe90:	7265      	.short	0x7265
	...

0001fe94 <buzzer>:
   1fe94:	b408      	push	{r3}
   1fe96:	4b0f      	ldr	r3, [pc, #60]	; (1fed4 <.direct_call+0x8>)
   1fe98:	681b      	ldr	r3, [r3, #0]
   1fe9a:	2b00      	cmp	r3, #0
   1fe9c:	d116      	bne.n	1fecc <.direct_call>
   1fe9e:	b507      	push	{r0, r1, r2, lr}
   1fea0:	f7ff fd74 	bl	1f98c <extenslib_open>
   1fea4:	2800      	cmp	r0, #0
   1fea6:	d008      	beq.n	1feba <.bad_return>
   1fea8:	4684      	mov	ip, r0
   1feaa:	480b      	ldr	r0, [pc, #44]	; (1fed8 <.direct_call+0xc>)
   1feac:	f000 f80d 	bl	1feca <.call_function>
   1feb0:	2800      	cmp	r0, #0
   1feb2:	d002      	beq.n	1feba <.bad_return>
   1feb4:	4907      	ldr	r1, [pc, #28]	; (1fed4 <.direct_call+0x8>)
   1feb6:	6008      	str	r0, [r1, #0]
   1feb8:	e003      	b.n	1fec2 <.already_initialized>

0001feba <.bad_return>:
   1feba:	bc0f      	pop	{r0, r1, r2, r3}
   1febc:	469e      	mov	lr, r3
   1febe:	bc08      	pop	{r3}
   1fec0:	4770      	bx	lr

0001fec2 <.already_initialized>:
   1fec2:	4684      	mov	ip, r0
   1fec4:	bc0f      	pop	{r0, r1, r2, r3}
   1fec6:	469e      	mov	lr, r3
   1fec8:	bc08      	pop	{r3}

0001feca <.call_function>:
   1feca:	4760      	bx	ip

0001fecc <.direct_call>:
   1fecc:	469c      	mov	ip, r3
   1fece:	bc08      	pop	{r3}
   1fed0:	4760      	bx	ip
   1fed2:	0000      	.short	0x0000
   1fed4:	0002f8fc 	.word	0x0002f8fc
   1fed8:	0001fe8c 	.word	0x0001fe8c

0001fedc <function_name>:
   1fedc:	77617244 	.word	0x77617244
   1fee0:	65747845 	.word	0x65747845
   1fee4:	6465646e 	.word	0x6465646e
   1fee8:	69727453 	.word	0x69727453
   1feec:	676e      	.short	0x676e
	...

0001fef0 <DrawExtendedString>:
   1fef0:	b408      	push	{r3}
   1fef2:	4b10      	ldr	r3, [pc, #64]	; (1ff34 <.direct_call+0x6>)
   1fef4:	681b      	ldr	r3, [r3, #0]
   1fef6:	2b00      	cmp	r3, #0
   1fef8:	d119      	bne.n	1ff2e <.direct_call>
   1fefa:	b507      	push	{r0, r1, r2, lr}
   1fefc:	f000 f8bc 	bl	20078 <libgrlib_open>
   1ff00:	2800      	cmp	r0, #0
   1ff02:	d00b      	beq.n	1ff1c <.bad_return>
   1ff04:	4684      	mov	ip, r0
   1ff06:	480c      	ldr	r0, [pc, #48]	; (1ff38 <.direct_call+0xa>)
   1ff08:	f000 f810 	bl	1ff2c <.call_function>
   1ff0c:	2800      	cmp	r0, #0
   1ff0e:	d002      	beq.n	1ff16 <.exit_return>
   1ff10:	4908      	ldr	r1, [pc, #32]	; (1ff34 <.direct_call+0x6>)
   1ff12:	6008      	str	r0, [r1, #0]
   1ff14:	e006      	b.n	1ff24 <.already_initialized>

0001ff16 <.exit_return>:
   1ff16:	4809      	ldr	r0, [pc, #36]	; (1ff3c <.direct_call+0xe>)
   1ff18:	f001 f8be 	bl	21098 <Telium_Exit>

0001ff1c <.bad_return>:
   1ff1c:	bc0f      	pop	{r0, r1, r2, r3}
   1ff1e:	469e      	mov	lr, r3
   1ff20:	bc08      	pop	{r3}
   1ff22:	4770      	bx	lr

0001ff24 <.already_initialized>:
   1ff24:	4684      	mov	ip, r0
   1ff26:	bc0f      	pop	{r0, r1, r2, r3}
   1ff28:	469e      	mov	lr, r3
   1ff2a:	bc08      	pop	{r3}

0001ff2c <.call_function>:
   1ff2c:	4760      	bx	ip

0001ff2e <.direct_call>:
   1ff2e:	469c      	mov	ip, r3
   1ff30:	bc08      	pop	{r3}
   1ff32:	4760      	bx	ip
   1ff34:	0002f900 	.word	0x0002f900
   1ff38:	0001fedc 	.word	0x0001fedc
   1ff3c:	00000932 	.word	0x00000932

0001ff40 <function_name>:
   1ff40:	74696e49 	.word	0x74696e49
   1ff44:	746e6f43 	.word	0x746e6f43
   1ff48:	65747865 	.word	0x65747865
   1ff4c:	70617247 	.word	0x70617247
   1ff50:	75716968 	.word	0x75716968
   1ff54:	0065      	.short	0x0065
   1ff56:	bf00      	nop

0001ff58 <InitContexteGraphique>:
   1ff58:	b408      	push	{r3}
   1ff5a:	4b0d      	ldr	r3, [pc, #52]	; (1ff90 <.direct_call+0x6>)
   1ff5c:	681b      	ldr	r3, [r3, #0]
   1ff5e:	2b00      	cmp	r3, #0
   1ff60:	d113      	bne.n	1ff8a <.direct_call>
   1ff62:	b507      	push	{r0, r1, r2, lr}
   1ff64:	f000 f888 	bl	20078 <libgrlib_open>
   1ff68:	2800      	cmp	r0, #0
   1ff6a:	d008      	beq.n	1ff7e <.bad_return>
   1ff6c:	4684      	mov	ip, r0
   1ff6e:	4809      	ldr	r0, [pc, #36]	; (1ff94 <.direct_call+0xa>)
   1ff70:	f000 f80a 	bl	1ff88 <.call_function>
   1ff74:	2800      	cmp	r0, #0
   1ff76:	d002      	beq.n	1ff7e <.bad_return>
   1ff78:	4905      	ldr	r1, [pc, #20]	; (1ff90 <.direct_call+0x6>)
   1ff7a:	6008      	str	r0, [r1, #0]
   1ff7c:	e000      	b.n	1ff80 <.already_initialized>

0001ff7e <.bad_return>:
   1ff7e:	4806      	ldr	r0, [pc, #24]	; (1ff98 <.direct_call+0xe>)

0001ff80 <.already_initialized>:
   1ff80:	4684      	mov	ip, r0
   1ff82:	bc0f      	pop	{r0, r1, r2, r3}
   1ff84:	469e      	mov	lr, r3
   1ff86:	bc08      	pop	{r3}

0001ff88 <.call_function>:
   1ff88:	4760      	bx	ip

0001ff8a <.direct_call>:
   1ff8a:	469c      	mov	ip, r3
   1ff8c:	bc08      	pop	{r3}
   1ff8e:	4760      	bx	ip
   1ff90:	0002f904 	.word	0x0002f904
   1ff94:	0001ff40 	.word	0x0001ff40
   1ff98:	000211d9 	.word	0x000211d9

0001ff9c <function_name>:
   1ff9c:	6e696150 	.word	0x6e696150
   1ffa0:	61724774 	.word	0x61724774
   1ffa4:	63696870 	.word	0x63696870
   1ffa8:	0073      	.short	0x0073
   1ffaa:	bf00      	nop

0001ffac <PaintGraphics>:
   1ffac:	b408      	push	{r3}
   1ffae:	4b0f      	ldr	r3, [pc, #60]	; (1ffec <.direct_call+0x8>)
   1ffb0:	681b      	ldr	r3, [r3, #0]
   1ffb2:	2b00      	cmp	r3, #0
   1ffb4:	d116      	bne.n	1ffe4 <.direct_call>
   1ffb6:	b507      	push	{r0, r1, r2, lr}
   1ffb8:	f000 f85e 	bl	20078 <libgrlib_open>
   1ffbc:	2800      	cmp	r0, #0
   1ffbe:	d008      	beq.n	1ffd2 <.bad_return>
   1ffc0:	4684      	mov	ip, r0
   1ffc2:	480b      	ldr	r0, [pc, #44]	; (1fff0 <.direct_call+0xc>)
   1ffc4:	f000 f80d 	bl	1ffe2 <.call_function>
   1ffc8:	2800      	cmp	r0, #0
   1ffca:	d002      	beq.n	1ffd2 <.bad_return>
   1ffcc:	4907      	ldr	r1, [pc, #28]	; (1ffec <.direct_call+0x8>)
   1ffce:	6008      	str	r0, [r1, #0]
   1ffd0:	e003      	b.n	1ffda <.already_initialized>

0001ffd2 <.bad_return>:
   1ffd2:	bc0f      	pop	{r0, r1, r2, r3}
   1ffd4:	469e      	mov	lr, r3
   1ffd6:	bc08      	pop	{r3}
   1ffd8:	4770      	bx	lr

0001ffda <.already_initialized>:
   1ffda:	4684      	mov	ip, r0
   1ffdc:	bc0f      	pop	{r0, r1, r2, r3}
   1ffde:	469e      	mov	lr, r3
   1ffe0:	bc08      	pop	{r3}

0001ffe2 <.call_function>:
   1ffe2:	4760      	bx	ip

0001ffe4 <.direct_call>:
   1ffe4:	469c      	mov	ip, r3
   1ffe6:	bc08      	pop	{r3}
   1ffe8:	4760      	bx	ip
   1ffea:	0000      	.short	0x0000
   1ffec:	0002f908 	.word	0x0002f908
   1fff0:	0001ff9c 	.word	0x0001ff9c

0001fff4 <function_name>:
   1fff4:	6172445f 	.word	0x6172445f
   1fff8:	74784577 	.word	0x74784577
   1fffc:	65646e65 	.word	0x65646e65
   20000:	72745364 	.word	0x72745364
   20004:	00676e69 	.word	0x00676e69

00020008 <_DrawExtendedString>:
   20008:	b408      	push	{r3}
   2000a:	4b10      	ldr	r3, [pc, #64]	; (2004c <.direct_call+0x6>)
   2000c:	681b      	ldr	r3, [r3, #0]
   2000e:	2b00      	cmp	r3, #0
   20010:	d119      	bne.n	20046 <.direct_call>
   20012:	b507      	push	{r0, r1, r2, lr}
   20014:	f000 f830 	bl	20078 <libgrlib_open>
   20018:	2800      	cmp	r0, #0
   2001a:	d00b      	beq.n	20034 <.bad_return>
   2001c:	4684      	mov	ip, r0
   2001e:	480c      	ldr	r0, [pc, #48]	; (20050 <.direct_call+0xa>)
   20020:	f000 f810 	bl	20044 <.call_function>
   20024:	2800      	cmp	r0, #0
   20026:	d002      	beq.n	2002e <.exit_return>
   20028:	4908      	ldr	r1, [pc, #32]	; (2004c <.direct_call+0x6>)
   2002a:	6008      	str	r0, [r1, #0]
   2002c:	e006      	b.n	2003c <.already_initialized>

0002002e <.exit_return>:
   2002e:	4809      	ldr	r0, [pc, #36]	; (20054 <.direct_call+0xe>)
   20030:	f001 f832 	bl	21098 <Telium_Exit>

00020034 <.bad_return>:
   20034:	bc0f      	pop	{r0, r1, r2, r3}
   20036:	469e      	mov	lr, r3
   20038:	bc08      	pop	{r3}
   2003a:	4770      	bx	lr

0002003c <.already_initialized>:
   2003c:	4684      	mov	ip, r0
   2003e:	bc0f      	pop	{r0, r1, r2, r3}
   20040:	469e      	mov	lr, r3
   20042:	bc08      	pop	{r3}

00020044 <.call_function>:
   20044:	4760      	bx	ip

00020046 <.direct_call>:
   20046:	469c      	mov	ip, r3
   20048:	bc08      	pop	{r3}
   2004a:	4760      	bx	ip
   2004c:	0002f90c 	.word	0x0002f90c
   20050:	0001fff4 	.word	0x0001fff4
   20054:	00000931 	.word	0x00000931

00020058 <GetProcAddressLibgr>:
   20058:	4b05      	ldr	r3, [pc, #20]	; (20070 <GetProcAddressLibgr+0x18>)
   2005a:	4a06      	ldr	r2, [pc, #24]	; (20074 <GetProcAddressLibgr+0x1c>)
   2005c:	447b      	add	r3, pc
   2005e:	4601      	mov	r1, r0
   20060:	589b      	ldr	r3, [r3, r2]
   20062:	6818      	ldr	r0, [r3, #0]
   20064:	b110      	cbz	r0, 2006c <GetProcAddressLibgr+0x14>
   20066:	b109      	cbz	r1, 2006c <GetProcAddressLibgr+0x14>
   20068:	f002 b839 	b.w	220de <OSL_Dll_GetSymbolByName>
   2006c:	2000      	movs	r0, #0
   2006e:	4770      	bx	lr
   20070:	0000f0b8 	.word	0x0000f0b8
   20074:	000000fc 	.word	0x000000fc

00020078 <libgrlib_open>:
   20078:	b570      	push	{r4, r5, r6, lr}
   2007a:	4c0b      	ldr	r4, [pc, #44]	; (200a8 <libgrlib_open+0x30>)
   2007c:	4b0b      	ldr	r3, [pc, #44]	; (200ac <libgrlib_open+0x34>)
   2007e:	447c      	add	r4, pc
   20080:	4a0b      	ldr	r2, [pc, #44]	; (200b0 <libgrlib_open+0x38>)
   20082:	58e6      	ldr	r6, [r4, r3]
   20084:	58a5      	ldr	r5, [r4, r2]
   20086:	6833      	ldr	r3, [r6, #0]
   20088:	b95b      	cbnz	r3, 200a2 <libgrlib_open+0x2a>
   2008a:	2003      	movs	r0, #3
   2008c:	f002 f857 	bl	2213e <OSL_Dll_OpenByAppliType>
   20090:	6030      	str	r0, [r6, #0]
   20092:	b130      	cbz	r0, 200a2 <libgrlib_open+0x2a>
   20094:	4b07      	ldr	r3, [pc, #28]	; (200b4 <libgrlib_open+0x3c>)
   20096:	4808      	ldr	r0, [pc, #32]	; (200b8 <libgrlib_open+0x40>)
   20098:	58e3      	ldr	r3, [r4, r3]
   2009a:	4478      	add	r0, pc
   2009c:	602b      	str	r3, [r5, #0]
   2009e:	f7ff ffdb 	bl	20058 <GetProcAddressLibgr>
   200a2:	6828      	ldr	r0, [r5, #0]
   200a4:	bd70      	pop	{r4, r5, r6, pc}
   200a6:	bf00      	nop
   200a8:	0000f096 	.word	0x0000f096
   200ac:	000000fc 	.word	0x000000fc
   200b0:	000000c8 	.word	0x000000c8
   200b4:	000000d0 	.word	0x000000d0
   200b8:	0000634a 	.word	0x0000634a

000200bc <libgrlib_close>:
   200bc:	4b03      	ldr	r3, [pc, #12]	; (200cc <libgrlib_close+0x10>)
   200be:	4a04      	ldr	r2, [pc, #16]	; (200d0 <libgrlib_close+0x14>)
   200c0:	447b      	add	r3, pc
   200c2:	589b      	ldr	r3, [r3, r2]
   200c4:	6818      	ldr	r0, [r3, #0]
   200c6:	f001 bffa 	b.w	220be <OSL_Dll_Close>
   200ca:	bf00      	nop
   200cc:	0000f054 	.word	0x0000f054
   200d0:	000000fc 	.word	0x000000fc

000200d4 <function_name>:
   200d4:	5f515350 	.word	0x5f515350
   200d8:	5f747345 	.word	0x5f747345
   200dc:	706e6970 	.word	0x706e6970
   200e0:	6461      	.short	0x6461
	...

000200e4 <PSQ_Est_pinpad>:
   200e4:	b408      	push	{r3}
   200e6:	4b11      	ldr	r3, [pc, #68]	; (2012c <.direct_call+0x8>)
   200e8:	681b      	ldr	r3, [r3, #0]
   200ea:	2b00      	cmp	r3, #0
   200ec:	d11a      	bne.n	20124 <.direct_call>
   200ee:	b507      	push	{r0, r1, r2, lr}
   200f0:	f000 f868 	bl	201c4 <paramlib_open>
   200f4:	2800      	cmp	r0, #0
   200f6:	d00b      	beq.n	20110 <.bad_return>
   200f8:	4684      	mov	ip, r0
   200fa:	480d      	ldr	r0, [pc, #52]	; (20130 <.direct_call+0xc>)
   200fc:	f000 f811 	bl	20122 <.call_function>
   20100:	2800      	cmp	r0, #0
   20102:	d002      	beq.n	2010a <.exit_return>
   20104:	4909      	ldr	r1, [pc, #36]	; (2012c <.direct_call+0x8>)
   20106:	6008      	str	r0, [r1, #0]
   20108:	e007      	b.n	2011a <.already_initialized>

0002010a <.exit_return>:
   2010a:	480a      	ldr	r0, [pc, #40]	; (20134 <.direct_call+0x10>)
   2010c:	f000 ffc4 	bl	21098 <Telium_Exit>

00020110 <.bad_return>:
   20110:	bc0f      	pop	{r0, r1, r2, r3}
   20112:	2000      	movs	r0, #0
   20114:	469e      	mov	lr, r3
   20116:	bc08      	pop	{r3}
   20118:	4770      	bx	lr

0002011a <.already_initialized>:
   2011a:	4684      	mov	ip, r0
   2011c:	bc0f      	pop	{r0, r1, r2, r3}
   2011e:	469e      	mov	lr, r3
   20120:	bc08      	pop	{r3}

00020122 <.call_function>:
   20122:	4760      	bx	ip

00020124 <.direct_call>:
   20124:	469c      	mov	ip, r3
   20126:	bc08      	pop	{r3}
   20128:	4760      	bx	ip
   2012a:	0000      	.short	0x0000
   2012c:	0002f910 	.word	0x0002f910
   20130:	000200d4 	.word	0x000200d4
   20134:	00000b0b 	.word	0x00000b0b

00020138 <function_name>:
   20138:	5f515350 	.word	0x5f515350
   2013c:	6e6e6f64 	.word	0x6e6e6f64
   20140:	745f7265 	.word	0x745f7265
   20144:	5f657079 	.word	0x5f657079
   20148:	706e6970 	.word	0x706e6970
   2014c:	6461      	.short	0x6461
	...

00020150 <PSQ_donner_type_pinpad>:
   20150:	b408      	push	{r3}
   20152:	4b11      	ldr	r3, [pc, #68]	; (20198 <.direct_call+0x8>)
   20154:	681b      	ldr	r3, [r3, #0]
   20156:	2b00      	cmp	r3, #0
   20158:	d11a      	bne.n	20190 <.direct_call>
   2015a:	b507      	push	{r0, r1, r2, lr}
   2015c:	f000 f832 	bl	201c4 <paramlib_open>
   20160:	2800      	cmp	r0, #0
   20162:	d00b      	beq.n	2017c <.bad_return>
   20164:	4684      	mov	ip, r0
   20166:	480d      	ldr	r0, [pc, #52]	; (2019c <.direct_call+0xc>)
   20168:	f000 f811 	bl	2018e <.call_function>
   2016c:	2800      	cmp	r0, #0
   2016e:	d002      	beq.n	20176 <.exit_return>
   20170:	4909      	ldr	r1, [pc, #36]	; (20198 <.direct_call+0x8>)
   20172:	6008      	str	r0, [r1, #0]
   20174:	e007      	b.n	20186 <.already_initialized>

00020176 <.exit_return>:
   20176:	480a      	ldr	r0, [pc, #40]	; (201a0 <.direct_call+0x10>)
   20178:	f000 ff8e 	bl	21098 <Telium_Exit>

0002017c <.bad_return>:
   2017c:	bc0f      	pop	{r0, r1, r2, r3}
   2017e:	2000      	movs	r0, #0
   20180:	469e      	mov	lr, r3
   20182:	bc08      	pop	{r3}
   20184:	4770      	bx	lr

00020186 <.already_initialized>:
   20186:	4684      	mov	ip, r0
   20188:	bc0f      	pop	{r0, r1, r2, r3}
   2018a:	469e      	mov	lr, r3
   2018c:	bc08      	pop	{r3}

0002018e <.call_function>:
   2018e:	4760      	bx	ip

00020190 <.direct_call>:
   20190:	469c      	mov	ip, r3
   20192:	bc08      	pop	{r3}
   20194:	4760      	bx	ip
   20196:	0000      	.short	0x0000
   20198:	0002f914 	.word	0x0002f914
   2019c:	00020138 	.word	0x00020138
   201a0:	00000b47 	.word	0x00000b47

000201a4 <GetProcAddressParam>:
   201a4:	4b05      	ldr	r3, [pc, #20]	; (201bc <GetProcAddressParam+0x18>)
   201a6:	4a06      	ldr	r2, [pc, #24]	; (201c0 <GetProcAddressParam+0x1c>)
   201a8:	447b      	add	r3, pc
   201aa:	4601      	mov	r1, r0
   201ac:	589b      	ldr	r3, [r3, r2]
   201ae:	6818      	ldr	r0, [r3, #0]
   201b0:	b110      	cbz	r0, 201b8 <GetProcAddressParam+0x14>
   201b2:	b109      	cbz	r1, 201b8 <GetProcAddressParam+0x14>
   201b4:	f001 bf93 	b.w	220de <OSL_Dll_GetSymbolByName>
   201b8:	2000      	movs	r0, #0
   201ba:	4770      	bx	lr
   201bc:	0000ef6c 	.word	0x0000ef6c
   201c0:	0000010c 	.word	0x0000010c

000201c4 <paramlib_open>:
   201c4:	b570      	push	{r4, r5, r6, lr}
   201c6:	4c0b      	ldr	r4, [pc, #44]	; (201f4 <paramlib_open+0x30>)
   201c8:	4b0b      	ldr	r3, [pc, #44]	; (201f8 <paramlib_open+0x34>)
   201ca:	447c      	add	r4, pc
   201cc:	4a0b      	ldr	r2, [pc, #44]	; (201fc <paramlib_open+0x38>)
   201ce:	58e6      	ldr	r6, [r4, r3]
   201d0:	58a5      	ldr	r5, [r4, r2]
   201d2:	6833      	ldr	r3, [r6, #0]
   201d4:	b95b      	cbnz	r3, 201ee <paramlib_open+0x2a>
   201d6:	2004      	movs	r0, #4
   201d8:	f001 ffb1 	bl	2213e <OSL_Dll_OpenByAppliType>
   201dc:	6030      	str	r0, [r6, #0]
   201de:	b130      	cbz	r0, 201ee <paramlib_open+0x2a>
   201e0:	4b07      	ldr	r3, [pc, #28]	; (20200 <paramlib_open+0x3c>)
   201e2:	4808      	ldr	r0, [pc, #32]	; (20204 <paramlib_open+0x40>)
   201e4:	58e3      	ldr	r3, [r4, r3]
   201e6:	4478      	add	r0, pc
   201e8:	602b      	str	r3, [r5, #0]
   201ea:	f7ff ffdb 	bl	201a4 <GetProcAddressParam>
   201ee:	6828      	ldr	r0, [r5, #0]
   201f0:	bd70      	pop	{r4, r5, r6, pc}
   201f2:	bf00      	nop
   201f4:	0000ef4a 	.word	0x0000ef4a
   201f8:	0000010c 	.word	0x0000010c
   201fc:	00000108 	.word	0x00000108
   20200:	00000100 	.word	0x00000100
   20204:	000061fe 	.word	0x000061fe

00020208 <paramlib_close>:
   20208:	4b03      	ldr	r3, [pc, #12]	; (20218 <paramlib_close+0x10>)
   2020a:	4a04      	ldr	r2, [pc, #16]	; (2021c <paramlib_close+0x14>)
   2020c:	447b      	add	r3, pc
   2020e:	589b      	ldr	r3, [r3, r2]
   20210:	6818      	ldr	r0, [r3, #0]
   20212:	f001 bf54 	b.w	220be <OSL_Dll_Close>
   20216:	bf00      	nop
   20218:	0000ef08 	.word	0x0000ef08
   2021c:	0000010c 	.word	0x0000010c

00020220 <function_name>:
   20220:	50507349 	.word	0x50507349
   20224:	6e6f4353 	.word	0x6e6f4353
   20228:	7463656e 	.word	0x7463656e
   2022c:	6465      	.short	0x6465
	...

00020230 <IsPPSConnected>:
   20230:	b408      	push	{r3}
   20232:	4b11      	ldr	r3, [pc, #68]	; (20278 <.direct_call+0x8>)
   20234:	681b      	ldr	r3, [r3, #0]
   20236:	2b00      	cmp	r3, #0
   20238:	d11a      	bne.n	20270 <.direct_call>
   2023a:	b507      	push	{r0, r1, r2, lr}
   2023c:	f000 f8ca 	bl	203d4 <pinpadlib_open>
   20240:	2800      	cmp	r0, #0
   20242:	d00b      	beq.n	2025c <.bad_return>
   20244:	4684      	mov	ip, r0
   20246:	480d      	ldr	r0, [pc, #52]	; (2027c <.direct_call+0xc>)
   20248:	f000 f811 	bl	2026e <.call_function>
   2024c:	2800      	cmp	r0, #0
   2024e:	d002      	beq.n	20256 <.exit_return>
   20250:	4909      	ldr	r1, [pc, #36]	; (20278 <.direct_call+0x8>)
   20252:	6008      	str	r0, [r1, #0]
   20254:	e007      	b.n	20266 <.already_initialized>

00020256 <.exit_return>:
   20256:	480a      	ldr	r0, [pc, #40]	; (20280 <.direct_call+0x10>)
   20258:	f000 ff1e 	bl	21098 <Telium_Exit>

0002025c <.bad_return>:
   2025c:	bc0f      	pop	{r0, r1, r2, r3}
   2025e:	2001      	movs	r0, #1
   20260:	469e      	mov	lr, r3
   20262:	bc08      	pop	{r3}
   20264:	4770      	bx	lr

00020266 <.already_initialized>:
   20266:	4684      	mov	ip, r0
   20268:	bc0f      	pop	{r0, r1, r2, r3}
   2026a:	469e      	mov	lr, r3
   2026c:	bc08      	pop	{r3}

0002026e <.call_function>:
   2026e:	4760      	bx	ip

00020270 <.direct_call>:
   20270:	469c      	mov	ip, r3
   20272:	bc08      	pop	{r3}
   20274:	4760      	bx	ip
   20276:	0000      	.short	0x0000
   20278:	0002f918 	.word	0x0002f918
   2027c:	00020220 	.word	0x00020220
   20280:	0000120f 	.word	0x0000120f

00020284 <function_name>:
   20284:	646e6553 	.word	0x646e6553
   20288:	6d726554 	.word	0x6d726554
   2028c:	6c616e69 	.word	0x6c616e69
   20290:	52666552 	.word	0x52666552
   20294:	65757165 	.word	0x65757165
   20298:	6f437473 	.word	0x6f437473
   2029c:	6e616d6d 	.word	0x6e616d6d
   202a0:	0064      	.short	0x0064
   202a2:	bf00      	nop

000202a4 <PPS_SendTerminalRefRequestCommand>:
   202a4:	b408      	push	{r3}
   202a6:	4b11      	ldr	r3, [pc, #68]	; (202ec <.direct_call+0x8>)
   202a8:	681b      	ldr	r3, [r3, #0]
   202aa:	2b00      	cmp	r3, #0
   202ac:	d11a      	bne.n	202e4 <.direct_call>
   202ae:	b507      	push	{r0, r1, r2, lr}
   202b0:	f000 f890 	bl	203d4 <pinpadlib_open>
   202b4:	2800      	cmp	r0, #0
   202b6:	d00b      	beq.n	202d0 <.bad_return>
   202b8:	4684      	mov	ip, r0
   202ba:	480d      	ldr	r0, [pc, #52]	; (202f0 <.direct_call+0xc>)
   202bc:	f000 f811 	bl	202e2 <.call_function>
   202c0:	2800      	cmp	r0, #0
   202c2:	d002      	beq.n	202ca <.exit_return>
   202c4:	4909      	ldr	r1, [pc, #36]	; (202ec <.direct_call+0x8>)
   202c6:	6008      	str	r0, [r1, #0]
   202c8:	e007      	b.n	202da <.already_initialized>

000202ca <.exit_return>:
   202ca:	480a      	ldr	r0, [pc, #40]	; (202f4 <.direct_call+0x10>)
   202cc:	f000 fee4 	bl	21098 <Telium_Exit>

000202d0 <.bad_return>:
   202d0:	bc0f      	pop	{r0, r1, r2, r3}
   202d2:	2001      	movs	r0, #1
   202d4:	469e      	mov	lr, r3
   202d6:	bc08      	pop	{r3}
   202d8:	4770      	bx	lr

000202da <.already_initialized>:
   202da:	4684      	mov	ip, r0
   202dc:	bc0f      	pop	{r0, r1, r2, r3}
   202de:	469e      	mov	lr, r3
   202e0:	bc08      	pop	{r3}

000202e2 <.call_function>:
   202e2:	4760      	bx	ip

000202e4 <.direct_call>:
   202e4:	469c      	mov	ip, r3
   202e6:	bc08      	pop	{r3}
   202e8:	4760      	bx	ip
   202ea:	0000      	.short	0x0000
   202ec:	0002f91c 	.word	0x0002f91c
   202f0:	00020284 	.word	0x00020284
   202f4:	00001217 	.word	0x00001217

000202f8 <function_name>:
   202f8:	5f535050 	.word	0x5f535050
   202fc:	73726966 	.word	0x73726966
   20300:	6e696c74 	.word	0x6e696c74
   20304:	0065      	.short	0x0065
   20306:	bf00      	nop

00020308 <PPS_firstline>:
   20308:	b408      	push	{r3}
   2030a:	4b10      	ldr	r3, [pc, #64]	; (2034c <.direct_call+0x6>)
   2030c:	681b      	ldr	r3, [r3, #0]
   2030e:	2b00      	cmp	r3, #0
   20310:	d119      	bne.n	20346 <.direct_call>
   20312:	b507      	push	{r0, r1, r2, lr}
   20314:	f000 f85e 	bl	203d4 <pinpadlib_open>
   20318:	2800      	cmp	r0, #0
   2031a:	d00b      	beq.n	20334 <.bad_return>
   2031c:	4684      	mov	ip, r0
   2031e:	480c      	ldr	r0, [pc, #48]	; (20350 <.direct_call+0xa>)
   20320:	f000 f810 	bl	20344 <.call_function>
   20324:	2800      	cmp	r0, #0
   20326:	d002      	beq.n	2032e <.exit_return>
   20328:	4908      	ldr	r1, [pc, #32]	; (2034c <.direct_call+0x6>)
   2032a:	6008      	str	r0, [r1, #0]
   2032c:	e006      	b.n	2033c <.already_initialized>

0002032e <.exit_return>:
   2032e:	4809      	ldr	r0, [pc, #36]	; (20354 <.direct_call+0xe>)
   20330:	f000 feb2 	bl	21098 <Telium_Exit>

00020334 <.bad_return>:
   20334:	bc0f      	pop	{r0, r1, r2, r3}
   20336:	469e      	mov	lr, r3
   20338:	bc08      	pop	{r3}
   2033a:	4770      	bx	lr

0002033c <.already_initialized>:
   2033c:	4684      	mov	ip, r0
   2033e:	bc0f      	pop	{r0, r1, r2, r3}
   20340:	469e      	mov	lr, r3
   20342:	bc08      	pop	{r3}

00020344 <.call_function>:
   20344:	4760      	bx	ip

00020346 <.direct_call>:
   20346:	469c      	mov	ip, r3
   20348:	bc08      	pop	{r3}
   2034a:	4760      	bx	ip
   2034c:	0002f920 	.word	0x0002f920
   20350:	000202f8 	.word	0x000202f8
   20354:	00001209 	.word	0x00001209

00020358 <function_name>:
   20358:	5f535050 	.word	0x5f535050
   2035c:	6c77656e 	.word	0x6c77656e
   20360:	00656e69 	.word	0x00656e69

00020364 <PPS_newline>:
   20364:	b408      	push	{r3}
   20366:	4b10      	ldr	r3, [pc, #64]	; (203a8 <.direct_call+0x6>)
   20368:	681b      	ldr	r3, [r3, #0]
   2036a:	2b00      	cmp	r3, #0
   2036c:	d119      	bne.n	203a2 <.direct_call>
   2036e:	b507      	push	{r0, r1, r2, lr}
   20370:	f000 f830 	bl	203d4 <pinpadlib_open>
   20374:	2800      	cmp	r0, #0
   20376:	d00b      	beq.n	20390 <.bad_return>
   20378:	4684      	mov	ip, r0
   2037a:	480c      	ldr	r0, [pc, #48]	; (203ac <.direct_call+0xa>)
   2037c:	f000 f810 	bl	203a0 <.call_function>
   20380:	2800      	cmp	r0, #0
   20382:	d002      	beq.n	2038a <.exit_return>
   20384:	4908      	ldr	r1, [pc, #32]	; (203a8 <.direct_call+0x6>)
   20386:	6008      	str	r0, [r1, #0]
   20388:	e006      	b.n	20398 <.already_initialized>

0002038a <.exit_return>:
   2038a:	4809      	ldr	r0, [pc, #36]	; (203b0 <.direct_call+0xe>)
   2038c:	f000 fe84 	bl	21098 <Telium_Exit>

00020390 <.bad_return>:
   20390:	bc0f      	pop	{r0, r1, r2, r3}
   20392:	469e      	mov	lr, r3
   20394:	bc08      	pop	{r3}
   20396:	4770      	bx	lr

00020398 <.already_initialized>:
   20398:	4684      	mov	ip, r0
   2039a:	bc0f      	pop	{r0, r1, r2, r3}
   2039c:	469e      	mov	lr, r3
   2039e:	bc08      	pop	{r3}

000203a0 <.call_function>:
   203a0:	4760      	bx	ip

000203a2 <.direct_call>:
   203a2:	469c      	mov	ip, r3
   203a4:	bc08      	pop	{r3}
   203a6:	4760      	bx	ip
   203a8:	0002f924 	.word	0x0002f924
   203ac:	00020358 	.word	0x00020358
   203b0:	00001207 	.word	0x00001207

000203b4 <GetProcAddressPinpad>:
   203b4:	4b05      	ldr	r3, [pc, #20]	; (203cc <GetProcAddressPinpad+0x18>)
   203b6:	4a06      	ldr	r2, [pc, #24]	; (203d0 <GetProcAddressPinpad+0x1c>)
   203b8:	447b      	add	r3, pc
   203ba:	4601      	mov	r1, r0
   203bc:	589b      	ldr	r3, [r3, r2]
   203be:	6818      	ldr	r0, [r3, #0]
   203c0:	b110      	cbz	r0, 203c8 <GetProcAddressPinpad+0x14>
   203c2:	b109      	cbz	r1, 203c8 <GetProcAddressPinpad+0x14>
   203c4:	f001 be8b 	b.w	220de <OSL_Dll_GetSymbolByName>
   203c8:	2000      	movs	r0, #0
   203ca:	4770      	bx	lr
   203cc:	0000ed5c 	.word	0x0000ed5c
   203d0:	000000cc 	.word	0x000000cc

000203d4 <pinpadlib_open>:
   203d4:	b538      	push	{r3, r4, r5, lr}
   203d6:	4c0b      	ldr	r4, [pc, #44]	; (20404 <pinpadlib_open+0x30>)
   203d8:	4b0b      	ldr	r3, [pc, #44]	; (20408 <pinpadlib_open+0x34>)
   203da:	447c      	add	r4, pc
   203dc:	58e5      	ldr	r5, [r4, r3]
   203de:	682b      	ldr	r3, [r5, #0]
   203e0:	b96b      	cbnz	r3, 203fe <pinpadlib_open+0x2a>
   203e2:	200f      	movs	r0, #15
   203e4:	f001 feab 	bl	2213e <OSL_Dll_OpenByAppliType>
   203e8:	4b08      	ldr	r3, [pc, #32]	; (2040c <pinpadlib_open+0x38>)
   203ea:	58e3      	ldr	r3, [r4, r3]
   203ec:	6018      	str	r0, [r3, #0]
   203ee:	b130      	cbz	r0, 203fe <pinpadlib_open+0x2a>
   203f0:	4b07      	ldr	r3, [pc, #28]	; (20410 <pinpadlib_open+0x3c>)
   203f2:	4808      	ldr	r0, [pc, #32]	; (20414 <pinpadlib_open+0x40>)
   203f4:	58e3      	ldr	r3, [r4, r3]
   203f6:	4478      	add	r0, pc
   203f8:	602b      	str	r3, [r5, #0]
   203fa:	f7ff ffdb 	bl	203b4 <GetProcAddressPinpad>
   203fe:	6828      	ldr	r0, [r5, #0]
   20400:	bd38      	pop	{r3, r4, r5, pc}
   20402:	bf00      	nop
   20404:	0000ed3a 	.word	0x0000ed3a
   20408:	000000e4 	.word	0x000000e4
   2040c:	000000cc 	.word	0x000000cc
   20410:	000000f0 	.word	0x000000f0
   20414:	00005fee 	.word	0x00005fee

00020418 <pinpadlib_close>:
   20418:	4b03      	ldr	r3, [pc, #12]	; (20428 <pinpadlib_close+0x10>)
   2041a:	4a04      	ldr	r2, [pc, #16]	; (2042c <pinpadlib_close+0x14>)
   2041c:	447b      	add	r3, pc
   2041e:	589b      	ldr	r3, [r3, r2]
   20420:	6818      	ldr	r0, [r3, #0]
   20422:	f001 be4c 	b.w	220be <OSL_Dll_Close>
   20426:	bf00      	nop
   20428:	0000ecf8 	.word	0x0000ecf8
   2042c:	000000cc 	.word	0x000000cc

00020430 <function_name>:
   20430:	5f535050 	.word	0x5f535050
   20434:	70736944 	.word	0x70736944
   20438:	0079616c 	.word	0x0079616c

0002043c <PPS_Display>:
   2043c:	b408      	push	{r3}
   2043e:	4b11      	ldr	r3, [pc, #68]	; (20484 <.direct_call+0x8>)
   20440:	681b      	ldr	r3, [r3, #0]
   20442:	2b00      	cmp	r3, #0
   20444:	d11a      	bne.n	2047c <.direct_call>
   20446:	b507      	push	{r0, r1, r2, lr}
   20448:	f7ff ffc4 	bl	203d4 <pinpadlib_open>
   2044c:	2800      	cmp	r0, #0
   2044e:	d00b      	beq.n	20468 <.bad_return>
   20450:	4684      	mov	ip, r0
   20452:	480d      	ldr	r0, [pc, #52]	; (20488 <.direct_call+0xc>)
   20454:	f000 f811 	bl	2047a <.call_function>
   20458:	2800      	cmp	r0, #0
   2045a:	d002      	beq.n	20462 <.exit_return>
   2045c:	4909      	ldr	r1, [pc, #36]	; (20484 <.direct_call+0x8>)
   2045e:	6008      	str	r0, [r1, #0]
   20460:	e007      	b.n	20472 <.already_initialized>

00020462 <.exit_return>:
   20462:	480a      	ldr	r0, [pc, #40]	; (2048c <.direct_call+0x10>)
   20464:	f000 fe18 	bl	21098 <Telium_Exit>

00020468 <.bad_return>:
   20468:	bc0f      	pop	{r0, r1, r2, r3}
   2046a:	2000      	movs	r0, #0
   2046c:	469e      	mov	lr, r3
   2046e:	bc08      	pop	{r3}
   20470:	4770      	bx	lr

00020472 <.already_initialized>:
   20472:	4684      	mov	ip, r0
   20474:	bc0f      	pop	{r0, r1, r2, r3}
   20476:	469e      	mov	lr, r3
   20478:	bc08      	pop	{r3}

0002047a <.call_function>:
   2047a:	4760      	bx	ip

0002047c <.direct_call>:
   2047c:	469c      	mov	ip, r3
   2047e:	bc08      	pop	{r3}
   20480:	4760      	bx	ip
   20482:	0000      	.short	0x0000
   20484:	0002f928 	.word	0x0002f928
   20488:	00020430 	.word	0x00020430
   2048c:	0000120b 	.word	0x0000120b

00020490 <function_name>:
   20490:	696c6554 	.word	0x696c6554
   20494:	525f6d75 	.word	0x525f6d75
   20498:	5f646165 	.word	0x5f646165
   2049c:	65746164 	.word	0x65746164
   204a0:	00          	.byte	0x00
   204a1:	00          	.byte	0x00
   204a2:	bf00      	nop

000204a4 <Telium_Read_date>:
   204a4:	b408      	push	{r3}
   204a6:	4b0f      	ldr	r3, [pc, #60]	; (204e4 <.direct_call+0x6>)
   204a8:	681b      	ldr	r3, [r3, #0]
   204aa:	2b00      	cmp	r3, #0
   204ac:	d117      	bne.n	204de <.direct_call>
   204ae:	b507      	push	{r0, r1, r2, lr}
   204b0:	f000 fef4 	bl	2129c <toolslib_open>
   204b4:	2800      	cmp	r0, #0
   204b6:	d008      	beq.n	204ca <.bad_return>
   204b8:	4684      	mov	ip, r0
   204ba:	480b      	ldr	r0, [pc, #44]	; (204e8 <.direct_call+0xa>)
   204bc:	f000 f80e 	bl	204dc <.call_function>
   204c0:	2800      	cmp	r0, #0
   204c2:	d002      	beq.n	204ca <.bad_return>
   204c4:	4907      	ldr	r1, [pc, #28]	; (204e4 <.direct_call+0x6>)
   204c6:	6008      	str	r0, [r1, #0]
   204c8:	e004      	b.n	204d4 <.already_initialized>

000204ca <.bad_return>:
   204ca:	bc0f      	pop	{r0, r1, r2, r3}
   204cc:	4807      	ldr	r0, [pc, #28]	; (204ec <.direct_call+0xe>)
   204ce:	469e      	mov	lr, r3
   204d0:	bc08      	pop	{r3}
   204d2:	4770      	bx	lr

000204d4 <.already_initialized>:
   204d4:	4684      	mov	ip, r0
   204d6:	bc0f      	pop	{r0, r1, r2, r3}
   204d8:	469e      	mov	lr, r3
   204da:	bc08      	pop	{r3}

000204dc <.call_function>:
   204dc:	4760      	bx	ip

000204de <.direct_call>:
   204de:	469c      	mov	ip, r3
   204e0:	bc08      	pop	{r3}
   204e2:	4760      	bx	ip
   204e4:	0002f92c 	.word	0x0002f92c
   204e8:	00020490 	.word	0x00020490
   204ec:	ffffffff 	.word	0xffffffff

000204f0 <function_name>:
   204f0:	736f6f42 	.word	0x736f6f42
   204f4:	54726574 	.word	0x54726574
   204f8:	00657079 	.word	0x00657079

000204fc <BoosterType>:
   204fc:	b408      	push	{r3}
   204fe:	4b11      	ldr	r3, [pc, #68]	; (20544 <.direct_call+0x8>)
   20500:	681b      	ldr	r3, [r3, #0]
   20502:	2b00      	cmp	r3, #0
   20504:	d11a      	bne.n	2053c <.direct_call>
   20506:	b507      	push	{r0, r1, r2, lr}
   20508:	f7ff fa40 	bl	1f98c <extenslib_open>
   2050c:	2800      	cmp	r0, #0
   2050e:	d00b      	beq.n	20528 <.bad_return>
   20510:	4684      	mov	ip, r0
   20512:	480d      	ldr	r0, [pc, #52]	; (20548 <.direct_call+0xc>)
   20514:	f000 f811 	bl	2053a <.call_function>
   20518:	2800      	cmp	r0, #0
   2051a:	d002      	beq.n	20522 <.exit_return>
   2051c:	4909      	ldr	r1, [pc, #36]	; (20544 <.direct_call+0x8>)
   2051e:	6008      	str	r0, [r1, #0]
   20520:	e007      	b.n	20532 <.already_initialized>

00020522 <.exit_return>:
   20522:	480a      	ldr	r0, [pc, #40]	; (2054c <.direct_call+0x10>)
   20524:	f000 fdb8 	bl	21098 <Telium_Exit>

00020528 <.bad_return>:
   20528:	bc0f      	pop	{r0, r1, r2, r3}
   2052a:	2000      	movs	r0, #0
   2052c:	469e      	mov	lr, r3
   2052e:	bc08      	pop	{r3}
   20530:	4770      	bx	lr

00020532 <.already_initialized>:
   20532:	4684      	mov	ip, r0
   20534:	bc0f      	pop	{r0, r1, r2, r3}
   20536:	469e      	mov	lr, r3
   20538:	bc08      	pop	{r3}

0002053a <.call_function>:
   2053a:	4760      	bx	ip

0002053c <.direct_call>:
   2053c:	469c      	mov	ip, r3
   2053e:	bc08      	pop	{r3}
   20540:	4760      	bx	ip
   20542:	0000      	.short	0x0000
   20544:	0002f930 	.word	0x0002f930
   20548:	000204f0 	.word	0x000204f0
   2054c:	00000a00 	.word	0x00000a00

00020550 <function_name>:
   20550:	6f437349 	.word	0x6f437349
   20554:	44726f6c 	.word	0x44726f6c
   20558:	6c707369 	.word	0x6c707369
   2055c:	7961      	.short	0x7961
	...

00020560 <IsColorDisplay>:
   20560:	b408      	push	{r3}
   20562:	4b11      	ldr	r3, [pc, #68]	; (205a8 <.direct_call+0x8>)
   20564:	681b      	ldr	r3, [r3, #0]
   20566:	2b00      	cmp	r3, #0
   20568:	d11a      	bne.n	205a0 <.direct_call>
   2056a:	b507      	push	{r0, r1, r2, lr}
   2056c:	f7ff fa0e 	bl	1f98c <extenslib_open>
   20570:	2800      	cmp	r0, #0
   20572:	d00b      	beq.n	2058c <.bad_return>
   20574:	4684      	mov	ip, r0
   20576:	480d      	ldr	r0, [pc, #52]	; (205ac <.direct_call+0xc>)
   20578:	f000 f811 	bl	2059e <.call_function>
   2057c:	2800      	cmp	r0, #0
   2057e:	d002      	beq.n	20586 <.exit_return>
   20580:	4909      	ldr	r1, [pc, #36]	; (205a8 <.direct_call+0x8>)
   20582:	6008      	str	r0, [r1, #0]
   20584:	e007      	b.n	20596 <.already_initialized>

00020586 <.exit_return>:
   20586:	480a      	ldr	r0, [pc, #40]	; (205b0 <.direct_call+0x10>)
   20588:	f000 fd86 	bl	21098 <Telium_Exit>

0002058c <.bad_return>:
   2058c:	bc0f      	pop	{r0, r1, r2, r3}
   2058e:	2000      	movs	r0, #0
   20590:	469e      	mov	lr, r3
   20592:	bc08      	pop	{r3}
   20594:	4770      	bx	lr

00020596 <.already_initialized>:
   20596:	4684      	mov	ip, r0
   20598:	bc0f      	pop	{r0, r1, r2, r3}
   2059a:	469e      	mov	lr, r3
   2059c:	bc08      	pop	{r3}

0002059e <.call_function>:
   2059e:	4760      	bx	ip

000205a0 <.direct_call>:
   205a0:	469c      	mov	ip, r3
   205a2:	bc08      	pop	{r3}
   205a4:	4760      	bx	ip
   205a6:	0000      	.short	0x0000
   205a8:	0002f934 	.word	0x0002f934
   205ac:	00020550 	.word	0x00020550
   205b0:	00000a00 	.word	0x00000a00

000205b4 <function_name>:
   205b4:	53497349 	.word	0x53497349
   205b8:	314f      	.short	0x314f
	...

000205bc <IsISO1>:
   205bc:	b408      	push	{r3}
   205be:	4b11      	ldr	r3, [pc, #68]	; (20604 <.direct_call+0x8>)
   205c0:	681b      	ldr	r3, [r3, #0]
   205c2:	2b00      	cmp	r3, #0
   205c4:	d11a      	bne.n	205fc <.direct_call>
   205c6:	b507      	push	{r0, r1, r2, lr}
   205c8:	f7ff f9e0 	bl	1f98c <extenslib_open>
   205cc:	2800      	cmp	r0, #0
   205ce:	d00b      	beq.n	205e8 <.bad_return>
   205d0:	4684      	mov	ip, r0
   205d2:	480d      	ldr	r0, [pc, #52]	; (20608 <.direct_call+0xc>)
   205d4:	f000 f811 	bl	205fa <.call_function>
   205d8:	2800      	cmp	r0, #0
   205da:	d002      	beq.n	205e2 <.exit_return>
   205dc:	4909      	ldr	r1, [pc, #36]	; (20604 <.direct_call+0x8>)
   205de:	6008      	str	r0, [r1, #0]
   205e0:	e007      	b.n	205f2 <.already_initialized>

000205e2 <.exit_return>:
   205e2:	480a      	ldr	r0, [pc, #40]	; (2060c <.direct_call+0x10>)
   205e4:	f000 fd58 	bl	21098 <Telium_Exit>

000205e8 <.bad_return>:
   205e8:	bc0f      	pop	{r0, r1, r2, r3}
   205ea:	2000      	movs	r0, #0
   205ec:	469e      	mov	lr, r3
   205ee:	bc08      	pop	{r3}
   205f0:	4770      	bx	lr

000205f2 <.already_initialized>:
   205f2:	4684      	mov	ip, r0
   205f4:	bc0f      	pop	{r0, r1, r2, r3}
   205f6:	469e      	mov	lr, r3
   205f8:	bc08      	pop	{r3}

000205fa <.call_function>:
   205fa:	4760      	bx	ip

000205fc <.direct_call>:
   205fc:	469c      	mov	ip, r3
   205fe:	bc08      	pop	{r3}
   20600:	4760      	bx	ip
   20602:	0000      	.short	0x0000
   20604:	0002f938 	.word	0x0002f938
   20608:	000205b4 	.word	0x000205b4
   2060c:	00000a00 	.word	0x00000a00

00020610 <function_name>:
   20610:	53497349 	.word	0x53497349
   20614:	324f      	.short	0x324f
	...

00020618 <IsISO2>:
   20618:	b408      	push	{r3}
   2061a:	4b11      	ldr	r3, [pc, #68]	; (20660 <.direct_call+0x8>)
   2061c:	681b      	ldr	r3, [r3, #0]
   2061e:	2b00      	cmp	r3, #0
   20620:	d11a      	bne.n	20658 <.direct_call>
   20622:	b507      	push	{r0, r1, r2, lr}
   20624:	f7ff f9b2 	bl	1f98c <extenslib_open>
   20628:	2800      	cmp	r0, #0
   2062a:	d00b      	beq.n	20644 <.bad_return>
   2062c:	4684      	mov	ip, r0
   2062e:	480d      	ldr	r0, [pc, #52]	; (20664 <.direct_call+0xc>)
   20630:	f000 f811 	bl	20656 <.call_function>
   20634:	2800      	cmp	r0, #0
   20636:	d002      	beq.n	2063e <.exit_return>
   20638:	4909      	ldr	r1, [pc, #36]	; (20660 <.direct_call+0x8>)
   2063a:	6008      	str	r0, [r1, #0]
   2063c:	e007      	b.n	2064e <.already_initialized>

0002063e <.exit_return>:
   2063e:	480a      	ldr	r0, [pc, #40]	; (20668 <.direct_call+0x10>)
   20640:	f000 fd2a 	bl	21098 <Telium_Exit>

00020644 <.bad_return>:
   20644:	bc0f      	pop	{r0, r1, r2, r3}
   20646:	2000      	movs	r0, #0
   20648:	469e      	mov	lr, r3
   2064a:	bc08      	pop	{r3}
   2064c:	4770      	bx	lr

0002064e <.already_initialized>:
   2064e:	4684      	mov	ip, r0
   20650:	bc0f      	pop	{r0, r1, r2, r3}
   20652:	469e      	mov	lr, r3
   20654:	bc08      	pop	{r3}

00020656 <.call_function>:
   20656:	4760      	bx	ip

00020658 <.direct_call>:
   20658:	469c      	mov	ip, r3
   2065a:	bc08      	pop	{r3}
   2065c:	4760      	bx	ip
   2065e:	0000      	.short	0x0000
   20660:	0002f93c 	.word	0x0002f93c
   20664:	00020610 	.word	0x00020610
   20668:	00000a00 	.word	0x00000a00

0002066c <function_name>:
   2066c:	53497349 	.word	0x53497349
   20670:	334f      	.short	0x334f
	...

00020674 <IsISO3>:
   20674:	b408      	push	{r3}
   20676:	4b11      	ldr	r3, [pc, #68]	; (206bc <.direct_call+0x8>)
   20678:	681b      	ldr	r3, [r3, #0]
   2067a:	2b00      	cmp	r3, #0
   2067c:	d11a      	bne.n	206b4 <.direct_call>
   2067e:	b507      	push	{r0, r1, r2, lr}
   20680:	f7ff f984 	bl	1f98c <extenslib_open>
   20684:	2800      	cmp	r0, #0
   20686:	d00b      	beq.n	206a0 <.bad_return>
   20688:	4684      	mov	ip, r0
   2068a:	480d      	ldr	r0, [pc, #52]	; (206c0 <.direct_call+0xc>)
   2068c:	f000 f811 	bl	206b2 <.call_function>
   20690:	2800      	cmp	r0, #0
   20692:	d002      	beq.n	2069a <.exit_return>
   20694:	4909      	ldr	r1, [pc, #36]	; (206bc <.direct_call+0x8>)
   20696:	6008      	str	r0, [r1, #0]
   20698:	e007      	b.n	206aa <.already_initialized>

0002069a <.exit_return>:
   2069a:	480a      	ldr	r0, [pc, #40]	; (206c4 <.direct_call+0x10>)
   2069c:	f000 fcfc 	bl	21098 <Telium_Exit>

000206a0 <.bad_return>:
   206a0:	bc0f      	pop	{r0, r1, r2, r3}
   206a2:	2000      	movs	r0, #0
   206a4:	469e      	mov	lr, r3
   206a6:	bc08      	pop	{r3}
   206a8:	4770      	bx	lr

000206aa <.already_initialized>:
   206aa:	4684      	mov	ip, r0
   206ac:	bc0f      	pop	{r0, r1, r2, r3}
   206ae:	469e      	mov	lr, r3
   206b0:	bc08      	pop	{r3}

000206b2 <.call_function>:
   206b2:	4760      	bx	ip

000206b4 <.direct_call>:
   206b4:	469c      	mov	ip, r3
   206b6:	bc08      	pop	{r3}
   206b8:	4760      	bx	ip
   206ba:	0000      	.short	0x0000
   206bc:	0002f940 	.word	0x0002f940
   206c0:	0002066c 	.word	0x0002066c
   206c4:	00000a00 	.word	0x00000a00

000206c8 <function_name>:
   206c8:	72507349 	.word	0x72507349
   206cc:	65746e69 	.word	0x65746e69
   206d0:	0072      	.short	0x0072
   206d2:	bf00      	nop

000206d4 <IsPrinter>:
   206d4:	b408      	push	{r3}
   206d6:	4b11      	ldr	r3, [pc, #68]	; (2071c <.direct_call+0x8>)
   206d8:	681b      	ldr	r3, [r3, #0]
   206da:	2b00      	cmp	r3, #0
   206dc:	d11a      	bne.n	20714 <.direct_call>
   206de:	b507      	push	{r0, r1, r2, lr}
   206e0:	f7ff f954 	bl	1f98c <extenslib_open>
   206e4:	2800      	cmp	r0, #0
   206e6:	d00b      	beq.n	20700 <.bad_return>
   206e8:	4684      	mov	ip, r0
   206ea:	480d      	ldr	r0, [pc, #52]	; (20720 <.direct_call+0xc>)
   206ec:	f000 f811 	bl	20712 <.call_function>
   206f0:	2800      	cmp	r0, #0
   206f2:	d002      	beq.n	206fa <.exit_return>
   206f4:	4909      	ldr	r1, [pc, #36]	; (2071c <.direct_call+0x8>)
   206f6:	6008      	str	r0, [r1, #0]
   206f8:	e007      	b.n	2070a <.already_initialized>

000206fa <.exit_return>:
   206fa:	480a      	ldr	r0, [pc, #40]	; (20724 <.direct_call+0x10>)
   206fc:	f000 fccc 	bl	21098 <Telium_Exit>

00020700 <.bad_return>:
   20700:	bc0f      	pop	{r0, r1, r2, r3}
   20702:	2000      	movs	r0, #0
   20704:	469e      	mov	lr, r3
   20706:	bc08      	pop	{r3}
   20708:	4770      	bx	lr

0002070a <.already_initialized>:
   2070a:	4684      	mov	ip, r0
   2070c:	bc0f      	pop	{r0, r1, r2, r3}
   2070e:	469e      	mov	lr, r3
   20710:	bc08      	pop	{r3}

00020712 <.call_function>:
   20712:	4760      	bx	ip

00020714 <.direct_call>:
   20714:	469c      	mov	ip, r3
   20716:	bc08      	pop	{r3}
   20718:	4760      	bx	ip
   2071a:	0000      	.short	0x0000
   2071c:	0002f944 	.word	0x0002f944
   20720:	000206c8 	.word	0x000206c8
   20724:	00000a00 	.word	0x00000a00

00020728 <function_name>:
   20728:	696c6554 	.word	0x696c6554
   2072c:	535f6d75 	.word	0x535f6d75
   20730:	69767265 	.word	0x69767265
   20734:	65526563 	.word	0x65526563
   20738:	74736967 	.word	0x74736967
   2073c:	7265      	.short	0x7265
	...

00020740 <Telium_ServiceRegister>:
   20740:	b408      	push	{r3}
   20742:	4b0f      	ldr	r3, [pc, #60]	; (20780 <.direct_call+0x6>)
   20744:	681b      	ldr	r3, [r3, #0]
   20746:	2b00      	cmp	r3, #0
   20748:	d117      	bne.n	2077a <.direct_call>
   2074a:	b507      	push	{r0, r1, r2, lr}
   2074c:	f7ff f91e 	bl	1f98c <extenslib_open>
   20750:	2800      	cmp	r0, #0
   20752:	d008      	beq.n	20766 <.bad_return>
   20754:	4684      	mov	ip, r0
   20756:	480b      	ldr	r0, [pc, #44]	; (20784 <.direct_call+0xa>)
   20758:	f000 f80e 	bl	20778 <.call_function>
   2075c:	2800      	cmp	r0, #0
   2075e:	d002      	beq.n	20766 <.bad_return>
   20760:	4907      	ldr	r1, [pc, #28]	; (20780 <.direct_call+0x6>)
   20762:	6008      	str	r0, [r1, #0]
   20764:	e004      	b.n	20770 <.already_initialized>

00020766 <.bad_return>:
   20766:	bc0f      	pop	{r0, r1, r2, r3}
   20768:	4807      	ldr	r0, [pc, #28]	; (20788 <.direct_call+0xe>)
   2076a:	469e      	mov	lr, r3
   2076c:	bc08      	pop	{r3}
   2076e:	4770      	bx	lr

00020770 <.already_initialized>:
   20770:	4684      	mov	ip, r0
   20772:	bc0f      	pop	{r0, r1, r2, r3}
   20774:	469e      	mov	lr, r3
   20776:	bc08      	pop	{r3}

00020778 <.call_function>:
   20778:	4760      	bx	ip

0002077a <.direct_call>:
   2077a:	469c      	mov	ip, r3
   2077c:	bc08      	pop	{r3}
   2077e:	4760      	bx	ip
   20780:	0002f948 	.word	0x0002f948
   20784:	00020728 	.word	0x00020728
   20788:	ffffffff 	.word	0xffffffff

0002078c <Telium_Pprintf>:
   2078c:	b40f      	push	{r0, r1, r2, r3}
   2078e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20790:	ac06      	add	r4, sp, #24
   20792:	f854 5b04 	ldr.w	r5, [r4], #4
   20796:	9401      	str	r4, [sp, #4]
   20798:	f000 f824 	bl	207e4 <Telium_Stdprt>
   2079c:	4629      	mov	r1, r5
   2079e:	9a01      	ldr	r2, [sp, #4]
   207a0:	f000 fd44 	bl	2122c <Telium_Vfprintf>
   207a4:	1c43      	adds	r3, r0, #1
   207a6:	d104      	bne.n	207b2 <Telium_Pprintf+0x26>
   207a8:	2105      	movs	r1, #5
   207aa:	2000      	movs	r0, #0
   207ac:	f7ff fb44 	bl	1fe38 <Telium_Ttestall>
   207b0:	e7f1      	b.n	20796 <Telium_Pprintf+0xa>
   207b2:	e8bd 403e 	ldmia.w	sp!, {r1, r2, r3, r4, r5, lr}
   207b6:	b004      	add	sp, #16
   207b8:	4770      	bx	lr

000207ba <Telium_Printf>:
   207ba:	b40f      	push	{r0, r1, r2, r3}
   207bc:	b513      	push	{r0, r1, r4, lr}
   207be:	ab04      	add	r3, sp, #16
   207c0:	f853 4b04 	ldr.w	r4, [r3], #4
   207c4:	9301      	str	r3, [sp, #4]
   207c6:	f7ff fad3 	bl	1fd70 <Telium_Stdout>
   207ca:	4621      	mov	r1, r4
   207cc:	9a01      	ldr	r2, [sp, #4]
   207ce:	f000 fd2d 	bl	2122c <Telium_Vfprintf>
   207d2:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
   207d6:	b004      	add	sp, #16
   207d8:	4770      	bx	lr
	...

000207dc <periph_name>:
   207dc:	4e495250 	.word	0x4e495250
   207e0:	00524554 	.word	0x00524554

000207e4 <Telium_Stdprt>:
   207e4:	b402      	push	{r1}
   207e6:	b500      	push	{lr}
   207e8:	4803      	ldr	r0, [pc, #12]	; (207f8 <Telium_Stdprt+0x14>)
   207ea:	2100      	movs	r1, #0
   207ec:	f7ff faf2 	bl	1fdd4 <Telium_Stdperif>
   207f0:	bc02      	pop	{r1}
   207f2:	468e      	mov	lr, r1
   207f4:	bc02      	pop	{r1}
   207f6:	4770      	bx	lr
   207f8:	000207dc 	.word	0x000207dc

000207fc <Telium_Sprintf>:
   207fc:	b40e      	push	{r1, r2, r3}
   207fe:	b503      	push	{r0, r1, lr}
   20800:	9903      	ldr	r1, [sp, #12]
   20802:	b128      	cbz	r0, 20810 <Telium_Sprintf+0x14>
   20804:	b129      	cbz	r1, 20812 <Telium_Sprintf+0x16>
   20806:	aa04      	add	r2, sp, #16
   20808:	9201      	str	r2, [sp, #4]
   2080a:	f7e8 ea8c 	blx	8d24 <_init+0x1c4>
   2080e:	e001      	b.n	20814 <Telium_Sprintf+0x18>
   20810:	e000      	b.n	20814 <Telium_Sprintf+0x18>
   20812:	4608      	mov	r0, r1
   20814:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
   20818:	b003      	add	sp, #12
   2081a:	4770      	bx	lr

0002081c <function_name>:
   2081c:	6c707041 	.word	0x6c707041
   20820:	74616369 	.word	0x74616369
   20824:	476e6f69 	.word	0x476e6f69
   20828:	75437465 	.word	0x75437465
   2082c:	6e657272 	.word	0x6e657272
   20830:	0074      	.short	0x0074
   20832:	bf00      	nop

00020834 <ApplicationGetCurrent>:
   20834:	b408      	push	{r3}
   20836:	4b0f      	ldr	r3, [pc, #60]	; (20874 <.direct_call+0x6>)
   20838:	681b      	ldr	r3, [r3, #0]
   2083a:	2b00      	cmp	r3, #0
   2083c:	d117      	bne.n	2086e <.direct_call>
   2083e:	b507      	push	{r0, r1, r2, lr}
   20840:	f000 fd6a 	bl	21318 <wrapperlib_open>
   20844:	2800      	cmp	r0, #0
   20846:	d008      	beq.n	2085a <.bad_return>
   20848:	4684      	mov	ip, r0
   2084a:	480b      	ldr	r0, [pc, #44]	; (20878 <.direct_call+0xa>)
   2084c:	f000 f80e 	bl	2086c <.call_function>
   20850:	2800      	cmp	r0, #0
   20852:	d002      	beq.n	2085a <.bad_return>
   20854:	4907      	ldr	r1, [pc, #28]	; (20874 <.direct_call+0x6>)
   20856:	6008      	str	r0, [r1, #0]
   20858:	e004      	b.n	20864 <.already_initialized>

0002085a <.bad_return>:
   2085a:	bc0f      	pop	{r0, r1, r2, r3}
   2085c:	4807      	ldr	r0, [pc, #28]	; (2087c <.direct_call+0xe>)
   2085e:	469e      	mov	lr, r3
   20860:	bc08      	pop	{r3}
   20862:	4770      	bx	lr

00020864 <.already_initialized>:
   20864:	4684      	mov	ip, r0
   20866:	bc0f      	pop	{r0, r1, r2, r3}
   20868:	469e      	mov	lr, r3
   2086a:	bc08      	pop	{r3}

0002086c <.call_function>:
   2086c:	4760      	bx	ip

0002086e <.direct_call>:
   2086e:	469c      	mov	ip, r3
   20870:	bc08      	pop	{r3}
   20872:	4760      	bx	ip
   20874:	0002f94c 	.word	0x0002f94c
   20878:	0002081c 	.word	0x0002081c
   2087c:	ffffffff 	.word	0xffffffff

00020880 <function_name>:
   20880:	635f5346 	.word	0x635f5346
   20884:	65736f6c 	.word	0x65736f6c
   20888:	00          	.byte	0x00
   20889:	00          	.byte	0x00
   2088a:	bf00      	nop

0002088c <FS_close>:
   2088c:	b408      	push	{r3}
   2088e:	4b0f      	ldr	r3, [pc, #60]	; (208cc <.direct_call+0x6>)
   20890:	681b      	ldr	r3, [r3, #0]
   20892:	2b00      	cmp	r3, #0
   20894:	d117      	bne.n	208c6 <.direct_call>
   20896:	b507      	push	{r0, r1, r2, lr}
   20898:	f000 fd3e 	bl	21318 <wrapperlib_open>
   2089c:	2800      	cmp	r0, #0
   2089e:	d008      	beq.n	208b2 <.bad_return>
   208a0:	4684      	mov	ip, r0
   208a2:	480b      	ldr	r0, [pc, #44]	; (208d0 <.direct_call+0xa>)
   208a4:	f000 f80e 	bl	208c4 <.call_function>
   208a8:	2800      	cmp	r0, #0
   208aa:	d002      	beq.n	208b2 <.bad_return>
   208ac:	4907      	ldr	r1, [pc, #28]	; (208cc <.direct_call+0x6>)
   208ae:	6008      	str	r0, [r1, #0]
   208b0:	e004      	b.n	208bc <.already_initialized>

000208b2 <.bad_return>:
   208b2:	bc0f      	pop	{r0, r1, r2, r3}
   208b4:	4807      	ldr	r0, [pc, #28]	; (208d4 <.direct_call+0xe>)
   208b6:	469e      	mov	lr, r3
   208b8:	bc08      	pop	{r3}
   208ba:	4770      	bx	lr

000208bc <.already_initialized>:
   208bc:	4684      	mov	ip, r0
   208be:	bc0f      	pop	{r0, r1, r2, r3}
   208c0:	469e      	mov	lr, r3
   208c2:	bc08      	pop	{r3}

000208c4 <.call_function>:
   208c4:	4760      	bx	ip

000208c6 <.direct_call>:
   208c6:	469c      	mov	ip, r3
   208c8:	bc08      	pop	{r3}
   208ca:	4760      	bx	ip
   208cc:	0002f950 	.word	0x0002f950
   208d0:	00020880 	.word	0x00020880
   208d4:	ffffffff 	.word	0xffffffff

000208d8 <function_name>:
   208d8:	645f5346 	.word	0x645f5346
   208dc:	72636b73 	.word	0x72636b73
   208e0:	65746165 	.word	0x65746165
   208e4:	00          	.byte	0x00
   208e5:	00          	.byte	0x00
   208e6:	bf00      	nop

000208e8 <FS_dskcreate>:
   208e8:	b408      	push	{r3}
   208ea:	4b0f      	ldr	r3, [pc, #60]	; (20928 <.direct_call+0x6>)
   208ec:	681b      	ldr	r3, [r3, #0]
   208ee:	2b00      	cmp	r3, #0
   208f0:	d117      	bne.n	20922 <.direct_call>
   208f2:	b507      	push	{r0, r1, r2, lr}
   208f4:	f000 fd10 	bl	21318 <wrapperlib_open>
   208f8:	2800      	cmp	r0, #0
   208fa:	d008      	beq.n	2090e <.bad_return>
   208fc:	4684      	mov	ip, r0
   208fe:	480b      	ldr	r0, [pc, #44]	; (2092c <.direct_call+0xa>)
   20900:	f000 f80e 	bl	20920 <.call_function>
   20904:	2800      	cmp	r0, #0
   20906:	d002      	beq.n	2090e <.bad_return>
   20908:	4907      	ldr	r1, [pc, #28]	; (20928 <.direct_call+0x6>)
   2090a:	6008      	str	r0, [r1, #0]
   2090c:	e004      	b.n	20918 <.already_initialized>

0002090e <.bad_return>:
   2090e:	bc0f      	pop	{r0, r1, r2, r3}
   20910:	4807      	ldr	r0, [pc, #28]	; (20930 <.direct_call+0xe>)
   20912:	469e      	mov	lr, r3
   20914:	bc08      	pop	{r3}
   20916:	4770      	bx	lr

00020918 <.already_initialized>:
   20918:	4684      	mov	ip, r0
   2091a:	bc0f      	pop	{r0, r1, r2, r3}
   2091c:	469e      	mov	lr, r3
   2091e:	bc08      	pop	{r3}

00020920 <.call_function>:
   20920:	4760      	bx	ip

00020922 <.direct_call>:
   20922:	469c      	mov	ip, r3
   20924:	bc08      	pop	{r3}
   20926:	4760      	bx	ip
   20928:	0002f954 	.word	0x0002f954
   2092c:	000208d8 	.word	0x000208d8
   20930:	ffffffff 	.word	0xffffffff

00020934 <function_name>:
   20934:	655f5346 	.word	0x655f5346
   20938:	74736978 	.word	0x74736978
   2093c:	00          	.byte	0x00
   2093d:	00          	.byte	0x00
   2093e:	bf00      	nop

00020940 <FS_exist>:
   20940:	b408      	push	{r3}
   20942:	4b0f      	ldr	r3, [pc, #60]	; (20980 <.direct_call+0x6>)
   20944:	681b      	ldr	r3, [r3, #0]
   20946:	2b00      	cmp	r3, #0
   20948:	d117      	bne.n	2097a <.direct_call>
   2094a:	b507      	push	{r0, r1, r2, lr}
   2094c:	f000 fce4 	bl	21318 <wrapperlib_open>
   20950:	2800      	cmp	r0, #0
   20952:	d008      	beq.n	20966 <.bad_return>
   20954:	4684      	mov	ip, r0
   20956:	480b      	ldr	r0, [pc, #44]	; (20984 <.direct_call+0xa>)
   20958:	f000 f80e 	bl	20978 <.call_function>
   2095c:	2800      	cmp	r0, #0
   2095e:	d002      	beq.n	20966 <.bad_return>
   20960:	4907      	ldr	r1, [pc, #28]	; (20980 <.direct_call+0x6>)
   20962:	6008      	str	r0, [r1, #0]
   20964:	e004      	b.n	20970 <.already_initialized>

00020966 <.bad_return>:
   20966:	bc0f      	pop	{r0, r1, r2, r3}
   20968:	4807      	ldr	r0, [pc, #28]	; (20988 <.direct_call+0xe>)
   2096a:	469e      	mov	lr, r3
   2096c:	bc08      	pop	{r3}
   2096e:	4770      	bx	lr

00020970 <.already_initialized>:
   20970:	4684      	mov	ip, r0
   20972:	bc0f      	pop	{r0, r1, r2, r3}
   20974:	469e      	mov	lr, r3
   20976:	bc08      	pop	{r3}

00020978 <.call_function>:
   20978:	4760      	bx	ip

0002097a <.direct_call>:
   2097a:	469c      	mov	ip, r3
   2097c:	bc08      	pop	{r3}
   2097e:	4760      	bx	ip
   20980:	0002f958 	.word	0x0002f958
   20984:	00020934 	.word	0x00020934
   20988:	ffffffff 	.word	0xffffffff

0002098c <function_name>:
   2098c:	6c5f5346 	.word	0x6c5f5346
   20990:	74676e65 	.word	0x74676e65
   20994:	0068      	.short	0x0068
   20996:	bf00      	nop

00020998 <FS_length>:
   20998:	b408      	push	{r3}
   2099a:	4b0f      	ldr	r3, [pc, #60]	; (209d8 <.direct_call+0x6>)
   2099c:	681b      	ldr	r3, [r3, #0]
   2099e:	2b00      	cmp	r3, #0
   209a0:	d117      	bne.n	209d2 <.direct_call>
   209a2:	b507      	push	{r0, r1, r2, lr}
   209a4:	f000 fcb8 	bl	21318 <wrapperlib_open>
   209a8:	2800      	cmp	r0, #0
   209aa:	d008      	beq.n	209be <.bad_return>
   209ac:	4684      	mov	ip, r0
   209ae:	480b      	ldr	r0, [pc, #44]	; (209dc <.direct_call+0xa>)
   209b0:	f000 f80e 	bl	209d0 <.call_function>
   209b4:	2800      	cmp	r0, #0
   209b6:	d002      	beq.n	209be <.bad_return>
   209b8:	4907      	ldr	r1, [pc, #28]	; (209d8 <.direct_call+0x6>)
   209ba:	6008      	str	r0, [r1, #0]
   209bc:	e004      	b.n	209c8 <.already_initialized>

000209be <.bad_return>:
   209be:	bc0f      	pop	{r0, r1, r2, r3}
   209c0:	4807      	ldr	r0, [pc, #28]	; (209e0 <.direct_call+0xe>)
   209c2:	469e      	mov	lr, r3
   209c4:	bc08      	pop	{r3}
   209c6:	4770      	bx	lr

000209c8 <.already_initialized>:
   209c8:	4684      	mov	ip, r0
   209ca:	bc0f      	pop	{r0, r1, r2, r3}
   209cc:	469e      	mov	lr, r3
   209ce:	bc08      	pop	{r3}

000209d0 <.call_function>:
   209d0:	4760      	bx	ip

000209d2 <.direct_call>:
   209d2:	469c      	mov	ip, r3
   209d4:	bc08      	pop	{r3}
   209d6:	4760      	bx	ip
   209d8:	0002f95c 	.word	0x0002f95c
   209dc:	0002098c 	.word	0x0002098c
   209e0:	ffffffff 	.word	0xffffffff

000209e4 <function_name>:
   209e4:	6d5f5346 	.word	0x6d5f5346
   209e8:	746e756f 	.word	0x746e756f
   209ec:	00          	.byte	0x00
   209ed:	00          	.byte	0x00
   209ee:	bf00      	nop

000209f0 <FS_mount>:
   209f0:	b408      	push	{r3}
   209f2:	4b0f      	ldr	r3, [pc, #60]	; (20a30 <.direct_call+0x6>)
   209f4:	681b      	ldr	r3, [r3, #0]
   209f6:	2b00      	cmp	r3, #0
   209f8:	d117      	bne.n	20a2a <.direct_call>
   209fa:	b507      	push	{r0, r1, r2, lr}
   209fc:	f000 fc8c 	bl	21318 <wrapperlib_open>
   20a00:	2800      	cmp	r0, #0
   20a02:	d008      	beq.n	20a16 <.bad_return>
   20a04:	4684      	mov	ip, r0
   20a06:	480b      	ldr	r0, [pc, #44]	; (20a34 <.direct_call+0xa>)
   20a08:	f000 f80e 	bl	20a28 <.call_function>
   20a0c:	2800      	cmp	r0, #0
   20a0e:	d002      	beq.n	20a16 <.bad_return>
   20a10:	4907      	ldr	r1, [pc, #28]	; (20a30 <.direct_call+0x6>)
   20a12:	6008      	str	r0, [r1, #0]
   20a14:	e004      	b.n	20a20 <.already_initialized>

00020a16 <.bad_return>:
   20a16:	bc0f      	pop	{r0, r1, r2, r3}
   20a18:	4807      	ldr	r0, [pc, #28]	; (20a38 <.direct_call+0xe>)
   20a1a:	469e      	mov	lr, r3
   20a1c:	bc08      	pop	{r3}
   20a1e:	4770      	bx	lr

00020a20 <.already_initialized>:
   20a20:	4684      	mov	ip, r0
   20a22:	bc0f      	pop	{r0, r1, r2, r3}
   20a24:	469e      	mov	lr, r3
   20a26:	bc08      	pop	{r3}

00020a28 <.call_function>:
   20a28:	4760      	bx	ip

00020a2a <.direct_call>:
   20a2a:	469c      	mov	ip, r3
   20a2c:	bc08      	pop	{r3}
   20a2e:	4760      	bx	ip
   20a30:	0002f960 	.word	0x0002f960
   20a34:	000209e4 	.word	0x000209e4
   20a38:	ffffffff 	.word	0xffffffff

00020a3c <function_name>:
   20a3c:	6f5f5346 	.word	0x6f5f5346
   20a40:	006e6570 	.word	0x006e6570

00020a44 <FS_open>:
   20a44:	b408      	push	{r3}
   20a46:	4b0f      	ldr	r3, [pc, #60]	; (20a84 <.direct_call+0x6>)
   20a48:	681b      	ldr	r3, [r3, #0]
   20a4a:	2b00      	cmp	r3, #0
   20a4c:	d117      	bne.n	20a7e <.direct_call>
   20a4e:	b507      	push	{r0, r1, r2, lr}
   20a50:	f000 fc62 	bl	21318 <wrapperlib_open>
   20a54:	2800      	cmp	r0, #0
   20a56:	d008      	beq.n	20a6a <.bad_return>
   20a58:	4684      	mov	ip, r0
   20a5a:	480b      	ldr	r0, [pc, #44]	; (20a88 <.direct_call+0xa>)
   20a5c:	f000 f80e 	bl	20a7c <.call_function>
   20a60:	2800      	cmp	r0, #0
   20a62:	d002      	beq.n	20a6a <.bad_return>
   20a64:	4907      	ldr	r1, [pc, #28]	; (20a84 <.direct_call+0x6>)
   20a66:	6008      	str	r0, [r1, #0]
   20a68:	e004      	b.n	20a74 <.already_initialized>

00020a6a <.bad_return>:
   20a6a:	bc0f      	pop	{r0, r1, r2, r3}
   20a6c:	4807      	ldr	r0, [pc, #28]	; (20a8c <.direct_call+0xe>)
   20a6e:	469e      	mov	lr, r3
   20a70:	bc08      	pop	{r3}
   20a72:	4770      	bx	lr

00020a74 <.already_initialized>:
   20a74:	4684      	mov	ip, r0
   20a76:	bc0f      	pop	{r0, r1, r2, r3}
   20a78:	469e      	mov	lr, r3
   20a7a:	bc08      	pop	{r3}

00020a7c <.call_function>:
   20a7c:	4760      	bx	ip

00020a7e <.direct_call>:
   20a7e:	469c      	mov	ip, r3
   20a80:	bc08      	pop	{r3}
   20a82:	4760      	bx	ip
   20a84:	0002f964 	.word	0x0002f964
   20a88:	00020a3c 	.word	0x00020a3c
   20a8c:	ffffffff 	.word	0xffffffff

00020a90 <function_name>:
   20a90:	725f5346 	.word	0x725f5346
   20a94:	00646165 	.word	0x00646165

00020a98 <FS_read>:
   20a98:	b408      	push	{r3}
   20a9a:	4b0f      	ldr	r3, [pc, #60]	; (20ad8 <.direct_call+0x6>)
   20a9c:	681b      	ldr	r3, [r3, #0]
   20a9e:	2b00      	cmp	r3, #0
   20aa0:	d117      	bne.n	20ad2 <.direct_call>
   20aa2:	b507      	push	{r0, r1, r2, lr}
   20aa4:	f000 fc38 	bl	21318 <wrapperlib_open>
   20aa8:	2800      	cmp	r0, #0
   20aaa:	d008      	beq.n	20abe <.bad_return>
   20aac:	4684      	mov	ip, r0
   20aae:	480b      	ldr	r0, [pc, #44]	; (20adc <.direct_call+0xa>)
   20ab0:	f000 f80e 	bl	20ad0 <.call_function>
   20ab4:	2800      	cmp	r0, #0
   20ab6:	d002      	beq.n	20abe <.bad_return>
   20ab8:	4907      	ldr	r1, [pc, #28]	; (20ad8 <.direct_call+0x6>)
   20aba:	6008      	str	r0, [r1, #0]
   20abc:	e004      	b.n	20ac8 <.already_initialized>

00020abe <.bad_return>:
   20abe:	bc0f      	pop	{r0, r1, r2, r3}
   20ac0:	4807      	ldr	r0, [pc, #28]	; (20ae0 <.direct_call+0xe>)
   20ac2:	469e      	mov	lr, r3
   20ac4:	bc08      	pop	{r3}
   20ac6:	4770      	bx	lr

00020ac8 <.already_initialized>:
   20ac8:	4684      	mov	ip, r0
   20aca:	bc0f      	pop	{r0, r1, r2, r3}
   20acc:	469e      	mov	lr, r3
   20ace:	bc08      	pop	{r3}

00020ad0 <.call_function>:
   20ad0:	4760      	bx	ip

00020ad2 <.direct_call>:
   20ad2:	469c      	mov	ip, r3
   20ad4:	bc08      	pop	{r3}
   20ad6:	4760      	bx	ip
   20ad8:	0002f968 	.word	0x0002f968
   20adc:	00020a90 	.word	0x00020a90
   20ae0:	ffffffff 	.word	0xffffffff

00020ae4 <function_name>:
   20ae4:	725f5346 	.word	0x725f5346
   20ae8:	6d616e65 	.word	0x6d616e65
   20aec:	0065      	.short	0x0065
   20aee:	bf00      	nop

00020af0 <FS_rename>:
   20af0:	b408      	push	{r3}
   20af2:	4b0f      	ldr	r3, [pc, #60]	; (20b30 <.direct_call+0x6>)
   20af4:	681b      	ldr	r3, [r3, #0]
   20af6:	2b00      	cmp	r3, #0
   20af8:	d117      	bne.n	20b2a <.direct_call>
   20afa:	b507      	push	{r0, r1, r2, lr}
   20afc:	f000 fc0c 	bl	21318 <wrapperlib_open>
   20b00:	2800      	cmp	r0, #0
   20b02:	d008      	beq.n	20b16 <.bad_return>
   20b04:	4684      	mov	ip, r0
   20b06:	480b      	ldr	r0, [pc, #44]	; (20b34 <.direct_call+0xa>)
   20b08:	f000 f80e 	bl	20b28 <.call_function>
   20b0c:	2800      	cmp	r0, #0
   20b0e:	d002      	beq.n	20b16 <.bad_return>
   20b10:	4907      	ldr	r1, [pc, #28]	; (20b30 <.direct_call+0x6>)
   20b12:	6008      	str	r0, [r1, #0]
   20b14:	e004      	b.n	20b20 <.already_initialized>

00020b16 <.bad_return>:
   20b16:	bc0f      	pop	{r0, r1, r2, r3}
   20b18:	4807      	ldr	r0, [pc, #28]	; (20b38 <.direct_call+0xe>)
   20b1a:	469e      	mov	lr, r3
   20b1c:	bc08      	pop	{r3}
   20b1e:	4770      	bx	lr

00020b20 <.already_initialized>:
   20b20:	4684      	mov	ip, r0
   20b22:	bc0f      	pop	{r0, r1, r2, r3}
   20b24:	469e      	mov	lr, r3
   20b26:	bc08      	pop	{r3}

00020b28 <.call_function>:
   20b28:	4760      	bx	ip

00020b2a <.direct_call>:
   20b2a:	469c      	mov	ip, r3
   20b2c:	bc08      	pop	{r3}
   20b2e:	4760      	bx	ip
   20b30:	0002f96c 	.word	0x0002f96c
   20b34:	00020ae4 	.word	0x00020ae4
   20b38:	ffffffff 	.word	0xffffffff

00020b3c <function_name>:
   20b3c:	735f5346 	.word	0x735f5346
   20b40:	006b6565 	.word	0x006b6565

00020b44 <FS_seek>:
   20b44:	b408      	push	{r3}
   20b46:	4b0f      	ldr	r3, [pc, #60]	; (20b84 <.direct_call+0x6>)
   20b48:	681b      	ldr	r3, [r3, #0]
   20b4a:	2b00      	cmp	r3, #0
   20b4c:	d117      	bne.n	20b7e <.direct_call>
   20b4e:	b507      	push	{r0, r1, r2, lr}
   20b50:	f000 fbe2 	bl	21318 <wrapperlib_open>
   20b54:	2800      	cmp	r0, #0
   20b56:	d008      	beq.n	20b6a <.bad_return>
   20b58:	4684      	mov	ip, r0
   20b5a:	480b      	ldr	r0, [pc, #44]	; (20b88 <.direct_call+0xa>)
   20b5c:	f000 f80e 	bl	20b7c <.call_function>
   20b60:	2800      	cmp	r0, #0
   20b62:	d002      	beq.n	20b6a <.bad_return>
   20b64:	4907      	ldr	r1, [pc, #28]	; (20b84 <.direct_call+0x6>)
   20b66:	6008      	str	r0, [r1, #0]
   20b68:	e004      	b.n	20b74 <.already_initialized>

00020b6a <.bad_return>:
   20b6a:	bc0f      	pop	{r0, r1, r2, r3}
   20b6c:	2000      	movs	r0, #0
   20b6e:	469e      	mov	lr, r3
   20b70:	bc08      	pop	{r3}
   20b72:	4770      	bx	lr

00020b74 <.already_initialized>:
   20b74:	4684      	mov	ip, r0
   20b76:	bc0f      	pop	{r0, r1, r2, r3}
   20b78:	469e      	mov	lr, r3
   20b7a:	bc08      	pop	{r3}

00020b7c <.call_function>:
   20b7c:	4760      	bx	ip

00020b7e <.direct_call>:
   20b7e:	469c      	mov	ip, r3
   20b80:	bc08      	pop	{r3}
   20b82:	4760      	bx	ip
   20b84:	0002f970 	.word	0x0002f970
   20b88:	00020b3c 	.word	0x00020b3c

00020b8c <function_name>:
   20b8c:	755f5346 	.word	0x755f5346
   20b90:	6e696c6e 	.word	0x6e696c6e
   20b94:	006b      	.short	0x006b
   20b96:	bf00      	nop

00020b98 <FS_unlink>:
   20b98:	b408      	push	{r3}
   20b9a:	4b0f      	ldr	r3, [pc, #60]	; (20bd8 <.direct_call+0x6>)
   20b9c:	681b      	ldr	r3, [r3, #0]
   20b9e:	2b00      	cmp	r3, #0
   20ba0:	d117      	bne.n	20bd2 <.direct_call>
   20ba2:	b507      	push	{r0, r1, r2, lr}
   20ba4:	f000 fbb8 	bl	21318 <wrapperlib_open>
   20ba8:	2800      	cmp	r0, #0
   20baa:	d008      	beq.n	20bbe <.bad_return>
   20bac:	4684      	mov	ip, r0
   20bae:	480b      	ldr	r0, [pc, #44]	; (20bdc <.direct_call+0xa>)
   20bb0:	f000 f80e 	bl	20bd0 <.call_function>
   20bb4:	2800      	cmp	r0, #0
   20bb6:	d002      	beq.n	20bbe <.bad_return>
   20bb8:	4907      	ldr	r1, [pc, #28]	; (20bd8 <.direct_call+0x6>)
   20bba:	6008      	str	r0, [r1, #0]
   20bbc:	e004      	b.n	20bc8 <.already_initialized>

00020bbe <.bad_return>:
   20bbe:	bc0f      	pop	{r0, r1, r2, r3}
   20bc0:	4807      	ldr	r0, [pc, #28]	; (20be0 <.direct_call+0xe>)
   20bc2:	469e      	mov	lr, r3
   20bc4:	bc08      	pop	{r3}
   20bc6:	4770      	bx	lr

00020bc8 <.already_initialized>:
   20bc8:	4684      	mov	ip, r0
   20bca:	bc0f      	pop	{r0, r1, r2, r3}
   20bcc:	469e      	mov	lr, r3
   20bce:	bc08      	pop	{r3}

00020bd0 <.call_function>:
   20bd0:	4760      	bx	ip

00020bd2 <.direct_call>:
   20bd2:	469c      	mov	ip, r3
   20bd4:	bc08      	pop	{r3}
   20bd6:	4760      	bx	ip
   20bd8:	0002f974 	.word	0x0002f974
   20bdc:	00020b8c 	.word	0x00020b8c
   20be0:	ffffffff 	.word	0xffffffff

00020be4 <function_name>:
   20be4:	755f5346 	.word	0x755f5346
   20be8:	756f6d6e 	.word	0x756f6d6e
   20bec:	746e      	.short	0x746e
	...

00020bf0 <FS_unmount>:
   20bf0:	b408      	push	{r3}
   20bf2:	4b0f      	ldr	r3, [pc, #60]	; (20c30 <.direct_call+0x6>)
   20bf4:	681b      	ldr	r3, [r3, #0]
   20bf6:	2b00      	cmp	r3, #0
   20bf8:	d117      	bne.n	20c2a <.direct_call>
   20bfa:	b507      	push	{r0, r1, r2, lr}
   20bfc:	f000 fb8c 	bl	21318 <wrapperlib_open>
   20c00:	2800      	cmp	r0, #0
   20c02:	d008      	beq.n	20c16 <.bad_return>
   20c04:	4684      	mov	ip, r0
   20c06:	480b      	ldr	r0, [pc, #44]	; (20c34 <.direct_call+0xa>)
   20c08:	f000 f80e 	bl	20c28 <.call_function>
   20c0c:	2800      	cmp	r0, #0
   20c0e:	d002      	beq.n	20c16 <.bad_return>
   20c10:	4907      	ldr	r1, [pc, #28]	; (20c30 <.direct_call+0x6>)
   20c12:	6008      	str	r0, [r1, #0]
   20c14:	e004      	b.n	20c20 <.already_initialized>

00020c16 <.bad_return>:
   20c16:	bc0f      	pop	{r0, r1, r2, r3}
   20c18:	4807      	ldr	r0, [pc, #28]	; (20c38 <.direct_call+0xe>)
   20c1a:	469e      	mov	lr, r3
   20c1c:	bc08      	pop	{r3}
   20c1e:	4770      	bx	lr

00020c20 <.already_initialized>:
   20c20:	4684      	mov	ip, r0
   20c22:	bc0f      	pop	{r0, r1, r2, r3}
   20c24:	469e      	mov	lr, r3
   20c26:	bc08      	pop	{r3}

00020c28 <.call_function>:
   20c28:	4760      	bx	ip

00020c2a <.direct_call>:
   20c2a:	469c      	mov	ip, r3
   20c2c:	bc08      	pop	{r3}
   20c2e:	4760      	bx	ip
   20c30:	0002f978 	.word	0x0002f978
   20c34:	00020be4 	.word	0x00020be4
   20c38:	ffffffff 	.word	0xffffffff

00020c3c <function_name>:
   20c3c:	775f5346 	.word	0x775f5346
   20c40:	65746972 	.word	0x65746972
   20c44:	00          	.byte	0x00
   20c45:	00          	.byte	0x00
   20c46:	bf00      	nop

00020c48 <FS_write>:
   20c48:	b408      	push	{r3}
   20c4a:	4b0f      	ldr	r3, [pc, #60]	; (20c88 <.direct_call+0x6>)
   20c4c:	681b      	ldr	r3, [r3, #0]
   20c4e:	2b00      	cmp	r3, #0
   20c50:	d117      	bne.n	20c82 <.direct_call>
   20c52:	b507      	push	{r0, r1, r2, lr}
   20c54:	f000 fb60 	bl	21318 <wrapperlib_open>
   20c58:	2800      	cmp	r0, #0
   20c5a:	d008      	beq.n	20c6e <.bad_return>
   20c5c:	4684      	mov	ip, r0
   20c5e:	480b      	ldr	r0, [pc, #44]	; (20c8c <.direct_call+0xa>)
   20c60:	f000 f80e 	bl	20c80 <.call_function>
   20c64:	2800      	cmp	r0, #0
   20c66:	d002      	beq.n	20c6e <.bad_return>
   20c68:	4907      	ldr	r1, [pc, #28]	; (20c88 <.direct_call+0x6>)
   20c6a:	6008      	str	r0, [r1, #0]
   20c6c:	e004      	b.n	20c78 <.already_initialized>

00020c6e <.bad_return>:
   20c6e:	bc0f      	pop	{r0, r1, r2, r3}
   20c70:	4807      	ldr	r0, [pc, #28]	; (20c90 <.direct_call+0xe>)
   20c72:	469e      	mov	lr, r3
   20c74:	bc08      	pop	{r3}
   20c76:	4770      	bx	lr

00020c78 <.already_initialized>:
   20c78:	4684      	mov	ip, r0
   20c7a:	bc0f      	pop	{r0, r1, r2, r3}
   20c7c:	469e      	mov	lr, r3
   20c7e:	bc08      	pop	{r3}

00020c80 <.call_function>:
   20c80:	4760      	bx	ip

00020c82 <.direct_call>:
   20c82:	469c      	mov	ip, r3
   20c84:	bc08      	pop	{r3}
   20c86:	4760      	bx	ip
   20c88:	0002f97c 	.word	0x0002f97c
   20c8c:	00020c3c 	.word	0x00020c3c
   20c90:	ffffffff 	.word	0xffffffff

00020c94 <function_name>:
   20c94:	656a624f 	.word	0x656a624f
   20c98:	65477463 	.word	0x65477463
   20c9c:	73654474 	.word	0x73654474
   20ca0:	70697263 	.word	0x70697263
   20ca4:	00726f74 	.word	0x00726f74

00020ca8 <ObjectGetDescriptor>:
   20ca8:	b408      	push	{r3}
   20caa:	4b0f      	ldr	r3, [pc, #60]	; (20ce8 <.direct_call+0x6>)
   20cac:	681b      	ldr	r3, [r3, #0]
   20cae:	2b00      	cmp	r3, #0
   20cb0:	d117      	bne.n	20ce2 <.direct_call>
   20cb2:	b507      	push	{r0, r1, r2, lr}
   20cb4:	f000 fb30 	bl	21318 <wrapperlib_open>
   20cb8:	2800      	cmp	r0, #0
   20cba:	d008      	beq.n	20cce <.bad_return>
   20cbc:	4684      	mov	ip, r0
   20cbe:	480b      	ldr	r0, [pc, #44]	; (20cec <.direct_call+0xa>)
   20cc0:	f000 f80e 	bl	20ce0 <.call_function>
   20cc4:	2800      	cmp	r0, #0
   20cc6:	d002      	beq.n	20cce <.bad_return>
   20cc8:	4907      	ldr	r1, [pc, #28]	; (20ce8 <.direct_call+0x6>)
   20cca:	6008      	str	r0, [r1, #0]
   20ccc:	e004      	b.n	20cd8 <.already_initialized>

00020cce <.bad_return>:
   20cce:	bc0f      	pop	{r0, r1, r2, r3}
   20cd0:	4807      	ldr	r0, [pc, #28]	; (20cf0 <.direct_call+0xe>)
   20cd2:	469e      	mov	lr, r3
   20cd4:	bc08      	pop	{r3}
   20cd6:	4770      	bx	lr

00020cd8 <.already_initialized>:
   20cd8:	4684      	mov	ip, r0
   20cda:	bc0f      	pop	{r0, r1, r2, r3}
   20cdc:	469e      	mov	lr, r3
   20cde:	bc08      	pop	{r3}

00020ce0 <.call_function>:
   20ce0:	4760      	bx	ip

00020ce2 <.direct_call>:
   20ce2:	469c      	mov	ip, r3
   20ce4:	bc08      	pop	{r3}
   20ce6:	4760      	bx	ip
   20ce8:	0002f980 	.word	0x0002f980
   20cec:	00020c94 	.word	0x00020c94
   20cf0:	ffffffff 	.word	0xffffffff

00020cf4 <function_name>:
   20cf4:	656a624f 	.word	0x656a624f
   20cf8:	65477463 	.word	0x65477463
   20cfc:	666e4974 	.word	0x666e4974
   20d00:	006f      	.short	0x006f
   20d02:	bf00      	nop

00020d04 <ObjectGetInfo>:
   20d04:	b408      	push	{r3}
   20d06:	4b0f      	ldr	r3, [pc, #60]	; (20d44 <.direct_call+0x6>)
   20d08:	681b      	ldr	r3, [r3, #0]
   20d0a:	2b00      	cmp	r3, #0
   20d0c:	d117      	bne.n	20d3e <.direct_call>
   20d0e:	b507      	push	{r0, r1, r2, lr}
   20d10:	f000 fb02 	bl	21318 <wrapperlib_open>
   20d14:	2800      	cmp	r0, #0
   20d16:	d008      	beq.n	20d2a <.bad_return>
   20d18:	4684      	mov	ip, r0
   20d1a:	480b      	ldr	r0, [pc, #44]	; (20d48 <.direct_call+0xa>)
   20d1c:	f000 f80e 	bl	20d3c <.call_function>
   20d20:	2800      	cmp	r0, #0
   20d22:	d002      	beq.n	20d2a <.bad_return>
   20d24:	4907      	ldr	r1, [pc, #28]	; (20d44 <.direct_call+0x6>)
   20d26:	6008      	str	r0, [r1, #0]
   20d28:	e004      	b.n	20d34 <.already_initialized>

00020d2a <.bad_return>:
   20d2a:	bc0f      	pop	{r0, r1, r2, r3}
   20d2c:	4807      	ldr	r0, [pc, #28]	; (20d4c <.direct_call+0xe>)
   20d2e:	469e      	mov	lr, r3
   20d30:	bc08      	pop	{r3}
   20d32:	4770      	bx	lr

00020d34 <.already_initialized>:
   20d34:	4684      	mov	ip, r0
   20d36:	bc0f      	pop	{r0, r1, r2, r3}
   20d38:	469e      	mov	lr, r3
   20d3a:	bc08      	pop	{r3}

00020d3c <.call_function>:
   20d3c:	4760      	bx	ip

00020d3e <.direct_call>:
   20d3e:	469c      	mov	ip, r3
   20d40:	bc08      	pop	{r3}
   20d42:	4760      	bx	ip
   20d44:	0002f984 	.word	0x0002f984
   20d48:	00020cf4 	.word	0x00020cf4
   20d4c:	ffffffff 	.word	0xffffffff

00020d50 <function_name>:
   20d50:	65676150 	.word	0x65676150
   20d54:	6f6c6c41 	.word	0x6f6c6c41
   20d58:	0063      	.short	0x0063
   20d5a:	bf00      	nop

00020d5c <PageAlloc>:
   20d5c:	b408      	push	{r3}
   20d5e:	4b0f      	ldr	r3, [pc, #60]	; (20d9c <.direct_call+0x6>)
   20d60:	681b      	ldr	r3, [r3, #0]
   20d62:	2b00      	cmp	r3, #0
   20d64:	d117      	bne.n	20d96 <.direct_call>
   20d66:	b507      	push	{r0, r1, r2, lr}
   20d68:	f000 fad6 	bl	21318 <wrapperlib_open>
   20d6c:	2800      	cmp	r0, #0
   20d6e:	d008      	beq.n	20d82 <.bad_return>
   20d70:	4684      	mov	ip, r0
   20d72:	480b      	ldr	r0, [pc, #44]	; (20da0 <.direct_call+0xa>)
   20d74:	f000 f80e 	bl	20d94 <.call_function>
   20d78:	2800      	cmp	r0, #0
   20d7a:	d002      	beq.n	20d82 <.bad_return>
   20d7c:	4907      	ldr	r1, [pc, #28]	; (20d9c <.direct_call+0x6>)
   20d7e:	6008      	str	r0, [r1, #0]
   20d80:	e004      	b.n	20d8c <.already_initialized>

00020d82 <.bad_return>:
   20d82:	bc0f      	pop	{r0, r1, r2, r3}
   20d84:	2000      	movs	r0, #0
   20d86:	469e      	mov	lr, r3
   20d88:	bc08      	pop	{r3}
   20d8a:	4770      	bx	lr

00020d8c <.already_initialized>:
   20d8c:	4684      	mov	ip, r0
   20d8e:	bc0f      	pop	{r0, r1, r2, r3}
   20d90:	469e      	mov	lr, r3
   20d92:	bc08      	pop	{r3}

00020d94 <.call_function>:
   20d94:	4760      	bx	ip

00020d96 <.direct_call>:
   20d96:	469c      	mov	ip, r3
   20d98:	bc08      	pop	{r3}
   20d9a:	4760      	bx	ip
   20d9c:	0002f988 	.word	0x0002f988
   20da0:	00020d50 	.word	0x00020d50

00020da4 <function_name>:
   20da4:	65676150 	.word	0x65676150
   20da8:	65657246 	.word	0x65657246
   20dac:	00          	.byte	0x00
   20dad:	00          	.byte	0x00
   20dae:	bf00      	nop

00020db0 <PageFree>:
   20db0:	b408      	push	{r3}
   20db2:	4b0f      	ldr	r3, [pc, #60]	; (20df0 <.direct_call+0x6>)
   20db4:	681b      	ldr	r3, [r3, #0]
   20db6:	2b00      	cmp	r3, #0
   20db8:	d117      	bne.n	20dea <.direct_call>
   20dba:	b507      	push	{r0, r1, r2, lr}
   20dbc:	f000 faac 	bl	21318 <wrapperlib_open>
   20dc0:	2800      	cmp	r0, #0
   20dc2:	d008      	beq.n	20dd6 <.bad_return>
   20dc4:	4684      	mov	ip, r0
   20dc6:	480b      	ldr	r0, [pc, #44]	; (20df4 <.direct_call+0xa>)
   20dc8:	f000 f80e 	bl	20de8 <.call_function>
   20dcc:	2800      	cmp	r0, #0
   20dce:	d002      	beq.n	20dd6 <.bad_return>
   20dd0:	4907      	ldr	r1, [pc, #28]	; (20df0 <.direct_call+0x6>)
   20dd2:	6008      	str	r0, [r1, #0]
   20dd4:	e004      	b.n	20de0 <.already_initialized>

00020dd6 <.bad_return>:
   20dd6:	bc0f      	pop	{r0, r1, r2, r3}
   20dd8:	4807      	ldr	r0, [pc, #28]	; (20df8 <.direct_call+0xe>)
   20dda:	469e      	mov	lr, r3
   20ddc:	bc08      	pop	{r3}
   20dde:	4770      	bx	lr

00020de0 <.already_initialized>:
   20de0:	4684      	mov	ip, r0
   20de2:	bc0f      	pop	{r0, r1, r2, r3}
   20de4:	469e      	mov	lr, r3
   20de6:	bc08      	pop	{r3}

00020de8 <.call_function>:
   20de8:	4760      	bx	ip

00020dea <.direct_call>:
   20dea:	469c      	mov	ip, r3
   20dec:	bc08      	pop	{r3}
   20dee:	4760      	bx	ip
   20df0:	0002f98c 	.word	0x0002f98c
   20df4:	00020da4 	.word	0x00020da4
   20df8:	fffffffc 	.word	0xfffffffc

00020dfc <function_name>:
   20dfc:	73726966 	.word	0x73726966
   20e00:	6e695f74 	.word	0x6e695f74
   20e04:	7469      	.short	0x7469
	...

00020e08 <first_init>:
   20e08:	b408      	push	{r3}
   20e0a:	4b0f      	ldr	r3, [pc, #60]	; (20e48 <.direct_call+0x6>)
   20e0c:	681b      	ldr	r3, [r3, #0]
   20e0e:	2b00      	cmp	r3, #0
   20e10:	d117      	bne.n	20e42 <.direct_call>
   20e12:	b507      	push	{r0, r1, r2, lr}
   20e14:	f000 fa80 	bl	21318 <wrapperlib_open>
   20e18:	2800      	cmp	r0, #0
   20e1a:	d008      	beq.n	20e2e <.bad_return>
   20e1c:	4684      	mov	ip, r0
   20e1e:	480b      	ldr	r0, [pc, #44]	; (20e4c <.direct_call+0xa>)
   20e20:	f000 f80e 	bl	20e40 <.call_function>
   20e24:	2800      	cmp	r0, #0
   20e26:	d002      	beq.n	20e2e <.bad_return>
   20e28:	4907      	ldr	r1, [pc, #28]	; (20e48 <.direct_call+0x6>)
   20e2a:	6008      	str	r0, [r1, #0]
   20e2c:	e004      	b.n	20e38 <.already_initialized>

00020e2e <.bad_return>:
   20e2e:	bc0f      	pop	{r0, r1, r2, r3}
   20e30:	4807      	ldr	r0, [pc, #28]	; (20e50 <.direct_call+0xe>)
   20e32:	469e      	mov	lr, r3
   20e34:	bc08      	pop	{r3}
   20e36:	4770      	bx	lr

00020e38 <.already_initialized>:
   20e38:	4684      	mov	ip, r0
   20e3a:	bc0f      	pop	{r0, r1, r2, r3}
   20e3c:	469e      	mov	lr, r3
   20e3e:	bc08      	pop	{r3}

00020e40 <.call_function>:
   20e40:	4760      	bx	ip

00020e42 <.direct_call>:
   20e42:	469c      	mov	ip, r3
   20e44:	bc08      	pop	{r3}
   20e46:	4760      	bx	ip
   20e48:	0002f990 	.word	0x0002f990
   20e4c:	00020dfc 	.word	0x00020dfc
   20e50:	ffffffff 	.word	0xffffffff

00020e54 <function_name>:
   20e54:	5f7a6172 	.word	0x5f7a6172
   20e58:	74696e69 	.word	0x74696e69
   20e5c:	00          	.byte	0x00
   20e5d:	00          	.byte	0x00
   20e5e:	bf00      	nop

00020e60 <raz_init>:
   20e60:	b408      	push	{r3}
   20e62:	4b0f      	ldr	r3, [pc, #60]	; (20ea0 <.direct_call+0x6>)
   20e64:	681b      	ldr	r3, [r3, #0]
   20e66:	2b00      	cmp	r3, #0
   20e68:	d117      	bne.n	20e9a <.direct_call>
   20e6a:	b507      	push	{r0, r1, r2, lr}
   20e6c:	f000 fa54 	bl	21318 <wrapperlib_open>
   20e70:	2800      	cmp	r0, #0
   20e72:	d008      	beq.n	20e86 <.bad_return>
   20e74:	4684      	mov	ip, r0
   20e76:	480b      	ldr	r0, [pc, #44]	; (20ea4 <.direct_call+0xa>)
   20e78:	f000 f80e 	bl	20e98 <.call_function>
   20e7c:	2800      	cmp	r0, #0
   20e7e:	d002      	beq.n	20e86 <.bad_return>
   20e80:	4907      	ldr	r1, [pc, #28]	; (20ea0 <.direct_call+0x6>)
   20e82:	6008      	str	r0, [r1, #0]
   20e84:	e004      	b.n	20e90 <.already_initialized>

00020e86 <.bad_return>:
   20e86:	bc0f      	pop	{r0, r1, r2, r3}
   20e88:	4807      	ldr	r0, [pc, #28]	; (20ea8 <.direct_call+0xe>)
   20e8a:	469e      	mov	lr, r3
   20e8c:	bc08      	pop	{r3}
   20e8e:	4770      	bx	lr

00020e90 <.already_initialized>:
   20e90:	4684      	mov	ip, r0
   20e92:	bc0f      	pop	{r0, r1, r2, r3}
   20e94:	469e      	mov	lr, r3
   20e96:	bc08      	pop	{r3}

00020e98 <.call_function>:
   20e98:	4760      	bx	ip

00020e9a <.direct_call>:
   20e9a:	469c      	mov	ip, r3
   20e9c:	bc08      	pop	{r3}
   20e9e:	4760      	bx	ip
   20ea0:	0002f994 	.word	0x0002f994
   20ea4:	00020e54 	.word	0x00020e54
   20ea8:	ffffffff 	.word	0xffffffff

00020eac <function_name>:
   20eac:	5f554d45 	.word	0x5f554d45
   20eb0:	70736944 	.word	0x70736944
   20eb4:	4679616c 	.word	0x4679616c
   20eb8:	65746f6f 	.word	0x65746f6f
   20ebc:	0072      	.short	0x0072
   20ebe:	bf00      	nop

00020ec0 <DisplayFooter>:
   20ec0:	b408      	push	{r3}
   20ec2:	4b0f      	ldr	r3, [pc, #60]	; (20f00 <.direct_call+0x6>)
   20ec4:	681b      	ldr	r3, [r3, #0]
   20ec6:	2b00      	cmp	r3, #0
   20ec8:	d117      	bne.n	20efa <.direct_call>
   20eca:	b507      	push	{r0, r1, r2, lr}
   20ecc:	f000 f94e 	bl	2116c <emulationlib_open>
   20ed0:	2800      	cmp	r0, #0
   20ed2:	d008      	beq.n	20ee6 <.bad_return>
   20ed4:	4684      	mov	ip, r0
   20ed6:	480b      	ldr	r0, [pc, #44]	; (20f04 <.direct_call+0xa>)
   20ed8:	f000 f80e 	bl	20ef8 <.call_function>
   20edc:	2800      	cmp	r0, #0
   20ede:	d002      	beq.n	20ee6 <.bad_return>
   20ee0:	4907      	ldr	r1, [pc, #28]	; (20f00 <.direct_call+0x6>)
   20ee2:	6008      	str	r0, [r1, #0]
   20ee4:	e004      	b.n	20ef0 <.already_initialized>

00020ee6 <.bad_return>:
   20ee6:	bc0f      	pop	{r0, r1, r2, r3}
   20ee8:	4807      	ldr	r0, [pc, #28]	; (20f08 <.direct_call+0xe>)
   20eea:	469e      	mov	lr, r3
   20eec:	bc08      	pop	{r3}
   20eee:	4770      	bx	lr

00020ef0 <.already_initialized>:
   20ef0:	4684      	mov	ip, r0
   20ef2:	bc0f      	pop	{r0, r1, r2, r3}
   20ef4:	469e      	mov	lr, r3
   20ef6:	bc08      	pop	{r3}

00020ef8 <.call_function>:
   20ef8:	4760      	bx	ip

00020efa <.direct_call>:
   20efa:	469c      	mov	ip, r3
   20efc:	bc08      	pop	{r3}
   20efe:	4760      	bx	ip
   20f00:	0002f998 	.word	0x0002f998
   20f04:	00020eac 	.word	0x00020eac
   20f08:	ffffffff 	.word	0xffffffff

00020f0c <function_name>:
   20f0c:	5f554d45 	.word	0x5f554d45
   20f10:	70736944 	.word	0x70736944
   20f14:	4879616c 	.word	0x4879616c
   20f18:	65646165 	.word	0x65646165
   20f1c:	0072      	.short	0x0072
   20f1e:	bf00      	nop

00020f20 <DisplayHeader>:
   20f20:	b408      	push	{r3}
   20f22:	4b0f      	ldr	r3, [pc, #60]	; (20f60 <.direct_call+0x6>)
   20f24:	681b      	ldr	r3, [r3, #0]
   20f26:	2b00      	cmp	r3, #0
   20f28:	d117      	bne.n	20f5a <.direct_call>
   20f2a:	b507      	push	{r0, r1, r2, lr}
   20f2c:	f000 f91e 	bl	2116c <emulationlib_open>
   20f30:	2800      	cmp	r0, #0
   20f32:	d008      	beq.n	20f46 <.bad_return>
   20f34:	4684      	mov	ip, r0
   20f36:	480b      	ldr	r0, [pc, #44]	; (20f64 <.direct_call+0xa>)
   20f38:	f000 f80e 	bl	20f58 <.call_function>
   20f3c:	2800      	cmp	r0, #0
   20f3e:	d002      	beq.n	20f46 <.bad_return>
   20f40:	4907      	ldr	r1, [pc, #28]	; (20f60 <.direct_call+0x6>)
   20f42:	6008      	str	r0, [r1, #0]
   20f44:	e004      	b.n	20f50 <.already_initialized>

00020f46 <.bad_return>:
   20f46:	bc0f      	pop	{r0, r1, r2, r3}
   20f48:	4807      	ldr	r0, [pc, #28]	; (20f68 <.direct_call+0xe>)
   20f4a:	469e      	mov	lr, r3
   20f4c:	bc08      	pop	{r3}
   20f4e:	4770      	bx	lr

00020f50 <.already_initialized>:
   20f50:	4684      	mov	ip, r0
   20f52:	bc0f      	pop	{r0, r1, r2, r3}
   20f54:	469e      	mov	lr, r3
   20f56:	bc08      	pop	{r3}

00020f58 <.call_function>:
   20f58:	4760      	bx	ip

00020f5a <.direct_call>:
   20f5a:	469c      	mov	ip, r3
   20f5c:	bc08      	pop	{r3}
   20f5e:	4760      	bx	ip
   20f60:	0002f99c 	.word	0x0002f99c
   20f64:	00020f0c 	.word	0x00020f0c
   20f68:	ffffffff 	.word	0xffffffff

00020f6c <function_name>:
   20f6c:	5f554d45 	.word	0x5f554d45
   20f70:	70736944 	.word	0x70736944
   20f74:	4c79616c 	.word	0x4c79616c
   20f78:	00736465 	.word	0x00736465

00020f7c <DisplayLeds>:
   20f7c:	b408      	push	{r3}
   20f7e:	4b0f      	ldr	r3, [pc, #60]	; (20fbc <.direct_call+0x6>)
   20f80:	681b      	ldr	r3, [r3, #0]
   20f82:	2b00      	cmp	r3, #0
   20f84:	d117      	bne.n	20fb6 <.direct_call>
   20f86:	b507      	push	{r0, r1, r2, lr}
   20f88:	f000 f8f0 	bl	2116c <emulationlib_open>
   20f8c:	2800      	cmp	r0, #0
   20f8e:	d008      	beq.n	20fa2 <.bad_return>
   20f90:	4684      	mov	ip, r0
   20f92:	480b      	ldr	r0, [pc, #44]	; (20fc0 <.direct_call+0xa>)
   20f94:	f000 f80e 	bl	20fb4 <.call_function>
   20f98:	2800      	cmp	r0, #0
   20f9a:	d002      	beq.n	20fa2 <.bad_return>
   20f9c:	4907      	ldr	r1, [pc, #28]	; (20fbc <.direct_call+0x6>)
   20f9e:	6008      	str	r0, [r1, #0]
   20fa0:	e004      	b.n	20fac <.already_initialized>

00020fa2 <.bad_return>:
   20fa2:	bc0f      	pop	{r0, r1, r2, r3}
   20fa4:	4807      	ldr	r0, [pc, #28]	; (20fc4 <.direct_call+0xe>)
   20fa6:	469e      	mov	lr, r3
   20fa8:	bc08      	pop	{r3}
   20faa:	4770      	bx	lr

00020fac <.already_initialized>:
   20fac:	4684      	mov	ip, r0
   20fae:	bc0f      	pop	{r0, r1, r2, r3}
   20fb0:	469e      	mov	lr, r3
   20fb2:	bc08      	pop	{r3}

00020fb4 <.call_function>:
   20fb4:	4760      	bx	ip

00020fb6 <.direct_call>:
   20fb6:	469c      	mov	ip, r3
   20fb8:	bc08      	pop	{r3}
   20fba:	4760      	bx	ip
   20fbc:	0002f9a0 	.word	0x0002f9a0
   20fc0:	00020f6c 	.word	0x00020f6c
   20fc4:	ffffffff 	.word	0xffffffff

00020fc8 <function_name>:
   20fc8:	5f554d45 	.word	0x5f554d45
   20fcc:	6f467349 	.word	0x6f467349
   20fd0:	7265746f 	.word	0x7265746f
   20fd4:	00          	.byte	0x00
   20fd5:	00          	.byte	0x00
   20fd6:	bf00      	nop

00020fd8 <IsFooter>:
   20fd8:	b408      	push	{r3}
   20fda:	4b0f      	ldr	r3, [pc, #60]	; (21018 <.direct_call+0x6>)
   20fdc:	681b      	ldr	r3, [r3, #0]
   20fde:	2b00      	cmp	r3, #0
   20fe0:	d117      	bne.n	21012 <.direct_call>
   20fe2:	b507      	push	{r0, r1, r2, lr}
   20fe4:	f000 f8c2 	bl	2116c <emulationlib_open>
   20fe8:	2800      	cmp	r0, #0
   20fea:	d008      	beq.n	20ffe <.bad_return>
   20fec:	4684      	mov	ip, r0
   20fee:	480b      	ldr	r0, [pc, #44]	; (2101c <.direct_call+0xa>)
   20ff0:	f000 f80e 	bl	21010 <.call_function>
   20ff4:	2800      	cmp	r0, #0
   20ff6:	d002      	beq.n	20ffe <.bad_return>
   20ff8:	4907      	ldr	r1, [pc, #28]	; (21018 <.direct_call+0x6>)
   20ffa:	6008      	str	r0, [r1, #0]
   20ffc:	e004      	b.n	21008 <.already_initialized>

00020ffe <.bad_return>:
   20ffe:	bc0f      	pop	{r0, r1, r2, r3}
   21000:	4807      	ldr	r0, [pc, #28]	; (21020 <.direct_call+0xe>)
   21002:	469e      	mov	lr, r3
   21004:	bc08      	pop	{r3}
   21006:	4770      	bx	lr

00021008 <.already_initialized>:
   21008:	4684      	mov	ip, r0
   2100a:	bc0f      	pop	{r0, r1, r2, r3}
   2100c:	469e      	mov	lr, r3
   2100e:	bc08      	pop	{r3}

00021010 <.call_function>:
   21010:	4760      	bx	ip

00021012 <.direct_call>:
   21012:	469c      	mov	ip, r3
   21014:	bc08      	pop	{r3}
   21016:	4760      	bx	ip
   21018:	0002f9a4 	.word	0x0002f9a4
   2101c:	00020fc8 	.word	0x00020fc8
   21020:	ffffffff 	.word	0xffffffff

00021024 <function_name>:
   21024:	5f554d45 	.word	0x5f554d45
   21028:	65487349 	.word	0x65487349
   2102c:	72656461 	.word	0x72656461
   21030:	69746341 	.word	0x69746341
   21034:	65746176 	.word	0x65746176
   21038:	0064      	.short	0x0064
   2103a:	bf00      	nop

0002103c <IsHeader>:
   2103c:	b408      	push	{r3}
   2103e:	4b0f      	ldr	r3, [pc, #60]	; (2107c <.direct_call+0x6>)
   21040:	681b      	ldr	r3, [r3, #0]
   21042:	2b00      	cmp	r3, #0
   21044:	d117      	bne.n	21076 <.direct_call>
   21046:	b507      	push	{r0, r1, r2, lr}
   21048:	f000 f890 	bl	2116c <emulationlib_open>
   2104c:	2800      	cmp	r0, #0
   2104e:	d008      	beq.n	21062 <.bad_return>
   21050:	4684      	mov	ip, r0
   21052:	480b      	ldr	r0, [pc, #44]	; (21080 <.direct_call+0xa>)
   21054:	f000 f80e 	bl	21074 <.call_function>
   21058:	2800      	cmp	r0, #0
   2105a:	d002      	beq.n	21062 <.bad_return>
   2105c:	4907      	ldr	r1, [pc, #28]	; (2107c <.direct_call+0x6>)
   2105e:	6008      	str	r0, [r1, #0]
   21060:	e004      	b.n	2106c <.already_initialized>

00021062 <.bad_return>:
   21062:	bc0f      	pop	{r0, r1, r2, r3}
   21064:	4807      	ldr	r0, [pc, #28]	; (21084 <.direct_call+0xe>)
   21066:	469e      	mov	lr, r3
   21068:	bc08      	pop	{r3}
   2106a:	4770      	bx	lr

0002106c <.already_initialized>:
   2106c:	4684      	mov	ip, r0
   2106e:	bc0f      	pop	{r0, r1, r2, r3}
   21070:	469e      	mov	lr, r3
   21072:	bc08      	pop	{r3}

00021074 <.call_function>:
   21074:	4760      	bx	ip

00021076 <.direct_call>:
   21076:	469c      	mov	ip, r3
   21078:	bc08      	pop	{r3}
   2107a:	4760      	bx	ip
   2107c:	0002f9a8 	.word	0x0002f9a8
   21080:	00021024 	.word	0x00021024
   21084:	ffffffff 	.word	0xffffffff

00021088 <function_name>:
   21088:	5f554d45 	.word	0x5f554d45
   2108c:	696c6554 	.word	0x696c6554
   21090:	455f6d75 	.word	0x455f6d75
   21094:	00746978 	.word	0x00746978

00021098 <Telium_Exit>:
   21098:	b408      	push	{r3}
   2109a:	4b0f      	ldr	r3, [pc, #60]	; (210d8 <.direct_call+0x6>)
   2109c:	681b      	ldr	r3, [r3, #0]
   2109e:	2b00      	cmp	r3, #0
   210a0:	d117      	bne.n	210d2 <.direct_call>
   210a2:	b507      	push	{r0, r1, r2, lr}
   210a4:	f000 f862 	bl	2116c <emulationlib_open>
   210a8:	2800      	cmp	r0, #0
   210aa:	d008      	beq.n	210be <.bad_return>
   210ac:	4684      	mov	ip, r0
   210ae:	480b      	ldr	r0, [pc, #44]	; (210dc <.direct_call+0xa>)
   210b0:	f000 f80e 	bl	210d0 <.call_function>
   210b4:	2800      	cmp	r0, #0
   210b6:	d002      	beq.n	210be <.bad_return>
   210b8:	4907      	ldr	r1, [pc, #28]	; (210d8 <.direct_call+0x6>)
   210ba:	6008      	str	r0, [r1, #0]
   210bc:	e004      	b.n	210c8 <.already_initialized>

000210be <.bad_return>:
   210be:	bc0f      	pop	{r0, r1, r2, r3}
   210c0:	4807      	ldr	r0, [pc, #28]	; (210e0 <.direct_call+0xe>)
   210c2:	469e      	mov	lr, r3
   210c4:	bc08      	pop	{r3}
   210c6:	4770      	bx	lr

000210c8 <.already_initialized>:
   210c8:	4684      	mov	ip, r0
   210ca:	bc0f      	pop	{r0, r1, r2, r3}
   210cc:	469e      	mov	lr, r3
   210ce:	bc08      	pop	{r3}

000210d0 <.call_function>:
   210d0:	4760      	bx	ip

000210d2 <.direct_call>:
   210d2:	469c      	mov	ip, r3
   210d4:	bc08      	pop	{r3}
   210d6:	4760      	bx	ip
   210d8:	0002f9ac 	.word	0x0002f9ac
   210dc:	00021088 	.word	0x00021088
   210e0:	ffffffff 	.word	0xffffffff

000210e4 <function_name>:
   210e4:	5f554d45 	.word	0x5f554d45
   210e8:	6f6c7075 	.word	0x6f6c7075
   210ec:	645f6461 	.word	0x645f6461
   210f0:	6e676169 	.word	0x6e676169
   210f4:	6974736f 	.word	0x6974736f
   210f8:	78745f63 	.word	0x78745f63
   210fc:	0074      	.short	0x0074
   210fe:	bf00      	nop

00021100 <upload_diagnostic_txt>:
   21100:	b408      	push	{r3}
   21102:	4b0f      	ldr	r3, [pc, #60]	; (21140 <.direct_call+0x6>)
   21104:	681b      	ldr	r3, [r3, #0]
   21106:	2b00      	cmp	r3, #0
   21108:	d117      	bne.n	2113a <.direct_call>
   2110a:	b507      	push	{r0, r1, r2, lr}
   2110c:	f000 f82e 	bl	2116c <emulationlib_open>
   21110:	2800      	cmp	r0, #0
   21112:	d008      	beq.n	21126 <.bad_return>
   21114:	4684      	mov	ip, r0
   21116:	480b      	ldr	r0, [pc, #44]	; (21144 <.direct_call+0xa>)
   21118:	f000 f80e 	bl	21138 <.call_function>
   2111c:	2800      	cmp	r0, #0
   2111e:	d002      	beq.n	21126 <.bad_return>
   21120:	4907      	ldr	r1, [pc, #28]	; (21140 <.direct_call+0x6>)
   21122:	6008      	str	r0, [r1, #0]
   21124:	e004      	b.n	21130 <.already_initialized>

00021126 <.bad_return>:
   21126:	bc0f      	pop	{r0, r1, r2, r3}
   21128:	4807      	ldr	r0, [pc, #28]	; (21148 <.direct_call+0xe>)
   2112a:	469e      	mov	lr, r3
   2112c:	bc08      	pop	{r3}
   2112e:	4770      	bx	lr

00021130 <.already_initialized>:
   21130:	4684      	mov	ip, r0
   21132:	bc0f      	pop	{r0, r1, r2, r3}
   21134:	469e      	mov	lr, r3
   21136:	bc08      	pop	{r3}

00021138 <.call_function>:
   21138:	4760      	bx	ip

0002113a <.direct_call>:
   2113a:	469c      	mov	ip, r3
   2113c:	bc08      	pop	{r3}
   2113e:	4760      	bx	ip
   21140:	0002f9b0 	.word	0x0002f9b0
   21144:	000210e4 	.word	0x000210e4
   21148:	ffffffff 	.word	0xffffffff

0002114c <GetProcAddressEmulation>:
   2114c:	4b05      	ldr	r3, [pc, #20]	; (21164 <GetProcAddressEmulation+0x18>)
   2114e:	4a06      	ldr	r2, [pc, #24]	; (21168 <GetProcAddressEmulation+0x1c>)
   21150:	447b      	add	r3, pc
   21152:	4601      	mov	r1, r0
   21154:	589b      	ldr	r3, [r3, r2]
   21156:	6818      	ldr	r0, [r3, #0]
   21158:	b110      	cbz	r0, 21160 <GetProcAddressEmulation+0x14>
   2115a:	b109      	cbz	r1, 21160 <GetProcAddressEmulation+0x14>
   2115c:	f000 bfbf 	b.w	220de <OSL_Dll_GetSymbolByName>
   21160:	2000      	movs	r0, #0
   21162:	4770      	bx	lr
   21164:	0000dfc4 	.word	0x0000dfc4
   21168:	000000f8 	.word	0x000000f8

0002116c <emulationlib_open>:
   2116c:	b538      	push	{r3, r4, r5, lr}
   2116e:	4c09      	ldr	r4, [pc, #36]	; (21194 <emulationlib_open+0x28>)
   21170:	4b09      	ldr	r3, [pc, #36]	; (21198 <emulationlib_open+0x2c>)
   21172:	447c      	add	r4, pc
   21174:	58e5      	ldr	r5, [r4, r3]
   21176:	682b      	ldr	r3, [r5, #0]
   21178:	b953      	cbnz	r3, 21190 <emulationlib_open+0x24>
   2117a:	f64a 609b 	movw	r0, #44699	; 0xae9b
   2117e:	f000 ffde 	bl	2213e <OSL_Dll_OpenByAppliType>
   21182:	4b06      	ldr	r3, [pc, #24]	; (2119c <emulationlib_open+0x30>)
   21184:	58e3      	ldr	r3, [r4, r3]
   21186:	6018      	str	r0, [r3, #0]
   21188:	b110      	cbz	r0, 21190 <emulationlib_open+0x24>
   2118a:	4b05      	ldr	r3, [pc, #20]	; (211a0 <emulationlib_open+0x34>)
   2118c:	58e3      	ldr	r3, [r4, r3]
   2118e:	602b      	str	r3, [r5, #0]
   21190:	6828      	ldr	r0, [r5, #0]
   21192:	bd38      	pop	{r3, r4, r5, pc}
   21194:	0000dfa2 	.word	0x0000dfa2
   21198:	000000ec 	.word	0x000000ec
   2119c:	000000f8 	.word	0x000000f8
   211a0:	000000b8 	.word	0x000000b8

000211a4 <emulationlib_close>:
   211a4:	4b03      	ldr	r3, [pc, #12]	; (211b4 <emulationlib_close+0x10>)
   211a6:	4a04      	ldr	r2, [pc, #16]	; (211b8 <emulationlib_close+0x14>)
   211a8:	447b      	add	r3, pc
   211aa:	589b      	ldr	r3, [r3, r2]
   211ac:	6818      	ldr	r0, [r3, #0]
   211ae:	f000 bf86 	b.w	220be <OSL_Dll_Close>
   211b2:	bf00      	nop
   211b4:	0000df6c 	.word	0x0000df6c
   211b8:	000000f8 	.word	0x000000f8

000211bc <function_name>:
   211bc:	495f4d54 	.word	0x495f4d54
   211c0:	4374696e 	.word	0x4374696e
   211c4:	65746e6f 	.word	0x65746e6f
   211c8:	47657478 	.word	0x47657478
   211cc:	68706172 	.word	0x68706172
   211d0:	65757169 	.word	0x65757169
   211d4:	00          	.byte	0x00
   211d5:	00          	.byte	0x00
   211d6:	bf00      	nop

000211d8 <TM_InitContexteGraphique>:
   211d8:	b408      	push	{r3}
   211da:	4b11      	ldr	r3, [pc, #68]	; (21220 <.direct_call+0x8>)
   211dc:	681b      	ldr	r3, [r3, #0]
   211de:	2b00      	cmp	r3, #0
   211e0:	d11a      	bne.n	21218 <.direct_call>
   211e2:	b507      	push	{r0, r1, r2, lr}
   211e4:	f7fe fbd2 	bl	1f98c <extenslib_open>
   211e8:	2800      	cmp	r0, #0
   211ea:	d00b      	beq.n	21204 <.bad_return>
   211ec:	4684      	mov	ip, r0
   211ee:	480d      	ldr	r0, [pc, #52]	; (21224 <.direct_call+0xc>)
   211f0:	f000 f811 	bl	21216 <.call_function>
   211f4:	2800      	cmp	r0, #0
   211f6:	d002      	beq.n	211fe <.exit_return>
   211f8:	4909      	ldr	r1, [pc, #36]	; (21220 <.direct_call+0x8>)
   211fa:	6008      	str	r0, [r1, #0]
   211fc:	e007      	b.n	2120e <.already_initialized>

000211fe <.exit_return>:
   211fe:	480a      	ldr	r0, [pc, #40]	; (21228 <.direct_call+0x10>)
   21200:	f7ff ff4a 	bl	21098 <Telium_Exit>

00021204 <.bad_return>:
   21204:	bc0f      	pop	{r0, r1, r2, r3}
   21206:	2000      	movs	r0, #0
   21208:	469e      	mov	lr, r3
   2120a:	bc08      	pop	{r3}
   2120c:	4770      	bx	lr

0002120e <.already_initialized>:
   2120e:	4684      	mov	ip, r0
   21210:	bc0f      	pop	{r0, r1, r2, r3}
   21212:	469e      	mov	lr, r3
   21214:	bc08      	pop	{r3}

00021216 <.call_function>:
   21216:	4760      	bx	ip

00021218 <.direct_call>:
   21218:	469c      	mov	ip, r3
   2121a:	bc08      	pop	{r3}
   2121c:	4760      	bx	ip
   2121e:	0000      	.short	0x0000
   21220:	0002f9b4 	.word	0x0002f9b4
   21224:	000211bc 	.word	0x000211bc
   21228:	00000afb 	.word	0x00000afb

0002122c <Telium_Vfprintf>:
   2122c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21230:	4680      	mov	r8, r0
   21232:	460f      	mov	r7, r1
   21234:	4616      	mov	r6, r2
   21236:	f7fe fba9 	bl	1f98c <extenslib_open>
   2123a:	4604      	mov	r4, r0
   2123c:	b1a8      	cbz	r0, 2126a <Telium_Vfprintf+0x3e>
   2123e:	4d0c      	ldr	r5, [pc, #48]	; (21270 <Telium_Vfprintf+0x44>)
   21240:	447d      	add	r5, pc
   21242:	682b      	ldr	r3, [r5, #0]
   21244:	b91b      	cbnz	r3, 2124e <Telium_Vfprintf+0x22>
   21246:	480b      	ldr	r0, [pc, #44]	; (21274 <Telium_Vfprintf+0x48>)
   21248:	4478      	add	r0, pc
   2124a:	47a0      	blx	r4
   2124c:	6028      	str	r0, [r5, #0]
   2124e:	4b0a      	ldr	r3, [pc, #40]	; (21278 <Telium_Vfprintf+0x4c>)
   21250:	447b      	add	r3, pc
   21252:	681c      	ldr	r4, [r3, #0]
   21254:	b12c      	cbz	r4, 21262 <Telium_Vfprintf+0x36>
   21256:	4640      	mov	r0, r8
   21258:	4639      	mov	r1, r7
   2125a:	4632      	mov	r2, r6
   2125c:	47a0      	blx	r4
   2125e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21262:	f640 3031 	movw	r0, #2865	; 0xb31
   21266:	f7ff ff17 	bl	21098 <Telium_Exit>
   2126a:	4620      	mov	r0, r4
   2126c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21270:	0000edf0 	.word	0x0000edf0
   21274:	000051a4 	.word	0x000051a4
   21278:	0000ede0 	.word	0x0000ede0

0002127c <GetProcAddressTools>:
   2127c:	4b05      	ldr	r3, [pc, #20]	; (21294 <GetProcAddressTools+0x18>)
   2127e:	4a06      	ldr	r2, [pc, #24]	; (21298 <GetProcAddressTools+0x1c>)
   21280:	447b      	add	r3, pc
   21282:	4601      	mov	r1, r0
   21284:	589b      	ldr	r3, [r3, r2]
   21286:	6818      	ldr	r0, [r3, #0]
   21288:	b110      	cbz	r0, 21290 <GetProcAddressTools+0x14>
   2128a:	b109      	cbz	r1, 21290 <GetProcAddressTools+0x14>
   2128c:	f000 bf27 	b.w	220de <OSL_Dll_GetSymbolByName>
   21290:	2000      	movs	r0, #0
   21292:	4770      	bx	lr
   21294:	0000de94 	.word	0x0000de94
   21298:	000000c4 	.word	0x000000c4

0002129c <toolslib_open>:
   2129c:	b538      	push	{r3, r4, r5, lr}
   2129e:	4c0b      	ldr	r4, [pc, #44]	; (212cc <toolslib_open+0x30>)
   212a0:	4b0b      	ldr	r3, [pc, #44]	; (212d0 <toolslib_open+0x34>)
   212a2:	447c      	add	r4, pc
   212a4:	58e5      	ldr	r5, [r4, r3]
   212a6:	682b      	ldr	r3, [r5, #0]
   212a8:	b973      	cbnz	r3, 212c8 <toolslib_open+0x2c>
   212aa:	f64a 604e 	movw	r0, #44622	; 0xae4e
   212ae:	f000 ff46 	bl	2213e <OSL_Dll_OpenByAppliType>
   212b2:	4b08      	ldr	r3, [pc, #32]	; (212d4 <toolslib_open+0x38>)
   212b4:	58e3      	ldr	r3, [r4, r3]
   212b6:	6018      	str	r0, [r3, #0]
   212b8:	b130      	cbz	r0, 212c8 <toolslib_open+0x2c>
   212ba:	4b07      	ldr	r3, [pc, #28]	; (212d8 <toolslib_open+0x3c>)
   212bc:	4807      	ldr	r0, [pc, #28]	; (212dc <toolslib_open+0x40>)
   212be:	58e3      	ldr	r3, [r4, r3]
   212c0:	4478      	add	r0, pc
   212c2:	602b      	str	r3, [r5, #0]
   212c4:	f7ff ffda 	bl	2127c <GetProcAddressTools>
   212c8:	6828      	ldr	r0, [r5, #0]
   212ca:	bd38      	pop	{r3, r4, r5, pc}
   212cc:	0000de72 	.word	0x0000de72
   212d0:	000000a4 	.word	0x000000a4
   212d4:	000000c4 	.word	0x000000c4
   212d8:	000000e8 	.word	0x000000e8
   212dc:	00005124 	.word	0x00005124

000212e0 <toolslib_close>:
   212e0:	4b03      	ldr	r3, [pc, #12]	; (212f0 <toolslib_close+0x10>)
   212e2:	4a04      	ldr	r2, [pc, #16]	; (212f4 <toolslib_close+0x14>)
   212e4:	447b      	add	r3, pc
   212e6:	589b      	ldr	r3, [r3, r2]
   212e8:	6818      	ldr	r0, [r3, #0]
   212ea:	f000 bee8 	b.w	220be <OSL_Dll_Close>
   212ee:	bf00      	nop
   212f0:	0000de30 	.word	0x0000de30
   212f4:	000000c4 	.word	0x000000c4

000212f8 <GetProcAddressWrapper>:
   212f8:	4b05      	ldr	r3, [pc, #20]	; (21310 <GetProcAddressWrapper+0x18>)
   212fa:	4a06      	ldr	r2, [pc, #24]	; (21314 <GetProcAddressWrapper+0x1c>)
   212fc:	447b      	add	r3, pc
   212fe:	4601      	mov	r1, r0
   21300:	589b      	ldr	r3, [r3, r2]
   21302:	6818      	ldr	r0, [r3, #0]
   21304:	b110      	cbz	r0, 2130c <GetProcAddressWrapper+0x14>
   21306:	b109      	cbz	r1, 2130c <GetProcAddressWrapper+0x14>
   21308:	f000 bee9 	b.w	220de <OSL_Dll_GetSymbolByName>
   2130c:	2000      	movs	r0, #0
   2130e:	4770      	bx	lr
   21310:	0000de18 	.word	0x0000de18
   21314:	000000bc 	.word	0x000000bc

00021318 <wrapperlib_open>:
   21318:	b538      	push	{r3, r4, r5, lr}
   2131a:	4c09      	ldr	r4, [pc, #36]	; (21340 <wrapperlib_open+0x28>)
   2131c:	4b09      	ldr	r3, [pc, #36]	; (21344 <wrapperlib_open+0x2c>)
   2131e:	447c      	add	r4, pc
   21320:	58e5      	ldr	r5, [r4, r3]
   21322:	682b      	ldr	r3, [r5, #0]
   21324:	b953      	cbnz	r3, 2133c <wrapperlib_open+0x24>
   21326:	f64a 6012 	movw	r0, #44562	; 0xae12
   2132a:	f000 ff08 	bl	2213e <OSL_Dll_OpenByAppliType>
   2132e:	4b06      	ldr	r3, [pc, #24]	; (21348 <wrapperlib_open+0x30>)
   21330:	58e3      	ldr	r3, [r4, r3]
   21332:	6018      	str	r0, [r3, #0]
   21334:	b110      	cbz	r0, 2133c <wrapperlib_open+0x24>
   21336:	4b05      	ldr	r3, [pc, #20]	; (2134c <wrapperlib_open+0x34>)
   21338:	58e3      	ldr	r3, [r4, r3]
   2133a:	602b      	str	r3, [r5, #0]
   2133c:	6828      	ldr	r0, [r5, #0]
   2133e:	bd38      	pop	{r3, r4, r5, pc}
   21340:	0000ddf6 	.word	0x0000ddf6
   21344:	000000dc 	.word	0x000000dc
   21348:	000000bc 	.word	0x000000bc
   2134c:	000000b0 	.word	0x000000b0

00021350 <wrapperlib_close>:
   21350:	4b03      	ldr	r3, [pc, #12]	; (21360 <wrapperlib_close+0x10>)
   21352:	4a04      	ldr	r2, [pc, #16]	; (21364 <wrapperlib_close+0x14>)
   21354:	447b      	add	r3, pc
   21356:	589b      	ldr	r3, [r3, r2]
   21358:	6818      	ldr	r0, [r3, #0]
   2135a:	f000 beb0 	b.w	220be <OSL_Dll_Close>
   2135e:	bf00      	nop
   21360:	0000ddc0 	.word	0x0000ddc0
   21364:	000000bc 	.word	0x000000bc

00021368 <SEC_ComputeMAC_Init>:
   21368:	b40f      	push	{r0, r1, r2, r3}
   2136a:	4805      	ldr	r0, [pc, #20]	; (21380 <SEC_ComputeMAC+0xe>)
   2136c:	4905      	ldr	r1, [pc, #20]	; (21384 <SEC_ComputeMAC+0x12>)
   2136e:	4a06      	ldr	r2, [pc, #24]	; (21388 <SEC_ComputeMAC+0x16>)
   21370:	4710      	bx	r2

00021372 <SEC_ComputeMAC>:
   21372:	b401      	push	{r0}
   21374:	4803      	ldr	r0, [pc, #12]	; (21384 <SEC_ComputeMAC+0x12>)
   21376:	6800      	ldr	r0, [r0, #0]
   21378:	4684      	mov	ip, r0
   2137a:	bc01      	pop	{r0}
   2137c:	4760      	bx	ip
   2137e:	0000      	.short	0x0000
   21380:	00002745 	.word	0x00002745
   21384:	0002f9c0 	.word	0x0002f9c0
   21388:	00021545 	.word	0x00021545

0002138c <SEC_GetConfig_Init>:
   2138c:	b40f      	push	{r0, r1, r2, r3}
   2138e:	4805      	ldr	r0, [pc, #20]	; (213a4 <SEC_GetConfig+0xe>)
   21390:	4905      	ldr	r1, [pc, #20]	; (213a8 <SEC_GetConfig+0x12>)
   21392:	4a06      	ldr	r2, [pc, #24]	; (213ac <SEC_GetConfig+0x16>)
   21394:	4710      	bx	r2

00021396 <SEC_GetConfig>:
   21396:	b401      	push	{r0}
   21398:	4803      	ldr	r0, [pc, #12]	; (213a8 <SEC_GetConfig+0x12>)
   2139a:	6800      	ldr	r0, [r0, #0]
   2139c:	4684      	mov	ip, r0
   2139e:	bc01      	pop	{r0}
   213a0:	4760      	bx	ip
   213a2:	0000      	.short	0x0000
   213a4:	00002730 	.word	0x00002730
   213a8:	0002f9d0 	.word	0x0002f9d0
   213ac:	00021545 	.word	0x00021545

000213b0 <SEC_Iso9564_Init>:
   213b0:	b40f      	push	{r0, r1, r2, r3}
   213b2:	4805      	ldr	r0, [pc, #20]	; (213c8 <SEC_Iso9564+0xe>)
   213b4:	4905      	ldr	r1, [pc, #20]	; (213cc <SEC_Iso9564+0x12>)
   213b6:	4a06      	ldr	r2, [pc, #24]	; (213d0 <SEC_Iso9564+0x16>)
   213b8:	4710      	bx	r2

000213ba <SEC_Iso9564>:
   213ba:	b401      	push	{r0}
   213bc:	4803      	ldr	r0, [pc, #12]	; (213cc <SEC_Iso9564+0x12>)
   213be:	6800      	ldr	r0, [r0, #0]
   213c0:	4684      	mov	ip, r0
   213c2:	bc01      	pop	{r0}
   213c4:	4760      	bx	ip
   213c6:	0000      	.short	0x0000
   213c8:	00002738 	.word	0x00002738
   213cc:	0002f9e0 	.word	0x0002f9e0
   213d0:	00021545 	.word	0x00021545

000213d4 <SEC_isSecretArea_Init>:
   213d4:	b40f      	push	{r0, r1, r2, r3}
   213d6:	4805      	ldr	r0, [pc, #20]	; (213ec <SEC_isSecretArea+0xe>)
   213d8:	4905      	ldr	r1, [pc, #20]	; (213f0 <SEC_isSecretArea+0x12>)
   213da:	4a06      	ldr	r2, [pc, #24]	; (213f4 <SEC_isSecretArea+0x16>)
   213dc:	4710      	bx	r2

000213de <SEC_isSecretArea>:
   213de:	b401      	push	{r0}
   213e0:	4803      	ldr	r0, [pc, #12]	; (213f0 <SEC_isSecretArea+0x12>)
   213e2:	6800      	ldr	r0, [r0, #0]
   213e4:	4684      	mov	ip, r0
   213e6:	bc01      	pop	{r0}
   213e8:	4760      	bx	ip
   213ea:	0000      	.short	0x0000
   213ec:	00002733 	.word	0x00002733
   213f0:	0002f9f0 	.word	0x0002f9f0
   213f4:	00021545 	.word	0x00021545

000213f8 <SEC_KeyVerify_Init>:
   213f8:	b40f      	push	{r0, r1, r2, r3}
   213fa:	4805      	ldr	r0, [pc, #20]	; (21410 <SEC_KeyVerify+0xe>)
   213fc:	4905      	ldr	r1, [pc, #20]	; (21414 <SEC_KeyVerify+0x12>)
   213fe:	4a06      	ldr	r2, [pc, #24]	; (21418 <SEC_KeyVerify+0x16>)
   21400:	4710      	bx	r2

00021402 <SEC_KeyVerify>:
   21402:	b401      	push	{r0}
   21404:	4803      	ldr	r0, [pc, #12]	; (21414 <SEC_KeyVerify+0x12>)
   21406:	6800      	ldr	r0, [r0, #0]
   21408:	4684      	mov	ip, r0
   2140a:	bc01      	pop	{r0}
   2140c:	4760      	bx	ip
   2140e:	0000      	.short	0x0000
   21410:	00002748 	.word	0x00002748
   21414:	0002fa00 	.word	0x0002fa00
   21418:	00021545 	.word	0x00021545

0002141c <SEC_listSecureId_Init>:
   2141c:	b40f      	push	{r0, r1, r2, r3}
   2141e:	4805      	ldr	r0, [pc, #20]	; (21434 <SEC_listSecureId+0xe>)
   21420:	4905      	ldr	r1, [pc, #20]	; (21438 <SEC_listSecureId+0x12>)
   21422:	4a06      	ldr	r2, [pc, #24]	; (2143c <SEC_listSecureId+0x16>)
   21424:	4710      	bx	r2

00021426 <SEC_listSecureId>:
   21426:	b401      	push	{r0}
   21428:	4803      	ldr	r0, [pc, #12]	; (21438 <SEC_listSecureId+0x12>)
   2142a:	6800      	ldr	r0, [r0, #0]
   2142c:	4684      	mov	ip, r0
   2142e:	bc01      	pop	{r0}
   21430:	4760      	bx	ip
   21432:	0000      	.short	0x0000
   21434:	00002732 	.word	0x00002732
   21438:	0002fa10 	.word	0x0002fa10
   2143c:	00021545 	.word	0x00021545

00021440 <SEC_listTLVKeys_Init>:
   21440:	b40f      	push	{r0, r1, r2, r3}
   21442:	4805      	ldr	r0, [pc, #20]	; (21458 <SEC_listTLVKeys+0xe>)
   21444:	4905      	ldr	r1, [pc, #20]	; (2145c <SEC_listTLVKeys+0x12>)
   21446:	4a06      	ldr	r2, [pc, #24]	; (21460 <SEC_listTLVKeys+0x16>)
   21448:	4710      	bx	r2

0002144a <SEC_listTLVKeys>:
   2144a:	b401      	push	{r0}
   2144c:	4803      	ldr	r0, [pc, #12]	; (2145c <SEC_listTLVKeys+0x12>)
   2144e:	6800      	ldr	r0, [r0, #0]
   21450:	4684      	mov	ip, r0
   21452:	bc01      	pop	{r0}
   21454:	4760      	bx	ip
   21456:	0000      	.short	0x0000
   21458:	00002750 	.word	0x00002750
   2145c:	0002fa20 	.word	0x0002fa20
   21460:	00021545 	.word	0x00021545

00021464 <SEC_LoadKey_Init>:
   21464:	b40f      	push	{r0, r1, r2, r3}
   21466:	4805      	ldr	r0, [pc, #20]	; (2147c <SEC_LoadKey+0xe>)
   21468:	4905      	ldr	r1, [pc, #20]	; (21480 <SEC_LoadKey+0x12>)
   2146a:	4a06      	ldr	r2, [pc, #24]	; (21484 <SEC_LoadKey+0x16>)
   2146c:	4710      	bx	r2

0002146e <SEC_LoadKey>:
   2146e:	b401      	push	{r0}
   21470:	4803      	ldr	r0, [pc, #12]	; (21480 <SEC_LoadKey+0x12>)
   21472:	6800      	ldr	r0, [r0, #0]
   21474:	4684      	mov	ip, r0
   21476:	bc01      	pop	{r0}
   21478:	4760      	bx	ip
   2147a:	0000      	.short	0x0000
   2147c:	00002735 	.word	0x00002735
   21480:	0002fa30 	.word	0x0002fa30
   21484:	00021545 	.word	0x00021545

00021488 <SEC_PinEntry_Init>:
   21488:	b40f      	push	{r0, r1, r2, r3}
   2148a:	4805      	ldr	r0, [pc, #20]	; (214a0 <SEC_PinEntry+0xe>)
   2148c:	4905      	ldr	r1, [pc, #20]	; (214a4 <SEC_PinEntry+0x12>)
   2148e:	4a06      	ldr	r2, [pc, #24]	; (214a8 <SEC_PinEntry+0x16>)
   21490:	4710      	bx	r2

00021492 <SEC_PinEntry>:
   21492:	b401      	push	{r0}
   21494:	4803      	ldr	r0, [pc, #12]	; (214a4 <SEC_PinEntry+0x12>)
   21496:	6800      	ldr	r0, [r0, #0]
   21498:	4684      	mov	ip, r0
   2149a:	bc01      	pop	{r0}
   2149c:	4760      	bx	ip
   2149e:	0000      	.short	0x0000
   214a0:	00002737 	.word	0x00002737
   214a4:	0002fa40 	.word	0x0002fa40
   214a8:	00021545 	.word	0x00021545

000214ac <SEC_PinEntryInit_Init>:
   214ac:	b40f      	push	{r0, r1, r2, r3}
   214ae:	4805      	ldr	r0, [pc, #20]	; (214c4 <SEC_PinEntryInit+0xe>)
   214b0:	4905      	ldr	r1, [pc, #20]	; (214c8 <SEC_PinEntryInit+0x12>)
   214b2:	4a06      	ldr	r2, [pc, #24]	; (214cc <SEC_PinEntryInit+0x16>)
   214b4:	4710      	bx	r2

000214b6 <SEC_PinEntryInit>:
   214b6:	b401      	push	{r0}
   214b8:	4803      	ldr	r0, [pc, #12]	; (214c8 <SEC_PinEntryInit+0x12>)
   214ba:	6800      	ldr	r0, [r0, #0]
   214bc:	4684      	mov	ip, r0
   214be:	bc01      	pop	{r0}
   214c0:	4760      	bx	ip
   214c2:	0000      	.short	0x0000
   214c4:	00002736 	.word	0x00002736
   214c8:	0002fa50 	.word	0x0002fa50
   214cc:	00021545 	.word	0x00021545

000214d0 <SEC_SetConfig_Init>:
   214d0:	b40f      	push	{r0, r1, r2, r3}
   214d2:	4805      	ldr	r0, [pc, #20]	; (214e8 <SEC_SetConfig+0xe>)
   214d4:	4905      	ldr	r1, [pc, #20]	; (214ec <SEC_SetConfig+0x12>)
   214d6:	4a06      	ldr	r2, [pc, #24]	; (214f0 <SEC_SetConfig+0x16>)
   214d8:	4710      	bx	r2

000214da <SEC_SetConfig>:
   214da:	b401      	push	{r0}
   214dc:	4803      	ldr	r0, [pc, #12]	; (214ec <SEC_SetConfig+0x12>)
   214de:	6800      	ldr	r0, [r0, #0]
   214e0:	4684      	mov	ip, r0
   214e2:	bc01      	pop	{r0}
   214e4:	4760      	bx	ip
   214e6:	0000      	.short	0x0000
   214e8:	0000272f 	.word	0x0000272f
   214ec:	0002fa60 	.word	0x0002fa60
   214f0:	00021545 	.word	0x00021545

000214f4 <SEClib_Version>:
   214f4:	4800      	ldr	r0, [pc, #0]	; (214f8 <SEClib_Version+0x4>)
   214f6:	4770      	bx	lr
   214f8:	00050400 	.word	0x00050400

000214fc <SEClib_Open>:
   214fc:	b510      	push	{r4, lr}
   214fe:	4c08      	ldr	r4, [pc, #32]	; (21520 <SEClib_Open+0x24>)
   21500:	447c      	add	r4, pc
   21502:	6823      	ldr	r3, [r4, #0]
   21504:	b94b      	cbnz	r3, 2151a <SEClib_Open+0x1e>
   21506:	4807      	ldr	r0, [pc, #28]	; (21524 <SEClib_Open+0x28>)
   21508:	4478      	add	r0, pc
   2150a:	f000 fe08 	bl	2211e <OSL_Dll_Open>
   2150e:	6020      	str	r0, [r4, #0]
   21510:	f1d0 0001 	rsbs	r0, r0, #1
   21514:	bf38      	it	cc
   21516:	2000      	movcc	r0, #0
   21518:	bd10      	pop	{r4, pc}
   2151a:	2000      	movs	r0, #0
   2151c:	bd10      	pop	{r4, pc}
   2151e:	bf00      	nop
   21520:	0000eb44 	.word	0x0000eb44
   21524:	00004ef4 	.word	0x00004ef4

00021528 <SEClib_Close>:
   21528:	b510      	push	{r4, lr}
   2152a:	4c04      	ldr	r4, [pc, #16]	; (2153c <SEClib_Close+0x14>)
   2152c:	447c      	add	r4, pc
   2152e:	6820      	ldr	r0, [r4, #0]
   21530:	b118      	cbz	r0, 2153a <SEClib_Close+0x12>
   21532:	f000 fdc4 	bl	220be <OSL_Dll_Close>
   21536:	2300      	movs	r3, #0
   21538:	6023      	str	r3, [r4, #0]
   2153a:	bd10      	pop	{r4, pc}
   2153c:	0000eb18 	.word	0x0000eb18

00021540 <LIBSEC_IsPresent>:
   21540:	f000 b84c 	b.w	215dc <LIBSECV2_IsPresent>

00021544 <LIBSECV2_InitFuncAndBranch>:
   21544:	b500      	push	{lr}
   21546:	f000 f835 	bl	215b4 <LIBSECV2_GetProcAddress>
   2154a:	bc04      	pop	{r2}
   2154c:	4696      	mov	lr, r2
   2154e:	4684      	mov	ip, r0
   21550:	bc0f      	pop	{r0, r1, r2, r3}
   21552:	4760      	bx	ip

00021554 <LIBSECV2_GetProcAddressWithoutExit>:
   21554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21556:	4c13      	ldr	r4, [pc, #76]	; (215a4 <LIBSECV2_GetProcAddressWithoutExit+0x50>)
   21558:	4607      	mov	r7, r0
   2155a:	447c      	add	r4, pc
   2155c:	460d      	mov	r5, r1
   2155e:	6823      	ldr	r3, [r4, #0]
   21560:	b923      	cbnz	r3, 2156c <LIBSECV2_GetProcAddressWithoutExit+0x18>
   21562:	4811      	ldr	r0, [pc, #68]	; (215a8 <LIBSECV2_GetProcAddressWithoutExit+0x54>)
   21564:	4478      	add	r0, pc
   21566:	f000 fdda 	bl	2211e <OSL_Dll_Open>
   2156a:	6020      	str	r0, [r4, #0]
   2156c:	4e0f      	ldr	r6, [pc, #60]	; (215ac <LIBSECV2_GetProcAddressWithoutExit+0x58>)
   2156e:	447e      	add	r6, pc
   21570:	6834      	ldr	r4, [r6, #0]
   21572:	b95c      	cbnz	r4, 2158c <LIBSECV2_GetProcAddressWithoutExit+0x38>
   21574:	4b0e      	ldr	r3, [pc, #56]	; (215b0 <LIBSECV2_GetProcAddressWithoutExit+0x5c>)
   21576:	2003      	movs	r0, #3
   21578:	447b      	add	r3, pc
   2157a:	9400      	str	r4, [sp, #0]
   2157c:	9301      	str	r3, [sp, #4]
   2157e:	4621      	mov	r1, r4
   21580:	4622      	mov	r2, r4
   21582:	4623      	mov	r3, r4
   21584:	f7e7 eb5e 	blx	8c44 <_init+0xe4>
   21588:	4620      	mov	r0, r4
   2158a:	e005      	b.n	21598 <LIBSECV2_GetProcAddressWithoutExit+0x44>
   2158c:	4620      	mov	r0, r4
   2158e:	4639      	mov	r1, r7
   21590:	f000 fda5 	bl	220de <OSL_Dll_GetSymbolByName>
   21594:	2301      	movs	r3, #1
   21596:	6073      	str	r3, [r6, #4]
   21598:	b115      	cbz	r5, 215a0 <LIBSECV2_GetProcAddressWithoutExit+0x4c>
   2159a:	682b      	ldr	r3, [r5, #0]
   2159c:	b103      	cbz	r3, 215a0 <LIBSECV2_GetProcAddressWithoutExit+0x4c>
   2159e:	6028      	str	r0, [r5, #0]
   215a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   215a2:	bf00      	nop
   215a4:	0000eaee 	.word	0x0000eaee
   215a8:	00004e98 	.word	0x00004e98
   215ac:	0000eada 	.word	0x0000eada
   215b0:	00004e8d 	.word	0x00004e8d

000215b4 <LIBSECV2_GetProcAddress>:
   215b4:	b513      	push	{r0, r1, r4, lr}
   215b6:	f7ff ffcd 	bl	21554 <LIBSECV2_GetProcAddressWithoutExit>
   215ba:	4604      	mov	r4, r0
   215bc:	b948      	cbnz	r0, 215d2 <LIBSECV2_GetProcAddress+0x1e>
   215be:	4b06      	ldr	r3, [pc, #24]	; (215d8 <LIBSECV2_GetProcAddress+0x24>)
   215c0:	9000      	str	r0, [sp, #0]
   215c2:	447b      	add	r3, pc
   215c4:	2003      	movs	r0, #3
   215c6:	9301      	str	r3, [sp, #4]
   215c8:	4621      	mov	r1, r4
   215ca:	4622      	mov	r2, r4
   215cc:	4623      	mov	r3, r4
   215ce:	f7e7 eb3a 	blx	8c44 <_init+0xe4>
   215d2:	4620      	mov	r0, r4
   215d4:	bd1c      	pop	{r2, r3, r4, pc}
   215d6:	bf00      	nop
   215d8:	00004e5b 	.word	0x00004e5b

000215dc <LIBSECV2_IsPresent>:
   215dc:	4802      	ldr	r0, [pc, #8]	; (215e8 <LIBSECV2_IsPresent+0xc>)
   215de:	b508      	push	{r3, lr}
   215e0:	4478      	add	r0, pc
   215e2:	f000 fd8c 	bl	220fe <OSL_Dll_IsPresent>
   215e6:	bd08      	pop	{r3, pc}
   215e8:	00004e1c 	.word	0x00004e1c

000215ec <GL_Button_Create_Init>:
   215ec:	b40f      	push	{r0, r1, r2, r3}
   215ee:	4805      	ldr	r0, [pc, #20]	; (21604 <GL_Button_Create+0xc>)
   215f0:	2100      	movs	r1, #0
   215f2:	4a05      	ldr	r2, [pc, #20]	; (21608 <GL_Button_Create+0x10>)
   215f4:	4b05      	ldr	r3, [pc, #20]	; (2160c <GL_Button_Create+0x14>)
   215f6:	4718      	bx	r3

000215f8 <GL_Button_Create>:
   215f8:	b401      	push	{r0}
   215fa:	4803      	ldr	r0, [pc, #12]	; (21608 <GL_Button_Create+0x10>)
   215fc:	6800      	ldr	r0, [r0, #0]
   215fe:	4684      	mov	ip, r0
   21600:	bc01      	pop	{r0}
   21602:	4760      	bx	ip
   21604:	00002720 	.word	0x00002720
   21608:	0002fa70 	.word	0x0002fa70
   2160c:	00022089 	.word	0x00022089

00021610 <GL_Dialog_Amount_Init>:
   21610:	b40f      	push	{r0, r1, r2, r3}
   21612:	4805      	ldr	r0, [pc, #20]	; (21628 <GL_Dialog_Amount+0xc>)
   21614:	2100      	movs	r1, #0
   21616:	4a05      	ldr	r2, [pc, #20]	; (2162c <GL_Dialog_Amount+0x10>)
   21618:	4b05      	ldr	r3, [pc, #20]	; (21630 <GL_Dialog_Amount+0x14>)
   2161a:	4718      	bx	r3

0002161c <GL_Dialog_Amount>:
   2161c:	b401      	push	{r0}
   2161e:	4803      	ldr	r0, [pc, #12]	; (2162c <GL_Dialog_Amount+0x10>)
   21620:	6800      	ldr	r0, [r0, #0]
   21622:	4684      	mov	ip, r0
   21624:	bc01      	pop	{r0}
   21626:	4760      	bx	ip
   21628:	000027ba 	.word	0x000027ba
   2162c:	0002fa80 	.word	0x0002fa80
   21630:	00022089 	.word	0x00022089

00021634 <GL_Dialog_Choice_Init>:
   21634:	b40f      	push	{r0, r1, r2, r3}
   21636:	4805      	ldr	r0, [pc, #20]	; (2164c <GL_Dialog_Choice+0xc>)
   21638:	2100      	movs	r1, #0
   2163a:	4a05      	ldr	r2, [pc, #20]	; (21650 <GL_Dialog_Choice+0x10>)
   2163c:	4b05      	ldr	r3, [pc, #20]	; (21654 <GL_Dialog_Choice+0x14>)
   2163e:	4718      	bx	r3

00021640 <GL_Dialog_Choice>:
   21640:	b401      	push	{r0}
   21642:	4803      	ldr	r0, [pc, #12]	; (21650 <GL_Dialog_Choice+0x10>)
   21644:	6800      	ldr	r0, [r0, #0]
   21646:	4684      	mov	ip, r0
   21648:	bc01      	pop	{r0}
   2164a:	4760      	bx	ip
   2164c:	000027bb 	.word	0x000027bb
   21650:	0002fa90 	.word	0x0002fa90
   21654:	00022089 	.word	0x00022089

00021658 <GL_Dialog_Menu_Init>:
   21658:	b40f      	push	{r0, r1, r2, r3}
   2165a:	4805      	ldr	r0, [pc, #20]	; (21670 <GL_Dialog_Menu+0xc>)
   2165c:	2100      	movs	r1, #0
   2165e:	4a05      	ldr	r2, [pc, #20]	; (21674 <GL_Dialog_Menu+0x10>)
   21660:	4b05      	ldr	r3, [pc, #20]	; (21678 <GL_Dialog_Menu+0x14>)
   21662:	4718      	bx	r3

00021664 <GL_Dialog_Menu>:
   21664:	b401      	push	{r0}
   21666:	4803      	ldr	r0, [pc, #12]	; (21674 <GL_Dialog_Menu+0x10>)
   21668:	6800      	ldr	r0, [r0, #0]
   2166a:	4684      	mov	ip, r0
   2166c:	bc01      	pop	{r0}
   2166e:	4760      	bx	ip
   21670:	000027bd 	.word	0x000027bd
   21674:	0002faa0 	.word	0x0002faa0
   21678:	00022089 	.word	0x00022089

0002167c <GL_Dialog_Message_Init>:
   2167c:	b40f      	push	{r0, r1, r2, r3}
   2167e:	4805      	ldr	r0, [pc, #20]	; (21694 <GL_Dialog_Message+0xc>)
   21680:	2100      	movs	r1, #0
   21682:	4a05      	ldr	r2, [pc, #20]	; (21698 <GL_Dialog_Message+0x10>)
   21684:	4b05      	ldr	r3, [pc, #20]	; (2169c <GL_Dialog_Message+0x14>)
   21686:	4718      	bx	r3

00021688 <GL_Dialog_Message>:
   21688:	b401      	push	{r0}
   2168a:	4803      	ldr	r0, [pc, #12]	; (21698 <GL_Dialog_Message+0x10>)
   2168c:	6800      	ldr	r0, [r0, #0]
   2168e:	4684      	mov	ip, r0
   21690:	bc01      	pop	{r0}
   21692:	4760      	bx	ip
   21694:	000027b6 	.word	0x000027b6
   21698:	0002fab0 	.word	0x0002fab0
   2169c:	00022089 	.word	0x00022089

000216a0 <GL_Dialog_Password_Init>:
   216a0:	b40f      	push	{r0, r1, r2, r3}
   216a2:	4805      	ldr	r0, [pc, #20]	; (216b8 <GL_Dialog_Password+0xc>)
   216a4:	2100      	movs	r1, #0
   216a6:	4a05      	ldr	r2, [pc, #20]	; (216bc <GL_Dialog_Password+0x10>)
   216a8:	4b05      	ldr	r3, [pc, #20]	; (216c0 <GL_Dialog_Password+0x14>)
   216aa:	4718      	bx	r3

000216ac <GL_Dialog_Password>:
   216ac:	b401      	push	{r0}
   216ae:	4803      	ldr	r0, [pc, #12]	; (216bc <GL_Dialog_Password+0x10>)
   216b0:	6800      	ldr	r0, [r0, #0]
   216b2:	4684      	mov	ip, r0
   216b4:	bc01      	pop	{r0}
   216b6:	4760      	bx	ip
   216b8:	00002804 	.word	0x00002804
   216bc:	0002fac0 	.word	0x0002fac0
   216c0:	00022089 	.word	0x00022089

000216c4 <GL_Dialog_Progress_Init>:
   216c4:	b40f      	push	{r0, r1, r2, r3}
   216c6:	4805      	ldr	r0, [pc, #20]	; (216dc <GL_Dialog_Progress+0xc>)
   216c8:	2100      	movs	r1, #0
   216ca:	4a05      	ldr	r2, [pc, #20]	; (216e0 <GL_Dialog_Progress+0x10>)
   216cc:	4b05      	ldr	r3, [pc, #20]	; (216e4 <GL_Dialog_Progress+0x14>)
   216ce:	4718      	bx	r3

000216d0 <GL_Dialog_Progress>:
   216d0:	b401      	push	{r0}
   216d2:	4803      	ldr	r0, [pc, #12]	; (216e0 <GL_Dialog_Progress+0x10>)
   216d4:	6800      	ldr	r0, [r0, #0]
   216d6:	4684      	mov	ip, r0
   216d8:	bc01      	pop	{r0}
   216da:	4760      	bx	ip
   216dc:	000027df 	.word	0x000027df
   216e0:	0002fad0 	.word	0x0002fad0
   216e4:	00022089 	.word	0x00022089

000216e8 <GL_Dialog_Text_Init>:
   216e8:	b40f      	push	{r0, r1, r2, r3}
   216ea:	4805      	ldr	r0, [pc, #20]	; (21700 <GL_Dialog_Text+0xc>)
   216ec:	2100      	movs	r1, #0
   216ee:	4a05      	ldr	r2, [pc, #20]	; (21704 <GL_Dialog_Text+0x10>)
   216f0:	4b05      	ldr	r3, [pc, #20]	; (21708 <GL_Dialog_Text+0x14>)
   216f2:	4718      	bx	r3

000216f4 <GL_Dialog_Text>:
   216f4:	b401      	push	{r0}
   216f6:	4803      	ldr	r0, [pc, #12]	; (21704 <GL_Dialog_Text+0x10>)
   216f8:	6800      	ldr	r0, [r0, #0]
   216fa:	4684      	mov	ip, r0
   216fc:	bc01      	pop	{r0}
   216fe:	4760      	bx	ip
   21700:	000027b8 	.word	0x000027b8
   21704:	0002fae0 	.word	0x0002fae0
   21708:	00022089 	.word	0x00022089

0002170c <GL_Dialog_VirtualKeyboard_Init>:
   2170c:	b40f      	push	{r0, r1, r2, r3}
   2170e:	4805      	ldr	r0, [pc, #20]	; (21724 <GL_Dialog_VirtualKeyboard+0xc>)
   21710:	2100      	movs	r1, #0
   21712:	4a05      	ldr	r2, [pc, #20]	; (21728 <GL_Dialog_VirtualKeyboard+0x10>)
   21714:	4b05      	ldr	r3, [pc, #20]	; (2172c <GL_Dialog_VirtualKeyboard+0x14>)
   21716:	4718      	bx	r3

00021718 <GL_Dialog_VirtualKeyboard>:
   21718:	b401      	push	{r0}
   2171a:	4803      	ldr	r0, [pc, #12]	; (21728 <GL_Dialog_VirtualKeyboard+0x10>)
   2171c:	6800      	ldr	r0, [r0, #0]
   2171e:	4684      	mov	ip, r0
   21720:	bc01      	pop	{r0}
   21722:	4760      	bx	ip
   21724:	000027e0 	.word	0x000027e0
   21728:	0002faf0 	.word	0x0002faf0
   2172c:	00022089 	.word	0x00022089

00021730 <GL_Document_Create_Init>:
   21730:	b40f      	push	{r0, r1, r2, r3}
   21732:	4805      	ldr	r0, [pc, #20]	; (21748 <GL_Document_Create+0xc>)
   21734:	2100      	movs	r1, #0
   21736:	4a05      	ldr	r2, [pc, #20]	; (2174c <GL_Document_Create+0x10>)
   21738:	4b05      	ldr	r3, [pc, #20]	; (21750 <GL_Document_Create+0x14>)
   2173a:	4718      	bx	r3

0002173c <GL_Document_Create>:
   2173c:	b401      	push	{r0}
   2173e:	4803      	ldr	r0, [pc, #12]	; (2174c <GL_Document_Create+0x10>)
   21740:	6800      	ldr	r0, [r0, #0]
   21742:	4684      	mov	ip, r0
   21744:	bc01      	pop	{r0}
   21746:	4760      	bx	ip
   21748:	000027ed 	.word	0x000027ed
   2174c:	0002fb00 	.word	0x0002fb00
   21750:	00022089 	.word	0x00022089

00021754 <GL_Document_Print_Init>:
   21754:	b40f      	push	{r0, r1, r2, r3}
   21756:	4805      	ldr	r0, [pc, #20]	; (2176c <GL_Document_Print+0xc>)
   21758:	2100      	movs	r1, #0
   2175a:	4a05      	ldr	r2, [pc, #20]	; (21770 <GL_Document_Print+0x10>)
   2175c:	4b05      	ldr	r3, [pc, #20]	; (21774 <GL_Document_Print+0x14>)
   2175e:	4718      	bx	r3

00021760 <GL_Document_Print>:
   21760:	b401      	push	{r0}
   21762:	4803      	ldr	r0, [pc, #12]	; (21770 <GL_Document_Print+0x10>)
   21764:	6800      	ldr	r0, [r0, #0]
   21766:	4684      	mov	ip, r0
   21768:	bc01      	pop	{r0}
   2176a:	4760      	bx	ip
   2176c:	000027ee 	.word	0x000027ee
   21770:	0002fb10 	.word	0x0002fb10
   21774:	00022089 	.word	0x00022089

00021778 <GL_Drawing_Clear_Init>:
   21778:	b40f      	push	{r0, r1, r2, r3}
   2177a:	4805      	ldr	r0, [pc, #20]	; (21790 <GL_Drawing_Clear+0xc>)
   2177c:	2100      	movs	r1, #0
   2177e:	4a05      	ldr	r2, [pc, #20]	; (21794 <GL_Drawing_Clear+0x10>)
   21780:	4b05      	ldr	r3, [pc, #20]	; (21798 <GL_Drawing_Clear+0x14>)
   21782:	4718      	bx	r3

00021784 <GL_Drawing_Clear>:
   21784:	b401      	push	{r0}
   21786:	4803      	ldr	r0, [pc, #12]	; (21794 <GL_Drawing_Clear+0x10>)
   21788:	6800      	ldr	r0, [r0, #0]
   2178a:	4684      	mov	ip, r0
   2178c:	bc01      	pop	{r0}
   2178e:	4760      	bx	ip
   21790:	000027a5 	.word	0x000027a5
   21794:	0002fb20 	.word	0x0002fb20
   21798:	00022089 	.word	0x00022089

0002179c <GL_Drawing_Create_Init>:
   2179c:	b40f      	push	{r0, r1, r2, r3}
   2179e:	4805      	ldr	r0, [pc, #20]	; (217b4 <GL_Drawing_Create+0xc>)
   217a0:	2100      	movs	r1, #0
   217a2:	4a05      	ldr	r2, [pc, #20]	; (217b8 <GL_Drawing_Create+0x10>)
   217a4:	4b05      	ldr	r3, [pc, #20]	; (217bc <GL_Drawing_Create+0x14>)
   217a6:	4718      	bx	r3

000217a8 <GL_Drawing_Create>:
   217a8:	b401      	push	{r0}
   217aa:	4803      	ldr	r0, [pc, #12]	; (217b8 <GL_Drawing_Create+0x10>)
   217ac:	6800      	ldr	r0, [r0, #0]
   217ae:	4684      	mov	ip, r0
   217b0:	bc01      	pop	{r0}
   217b2:	4760      	bx	ip
   217b4:	00002796 	.word	0x00002796
   217b8:	0002fb30 	.word	0x0002fb30
   217bc:	00022089 	.word	0x00022089

000217c0 <GL_Drawing_DrawEllipse_Init>:
   217c0:	b40f      	push	{r0, r1, r2, r3}
   217c2:	4805      	ldr	r0, [pc, #20]	; (217d8 <GL_Drawing_DrawEllipse+0xc>)
   217c4:	2100      	movs	r1, #0
   217c6:	4a05      	ldr	r2, [pc, #20]	; (217dc <GL_Drawing_DrawEllipse+0x10>)
   217c8:	4b05      	ldr	r3, [pc, #20]	; (217e0 <GL_Drawing_DrawEllipse+0x14>)
   217ca:	4718      	bx	r3

000217cc <GL_Drawing_DrawEllipse>:
   217cc:	b401      	push	{r0}
   217ce:	4803      	ldr	r0, [pc, #12]	; (217dc <GL_Drawing_DrawEllipse+0x10>)
   217d0:	6800      	ldr	r0, [r0, #0]
   217d2:	4684      	mov	ip, r0
   217d4:	bc01      	pop	{r0}
   217d6:	4760      	bx	ip
   217d8:	0000279c 	.word	0x0000279c
   217dc:	0002fb40 	.word	0x0002fb40
   217e0:	00022089 	.word	0x00022089

000217e4 <GL_Drawing_DrawLine_Init>:
   217e4:	b40f      	push	{r0, r1, r2, r3}
   217e6:	4805      	ldr	r0, [pc, #20]	; (217fc <GL_Drawing_DrawLine+0xc>)
   217e8:	2100      	movs	r1, #0
   217ea:	4a05      	ldr	r2, [pc, #20]	; (21800 <GL_Drawing_DrawLine+0x10>)
   217ec:	4b05      	ldr	r3, [pc, #20]	; (21804 <GL_Drawing_DrawLine+0x14>)
   217ee:	4718      	bx	r3

000217f0 <GL_Drawing_DrawLine>:
   217f0:	b401      	push	{r0}
   217f2:	4803      	ldr	r0, [pc, #12]	; (21800 <GL_Drawing_DrawLine+0x10>)
   217f4:	6800      	ldr	r0, [r0, #0]
   217f6:	4684      	mov	ip, r0
   217f8:	bc01      	pop	{r0}
   217fa:	4760      	bx	ip
   217fc:	0000279a 	.word	0x0000279a
   21800:	0002fb50 	.word	0x0002fb50
   21804:	00022089 	.word	0x00022089

00021808 <GL_Drawing_DrawRect_Init>:
   21808:	b40f      	push	{r0, r1, r2, r3}
   2180a:	4805      	ldr	r0, [pc, #20]	; (21820 <GL_Drawing_DrawRect+0xc>)
   2180c:	2100      	movs	r1, #0
   2180e:	4a05      	ldr	r2, [pc, #20]	; (21824 <GL_Drawing_DrawRect+0x10>)
   21810:	4b05      	ldr	r3, [pc, #20]	; (21828 <GL_Drawing_DrawRect+0x14>)
   21812:	4718      	bx	r3

00021814 <GL_Drawing_DrawRect>:
   21814:	b401      	push	{r0}
   21816:	4803      	ldr	r0, [pc, #12]	; (21824 <GL_Drawing_DrawRect+0x10>)
   21818:	6800      	ldr	r0, [r0, #0]
   2181a:	4684      	mov	ip, r0
   2181c:	bc01      	pop	{r0}
   2181e:	4760      	bx	ip
   21820:	0000279b 	.word	0x0000279b
   21824:	0002fb60 	.word	0x0002fb60
   21828:	00022089 	.word	0x00022089

0002182c <GL_Drawing_DrawText_Init>:
   2182c:	b40f      	push	{r0, r1, r2, r3}
   2182e:	4805      	ldr	r0, [pc, #20]	; (21844 <GL_Drawing_DrawText+0xc>)
   21830:	2100      	movs	r1, #0
   21832:	4a05      	ldr	r2, [pc, #20]	; (21848 <GL_Drawing_DrawText+0x10>)
   21834:	4b05      	ldr	r3, [pc, #20]	; (2184c <GL_Drawing_DrawText+0x14>)
   21836:	4718      	bx	r3

00021838 <GL_Drawing_DrawText>:
   21838:	b401      	push	{r0}
   2183a:	4803      	ldr	r0, [pc, #12]	; (21848 <GL_Drawing_DrawText+0x10>)
   2183c:	6800      	ldr	r0, [r0, #0]
   2183e:	4684      	mov	ip, r0
   21840:	bc01      	pop	{r0}
   21842:	4760      	bx	ip
   21844:	0000279f 	.word	0x0000279f
   21848:	0002fb70 	.word	0x0002fb70
   2184c:	00022089 	.word	0x00022089

00021850 <GL_Drawing_SetBrush_Init>:
   21850:	b40f      	push	{r0, r1, r2, r3}
   21852:	4805      	ldr	r0, [pc, #20]	; (21868 <GL_Drawing_SetBrush+0xc>)
   21854:	2100      	movs	r1, #0
   21856:	4a05      	ldr	r2, [pc, #20]	; (2186c <GL_Drawing_SetBrush+0x10>)
   21858:	4b05      	ldr	r3, [pc, #20]	; (21870 <GL_Drawing_SetBrush+0x14>)
   2185a:	4718      	bx	r3

0002185c <GL_Drawing_SetBrush>:
   2185c:	b401      	push	{r0}
   2185e:	4803      	ldr	r0, [pc, #12]	; (2186c <GL_Drawing_SetBrush+0x10>)
   21860:	6800      	ldr	r0, [r0, #0]
   21862:	4684      	mov	ip, r0
   21864:	bc01      	pop	{r0}
   21866:	4760      	bx	ip
   21868:	00002799 	.word	0x00002799
   2186c:	0002fb80 	.word	0x0002fb80
   21870:	00022089 	.word	0x00022089

00021874 <GL_Drawing_SetFont_Init>:
   21874:	b40f      	push	{r0, r1, r2, r3}
   21876:	4805      	ldr	r0, [pc, #20]	; (2188c <GL_Drawing_SetFont+0xc>)
   21878:	2100      	movs	r1, #0
   2187a:	4a05      	ldr	r2, [pc, #20]	; (21890 <GL_Drawing_SetFont+0x10>)
   2187c:	4b05      	ldr	r3, [pc, #20]	; (21894 <GL_Drawing_SetFont+0x14>)
   2187e:	4718      	bx	r3

00021880 <GL_Drawing_SetFont>:
   21880:	b401      	push	{r0}
   21882:	4803      	ldr	r0, [pc, #12]	; (21890 <GL_Drawing_SetFont+0x10>)
   21884:	6800      	ldr	r0, [r0, #0]
   21886:	4684      	mov	ip, r0
   21888:	bc01      	pop	{r0}
   2188a:	4760      	bx	ip
   2188c:	00002797 	.word	0x00002797
   21890:	0002fb90 	.word	0x0002fb90
   21894:	00022089 	.word	0x00022089

00021898 <GL_Drawing_SetPen_Init>:
   21898:	b40f      	push	{r0, r1, r2, r3}
   2189a:	4805      	ldr	r0, [pc, #20]	; (218b0 <GL_Drawing_SetPen+0xc>)
   2189c:	2100      	movs	r1, #0
   2189e:	4a05      	ldr	r2, [pc, #20]	; (218b4 <GL_Drawing_SetPen+0x10>)
   218a0:	4b05      	ldr	r3, [pc, #20]	; (218b8 <GL_Drawing_SetPen+0x14>)
   218a2:	4718      	bx	r3

000218a4 <GL_Drawing_SetPen>:
   218a4:	b401      	push	{r0}
   218a6:	4803      	ldr	r0, [pc, #12]	; (218b4 <GL_Drawing_SetPen+0x10>)
   218a8:	6800      	ldr	r0, [r0, #0]
   218aa:	4684      	mov	ip, r0
   218ac:	bc01      	pop	{r0}
   218ae:	4760      	bx	ip
   218b0:	00002798 	.word	0x00002798
   218b4:	0002fba0 	.word	0x0002fba0
   218b8:	00022089 	.word	0x00022089

000218bc <GL_GraphicLib_BindSingleKey_Init>:
   218bc:	b40f      	push	{r0, r1, r2, r3}
   218be:	4805      	ldr	r0, [pc, #20]	; (218d4 <GL_GraphicLib_BindSingleKey+0xc>)
   218c0:	2100      	movs	r1, #0
   218c2:	4a05      	ldr	r2, [pc, #20]	; (218d8 <GL_GraphicLib_BindSingleKey+0x10>)
   218c4:	4b05      	ldr	r3, [pc, #20]	; (218dc <GL_GraphicLib_BindSingleKey+0x14>)
   218c6:	4718      	bx	r3

000218c8 <GL_GraphicLib_BindSingleKey>:
   218c8:	b401      	push	{r0}
   218ca:	4803      	ldr	r0, [pc, #12]	; (218d8 <GL_GraphicLib_BindSingleKey+0x10>)
   218cc:	6800      	ldr	r0, [r0, #0]
   218ce:	4684      	mov	ip, r0
   218d0:	bc01      	pop	{r0}
   218d2:	4760      	bx	ip
   218d4:	0000271b 	.word	0x0000271b
   218d8:	0002fbb0 	.word	0x0002fbb0
   218dc:	00022089 	.word	0x00022089

000218e0 <GL_GraphicLib_Create>:
   218e0:	b538      	push	{r3, r4, r5, lr}
   218e2:	4b11      	ldr	r3, [pc, #68]	; (21928 <GL_GraphicLib_Create+0x48>)
   218e4:	4a11      	ldr	r2, [pc, #68]	; (2192c <GL_GraphicLib_Create+0x4c>)
   218e6:	447b      	add	r3, pc
   218e8:	447a      	add	r2, pc
   218ea:	6819      	ldr	r1, [r3, #0]
   218ec:	b911      	cbnz	r1, 218f4 <GL_GraphicLib_Create+0x14>
   218ee:	4910      	ldr	r1, [pc, #64]	; (21930 <GL_GraphicLib_Create+0x50>)
   218f0:	5852      	ldr	r2, [r2, r1]
   218f2:	601a      	str	r2, [r3, #0]
   218f4:	4b0f      	ldr	r3, [pc, #60]	; (21934 <GL_GraphicLib_Create+0x54>)
   218f6:	447b      	add	r3, pc
   218f8:	681c      	ldr	r4, [r3, #0]
   218fa:	b19c      	cbz	r4, 21924 <GL_GraphicLib_Create+0x44>
   218fc:	4d0e      	ldr	r5, [pc, #56]	; (21938 <GL_GraphicLib_Create+0x58>)
   218fe:	47a0      	blx	r4
   21900:	447d      	add	r5, pc
   21902:	4604      	mov	r4, r0
   21904:	6829      	ldr	r1, [r5, #0]
   21906:	b929      	cbnz	r1, 21914 <GL_GraphicLib_Create+0x34>
   21908:	f642 0082 	movw	r0, #10370	; 0x2882
   2190c:	460a      	mov	r2, r1
   2190e:	f000 fb75 	bl	21ffc <GL_GetProcAddressWithoutExit>
   21912:	6028      	str	r0, [r5, #0]
   21914:	4b09      	ldr	r3, [pc, #36]	; (2193c <GL_GraphicLib_Create+0x5c>)
   21916:	447b      	add	r3, pc
   21918:	681b      	ldr	r3, [r3, #0]
   2191a:	b11b      	cbz	r3, 21924 <GL_GraphicLib_Create+0x44>
   2191c:	4620      	mov	r0, r4
   2191e:	2106      	movs	r1, #6
   21920:	220a      	movs	r2, #10
   21922:	4798      	blx	r3
   21924:	4620      	mov	r0, r4
   21926:	bd38      	pop	{r3, r4, r5, pc}
   21928:	0000e2d6 	.word	0x0000e2d6
   2192c:	0000d82c 	.word	0x0000d82c
   21930:	000000d8 	.word	0x000000d8
   21934:	0000e2c6 	.word	0x0000e2c6
   21938:	0000e750 	.word	0x0000e750
   2193c:	0000e73a 	.word	0x0000e73a

00021940 <GL_GraphicLib_Create_Init>:
   21940:	2100      	movs	r1, #0
   21942:	b508      	push	{r3, lr}
   21944:	460a      	mov	r2, r1
   21946:	f242 7010 	movw	r0, #10000	; 0x2710
   2194a:	f000 fb57 	bl	21ffc <GL_GetProcAddressWithoutExit>
   2194e:	4b03      	ldr	r3, [pc, #12]	; (2195c <GL_GraphicLib_Create_Init+0x1c>)
   21950:	447b      	add	r3, pc
   21952:	6018      	str	r0, [r3, #0]
   21954:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   21958:	f7ff bfc2 	b.w	218e0 <GL_GraphicLib_Create>
   2195c:	0000e26c 	.word	0x0000e26c

00021960 <GL_GraphicLib_IsTouchPresent_Init>:
   21960:	b40f      	push	{r0, r1, r2, r3}
   21962:	4805      	ldr	r0, [pc, #20]	; (21978 <GL_GraphicLib_IsTouchPresent+0xc>)
   21964:	2100      	movs	r1, #0
   21966:	4a05      	ldr	r2, [pc, #20]	; (2197c <GL_GraphicLib_IsTouchPresent+0x10>)
   21968:	4b05      	ldr	r3, [pc, #20]	; (21980 <GL_GraphicLib_IsTouchPresent+0x14>)
   2196a:	4718      	bx	r3

0002196c <GL_GraphicLib_IsTouchPresent>:
   2196c:	b401      	push	{r0}
   2196e:	4803      	ldr	r0, [pc, #12]	; (2197c <GL_GraphicLib_IsTouchPresent+0x10>)
   21970:	6800      	ldr	r0, [r0, #0]
   21972:	4684      	mov	ip, r0
   21974:	bc01      	pop	{r0}
   21976:	4760      	bx	ip
   21978:	0000284d 	.word	0x0000284d
   2197c:	0002fbd0 	.word	0x0002fbd0
   21980:	00022089 	.word	0x00022089

00021984 <GL_GraphicLib_SetCharset_Init>:
   21984:	b40f      	push	{r0, r1, r2, r3}
   21986:	4805      	ldr	r0, [pc, #20]	; (2199c <GL_GraphicLib_SetCharset+0xc>)
   21988:	2100      	movs	r1, #0
   2198a:	4a05      	ldr	r2, [pc, #20]	; (219a0 <GL_GraphicLib_SetCharset+0x10>)
   2198c:	4b05      	ldr	r3, [pc, #20]	; (219a4 <GL_GraphicLib_SetCharset+0x14>)
   2198e:	4718      	bx	r3

00021990 <GL_GraphicLib_SetCharset>:
   21990:	b401      	push	{r0}
   21992:	4803      	ldr	r0, [pc, #12]	; (219a0 <GL_GraphicLib_SetCharset+0x10>)
   21994:	6800      	ldr	r0, [r0, #0]
   21996:	4684      	mov	ip, r0
   21998:	bc01      	pop	{r0}
   2199a:	4760      	bx	ip
   2199c:	00002718 	.word	0x00002718
   219a0:	0002fbe0 	.word	0x0002fbe0
   219a4:	00022089 	.word	0x00022089

000219a8 <GL_GraphicLib_UnbindKey_Init>:
   219a8:	b40f      	push	{r0, r1, r2, r3}
   219aa:	4805      	ldr	r0, [pc, #20]	; (219c0 <GL_GraphicLib_UnbindKey+0xc>)
   219ac:	2100      	movs	r1, #0
   219ae:	4a05      	ldr	r2, [pc, #20]	; (219c4 <GL_GraphicLib_UnbindKey+0x10>)
   219b0:	4b05      	ldr	r3, [pc, #20]	; (219c8 <GL_GraphicLib_UnbindKey+0x14>)
   219b2:	4718      	bx	r3

000219b4 <GL_GraphicLib_UnbindKey>:
   219b4:	b401      	push	{r0}
   219b6:	4803      	ldr	r0, [pc, #12]	; (219c4 <GL_GraphicLib_UnbindKey+0x10>)
   219b8:	6800      	ldr	r0, [r0, #0]
   219ba:	4684      	mov	ip, r0
   219bc:	bc01      	pop	{r0}
   219be:	4760      	bx	ip
   219c0:	0000271c 	.word	0x0000271c
   219c4:	0002fbf0 	.word	0x0002fbf0
   219c8:	00022089 	.word	0x00022089

000219cc <GL_Label_Create_Init>:
   219cc:	b40f      	push	{r0, r1, r2, r3}
   219ce:	4805      	ldr	r0, [pc, #20]	; (219e4 <GL_Label_Create+0xc>)
   219d0:	2100      	movs	r1, #0
   219d2:	4a05      	ldr	r2, [pc, #20]	; (219e8 <GL_Label_Create+0x10>)
   219d4:	4b05      	ldr	r3, [pc, #20]	; (219ec <GL_Label_Create+0x14>)
   219d6:	4718      	bx	r3

000219d8 <GL_Label_Create>:
   219d8:	b401      	push	{r0}
   219da:	4803      	ldr	r0, [pc, #12]	; (219e8 <GL_Label_Create+0x10>)
   219dc:	6800      	ldr	r0, [r0, #0]
   219de:	4684      	mov	ip, r0
   219e0:	bc01      	pop	{r0}
   219e2:	4760      	bx	ip
   219e4:	00002721 	.word	0x00002721
   219e8:	0002fc00 	.word	0x0002fc00
   219ec:	00022089 	.word	0x00022089

000219f0 <GL_Layout_Create_Init>:
   219f0:	b40f      	push	{r0, r1, r2, r3}
   219f2:	4805      	ldr	r0, [pc, #20]	; (21a08 <GL_Layout_Create+0xc>)
   219f4:	2100      	movs	r1, #0
   219f6:	4a05      	ldr	r2, [pc, #20]	; (21a0c <GL_Layout_Create+0x10>)
   219f8:	4b05      	ldr	r3, [pc, #20]	; (21a10 <GL_Layout_Create+0x14>)
   219fa:	4718      	bx	r3

000219fc <GL_Layout_Create>:
   219fc:	b401      	push	{r0}
   219fe:	4803      	ldr	r0, [pc, #12]	; (21a0c <GL_Layout_Create+0x10>)
   21a00:	6800      	ldr	r0, [r0, #0]
   21a02:	4684      	mov	ip, r0
   21a04:	bc01      	pop	{r0}
   21a06:	4760      	bx	ip
   21a08:	00002722 	.word	0x00002722
   21a0c:	0002fc10 	.word	0x0002fc10
   21a10:	00022089 	.word	0x00022089

00021a14 <GL_Message_GetKey_Init>:
   21a14:	b40f      	push	{r0, r1, r2, r3}
   21a16:	4805      	ldr	r0, [pc, #20]	; (21a2c <GL_Message_GetKey+0xc>)
   21a18:	2100      	movs	r1, #0
   21a1a:	4a05      	ldr	r2, [pc, #20]	; (21a30 <GL_Message_GetKey+0x10>)
   21a1c:	4b05      	ldr	r3, [pc, #20]	; (21a34 <GL_Message_GetKey+0x14>)
   21a1e:	4718      	bx	r3

00021a20 <GL_Message_GetKey>:
   21a20:	b401      	push	{r0}
   21a22:	4803      	ldr	r0, [pc, #12]	; (21a30 <GL_Message_GetKey+0x10>)
   21a24:	6800      	ldr	r0, [r0, #0]
   21a26:	4684      	mov	ip, r0
   21a28:	bc01      	pop	{r0}
   21a2a:	4760      	bx	ip
   21a2c:	00002787 	.word	0x00002787
   21a30:	0002fc20 	.word	0x0002fc20
   21a34:	00022089 	.word	0x00022089

00021a38 <GL_Message_GetWidget_Init>:
   21a38:	b40f      	push	{r0, r1, r2, r3}
   21a3a:	4805      	ldr	r0, [pc, #20]	; (21a50 <GL_Message_GetWidget+0xc>)
   21a3c:	2100      	movs	r1, #0
   21a3e:	4a05      	ldr	r2, [pc, #20]	; (21a54 <GL_Message_GetWidget+0x10>)
   21a40:	4b05      	ldr	r3, [pc, #20]	; (21a58 <GL_Message_GetWidget+0x14>)
   21a42:	4718      	bx	r3

00021a44 <GL_Message_GetWidget>:
   21a44:	b401      	push	{r0}
   21a46:	4803      	ldr	r0, [pc, #12]	; (21a54 <GL_Message_GetWidget+0x10>)
   21a48:	6800      	ldr	r0, [r0, #0]
   21a4a:	4684      	mov	ip, r0
   21a4c:	bc01      	pop	{r0}
   21a4e:	4760      	bx	ip
   21a50:	00002789 	.word	0x00002789
   21a54:	0002fc30 	.word	0x0002fc30
   21a58:	00022089 	.word	0x00022089

00021a5c <GL_Message_SetResult_Init>:
   21a5c:	b40f      	push	{r0, r1, r2, r3}
   21a5e:	4805      	ldr	r0, [pc, #20]	; (21a74 <GL_Message_SetResult+0xc>)
   21a60:	2100      	movs	r1, #0
   21a62:	4a05      	ldr	r2, [pc, #20]	; (21a78 <GL_Message_SetResult+0x10>)
   21a64:	4b05      	ldr	r3, [pc, #20]	; (21a7c <GL_Message_SetResult+0x14>)
   21a66:	4718      	bx	r3

00021a68 <GL_Message_SetResult>:
   21a68:	b401      	push	{r0}
   21a6a:	4803      	ldr	r0, [pc, #12]	; (21a78 <GL_Message_SetResult+0x10>)
   21a6c:	6800      	ldr	r0, [r0, #0]
   21a6e:	4684      	mov	ip, r0
   21a70:	bc01      	pop	{r0}
   21a72:	4760      	bx	ip
   21a74:	000027f5 	.word	0x000027f5
   21a78:	0002fc40 	.word	0x0002fc40
   21a7c:	00022089 	.word	0x00022089

00021a80 <GL_Message_SetUserData_Init>:
   21a80:	b40f      	push	{r0, r1, r2, r3}
   21a82:	4805      	ldr	r0, [pc, #20]	; (21a98 <GL_Message_SetUserData+0xc>)
   21a84:	2100      	movs	r1, #0
   21a86:	4a05      	ldr	r2, [pc, #20]	; (21a9c <GL_Message_SetUserData+0x10>)
   21a88:	4b05      	ldr	r3, [pc, #20]	; (21aa0 <GL_Message_SetUserData+0x14>)
   21a8a:	4718      	bx	r3

00021a8c <GL_Message_SetUserData>:
   21a8c:	b401      	push	{r0}
   21a8e:	4803      	ldr	r0, [pc, #12]	; (21a9c <GL_Message_SetUserData+0x10>)
   21a90:	6800      	ldr	r0, [r0, #0]
   21a92:	4684      	mov	ip, r0
   21a94:	bc01      	pop	{r0}
   21a96:	4760      	bx	ip
   21a98:	000027f7 	.word	0x000027f7
   21a9c:	0002fc50 	.word	0x0002fc50
   21aa0:	00022089 	.word	0x00022089

00021aa4 <GL_Picture_Create_Init>:
   21aa4:	b40f      	push	{r0, r1, r2, r3}
   21aa6:	4805      	ldr	r0, [pc, #20]	; (21abc <GL_Picture_Create+0xc>)
   21aa8:	2100      	movs	r1, #0
   21aaa:	4a05      	ldr	r2, [pc, #20]	; (21ac0 <GL_Picture_Create+0x10>)
   21aac:	4b05      	ldr	r3, [pc, #20]	; (21ac4 <GL_Picture_Create+0x14>)
   21aae:	4718      	bx	r3

00021ab0 <GL_Picture_Create>:
   21ab0:	b401      	push	{r0}
   21ab2:	4803      	ldr	r0, [pc, #12]	; (21ac0 <GL_Picture_Create+0x10>)
   21ab4:	6800      	ldr	r0, [r0, #0]
   21ab6:	4684      	mov	ip, r0
   21ab8:	bc01      	pop	{r0}
   21aba:	4760      	bx	ip
   21abc:	00002723 	.word	0x00002723
   21ac0:	0002fc60 	.word	0x0002fc60
   21ac4:	00022089 	.word	0x00022089

00021ac8 <GL_Print_Create_Init>:
   21ac8:	b40f      	push	{r0, r1, r2, r3}
   21aca:	4805      	ldr	r0, [pc, #20]	; (21ae0 <GL_Print_Create+0xc>)
   21acc:	2100      	movs	r1, #0
   21ace:	4a05      	ldr	r2, [pc, #20]	; (21ae4 <GL_Print_Create+0x10>)
   21ad0:	4b05      	ldr	r3, [pc, #20]	; (21ae8 <GL_Print_Create+0x14>)
   21ad2:	4718      	bx	r3

00021ad4 <GL_Print_Create>:
   21ad4:	b401      	push	{r0}
   21ad6:	4803      	ldr	r0, [pc, #12]	; (21ae4 <GL_Print_Create+0x10>)
   21ad8:	6800      	ldr	r0, [r0, #0]
   21ada:	4684      	mov	ip, r0
   21adc:	bc01      	pop	{r0}
   21ade:	4760      	bx	ip
   21ae0:	00002812 	.word	0x00002812
   21ae4:	0002fc70 	.word	0x0002fc70
   21ae8:	00022089 	.word	0x00022089

00021aec <GL_Timer_Create_Init>:
   21aec:	b40f      	push	{r0, r1, r2, r3}
   21aee:	4805      	ldr	r0, [pc, #20]	; (21b04 <GL_Timer_Create+0xc>)
   21af0:	2100      	movs	r1, #0
   21af2:	4a05      	ldr	r2, [pc, #20]	; (21b08 <GL_Timer_Create+0x10>)
   21af4:	4b05      	ldr	r3, [pc, #20]	; (21b0c <GL_Timer_Create+0x14>)
   21af6:	4718      	bx	r3

00021af8 <GL_Timer_Create>:
   21af8:	b401      	push	{r0}
   21afa:	4803      	ldr	r0, [pc, #12]	; (21b08 <GL_Timer_Create+0x10>)
   21afc:	6800      	ldr	r0, [r0, #0]
   21afe:	4684      	mov	ip, r0
   21b00:	bc01      	pop	{r0}
   21b02:	4760      	bx	ip
   21b04:	0000278d 	.word	0x0000278d
   21b08:	0002fc80 	.word	0x0002fc80
   21b0c:	00022089 	.word	0x00022089

00021b10 <GL_Timer_SetInterval_Init>:
   21b10:	b40f      	push	{r0, r1, r2, r3}
   21b12:	4805      	ldr	r0, [pc, #20]	; (21b28 <GL_Timer_SetInterval+0xc>)
   21b14:	2100      	movs	r1, #0
   21b16:	4a05      	ldr	r2, [pc, #20]	; (21b2c <GL_Timer_SetInterval+0x10>)
   21b18:	4b05      	ldr	r3, [pc, #20]	; (21b30 <GL_Timer_SetInterval+0x14>)
   21b1a:	4718      	bx	r3

00021b1c <GL_Timer_SetInterval>:
   21b1c:	b401      	push	{r0}
   21b1e:	4803      	ldr	r0, [pc, #12]	; (21b2c <GL_Timer_SetInterval+0x10>)
   21b20:	6800      	ldr	r0, [r0, #0]
   21b22:	4684      	mov	ip, r0
   21b24:	bc01      	pop	{r0}
   21b26:	4760      	bx	ip
   21b28:	00002790 	.word	0x00002790
   21b2c:	0002fc90 	.word	0x0002fc90
   21b30:	00022089 	.word	0x00022089

00021b34 <GL_Timer_Stop_Init>:
   21b34:	b40f      	push	{r0, r1, r2, r3}
   21b36:	4805      	ldr	r0, [pc, #20]	; (21b4c <GL_Timer_Stop+0xc>)
   21b38:	2100      	movs	r1, #0
   21b3a:	4a05      	ldr	r2, [pc, #20]	; (21b50 <GL_Timer_Stop+0x10>)
   21b3c:	4b05      	ldr	r3, [pc, #20]	; (21b54 <GL_Timer_Stop+0x14>)
   21b3e:	4718      	bx	r3

00021b40 <GL_Timer_Stop>:
   21b40:	b401      	push	{r0}
   21b42:	4803      	ldr	r0, [pc, #12]	; (21b50 <GL_Timer_Stop+0x10>)
   21b44:	6800      	ldr	r0, [r0, #0]
   21b46:	4684      	mov	ip, r0
   21b48:	bc01      	pop	{r0}
   21b4a:	4760      	bx	ip
   21b4c:	0000278f 	.word	0x0000278f
   21b50:	0002fca0 	.word	0x0002fca0
   21b54:	00022089 	.word	0x00022089

00021b58 <GL_Widget_Destroy_Init>:
   21b58:	b40f      	push	{r0, r1, r2, r3}
   21b5a:	4805      	ldr	r0, [pc, #20]	; (21b70 <GL_Widget_Destroy+0xc>)
   21b5c:	2100      	movs	r1, #0
   21b5e:	4a05      	ldr	r2, [pc, #20]	; (21b74 <GL_Widget_Destroy+0x10>)
   21b60:	4b05      	ldr	r3, [pc, #20]	; (21b78 <GL_Widget_Destroy+0x14>)
   21b62:	4718      	bx	r3

00021b64 <GL_Widget_Destroy>:
   21b64:	b401      	push	{r0}
   21b66:	4803      	ldr	r0, [pc, #12]	; (21b74 <GL_Widget_Destroy+0x10>)
   21b68:	6800      	ldr	r0, [r0, #0]
   21b6a:	4684      	mov	ip, r0
   21b6c:	bc01      	pop	{r0}
   21b6e:	4760      	bx	ip
   21b70:	00002739 	.word	0x00002739
   21b74:	0002fcb0 	.word	0x0002fcb0
   21b78:	00022089 	.word	0x00022089

00021b7c <GL_Widget_GetUserData_Init>:
   21b7c:	b40f      	push	{r0, r1, r2, r3}
   21b7e:	4805      	ldr	r0, [pc, #20]	; (21b94 <GL_Widget_GetUserData+0xc>)
   21b80:	2100      	movs	r1, #0
   21b82:	4a05      	ldr	r2, [pc, #20]	; (21b98 <GL_Widget_GetUserData+0x10>)
   21b84:	4b05      	ldr	r3, [pc, #20]	; (21b9c <GL_Widget_GetUserData+0x14>)
   21b86:	4718      	bx	r3

00021b88 <GL_Widget_GetUserData>:
   21b88:	b401      	push	{r0}
   21b8a:	4803      	ldr	r0, [pc, #12]	; (21b98 <GL_Widget_GetUserData+0x10>)
   21b8c:	6800      	ldr	r0, [r0, #0]
   21b8e:	4684      	mov	ip, r0
   21b90:	bc01      	pop	{r0}
   21b92:	4760      	bx	ip
   21b94:	000027f0 	.word	0x000027f0
   21b98:	0002fcc0 	.word	0x0002fcc0
   21b9c:	00022089 	.word	0x00022089

00021ba0 <GL_Widget_RegisterCallback_Init>:
   21ba0:	b40f      	push	{r0, r1, r2, r3}
   21ba2:	4805      	ldr	r0, [pc, #20]	; (21bb8 <GL_Widget_RegisterCallback+0xc>)
   21ba4:	2100      	movs	r1, #0
   21ba6:	4a05      	ldr	r2, [pc, #20]	; (21bbc <GL_Widget_RegisterCallback+0x10>)
   21ba8:	4b05      	ldr	r3, [pc, #20]	; (21bc0 <GL_Widget_RegisterCallback+0x14>)
   21baa:	4718      	bx	r3

00021bac <GL_Widget_RegisterCallback>:
   21bac:	b401      	push	{r0}
   21bae:	4803      	ldr	r0, [pc, #12]	; (21bbc <GL_Widget_RegisterCallback+0x10>)
   21bb0:	6800      	ldr	r0, [r0, #0]
   21bb2:	4684      	mov	ip, r0
   21bb4:	bc01      	pop	{r0}
   21bb6:	4760      	bx	ip
   21bb8:	00002772 	.word	0x00002772
   21bbc:	0002fcd0 	.word	0x0002fcd0
   21bc0:	00022089 	.word	0x00022089

00021bc4 <GL_Widget_SearchId_Init>:
   21bc4:	b40f      	push	{r0, r1, r2, r3}
   21bc6:	4805      	ldr	r0, [pc, #20]	; (21bdc <GL_Widget_SearchId+0xc>)
   21bc8:	2100      	movs	r1, #0
   21bca:	4a05      	ldr	r2, [pc, #20]	; (21be0 <GL_Widget_SearchId+0x10>)
   21bcc:	4b05      	ldr	r3, [pc, #20]	; (21be4 <GL_Widget_SearchId+0x14>)
   21bce:	4718      	bx	r3

00021bd0 <GL_Widget_SearchId>:
   21bd0:	b401      	push	{r0}
   21bd2:	4803      	ldr	r0, [pc, #12]	; (21be0 <GL_Widget_SearchId+0x10>)
   21bd4:	6800      	ldr	r0, [r0, #0]
   21bd6:	4684      	mov	ip, r0
   21bd8:	bc01      	pop	{r0}
   21bda:	4760      	bx	ip
   21bdc:	0000275e 	.word	0x0000275e
   21be0:	0002fce0 	.word	0x0002fce0
   21be4:	00022089 	.word	0x00022089

00021be8 <GL_Widget_SetBackAlign_Init>:
   21be8:	b40f      	push	{r0, r1, r2, r3}
   21bea:	4805      	ldr	r0, [pc, #20]	; (21c00 <GL_Widget_SetBackAlign+0xc>)
   21bec:	2100      	movs	r1, #0
   21bee:	4a05      	ldr	r2, [pc, #20]	; (21c04 <GL_Widget_SetBackAlign+0x10>)
   21bf0:	4b05      	ldr	r3, [pc, #20]	; (21c08 <GL_Widget_SetBackAlign+0x14>)
   21bf2:	4718      	bx	r3

00021bf4 <GL_Widget_SetBackAlign>:
   21bf4:	b401      	push	{r0}
   21bf6:	4803      	ldr	r0, [pc, #12]	; (21c04 <GL_Widget_SetBackAlign+0x10>)
   21bf8:	6800      	ldr	r0, [r0, #0]
   21bfa:	4684      	mov	ip, r0
   21bfc:	bc01      	pop	{r0}
   21bfe:	4760      	bx	ip
   21c00:	00002749 	.word	0x00002749
   21c04:	0002fcf0 	.word	0x0002fcf0
   21c08:	00022089 	.word	0x00022089

00021c0c <GL_Widget_SetBackColor_Init>:
   21c0c:	b40f      	push	{r0, r1, r2, r3}
   21c0e:	4805      	ldr	r0, [pc, #20]	; (21c24 <GL_Widget_SetBackColor+0xc>)
   21c10:	2100      	movs	r1, #0
   21c12:	4a05      	ldr	r2, [pc, #20]	; (21c28 <GL_Widget_SetBackColor+0x10>)
   21c14:	4b05      	ldr	r3, [pc, #20]	; (21c2c <GL_Widget_SetBackColor+0x14>)
   21c16:	4718      	bx	r3

00021c18 <GL_Widget_SetBackColor>:
   21c18:	b401      	push	{r0}
   21c1a:	4803      	ldr	r0, [pc, #12]	; (21c28 <GL_Widget_SetBackColor+0x10>)
   21c1c:	6800      	ldr	r0, [r0, #0]
   21c1e:	4684      	mov	ip, r0
   21c20:	bc01      	pop	{r0}
   21c22:	4760      	bx	ip
   21c24:	00002760 	.word	0x00002760
   21c28:	0002fd00 	.word	0x0002fd00
   21c2c:	00022089 	.word	0x00022089

00021c30 <GL_Widget_SetBorders_Init>:
   21c30:	b40f      	push	{r0, r1, r2, r3}
   21c32:	4805      	ldr	r0, [pc, #20]	; (21c48 <GL_Widget_SetBorders+0xc>)
   21c34:	2100      	movs	r1, #0
   21c36:	4a05      	ldr	r2, [pc, #20]	; (21c4c <GL_Widget_SetBorders+0x10>)
   21c38:	4b05      	ldr	r3, [pc, #20]	; (21c50 <GL_Widget_SetBorders+0x14>)
   21c3a:	4718      	bx	r3

00021c3c <GL_Widget_SetBorders>:
   21c3c:	b401      	push	{r0}
   21c3e:	4803      	ldr	r0, [pc, #12]	; (21c4c <GL_Widget_SetBorders+0x10>)
   21c40:	6800      	ldr	r0, [r0, #0]
   21c42:	4684      	mov	ip, r0
   21c44:	bc01      	pop	{r0}
   21c46:	4760      	bx	ip
   21c48:	0000280b 	.word	0x0000280b
   21c4c:	0002fd10 	.word	0x0002fd10
   21c50:	00022089 	.word	0x00022089

00021c54 <GL_Widget_SetExpand_Init>:
   21c54:	b40f      	push	{r0, r1, r2, r3}
   21c56:	4805      	ldr	r0, [pc, #20]	; (21c6c <GL_Widget_SetExpand+0xc>)
   21c58:	2100      	movs	r1, #0
   21c5a:	4a05      	ldr	r2, [pc, #20]	; (21c70 <GL_Widget_SetExpand+0x10>)
   21c5c:	4b05      	ldr	r3, [pc, #20]	; (21c74 <GL_Widget_SetExpand+0x14>)
   21c5e:	4718      	bx	r3

00021c60 <GL_Widget_SetExpand>:
   21c60:	b401      	push	{r0}
   21c62:	4803      	ldr	r0, [pc, #12]	; (21c70 <GL_Widget_SetExpand+0x10>)
   21c64:	6800      	ldr	r0, [r0, #0]
   21c66:	4684      	mov	ip, r0
   21c68:	bc01      	pop	{r0}
   21c6a:	4760      	bx	ip
   21c6c:	0000275a 	.word	0x0000275a
   21c70:	0002fd20 	.word	0x0002fd20
   21c74:	00022089 	.word	0x00022089

00021c78 <GL_Widget_SetFocusable_Init>:
   21c78:	b40f      	push	{r0, r1, r2, r3}
   21c7a:	4805      	ldr	r0, [pc, #20]	; (21c90 <GL_Widget_SetFocusable+0xc>)
   21c7c:	2100      	movs	r1, #0
   21c7e:	4a05      	ldr	r2, [pc, #20]	; (21c94 <GL_Widget_SetFocusable+0x10>)
   21c80:	4b05      	ldr	r3, [pc, #20]	; (21c98 <GL_Widget_SetFocusable+0x14>)
   21c82:	4718      	bx	r3

00021c84 <GL_Widget_SetFocusable>:
   21c84:	b401      	push	{r0}
   21c86:	4803      	ldr	r0, [pc, #12]	; (21c94 <GL_Widget_SetFocusable+0x10>)
   21c88:	6800      	ldr	r0, [r0, #0]
   21c8a:	4684      	mov	ip, r0
   21c8c:	bc01      	pop	{r0}
   21c8e:	4760      	bx	ip
   21c90:	00002814 	.word	0x00002814
   21c94:	0002fd30 	.word	0x0002fd30
   21c98:	00022089 	.word	0x00022089

00021c9c <GL_Widget_SetFontName_Init>:
   21c9c:	b40f      	push	{r0, r1, r2, r3}
   21c9e:	4805      	ldr	r0, [pc, #20]	; (21cb4 <GL_Widget_SetFontName+0xc>)
   21ca0:	2100      	movs	r1, #0
   21ca2:	4a05      	ldr	r2, [pc, #20]	; (21cb8 <GL_Widget_SetFontName+0x10>)
   21ca4:	4b05      	ldr	r3, [pc, #20]	; (21cbc <GL_Widget_SetFontName+0x14>)
   21ca6:	4718      	bx	r3

00021ca8 <GL_Widget_SetFontName>:
   21ca8:	b401      	push	{r0}
   21caa:	4803      	ldr	r0, [pc, #12]	; (21cb8 <GL_Widget_SetFontName+0x10>)
   21cac:	6800      	ldr	r0, [r0, #0]
   21cae:	4684      	mov	ip, r0
   21cb0:	bc01      	pop	{r0}
   21cb2:	4760      	bx	ip
   21cb4:	0000276a 	.word	0x0000276a
   21cb8:	0002fd40 	.word	0x0002fd40
   21cbc:	00022089 	.word	0x00022089

00021cc0 <GL_Widget_SetFontScale_Init>:
   21cc0:	b40f      	push	{r0, r1, r2, r3}
   21cc2:	4805      	ldr	r0, [pc, #20]	; (21cd8 <GL_Widget_SetFontScale+0xc>)
   21cc4:	2100      	movs	r1, #0
   21cc6:	4a05      	ldr	r2, [pc, #20]	; (21cdc <GL_Widget_SetFontScale+0x10>)
   21cc8:	4b05      	ldr	r3, [pc, #20]	; (21ce0 <GL_Widget_SetFontScale+0x14>)
   21cca:	4718      	bx	r3

00021ccc <GL_Widget_SetFontScale>:
   21ccc:	b401      	push	{r0}
   21cce:	4803      	ldr	r0, [pc, #12]	; (21cdc <GL_Widget_SetFontScale+0x10>)
   21cd0:	6800      	ldr	r0, [r0, #0]
   21cd2:	4684      	mov	ip, r0
   21cd4:	bc01      	pop	{r0}
   21cd6:	4760      	bx	ip
   21cd8:	00002855 	.word	0x00002855
   21cdc:	0002fd50 	.word	0x0002fd50
   21ce0:	00022089 	.word	0x00022089

00021ce4 <GL_Widget_SetFontStyle_Init>:
   21ce4:	b40f      	push	{r0, r1, r2, r3}
   21ce6:	4805      	ldr	r0, [pc, #20]	; (21cfc <GL_Widget_SetFontStyle+0xc>)
   21ce8:	2100      	movs	r1, #0
   21cea:	4a05      	ldr	r2, [pc, #20]	; (21d00 <GL_Widget_SetFontStyle+0x10>)
   21cec:	4b05      	ldr	r3, [pc, #20]	; (21d04 <GL_Widget_SetFontStyle+0x14>)
   21cee:	4718      	bx	r3

00021cf0 <GL_Widget_SetFontStyle>:
   21cf0:	b401      	push	{r0}
   21cf2:	4803      	ldr	r0, [pc, #12]	; (21d00 <GL_Widget_SetFontStyle+0x10>)
   21cf4:	6800      	ldr	r0, [r0, #0]
   21cf6:	4684      	mov	ip, r0
   21cf8:	bc01      	pop	{r0}
   21cfa:	4760      	bx	ip
   21cfc:	0000276e 	.word	0x0000276e
   21d00:	0002fd60 	.word	0x0002fd60
   21d04:	00022089 	.word	0x00022089

00021d08 <GL_Widget_SetForeColor_Init>:
   21d08:	b40f      	push	{r0, r1, r2, r3}
   21d0a:	4805      	ldr	r0, [pc, #20]	; (21d20 <GL_Widget_SetForeColor+0xc>)
   21d0c:	2100      	movs	r1, #0
   21d0e:	4a05      	ldr	r2, [pc, #20]	; (21d24 <GL_Widget_SetForeColor+0x10>)
   21d10:	4b05      	ldr	r3, [pc, #20]	; (21d28 <GL_Widget_SetForeColor+0x14>)
   21d12:	4718      	bx	r3

00021d14 <GL_Widget_SetForeColor>:
   21d14:	b401      	push	{r0}
   21d16:	4803      	ldr	r0, [pc, #12]	; (21d24 <GL_Widget_SetForeColor+0x10>)
   21d18:	6800      	ldr	r0, [r0, #0]
   21d1a:	4684      	mov	ip, r0
   21d1c:	bc01      	pop	{r0}
   21d1e:	4760      	bx	ip
   21d20:	00002762 	.word	0x00002762
   21d24:	0002fd70 	.word	0x0002fd70
   21d28:	00022089 	.word	0x00022089

00021d2c <GL_Widget_SetGrow_Init>:
   21d2c:	b40f      	push	{r0, r1, r2, r3}
   21d2e:	4805      	ldr	r0, [pc, #20]	; (21d44 <GL_Widget_SetGrow+0xc>)
   21d30:	2100      	movs	r1, #0
   21d32:	4a05      	ldr	r2, [pc, #20]	; (21d48 <GL_Widget_SetGrow+0x10>)
   21d34:	4b05      	ldr	r3, [pc, #20]	; (21d4c <GL_Widget_SetGrow+0x14>)
   21d36:	4718      	bx	r3

00021d38 <GL_Widget_SetGrow>:
   21d38:	b401      	push	{r0}
   21d3a:	4803      	ldr	r0, [pc, #12]	; (21d48 <GL_Widget_SetGrow+0x10>)
   21d3c:	6800      	ldr	r0, [r0, #0]
   21d3e:	4684      	mov	ip, r0
   21d40:	bc01      	pop	{r0}
   21d42:	4760      	bx	ip
   21d44:	00002756 	.word	0x00002756
   21d48:	0002fd80 	.word	0x0002fd80
   21d4c:	00022089 	.word	0x00022089

00021d50 <GL_Widget_SetId_Init>:
   21d50:	b40f      	push	{r0, r1, r2, r3}
   21d52:	4805      	ldr	r0, [pc, #20]	; (21d68 <GL_Widget_SetId+0xc>)
   21d54:	2100      	movs	r1, #0
   21d56:	4a05      	ldr	r2, [pc, #20]	; (21d6c <GL_Widget_SetId+0x10>)
   21d58:	4b05      	ldr	r3, [pc, #20]	; (21d70 <GL_Widget_SetId+0x14>)
   21d5a:	4718      	bx	r3

00021d5c <GL_Widget_SetId>:
   21d5c:	b401      	push	{r0}
   21d5e:	4803      	ldr	r0, [pc, #12]	; (21d6c <GL_Widget_SetId+0x10>)
   21d60:	6800      	ldr	r0, [r0, #0]
   21d62:	4684      	mov	ip, r0
   21d64:	bc01      	pop	{r0}
   21d66:	4760      	bx	ip
   21d68:	0000275d 	.word	0x0000275d
   21d6c:	0002fd90 	.word	0x0002fd90
   21d70:	00022089 	.word	0x00022089

00021d74 <GL_Widget_SetItem_Init>:
   21d74:	b40f      	push	{r0, r1, r2, r3}
   21d76:	4805      	ldr	r0, [pc, #20]	; (21d8c <GL_Widget_SetItem+0xc>)
   21d78:	2100      	movs	r1, #0
   21d7a:	4a05      	ldr	r2, [pc, #20]	; (21d90 <GL_Widget_SetItem+0x10>)
   21d7c:	4b05      	ldr	r3, [pc, #20]	; (21d94 <GL_Widget_SetItem+0x14>)
   21d7e:	4718      	bx	r3

00021d80 <GL_Widget_SetItem>:
   21d80:	b401      	push	{r0}
   21d82:	4803      	ldr	r0, [pc, #12]	; (21d90 <GL_Widget_SetItem+0x10>)
   21d84:	6800      	ldr	r0, [r0, #0]
   21d86:	4684      	mov	ip, r0
   21d88:	bc01      	pop	{r0}
   21d8a:	4760      	bx	ip
   21d8c:	00002747 	.word	0x00002747
   21d90:	0002fda0 	.word	0x0002fda0
   21d94:	00022089 	.word	0x00022089

00021d98 <GL_Widget_SetMargins_Init>:
   21d98:	b40f      	push	{r0, r1, r2, r3}
   21d9a:	4805      	ldr	r0, [pc, #20]	; (21db0 <GL_Widget_SetMargins+0xc>)
   21d9c:	2100      	movs	r1, #0
   21d9e:	4a05      	ldr	r2, [pc, #20]	; (21db4 <GL_Widget_SetMargins+0x10>)
   21da0:	4b05      	ldr	r3, [pc, #20]	; (21db8 <GL_Widget_SetMargins+0x14>)
   21da2:	4718      	bx	r3

00021da4 <GL_Widget_SetMargins>:
   21da4:	b401      	push	{r0}
   21da6:	4803      	ldr	r0, [pc, #12]	; (21db4 <GL_Widget_SetMargins+0x10>)
   21da8:	6800      	ldr	r0, [r0, #0]
   21daa:	4684      	mov	ip, r0
   21dac:	bc01      	pop	{r0}
   21dae:	4760      	bx	ip
   21db0:	0000274c 	.word	0x0000274c
   21db4:	0002fdb0 	.word	0x0002fdb0
   21db8:	00022089 	.word	0x00022089

00021dbc <GL_Widget_SetMinSize_Init>:
   21dbc:	b40f      	push	{r0, r1, r2, r3}
   21dbe:	4805      	ldr	r0, [pc, #20]	; (21dd4 <GL_Widget_SetMinSize+0xc>)
   21dc0:	2100      	movs	r1, #0
   21dc2:	4a05      	ldr	r2, [pc, #20]	; (21dd8 <GL_Widget_SetMinSize+0x10>)
   21dc4:	4b05      	ldr	r3, [pc, #20]	; (21ddc <GL_Widget_SetMinSize+0x14>)
   21dc6:	4718      	bx	r3

00021dc8 <GL_Widget_SetMinSize>:
   21dc8:	b401      	push	{r0}
   21dca:	4803      	ldr	r0, [pc, #12]	; (21dd8 <GL_Widget_SetMinSize+0x10>)
   21dcc:	6800      	ldr	r0, [r0, #0]
   21dce:	4684      	mov	ip, r0
   21dd0:	bc01      	pop	{r0}
   21dd2:	4760      	bx	ip
   21dd4:	0000273f 	.word	0x0000273f
   21dd8:	0002fdc0 	.word	0x0002fdc0
   21ddc:	00022089 	.word	0x00022089

00021de0 <GL_Widget_SetShortcut_Init>:
   21de0:	b40f      	push	{r0, r1, r2, r3}
   21de2:	4805      	ldr	r0, [pc, #20]	; (21df8 <GL_Widget_SetShortcut+0xc>)
   21de4:	2100      	movs	r1, #0
   21de6:	4a05      	ldr	r2, [pc, #20]	; (21dfc <GL_Widget_SetShortcut+0x10>)
   21de8:	4b05      	ldr	r3, [pc, #20]	; (21e00 <GL_Widget_SetShortcut+0x14>)
   21dea:	4718      	bx	r3

00021dec <GL_Widget_SetShortcut>:
   21dec:	b401      	push	{r0}
   21dee:	4803      	ldr	r0, [pc, #12]	; (21dfc <GL_Widget_SetShortcut+0x10>)
   21df0:	6800      	ldr	r0, [r0, #0]
   21df2:	4684      	mov	ip, r0
   21df4:	bc01      	pop	{r0}
   21df6:	4760      	bx	ip
   21df8:	00002776 	.word	0x00002776
   21dfc:	0002fdd0 	.word	0x0002fdd0
   21e00:	00022089 	.word	0x00022089

00021e04 <GL_Widget_SetShrink_Init>:
   21e04:	b40f      	push	{r0, r1, r2, r3}
   21e06:	4805      	ldr	r0, [pc, #20]	; (21e1c <GL_Widget_SetShrink+0xc>)
   21e08:	2100      	movs	r1, #0
   21e0a:	4a05      	ldr	r2, [pc, #20]	; (21e20 <GL_Widget_SetShrink+0x10>)
   21e0c:	4b05      	ldr	r3, [pc, #20]	; (21e24 <GL_Widget_SetShrink+0x14>)
   21e0e:	4718      	bx	r3

00021e10 <GL_Widget_SetShrink>:
   21e10:	b401      	push	{r0}
   21e12:	4803      	ldr	r0, [pc, #12]	; (21e20 <GL_Widget_SetShrink+0x10>)
   21e14:	6800      	ldr	r0, [r0, #0]
   21e16:	4684      	mov	ip, r0
   21e18:	bc01      	pop	{r0}
   21e1a:	4760      	bx	ip
   21e1c:	00002758 	.word	0x00002758
   21e20:	0002fde0 	.word	0x0002fde0
   21e24:	00022089 	.word	0x00022089

00021e28 <GL_Widget_SetSize_Init>:
   21e28:	b40f      	push	{r0, r1, r2, r3}
   21e2a:	4805      	ldr	r0, [pc, #20]	; (21e40 <GL_Widget_SetSize+0xc>)
   21e2c:	2100      	movs	r1, #0
   21e2e:	4a05      	ldr	r2, [pc, #20]	; (21e44 <GL_Widget_SetSize+0x10>)
   21e30:	4b05      	ldr	r3, [pc, #20]	; (21e48 <GL_Widget_SetSize+0x14>)
   21e32:	4718      	bx	r3

00021e34 <GL_Widget_SetSize>:
   21e34:	b401      	push	{r0}
   21e36:	4803      	ldr	r0, [pc, #12]	; (21e44 <GL_Widget_SetSize+0x10>)
   21e38:	6800      	ldr	r0, [r0, #0]
   21e3a:	4684      	mov	ip, r0
   21e3c:	bc01      	pop	{r0}
   21e3e:	4760      	bx	ip
   21e40:	0000273d 	.word	0x0000273d
   21e44:	0002fdf0 	.word	0x0002fdf0
   21e48:	00022089 	.word	0x00022089

00021e4c <GL_Widget_SetSource_Init>:
   21e4c:	b40f      	push	{r0, r1, r2, r3}
   21e4e:	4805      	ldr	r0, [pc, #20]	; (21e64 <GL_Widget_SetSource+0xc>)
   21e50:	2100      	movs	r1, #0
   21e52:	4a05      	ldr	r2, [pc, #20]	; (21e68 <GL_Widget_SetSource+0x10>)
   21e54:	4b05      	ldr	r3, [pc, #20]	; (21e6c <GL_Widget_SetSource+0x14>)
   21e56:	4718      	bx	r3

00021e58 <GL_Widget_SetSource>:
   21e58:	b401      	push	{r0}
   21e5a:	4803      	ldr	r0, [pc, #12]	; (21e68 <GL_Widget_SetSource+0x10>)
   21e5c:	6800      	ldr	r0, [r0, #0]
   21e5e:	4684      	mov	ip, r0
   21e60:	bc01      	pop	{r0}
   21e62:	4760      	bx	ip
   21e64:	000027c0 	.word	0x000027c0
   21e68:	0002fe00 	.word	0x0002fe00
   21e6c:	00022089 	.word	0x00022089

00021e70 <GL_Widget_SetText_Init>:
   21e70:	b40f      	push	{r0, r1, r2, r3}
   21e72:	4805      	ldr	r0, [pc, #20]	; (21e88 <GL_Widget_SetText+0xc>)
   21e74:	2100      	movs	r1, #0
   21e76:	4a05      	ldr	r2, [pc, #20]	; (21e8c <GL_Widget_SetText+0x10>)
   21e78:	4b05      	ldr	r3, [pc, #20]	; (21e90 <GL_Widget_SetText+0x14>)
   21e7a:	4718      	bx	r3

00021e7c <GL_Widget_SetText>:
   21e7c:	b401      	push	{r0}
   21e7e:	4803      	ldr	r0, [pc, #12]	; (21e8c <GL_Widget_SetText+0x10>)
   21e80:	6800      	ldr	r0, [r0, #0]
   21e82:	4684      	mov	ip, r0
   21e84:	bc01      	pop	{r0}
   21e86:	4760      	bx	ip
   21e88:	00002768 	.word	0x00002768
   21e8c:	0002fe10 	.word	0x0002fe10
   21e90:	00022089 	.word	0x00022089

00021e94 <GL_Widget_SetTextAlign_Init>:
   21e94:	b40f      	push	{r0, r1, r2, r3}
   21e96:	4805      	ldr	r0, [pc, #20]	; (21eac <GL_Widget_SetTextAlign+0xc>)
   21e98:	2100      	movs	r1, #0
   21e9a:	4a05      	ldr	r2, [pc, #20]	; (21eb0 <GL_Widget_SetTextAlign+0x10>)
   21e9c:	4b05      	ldr	r3, [pc, #20]	; (21eb4 <GL_Widget_SetTextAlign+0x14>)
   21e9e:	4718      	bx	r3

00021ea0 <GL_Widget_SetTextAlign>:
   21ea0:	b401      	push	{r0}
   21ea2:	4803      	ldr	r0, [pc, #12]	; (21eb0 <GL_Widget_SetTextAlign+0x10>)
   21ea4:	6800      	ldr	r0, [r0, #0]
   21ea6:	4684      	mov	ip, r0
   21ea8:	bc01      	pop	{r0}
   21eaa:	4760      	bx	ip
   21eac:	00002774 	.word	0x00002774
   21eb0:	0002fe20 	.word	0x0002fe20
   21eb4:	00022089 	.word	0x00022089

00021eb8 <GL_Widget_SetTextPaddings_Init>:
   21eb8:	b40f      	push	{r0, r1, r2, r3}
   21eba:	4805      	ldr	r0, [pc, #20]	; (21ed0 <GL_Widget_SetTextPaddings+0xc>)
   21ebc:	2100      	movs	r1, #0
   21ebe:	4a05      	ldr	r2, [pc, #20]	; (21ed4 <GL_Widget_SetTextPaddings+0x10>)
   21ec0:	4b05      	ldr	r3, [pc, #20]	; (21ed8 <GL_Widget_SetTextPaddings+0x14>)
   21ec2:	4718      	bx	r3

00021ec4 <GL_Widget_SetTextPaddings>:
   21ec4:	b401      	push	{r0}
   21ec6:	4803      	ldr	r0, [pc, #12]	; (21ed4 <GL_Widget_SetTextPaddings+0x10>)
   21ec8:	6800      	ldr	r0, [r0, #0]
   21eca:	4684      	mov	ip, r0
   21ecc:	bc01      	pop	{r0}
   21ece:	4760      	bx	ip
   21ed0:	000027a8 	.word	0x000027a8
   21ed4:	0002fe30 	.word	0x0002fe30
   21ed8:	00022089 	.word	0x00022089

00021edc <GL_Widget_SetTransformation_Init>:
   21edc:	b40f      	push	{r0, r1, r2, r3}
   21ede:	4805      	ldr	r0, [pc, #20]	; (21ef4 <GL_Widget_SetTransformation+0xc>)
   21ee0:	2100      	movs	r1, #0
   21ee2:	4a05      	ldr	r2, [pc, #20]	; (21ef8 <GL_Widget_SetTransformation+0x10>)
   21ee4:	4b05      	ldr	r3, [pc, #20]	; (21efc <GL_Widget_SetTransformation+0x14>)
   21ee6:	4718      	bx	r3

00021ee8 <GL_Widget_SetTransformation>:
   21ee8:	b401      	push	{r0}
   21eea:	4803      	ldr	r0, [pc, #12]	; (21ef8 <GL_Widget_SetTransformation+0x10>)
   21eec:	6800      	ldr	r0, [r0, #0]
   21eee:	4684      	mov	ip, r0
   21ef0:	bc01      	pop	{r0}
   21ef2:	4760      	bx	ip
   21ef4:	00002862 	.word	0x00002862
   21ef8:	0002fe40 	.word	0x0002fe40
   21efc:	00022089 	.word	0x00022089

00021f00 <GL_Widget_SetVisible_Init>:
   21f00:	b40f      	push	{r0, r1, r2, r3}
   21f02:	4805      	ldr	r0, [pc, #20]	; (21f18 <GL_Widget_SetVisible+0xc>)
   21f04:	2100      	movs	r1, #0
   21f06:	4a05      	ldr	r2, [pc, #20]	; (21f1c <GL_Widget_SetVisible+0x10>)
   21f08:	4b05      	ldr	r3, [pc, #20]	; (21f20 <GL_Widget_SetVisible+0x14>)
   21f0a:	4718      	bx	r3

00021f0c <GL_Widget_SetVisible>:
   21f0c:	b401      	push	{r0}
   21f0e:	4803      	ldr	r0, [pc, #12]	; (21f1c <GL_Widget_SetVisible+0x10>)
   21f10:	6800      	ldr	r0, [r0, #0]
   21f12:	4684      	mov	ip, r0
   21f14:	bc01      	pop	{r0}
   21f16:	4760      	bx	ip
   21f18:	00002745 	.word	0x00002745
   21f1c:	0002fe50 	.word	0x0002fe50
   21f20:	00022089 	.word	0x00022089

00021f24 <GL_Widget_SetWrap_Init>:
   21f24:	b40f      	push	{r0, r1, r2, r3}
   21f26:	4805      	ldr	r0, [pc, #20]	; (21f3c <GL_Widget_SetWrap+0xc>)
   21f28:	2100      	movs	r1, #0
   21f2a:	4a05      	ldr	r2, [pc, #20]	; (21f40 <GL_Widget_SetWrap+0x10>)
   21f2c:	4b05      	ldr	r3, [pc, #20]	; (21f44 <GL_Widget_SetWrap+0x14>)
   21f2e:	4718      	bx	r3

00021f30 <GL_Widget_SetWrap>:
   21f30:	b401      	push	{r0}
   21f32:	4803      	ldr	r0, [pc, #12]	; (21f40 <GL_Widget_SetWrap+0x10>)
   21f34:	6800      	ldr	r0, [r0, #0]
   21f36:	4684      	mov	ip, r0
   21f38:	bc01      	pop	{r0}
   21f3a:	4760      	bx	ip
   21f3c:	00002876 	.word	0x00002876
   21f40:	0002fe60 	.word	0x0002fe60
   21f44:	00022089 	.word	0x00022089

00021f48 <GL_Widget_UnregisterCallback_Init>:
   21f48:	b40f      	push	{r0, r1, r2, r3}
   21f4a:	4805      	ldr	r0, [pc, #20]	; (21f60 <GL_Widget_UnregisterCallback+0xc>)
   21f4c:	2100      	movs	r1, #0
   21f4e:	4a05      	ldr	r2, [pc, #20]	; (21f64 <GL_Widget_UnregisterCallback+0x10>)
   21f50:	4b05      	ldr	r3, [pc, #20]	; (21f68 <GL_Widget_UnregisterCallback+0x14>)
   21f52:	4718      	bx	r3

00021f54 <GL_Widget_UnregisterCallback>:
   21f54:	b401      	push	{r0}
   21f56:	4803      	ldr	r0, [pc, #12]	; (21f64 <GL_Widget_UnregisterCallback+0x10>)
   21f58:	6800      	ldr	r0, [r0, #0]
   21f5a:	4684      	mov	ip, r0
   21f5c:	bc01      	pop	{r0}
   21f5e:	4760      	bx	ip
   21f60:	00002773 	.word	0x00002773
   21f64:	0002fe70 	.word	0x0002fe70
   21f68:	00022089 	.word	0x00022089

00021f6c <GL_Window_Create_Init>:
   21f6c:	b40f      	push	{r0, r1, r2, r3}
   21f6e:	4805      	ldr	r0, [pc, #20]	; (21f84 <GL_Window_Create+0xc>)
   21f70:	2100      	movs	r1, #0
   21f72:	4a05      	ldr	r2, [pc, #20]	; (21f88 <GL_Window_Create+0x10>)
   21f74:	4b05      	ldr	r3, [pc, #20]	; (21f8c <GL_Window_Create+0x14>)
   21f76:	4718      	bx	r3

00021f78 <GL_Window_Create>:
   21f78:	b401      	push	{r0}
   21f7a:	4803      	ldr	r0, [pc, #12]	; (21f88 <GL_Window_Create+0x10>)
   21f7c:	6800      	ldr	r0, [r0, #0]
   21f7e:	4684      	mov	ip, r0
   21f80:	bc01      	pop	{r0}
   21f82:	4760      	bx	ip
   21f84:	00002778 	.word	0x00002778
   21f88:	0002fe80 	.word	0x0002fe80
   21f8c:	00022089 	.word	0x00022089

00021f90 <GL_Window_Dispatch_Init>:
   21f90:	b40f      	push	{r0, r1, r2, r3}
   21f92:	4805      	ldr	r0, [pc, #20]	; (21fa8 <GL_Window_Dispatch+0xc>)
   21f94:	2100      	movs	r1, #0
   21f96:	4a05      	ldr	r2, [pc, #20]	; (21fac <GL_Window_Dispatch+0x10>)
   21f98:	4b05      	ldr	r3, [pc, #20]	; (21fb0 <GL_Window_Dispatch+0x14>)
   21f9a:	4718      	bx	r3

00021f9c <GL_Window_Dispatch>:
   21f9c:	b401      	push	{r0}
   21f9e:	4803      	ldr	r0, [pc, #12]	; (21fac <GL_Window_Dispatch+0x10>)
   21fa0:	6800      	ldr	r0, [r0, #0]
   21fa2:	4684      	mov	ip, r0
   21fa4:	bc01      	pop	{r0}
   21fa6:	4760      	bx	ip
   21fa8:	000027be 	.word	0x000027be
   21fac:	0002fe90 	.word	0x0002fe90
   21fb0:	00022089 	.word	0x00022089

00021fb4 <GL_Window_GetResult_Init>:
   21fb4:	b40f      	push	{r0, r1, r2, r3}
   21fb6:	4805      	ldr	r0, [pc, #20]	; (21fcc <GL_Window_GetResult+0xc>)
   21fb8:	2100      	movs	r1, #0
   21fba:	4a05      	ldr	r2, [pc, #20]	; (21fd0 <GL_Window_GetResult+0x10>)
   21fbc:	4b05      	ldr	r3, [pc, #20]	; (21fd4 <GL_Window_GetResult+0x14>)
   21fbe:	4718      	bx	r3

00021fc0 <GL_Window_GetResult>:
   21fc0:	b401      	push	{r0}
   21fc2:	4803      	ldr	r0, [pc, #12]	; (21fd0 <GL_Window_GetResult+0x10>)
   21fc4:	6800      	ldr	r0, [r0, #0]
   21fc6:	4684      	mov	ip, r0
   21fc8:	bc01      	pop	{r0}
   21fca:	4760      	bx	ip
   21fcc:	000027f4 	.word	0x000027f4
   21fd0:	0002fea0 	.word	0x0002fea0
   21fd4:	00022089 	.word	0x00022089

00021fd8 <GL_Window_MainLoop_Init>:
   21fd8:	b40f      	push	{r0, r1, r2, r3}
   21fda:	4805      	ldr	r0, [pc, #20]	; (21ff0 <GL_Window_MainLoop+0xc>)
   21fdc:	2100      	movs	r1, #0
   21fde:	4a05      	ldr	r2, [pc, #20]	; (21ff4 <GL_Window_MainLoop+0x10>)
   21fe0:	4b05      	ldr	r3, [pc, #20]	; (21ff8 <GL_Window_MainLoop+0x14>)
   21fe2:	4718      	bx	r3

00021fe4 <GL_Window_MainLoop>:
   21fe4:	b401      	push	{r0}
   21fe6:	4803      	ldr	r0, [pc, #12]	; (21ff4 <GL_Window_MainLoop+0x10>)
   21fe8:	6800      	ldr	r0, [r0, #0]
   21fea:	4684      	mov	ip, r0
   21fec:	bc01      	pop	{r0}
   21fee:	4760      	bx	ip
   21ff0:	00002780 	.word	0x00002780
   21ff4:	0002feb0 	.word	0x0002feb0
   21ff8:	00022089 	.word	0x00022089

00021ffc <GL_GetProcAddressWithoutExit>:
   21ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ffe:	4d12      	ldr	r5, [pc, #72]	; (22048 <GL_GetProcAddressWithoutExit+0x4c>)
   22000:	4607      	mov	r7, r0
   22002:	447d      	add	r5, pc
   22004:	460e      	mov	r6, r1
   22006:	682b      	ldr	r3, [r5, #0]
   22008:	4614      	mov	r4, r2
   2200a:	b923      	cbnz	r3, 22016 <GL_GetProcAddressWithoutExit+0x1a>
   2200c:	480f      	ldr	r0, [pc, #60]	; (2204c <GL_GetProcAddressWithoutExit+0x50>)
   2200e:	4478      	add	r0, pc
   22010:	f000 f885 	bl	2211e <OSL_Dll_Open>
   22014:	6028      	str	r0, [r5, #0]
   22016:	4d0e      	ldr	r5, [pc, #56]	; (22050 <GL_GetProcAddressWithoutExit+0x54>)
   22018:	447d      	add	r5, pc
   2201a:	6828      	ldr	r0, [r5, #0]
   2201c:	b920      	cbnz	r0, 22028 <GL_GetProcAddressWithoutExit+0x2c>
   2201e:	480d      	ldr	r0, [pc, #52]	; (22054 <GL_GetProcAddressWithoutExit+0x58>)
   22020:	4478      	add	r0, pc
   22022:	f7e6 ee4e 	blx	8cc0 <_init+0x160>
   22026:	e005      	b.n	22034 <GL_GetProcAddressWithoutExit+0x38>
   22028:	4639      	mov	r1, r7
   2202a:	f000 f858 	bl	220de <OSL_Dll_GetSymbolByName>
   2202e:	2301      	movs	r3, #1
   22030:	606b      	str	r3, [r5, #4]
   22032:	b920      	cbnz	r0, 2203e <GL_GetProcAddressWithoutExit+0x42>
   22034:	4808      	ldr	r0, [pc, #32]	; (22058 <GL_GetProcAddressWithoutExit+0x5c>)
   22036:	4478      	add	r0, pc
   22038:	f7e6 ee42 	blx	8cc0 <_init+0x160>
   2203c:	4630      	mov	r0, r6
   2203e:	b114      	cbz	r4, 22046 <GL_GetProcAddressWithoutExit+0x4a>
   22040:	6823      	ldr	r3, [r4, #0]
   22042:	b103      	cbz	r3, 22046 <GL_GetProcAddressWithoutExit+0x4a>
   22044:	6020      	str	r0, [r4, #0]
   22046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22048:	0000e052 	.word	0x0000e052
   2204c:	00004431 	.word	0x00004431
   22050:	0000e03c 	.word	0x0000e03c
   22054:	0000442f 	.word	0x0000442f
   22058:	00004439 	.word	0x00004439

0002205c <GL_GetProcAddress>:
   2205c:	b510      	push	{r4, lr}
   2205e:	f7ff ffcd 	bl	21ffc <GL_GetProcAddressWithoutExit>
   22062:	4604      	mov	r4, r0
   22064:	b918      	cbnz	r0, 2206e <GL_GetProcAddress+0x12>
   22066:	4803      	ldr	r0, [pc, #12]	; (22074 <GL_GetProcAddress+0x18>)
   22068:	4478      	add	r0, pc
   2206a:	f7e6 ee2a 	blx	8cc0 <_init+0x160>
   2206e:	4620      	mov	r0, r4
   22070:	bd10      	pop	{r4, pc}
   22072:	bf00      	nop
   22074:	00004418 	.word	0x00004418

00022078 <GL_IsPresent>:
   22078:	4802      	ldr	r0, [pc, #8]	; (22084 <GL_IsPresent+0xc>)
   2207a:	b508      	push	{r3, lr}
   2207c:	4478      	add	r0, pc
   2207e:	f000 f83e 	bl	220fe <OSL_Dll_IsPresent>
   22082:	bd08      	pop	{r3, pc}
   22084:	000043c3 	.word	0x000043c3

00022088 <GL_InitFuncAndBranch>:
   22088:	b500      	push	{lr}
   2208a:	f7ff ffe7 	bl	2205c <GL_GetProcAddress>
   2208e:	bc08      	pop	{r3}
   22090:	469e      	mov	lr, r3
   22092:	4684      	mov	ip, r0
   22094:	bc0f      	pop	{r0, r1, r2, r3}
   22096:	4760      	bx	ip

00022098 <GL_Swi_ObjectLoad>:
   22098:	b580      	push	{r7, lr}
   2209a:	2749      	movs	r7, #73	; 0x49
   2209c:	46bc      	mov	ip, r7
   2209e:	df13      	svc	19
   220a0:	bc80      	pop	{r7}
   220a2:	bc08      	pop	{r3}
   220a4:	4718      	bx	r3

000220a6 <GL_Swi_DllLink>:
   220a6:	b580      	push	{r7, lr}
   220a8:	2750      	movs	r7, #80	; 0x50
   220aa:	46bc      	mov	ip, r7
   220ac:	df13      	svc	19
   220ae:	bc80      	pop	{r7}
   220b0:	bc08      	pop	{r3}
   220b2:	4718      	bx	r3

000220b4 <OSL_Dll_Close_Init>:
   220b4:	b40f      	push	{r0, r1, r2, r3}
   220b6:	2003      	movs	r0, #3
   220b8:	4904      	ldr	r1, [pc, #16]	; (220cc <OSL_Dll_Close+0xe>)
   220ba:	4a05      	ldr	r2, [pc, #20]	; (220d0 <OSL_Dll_Close+0x12>)
   220bc:	4710      	bx	r2

000220be <OSL_Dll_Close>:
   220be:	b401      	push	{r0}
   220c0:	4802      	ldr	r0, [pc, #8]	; (220cc <OSL_Dll_Close+0xe>)
   220c2:	6800      	ldr	r0, [r0, #0]
   220c4:	4684      	mov	ip, r0
   220c6:	bc01      	pop	{r0}
   220c8:	4760      	bx	ip
   220ca:	0000      	.short	0x0000
   220cc:	0002fec0 	.word	0x0002fec0
   220d0:	00008ca8 	.word	0x00008ca8

000220d4 <OSL_Dll_GetSymbolByName_Init>:
   220d4:	b40f      	push	{r0, r1, r2, r3}
   220d6:	2002      	movs	r0, #2
   220d8:	4904      	ldr	r1, [pc, #16]	; (220ec <OSL_Dll_GetSymbolByName+0xe>)
   220da:	4a05      	ldr	r2, [pc, #20]	; (220f0 <OSL_Dll_GetSymbolByName+0x12>)
   220dc:	4710      	bx	r2

000220de <OSL_Dll_GetSymbolByName>:
   220de:	b401      	push	{r0}
   220e0:	4802      	ldr	r0, [pc, #8]	; (220ec <OSL_Dll_GetSymbolByName+0xe>)
   220e2:	6800      	ldr	r0, [r0, #0]
   220e4:	4684      	mov	ip, r0
   220e6:	bc01      	pop	{r0}
   220e8:	4760      	bx	ip
   220ea:	0000      	.short	0x0000
   220ec:	0002fec4 	.word	0x0002fec4
   220f0:	00008ca8 	.word	0x00008ca8

000220f4 <OSL_Dll_IsPresent_Init>:
   220f4:	b40f      	push	{r0, r1, r2, r3}
   220f6:	201c      	movs	r0, #28
   220f8:	4904      	ldr	r1, [pc, #16]	; (2210c <OSL_Dll_IsPresent+0xe>)
   220fa:	4a05      	ldr	r2, [pc, #20]	; (22110 <OSL_Dll_IsPresent+0x12>)
   220fc:	4710      	bx	r2

000220fe <OSL_Dll_IsPresent>:
   220fe:	b401      	push	{r0}
   22100:	4802      	ldr	r0, [pc, #8]	; (2210c <OSL_Dll_IsPresent+0xe>)
   22102:	6800      	ldr	r0, [r0, #0]
   22104:	4684      	mov	ip, r0
   22106:	bc01      	pop	{r0}
   22108:	4760      	bx	ip
   2210a:	0000      	.short	0x0000
   2210c:	0002fec8 	.word	0x0002fec8
   22110:	00008ca8 	.word	0x00008ca8

00022114 <OSL_Dll_Open_Init>:
   22114:	b40f      	push	{r0, r1, r2, r3}
   22116:	2000      	movs	r0, #0
   22118:	4904      	ldr	r1, [pc, #16]	; (2212c <OSL_Dll_Open+0xe>)
   2211a:	4a05      	ldr	r2, [pc, #20]	; (22130 <OSL_Dll_Open+0x12>)
   2211c:	4710      	bx	r2

0002211e <OSL_Dll_Open>:
   2211e:	b401      	push	{r0}
   22120:	4802      	ldr	r0, [pc, #8]	; (2212c <OSL_Dll_Open+0xe>)
   22122:	6800      	ldr	r0, [r0, #0]
   22124:	4684      	mov	ip, r0
   22126:	bc01      	pop	{r0}
   22128:	4760      	bx	ip
   2212a:	0000      	.short	0x0000
   2212c:	0002fecc 	.word	0x0002fecc
   22130:	00008ca8 	.word	0x00008ca8

00022134 <OSL_Dll_OpenByAppliType_Init>:
   22134:	b40f      	push	{r0, r1, r2, r3}
   22136:	201d      	movs	r0, #29
   22138:	4904      	ldr	r1, [pc, #16]	; (2214c <OSL_Dll_OpenByAppliType+0xe>)
   2213a:	4a05      	ldr	r2, [pc, #20]	; (22150 <OSL_Dll_OpenByAppliType+0x12>)
   2213c:	4710      	bx	r2

0002213e <OSL_Dll_OpenByAppliType>:
   2213e:	b401      	push	{r0}
   22140:	4802      	ldr	r0, [pc, #8]	; (2214c <OSL_Dll_OpenByAppliType+0xe>)
   22142:	6800      	ldr	r0, [r0, #0]
   22144:	4684      	mov	ip, r0
   22146:	bc01      	pop	{r0}
   22148:	4760      	bx	ip
   2214a:	0000      	.short	0x0000
   2214c:	0002fed0 	.word	0x0002fed0
   22150:	00008ca8 	.word	0x00008ca8

00022154 <OSL_TimeStp_ElapsedMs_Init>:
   22154:	b40f      	push	{r0, r1, r2, r3}
   22156:	201b      	movs	r0, #27
   22158:	4904      	ldr	r1, [pc, #16]	; (2216c <OSL_TimeStp_ElapsedMs+0xe>)
   2215a:	4a05      	ldr	r2, [pc, #20]	; (22170 <OSL_TimeStp_ElapsedMs+0x12>)
   2215c:	4710      	bx	r2

0002215e <OSL_TimeStp_ElapsedMs>:
   2215e:	b401      	push	{r0}
   22160:	4802      	ldr	r0, [pc, #8]	; (2216c <OSL_TimeStp_ElapsedMs+0xe>)
   22162:	6800      	ldr	r0, [r0, #0]
   22164:	4684      	mov	ip, r0
   22166:	bc01      	pop	{r0}
   22168:	4760      	bx	ip
   2216a:	0000      	.short	0x0000
   2216c:	0002fed4 	.word	0x0002fed4
   22170:	00008ca8 	.word	0x00008ca8

00022174 <OSL_TimeStp_Now_Init>:
   22174:	b40f      	push	{r0, r1, r2, r3}
   22176:	2019      	movs	r0, #25
   22178:	4904      	ldr	r1, [pc, #16]	; (2218c <OSL_TimeStp_Now+0xe>)
   2217a:	4a05      	ldr	r2, [pc, #20]	; (22190 <OSL_TimeStp_Now+0x12>)
   2217c:	4710      	bx	r2

0002217e <OSL_TimeStp_Now>:
   2217e:	b401      	push	{r0}
   22180:	4802      	ldr	r0, [pc, #8]	; (2218c <OSL_TimeStp_Now+0xe>)
   22182:	6800      	ldr	r0, [r0, #0]
   22184:	4684      	mov	ip, r0
   22186:	bc01      	pop	{r0}
   22188:	4760      	bx	ip
   2218a:	0000      	.short	0x0000
   2218c:	0002fed8 	.word	0x0002fed8
   22190:	00008ca8 	.word	0x00008ca8

00022194 <GTL_StdTimer_GetCurrent>:
   22194:	4b08      	ldr	r3, [pc, #32]	; (221b8 <GTL_StdTimer_GetCurrent+0x24>)
   22196:	b507      	push	{r0, r1, r2, lr}
   22198:	4a08      	ldr	r2, [pc, #32]	; (221bc <GTL_StdTimer_GetCurrent+0x28>)
   2219a:	447b      	add	r3, pc
   2219c:	589b      	ldr	r3, [r3, r2]
   2219e:	681a      	ldr	r2, [r3, #0]
   221a0:	9201      	str	r2, [sp, #4]
   221a2:	9a01      	ldr	r2, [sp, #4]
   221a4:	681b      	ldr	r3, [r3, #0]
   221a6:	429a      	cmp	r2, r3
   221a8:	d001      	beq.n	221ae <GTL_StdTimer_GetCurrent+0x1a>
   221aa:	f7e6 fefb 	bl	8fa4 <__stack_chk_fail>
   221ae:	b003      	add	sp, #12
   221b0:	f85d eb04 	ldr.w	lr, [sp], #4
   221b4:	f000 b98c 	b.w	224d0 <TMT_Retrieve_Clock>
   221b8:	0000cf7a 	.word	0x0000cf7a
   221bc:	000000ac 	.word	0x000000ac

000221c0 <GTL_StdTimer_GetElapsed>:
   221c0:	4b08      	ldr	r3, [pc, #32]	; (221e4 <GTL_StdTimer_GetElapsed+0x24>)
   221c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   221c4:	4a08      	ldr	r2, [pc, #32]	; (221e8 <GTL_StdTimer_GetElapsed+0x28>)
   221c6:	447b      	add	r3, pc
   221c8:	4605      	mov	r5, r0
   221ca:	589c      	ldr	r4, [r3, r2]
   221cc:	6823      	ldr	r3, [r4, #0]
   221ce:	9301      	str	r3, [sp, #4]
   221d0:	f000 f97e 	bl	224d0 <TMT_Retrieve_Clock>
   221d4:	9a01      	ldr	r2, [sp, #4]
   221d6:	6823      	ldr	r3, [r4, #0]
   221d8:	1b40      	subs	r0, r0, r5
   221da:	429a      	cmp	r2, r3
   221dc:	d001      	beq.n	221e2 <GTL_StdTimer_GetElapsed+0x22>
   221de:	f7e6 fee1 	bl	8fa4 <__stack_chk_fail>
   221e2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   221e4:	0000cf4e 	.word	0x0000cf4e
   221e8:	000000ac 	.word	0x000000ac

000221ec <GTL_StdTimer_GetRemaining>:
   221ec:	4b10      	ldr	r3, [pc, #64]	; (22230 <GTL_StdTimer_GetRemaining+0x44>)
   221ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   221f0:	4a10      	ldr	r2, [pc, #64]	; (22234 <GTL_StdTimer_GetRemaining+0x48>)
   221f2:	447b      	add	r3, pc
   221f4:	4606      	mov	r6, r0
   221f6:	589b      	ldr	r3, [r3, r2]
   221f8:	460c      	mov	r4, r1
   221fa:	681a      	ldr	r2, [r3, #0]
   221fc:	461d      	mov	r5, r3
   221fe:	9201      	str	r2, [sp, #4]
   22200:	4a0a      	ldr	r2, [pc, #40]	; (2222c <GTL_StdTimer_GetRemaining+0x40>)
   22202:	4291      	cmp	r1, r2
   22204:	d806      	bhi.n	22214 <GTL_StdTimer_GetRemaining+0x28>
   22206:	f000 f963 	bl	224d0 <TMT_Retrieve_Clock>
   2220a:	1b80      	subs	r0, r0, r6
   2220c:	42a0      	cmp	r0, r4
   2220e:	d204      	bcs.n	2221a <GTL_StdTimer_GetRemaining+0x2e>
   22210:	1a20      	subs	r0, r4, r0
   22212:	e003      	b.n	2221c <GTL_StdTimer_GetRemaining+0x30>
   22214:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   22218:	e000      	b.n	2221c <GTL_StdTimer_GetRemaining+0x30>
   2221a:	2000      	movs	r0, #0
   2221c:	9a01      	ldr	r2, [sp, #4]
   2221e:	682b      	ldr	r3, [r5, #0]
   22220:	429a      	cmp	r2, r3
   22222:	d001      	beq.n	22228 <GTL_StdTimer_GetRemaining+0x3c>
   22224:	f7e6 febe 	bl	8fa4 <__stack_chk_fail>
   22228:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   2222a:	bf00      	nop
   2222c:	7ffffffe 	.word	0x7ffffffe
   22230:	0000cf22 	.word	0x0000cf22
   22234:	000000ac 	.word	0x000000ac

00022238 <__libc_csu_init>:
   22238:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
   2223c:	e59f6050 	ldr	r6, [pc, #80]	; 22294 <__libc_csu_init+0x5c>
   22240:	e59f5050 	ldr	r5, [pc, #80]	; 22298 <__libc_csu_init+0x60>
   22244:	e08f6006 	add	r6, pc, r6
   22248:	e08f5005 	add	r5, pc, r5
   2224c:	e0656006 	rsb	r6, r5, r6
   22250:	e1a07000 	mov	r7, r0
   22254:	e1a08001 	mov	r8, r1
   22258:	e1a0a002 	mov	sl, r2
   2225c:	ebff9a3f 	bl	8b60 <_init>
   22260:	e1b06146 	asrs	r6, r6, #2
   22264:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, sl, pc}
   22268:	e2455004 	sub	r5, r5, #4
   2226c:	e3a04000 	mov	r4, #0
   22270:	e2844001 	add	r4, r4, #1
   22274:	e5b53004 	ldr	r3, [r5, #4]!
   22278:	e1a00007 	mov	r0, r7
   2227c:	e1a01008 	mov	r1, r8
   22280:	e1a0200a 	mov	r2, sl
   22284:	e12fff33 	blx	r3
   22288:	e1540006 	cmp	r4, r6
   2228c:	1afffff7 	bne	22270 <__libc_csu_init+0x38>
   22290:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, sl, pc}
   22294:	0000cdbc 	.word	0x0000cdbc
   22298:	0000cdb0 	.word	0x0000cdb0

0002229c <__libc_csu_fini>:
   2229c:	e12fff1e 	bx	lr

000222a0 <__aeabi_uidiv>:
   222a0:	e2512001 	subs	r2, r1, #1
   222a4:	012fff1e 	bxeq	lr
   222a8:	3a000074 	bcc	22480 <__aeabi_uidiv+0x1e0>
   222ac:	e1500001 	cmp	r0, r1
   222b0:	9a00006b 	bls	22464 <__aeabi_uidiv+0x1c4>
   222b4:	e1110002 	tst	r1, r2
   222b8:	0a00006c 	beq	22470 <__aeabi_uidiv+0x1d0>
   222bc:	e16f3f10 	clz	r3, r0
   222c0:	e16f2f11 	clz	r2, r1
   222c4:	e0423003 	sub	r3, r2, r3
   222c8:	e273301f 	rsbs	r3, r3, #31
   222cc:	10833083 	addne	r3, r3, r3, lsl #1
   222d0:	e3a02000 	mov	r2, #0
   222d4:	108ff103 	addne	pc, pc, r3, lsl #2
   222d8:	e320f000 	nop	{0}
   222dc:	e1500f81 	cmp	r0, r1, lsl #31
   222e0:	e0a22002 	adc	r2, r2, r2
   222e4:	20400f81 	subcs	r0, r0, r1, lsl #31
   222e8:	e1500f01 	cmp	r0, r1, lsl #30
   222ec:	e0a22002 	adc	r2, r2, r2
   222f0:	20400f01 	subcs	r0, r0, r1, lsl #30
   222f4:	e1500e81 	cmp	r0, r1, lsl #29
   222f8:	e0a22002 	adc	r2, r2, r2
   222fc:	20400e81 	subcs	r0, r0, r1, lsl #29
   22300:	e1500e01 	cmp	r0, r1, lsl #28
   22304:	e0a22002 	adc	r2, r2, r2
   22308:	20400e01 	subcs	r0, r0, r1, lsl #28
   2230c:	e1500d81 	cmp	r0, r1, lsl #27
   22310:	e0a22002 	adc	r2, r2, r2
   22314:	20400d81 	subcs	r0, r0, r1, lsl #27
   22318:	e1500d01 	cmp	r0, r1, lsl #26
   2231c:	e0a22002 	adc	r2, r2, r2
   22320:	20400d01 	subcs	r0, r0, r1, lsl #26
   22324:	e1500c81 	cmp	r0, r1, lsl #25
   22328:	e0a22002 	adc	r2, r2, r2
   2232c:	20400c81 	subcs	r0, r0, r1, lsl #25
   22330:	e1500c01 	cmp	r0, r1, lsl #24
   22334:	e0a22002 	adc	r2, r2, r2
   22338:	20400c01 	subcs	r0, r0, r1, lsl #24
   2233c:	e1500b81 	cmp	r0, r1, lsl #23
   22340:	e0a22002 	adc	r2, r2, r2
   22344:	20400b81 	subcs	r0, r0, r1, lsl #23
   22348:	e1500b01 	cmp	r0, r1, lsl #22
   2234c:	e0a22002 	adc	r2, r2, r2
   22350:	20400b01 	subcs	r0, r0, r1, lsl #22
   22354:	e1500a81 	cmp	r0, r1, lsl #21
   22358:	e0a22002 	adc	r2, r2, r2
   2235c:	20400a81 	subcs	r0, r0, r1, lsl #21
   22360:	e1500a01 	cmp	r0, r1, lsl #20
   22364:	e0a22002 	adc	r2, r2, r2
   22368:	20400a01 	subcs	r0, r0, r1, lsl #20
   2236c:	e1500981 	cmp	r0, r1, lsl #19
   22370:	e0a22002 	adc	r2, r2, r2
   22374:	20400981 	subcs	r0, r0, r1, lsl #19
   22378:	e1500901 	cmp	r0, r1, lsl #18
   2237c:	e0a22002 	adc	r2, r2, r2
   22380:	20400901 	subcs	r0, r0, r1, lsl #18
   22384:	e1500881 	cmp	r0, r1, lsl #17
   22388:	e0a22002 	adc	r2, r2, r2
   2238c:	20400881 	subcs	r0, r0, r1, lsl #17
   22390:	e1500801 	cmp	r0, r1, lsl #16
   22394:	e0a22002 	adc	r2, r2, r2
   22398:	20400801 	subcs	r0, r0, r1, lsl #16
   2239c:	e1500781 	cmp	r0, r1, lsl #15
   223a0:	e0a22002 	adc	r2, r2, r2
   223a4:	20400781 	subcs	r0, r0, r1, lsl #15
   223a8:	e1500701 	cmp	r0, r1, lsl #14
   223ac:	e0a22002 	adc	r2, r2, r2
   223b0:	20400701 	subcs	r0, r0, r1, lsl #14
   223b4:	e1500681 	cmp	r0, r1, lsl #13
   223b8:	e0a22002 	adc	r2, r2, r2
   223bc:	20400681 	subcs	r0, r0, r1, lsl #13
   223c0:	e1500601 	cmp	r0, r1, lsl #12
   223c4:	e0a22002 	adc	r2, r2, r2
   223c8:	20400601 	subcs	r0, r0, r1, lsl #12
   223cc:	e1500581 	cmp	r0, r1, lsl #11
   223d0:	e0a22002 	adc	r2, r2, r2
   223d4:	20400581 	subcs	r0, r0, r1, lsl #11
   223d8:	e1500501 	cmp	r0, r1, lsl #10
   223dc:	e0a22002 	adc	r2, r2, r2
   223e0:	20400501 	subcs	r0, r0, r1, lsl #10
   223e4:	e1500481 	cmp	r0, r1, lsl #9
   223e8:	e0a22002 	adc	r2, r2, r2
   223ec:	20400481 	subcs	r0, r0, r1, lsl #9
   223f0:	e1500401 	cmp	r0, r1, lsl #8
   223f4:	e0a22002 	adc	r2, r2, r2
   223f8:	20400401 	subcs	r0, r0, r1, lsl #8
   223fc:	e1500381 	cmp	r0, r1, lsl #7
   22400:	e0a22002 	adc	r2, r2, r2
   22404:	20400381 	subcs	r0, r0, r1, lsl #7
   22408:	e1500301 	cmp	r0, r1, lsl #6
   2240c:	e0a22002 	adc	r2, r2, r2
   22410:	20400301 	subcs	r0, r0, r1, lsl #6
   22414:	e1500281 	cmp	r0, r1, lsl #5
   22418:	e0a22002 	adc	r2, r2, r2
   2241c:	20400281 	subcs	r0, r0, r1, lsl #5
   22420:	e1500201 	cmp	r0, r1, lsl #4
   22424:	e0a22002 	adc	r2, r2, r2
   22428:	20400201 	subcs	r0, r0, r1, lsl #4
   2242c:	e1500181 	cmp	r0, r1, lsl #3
   22430:	e0a22002 	adc	r2, r2, r2
   22434:	20400181 	subcs	r0, r0, r1, lsl #3
   22438:	e1500101 	cmp	r0, r1, lsl #2
   2243c:	e0a22002 	adc	r2, r2, r2
   22440:	20400101 	subcs	r0, r0, r1, lsl #2
   22444:	e1500081 	cmp	r0, r1, lsl #1
   22448:	e0a22002 	adc	r2, r2, r2
   2244c:	20400081 	subcs	r0, r0, r1, lsl #1
   22450:	e1500001 	cmp	r0, r1
   22454:	e0a22002 	adc	r2, r2, r2
   22458:	20400001 	subcs	r0, r0, r1
   2245c:	e1a00002 	mov	r0, r2
   22460:	e12fff1e 	bx	lr
   22464:	03a00001 	moveq	r0, #1
   22468:	13a00000 	movne	r0, #0
   2246c:	e12fff1e 	bx	lr
   22470:	e16f2f11 	clz	r2, r1
   22474:	e262201f 	rsb	r2, r2, #31
   22478:	e1a00230 	lsr	r0, r0, r2
   2247c:	e12fff1e 	bx	lr
   22480:	e3500000 	cmp	r0, #0
   22484:	13e00000 	mvnne	r0, #0
   22488:	ea000007 	b	224ac <__aeabi_idiv0>

0002248c <__aeabi_uidivmod>:
   2248c:	e3510000 	cmp	r1, #0
   22490:	0afffffa 	beq	22480 <__aeabi_uidiv+0x1e0>
   22494:	e92d4003 	push	{r0, r1, lr}
   22498:	ebffff80 	bl	222a0 <__aeabi_uidiv>
   2249c:	e8bd4006 	pop	{r1, r2, lr}
   224a0:	e0030092 	mul	r3, r2, r0
   224a4:	e0411003 	sub	r1, r1, r3
   224a8:	e12fff1e 	bx	lr

000224ac <__aeabi_idiv0>:
   224ac:	e92d4002 	push	{r1, lr}
   224b0:	e3a00008 	mov	r0, #8
   224b4:	ebff99ec 	bl	8c6c <_init+0x10c>
   224b8:	e8bd8002 	pop	{r1, pc}

000224bc <function_name>:
   224bc:	5f544d54 	.word	0x5f544d54
   224c0:	72746552 	.word	0x72746552
   224c4:	65766569 	.word	0x65766569
   224c8:	6f6c435f 	.word	0x6f6c435f
   224cc:	6b63      	.short	0x6b63
	...

000224d0 <TMT_Retrieve_Clock>:
   224d0:	b408      	push	{r3}
   224d2:	4b0f      	ldr	r3, [pc, #60]	; (22510 <.direct_call+0x6>)
   224d4:	681b      	ldr	r3, [r3, #0]
   224d6:	2b00      	cmp	r3, #0
   224d8:	d117      	bne.n	2250a <.direct_call>
   224da:	b507      	push	{r0, r1, r2, lr}
   224dc:	f7fe ff1c 	bl	21318 <wrapperlib_open>
   224e0:	2800      	cmp	r0, #0
   224e2:	d008      	beq.n	224f6 <.bad_return>
   224e4:	4684      	mov	ip, r0
   224e6:	480b      	ldr	r0, [pc, #44]	; (22514 <.direct_call+0xa>)
   224e8:	f000 f80e 	bl	22508 <.call_function>
   224ec:	2800      	cmp	r0, #0
   224ee:	d002      	beq.n	224f6 <.bad_return>
   224f0:	4907      	ldr	r1, [pc, #28]	; (22510 <.direct_call+0x6>)
   224f2:	6008      	str	r0, [r1, #0]
   224f4:	e004      	b.n	22500 <.already_initialized>

000224f6 <.bad_return>:
   224f6:	bc0f      	pop	{r0, r1, r2, r3}
   224f8:	4807      	ldr	r0, [pc, #28]	; (22518 <.direct_call+0xe>)
   224fa:	469e      	mov	lr, r3
   224fc:	bc08      	pop	{r3}
   224fe:	4770      	bx	lr

00022500 <.already_initialized>:
   22500:	4684      	mov	ip, r0
   22502:	bc0f      	pop	{r0, r1, r2, r3}
   22504:	469e      	mov	lr, r3
   22506:	bc08      	pop	{r3}

00022508 <.call_function>:
   22508:	4760      	bx	ip

0002250a <.direct_call>:
   2250a:	469c      	mov	ip, r3
   2250c:	bc08      	pop	{r3}
   2250e:	4760      	bx	ip
   22510:	0002fedc 	.word	0x0002fedc
   22514:	000224bc 	.word	0x000224bc
   22518:	ffffffff 	.word	0xffffffff

Disassembly of section .fini:

0002251c <_fini>:
   2251c:	e92d4008 	push	{r3, lr}
   22520:	e8bd8008 	pop	{r3, pc}
