/**
 * Menu.c
 *
 * This file manage the menu.
 *
 */

#include "sdk_tplus.h"

#include "Menu.h"
#include "Training.h"

/*+************* #DEFINES **************************************************+*/

/*+************* CONSTANTS *************************************************+*/

/*+************* STRUCTURES ************************************************+*/


/*+************* VARIABLES *************************************************+*/
static Telium_File_t *sKeyboard = NULL;
static Telium_File_t *sDisplay = NULL;
Telium_File_t *hTsc=NULL;          // Handle of the peripheral Touch Screen
Telium_File_t *hPrn=NULL;          // Handle of the peripheral Printer

// Disable header, footer, led in order to Maximize canvas size
int sSavedStatusHeader, sSavedStatusLeds, sSavedStatusFooter;


/*+************* FUNCTION PROTOTYPES ***************************************+*/
/**
 * Main menu
 *
 */
void menuGoalDisplay(void)
{
	char choice = 0;

	const char *MenuUser[] =
	{ "Send GPRS message", "Configure GPRS", "CARD TRANSACTION", "Function 4", "Function 5", "Exit", 0 };

	initUIContext(_OFF_);

	do
	{
		//Display the menu using GOAL
		choice = GL_Dialog_Menu(gGoalGraphicLibInstance, "Select", MenuUser, choice, GL_BUTTON_NONE , GL_KEY_0, GL_TIME_INFINITE);

		switch (choice)
		{
		case 0:
			// Send sample message
			ComGPRS();
			break;
		case 1:
			// Configure GPRS
			PromptGPRS();

			GL_Dialog_Message(gGoalGraphicLibInstance, "GPRS Configuration",
					"Configuration\nDONE...", GL_ICON_INFORMATION, GL_BUTTON_VALID,
					2 * GL_TIME_SECOND);
			break;
		case 2:



			// Displays a GOAL dialog during 2s
			GL_Dialog_Message(gGoalGraphicLibInstance, "Card Transaction",
					"FINISHED\n\nThank You...", GL_ICON_INFORMATION, GL_BUTTON_VALID,
					2 * GL_TIME_SECOND);
			break;
		case 3:
			// Displays a GOAL dialog during 2s
			GL_Dialog_Message(gGoalGraphicLibInstance, "Function4",
					"Function4\nRunning...", GL_ICON_INFORMATION, GL_BUTTON_VALID,
					2 * GL_TIME_SECOND);
			break;
		case 4:
			// Displays a GOAL dialog during 2s
			GL_Dialog_Message(gGoalGraphicLibInstance, "Function5",
					"Function5\nRunning...", GL_ICON_INFORMATION, GL_BUTTON_VALID,
					2 * GL_TIME_SECOND);
			break;
		default:
			//exit
			break;
		}
	} while (choice != 5);

	releaseUIContext();

	return;
}


/**
 * Initialize the display context to maximize the canvas on user area
 */
void initUIContext(int displayHeaderFooterLeds)
{
	if(displayHeaderFooterLeds != _OFF_ && displayHeaderFooterLeds != _ON_) {
		displayHeaderFooterLeds = _OFF_;
	}
	sSavedStatusHeader=DisplayHeader(displayHeaderFooterLeds);
	sSavedStatusLeds=DisplayLeds(displayHeaderFooterLeds);
	sSavedStatusFooter=DisplayFooter(displayHeaderFooterLeds);

	// Open display
	sDisplay = Telium_Fopen("DISPLAY", "w*");
	// Open keyboard
	sKeyboard = Telium_Fopen("KEYBOARD", "r*");


#ifndef __TELIUM3__
	hPrn = Telium_Stdperif("PRINTER", NULL);  // Check "PRINTER" peripheral already opened? (done by Manager)
	if (hPrn == NULL) {                       // No, then open it

		hPrn = Telium_Fopen("PRINTER", "w-*");// Open "printer" peripheral
		CHECK(hPrn!=NULL, lblKO1);
	}
	lblKO1:;
#endif

	if(GL_GraphicLib_IsTouchPresent(gGoalGraphicLibInstance)) { // Check if it is a touch screen
		DisplayFooter(_OFF_);                 // Remove footer otherwise touch does not work
		hTsc = Telium_Stdperif("TSCREEN", NULL);             // Check "TSCREEN" peripheral opened?
		if(hTsc == NULL){
			hTsc = Telium_Fopen("TSCREEN", "r*"); // Open "touch" peripheral
			CHECK(hTsc!=NULL, lblKO);
		}
		lblKO:;
	}

	return;
}

/**
 * Restore display context
 */
void releaseUIContext(void)
{
	// close keyboard
	if (sKeyboard)
	{
		Telium_Fclose(sKeyboard);
		sKeyboard = NULL;
	}
	// close display
	if (sDisplay)
	{
		Telium_Fclose(sDisplay);
		sDisplay = NULL;
	}

	// Close peripherals
	// *****************
	if(hTsc) {
		Telium_Fclose(hTsc); // Close "touch" peripheral
		hTsc=NULL;
	}

	if(hPrn) {
		Telium_Fclose(hPrn); // Close "printer" peripheral
		hPrn=NULL;
	}

	// Restore display context
	DisplayHeader(sSavedStatusHeader);
	DisplayLeds(sSavedStatusLeds);
	DisplayFooter(sSavedStatusFooter);

	return;
}


//****************************************************************************
// To reset standard peripherals
//****************************************************************************
void ResetPeripherals(unsigned int uiEvents) {
	// Local variables
	// ***************
	// Empty

	// Reset FIFO buffers
	// ******************
	if(((uiEvents & KEYBOARD) == KEYBOARD) && sKeyboard) // FIFO keyboard
		Telium_Reset_buf(sKeyboard, _receive_id);

	if(((uiEvents & TSCREEN) == TSCREEN) && hTsc)   // FIFO touch screen
		Telium_Reset_buf(hTsc, _receive_id);

	if(((uiEvents & PRINTER) == PRINTER) && hPrn)   // FIFO printer
		Telium_Reset_buf(hPrn, _receive_id);
}



